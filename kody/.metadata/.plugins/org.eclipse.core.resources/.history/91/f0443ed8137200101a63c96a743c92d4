/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdbool.h"
#include "bma400.h"
#include "math.h"
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define SAMPLE_WINDOW 10
#define MOTION_THRESHOLD 300.0f
#define DEBOUNCE_TIME_MS 1000
#define WARMUP_SAMPLES 10
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
float sample_buffer[SAMPLE_WINDOW] = {0};
uint8_t sample_index = 0;
float ave_min = 0.0f;
float ave_max = 0.0f;
bool motion_detected = false;
bool motion_active = false;
uint32_t debounce_start_time = 0;
volatile uint16_t motion_time = 0;
volatile uint8_t flag_2sec = 0;
volatile uint16_t send_2sec = 0;
uint8_t warmup_counter = 0;

struct bma400_dev bma400 = {
	.intf = BMA400_I2C_INTF,
	.intf_ptr = &hi2c1,
	.read = user_i2c_read,
	.write = user_i2c_write,
	.delay_us = user_delay_us
};

typedef enum {
    MOTION_IDLE,
    MOTION_DEBOUNCE_START,
    MOTION_RUNNING,
    MOTION_DEBOUNCE_STOP
} motion_state_t;

motion_state_t motion_state = MOTION_IDLE;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enterStandby(void)
{
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
  	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
    HAL_PWR_EnterSTANDBYMode();
}

// Configure BMA400 for low power + wake-up on Y-axis motion
void configureBMA400(struct bma400_dev *dev)
{
	bma400_set_power_mode(BMA400_MODE_NORMAL, dev);

	struct bma400_device_conf dev_conf[] = {
		{
			.type = BMA400_AUTO_LOW_POWER,	// auto low power after movement stops (350 ms)
			.param.auto_lp = {
				.auto_low_power_trigger = BMA400_AUTO_LP_GEN1_TRIGGER | BMA400_AUTO_LP_TIMEOUT_EN | BMA400_AUTO_LP_TIME_RESET_EN,
				.auto_lp_timeout_threshold = 20000	// 200 x 2.5 ms =  500 ms
			}
		},
		{
			.type = BMA400_AUTOWAKEUP_INT,	// wake-up interrupt on motion detection on Y axis
			.param.wakeup = {
				.wakeup_ref_update = BMA400_UPDATE_EVERY_TIME,
				.sample_count = BMA400_SAMPLE_COUNT_3,
				.wakeup_axes_en = BMA400_AXIS_Y_EN,
				.int_wkup_threshold = 5,				// 5 mg threshold
				.int_chan = BMA400_INT_CHANNEL_1
			}
		},
		{
			.type = BMA400_INT_PIN_CONF,	// configure interrupt pin
			.param.int_conf = {
				.int_chan = BMA400_INT_CHANNEL_1,
				.pin_conf = BMA400_INT_OPEN_DRAIN_ACTIVE_0
			}
		}
	};

	bma400_set_device_conf(dev_conf, 3, dev);

	struct bma400_sensor_conf sensor_conf = {
		.type = BMA400_ACCEL,	// configure accelerometer
		.param.accel = {
			.range = BMA400_RANGE_2G,
			.data_src = BMA400_DATA_SRC_ACCEL_FILT_2,
			.osr = BMA400_ACCEL_OSR_SETTING_3,
			.odr = BMA400_ODR_800HZ
		}
	};

	bma400_set_sensor_conf(&sensor_conf, 1, dev);
	set_auto_wakeup(BMA400_ENABLE, dev);	// enable auto wake up
}

float calc_average(float *buf, uint8_t size)
{
    float sum = 0.0f;
    for (uint8_t i = 0; i < size; i++)
        sum += buf[i];
    return sum / size;
}

void Send16BitESP(UART_HandleTypeDef *huart, uint16_t value) {
	char msg[16];
	snprintf(msg, sizeof(msg), "%u\n", value);

	//HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, SET);
	//HAL_Delay(300);
	HAL_UART_Transmit(huart, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	//HAL_Delay(10);
	//HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, RESET);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  MX_TIM14_Init();
  MX_TIM16_Init();
  /* USER CODE BEGIN 2 */
  bma400_init(&bma400);
  configureBMA400(&bma400);
  HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, SET);
  HAL_Delay(300);
  Send16BitESP(&huart1, 111);
  HAL_TIM_Base_Start_IT(&htim14);

  for (int i = 0; i < SAMPLE_WINDOW; i++)
      sample_buffer[i] = 0.0f;

  ave_min = 0.0f;
  ave_max = 0.0f;
  sample_index = 0;
  motion_state = MOTION_IDLE;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_2sec)
	  {
	      flag_2sec = 0;
	      Send16BitESP(&huart1, send_2sec);
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM14)
	{
	    struct bma400_sensor_data sample;
	    if (bma400_get_accel_data(BMA400_DATA_ONLY, &sample, &bma400) == BMA400_OK)
	    {
	    	if (warmup_counter < WARMUP_SAMPLES)
	    	{
	    	    sample_buffer[sample_index++] = sample.y;
	    	    if (sample_index >= SAMPLE_WINDOW) sample_index = 0;
	    	    warmup_counter++;
	    	    return; // jeszcze nie analizujemy ruchu
	    	}

	        sample_buffer[sample_index++] = sample.y;
	        if (sample_index >= SAMPLE_WINDOW)
	            sample_index = 0;

	        float avg = calc_average(sample_buffer, SAMPLE_WINDOW);

	        // aktualizacja min/max
	        if (ave_min == 0.0f || avg < ave_min) ave_min = avg;
	        if (avg > ave_max) ave_max = avg;

	        float diff = ave_max - ave_min;

	        switch (motion_state)
	        {
	            case MOTION_IDLE:
	                if (diff >= MOTION_THRESHOLD)
	                {
	                    motion_state = MOTION_DEBOUNCE_START;
	                    debounce_start_time = HAL_GetTick();
	                    motion_time = 0;
	                    HAL_TIM_Base_Start_IT(&htim16);
	                }
	                break;

	            case MOTION_DEBOUNCE_START:
	                if ((HAL_GetTick() - debounce_start_time) >= DEBOUNCE_TIME_MS)
	                {
	                    motion_state = MOTION_RUNNING;
	                    ave_min = 0.0f;
	                    ave_max = 0.0f;
	                }
	                break;

	            case MOTION_RUNNING:
	                if (diff >= MOTION_THRESHOLD)
	                {
	                    motion_state = MOTION_DEBOUNCE_STOP;
	                    debounce_start_time = HAL_GetTick();
	                }
	                break;

	            case MOTION_DEBOUNCE_STOP:
	            	Send16BitESP(&huart1, motion_time);
	                if ((HAL_GetTick() - debounce_start_time) >= DEBOUNCE_TIME_MS)
	                {
	                    HAL_TIM_Base_Stop_IT(&htim16);
	                    motion_state = MOTION_IDLE;
	                    ave_min = 0.0f;
	                    ave_max = 0.0f;
	                    sample_index = 0;
	                }
	                break;
	        }
	    }
	}
    else if (htim->Instance == TIM16)
    {
        motion_time++;

        static uint16_t tick_counter = 0;
        tick_counter++;
        if (tick_counter >= 2000)
        {
            tick_counter = 0;
            flag_2sec = 1;
            send_2sec = motion_time;
        }
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
  while (1)
  {

  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
