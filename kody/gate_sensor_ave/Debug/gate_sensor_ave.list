
gate_sensor_ave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800475c  0800475c  0000575c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004874  08004874  0000607c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004874  08004874  0000607c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004874  08004874  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004874  08004874  00005874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004878  08004878  00005878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800487c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000007c  080048f8  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080048f8  000063cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f13d  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ff  00000000  00000000  000251e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001126b  00000000  00000000  000286e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  00039950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb8  00000000  00000000  0003ac78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015f12  00000000  00000000  0003bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ded  00000000  00000000  00051b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085cb6  00000000  00000000  0007292f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f85e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b40  00000000  00000000  000f8628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000fc168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004744 	.word	0x08004744

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08004744 	.word	0x08004744

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cfrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0008      	movs	r0, r1
 800041c:	4661      	mov	r1, ip
 800041e:	e7ff      	b.n	8000420 <__aeabi_cfcmpeq>

08000420 <__aeabi_cfcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 f8a3 	bl	800056c <__lesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cfcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_fcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 f82b 	bl	800048c <__eqsf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_fcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f895 	bl	800056c <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_fcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f88b 	bl	800056c <__lesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_fcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_fcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f839 	bl	80004dc <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_fcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_fcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 f82f 	bl	80004dc <__gesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_fcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__eqsf2>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	0042      	lsls	r2, r0, #1
 8000490:	024e      	lsls	r6, r1, #9
 8000492:	004c      	lsls	r4, r1, #1
 8000494:	0245      	lsls	r5, r0, #9
 8000496:	0a6d      	lsrs	r5, r5, #9
 8000498:	0e12      	lsrs	r2, r2, #24
 800049a:	0fc3      	lsrs	r3, r0, #31
 800049c:	0a76      	lsrs	r6, r6, #9
 800049e:	0e24      	lsrs	r4, r4, #24
 80004a0:	0fc9      	lsrs	r1, r1, #31
 80004a2:	2aff      	cmp	r2, #255	@ 0xff
 80004a4:	d010      	beq.n	80004c8 <__eqsf2+0x3c>
 80004a6:	2cff      	cmp	r4, #255	@ 0xff
 80004a8:	d00c      	beq.n	80004c4 <__eqsf2+0x38>
 80004aa:	2001      	movs	r0, #1
 80004ac:	42a2      	cmp	r2, r4
 80004ae:	d10a      	bne.n	80004c6 <__eqsf2+0x3a>
 80004b0:	42b5      	cmp	r5, r6
 80004b2:	d108      	bne.n	80004c6 <__eqsf2+0x3a>
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d00f      	beq.n	80004d8 <__eqsf2+0x4c>
 80004b8:	2a00      	cmp	r2, #0
 80004ba:	d104      	bne.n	80004c6 <__eqsf2+0x3a>
 80004bc:	0028      	movs	r0, r5
 80004be:	1e43      	subs	r3, r0, #1
 80004c0:	4198      	sbcs	r0, r3
 80004c2:	e000      	b.n	80004c6 <__eqsf2+0x3a>
 80004c4:	2001      	movs	r0, #1
 80004c6:	bd70      	pop	{r4, r5, r6, pc}
 80004c8:	2001      	movs	r0, #1
 80004ca:	2cff      	cmp	r4, #255	@ 0xff
 80004cc:	d1fb      	bne.n	80004c6 <__eqsf2+0x3a>
 80004ce:	4335      	orrs	r5, r6
 80004d0:	d1f9      	bne.n	80004c6 <__eqsf2+0x3a>
 80004d2:	404b      	eors	r3, r1
 80004d4:	0018      	movs	r0, r3
 80004d6:	e7f6      	b.n	80004c6 <__eqsf2+0x3a>
 80004d8:	2000      	movs	r0, #0
 80004da:	e7f4      	b.n	80004c6 <__eqsf2+0x3a>

080004dc <__gesf2>:
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	0042      	lsls	r2, r0, #1
 80004e0:	0244      	lsls	r4, r0, #9
 80004e2:	024d      	lsls	r5, r1, #9
 80004e4:	0fc3      	lsrs	r3, r0, #31
 80004e6:	0048      	lsls	r0, r1, #1
 80004e8:	0a64      	lsrs	r4, r4, #9
 80004ea:	0e12      	lsrs	r2, r2, #24
 80004ec:	0a6d      	lsrs	r5, r5, #9
 80004ee:	0e00      	lsrs	r0, r0, #24
 80004f0:	0fc9      	lsrs	r1, r1, #31
 80004f2:	2aff      	cmp	r2, #255	@ 0xff
 80004f4:	d018      	beq.n	8000528 <__gesf2+0x4c>
 80004f6:	28ff      	cmp	r0, #255	@ 0xff
 80004f8:	d00a      	beq.n	8000510 <__gesf2+0x34>
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	d11e      	bne.n	800053c <__gesf2+0x60>
 80004fe:	2800      	cmp	r0, #0
 8000500:	d10a      	bne.n	8000518 <__gesf2+0x3c>
 8000502:	2d00      	cmp	r5, #0
 8000504:	d029      	beq.n	800055a <__gesf2+0x7e>
 8000506:	2c00      	cmp	r4, #0
 8000508:	d12d      	bne.n	8000566 <__gesf2+0x8a>
 800050a:	0048      	lsls	r0, r1, #1
 800050c:	3801      	subs	r0, #1
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	2d00      	cmp	r5, #0
 8000512:	d125      	bne.n	8000560 <__gesf2+0x84>
 8000514:	2a00      	cmp	r2, #0
 8000516:	d101      	bne.n	800051c <__gesf2+0x40>
 8000518:	2c00      	cmp	r4, #0
 800051a:	d0f6      	beq.n	800050a <__gesf2+0x2e>
 800051c:	428b      	cmp	r3, r1
 800051e:	d019      	beq.n	8000554 <__gesf2+0x78>
 8000520:	2001      	movs	r0, #1
 8000522:	425b      	negs	r3, r3
 8000524:	4318      	orrs	r0, r3
 8000526:	e7f2      	b.n	800050e <__gesf2+0x32>
 8000528:	2c00      	cmp	r4, #0
 800052a:	d119      	bne.n	8000560 <__gesf2+0x84>
 800052c:	28ff      	cmp	r0, #255	@ 0xff
 800052e:	d1f7      	bne.n	8000520 <__gesf2+0x44>
 8000530:	2d00      	cmp	r5, #0
 8000532:	d115      	bne.n	8000560 <__gesf2+0x84>
 8000534:	2000      	movs	r0, #0
 8000536:	428b      	cmp	r3, r1
 8000538:	d1f2      	bne.n	8000520 <__gesf2+0x44>
 800053a:	e7e8      	b.n	800050e <__gesf2+0x32>
 800053c:	2800      	cmp	r0, #0
 800053e:	d0ef      	beq.n	8000520 <__gesf2+0x44>
 8000540:	428b      	cmp	r3, r1
 8000542:	d1ed      	bne.n	8000520 <__gesf2+0x44>
 8000544:	4282      	cmp	r2, r0
 8000546:	dceb      	bgt.n	8000520 <__gesf2+0x44>
 8000548:	db04      	blt.n	8000554 <__gesf2+0x78>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d8e8      	bhi.n	8000520 <__gesf2+0x44>
 800054e:	2000      	movs	r0, #0
 8000550:	42ac      	cmp	r4, r5
 8000552:	d2dc      	bcs.n	800050e <__gesf2+0x32>
 8000554:	0058      	lsls	r0, r3, #1
 8000556:	3801      	subs	r0, #1
 8000558:	e7d9      	b.n	800050e <__gesf2+0x32>
 800055a:	2c00      	cmp	r4, #0
 800055c:	d0d7      	beq.n	800050e <__gesf2+0x32>
 800055e:	e7df      	b.n	8000520 <__gesf2+0x44>
 8000560:	2002      	movs	r0, #2
 8000562:	4240      	negs	r0, r0
 8000564:	e7d3      	b.n	800050e <__gesf2+0x32>
 8000566:	428b      	cmp	r3, r1
 8000568:	d1da      	bne.n	8000520 <__gesf2+0x44>
 800056a:	e7ee      	b.n	800054a <__gesf2+0x6e>

0800056c <__lesf2>:
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	0042      	lsls	r2, r0, #1
 8000570:	0244      	lsls	r4, r0, #9
 8000572:	024d      	lsls	r5, r1, #9
 8000574:	0fc3      	lsrs	r3, r0, #31
 8000576:	0048      	lsls	r0, r1, #1
 8000578:	0a64      	lsrs	r4, r4, #9
 800057a:	0e12      	lsrs	r2, r2, #24
 800057c:	0a6d      	lsrs	r5, r5, #9
 800057e:	0e00      	lsrs	r0, r0, #24
 8000580:	0fc9      	lsrs	r1, r1, #31
 8000582:	2aff      	cmp	r2, #255	@ 0xff
 8000584:	d017      	beq.n	80005b6 <__lesf2+0x4a>
 8000586:	28ff      	cmp	r0, #255	@ 0xff
 8000588:	d00a      	beq.n	80005a0 <__lesf2+0x34>
 800058a:	2a00      	cmp	r2, #0
 800058c:	d11b      	bne.n	80005c6 <__lesf2+0x5a>
 800058e:	2800      	cmp	r0, #0
 8000590:	d10a      	bne.n	80005a8 <__lesf2+0x3c>
 8000592:	2d00      	cmp	r5, #0
 8000594:	d01d      	beq.n	80005d2 <__lesf2+0x66>
 8000596:	2c00      	cmp	r4, #0
 8000598:	d12d      	bne.n	80005f6 <__lesf2+0x8a>
 800059a:	0048      	lsls	r0, r1, #1
 800059c:	3801      	subs	r0, #1
 800059e:	e011      	b.n	80005c4 <__lesf2+0x58>
 80005a0:	2d00      	cmp	r5, #0
 80005a2:	d10e      	bne.n	80005c2 <__lesf2+0x56>
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	d101      	bne.n	80005ac <__lesf2+0x40>
 80005a8:	2c00      	cmp	r4, #0
 80005aa:	d0f6      	beq.n	800059a <__lesf2+0x2e>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d10c      	bne.n	80005ca <__lesf2+0x5e>
 80005b0:	0058      	lsls	r0, r3, #1
 80005b2:	3801      	subs	r0, #1
 80005b4:	e006      	b.n	80005c4 <__lesf2+0x58>
 80005b6:	2c00      	cmp	r4, #0
 80005b8:	d103      	bne.n	80005c2 <__lesf2+0x56>
 80005ba:	28ff      	cmp	r0, #255	@ 0xff
 80005bc:	d105      	bne.n	80005ca <__lesf2+0x5e>
 80005be:	2d00      	cmp	r5, #0
 80005c0:	d015      	beq.n	80005ee <__lesf2+0x82>
 80005c2:	2002      	movs	r0, #2
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d106      	bne.n	80005d8 <__lesf2+0x6c>
 80005ca:	2001      	movs	r0, #1
 80005cc:	425b      	negs	r3, r3
 80005ce:	4318      	orrs	r0, r3
 80005d0:	e7f8      	b.n	80005c4 <__lesf2+0x58>
 80005d2:	2c00      	cmp	r4, #0
 80005d4:	d0f6      	beq.n	80005c4 <__lesf2+0x58>
 80005d6:	e7f8      	b.n	80005ca <__lesf2+0x5e>
 80005d8:	428b      	cmp	r3, r1
 80005da:	d1f6      	bne.n	80005ca <__lesf2+0x5e>
 80005dc:	4282      	cmp	r2, r0
 80005de:	dcf4      	bgt.n	80005ca <__lesf2+0x5e>
 80005e0:	dbe6      	blt.n	80005b0 <__lesf2+0x44>
 80005e2:	42ac      	cmp	r4, r5
 80005e4:	d8f1      	bhi.n	80005ca <__lesf2+0x5e>
 80005e6:	2000      	movs	r0, #0
 80005e8:	42ac      	cmp	r4, r5
 80005ea:	d2eb      	bcs.n	80005c4 <__lesf2+0x58>
 80005ec:	e7e0      	b.n	80005b0 <__lesf2+0x44>
 80005ee:	2000      	movs	r0, #0
 80005f0:	428b      	cmp	r3, r1
 80005f2:	d1ea      	bne.n	80005ca <__lesf2+0x5e>
 80005f4:	e7e6      	b.n	80005c4 <__lesf2+0x58>
 80005f6:	428b      	cmp	r3, r1
 80005f8:	d1e7      	bne.n	80005ca <__lesf2+0x5e>
 80005fa:	e7f2      	b.n	80005e2 <__lesf2+0x76>

080005fc <__aeabi_fsub>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	4647      	mov	r7, r8
 8000600:	46ce      	mov	lr, r9
 8000602:	0243      	lsls	r3, r0, #9
 8000604:	b580      	push	{r7, lr}
 8000606:	0a5f      	lsrs	r7, r3, #9
 8000608:	099b      	lsrs	r3, r3, #6
 800060a:	0045      	lsls	r5, r0, #1
 800060c:	004a      	lsls	r2, r1, #1
 800060e:	469c      	mov	ip, r3
 8000610:	024b      	lsls	r3, r1, #9
 8000612:	0fc4      	lsrs	r4, r0, #31
 8000614:	0fce      	lsrs	r6, r1, #31
 8000616:	0e2d      	lsrs	r5, r5, #24
 8000618:	0a58      	lsrs	r0, r3, #9
 800061a:	0e12      	lsrs	r2, r2, #24
 800061c:	0999      	lsrs	r1, r3, #6
 800061e:	2aff      	cmp	r2, #255	@ 0xff
 8000620:	d06b      	beq.n	80006fa <__aeabi_fsub+0xfe>
 8000622:	2301      	movs	r3, #1
 8000624:	405e      	eors	r6, r3
 8000626:	1aab      	subs	r3, r5, r2
 8000628:	42b4      	cmp	r4, r6
 800062a:	d04b      	beq.n	80006c4 <__aeabi_fsub+0xc8>
 800062c:	2b00      	cmp	r3, #0
 800062e:	dc00      	bgt.n	8000632 <__aeabi_fsub+0x36>
 8000630:	e0ff      	b.n	8000832 <__aeabi_fsub+0x236>
 8000632:	2a00      	cmp	r2, #0
 8000634:	d100      	bne.n	8000638 <__aeabi_fsub+0x3c>
 8000636:	e088      	b.n	800074a <__aeabi_fsub+0x14e>
 8000638:	2dff      	cmp	r5, #255	@ 0xff
 800063a:	d100      	bne.n	800063e <__aeabi_fsub+0x42>
 800063c:	e0ef      	b.n	800081e <__aeabi_fsub+0x222>
 800063e:	2280      	movs	r2, #128	@ 0x80
 8000640:	04d2      	lsls	r2, r2, #19
 8000642:	4311      	orrs	r1, r2
 8000644:	2001      	movs	r0, #1
 8000646:	2b1b      	cmp	r3, #27
 8000648:	dc08      	bgt.n	800065c <__aeabi_fsub+0x60>
 800064a:	0008      	movs	r0, r1
 800064c:	2220      	movs	r2, #32
 800064e:	40d8      	lsrs	r0, r3
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	4099      	lsls	r1, r3
 8000654:	000b      	movs	r3, r1
 8000656:	1e5a      	subs	r2, r3, #1
 8000658:	4193      	sbcs	r3, r2
 800065a:	4318      	orrs	r0, r3
 800065c:	4663      	mov	r3, ip
 800065e:	1a1b      	subs	r3, r3, r0
 8000660:	469c      	mov	ip, r3
 8000662:	4663      	mov	r3, ip
 8000664:	015b      	lsls	r3, r3, #5
 8000666:	d400      	bmi.n	800066a <__aeabi_fsub+0x6e>
 8000668:	e0cd      	b.n	8000806 <__aeabi_fsub+0x20a>
 800066a:	4663      	mov	r3, ip
 800066c:	019f      	lsls	r7, r3, #6
 800066e:	09bf      	lsrs	r7, r7, #6
 8000670:	0038      	movs	r0, r7
 8000672:	f000 fa77 	bl	8000b64 <__clzsi2>
 8000676:	003b      	movs	r3, r7
 8000678:	3805      	subs	r0, #5
 800067a:	4083      	lsls	r3, r0
 800067c:	4285      	cmp	r5, r0
 800067e:	dc00      	bgt.n	8000682 <__aeabi_fsub+0x86>
 8000680:	e0a2      	b.n	80007c8 <__aeabi_fsub+0x1cc>
 8000682:	4ab7      	ldr	r2, [pc, #732]	@ (8000960 <__aeabi_fsub+0x364>)
 8000684:	1a2d      	subs	r5, r5, r0
 8000686:	401a      	ands	r2, r3
 8000688:	4694      	mov	ip, r2
 800068a:	075a      	lsls	r2, r3, #29
 800068c:	d100      	bne.n	8000690 <__aeabi_fsub+0x94>
 800068e:	e0c3      	b.n	8000818 <__aeabi_fsub+0x21c>
 8000690:	220f      	movs	r2, #15
 8000692:	4013      	ands	r3, r2
 8000694:	2b04      	cmp	r3, #4
 8000696:	d100      	bne.n	800069a <__aeabi_fsub+0x9e>
 8000698:	e0be      	b.n	8000818 <__aeabi_fsub+0x21c>
 800069a:	2304      	movs	r3, #4
 800069c:	4698      	mov	r8, r3
 800069e:	44c4      	add	ip, r8
 80006a0:	4663      	mov	r3, ip
 80006a2:	015b      	lsls	r3, r3, #5
 80006a4:	d400      	bmi.n	80006a8 <__aeabi_fsub+0xac>
 80006a6:	e0b7      	b.n	8000818 <__aeabi_fsub+0x21c>
 80006a8:	1c68      	adds	r0, r5, #1
 80006aa:	2dfe      	cmp	r5, #254	@ 0xfe
 80006ac:	d000      	beq.n	80006b0 <__aeabi_fsub+0xb4>
 80006ae:	e0a5      	b.n	80007fc <__aeabi_fsub+0x200>
 80006b0:	20ff      	movs	r0, #255	@ 0xff
 80006b2:	2200      	movs	r2, #0
 80006b4:	05c0      	lsls	r0, r0, #23
 80006b6:	4310      	orrs	r0, r2
 80006b8:	07e4      	lsls	r4, r4, #31
 80006ba:	4320      	orrs	r0, r4
 80006bc:	bcc0      	pop	{r6, r7}
 80006be:	46b9      	mov	r9, r7
 80006c0:	46b0      	mov	r8, r6
 80006c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dc00      	bgt.n	80006ca <__aeabi_fsub+0xce>
 80006c8:	e1eb      	b.n	8000aa2 <__aeabi_fsub+0x4a6>
 80006ca:	2a00      	cmp	r2, #0
 80006cc:	d046      	beq.n	800075c <__aeabi_fsub+0x160>
 80006ce:	2dff      	cmp	r5, #255	@ 0xff
 80006d0:	d100      	bne.n	80006d4 <__aeabi_fsub+0xd8>
 80006d2:	e0a4      	b.n	800081e <__aeabi_fsub+0x222>
 80006d4:	2280      	movs	r2, #128	@ 0x80
 80006d6:	04d2      	lsls	r2, r2, #19
 80006d8:	4311      	orrs	r1, r2
 80006da:	2b1b      	cmp	r3, #27
 80006dc:	dc00      	bgt.n	80006e0 <__aeabi_fsub+0xe4>
 80006de:	e0fb      	b.n	80008d8 <__aeabi_fsub+0x2dc>
 80006e0:	2305      	movs	r3, #5
 80006e2:	4698      	mov	r8, r3
 80006e4:	002b      	movs	r3, r5
 80006e6:	44c4      	add	ip, r8
 80006e8:	4662      	mov	r2, ip
 80006ea:	08d7      	lsrs	r7, r2, #3
 80006ec:	2bff      	cmp	r3, #255	@ 0xff
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fsub+0xf6>
 80006f0:	e095      	b.n	800081e <__aeabi_fsub+0x222>
 80006f2:	027a      	lsls	r2, r7, #9
 80006f4:	0a52      	lsrs	r2, r2, #9
 80006f6:	b2d8      	uxtb	r0, r3
 80006f8:	e7dc      	b.n	80006b4 <__aeabi_fsub+0xb8>
 80006fa:	002b      	movs	r3, r5
 80006fc:	3bff      	subs	r3, #255	@ 0xff
 80006fe:	4699      	mov	r9, r3
 8000700:	2900      	cmp	r1, #0
 8000702:	d118      	bne.n	8000736 <__aeabi_fsub+0x13a>
 8000704:	2301      	movs	r3, #1
 8000706:	405e      	eors	r6, r3
 8000708:	42b4      	cmp	r4, r6
 800070a:	d100      	bne.n	800070e <__aeabi_fsub+0x112>
 800070c:	e0ca      	b.n	80008a4 <__aeabi_fsub+0x2a8>
 800070e:	464b      	mov	r3, r9
 8000710:	2b00      	cmp	r3, #0
 8000712:	d02d      	beq.n	8000770 <__aeabi_fsub+0x174>
 8000714:	2d00      	cmp	r5, #0
 8000716:	d000      	beq.n	800071a <__aeabi_fsub+0x11e>
 8000718:	e13c      	b.n	8000994 <__aeabi_fsub+0x398>
 800071a:	23ff      	movs	r3, #255	@ 0xff
 800071c:	4664      	mov	r4, ip
 800071e:	2c00      	cmp	r4, #0
 8000720:	d100      	bne.n	8000724 <__aeabi_fsub+0x128>
 8000722:	e15f      	b.n	80009e4 <__aeabi_fsub+0x3e8>
 8000724:	1e5d      	subs	r5, r3, #1
 8000726:	2b01      	cmp	r3, #1
 8000728:	d100      	bne.n	800072c <__aeabi_fsub+0x130>
 800072a:	e174      	b.n	8000a16 <__aeabi_fsub+0x41a>
 800072c:	0034      	movs	r4, r6
 800072e:	2bff      	cmp	r3, #255	@ 0xff
 8000730:	d074      	beq.n	800081c <__aeabi_fsub+0x220>
 8000732:	002b      	movs	r3, r5
 8000734:	e103      	b.n	800093e <__aeabi_fsub+0x342>
 8000736:	42b4      	cmp	r4, r6
 8000738:	d100      	bne.n	800073c <__aeabi_fsub+0x140>
 800073a:	e09c      	b.n	8000876 <__aeabi_fsub+0x27a>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d017      	beq.n	8000770 <__aeabi_fsub+0x174>
 8000740:	2d00      	cmp	r5, #0
 8000742:	d0ea      	beq.n	800071a <__aeabi_fsub+0x11e>
 8000744:	0007      	movs	r7, r0
 8000746:	0034      	movs	r4, r6
 8000748:	e06c      	b.n	8000824 <__aeabi_fsub+0x228>
 800074a:	2900      	cmp	r1, #0
 800074c:	d0cc      	beq.n	80006e8 <__aeabi_fsub+0xec>
 800074e:	1e5a      	subs	r2, r3, #1
 8000750:	2b01      	cmp	r3, #1
 8000752:	d02b      	beq.n	80007ac <__aeabi_fsub+0x1b0>
 8000754:	2bff      	cmp	r3, #255	@ 0xff
 8000756:	d062      	beq.n	800081e <__aeabi_fsub+0x222>
 8000758:	0013      	movs	r3, r2
 800075a:	e773      	b.n	8000644 <__aeabi_fsub+0x48>
 800075c:	2900      	cmp	r1, #0
 800075e:	d0c3      	beq.n	80006e8 <__aeabi_fsub+0xec>
 8000760:	1e5a      	subs	r2, r3, #1
 8000762:	2b01      	cmp	r3, #1
 8000764:	d100      	bne.n	8000768 <__aeabi_fsub+0x16c>
 8000766:	e11e      	b.n	80009a6 <__aeabi_fsub+0x3aa>
 8000768:	2bff      	cmp	r3, #255	@ 0xff
 800076a:	d058      	beq.n	800081e <__aeabi_fsub+0x222>
 800076c:	0013      	movs	r3, r2
 800076e:	e7b4      	b.n	80006da <__aeabi_fsub+0xde>
 8000770:	22fe      	movs	r2, #254	@ 0xfe
 8000772:	1c6b      	adds	r3, r5, #1
 8000774:	421a      	tst	r2, r3
 8000776:	d10d      	bne.n	8000794 <__aeabi_fsub+0x198>
 8000778:	2d00      	cmp	r5, #0
 800077a:	d060      	beq.n	800083e <__aeabi_fsub+0x242>
 800077c:	4663      	mov	r3, ip
 800077e:	2b00      	cmp	r3, #0
 8000780:	d000      	beq.n	8000784 <__aeabi_fsub+0x188>
 8000782:	e120      	b.n	80009c6 <__aeabi_fsub+0x3ca>
 8000784:	2900      	cmp	r1, #0
 8000786:	d000      	beq.n	800078a <__aeabi_fsub+0x18e>
 8000788:	e128      	b.n	80009dc <__aeabi_fsub+0x3e0>
 800078a:	2280      	movs	r2, #128	@ 0x80
 800078c:	2400      	movs	r4, #0
 800078e:	20ff      	movs	r0, #255	@ 0xff
 8000790:	03d2      	lsls	r2, r2, #15
 8000792:	e78f      	b.n	80006b4 <__aeabi_fsub+0xb8>
 8000794:	4663      	mov	r3, ip
 8000796:	1a5f      	subs	r7, r3, r1
 8000798:	017b      	lsls	r3, r7, #5
 800079a:	d500      	bpl.n	800079e <__aeabi_fsub+0x1a2>
 800079c:	e0fe      	b.n	800099c <__aeabi_fsub+0x3a0>
 800079e:	2f00      	cmp	r7, #0
 80007a0:	d000      	beq.n	80007a4 <__aeabi_fsub+0x1a8>
 80007a2:	e765      	b.n	8000670 <__aeabi_fsub+0x74>
 80007a4:	2400      	movs	r4, #0
 80007a6:	2000      	movs	r0, #0
 80007a8:	2200      	movs	r2, #0
 80007aa:	e783      	b.n	80006b4 <__aeabi_fsub+0xb8>
 80007ac:	4663      	mov	r3, ip
 80007ae:	1a59      	subs	r1, r3, r1
 80007b0:	014b      	lsls	r3, r1, #5
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_fsub+0x1ba>
 80007b4:	e119      	b.n	80009ea <__aeabi_fsub+0x3ee>
 80007b6:	018f      	lsls	r7, r1, #6
 80007b8:	09bf      	lsrs	r7, r7, #6
 80007ba:	0038      	movs	r0, r7
 80007bc:	f000 f9d2 	bl	8000b64 <__clzsi2>
 80007c0:	003b      	movs	r3, r7
 80007c2:	3805      	subs	r0, #5
 80007c4:	4083      	lsls	r3, r0
 80007c6:	2501      	movs	r5, #1
 80007c8:	2220      	movs	r2, #32
 80007ca:	1b40      	subs	r0, r0, r5
 80007cc:	3001      	adds	r0, #1
 80007ce:	1a12      	subs	r2, r2, r0
 80007d0:	0019      	movs	r1, r3
 80007d2:	4093      	lsls	r3, r2
 80007d4:	40c1      	lsrs	r1, r0
 80007d6:	1e5a      	subs	r2, r3, #1
 80007d8:	4193      	sbcs	r3, r2
 80007da:	4319      	orrs	r1, r3
 80007dc:	468c      	mov	ip, r1
 80007de:	1e0b      	subs	r3, r1, #0
 80007e0:	d0e1      	beq.n	80007a6 <__aeabi_fsub+0x1aa>
 80007e2:	075b      	lsls	r3, r3, #29
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fsub+0x1ec>
 80007e6:	e152      	b.n	8000a8e <__aeabi_fsub+0x492>
 80007e8:	230f      	movs	r3, #15
 80007ea:	2500      	movs	r5, #0
 80007ec:	400b      	ands	r3, r1
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	d000      	beq.n	80007f4 <__aeabi_fsub+0x1f8>
 80007f2:	e752      	b.n	800069a <__aeabi_fsub+0x9e>
 80007f4:	2001      	movs	r0, #1
 80007f6:	014a      	lsls	r2, r1, #5
 80007f8:	d400      	bmi.n	80007fc <__aeabi_fsub+0x200>
 80007fa:	e092      	b.n	8000922 <__aeabi_fsub+0x326>
 80007fc:	b2c0      	uxtb	r0, r0
 80007fe:	4663      	mov	r3, ip
 8000800:	019a      	lsls	r2, r3, #6
 8000802:	0a52      	lsrs	r2, r2, #9
 8000804:	e756      	b.n	80006b4 <__aeabi_fsub+0xb8>
 8000806:	4663      	mov	r3, ip
 8000808:	075b      	lsls	r3, r3, #29
 800080a:	d005      	beq.n	8000818 <__aeabi_fsub+0x21c>
 800080c:	230f      	movs	r3, #15
 800080e:	4662      	mov	r2, ip
 8000810:	4013      	ands	r3, r2
 8000812:	2b04      	cmp	r3, #4
 8000814:	d000      	beq.n	8000818 <__aeabi_fsub+0x21c>
 8000816:	e740      	b.n	800069a <__aeabi_fsub+0x9e>
 8000818:	002b      	movs	r3, r5
 800081a:	e765      	b.n	80006e8 <__aeabi_fsub+0xec>
 800081c:	0007      	movs	r7, r0
 800081e:	2f00      	cmp	r7, #0
 8000820:	d100      	bne.n	8000824 <__aeabi_fsub+0x228>
 8000822:	e745      	b.n	80006b0 <__aeabi_fsub+0xb4>
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	03d2      	lsls	r2, r2, #15
 8000828:	433a      	orrs	r2, r7
 800082a:	0252      	lsls	r2, r2, #9
 800082c:	20ff      	movs	r0, #255	@ 0xff
 800082e:	0a52      	lsrs	r2, r2, #9
 8000830:	e740      	b.n	80006b4 <__aeabi_fsub+0xb8>
 8000832:	2b00      	cmp	r3, #0
 8000834:	d179      	bne.n	800092a <__aeabi_fsub+0x32e>
 8000836:	22fe      	movs	r2, #254	@ 0xfe
 8000838:	1c6b      	adds	r3, r5, #1
 800083a:	421a      	tst	r2, r3
 800083c:	d1aa      	bne.n	8000794 <__aeabi_fsub+0x198>
 800083e:	4663      	mov	r3, ip
 8000840:	2b00      	cmp	r3, #0
 8000842:	d100      	bne.n	8000846 <__aeabi_fsub+0x24a>
 8000844:	e0f5      	b.n	8000a32 <__aeabi_fsub+0x436>
 8000846:	2900      	cmp	r1, #0
 8000848:	d100      	bne.n	800084c <__aeabi_fsub+0x250>
 800084a:	e0d1      	b.n	80009f0 <__aeabi_fsub+0x3f4>
 800084c:	1a5f      	subs	r7, r3, r1
 800084e:	2380      	movs	r3, #128	@ 0x80
 8000850:	04db      	lsls	r3, r3, #19
 8000852:	421f      	tst	r7, r3
 8000854:	d100      	bne.n	8000858 <__aeabi_fsub+0x25c>
 8000856:	e10e      	b.n	8000a76 <__aeabi_fsub+0x47a>
 8000858:	4662      	mov	r2, ip
 800085a:	2401      	movs	r4, #1
 800085c:	1a8a      	subs	r2, r1, r2
 800085e:	4694      	mov	ip, r2
 8000860:	2000      	movs	r0, #0
 8000862:	4034      	ands	r4, r6
 8000864:	2a00      	cmp	r2, #0
 8000866:	d100      	bne.n	800086a <__aeabi_fsub+0x26e>
 8000868:	e724      	b.n	80006b4 <__aeabi_fsub+0xb8>
 800086a:	2001      	movs	r0, #1
 800086c:	421a      	tst	r2, r3
 800086e:	d1c6      	bne.n	80007fe <__aeabi_fsub+0x202>
 8000870:	2300      	movs	r3, #0
 8000872:	08d7      	lsrs	r7, r2, #3
 8000874:	e73d      	b.n	80006f2 <__aeabi_fsub+0xf6>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d017      	beq.n	80008aa <__aeabi_fsub+0x2ae>
 800087a:	2d00      	cmp	r5, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_fsub+0x284>
 800087e:	e0af      	b.n	80009e0 <__aeabi_fsub+0x3e4>
 8000880:	23ff      	movs	r3, #255	@ 0xff
 8000882:	4665      	mov	r5, ip
 8000884:	2d00      	cmp	r5, #0
 8000886:	d100      	bne.n	800088a <__aeabi_fsub+0x28e>
 8000888:	e0ad      	b.n	80009e6 <__aeabi_fsub+0x3ea>
 800088a:	1e5e      	subs	r6, r3, #1
 800088c:	2b01      	cmp	r3, #1
 800088e:	d100      	bne.n	8000892 <__aeabi_fsub+0x296>
 8000890:	e089      	b.n	80009a6 <__aeabi_fsub+0x3aa>
 8000892:	2bff      	cmp	r3, #255	@ 0xff
 8000894:	d0c2      	beq.n	800081c <__aeabi_fsub+0x220>
 8000896:	2e1b      	cmp	r6, #27
 8000898:	dc00      	bgt.n	800089c <__aeabi_fsub+0x2a0>
 800089a:	e0ab      	b.n	80009f4 <__aeabi_fsub+0x3f8>
 800089c:	1d4b      	adds	r3, r1, #5
 800089e:	469c      	mov	ip, r3
 80008a0:	0013      	movs	r3, r2
 80008a2:	e721      	b.n	80006e8 <__aeabi_fsub+0xec>
 80008a4:	464b      	mov	r3, r9
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d170      	bne.n	800098c <__aeabi_fsub+0x390>
 80008aa:	22fe      	movs	r2, #254	@ 0xfe
 80008ac:	1c6b      	adds	r3, r5, #1
 80008ae:	421a      	tst	r2, r3
 80008b0:	d15e      	bne.n	8000970 <__aeabi_fsub+0x374>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	d000      	beq.n	80008b8 <__aeabi_fsub+0x2bc>
 80008b6:	e0c3      	b.n	8000a40 <__aeabi_fsub+0x444>
 80008b8:	4663      	mov	r3, ip
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fsub+0x2c4>
 80008be:	e0d0      	b.n	8000a62 <__aeabi_fsub+0x466>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fsub+0x2ca>
 80008c4:	e094      	b.n	80009f0 <__aeabi_fsub+0x3f4>
 80008c6:	000a      	movs	r2, r1
 80008c8:	4462      	add	r2, ip
 80008ca:	0153      	lsls	r3, r2, #5
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_fsub+0x2d4>
 80008ce:	e0d8      	b.n	8000a82 <__aeabi_fsub+0x486>
 80008d0:	0192      	lsls	r2, r2, #6
 80008d2:	2001      	movs	r0, #1
 80008d4:	0a52      	lsrs	r2, r2, #9
 80008d6:	e6ed      	b.n	80006b4 <__aeabi_fsub+0xb8>
 80008d8:	0008      	movs	r0, r1
 80008da:	2220      	movs	r2, #32
 80008dc:	40d8      	lsrs	r0, r3
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	4099      	lsls	r1, r3
 80008e2:	000b      	movs	r3, r1
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	4193      	sbcs	r3, r2
 80008e8:	4303      	orrs	r3, r0
 80008ea:	449c      	add	ip, r3
 80008ec:	4663      	mov	r3, ip
 80008ee:	015b      	lsls	r3, r3, #5
 80008f0:	d589      	bpl.n	8000806 <__aeabi_fsub+0x20a>
 80008f2:	3501      	adds	r5, #1
 80008f4:	2dff      	cmp	r5, #255	@ 0xff
 80008f6:	d100      	bne.n	80008fa <__aeabi_fsub+0x2fe>
 80008f8:	e6da      	b.n	80006b0 <__aeabi_fsub+0xb4>
 80008fa:	4662      	mov	r2, ip
 80008fc:	2301      	movs	r3, #1
 80008fe:	4919      	ldr	r1, [pc, #100]	@ (8000964 <__aeabi_fsub+0x368>)
 8000900:	4013      	ands	r3, r2
 8000902:	0852      	lsrs	r2, r2, #1
 8000904:	400a      	ands	r2, r1
 8000906:	431a      	orrs	r2, r3
 8000908:	0013      	movs	r3, r2
 800090a:	4694      	mov	ip, r2
 800090c:	075b      	lsls	r3, r3, #29
 800090e:	d004      	beq.n	800091a <__aeabi_fsub+0x31e>
 8000910:	230f      	movs	r3, #15
 8000912:	4013      	ands	r3, r2
 8000914:	2b04      	cmp	r3, #4
 8000916:	d000      	beq.n	800091a <__aeabi_fsub+0x31e>
 8000918:	e6bf      	b.n	800069a <__aeabi_fsub+0x9e>
 800091a:	4663      	mov	r3, ip
 800091c:	015b      	lsls	r3, r3, #5
 800091e:	d500      	bpl.n	8000922 <__aeabi_fsub+0x326>
 8000920:	e6c2      	b.n	80006a8 <__aeabi_fsub+0xac>
 8000922:	4663      	mov	r3, ip
 8000924:	08df      	lsrs	r7, r3, #3
 8000926:	002b      	movs	r3, r5
 8000928:	e6e3      	b.n	80006f2 <__aeabi_fsub+0xf6>
 800092a:	1b53      	subs	r3, r2, r5
 800092c:	2d00      	cmp	r5, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fsub+0x336>
 8000930:	e6f4      	b.n	800071c <__aeabi_fsub+0x120>
 8000932:	2080      	movs	r0, #128	@ 0x80
 8000934:	4664      	mov	r4, ip
 8000936:	04c0      	lsls	r0, r0, #19
 8000938:	4304      	orrs	r4, r0
 800093a:	46a4      	mov	ip, r4
 800093c:	0034      	movs	r4, r6
 800093e:	2001      	movs	r0, #1
 8000940:	2b1b      	cmp	r3, #27
 8000942:	dc09      	bgt.n	8000958 <__aeabi_fsub+0x35c>
 8000944:	2520      	movs	r5, #32
 8000946:	4660      	mov	r0, ip
 8000948:	40d8      	lsrs	r0, r3
 800094a:	1aeb      	subs	r3, r5, r3
 800094c:	4665      	mov	r5, ip
 800094e:	409d      	lsls	r5, r3
 8000950:	002b      	movs	r3, r5
 8000952:	1e5d      	subs	r5, r3, #1
 8000954:	41ab      	sbcs	r3, r5
 8000956:	4318      	orrs	r0, r3
 8000958:	1a0b      	subs	r3, r1, r0
 800095a:	469c      	mov	ip, r3
 800095c:	0015      	movs	r5, r2
 800095e:	e680      	b.n	8000662 <__aeabi_fsub+0x66>
 8000960:	fbffffff 	.word	0xfbffffff
 8000964:	7dffffff 	.word	0x7dffffff
 8000968:	22fe      	movs	r2, #254	@ 0xfe
 800096a:	1c6b      	adds	r3, r5, #1
 800096c:	4213      	tst	r3, r2
 800096e:	d0a3      	beq.n	80008b8 <__aeabi_fsub+0x2bc>
 8000970:	2bff      	cmp	r3, #255	@ 0xff
 8000972:	d100      	bne.n	8000976 <__aeabi_fsub+0x37a>
 8000974:	e69c      	b.n	80006b0 <__aeabi_fsub+0xb4>
 8000976:	4461      	add	r1, ip
 8000978:	0849      	lsrs	r1, r1, #1
 800097a:	074a      	lsls	r2, r1, #29
 800097c:	d049      	beq.n	8000a12 <__aeabi_fsub+0x416>
 800097e:	220f      	movs	r2, #15
 8000980:	400a      	ands	r2, r1
 8000982:	2a04      	cmp	r2, #4
 8000984:	d045      	beq.n	8000a12 <__aeabi_fsub+0x416>
 8000986:	1d0a      	adds	r2, r1, #4
 8000988:	4694      	mov	ip, r2
 800098a:	e6ad      	b.n	80006e8 <__aeabi_fsub+0xec>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d100      	bne.n	8000992 <__aeabi_fsub+0x396>
 8000990:	e776      	b.n	8000880 <__aeabi_fsub+0x284>
 8000992:	e68d      	b.n	80006b0 <__aeabi_fsub+0xb4>
 8000994:	0034      	movs	r4, r6
 8000996:	20ff      	movs	r0, #255	@ 0xff
 8000998:	2200      	movs	r2, #0
 800099a:	e68b      	b.n	80006b4 <__aeabi_fsub+0xb8>
 800099c:	4663      	mov	r3, ip
 800099e:	2401      	movs	r4, #1
 80009a0:	1acf      	subs	r7, r1, r3
 80009a2:	4034      	ands	r4, r6
 80009a4:	e664      	b.n	8000670 <__aeabi_fsub+0x74>
 80009a6:	4461      	add	r1, ip
 80009a8:	014b      	lsls	r3, r1, #5
 80009aa:	d56d      	bpl.n	8000a88 <__aeabi_fsub+0x48c>
 80009ac:	0848      	lsrs	r0, r1, #1
 80009ae:	4944      	ldr	r1, [pc, #272]	@ (8000ac0 <__aeabi_fsub+0x4c4>)
 80009b0:	4001      	ands	r1, r0
 80009b2:	0743      	lsls	r3, r0, #29
 80009b4:	d02c      	beq.n	8000a10 <__aeabi_fsub+0x414>
 80009b6:	230f      	movs	r3, #15
 80009b8:	4003      	ands	r3, r0
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d028      	beq.n	8000a10 <__aeabi_fsub+0x414>
 80009be:	1d0b      	adds	r3, r1, #4
 80009c0:	469c      	mov	ip, r3
 80009c2:	2302      	movs	r3, #2
 80009c4:	e690      	b.n	80006e8 <__aeabi_fsub+0xec>
 80009c6:	2900      	cmp	r1, #0
 80009c8:	d100      	bne.n	80009cc <__aeabi_fsub+0x3d0>
 80009ca:	e72b      	b.n	8000824 <__aeabi_fsub+0x228>
 80009cc:	2380      	movs	r3, #128	@ 0x80
 80009ce:	03db      	lsls	r3, r3, #15
 80009d0:	429f      	cmp	r7, r3
 80009d2:	d200      	bcs.n	80009d6 <__aeabi_fsub+0x3da>
 80009d4:	e726      	b.n	8000824 <__aeabi_fsub+0x228>
 80009d6:	4298      	cmp	r0, r3
 80009d8:	d300      	bcc.n	80009dc <__aeabi_fsub+0x3e0>
 80009da:	e723      	b.n	8000824 <__aeabi_fsub+0x228>
 80009dc:	2401      	movs	r4, #1
 80009de:	4034      	ands	r4, r6
 80009e0:	0007      	movs	r7, r0
 80009e2:	e71f      	b.n	8000824 <__aeabi_fsub+0x228>
 80009e4:	0034      	movs	r4, r6
 80009e6:	468c      	mov	ip, r1
 80009e8:	e67e      	b.n	80006e8 <__aeabi_fsub+0xec>
 80009ea:	2301      	movs	r3, #1
 80009ec:	08cf      	lsrs	r7, r1, #3
 80009ee:	e680      	b.n	80006f2 <__aeabi_fsub+0xf6>
 80009f0:	2300      	movs	r3, #0
 80009f2:	e67e      	b.n	80006f2 <__aeabi_fsub+0xf6>
 80009f4:	2020      	movs	r0, #32
 80009f6:	4665      	mov	r5, ip
 80009f8:	1b80      	subs	r0, r0, r6
 80009fa:	4085      	lsls	r5, r0
 80009fc:	4663      	mov	r3, ip
 80009fe:	0028      	movs	r0, r5
 8000a00:	40f3      	lsrs	r3, r6
 8000a02:	1e45      	subs	r5, r0, #1
 8000a04:	41a8      	sbcs	r0, r5
 8000a06:	4303      	orrs	r3, r0
 8000a08:	469c      	mov	ip, r3
 8000a0a:	0015      	movs	r5, r2
 8000a0c:	448c      	add	ip, r1
 8000a0e:	e76d      	b.n	80008ec <__aeabi_fsub+0x2f0>
 8000a10:	2302      	movs	r3, #2
 8000a12:	08cf      	lsrs	r7, r1, #3
 8000a14:	e66d      	b.n	80006f2 <__aeabi_fsub+0xf6>
 8000a16:	1b0f      	subs	r7, r1, r4
 8000a18:	017b      	lsls	r3, r7, #5
 8000a1a:	d528      	bpl.n	8000a6e <__aeabi_fsub+0x472>
 8000a1c:	01bf      	lsls	r7, r7, #6
 8000a1e:	09bf      	lsrs	r7, r7, #6
 8000a20:	0038      	movs	r0, r7
 8000a22:	f000 f89f 	bl	8000b64 <__clzsi2>
 8000a26:	003b      	movs	r3, r7
 8000a28:	3805      	subs	r0, #5
 8000a2a:	4083      	lsls	r3, r0
 8000a2c:	0034      	movs	r4, r6
 8000a2e:	2501      	movs	r5, #1
 8000a30:	e6ca      	b.n	80007c8 <__aeabi_fsub+0x1cc>
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fsub+0x43c>
 8000a36:	e6b5      	b.n	80007a4 <__aeabi_fsub+0x1a8>
 8000a38:	2401      	movs	r4, #1
 8000a3a:	0007      	movs	r7, r0
 8000a3c:	4034      	ands	r4, r6
 8000a3e:	e658      	b.n	80006f2 <__aeabi_fsub+0xf6>
 8000a40:	4663      	mov	r3, ip
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fsub+0x44c>
 8000a46:	e6e9      	b.n	800081c <__aeabi_fsub+0x220>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_fsub+0x452>
 8000a4c:	e6ea      	b.n	8000824 <__aeabi_fsub+0x228>
 8000a4e:	2380      	movs	r3, #128	@ 0x80
 8000a50:	03db      	lsls	r3, r3, #15
 8000a52:	429f      	cmp	r7, r3
 8000a54:	d200      	bcs.n	8000a58 <__aeabi_fsub+0x45c>
 8000a56:	e6e5      	b.n	8000824 <__aeabi_fsub+0x228>
 8000a58:	4298      	cmp	r0, r3
 8000a5a:	d300      	bcc.n	8000a5e <__aeabi_fsub+0x462>
 8000a5c:	e6e2      	b.n	8000824 <__aeabi_fsub+0x228>
 8000a5e:	0007      	movs	r7, r0
 8000a60:	e6e0      	b.n	8000824 <__aeabi_fsub+0x228>
 8000a62:	2900      	cmp	r1, #0
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fsub+0x46c>
 8000a66:	e69e      	b.n	80007a6 <__aeabi_fsub+0x1aa>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	08cf      	lsrs	r7, r1, #3
 8000a6c:	e641      	b.n	80006f2 <__aeabi_fsub+0xf6>
 8000a6e:	0034      	movs	r4, r6
 8000a70:	2301      	movs	r3, #1
 8000a72:	08ff      	lsrs	r7, r7, #3
 8000a74:	e63d      	b.n	80006f2 <__aeabi_fsub+0xf6>
 8000a76:	2f00      	cmp	r7, #0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fsub+0x480>
 8000a7a:	e693      	b.n	80007a4 <__aeabi_fsub+0x1a8>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	08ff      	lsrs	r7, r7, #3
 8000a80:	e637      	b.n	80006f2 <__aeabi_fsub+0xf6>
 8000a82:	2300      	movs	r3, #0
 8000a84:	08d7      	lsrs	r7, r2, #3
 8000a86:	e634      	b.n	80006f2 <__aeabi_fsub+0xf6>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	08cf      	lsrs	r7, r1, #3
 8000a8c:	e631      	b.n	80006f2 <__aeabi_fsub+0xf6>
 8000a8e:	2280      	movs	r2, #128	@ 0x80
 8000a90:	000b      	movs	r3, r1
 8000a92:	04d2      	lsls	r2, r2, #19
 8000a94:	2001      	movs	r0, #1
 8000a96:	4013      	ands	r3, r2
 8000a98:	4211      	tst	r1, r2
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_fsub+0x4a2>
 8000a9c:	e6ae      	b.n	80007fc <__aeabi_fsub+0x200>
 8000a9e:	08cf      	lsrs	r7, r1, #3
 8000aa0:	e627      	b.n	80006f2 <__aeabi_fsub+0xf6>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_fsub+0x4ac>
 8000aa6:	e75f      	b.n	8000968 <__aeabi_fsub+0x36c>
 8000aa8:	1b56      	subs	r6, r2, r5
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	d101      	bne.n	8000ab2 <__aeabi_fsub+0x4b6>
 8000aae:	0033      	movs	r3, r6
 8000ab0:	e6e7      	b.n	8000882 <__aeabi_fsub+0x286>
 8000ab2:	2380      	movs	r3, #128	@ 0x80
 8000ab4:	4660      	mov	r0, ip
 8000ab6:	04db      	lsls	r3, r3, #19
 8000ab8:	4318      	orrs	r0, r3
 8000aba:	4684      	mov	ip, r0
 8000abc:	e6eb      	b.n	8000896 <__aeabi_fsub+0x29a>
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	7dffffff 	.word	0x7dffffff

08000ac4 <__aeabi_i2f>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	d012      	beq.n	8000af0 <__aeabi_i2f+0x2c>
 8000aca:	17c3      	asrs	r3, r0, #31
 8000acc:	18c5      	adds	r5, r0, r3
 8000ace:	405d      	eors	r5, r3
 8000ad0:	0fc4      	lsrs	r4, r0, #31
 8000ad2:	0028      	movs	r0, r5
 8000ad4:	f000 f846 	bl	8000b64 <__clzsi2>
 8000ad8:	239e      	movs	r3, #158	@ 0x9e
 8000ada:	1a1b      	subs	r3, r3, r0
 8000adc:	2b96      	cmp	r3, #150	@ 0x96
 8000ade:	dc0f      	bgt.n	8000b00 <__aeabi_i2f+0x3c>
 8000ae0:	2808      	cmp	r0, #8
 8000ae2:	d038      	beq.n	8000b56 <__aeabi_i2f+0x92>
 8000ae4:	3808      	subs	r0, #8
 8000ae6:	4085      	lsls	r5, r0
 8000ae8:	026d      	lsls	r5, r5, #9
 8000aea:	0a6d      	lsrs	r5, r5, #9
 8000aec:	b2d8      	uxtb	r0, r3
 8000aee:	e002      	b.n	8000af6 <__aeabi_i2f+0x32>
 8000af0:	2400      	movs	r4, #0
 8000af2:	2000      	movs	r0, #0
 8000af4:	2500      	movs	r5, #0
 8000af6:	05c0      	lsls	r0, r0, #23
 8000af8:	4328      	orrs	r0, r5
 8000afa:	07e4      	lsls	r4, r4, #31
 8000afc:	4320      	orrs	r0, r4
 8000afe:	bd70      	pop	{r4, r5, r6, pc}
 8000b00:	2b99      	cmp	r3, #153	@ 0x99
 8000b02:	dc14      	bgt.n	8000b2e <__aeabi_i2f+0x6a>
 8000b04:	1f42      	subs	r2, r0, #5
 8000b06:	4095      	lsls	r5, r2
 8000b08:	002a      	movs	r2, r5
 8000b0a:	4915      	ldr	r1, [pc, #84]	@ (8000b60 <__aeabi_i2f+0x9c>)
 8000b0c:	4011      	ands	r1, r2
 8000b0e:	0755      	lsls	r5, r2, #29
 8000b10:	d01c      	beq.n	8000b4c <__aeabi_i2f+0x88>
 8000b12:	250f      	movs	r5, #15
 8000b14:	402a      	ands	r2, r5
 8000b16:	2a04      	cmp	r2, #4
 8000b18:	d018      	beq.n	8000b4c <__aeabi_i2f+0x88>
 8000b1a:	3104      	adds	r1, #4
 8000b1c:	08ca      	lsrs	r2, r1, #3
 8000b1e:	0149      	lsls	r1, r1, #5
 8000b20:	d515      	bpl.n	8000b4e <__aeabi_i2f+0x8a>
 8000b22:	239f      	movs	r3, #159	@ 0x9f
 8000b24:	0252      	lsls	r2, r2, #9
 8000b26:	1a18      	subs	r0, r3, r0
 8000b28:	0a55      	lsrs	r5, r2, #9
 8000b2a:	b2c0      	uxtb	r0, r0
 8000b2c:	e7e3      	b.n	8000af6 <__aeabi_i2f+0x32>
 8000b2e:	2205      	movs	r2, #5
 8000b30:	0029      	movs	r1, r5
 8000b32:	1a12      	subs	r2, r2, r0
 8000b34:	40d1      	lsrs	r1, r2
 8000b36:	0002      	movs	r2, r0
 8000b38:	321b      	adds	r2, #27
 8000b3a:	4095      	lsls	r5, r2
 8000b3c:	002a      	movs	r2, r5
 8000b3e:	1e55      	subs	r5, r2, #1
 8000b40:	41aa      	sbcs	r2, r5
 8000b42:	430a      	orrs	r2, r1
 8000b44:	4906      	ldr	r1, [pc, #24]	@ (8000b60 <__aeabi_i2f+0x9c>)
 8000b46:	4011      	ands	r1, r2
 8000b48:	0755      	lsls	r5, r2, #29
 8000b4a:	d1e2      	bne.n	8000b12 <__aeabi_i2f+0x4e>
 8000b4c:	08ca      	lsrs	r2, r1, #3
 8000b4e:	0252      	lsls	r2, r2, #9
 8000b50:	0a55      	lsrs	r5, r2, #9
 8000b52:	b2d8      	uxtb	r0, r3
 8000b54:	e7cf      	b.n	8000af6 <__aeabi_i2f+0x32>
 8000b56:	026d      	lsls	r5, r5, #9
 8000b58:	0a6d      	lsrs	r5, r5, #9
 8000b5a:	308e      	adds	r0, #142	@ 0x8e
 8000b5c:	e7cb      	b.n	8000af6 <__aeabi_i2f+0x32>
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	fbffffff 	.word	0xfbffffff

08000b64 <__clzsi2>:
 8000b64:	211c      	movs	r1, #28
 8000b66:	2301      	movs	r3, #1
 8000b68:	041b      	lsls	r3, r3, #16
 8000b6a:	4298      	cmp	r0, r3
 8000b6c:	d301      	bcc.n	8000b72 <__clzsi2+0xe>
 8000b6e:	0c00      	lsrs	r0, r0, #16
 8000b70:	3910      	subs	r1, #16
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	4298      	cmp	r0, r3
 8000b76:	d301      	bcc.n	8000b7c <__clzsi2+0x18>
 8000b78:	0a00      	lsrs	r0, r0, #8
 8000b7a:	3908      	subs	r1, #8
 8000b7c:	091b      	lsrs	r3, r3, #4
 8000b7e:	4298      	cmp	r0, r3
 8000b80:	d301      	bcc.n	8000b86 <__clzsi2+0x22>
 8000b82:	0900      	lsrs	r0, r0, #4
 8000b84:	3904      	subs	r1, #4
 8000b86:	a202      	add	r2, pc, #8	@ (adr r2, 8000b90 <__clzsi2+0x2c>)
 8000b88:	5c10      	ldrb	r0, [r2, r0]
 8000b8a:	1840      	adds	r0, r0, r1
 8000b8c:	4770      	bx	lr
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	02020304 	.word	0x02020304
 8000b94:	01010101 	.word	0x01010101
	...

08000ba0 <null_ptr_check>:

static int8_t null_ptr_check(const struct bma400_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->intf_ptr == NULL))
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d00d      	beq.n	8000bc0 <null_ptr_check+0x20>
 8000ba4:	68c3      	ldr	r3, [r0, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d00d      	beq.n	8000bc6 <null_ptr_check+0x26>
 8000baa:	6903      	ldr	r3, [r0, #16]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00d      	beq.n	8000bcc <null_ptr_check+0x2c>
 8000bb0:	6843      	ldr	r3, [r0, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <null_ptr_check+0x1a>
        rslt = BMA400_E_NULL_PTR;
    }
    else
    {
        /* Device structure is fine */
        rslt = BMA400_OK;
 8000bb6:	2000      	movs	r0, #0
    }

    return rslt;
}
 8000bb8:	4770      	bx	lr
        rslt = BMA400_E_NULL_PTR;
 8000bba:	2001      	movs	r0, #1
 8000bbc:	4240      	negs	r0, r0
 8000bbe:	e7fb      	b.n	8000bb8 <null_ptr_check+0x18>
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	e7f8      	b.n	8000bb8 <null_ptr_check+0x18>
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	4240      	negs	r0, r0
 8000bca:	e7f5      	b.n	8000bb8 <null_ptr_check+0x18>
 8000bcc:	2001      	movs	r0, #1
 8000bce:	4240      	negs	r0, r0
 8000bd0:	e7f2      	b.n	8000bb8 <null_ptr_check+0x18>
	...

08000bd4 <map_int_pin>:

    return rslt;
}

static void map_int_pin(uint8_t *data_array, uint8_t int_enable, enum bma400_int_chan int_map)
{
 8000bd4:	b510      	push	{r4, lr}
    switch (int_enable)
 8000bd6:	290b      	cmp	r1, #11
 8000bd8:	d812      	bhi.n	8000c00 <map_int_pin+0x2c>
 8000bda:	0089      	lsls	r1, r1, #2
 8000bdc:	4bb9      	ldr	r3, [pc, #740]	@ (8000ec4 <map_int_pin+0x2f0>)
 8000bde:	585b      	ldr	r3, [r3, r1]
 8000be0:	469f      	mov	pc, r3
    {
        case BMA400_DATA_READY_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8000be2:	2a01      	cmp	r2, #1
 8000be4:	d00d      	beq.n	8000c02 <map_int_pin+0x2e>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8000be6:	2a02      	cmp	r2, #2
 8000be8:	d011      	beq.n	8000c0e <map_int_pin+0x3a>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d106      	bne.n	8000bfc <map_int_pin+0x28>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_DRDY);
 8000bee:	7801      	ldrb	r1, [r0, #0]
 8000bf0:	237f      	movs	r3, #127	@ 0x7f
 8000bf2:	4019      	ands	r1, r3
 8000bf4:	7001      	strb	r1, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_DRDY);
 8000bf6:	7841      	ldrb	r1, [r0, #1]
 8000bf8:	400b      	ands	r3, r1
 8000bfa:	7043      	strb	r3, [r0, #1]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8000bfc:	2a03      	cmp	r2, #3
 8000bfe:	d00c      	beq.n	8000c1a <map_int_pin+0x46>

            break;
        default:
            break;
    }
}
 8000c00:	bd10      	pop	{r4, pc}
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 8000c02:	7801      	ldrb	r1, [r0, #0]
 8000c04:	2380      	movs	r3, #128	@ 0x80
 8000c06:	425b      	negs	r3, r3
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	7003      	strb	r3, [r0, #0]
 8000c0c:	e7eb      	b.n	8000be6 <map_int_pin+0x12>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 8000c0e:	7841      	ldrb	r1, [r0, #1]
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	425b      	negs	r3, r3
 8000c14:	430b      	orrs	r3, r1
 8000c16:	7043      	strb	r3, [r0, #1]
 8000c18:	e7e7      	b.n	8000bea <map_int_pin+0x16>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 8000c1a:	7802      	ldrb	r2, [r0, #0]
 8000c1c:	2380      	movs	r3, #128	@ 0x80
 8000c1e:	425b      	negs	r3, r3
 8000c20:	431a      	orrs	r2, r3
 8000c22:	7002      	strb	r2, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 8000c24:	7842      	ldrb	r2, [r0, #1]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	7043      	strb	r3, [r0, #1]
 8000c2a:	e7e9      	b.n	8000c00 <map_int_pin+0x2c>
            if (int_map == BMA400_INT_CHANNEL_1)
 8000c2c:	2a01      	cmp	r2, #1
 8000c2e:	d014      	beq.n	8000c5a <map_int_pin+0x86>
            if (int_map == BMA400_INT_CHANNEL_2)
 8000c30:	2a02      	cmp	r2, #2
 8000c32:	d017      	beq.n	8000c64 <map_int_pin+0x90>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	d106      	bne.n	8000c46 <map_int_pin+0x72>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_WM);
 8000c38:	7803      	ldrb	r3, [r0, #0]
 8000c3a:	2140      	movs	r1, #64	@ 0x40
 8000c3c:	438b      	bics	r3, r1
 8000c3e:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_WM);
 8000c40:	7843      	ldrb	r3, [r0, #1]
 8000c42:	438b      	bics	r3, r1
 8000c44:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8000c46:	2a03      	cmp	r2, #3
 8000c48:	d1da      	bne.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8000c4a:	7803      	ldrb	r3, [r0, #0]
 8000c4c:	2240      	movs	r2, #64	@ 0x40
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8000c52:	7843      	ldrb	r3, [r0, #1]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	7043      	strb	r3, [r0, #1]
 8000c58:	e7d2      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8000c5a:	7803      	ldrb	r3, [r0, #0]
 8000c5c:	2140      	movs	r1, #64	@ 0x40
 8000c5e:	430b      	orrs	r3, r1
 8000c60:	7003      	strb	r3, [r0, #0]
 8000c62:	e7e5      	b.n	8000c30 <map_int_pin+0x5c>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8000c64:	7843      	ldrb	r3, [r0, #1]
 8000c66:	2140      	movs	r1, #64	@ 0x40
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	7043      	strb	r3, [r0, #1]
 8000c6c:	e7e2      	b.n	8000c34 <map_int_pin+0x60>
            if (int_map == BMA400_INT_CHANNEL_1)
 8000c6e:	2a01      	cmp	r2, #1
 8000c70:	d014      	beq.n	8000c9c <map_int_pin+0xc8>
            if (int_map == BMA400_INT_CHANNEL_2)
 8000c72:	2a02      	cmp	r2, #2
 8000c74:	d017      	beq.n	8000ca6 <map_int_pin+0xd2>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d106      	bne.n	8000c88 <map_int_pin+0xb4>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 8000c7a:	7803      	ldrb	r3, [r0, #0]
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	438b      	bics	r3, r1
 8000c80:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_FULL);
 8000c82:	7843      	ldrb	r3, [r0, #1]
 8000c84:	438b      	bics	r3, r1
 8000c86:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8000c88:	2a03      	cmp	r2, #3
 8000c8a:	d1b9      	bne.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8000c8c:	7803      	ldrb	r3, [r0, #0]
 8000c8e:	2220      	movs	r2, #32
 8000c90:	4313      	orrs	r3, r2
 8000c92:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8000c94:	7843      	ldrb	r3, [r0, #1]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	7043      	strb	r3, [r0, #1]
 8000c9a:	e7b1      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8000c9c:	7803      	ldrb	r3, [r0, #0]
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	430b      	orrs	r3, r1
 8000ca2:	7003      	strb	r3, [r0, #0]
 8000ca4:	e7e5      	b.n	8000c72 <map_int_pin+0x9e>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8000ca6:	7843      	ldrb	r3, [r0, #1]
 8000ca8:	2120      	movs	r1, #32
 8000caa:	430b      	orrs	r3, r1
 8000cac:	7043      	strb	r3, [r0, #1]
 8000cae:	e7e2      	b.n	8000c76 <map_int_pin+0xa2>
            if (int_map == BMA400_INT_CHANNEL_1)
 8000cb0:	2a01      	cmp	r2, #1
 8000cb2:	d014      	beq.n	8000cde <map_int_pin+0x10a>
            if (int_map == BMA400_INT_CHANNEL_2)
 8000cb4:	2a02      	cmp	r2, #2
 8000cb6:	d017      	beq.n	8000ce8 <map_int_pin+0x114>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	d106      	bne.n	8000cca <map_int_pin+0xf6>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_INT_OVERRUN);
 8000cbc:	7803      	ldrb	r3, [r0, #0]
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	438b      	bics	r3, r1
 8000cc2:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_INT_OVERRUN);
 8000cc4:	7843      	ldrb	r3, [r0, #1]
 8000cc6:	438b      	bics	r3, r1
 8000cc8:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8000cca:	2a03      	cmp	r2, #3
 8000ccc:	d198      	bne.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8000cce:	7803      	ldrb	r3, [r0, #0]
 8000cd0:	2210      	movs	r2, #16
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8000cd6:	7843      	ldrb	r3, [r0, #1]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	7043      	strb	r3, [r0, #1]
 8000cdc:	e790      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8000cde:	7803      	ldrb	r3, [r0, #0]
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	430b      	orrs	r3, r1
 8000ce4:	7003      	strb	r3, [r0, #0]
 8000ce6:	e7e5      	b.n	8000cb4 <map_int_pin+0xe0>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8000ce8:	7843      	ldrb	r3, [r0, #1]
 8000cea:	2110      	movs	r1, #16
 8000cec:	430b      	orrs	r3, r1
 8000cee:	7043      	strb	r3, [r0, #1]
 8000cf0:	e7e2      	b.n	8000cb8 <map_int_pin+0xe4>
            if (int_map == BMA400_INT_CHANNEL_1)
 8000cf2:	2a01      	cmp	r2, #1
 8000cf4:	d015      	beq.n	8000d22 <map_int_pin+0x14e>
            if (int_map == BMA400_INT_CHANNEL_2)
 8000cf6:	2a02      	cmp	r2, #2
 8000cf8:	d018      	beq.n	8000d2c <map_int_pin+0x158>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d106      	bne.n	8000d0c <map_int_pin+0x138>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN2);
 8000cfe:	7803      	ldrb	r3, [r0, #0]
 8000d00:	2108      	movs	r1, #8
 8000d02:	438b      	bics	r3, r1
 8000d04:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN2);
 8000d06:	7843      	ldrb	r3, [r0, #1]
 8000d08:	438b      	bics	r3, r1
 8000d0a:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8000d0c:	2a03      	cmp	r2, #3
 8000d0e:	d000      	beq.n	8000d12 <map_int_pin+0x13e>
 8000d10:	e776      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8000d12:	7803      	ldrb	r3, [r0, #0]
 8000d14:	2208      	movs	r2, #8
 8000d16:	4313      	orrs	r3, r2
 8000d18:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 8000d1a:	7843      	ldrb	r3, [r0, #1]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	7043      	strb	r3, [r0, #1]
 8000d20:	e76e      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8000d22:	7803      	ldrb	r3, [r0, #0]
 8000d24:	2108      	movs	r1, #8
 8000d26:	430b      	orrs	r3, r1
 8000d28:	7003      	strb	r3, [r0, #0]
 8000d2a:	e7e4      	b.n	8000cf6 <map_int_pin+0x122>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 8000d2c:	7843      	ldrb	r3, [r0, #1]
 8000d2e:	2108      	movs	r1, #8
 8000d30:	430b      	orrs	r3, r1
 8000d32:	7043      	strb	r3, [r0, #1]
 8000d34:	e7e1      	b.n	8000cfa <map_int_pin+0x126>
            if (int_map == BMA400_INT_CHANNEL_1)
 8000d36:	2a01      	cmp	r2, #1
 8000d38:	d015      	beq.n	8000d66 <map_int_pin+0x192>
            if (int_map == BMA400_INT_CHANNEL_2)
 8000d3a:	2a02      	cmp	r2, #2
 8000d3c:	d018      	beq.n	8000d70 <map_int_pin+0x19c>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8000d3e:	2a00      	cmp	r2, #0
 8000d40:	d106      	bne.n	8000d50 <map_int_pin+0x17c>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN1);
 8000d42:	7803      	ldrb	r3, [r0, #0]
 8000d44:	2104      	movs	r1, #4
 8000d46:	438b      	bics	r3, r1
 8000d48:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN1);
 8000d4a:	7843      	ldrb	r3, [r0, #1]
 8000d4c:	438b      	bics	r3, r1
 8000d4e:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8000d50:	2a03      	cmp	r2, #3
 8000d52:	d000      	beq.n	8000d56 <map_int_pin+0x182>
 8000d54:	e754      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8000d56:	7803      	ldrb	r3, [r0, #0]
 8000d58:	2204      	movs	r2, #4
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8000d5e:	7843      	ldrb	r3, [r0, #1]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	7043      	strb	r3, [r0, #1]
 8000d64:	e74c      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8000d66:	7803      	ldrb	r3, [r0, #0]
 8000d68:	2104      	movs	r1, #4
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	7003      	strb	r3, [r0, #0]
 8000d6e:	e7e4      	b.n	8000d3a <map_int_pin+0x166>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8000d70:	7843      	ldrb	r3, [r0, #1]
 8000d72:	2104      	movs	r1, #4
 8000d74:	430b      	orrs	r3, r1
 8000d76:	7043      	strb	r3, [r0, #1]
 8000d78:	e7e1      	b.n	8000d3e <map_int_pin+0x16a>
            if (int_map == BMA400_INT_CHANNEL_1)
 8000d7a:	2a01      	cmp	r2, #1
 8000d7c:	d015      	beq.n	8000daa <map_int_pin+0x1d6>
            if (int_map == BMA400_INT_CHANNEL_2)
 8000d7e:	2a02      	cmp	r2, #2
 8000d80:	d018      	beq.n	8000db4 <map_int_pin+0x1e0>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d106      	bne.n	8000d94 <map_int_pin+0x1c0>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 8000d86:	7803      	ldrb	r3, [r0, #0]
 8000d88:	2102      	movs	r1, #2
 8000d8a:	438b      	bics	r3, r1
 8000d8c:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_ORIENT_CH);
 8000d8e:	7843      	ldrb	r3, [r0, #1]
 8000d90:	438b      	bics	r3, r1
 8000d92:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8000d94:	2a03      	cmp	r2, #3
 8000d96:	d000      	beq.n	8000d9a <map_int_pin+0x1c6>
 8000d98:	e732      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8000d9a:	7803      	ldrb	r3, [r0, #0]
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8000da2:	7843      	ldrb	r3, [r0, #1]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	7043      	strb	r3, [r0, #1]
 8000da8:	e72a      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8000daa:	7803      	ldrb	r3, [r0, #0]
 8000dac:	2102      	movs	r1, #2
 8000dae:	430b      	orrs	r3, r1
 8000db0:	7003      	strb	r3, [r0, #0]
 8000db2:	e7e4      	b.n	8000d7e <map_int_pin+0x1aa>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8000db4:	7843      	ldrb	r3, [r0, #1]
 8000db6:	2102      	movs	r1, #2
 8000db8:	430b      	orrs	r3, r1
 8000dba:	7043      	strb	r3, [r0, #1]
 8000dbc:	e7e1      	b.n	8000d82 <map_int_pin+0x1ae>
            if (int_map == BMA400_INT_CHANNEL_1)
 8000dbe:	2a01      	cmp	r2, #1
 8000dc0:	d015      	beq.n	8000dee <map_int_pin+0x21a>
            if (int_map == BMA400_INT_CHANNEL_2)
 8000dc2:	2a02      	cmp	r2, #2
 8000dc4:	d018      	beq.n	8000df8 <map_int_pin+0x224>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d106      	bne.n	8000dd8 <map_int_pin+0x204>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_WAKEUP_INT);
 8000dca:	7803      	ldrb	r3, [r0, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	438b      	bics	r3, r1
 8000dd0:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_WAKEUP_INT);
 8000dd2:	7843      	ldrb	r3, [r0, #1]
 8000dd4:	438b      	bics	r3, r1
 8000dd6:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8000dd8:	2a03      	cmp	r2, #3
 8000dda:	d000      	beq.n	8000dde <map_int_pin+0x20a>
 8000ddc:	e710      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8000dde:	7803      	ldrb	r3, [r0, #0]
 8000de0:	2201      	movs	r2, #1
 8000de2:	4313      	orrs	r3, r2
 8000de4:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8000de6:	7843      	ldrb	r3, [r0, #1]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	7043      	strb	r3, [r0, #1]
 8000dec:	e708      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8000dee:	7803      	ldrb	r3, [r0, #0]
 8000df0:	2101      	movs	r1, #1
 8000df2:	430b      	orrs	r3, r1
 8000df4:	7003      	strb	r3, [r0, #0]
 8000df6:	e7e4      	b.n	8000dc2 <map_int_pin+0x1ee>
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8000df8:	7843      	ldrb	r3, [r0, #1]
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	7043      	strb	r3, [r0, #1]
 8000e00:	e7e1      	b.n	8000dc6 <map_int_pin+0x1f2>
            if (int_map == BMA400_INT_CHANNEL_1)
 8000e02:	2a01      	cmp	r2, #1
 8000e04:	d017      	beq.n	8000e36 <map_int_pin+0x262>
            if (int_map == BMA400_INT_CHANNEL_2)
 8000e06:	2a02      	cmp	r2, #2
 8000e08:	d01a      	beq.n	8000e40 <map_int_pin+0x26c>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d107      	bne.n	8000e1e <map_int_pin+0x24a>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT1);
 8000e0e:	7881      	ldrb	r1, [r0, #2]
 8000e10:	2308      	movs	r3, #8
 8000e12:	000c      	movs	r4, r1
 8000e14:	439c      	bics	r4, r3
 8000e16:	7084      	strb	r4, [r0, #2]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT2);
 8000e18:	2377      	movs	r3, #119	@ 0x77
 8000e1a:	400b      	ands	r3, r1
 8000e1c:	7083      	strb	r3, [r0, #2]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8000e1e:	2a03      	cmp	r2, #3
 8000e20:	d000      	beq.n	8000e24 <map_int_pin+0x250>
 8000e22:	e6ed      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8000e24:	7882      	ldrb	r2, [r0, #2]
 8000e26:	2308      	movs	r3, #8
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	7083      	strb	r3, [r0, #2]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8000e2c:	2378      	movs	r3, #120	@ 0x78
 8000e2e:	425b      	negs	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	7083      	strb	r3, [r0, #2]
 8000e34:	e6e4      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8000e36:	7883      	ldrb	r3, [r0, #2]
 8000e38:	2108      	movs	r1, #8
 8000e3a:	430b      	orrs	r3, r1
 8000e3c:	7083      	strb	r3, [r0, #2]
 8000e3e:	e7e2      	b.n	8000e06 <map_int_pin+0x232>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8000e40:	7881      	ldrb	r1, [r0, #2]
 8000e42:	2380      	movs	r3, #128	@ 0x80
 8000e44:	425b      	negs	r3, r3
 8000e46:	430b      	orrs	r3, r1
 8000e48:	7083      	strb	r3, [r0, #2]
 8000e4a:	e7de      	b.n	8000e0a <map_int_pin+0x236>
            if (int_map == BMA400_INT_CHANNEL_1)
 8000e4c:	2a01      	cmp	r2, #1
 8000e4e:	d016      	beq.n	8000e7e <map_int_pin+0x2aa>
            if (int_map == BMA400_INT_CHANNEL_2)
 8000e50:	2a02      	cmp	r2, #2
 8000e52:	d019      	beq.n	8000e88 <map_int_pin+0x2b4>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d107      	bne.n	8000e68 <map_int_pin+0x294>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT1);
 8000e58:	7883      	ldrb	r3, [r0, #2]
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	001c      	movs	r4, r3
 8000e5e:	438c      	bics	r4, r1
 8000e60:	7084      	strb	r4, [r0, #2]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT2);
 8000e62:	2144      	movs	r1, #68	@ 0x44
 8000e64:	438b      	bics	r3, r1
 8000e66:	7083      	strb	r3, [r0, #2]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8000e68:	2a03      	cmp	r2, #3
 8000e6a:	d000      	beq.n	8000e6e <map_int_pin+0x29a>
 8000e6c:	e6c8      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8000e6e:	7883      	ldrb	r3, [r0, #2]
 8000e70:	2204      	movs	r2, #4
 8000e72:	431a      	orrs	r2, r3
 8000e74:	7082      	strb	r2, [r0, #2]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8000e76:	2244      	movs	r2, #68	@ 0x44
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	7083      	strb	r3, [r0, #2]
 8000e7c:	e6c0      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8000e7e:	7883      	ldrb	r3, [r0, #2]
 8000e80:	2104      	movs	r1, #4
 8000e82:	430b      	orrs	r3, r1
 8000e84:	7083      	strb	r3, [r0, #2]
 8000e86:	e7e3      	b.n	8000e50 <map_int_pin+0x27c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8000e88:	7883      	ldrb	r3, [r0, #2]
 8000e8a:	2140      	movs	r1, #64	@ 0x40
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	7083      	strb	r3, [r0, #2]
 8000e90:	e7e0      	b.n	8000e54 <map_int_pin+0x280>
            if (int_map == BMA400_INT_CHANNEL_1)
 8000e92:	2a01      	cmp	r2, #1
 8000e94:	d018      	beq.n	8000ec8 <map_int_pin+0x2f4>
            if (int_map == BMA400_INT_CHANNEL_2)
 8000e96:	2a02      	cmp	r2, #2
 8000e98:	d01b      	beq.n	8000ed2 <map_int_pin+0x2fe>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8000e9a:	2a00      	cmp	r2, #0
 8000e9c:	d107      	bne.n	8000eae <map_int_pin+0x2da>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_EN_STEP_INT);
 8000e9e:	7883      	ldrb	r3, [r0, #2]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	001c      	movs	r4, r3
 8000ea4:	438c      	bics	r4, r1
 8000ea6:	7084      	strb	r4, [r0, #2]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 8000ea8:	2111      	movs	r1, #17
 8000eaa:	438b      	bics	r3, r1
 8000eac:	7083      	strb	r3, [r0, #2]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8000eae:	2a03      	cmp	r2, #3
 8000eb0:	d000      	beq.n	8000eb4 <map_int_pin+0x2e0>
 8000eb2:	e6a5      	b.n	8000c00 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8000eb4:	7883      	ldrb	r3, [r0, #2]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	7082      	strb	r2, [r0, #2]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8000ebc:	2211      	movs	r2, #17
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	7083      	strb	r3, [r0, #2]
}
 8000ec2:	e69d      	b.n	8000c00 <map_int_pin+0x2c>
 8000ec4:	08004760 	.word	0x08004760
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8000ec8:	7883      	ldrb	r3, [r0, #2]
 8000eca:	2101      	movs	r1, #1
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	7083      	strb	r3, [r0, #2]
 8000ed0:	e7e1      	b.n	8000e96 <map_int_pin+0x2c2>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8000ed2:	7883      	ldrb	r3, [r0, #2]
 8000ed4:	2110      	movs	r1, #16
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	7083      	strb	r3, [r0, #2]
 8000eda:	e7de      	b.n	8000e9a <map_int_pin+0x2c6>

08000edc <bma400_set_regs>:
{
 8000edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	464f      	mov	r7, r9
 8000ee2:	4646      	mov	r6, r8
 8000ee4:	b5c0      	push	{r6, r7, lr}
 8000ee6:	0005      	movs	r5, r0
 8000ee8:	4689      	mov	r9, r1
 8000eea:	4690      	mov	r8, r2
 8000eec:	001e      	movs	r6, r3
    rslt = null_ptr_check(dev);
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f7ff fe56 	bl	8000ba0 <null_ptr_check>
 8000ef4:	1e07      	subs	r7, r0, #0
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8000ef6:	d12b      	bne.n	8000f50 <bma400_set_regs+0x74>
 8000ef8:	464b      	mov	r3, r9
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d030      	beq.n	8000f60 <bma400_set_regs+0x84>
        if (len == 1)
 8000efe:	4643      	mov	r3, r8
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d004      	beq.n	8000f0e <bma400_set_regs+0x32>
        if (len > 1)
 8000f04:	4643      	mov	r3, r8
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d924      	bls.n	8000f54 <bma400_set_regs+0x78>
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8000f0a:	2400      	movs	r4, #0
 8000f0c:	e00c      	b.n	8000f28 <bma400_set_regs+0x4c>
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8000f0e:	6934      	ldr	r4, [r6, #16]
 8000f10:	6873      	ldr	r3, [r6, #4]
 8000f12:	4642      	mov	r2, r8
 8000f14:	4649      	mov	r1, r9
 8000f16:	0028      	movs	r0, r5
 8000f18:	47a0      	blx	r4
 8000f1a:	7730      	strb	r0, [r6, #28]
            if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d0f1      	beq.n	8000f04 <bma400_set_regs+0x28>
                rslt = BMA400_E_COM_FAIL;
 8000f20:	3f02      	subs	r7, #2
 8000f22:	e7ef      	b.n	8000f04 <bma400_set_regs+0x28>
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8000f24:	3401      	adds	r4, #1
 8000f26:	b2e4      	uxtb	r4, r4
 8000f28:	0021      	movs	r1, r4
 8000f2a:	4544      	cmp	r4, r8
 8000f2c:	d212      	bcs.n	8000f54 <bma400_set_regs+0x78>
 8000f2e:	2f00      	cmp	r7, #0
 8000f30:	d110      	bne.n	8000f54 <bma400_set_regs+0x78>
                dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr);
 8000f32:	6933      	ldr	r3, [r6, #16]
 8000f34:	469a      	mov	sl, r3
 8000f36:	6873      	ldr	r3, [r6, #4]
 8000f38:	4449      	add	r1, r9
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	0028      	movs	r0, r5
 8000f3e:	47d0      	blx	sl
 8000f40:	7730      	strb	r0, [r6, #28]
                reg_addr++;
 8000f42:	3501      	adds	r5, #1
 8000f44:	b2ed      	uxtb	r5, r5
                if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d0ec      	beq.n	8000f24 <bma400_set_regs+0x48>
                    rslt = BMA400_E_COM_FAIL;
 8000f4a:	2702      	movs	r7, #2
 8000f4c:	427f      	negs	r7, r7
 8000f4e:	e7e9      	b.n	8000f24 <bma400_set_regs+0x48>
        rslt = BMA400_E_NULL_PTR;
 8000f50:	2701      	movs	r7, #1
 8000f52:	427f      	negs	r7, r7
}
 8000f54:	0038      	movs	r0, r7
 8000f56:	bce0      	pop	{r5, r6, r7}
 8000f58:	46ba      	mov	sl, r7
 8000f5a:	46b1      	mov	r9, r6
 8000f5c:	46a8      	mov	r8, r5
 8000f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMA400_E_NULL_PTR;
 8000f60:	2701      	movs	r7, #1
 8000f62:	427f      	negs	r7, r7
 8000f64:	e7f6      	b.n	8000f54 <bma400_set_regs+0x78>

08000f66 <set_activity_change_conf>:
{
 8000f66:	b530      	push	{r4, r5, lr}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	000b      	movs	r3, r1
    uint8_t data_array[2] = { 0 };
 8000f6c:	a901      	add	r1, sp, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	800a      	strh	r2, [r1, #0]
    data_array[0] = act_ch_set->act_ch_thres;
 8000f72:	7802      	ldrb	r2, [r0, #0]
 8000f74:	700a      	strb	r2, [r1, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN, act_ch_set->axes_sel);
 8000f76:	7842      	ldrb	r2, [r0, #1]
 8000f78:	0152      	lsls	r2, r2, #5
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	704a      	strb	r2, [r1, #1]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC, act_ch_set->data_source);
 8000f7e:	7885      	ldrb	r5, [r0, #2]
 8000f80:	012d      	lsls	r5, r5, #4
 8000f82:	2410      	movs	r4, #16
 8000f84:	402c      	ands	r4, r5
 8000f86:	4322      	orrs	r2, r4
 8000f88:	704a      	strb	r2, [r1, #1]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 8000f8a:	78c4      	ldrb	r4, [r0, #3]
 8000f8c:	200f      	movs	r0, #15
 8000f8e:	4020      	ands	r0, r4
 8000f90:	4302      	orrs	r2, r0
 8000f92:	704a      	strb	r2, [r1, #1]
    rslt = bma400_set_regs(BMA400_REG_ACT_CH_CONFIG_0, data_array, 2, dev);
 8000f94:	2202      	movs	r2, #2
 8000f96:	2055      	movs	r0, #85	@ 0x55
 8000f98:	f7ff ffa0 	bl	8000edc <bma400_set_regs>
}
 8000f9c:	b003      	add	sp, #12
 8000f9e:	bd30      	pop	{r4, r5, pc}

08000fa0 <set_gen1_int>:
{
 8000fa0:	b570      	push	{r4, r5, r6, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	0005      	movs	r5, r0
 8000fa6:	000e      	movs	r6, r1
    uint8_t data_array[11] = { 0 };
 8000fa8:	ac01      	add	r4, sp, #4
 8000faa:	220b      	movs	r2, #11
 8000fac:	2100      	movs	r1, #0
 8000fae:	0020      	movs	r0, r4
 8000fb0:	f002 ff4e 	bl	8003e50 <memset>
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8000fb4:	792a      	ldrb	r2, [r5, #4]
 8000fb6:	0152      	lsls	r2, r2, #5
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8000fbc:	7969      	ldrb	r1, [r5, #5]
 8000fbe:	0109      	lsls	r1, r1, #4
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8000fc8:	7a29      	ldrb	r1, [r5, #8]
 8000fca:	0088      	lsls	r0, r1, #2
 8000fcc:	230c      	movs	r3, #12
 8000fce:	4003      	ands	r3, r0
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8000fd4:	7a68      	ldrb	r0, [r5, #9]
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	4003      	ands	r3, r0
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	7022      	strb	r2, [r4, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8000fde:	79aa      	ldrb	r2, [r5, #6]
 8000fe0:	0052      	lsls	r2, r2, #1
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	7063      	strb	r3, [r4, #1]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8000fe8:	79e8      	ldrb	r0, [r5, #7]
 8000fea:	2201      	movs	r2, #1
 8000fec:	4002      	ands	r2, r0
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	7063      	strb	r3, [r4, #1]
    data_array[2] = gen_int_set->gen_int_thres;
 8000ff2:	782b      	ldrb	r3, [r5, #0]
 8000ff4:	70a3      	strb	r3, [r4, #2]
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8000ff6:	886b      	ldrh	r3, [r5, #2]
 8000ff8:	0a1a      	lsrs	r2, r3, #8
 8000ffa:	70e2      	strb	r2, [r4, #3]
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8000ffc:	7123      	strb	r3, [r4, #4]
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 8000ffe:	2900      	cmp	r1, #0
 8001000:	d116      	bne.n	8001030 <set_gen1_int+0x90>
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8001002:	896b      	ldrh	r3, [r5, #10]
 8001004:	7aaa      	ldrb	r2, [r5, #10]
 8001006:	0021      	movs	r1, r4
 8001008:	7162      	strb	r2, [r4, #5]
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 800100a:	0a1b      	lsrs	r3, r3, #8
 800100c:	71a3      	strb	r3, [r4, #6]
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 800100e:	89ab      	ldrh	r3, [r5, #12]
 8001010:	7b2a      	ldrb	r2, [r5, #12]
 8001012:	71e2      	strb	r2, [r4, #7]
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	7223      	strb	r3, [r4, #8]
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8001018:	89eb      	ldrh	r3, [r5, #14]
 800101a:	7baa      	ldrb	r2, [r5, #14]
 800101c:	7262      	strb	r2, [r4, #9]
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	72a3      	strb	r3, [r4, #10]
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 11, dev);
 8001022:	0033      	movs	r3, r6
 8001024:	220b      	movs	r2, #11
 8001026:	203f      	movs	r0, #63	@ 0x3f
 8001028:	f7ff ff58 	bl	8000edc <bma400_set_regs>
}
 800102c:	b004      	add	sp, #16
 800102e:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 5, dev);
 8001030:	0033      	movs	r3, r6
 8001032:	2205      	movs	r2, #5
 8001034:	a901      	add	r1, sp, #4
 8001036:	203f      	movs	r0, #63	@ 0x3f
 8001038:	f7ff ff50 	bl	8000edc <bma400_set_regs>
 800103c:	e7f6      	b.n	800102c <set_gen1_int+0x8c>

0800103e <set_gen2_int>:
{
 800103e:	b570      	push	{r4, r5, r6, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	0005      	movs	r5, r0
 8001044:	000e      	movs	r6, r1
    uint8_t data_array[11] = { 0 };
 8001046:	ac01      	add	r4, sp, #4
 8001048:	220b      	movs	r2, #11
 800104a:	2100      	movs	r1, #0
 800104c:	0020      	movs	r0, r4
 800104e:	f002 feff 	bl	8003e50 <memset>
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8001052:	792a      	ldrb	r2, [r5, #4]
 8001054:	0152      	lsls	r2, r2, #5
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 800105a:	7969      	ldrb	r1, [r5, #5]
 800105c:	0109      	lsls	r1, r1, #4
 800105e:	2310      	movs	r3, #16
 8001060:	400b      	ands	r3, r1
 8001062:	431a      	orrs	r2, r3
 8001064:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8001066:	7a29      	ldrb	r1, [r5, #8]
 8001068:	0088      	lsls	r0, r1, #2
 800106a:	230c      	movs	r3, #12
 800106c:	4003      	ands	r3, r0
 800106e:	431a      	orrs	r2, r3
 8001070:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8001072:	7a68      	ldrb	r0, [r5, #9]
 8001074:	2303      	movs	r3, #3
 8001076:	4003      	ands	r3, r0
 8001078:	431a      	orrs	r2, r3
 800107a:	7022      	strb	r2, [r4, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800107c:	79aa      	ldrb	r2, [r5, #6]
 800107e:	0052      	lsls	r2, r2, #1
 8001080:	2302      	movs	r3, #2
 8001082:	4013      	ands	r3, r2
 8001084:	7063      	strb	r3, [r4, #1]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8001086:	79e8      	ldrb	r0, [r5, #7]
 8001088:	2201      	movs	r2, #1
 800108a:	4002      	ands	r2, r0
 800108c:	4313      	orrs	r3, r2
 800108e:	7063      	strb	r3, [r4, #1]
    data_array[2] = gen_int_set->gen_int_thres;
 8001090:	782b      	ldrb	r3, [r5, #0]
 8001092:	70a3      	strb	r3, [r4, #2]
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8001094:	886b      	ldrh	r3, [r5, #2]
 8001096:	0a1a      	lsrs	r2, r3, #8
 8001098:	70e2      	strb	r2, [r4, #3]
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 800109a:	7123      	strb	r3, [r4, #4]
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 800109c:	2900      	cmp	r1, #0
 800109e:	d116      	bne.n	80010ce <set_gen2_int+0x90>
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 80010a0:	896b      	ldrh	r3, [r5, #10]
 80010a2:	7aaa      	ldrb	r2, [r5, #10]
 80010a4:	0021      	movs	r1, r4
 80010a6:	7162      	strb	r2, [r4, #5]
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	71a3      	strb	r3, [r4, #6]
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 80010ac:	89ab      	ldrh	r3, [r5, #12]
 80010ae:	7b2a      	ldrb	r2, [r5, #12]
 80010b0:	71e2      	strb	r2, [r4, #7]
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	7223      	strb	r3, [r4, #8]
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 80010b6:	89eb      	ldrh	r3, [r5, #14]
 80010b8:	7baa      	ldrb	r2, [r5, #14]
 80010ba:	7262      	strb	r2, [r4, #9]
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	72a3      	strb	r3, [r4, #10]
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 11, dev);
 80010c0:	0033      	movs	r3, r6
 80010c2:	220b      	movs	r2, #11
 80010c4:	204a      	movs	r0, #74	@ 0x4a
 80010c6:	f7ff ff09 	bl	8000edc <bma400_set_regs>
}
 80010ca:	b004      	add	sp, #16
 80010cc:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 5, dev);
 80010ce:	0033      	movs	r3, r6
 80010d0:	2205      	movs	r2, #5
 80010d2:	a901      	add	r1, sp, #4
 80010d4:	204a      	movs	r0, #74	@ 0x4a
 80010d6:	f7ff ff01 	bl	8000edc <bma400_set_regs>
 80010da:	e7f6      	b.n	80010ca <set_gen2_int+0x8c>

080010dc <set_orient_int>:
{
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	0004      	movs	r4, r0
 80010e2:	000e      	movs	r6, r1
    uint8_t data_array[10] = { 0 };
 80010e4:	ad01      	add	r5, sp, #4
 80010e6:	220a      	movs	r2, #10
 80010e8:	2100      	movs	r1, #0
 80010ea:	0028      	movs	r0, r5
 80010ec:	f002 feb0 	bl	8003e50 <memset>
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 80010f0:	7822      	ldrb	r2, [r4, #0]
 80010f2:	0152      	lsls	r2, r2, #5
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	702a      	strb	r2, [r5, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 80010f8:	7861      	ldrb	r1, [r4, #1]
 80010fa:	0109      	lsls	r1, r1, #4
 80010fc:	2310      	movs	r3, #16
 80010fe:	400b      	ands	r3, r1
 8001100:	431a      	orrs	r2, r3
 8001102:	702a      	strb	r2, [r5, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 8001104:	78a1      	ldrb	r1, [r4, #2]
 8001106:	0088      	lsls	r0, r1, #2
 8001108:	230c      	movs	r3, #12
 800110a:	4003      	ands	r3, r0
 800110c:	431a      	orrs	r2, r3
 800110e:	702a      	strb	r2, [r5, #0]
    data_array[1] = orient_conf->orient_thres;
 8001110:	78e3      	ldrb	r3, [r4, #3]
 8001112:	706b      	strb	r3, [r5, #1]
    data_array[2] = orient_conf->stability_thres;
 8001114:	7923      	ldrb	r3, [r4, #4]
 8001116:	70ab      	strb	r3, [r5, #2]
    data_array[3] = orient_conf->orient_int_dur;
 8001118:	7963      	ldrb	r3, [r4, #5]
 800111a:	70eb      	strb	r3, [r5, #3]
    if (orient_conf->ref_update == BMA400_UPDATE_MANUAL)
 800111c:	2900      	cmp	r1, #0
 800111e:	d116      	bne.n	800114e <set_orient_int+0x72>
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 8001120:	88e3      	ldrh	r3, [r4, #6]
 8001122:	79a2      	ldrb	r2, [r4, #6]
 8001124:	0029      	movs	r1, r5
 8001126:	712a      	strb	r2, [r5, #4]
        data_array[5] = BMA400_GET_MSB(orient_conf->orient_ref_x);
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	716b      	strb	r3, [r5, #5]
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 800112c:	8923      	ldrh	r3, [r4, #8]
 800112e:	7a22      	ldrb	r2, [r4, #8]
 8001130:	71aa      	strb	r2, [r5, #6]
        data_array[7] = BMA400_GET_MSB(orient_conf->orient_ref_y);
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	71eb      	strb	r3, [r5, #7]
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 8001136:	8963      	ldrh	r3, [r4, #10]
 8001138:	7aa2      	ldrb	r2, [r4, #10]
 800113a:	722a      	strb	r2, [r5, #8]
        data_array[9] = BMA400_GET_MSB(orient_conf->orient_ref_z);
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	726b      	strb	r3, [r5, #9]
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 10, dev);
 8001140:	0033      	movs	r3, r6
 8001142:	220a      	movs	r2, #10
 8001144:	2035      	movs	r0, #53	@ 0x35
 8001146:	f7ff fec9 	bl	8000edc <bma400_set_regs>
}
 800114a:	b004      	add	sp, #16
 800114c:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 4, dev);
 800114e:	0033      	movs	r3, r6
 8001150:	2204      	movs	r2, #4
 8001152:	a901      	add	r1, sp, #4
 8001154:	2035      	movs	r0, #53	@ 0x35
 8001156:	f7ff fec1 	bl	8000edc <bma400_set_regs>
 800115a:	e7f6      	b.n	800114a <set_orient_int+0x6e>

0800115c <set_autowakeup_interrupt>:
{
 800115c:	b530      	push	{r4, r5, lr}
 800115e:	b083      	sub	sp, #12
 8001160:	0004      	movs	r4, r0
 8001162:	000d      	movs	r5, r1
    uint8_t data_array[5] = { 0 };
 8001164:	2205      	movs	r2, #5
 8001166:	2100      	movs	r1, #0
 8001168:	4668      	mov	r0, sp
 800116a:	f002 fe71 	bl	8003e50 <memset>
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 800116e:	7823      	ldrb	r3, [r4, #0]
 8001170:	2203      	movs	r2, #3
 8001172:	401a      	ands	r2, r3
 8001174:	466b      	mov	r3, sp
 8001176:	701a      	strb	r2, [r3, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 8001178:	7861      	ldrb	r1, [r4, #1]
 800117a:	0089      	lsls	r1, r1, #2
 800117c:	231c      	movs	r3, #28
 800117e:	400b      	ands	r3, r1
 8001180:	431a      	orrs	r2, r3
 8001182:	466b      	mov	r3, sp
 8001184:	701a      	strb	r2, [r3, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 8001186:	78a3      	ldrb	r3, [r4, #2]
 8001188:	015b      	lsls	r3, r3, #5
 800118a:	431a      	orrs	r2, r3
 800118c:	466b      	mov	r3, sp
 800118e:	701a      	strb	r2, [r3, #0]
    data_array[1] = wakeup_conf->int_wkup_threshold;
 8001190:	78e3      	ldrb	r3, [r4, #3]
 8001192:	466a      	mov	r2, sp
 8001194:	7053      	strb	r3, [r2, #1]
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 8001196:	7923      	ldrb	r3, [r4, #4]
 8001198:	7093      	strb	r3, [r2, #2]
    data_array[3] = wakeup_conf->int_wkup_ref_y;
 800119a:	7963      	ldrb	r3, [r4, #5]
 800119c:	70d3      	strb	r3, [r2, #3]
    data_array[4] = wakeup_conf->int_wkup_ref_z;
 800119e:	79a3      	ldrb	r3, [r4, #6]
 80011a0:	7113      	strb	r3, [r2, #4]
    rslt = bma400_set_regs(BMA400_REG_WAKEUP_INT_CONF_0, data_array, 5, dev);
 80011a2:	002b      	movs	r3, r5
 80011a4:	2205      	movs	r2, #5
 80011a6:	4669      	mov	r1, sp
 80011a8:	202f      	movs	r0, #47	@ 0x2f
 80011aa:	f7ff fe97 	bl	8000edc <bma400_set_regs>
}
 80011ae:	b003      	add	sp, #12
 80011b0:	bd30      	pop	{r4, r5, pc}

080011b2 <bma400_get_regs>:
{
 80011b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b4:	46ce      	mov	lr, r9
 80011b6:	4647      	mov	r7, r8
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0a1      	sub	sp, #132	@ 0x84
 80011bc:	0004      	movs	r4, r0
 80011be:	4688      	mov	r8, r1
 80011c0:	0017      	movs	r7, r2
 80011c2:	001e      	movs	r6, r3
    rslt = null_ptr_check(dev);
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff fceb 	bl	8000ba0 <null_ptr_check>
 80011ca:	4681      	mov	r9, r0
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 80011cc:	2800      	cmp	r0, #0
 80011ce:	d129      	bne.n	8001224 <bma400_get_regs+0x72>
 80011d0:	4643      	mov	r3, r8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d02a      	beq.n	800122c <bma400_get_regs+0x7a>
        if (dev->intf != BMA400_I2C_INTF)
 80011d6:	7873      	ldrb	r3, [r6, #1]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d003      	beq.n	80011e4 <bma400_get_regs+0x32>
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	425b      	negs	r3, r3
 80011e0:	431c      	orrs	r4, r3
 80011e2:	b2e4      	uxtb	r4, r4
        dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr);
 80011e4:	68f5      	ldr	r5, [r6, #12]
 80011e6:	7a32      	ldrb	r2, [r6, #8]
 80011e8:	6873      	ldr	r3, [r6, #4]
 80011ea:	19d2      	adds	r2, r2, r7
 80011ec:	4669      	mov	r1, sp
 80011ee:	0020      	movs	r0, r4
 80011f0:	47a8      	blx	r5
 80011f2:	7730      	strb	r0, [r6, #28]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d101      	bne.n	80011fc <bma400_get_regs+0x4a>
            for (index = 0; index < len; index++)
 80011f8:	2400      	movs	r4, #0
 80011fa:	e00b      	b.n	8001214 <bma400_get_regs+0x62>
            rslt = BMA400_E_COM_FAIL;
 80011fc:	2302      	movs	r3, #2
 80011fe:	425b      	negs	r3, r3
 8001200:	4699      	mov	r9, r3
 8001202:	e009      	b.n	8001218 <bma400_get_regs+0x66>
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 8001204:	7a35      	ldrb	r5, [r6, #8]
 8001206:	1965      	adds	r5, r4, r5
 8001208:	466b      	mov	r3, sp
 800120a:	5d5b      	ldrb	r3, [r3, r5]
 800120c:	4642      	mov	r2, r8
 800120e:	5513      	strb	r3, [r2, r4]
            for (index = 0; index < len; index++)
 8001210:	3401      	adds	r4, #1
 8001212:	b2a4      	uxth	r4, r4
 8001214:	42bc      	cmp	r4, r7
 8001216:	d3f5      	bcc.n	8001204 <bma400_get_regs+0x52>
}
 8001218:	4648      	mov	r0, r9
 800121a:	b021      	add	sp, #132	@ 0x84
 800121c:	bcc0      	pop	{r6, r7}
 800121e:	46b9      	mov	r9, r7
 8001220:	46b0      	mov	r8, r6
 8001222:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMA400_E_NULL_PTR;
 8001224:	2301      	movs	r3, #1
 8001226:	425b      	negs	r3, r3
 8001228:	4699      	mov	r9, r3
 800122a:	e7f5      	b.n	8001218 <bma400_get_regs+0x66>
 800122c:	2301      	movs	r3, #1
 800122e:	425b      	negs	r3, r3
 8001230:	4699      	mov	r9, r3
 8001232:	e7f1      	b.n	8001218 <bma400_get_regs+0x66>

08001234 <bma400_init>:
{
 8001234:	b530      	push	{r4, r5, lr}
 8001236:	b083      	sub	sp, #12
 8001238:	0005      	movs	r5, r0
    uint8_t chip_id = 0;
 800123a:	466b      	mov	r3, sp
 800123c:	2200      	movs	r2, #0
 800123e:	71da      	strb	r2, [r3, #7]
    rslt = null_ptr_check(dev);
 8001240:	f7ff fcae 	bl	8000ba0 <null_ptr_check>
 8001244:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8001246:	d10a      	bne.n	800125e <bma400_init+0x2a>
        dev->delay_us(5000, dev->intf_ptr);
 8001248:	696b      	ldr	r3, [r5, #20]
 800124a:	6869      	ldr	r1, [r5, #4]
 800124c:	4814      	ldr	r0, [pc, #80]	@ (80012a0 <bma400_init+0x6c>)
 800124e:	4798      	blx	r3
        if (dev->intf == BMA400_SPI_INTF)
 8001250:	786b      	ldrb	r3, [r5, #1]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <bma400_init+0x30>
            dev->dummy_byte = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	722b      	strb	r3, [r5, #8]
        if (rslt == BMA400_OK)
 800125a:	2c00      	cmp	r4, #0
 800125c:	d00d      	beq.n	800127a <bma400_init+0x46>
}
 800125e:	0020      	movs	r0, r4
 8001260:	b003      	add	sp, #12
 8001262:	bd30      	pop	{r4, r5, pc}
            dev->dummy_byte = 1;
 8001264:	3301      	adds	r3, #1
 8001266:	722b      	strb	r3, [r5, #8]
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8001268:	002b      	movs	r3, r5
 800126a:	2201      	movs	r2, #1
 800126c:	4669      	mov	r1, sp
 800126e:	3107      	adds	r1, #7
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff ff9e 	bl	80011b2 <bma400_get_regs>
 8001276:	0004      	movs	r4, r0
 8001278:	e7ef      	b.n	800125a <bma400_init+0x26>
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 800127a:	002b      	movs	r3, r5
 800127c:	2201      	movs	r2, #1
 800127e:	4669      	mov	r1, sp
 8001280:	3107      	adds	r1, #7
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff ff95 	bl	80011b2 <bma400_get_regs>
 8001288:	1e04      	subs	r4, r0, #0
            if (rslt == BMA400_OK)
 800128a:	d1e8      	bne.n	800125e <bma400_init+0x2a>
                if (chip_id == BMA400_CHIP_ID)
 800128c:	466b      	mov	r3, sp
 800128e:	3307      	adds	r3, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b90      	cmp	r3, #144	@ 0x90
 8001294:	d101      	bne.n	800129a <bma400_init+0x66>
                    dev->chip_id = chip_id;
 8001296:	702b      	strb	r3, [r5, #0]
 8001298:	e7e1      	b.n	800125e <bma400_init+0x2a>
                    rslt = BMA400_E_DEV_NOT_FOUND;
 800129a:	2403      	movs	r4, #3
 800129c:	4264      	negs	r4, r4
 800129e:	e7de      	b.n	800125e <bma400_init+0x2a>
 80012a0:	00001388 	.word	0x00001388

080012a4 <get_accel_data>:
{
 80012a4:	b570      	push	{r4, r5, r6, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	0005      	movs	r5, r0
 80012aa:	000c      	movs	r4, r1
 80012ac:	0016      	movs	r6, r2
    uint8_t data_array[9] = { 0 };
 80012ae:	2209      	movs	r2, #9
 80012b0:	2100      	movs	r1, #0
 80012b2:	a801      	add	r0, sp, #4
 80012b4:	f002 fdcc 	bl	8003e50 <memset>
    if (data_sel == BMA400_DATA_ONLY)
 80012b8:	2d00      	cmp	r5, #0
 80012ba:	d03f      	beq.n	800133c <get_accel_data+0x98>
    else if (data_sel == BMA400_DATA_SENSOR_TIME)
 80012bc:	2d01      	cmp	r5, #1
 80012be:	d150      	bne.n	8001362 <get_accel_data+0xbe>
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 9, dev);
 80012c0:	0033      	movs	r3, r6
 80012c2:	2209      	movs	r2, #9
 80012c4:	a901      	add	r1, sp, #4
 80012c6:	2004      	movs	r0, #4
 80012c8:	f7ff ff73 	bl	80011b2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d133      	bne.n	8001338 <get_accel_data+0x94>
        lsb = data_array[0];
 80012d0:	aa01      	add	r2, sp, #4
 80012d2:	7813      	ldrb	r3, [r2, #0]
        msb = data_array[1];
 80012d4:	7852      	ldrb	r2, [r2, #1]
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 80012d6:	0212      	lsls	r2, r2, #8
 80012d8:	189b      	adds	r3, r3, r2
 80012da:	b29a      	uxth	r2, r3
 80012dc:	b21b      	sxth	r3, r3
 80012de:	8023      	strh	r3, [r4, #0]
        if (accel->x > 2047)
 80012e0:	2180      	movs	r1, #128	@ 0x80
 80012e2:	0109      	lsls	r1, r1, #4
 80012e4:	428b      	cmp	r3, r1
 80012e6:	db03      	blt.n	80012f0 <get_accel_data+0x4c>
            accel->x = accel->x - 4096;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <get_accel_data+0xc4>)
 80012ea:	469c      	mov	ip, r3
 80012ec:	4462      	add	r2, ip
 80012ee:	8022      	strh	r2, [r4, #0]
        lsb = data_array[2];
 80012f0:	ab01      	add	r3, sp, #4
 80012f2:	789a      	ldrb	r2, [r3, #2]
        msb = data_array[3];
 80012f4:	78db      	ldrb	r3, [r3, #3]
        accel->y = (int16_t)(((uint16_t)msb * 256) | lsb);
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8063      	strh	r3, [r4, #2]
        if (accel->y > 2047)
 80012fe:	2280      	movs	r2, #128	@ 0x80
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	4293      	cmp	r3, r2
 8001304:	db04      	blt.n	8001310 <get_accel_data+0x6c>
            accel->y = accel->y - 4096;
 8001306:	b29b      	uxth	r3, r3
 8001308:	4a17      	ldr	r2, [pc, #92]	@ (8001368 <get_accel_data+0xc4>)
 800130a:	4694      	mov	ip, r2
 800130c:	4463      	add	r3, ip
 800130e:	8063      	strh	r3, [r4, #2]
        lsb = data_array[4];
 8001310:	ab01      	add	r3, sp, #4
 8001312:	791a      	ldrb	r2, [r3, #4]
        msb = data_array[5];
 8001314:	795b      	ldrb	r3, [r3, #5]
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	4313      	orrs	r3, r2
 800131a:	b21b      	sxth	r3, r3
 800131c:	80a3      	strh	r3, [r4, #4]
        if (accel->z > 2047)
 800131e:	2280      	movs	r2, #128	@ 0x80
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	4293      	cmp	r3, r2
 8001324:	db04      	blt.n	8001330 <get_accel_data+0x8c>
            accel->z = accel->z - 4096;
 8001326:	b29b      	uxth	r3, r3
 8001328:	4a0f      	ldr	r2, [pc, #60]	@ (8001368 <get_accel_data+0xc4>)
 800132a:	4694      	mov	ip, r2
 800132c:	4463      	add	r3, ip
 800132e:	80a3      	strh	r3, [r4, #4]
        if (data_sel == BMA400_DATA_ONLY)
 8001330:	2d00      	cmp	r5, #0
 8001332:	d10a      	bne.n	800134a <get_accel_data+0xa6>
            accel->sensortime = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	60a3      	str	r3, [r4, #8]
}
 8001338:	b004      	add	sp, #16
 800133a:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 6, dev);
 800133c:	0033      	movs	r3, r6
 800133e:	2206      	movs	r2, #6
 8001340:	a901      	add	r1, sp, #4
 8001342:	2004      	movs	r0, #4
 8001344:	f7ff ff35 	bl	80011b2 <bma400_get_regs>
 8001348:	e7c0      	b.n	80012cc <get_accel_data+0x28>
        if (data_sel == BMA400_DATA_SENSOR_TIME)
 800134a:	2d01      	cmp	r5, #1
 800134c:	d1f4      	bne.n	8001338 <get_accel_data+0x94>
            time_0 = data_array[6];
 800134e:	a901      	add	r1, sp, #4
 8001350:	798a      	ldrb	r2, [r1, #6]
            time_1 = ((uint16_t)data_array[7] << 8);
 8001352:	79cb      	ldrb	r3, [r1, #7]
 8001354:	021b      	lsls	r3, r3, #8
            time_2 = ((uint32_t)data_array[8] << 16);
 8001356:	7a09      	ldrb	r1, [r1, #8]
 8001358:	0409      	lsls	r1, r1, #16
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 800135a:	185b      	adds	r3, r3, r1
 800135c:	18d3      	adds	r3, r2, r3
 800135e:	60a3      	str	r3, [r4, #8]
 8001360:	e7ea      	b.n	8001338 <get_accel_data+0x94>
        rslt = BMA400_E_INVALID_CONFIG;
 8001362:	2004      	movs	r0, #4
 8001364:	4240      	negs	r0, r0
 8001366:	e7e7      	b.n	8001338 <get_accel_data+0x94>
 8001368:	fffff000 	.word	0xfffff000

0800136c <set_accel_conf>:
{
 800136c:	b530      	push	{r4, r5, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	0004      	movs	r4, r0
 8001372:	000d      	movs	r5, r1
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <set_accel_conf+0x94>)
 8001376:	881a      	ldrh	r2, [r3, #0]
 8001378:	4669      	mov	r1, sp
 800137a:	808a      	strh	r2, [r1, #4]
 800137c:	789b      	ldrb	r3, [r3, #2]
 800137e:	718b      	strb	r3, [r1, #6]
    rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8001380:	002b      	movs	r3, r5
 8001382:	2203      	movs	r2, #3
 8001384:	a901      	add	r1, sp, #4
 8001386:	2019      	movs	r0, #25
 8001388:	f7ff ff13 	bl	80011b2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 800138c:	2800      	cmp	r0, #0
 800138e:	d001      	beq.n	8001394 <set_accel_conf+0x28>
}
 8001390:	b003      	add	sp, #12
 8001392:	bd30      	pop	{r4, r5, pc}
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8001394:	a901      	add	r1, sp, #4
 8001396:	7808      	ldrb	r0, [r1, #0]
 8001398:	7962      	ldrb	r2, [r4, #5]
 800139a:	237f      	movs	r3, #127	@ 0x7f
 800139c:	4003      	ands	r3, r0
 800139e:	01d2      	lsls	r2, r2, #7
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	700b      	strb	r3, [r1, #0]
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 80013a6:	7920      	ldrb	r0, [r4, #4]
 80013a8:	0140      	lsls	r0, r0, #5
 80013aa:	2260      	movs	r2, #96	@ 0x60
 80013ac:	4002      	ands	r2, r0
 80013ae:	2060      	movs	r0, #96	@ 0x60
 80013b0:	4383      	bics	r3, r0
 80013b2:	4313      	orrs	r3, r2
 80013b4:	700b      	strb	r3, [r1, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 80013b6:	7848      	ldrb	r0, [r1, #1]
 80013b8:	7863      	ldrb	r3, [r4, #1]
 80013ba:	223f      	movs	r2, #63	@ 0x3f
 80013bc:	4002      	ands	r2, r0
 80013be:	019b      	lsls	r3, r3, #6
 80013c0:	431a      	orrs	r2, r3
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	704a      	strb	r2, [r1, #1]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 80013c6:	78e0      	ldrb	r0, [r4, #3]
 80013c8:	0100      	lsls	r0, r0, #4
 80013ca:	2330      	movs	r3, #48	@ 0x30
 80013cc:	4003      	ands	r3, r0
 80013ce:	2030      	movs	r0, #48	@ 0x30
 80013d0:	4382      	bics	r2, r0
 80013d2:	431a      	orrs	r2, r3
 80013d4:	704a      	strb	r2, [r1, #1]
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 80013d6:	7820      	ldrb	r0, [r4, #0]
 80013d8:	230f      	movs	r3, #15
 80013da:	439a      	bics	r2, r3
 80013dc:	4003      	ands	r3, r0
 80013de:	431a      	orrs	r2, r3
 80013e0:	704a      	strb	r2, [r1, #1]
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 80013e2:	788b      	ldrb	r3, [r1, #2]
 80013e4:	78a0      	ldrb	r0, [r4, #2]
 80013e6:	0080      	lsls	r0, r0, #2
 80013e8:	220c      	movs	r2, #12
 80013ea:	4002      	ands	r2, r0
 80013ec:	200c      	movs	r0, #12
 80013ee:	4383      	bics	r3, r0
 80013f0:	4313      	orrs	r3, r2
 80013f2:	708b      	strb	r3, [r1, #2]
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 80013f4:	002b      	movs	r3, r5
 80013f6:	2203      	movs	r2, #3
 80013f8:	300d      	adds	r0, #13
 80013fa:	f7ff fd6f 	bl	8000edc <bma400_set_regs>
 80013fe:	e7c7      	b.n	8001390 <set_accel_conf+0x24>
 8001400:	0800475c 	.word	0x0800475c

08001404 <set_tap_conf>:
{
 8001404:	b530      	push	{r4, r5, lr}
 8001406:	b083      	sub	sp, #12
 8001408:	0005      	movs	r5, r0
 800140a:	000c      	movs	r4, r1
    uint8_t reg_data[2] = { 0, 0 };
 800140c:	a901      	add	r1, sp, #4
 800140e:	2300      	movs	r3, #0
 8001410:	800b      	strh	r3, [r1, #0]
    rslt = bma400_get_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8001412:	0023      	movs	r3, r4
 8001414:	2202      	movs	r2, #2
 8001416:	2057      	movs	r0, #87	@ 0x57
 8001418:	f7ff fecb 	bl	80011b2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 800141c:	2800      	cmp	r0, #0
 800141e:	d001      	beq.n	8001424 <set_tap_conf+0x20>
}
 8001420:	b003      	add	sp, #12
 8001422:	bd30      	pop	{r4, r5, pc}
        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_TAP_AXES_EN, tap_set->axes_sel);
 8001424:	a901      	add	r1, sp, #4
 8001426:	780b      	ldrb	r3, [r1, #0]
 8001428:	7828      	ldrb	r0, [r5, #0]
 800142a:	00c0      	lsls	r0, r0, #3
 800142c:	2218      	movs	r2, #24
 800142e:	4002      	ands	r2, r0
 8001430:	2018      	movs	r0, #24
 8001432:	4383      	bics	r3, r0
 8001434:	4313      	orrs	r3, r2
 8001436:	700b      	strb	r3, [r1, #0]
        reg_data[0] = BMA400_SET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY, tap_set->sensitivity);
 8001438:	7868      	ldrb	r0, [r5, #1]
 800143a:	2207      	movs	r2, #7
 800143c:	4393      	bics	r3, r2
 800143e:	4002      	ands	r2, r0
 8001440:	4313      	orrs	r3, r2
 8001442:	700b      	strb	r3, [r1, #0]
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET_DT, tap_set->quiet_dt);
 8001444:	784a      	ldrb	r2, [r1, #1]
 8001446:	7928      	ldrb	r0, [r5, #4]
 8001448:	0100      	lsls	r0, r0, #4
 800144a:	2330      	movs	r3, #48	@ 0x30
 800144c:	4003      	ands	r3, r0
 800144e:	2030      	movs	r0, #48	@ 0x30
 8001450:	4382      	bics	r2, r0
 8001452:	431a      	orrs	r2, r3
 8001454:	704a      	strb	r2, [r1, #1]
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET, tap_set->quiet);
 8001456:	78e8      	ldrb	r0, [r5, #3]
 8001458:	0080      	lsls	r0, r0, #2
 800145a:	230c      	movs	r3, #12
 800145c:	4003      	ands	r3, r0
 800145e:	200c      	movs	r0, #12
 8001460:	4382      	bics	r2, r0
 8001462:	431a      	orrs	r2, r3
 8001464:	704a      	strb	r2, [r1, #1]
        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH, tap_set->tics_th);
 8001466:	78a8      	ldrb	r0, [r5, #2]
 8001468:	2303      	movs	r3, #3
 800146a:	439a      	bics	r2, r3
 800146c:	4003      	ands	r3, r0
 800146e:	431a      	orrs	r2, r3
 8001470:	704a      	strb	r2, [r1, #1]
        rslt = bma400_set_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8001472:	0023      	movs	r3, r4
 8001474:	2202      	movs	r2, #2
 8001476:	2057      	movs	r0, #87	@ 0x57
 8001478:	f7ff fd30 	bl	8000edc <bma400_set_regs>
 800147c:	e7d0      	b.n	8001420 <set_tap_conf+0x1c>

0800147e <set_sensor_conf>:
{
 800147e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001480:	b083      	sub	sp, #12
 8001482:	9001      	str	r0, [sp, #4]
 8001484:	000c      	movs	r4, r1
 8001486:	0016      	movs	r6, r2
    if (BMA400_ACCEL == conf->type)
 8001488:	780b      	ldrb	r3, [r1, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d018      	beq.n	80014c0 <set_sensor_conf+0x42>
    enum bma400_int_chan int_map = BMA400_UNMAP_INT_PIN;
 800148e:	2200      	movs	r2, #0
    uint8_t int_enable = 0;
 8001490:	2100      	movs	r1, #0
    int8_t rslt = BMA400_E_INVALID_CONFIG;
 8001492:	2504      	movs	r5, #4
 8001494:	426d      	negs	r5, r5
    if (BMA400_TAP_INT == conf->type)
 8001496:	7823      	ldrb	r3, [r4, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d019      	beq.n	80014d0 <set_sensor_conf+0x52>
    if (BMA400_ACTIVITY_CHANGE_INT == conf->type)
 800149c:	7823      	ldrb	r3, [r4, #0]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d01e      	beq.n	80014e0 <set_sensor_conf+0x62>
    if (BMA400_GEN1_INT == conf->type)
 80014a2:	7823      	ldrb	r3, [r4, #0]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d023      	beq.n	80014f0 <set_sensor_conf+0x72>
    if (BMA400_GEN2_INT == conf->type)
 80014a8:	7827      	ldrb	r7, [r4, #0]
 80014aa:	2f04      	cmp	r7, #4
 80014ac:	d028      	beq.n	8001500 <set_sensor_conf+0x82>
    if (BMA400_ORIENT_CHANGE_INT == conf->type)
 80014ae:	7823      	ldrb	r3, [r4, #0]
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d02d      	beq.n	8001510 <set_sensor_conf+0x92>
    if (BMA400_STEP_COUNTER_INT == conf->type)
 80014b4:	7823      	ldrb	r3, [r4, #0]
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d032      	beq.n	8001520 <set_sensor_conf+0xa2>
    if (rslt == BMA400_OK)
 80014ba:	2d00      	cmp	r5, #0
 80014bc:	d136      	bne.n	800152c <set_sensor_conf+0xae>
 80014be:	e032      	b.n	8001526 <set_sensor_conf+0xa8>
        rslt = set_accel_conf(&conf->param.accel, dev);
 80014c0:	1c88      	adds	r0, r1, #2
 80014c2:	0011      	movs	r1, r2
 80014c4:	f7ff ff52 	bl	800136c <set_accel_conf>
 80014c8:	0005      	movs	r5, r0
        int_map = conf->param.accel.int_chan;
 80014ca:	7a22      	ldrb	r2, [r4, #8]
        int_enable = BMA400_DATA_READY_INT_MAP;
 80014cc:	2101      	movs	r1, #1
 80014ce:	e7e2      	b.n	8001496 <set_sensor_conf+0x18>
        rslt = set_tap_conf(&conf->param.tap, dev);
 80014d0:	1ca0      	adds	r0, r4, #2
 80014d2:	0031      	movs	r1, r6
 80014d4:	f7ff ff96 	bl	8001404 <set_tap_conf>
 80014d8:	0005      	movs	r5, r0
        int_map = conf->param.tap.int_chan;
 80014da:	79e2      	ldrb	r2, [r4, #7]
        int_enable = BMA400_TAP_INT_MAP;
 80014dc:	2109      	movs	r1, #9
 80014de:	e7dd      	b.n	800149c <set_sensor_conf+0x1e>
        rslt = set_activity_change_conf(&conf->param.act_ch, dev);
 80014e0:	1ca0      	adds	r0, r4, #2
 80014e2:	0031      	movs	r1, r6
 80014e4:	f7ff fd3f 	bl	8000f66 <set_activity_change_conf>
 80014e8:	0005      	movs	r5, r0
        int_map = conf->param.act_ch.int_chan;
 80014ea:	79a2      	ldrb	r2, [r4, #6]
        int_enable = BMA400_ACT_CH_INT_MAP;
 80014ec:	2108      	movs	r1, #8
 80014ee:	e7d8      	b.n	80014a2 <set_sensor_conf+0x24>
        rslt = set_gen1_int(&conf->param.gen_int, dev);
 80014f0:	1ca0      	adds	r0, r4, #2
 80014f2:	0031      	movs	r1, r6
 80014f4:	f7ff fd54 	bl	8000fa0 <set_gen1_int>
 80014f8:	0005      	movs	r5, r0
        int_map = conf->param.gen_int.int_chan;
 80014fa:	7ca2      	ldrb	r2, [r4, #18]
        int_enable = BMA400_GEN1_INT_MAP;
 80014fc:	2105      	movs	r1, #5
 80014fe:	e7d3      	b.n	80014a8 <set_sensor_conf+0x2a>
        rslt = set_gen2_int(&conf->param.gen_int, dev);
 8001500:	1ca0      	adds	r0, r4, #2
 8001502:	0031      	movs	r1, r6
 8001504:	f7ff fd9b 	bl	800103e <set_gen2_int>
 8001508:	0005      	movs	r5, r0
        int_map = conf->param.gen_int.int_chan;
 800150a:	7ca2      	ldrb	r2, [r4, #18]
        int_enable = BMA400_GEN2_INT_MAP;
 800150c:	0039      	movs	r1, r7
 800150e:	e7ce      	b.n	80014ae <set_sensor_conf+0x30>
        rslt = set_orient_int(&conf->param.orient, dev);
 8001510:	1ca0      	adds	r0, r4, #2
 8001512:	0031      	movs	r1, r6
 8001514:	f7ff fde2 	bl	80010dc <set_orient_int>
 8001518:	0005      	movs	r5, r0
        int_map = conf->param.orient.int_chan;
 800151a:	7ba2      	ldrb	r2, [r4, #14]
        int_enable = BMA400_ORIENT_CH_INT_MAP;
 800151c:	2106      	movs	r1, #6
 800151e:	e7c9      	b.n	80014b4 <set_sensor_conf+0x36>
        int_map = conf->param.step_cnt.int_chan;
 8001520:	78a2      	ldrb	r2, [r4, #2]
        int_enable = BMA400_STEP_INT_MAP;
 8001522:	210a      	movs	r1, #10
        rslt = BMA400_OK;
 8001524:	2500      	movs	r5, #0
        map_int_pin(data, int_enable, int_map);
 8001526:	9801      	ldr	r0, [sp, #4]
 8001528:	f7ff fb54 	bl	8000bd4 <map_int_pin>
}
 800152c:	0028      	movs	r0, r5
 800152e:	b003      	add	sp, #12
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001532 <set_autowakeup_timeout>:
{
 8001532:	b530      	push	{r4, r5, lr}
 8001534:	b083      	sub	sp, #12
 8001536:	0005      	movs	r5, r0
 8001538:	000c      	movs	r4, r1
    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &data_array[1], 1, dev);
 800153a:	000b      	movs	r3, r1
 800153c:	2201      	movs	r2, #1
 800153e:	4669      	mov	r1, sp
 8001540:	3105      	adds	r1, #5
 8001542:	202d      	movs	r0, #45	@ 0x2d
 8001544:	f7ff fe35 	bl	80011b2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001548:	2800      	cmp	r0, #0
 800154a:	d001      	beq.n	8001550 <set_autowakeup_timeout+0x1e>
}
 800154c:	b003      	add	sp, #12
 800154e:	bd30      	pop	{r4, r5, pc}
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 8001550:	a901      	add	r1, sp, #4
 8001552:	784b      	ldrb	r3, [r1, #1]
 8001554:	7828      	ldrb	r0, [r5, #0]
 8001556:	0080      	lsls	r0, r0, #2
 8001558:	2204      	movs	r2, #4
 800155a:	4002      	ands	r2, r0
 800155c:	2004      	movs	r0, #4
 800155e:	4383      	bics	r3, r0
 8001560:	4313      	orrs	r3, r2
 8001562:	704b      	strb	r3, [r1, #1]
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 8001564:	8868      	ldrh	r0, [r5, #2]
        msb = BMA400_GET_BITS(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_MSB);
 8001566:	1102      	asrs	r2, r0, #4
        data_array[0] = msb;
 8001568:	700a      	strb	r2, [r1, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT_THRES, lsb);
 800156a:	220f      	movs	r2, #15
 800156c:	4013      	ands	r3, r2
 800156e:	0100      	lsls	r0, r0, #4
 8001570:	4303      	orrs	r3, r0
 8001572:	704b      	strb	r3, [r1, #1]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_0, data_array, 2, dev);
 8001574:	0023      	movs	r3, r4
 8001576:	3a0d      	subs	r2, #13
 8001578:	202c      	movs	r0, #44	@ 0x2c
 800157a:	f7ff fcaf 	bl	8000edc <bma400_set_regs>
 800157e:	e7e5      	b.n	800154c <set_autowakeup_timeout+0x1a>

08001580 <set_auto_low_power>:
{
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	0004      	movs	r4, r0
 8001586:	000d      	movs	r5, r1
    rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8001588:	000b      	movs	r3, r1
 800158a:	2201      	movs	r2, #1
 800158c:	4669      	mov	r1, sp
 800158e:	3107      	adds	r1, #7
 8001590:	202b      	movs	r0, #43	@ 0x2b
 8001592:	f7ff fe0e 	bl	80011b2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001596:	2800      	cmp	r0, #0
 8001598:	d10d      	bne.n	80015b6 <set_auto_low_power+0x36>
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_AUTO_LOW_POW, auto_lp_conf->auto_low_power_trigger);
 800159a:	466b      	mov	r3, sp
 800159c:	1dd9      	adds	r1, r3, #7
 800159e:	79db      	ldrb	r3, [r3, #7]
 80015a0:	7826      	ldrb	r6, [r4, #0]
 80015a2:	220f      	movs	r2, #15
 80015a4:	4393      	bics	r3, r2
 80015a6:	4032      	ands	r2, r6
 80015a8:	4313      	orrs	r3, r2
 80015aa:	700b      	strb	r3, [r1, #0]
        if (auto_lp_conf->auto_low_power_trigger & 0x0C)
 80015ac:	230c      	movs	r3, #12
 80015ae:	4233      	tst	r3, r6
 80015b0:	d103      	bne.n	80015ba <set_auto_low_power+0x3a>
        if (rslt == BMA400_OK)
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d01d      	beq.n	80015f2 <set_auto_low_power+0x72>
}
 80015b6:	b002      	add	sp, #8
 80015b8:	bd70      	pop	{r4, r5, r6, pc}
            rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 80015ba:	002b      	movs	r3, r5
 80015bc:	2201      	movs	r2, #1
 80015be:	4669      	mov	r1, sp
 80015c0:	3106      	adds	r1, #6
 80015c2:	302a      	adds	r0, #42	@ 0x2a
 80015c4:	f7ff fdf5 	bl	80011b2 <bma400_get_regs>
            if (rslt == BMA400_OK)
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d1f4      	bne.n	80015b6 <set_auto_low_power+0x36>
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 80015cc:	8862      	ldrh	r2, [r4, #2]
 80015ce:	1113      	asrs	r3, r2, #4
 80015d0:	4669      	mov	r1, sp
 80015d2:	3106      	adds	r1, #6
 80015d4:	700b      	strb	r3, [r1, #0]
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 80015d6:	466b      	mov	r3, sp
 80015d8:	1dd8      	adds	r0, r3, #7
 80015da:	79dc      	ldrb	r4, [r3, #7]
 80015dc:	230f      	movs	r3, #15
 80015de:	4023      	ands	r3, r4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	4313      	orrs	r3, r2
 80015e4:	7003      	strb	r3, [r0, #0]
                rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 80015e6:	002b      	movs	r3, r5
 80015e8:	2201      	movs	r2, #1
 80015ea:	202a      	movs	r0, #42	@ 0x2a
 80015ec:	f7ff fc76 	bl	8000edc <bma400_set_regs>
 80015f0:	e7df      	b.n	80015b2 <set_auto_low_power+0x32>
            rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 80015f2:	002b      	movs	r3, r5
 80015f4:	2201      	movs	r2, #1
 80015f6:	4669      	mov	r1, sp
 80015f8:	3107      	adds	r1, #7
 80015fa:	302b      	adds	r0, #43	@ 0x2b
 80015fc:	f7ff fc6e 	bl	8000edc <bma400_set_regs>
 8001600:	e7d9      	b.n	80015b6 <set_auto_low_power+0x36>

08001602 <set_int_pin_conf>:
            break;
    }
}

static int8_t set_int_pin_conf(struct bma400_int_pin_conf int_conf, struct bma400_dev *dev)
{
 8001602:	b530      	push	{r4, r5, lr}
 8001604:	b085      	sub	sp, #20
 8001606:	ab01      	add	r3, sp, #4
 8001608:	8018      	strh	r0, [r3, #0]
 800160a:	000c      	movs	r4, r1
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 800160c:	000b      	movs	r3, r1
 800160e:	2201      	movs	r2, #1
 8001610:	210f      	movs	r1, #15
 8001612:	4469      	add	r1, sp
 8001614:	2024      	movs	r0, #36	@ 0x24
 8001616:	f7ff fdcc 	bl	80011b2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 800161a:	2800      	cmp	r0, #0
 800161c:	d10c      	bne.n	8001638 <set_int_pin_conf+0x36>
    {
        if (int_conf.int_chan == BMA400_INT_CHANNEL_1)
 800161e:	ab01      	add	r3, sp, #4
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d00a      	beq.n	800163c <set_int_pin_conf+0x3a>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
        }

        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
 8001626:	2b02      	cmp	r3, #2
 8001628:	d015      	beq.n	8001656 <set_int_pin_conf+0x54>
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
        }

        /* Set the configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 800162a:	0023      	movs	r3, r4
 800162c:	2201      	movs	r2, #1
 800162e:	210f      	movs	r1, #15
 8001630:	4469      	add	r1, sp
 8001632:	2024      	movs	r0, #36	@ 0x24
 8001634:	f7ff fc52 	bl	8000edc <bma400_set_regs>
    }

    return rslt;
}
 8001638:	b005      	add	sp, #20
 800163a:	bd30      	pop	{r4, r5, pc}
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
 800163c:	300f      	adds	r0, #15
 800163e:	4468      	add	r0, sp
 8001640:	7802      	ldrb	r2, [r0, #0]
 8001642:	a901      	add	r1, sp, #4
 8001644:	784d      	ldrb	r5, [r1, #1]
 8001646:	006d      	lsls	r5, r5, #1
 8001648:	2106      	movs	r1, #6
 800164a:	4029      	ands	r1, r5
 800164c:	2506      	movs	r5, #6
 800164e:	43aa      	bics	r2, r5
 8001650:	430a      	orrs	r2, r1
 8001652:	7002      	strb	r2, [r0, #0]
 8001654:	e7e7      	b.n	8001626 <set_int_pin_conf+0x24>
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 8001656:	200f      	movs	r0, #15
 8001658:	4468      	add	r0, sp
 800165a:	7803      	ldrb	r3, [r0, #0]
 800165c:	aa01      	add	r2, sp, #4
 800165e:	7851      	ldrb	r1, [r2, #1]
 8001660:	0149      	lsls	r1, r1, #5
 8001662:	2260      	movs	r2, #96	@ 0x60
 8001664:	400a      	ands	r2, r1
 8001666:	2160      	movs	r1, #96	@ 0x60
 8001668:	438b      	bics	r3, r1
 800166a:	4313      	orrs	r3, r2
 800166c:	7003      	strb	r3, [r0, #0]
 800166e:	e7dc      	b.n	800162a <set_int_pin_conf+0x28>

08001670 <set_fifo_conf>:

    return rslt;
}

static int8_t set_fifo_conf(const struct bma400_fifo_conf *fifo_conf, struct bma400_dev *dev)
{
 8001670:	b530      	push	{r4, r5, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	0004      	movs	r4, r0
 8001676:	000d      	movs	r5, r1
    int8_t rslt;
    uint8_t data_array[3];
    uint8_t sens_data[3];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001678:	0008      	movs	r0, r1
 800167a:	f7ff fa91 	bl	8000ba0 <null_ptr_check>

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 800167e:	2800      	cmp	r0, #0
 8001680:	d001      	beq.n	8001686 <set_fifo_conf+0x16>
            }
        }
    }

    return rslt;
}
 8001682:	b003      	add	sp, #12
 8001684:	bd30      	pop	{r4, r5, pc}
        rslt = bma400_get_regs(BMA400_REG_FIFO_CONFIG_0, sens_data, 3, dev);
 8001686:	002b      	movs	r3, r5
 8001688:	2203      	movs	r2, #3
 800168a:	4669      	mov	r1, sp
 800168c:	3026      	adds	r0, #38	@ 0x26
 800168e:	f7ff fd90 	bl	80011b2 <bma400_get_regs>
        if (rslt == BMA400_OK)
 8001692:	2800      	cmp	r0, #0
 8001694:	d1f5      	bne.n	8001682 <set_fifo_conf+0x12>
            data_array[0] = fifo_conf->conf_regs;
 8001696:	7823      	ldrb	r3, [r4, #0]
 8001698:	aa01      	add	r2, sp, #4
 800169a:	7013      	strb	r3, [r2, #0]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 800169c:	7862      	ldrb	r2, [r4, #1]
 800169e:	2a00      	cmp	r2, #0
 80016a0:	d106      	bne.n	80016b0 <set_fifo_conf+0x40>
                data_array[0] = sens_data[0] & (~data_array[0]);
 80016a2:	466a      	mov	r2, sp
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	4013      	ands	r3, r2
 80016ac:	aa01      	add	r2, sp, #4
 80016ae:	7013      	strb	r3, [r2, #0]
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 80016b0:	8863      	ldrh	r3, [r4, #2]
 80016b2:	78a0      	ldrb	r0, [r4, #2]
 80016b4:	a901      	add	r1, sp, #4
 80016b6:	7048      	strb	r0, [r1, #1]
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	708b      	strb	r3, [r1, #2]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 80016bc:	2207      	movs	r2, #7
 80016be:	4013      	ands	r3, r2
 80016c0:	708b      	strb	r3, [r1, #2]
            if ((data_array[1] == sens_data[1]) && (data_array[2] == sens_data[2]))
 80016c2:	466a      	mov	r2, sp
 80016c4:	7852      	ldrb	r2, [r2, #1]
 80016c6:	4290      	cmp	r0, r2
 80016c8:	d103      	bne.n	80016d2 <set_fifo_conf+0x62>
 80016ca:	466a      	mov	r2, sp
 80016cc:	7892      	ldrb	r2, [r2, #2]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d006      	beq.n	80016e0 <set_fifo_conf+0x70>
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 3, dev);
 80016d2:	002b      	movs	r3, r5
 80016d4:	2203      	movs	r2, #3
 80016d6:	a901      	add	r1, sp, #4
 80016d8:	2026      	movs	r0, #38	@ 0x26
 80016da:	f7ff fbff 	bl	8000edc <bma400_set_regs>
 80016de:	e7d0      	b.n	8001682 <set_fifo_conf+0x12>
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 1, dev);
 80016e0:	002b      	movs	r3, r5
 80016e2:	2201      	movs	r2, #1
 80016e4:	2026      	movs	r0, #38	@ 0x26
 80016e6:	f7ff fbf9 	bl	8000edc <bma400_set_regs>
 80016ea:	e7ca      	b.n	8001682 <set_fifo_conf+0x12>

080016ec <bma400_set_power_mode>:
{
 80016ec:	b570      	push	{r4, r5, r6, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	0005      	movs	r5, r0
 80016f2:	000e      	movs	r6, r1
    uint8_t reg_data = 0;
 80016f4:	466b      	mov	r3, sp
 80016f6:	2200      	movs	r2, #0
 80016f8:	71da      	strb	r2, [r3, #7]
    rslt = null_ptr_check(dev);
 80016fa:	0008      	movs	r0, r1
 80016fc:	f7ff fa50 	bl	8000ba0 <null_ptr_check>
 8001700:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8001702:	d002      	beq.n	800170a <bma400_set_power_mode+0x1e>
}
 8001704:	0020      	movs	r0, r4
 8001706:	b002      	add	sp, #8
 8001708:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 800170a:	0033      	movs	r3, r6
 800170c:	2201      	movs	r2, #1
 800170e:	4669      	mov	r1, sp
 8001710:	3107      	adds	r1, #7
 8001712:	2019      	movs	r0, #25
 8001714:	f7ff fd4d 	bl	80011b2 <bma400_get_regs>
 8001718:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 800171a:	d1f3      	bne.n	8001704 <bma400_set_power_mode+0x18>
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 800171c:	466b      	mov	r3, sp
 800171e:	79da      	ldrb	r2, [r3, #7]
 8001720:	2303      	movs	r3, #3
 8001722:	402b      	ands	r3, r5
 8001724:	2103      	movs	r1, #3
 8001726:	438a      	bics	r2, r1
 8001728:	4313      	orrs	r3, r2
 800172a:	466a      	mov	r2, sp
 800172c:	71d3      	strb	r3, [r2, #7]
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 800172e:	0033      	movs	r3, r6
 8001730:	2201      	movs	r2, #1
 8001732:	4669      	mov	r1, sp
 8001734:	3107      	adds	r1, #7
 8001736:	2019      	movs	r0, #25
 8001738:	f7ff fbd0 	bl	8000edc <bma400_set_regs>
 800173c:	0004      	movs	r4, r0
        if (power_mode == BMA400_MODE_LOW_POWER)
 800173e:	2d01      	cmp	r5, #1
 8001740:	d004      	beq.n	800174c <bma400_set_power_mode+0x60>
            dev->delay_us(10000, dev->intf_ptr); /* TBC */
 8001742:	6973      	ldr	r3, [r6, #20]
 8001744:	6871      	ldr	r1, [r6, #4]
 8001746:	4804      	ldr	r0, [pc, #16]	@ (8001758 <bma400_set_power_mode+0x6c>)
 8001748:	4798      	blx	r3
 800174a:	e7db      	b.n	8001704 <bma400_set_power_mode+0x18>
            dev->delay_us(40000, dev->intf_ptr);
 800174c:	6973      	ldr	r3, [r6, #20]
 800174e:	6871      	ldr	r1, [r6, #4]
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <bma400_set_power_mode+0x70>)
 8001752:	4798      	blx	r3
 8001754:	e7d6      	b.n	8001704 <bma400_set_power_mode+0x18>
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	00002710 	.word	0x00002710
 800175c:	00009c40 	.word	0x00009c40

08001760 <bma400_get_accel_data>:
{
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	0006      	movs	r6, r0
 8001764:	000d      	movs	r5, r1
 8001766:	0014      	movs	r4, r2
    rslt = null_ptr_check(dev);
 8001768:	0010      	movs	r0, r2
 800176a:	f7ff fa19 	bl	8000ba0 <null_ptr_check>
    if ((rslt == BMA400_OK) && (accel != NULL))
 800176e:	2800      	cmp	r0, #0
 8001770:	d107      	bne.n	8001782 <bma400_get_accel_data+0x22>
 8001772:	2d00      	cmp	r5, #0
 8001774:	d008      	beq.n	8001788 <bma400_get_accel_data+0x28>
        rslt = get_accel_data(data_sel, accel, dev);
 8001776:	0022      	movs	r2, r4
 8001778:	0029      	movs	r1, r5
 800177a:	0030      	movs	r0, r6
 800177c:	f7ff fd92 	bl	80012a4 <get_accel_data>
}
 8001780:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BMA400_E_NULL_PTR;
 8001782:	2001      	movs	r0, #1
 8001784:	4240      	negs	r0, r0
 8001786:	e7fb      	b.n	8001780 <bma400_get_accel_data+0x20>
 8001788:	2001      	movs	r0, #1
 800178a:	4240      	negs	r0, r0
 800178c:	e7f8      	b.n	8001780 <bma400_get_accel_data+0x20>

0800178e <bma400_set_sensor_conf>:
{
 800178e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001790:	b083      	sub	sp, #12
 8001792:	0006      	movs	r6, r0
 8001794:	000f      	movs	r7, r1
 8001796:	0015      	movs	r5, r2
    uint8_t data_array[3] = { 0 };
 8001798:	2203      	movs	r2, #3
 800179a:	2100      	movs	r1, #0
 800179c:	a801      	add	r0, sp, #4
 800179e:	f002 fb57 	bl	8003e50 <memset>
    rslt = null_ptr_check(dev);
 80017a2:	0028      	movs	r0, r5
 80017a4:	f7ff f9fc 	bl	8000ba0 <null_ptr_check>
    if ((rslt == BMA400_OK) && (conf != NULL))
 80017a8:	2800      	cmp	r0, #0
 80017aa:	d124      	bne.n	80017f6 <bma400_set_sensor_conf+0x68>
 80017ac:	2e00      	cmp	r6, #0
 80017ae:	d025      	beq.n	80017fc <bma400_set_sensor_conf+0x6e>
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 80017b0:	002b      	movs	r3, r5
 80017b2:	2203      	movs	r2, #3
 80017b4:	a901      	add	r1, sp, #4
 80017b6:	3021      	adds	r0, #33	@ 0x21
 80017b8:	f7ff fcfb 	bl	80011b2 <bma400_get_regs>
        if (rslt == BMA400_OK)
 80017bc:	2800      	cmp	r0, #0
 80017be:	d001      	beq.n	80017c4 <bma400_set_sensor_conf+0x36>
}
 80017c0:	b003      	add	sp, #12
 80017c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80017c4:	2400      	movs	r4, #0
 80017c6:	42bc      	cmp	r4, r7
 80017c8:	d20c      	bcs.n	80017e4 <bma400_set_sensor_conf+0x56>
 80017ca:	2800      	cmp	r0, #0
 80017cc:	d10a      	bne.n	80017e4 <bma400_set_sensor_conf+0x56>
                rslt = set_sensor_conf(data_array, conf + idx, dev);
 80017ce:	00a1      	lsls	r1, r4, #2
 80017d0:	1909      	adds	r1, r1, r4
 80017d2:	0089      	lsls	r1, r1, #2
 80017d4:	1871      	adds	r1, r6, r1
 80017d6:	002a      	movs	r2, r5
 80017d8:	a801      	add	r0, sp, #4
 80017da:	f7ff fe50 	bl	800147e <set_sensor_conf>
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80017de:	3401      	adds	r4, #1
 80017e0:	b2a4      	uxth	r4, r4
 80017e2:	e7f0      	b.n	80017c6 <bma400_set_sensor_conf+0x38>
            if (rslt == BMA400_OK)
 80017e4:	2800      	cmp	r0, #0
 80017e6:	d1eb      	bne.n	80017c0 <bma400_set_sensor_conf+0x32>
                rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 80017e8:	002b      	movs	r3, r5
 80017ea:	2203      	movs	r2, #3
 80017ec:	a901      	add	r1, sp, #4
 80017ee:	3021      	adds	r0, #33	@ 0x21
 80017f0:	f7ff fb74 	bl	8000edc <bma400_set_regs>
 80017f4:	e7e4      	b.n	80017c0 <bma400_set_sensor_conf+0x32>
        rslt = BMA400_E_NULL_PTR;
 80017f6:	2001      	movs	r0, #1
 80017f8:	4240      	negs	r0, r0
 80017fa:	e7e1      	b.n	80017c0 <bma400_set_sensor_conf+0x32>
 80017fc:	2001      	movs	r0, #1
 80017fe:	4240      	negs	r0, r0
 8001800:	e7de      	b.n	80017c0 <bma400_set_sensor_conf+0x32>
	...

08001804 <bma400_set_device_conf>:
{
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	46ce      	mov	lr, r9
 8001808:	4647      	mov	r7, r8
 800180a:	b580      	push	{r7, lr}
 800180c:	b083      	sub	sp, #12
 800180e:	0006      	movs	r6, r0
 8001810:	000f      	movs	r7, r1
 8001812:	4690      	mov	r8, r2
    uint8_t data_array[3] = { 0 };
 8001814:	2203      	movs	r2, #3
 8001816:	2100      	movs	r1, #0
 8001818:	a801      	add	r0, sp, #4
 800181a:	f002 fb19 	bl	8003e50 <memset>
    rslt = null_ptr_check(dev);
 800181e:	4640      	mov	r0, r8
 8001820:	f7ff f9be 	bl	8000ba0 <null_ptr_check>
    if ((rslt == BMA400_OK) && (conf != NULL))
 8001824:	2800      	cmp	r0, #0
 8001826:	d000      	beq.n	800182a <bma400_set_device_conf+0x26>
 8001828:	e06d      	b.n	8001906 <bma400_set_device_conf+0x102>
 800182a:	2e00      	cmp	r6, #0
 800182c:	d100      	bne.n	8001830 <bma400_set_device_conf+0x2c>
 800182e:	e06d      	b.n	800190c <bma400_set_device_conf+0x108>
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8001830:	4643      	mov	r3, r8
 8001832:	2203      	movs	r2, #3
 8001834:	a901      	add	r1, sp, #4
 8001836:	3021      	adds	r0, #33	@ 0x21
 8001838:	f7ff fcbb 	bl	80011b2 <bma400_get_regs>
 800183c:	0005      	movs	r5, r0
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 800183e:	2400      	movs	r4, #0
 8001840:	e007      	b.n	8001852 <bma400_set_device_conf+0x4e>
                    rslt = set_autowakeup_timeout(&conf[idx].param.auto_wakeup, dev);
 8001842:	4648      	mov	r0, r9
 8001844:	3002      	adds	r0, #2
 8001846:	4641      	mov	r1, r8
 8001848:	f7ff fe73 	bl	8001532 <set_autowakeup_timeout>
 800184c:	0005      	movs	r5, r0
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 800184e:	3401      	adds	r4, #1
 8001850:	b2a4      	uxth	r4, r4
 8001852:	42a7      	cmp	r7, r4
 8001854:	d947      	bls.n	80018e6 <bma400_set_device_conf+0xe2>
 8001856:	2d00      	cmp	r5, #0
 8001858:	d145      	bne.n	80018e6 <bma400_set_device_conf+0xe2>
            switch (conf[idx].type)
 800185a:	00a3      	lsls	r3, r4, #2
 800185c:	191b      	adds	r3, r3, r4
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	18f2      	adds	r2, r6, r3
 8001862:	4691      	mov	r9, r2
 8001864:	5cf3      	ldrb	r3, [r6, r3]
 8001866:	2b05      	cmp	r3, #5
 8001868:	d83a      	bhi.n	80018e0 <bma400_set_device_conf+0xdc>
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4a29      	ldr	r2, [pc, #164]	@ (8001914 <bma400_set_device_conf+0x110>)
 800186e:	58d3      	ldr	r3, [r2, r3]
 8001870:	469f      	mov	pc, r3
                    rslt = set_autowakeup_interrupt(&conf[idx].param.wakeup, dev);
 8001872:	464b      	mov	r3, r9
 8001874:	1c98      	adds	r0, r3, #2
 8001876:	4641      	mov	r1, r8
 8001878:	f7ff fc70 	bl	800115c <set_autowakeup_interrupt>
 800187c:	1e05      	subs	r5, r0, #0
                    if (rslt == BMA400_OK)
 800187e:	d1e6      	bne.n	800184e <bma400_set_device_conf+0x4a>
                        map_int_pin(data_array, BMA400_WAKEUP_INT_MAP, conf[idx].param.wakeup.int_chan);
 8001880:	464b      	mov	r3, r9
 8001882:	7a5a      	ldrb	r2, [r3, #9]
 8001884:	2107      	movs	r1, #7
 8001886:	a801      	add	r0, sp, #4
 8001888:	f7ff f9a4 	bl	8000bd4 <map_int_pin>
 800188c:	e7df      	b.n	800184e <bma400_set_device_conf+0x4a>
                    rslt = set_auto_low_power(&conf[idx].param.auto_lp, dev);
 800188e:	4648      	mov	r0, r9
 8001890:	3002      	adds	r0, #2
 8001892:	4641      	mov	r1, r8
 8001894:	f7ff fe74 	bl	8001580 <set_auto_low_power>
 8001898:	0005      	movs	r5, r0
                    break;
 800189a:	e7d8      	b.n	800184e <bma400_set_device_conf+0x4a>
                    rslt = set_int_pin_conf(conf[idx].param.int_conf, dev);
 800189c:	464b      	mov	r3, r9
 800189e:	8858      	ldrh	r0, [r3, #2]
 80018a0:	4641      	mov	r1, r8
 80018a2:	f7ff feae 	bl	8001602 <set_int_pin_conf>
 80018a6:	0005      	movs	r5, r0
                    break;
 80018a8:	e7d1      	b.n	800184e <bma400_set_device_conf+0x4a>
                    map_int_pin(data_array, BMA400_INT_OVERRUN_MAP, conf[idx].param.overrun_int.int_chan);
 80018aa:	464b      	mov	r3, r9
 80018ac:	789a      	ldrb	r2, [r3, #2]
 80018ae:	210b      	movs	r1, #11
 80018b0:	a801      	add	r0, sp, #4
 80018b2:	f7ff f98f 	bl	8000bd4 <map_int_pin>
                    break;
 80018b6:	e7ca      	b.n	800184e <bma400_set_device_conf+0x4a>
                    rslt = set_fifo_conf(&conf[idx].param.fifo_conf, dev);
 80018b8:	464b      	mov	r3, r9
 80018ba:	1c98      	adds	r0, r3, #2
 80018bc:	4641      	mov	r1, r8
 80018be:	f7ff fed7 	bl	8001670 <set_fifo_conf>
 80018c2:	1e05      	subs	r5, r0, #0
                    if (rslt == BMA400_OK)
 80018c4:	d1c3      	bne.n	800184e <bma400_set_device_conf+0x4a>
                        map_int_pin(data_array, BMA400_FIFO_WM_INT_MAP, conf[idx].param.fifo_conf.fifo_wm_channel);
 80018c6:	464b      	mov	r3, r9
 80018c8:	79da      	ldrb	r2, [r3, #7]
 80018ca:	2102      	movs	r1, #2
 80018cc:	a801      	add	r0, sp, #4
 80018ce:	f7ff f981 	bl	8000bd4 <map_int_pin>
                        map_int_pin(data_array, BMA400_FIFO_FULL_INT_MAP, conf[idx].param.fifo_conf.fifo_full_channel);
 80018d2:	464b      	mov	r3, r9
 80018d4:	799a      	ldrb	r2, [r3, #6]
 80018d6:	2103      	movs	r1, #3
 80018d8:	a801      	add	r0, sp, #4
 80018da:	f7ff f97b 	bl	8000bd4 <map_int_pin>
 80018de:	e7b6      	b.n	800184e <bma400_set_device_conf+0x4a>
            switch (conf[idx].type)
 80018e0:	2504      	movs	r5, #4
 80018e2:	426d      	negs	r5, r5
 80018e4:	e7b3      	b.n	800184e <bma400_set_device_conf+0x4a>
        if (rslt == BMA400_OK)
 80018e6:	2d00      	cmp	r5, #0
 80018e8:	d005      	beq.n	80018f6 <bma400_set_device_conf+0xf2>
}
 80018ea:	0028      	movs	r0, r5
 80018ec:	b003      	add	sp, #12
 80018ee:	bcc0      	pop	{r6, r7}
 80018f0:	46b9      	mov	r9, r7
 80018f2:	46b0      	mov	r8, r6
 80018f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 80018f6:	4643      	mov	r3, r8
 80018f8:	2203      	movs	r2, #3
 80018fa:	a901      	add	r1, sp, #4
 80018fc:	2021      	movs	r0, #33	@ 0x21
 80018fe:	f7ff faed 	bl	8000edc <bma400_set_regs>
 8001902:	0005      	movs	r5, r0
 8001904:	e7f1      	b.n	80018ea <bma400_set_device_conf+0xe6>
        rslt = BMA400_E_NULL_PTR;
 8001906:	2501      	movs	r5, #1
 8001908:	426d      	negs	r5, r5
 800190a:	e7ee      	b.n	80018ea <bma400_set_device_conf+0xe6>
 800190c:	2501      	movs	r5, #1
 800190e:	426d      	negs	r5, r5
 8001910:	e7eb      	b.n	80018ea <bma400_set_device_conf+0xe6>
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	08004790 	.word	0x08004790

08001918 <set_auto_wakeup>:
{
 8001918:	b530      	push	{r4, r5, lr}
 800191a:	b083      	sub	sp, #12
 800191c:	0005      	movs	r5, r0
 800191e:	000c      	movs	r4, r1
    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 8001920:	000b      	movs	r3, r1
 8001922:	2201      	movs	r2, #1
 8001924:	4669      	mov	r1, sp
 8001926:	3107      	adds	r1, #7
 8001928:	202d      	movs	r0, #45	@ 0x2d
 800192a:	f7ff fc42 	bl	80011b2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 800192e:	2800      	cmp	r0, #0
 8001930:	d001      	beq.n	8001936 <set_auto_wakeup+0x1e>
}
 8001932:	b003      	add	sp, #12
 8001934:	bd30      	pop	{r4, r5, pc}
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 8001936:	466b      	mov	r3, sp
 8001938:	79db      	ldrb	r3, [r3, #7]
 800193a:	006d      	lsls	r5, r5, #1
 800193c:	2202      	movs	r2, #2
 800193e:	402a      	ands	r2, r5
 8001940:	2102      	movs	r1, #2
 8001942:	438b      	bics	r3, r1
 8001944:	4313      	orrs	r3, r2
 8001946:	466a      	mov	r2, sp
 8001948:	71d3      	strb	r3, [r2, #7]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 800194a:	0023      	movs	r3, r4
 800194c:	2201      	movs	r2, #1
 800194e:	4669      	mov	r1, sp
 8001950:	3107      	adds	r1, #7
 8001952:	302d      	adds	r0, #45	@ 0x2d
 8001954:	f7ff fac2 	bl	8000edc <bma400_set_regs>
 8001958:	e7eb      	b.n	8001932 <set_auto_wakeup+0x1a>

0800195a <user_i2c_read>:

    return rslt;
}

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 800195a:	b510      	push	{r4, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	0004      	movs	r4, r0
 8001960:	0018      	movs	r0, r3
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;

    if (HAL_I2C_Mem_Read(hi2c, BMA400_I2C_ADDR, reg_addr,
 8001962:	2301      	movs	r3, #1
 8001964:	425b      	negs	r3, r3
 8001966:	9302      	str	r3, [sp, #8]
 8001968:	b292      	uxth	r2, r2
 800196a:	9201      	str	r2, [sp, #4]
 800196c:	9100      	str	r1, [sp, #0]
 800196e:	3302      	adds	r3, #2
 8001970:	0022      	movs	r2, r4
 8001972:	2128      	movs	r1, #40	@ 0x28
 8001974:	f001 f8ce 	bl	8002b14 <HAL_I2C_Mem_Read>
 8001978:	2800      	cmp	r0, #0
 800197a:	d101      	bne.n	8001980 <user_i2c_read+0x26>
    }
    else
    {
        return BMA400_E_COM_FAIL;
    }
}
 800197c:	b004      	add	sp, #16
 800197e:	bd10      	pop	{r4, pc}
        return BMA400_E_COM_FAIL;
 8001980:	2002      	movs	r0, #2
 8001982:	4240      	negs	r0, r0
 8001984:	e7fa      	b.n	800197c <user_i2c_read+0x22>

08001986 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8001986:	b510      	push	{r4, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	0004      	movs	r4, r0
 800198c:	0018      	movs	r0, r3
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;

    if (HAL_I2C_Mem_Write(hi2c, BMA400_I2C_ADDR, reg_addr,
 800198e:	2301      	movs	r3, #1
 8001990:	425b      	negs	r3, r3
 8001992:	9302      	str	r3, [sp, #8]
 8001994:	b292      	uxth	r2, r2
 8001996:	9201      	str	r2, [sp, #4]
 8001998:	9100      	str	r1, [sp, #0]
 800199a:	3302      	adds	r3, #2
 800199c:	0022      	movs	r2, r4
 800199e:	2128      	movs	r1, #40	@ 0x28
 80019a0:	f000 ffe8 	bl	8002974 <HAL_I2C_Mem_Write>
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d101      	bne.n	80019ac <user_i2c_write+0x26>
    }
    else
    {
        return BMA400_E_COM_FAIL;
    }
}
 80019a8:	b004      	add	sp, #16
 80019aa:	bd10      	pop	{r4, pc}
        return BMA400_E_COM_FAIL;
 80019ac:	2002      	movs	r0, #2
 80019ae:	4240      	negs	r0, r0
 80019b0:	e7fa      	b.n	80019a8 <user_i2c_write+0x22>

080019b2 <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 80019b2:	b510      	push	{r4, lr}
    // Zakładamy, że potrzebne opóźnienia mają ≥ 1000us (1ms)
    HAL_Delay(period / 1000);
 80019b4:	21fa      	movs	r1, #250	@ 0xfa
 80019b6:	0089      	lsls	r1, r1, #2
 80019b8:	f7fe fbb8 	bl	800012c <__udivsi3>
 80019bc:	f000 fc48 	bl	8002250 <HAL_Delay>

    // Jeśli potrzebujesz dokładniejszych opóźnień — patrz niżej
}
 80019c0:	bd10      	pop	{r4, pc}
	...

080019c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c6:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	2214      	movs	r2, #20
 80019ca:	2100      	movs	r1, #0
 80019cc:	a805      	add	r0, sp, #20
 80019ce:	f002 fa3f 	bl	8003e50 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <MX_GPIO_Init+0x98>)
 80019d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019d6:	2404      	movs	r4, #4
 80019d8:	4322      	orrs	r2, r4
 80019da:	635a      	str	r2, [r3, #52]	@ 0x34
 80019dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019de:	4022      	ands	r2, r4
 80019e0:	9201      	str	r2, [sp, #4]
 80019e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019e6:	2220      	movs	r2, #32
 80019e8:	4311      	orrs	r1, r2
 80019ea:	6359      	str	r1, [r3, #52]	@ 0x34
 80019ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019ee:	400a      	ands	r2, r1
 80019f0:	9202      	str	r2, [sp, #8]
 80019f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019f6:	2501      	movs	r5, #1
 80019f8:	432a      	orrs	r2, r5
 80019fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80019fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019fe:	402a      	ands	r2, r5
 8001a00:	9203      	str	r2, [sp, #12]
 8001a02:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a06:	2202      	movs	r2, #2
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	6359      	str	r1, [r3, #52]	@ 0x34
 8001a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0e:	401a      	ands	r2, r3
 8001a10:	9204      	str	r2, [sp, #16]
 8001a12:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_IO_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001a14:	27d0      	movs	r7, #208	@ 0xd0
 8001a16:	007f      	lsls	r7, r7, #1
 8001a18:	26a0      	movs	r6, #160	@ 0xa0
 8001a1a:	05f6      	lsls	r6, r6, #23
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	0039      	movs	r1, r7
 8001a20:	0030      	movs	r0, r6
 8001a22:	f000 fd67 	bl	80024f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8001a26:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a28:	2400      	movs	r4, #0
 8001a2a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	a905      	add	r1, sp, #20
 8001a30:	480b      	ldr	r0, [pc, #44]	@ (8001a60 <MX_GPIO_Init+0x9c>)
 8001a32:	f000 fc87 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_IO_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = EN_IO_Pin|LED1_Pin|LED2_Pin;
 8001a36:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	a905      	add	r1, sp, #20
 8001a40:	0030      	movs	r0, r6
 8001a42:	f000 fc7f 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	a905      	add	r1, sp, #20
 8001a50:	0030      	movs	r0, r6
 8001a52:	f000 fc77 	bl	8002344 <HAL_GPIO_Init>

}
 8001a56:	b00b      	add	sp, #44	@ 0x2c
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	50001400 	.word	0x50001400

08001a64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a64:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a66:	4814      	ldr	r0, [pc, #80]	@ (8001ab8 <MX_I2C1_Init+0x54>)
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <MX_I2C1_Init+0x58>)
 8001a6a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <MX_I2C1_Init+0x5c>)
 8001a6e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a74:	2201      	movs	r2, #1
 8001a76:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a7c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a7e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a80:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a82:	f000 ff09 	bl	8002898 <HAL_I2C_Init>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d10c      	bne.n	8001aa4 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a8a:	480b      	ldr	r0, [pc, #44]	@ (8001ab8 <MX_I2C1_Init+0x54>)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	f001 f915 	bl	8002cbc <HAL_I2CEx_ConfigAnalogFilter>
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d109      	bne.n	8001aaa <MX_I2C1_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a96:	4808      	ldr	r0, [pc, #32]	@ (8001ab8 <MX_I2C1_Init+0x54>)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	f001 f93b 	bl	8002d14 <HAL_I2CEx_ConfigDigitalFilter>
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d106      	bne.n	8001ab0 <MX_I2C1_Init+0x4c>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001aa4:	f000 f98e 	bl	8001dc4 <Error_Handler>
 8001aa8:	e7ef      	b.n	8001a8a <MX_I2C1_Init+0x26>
    Error_Handler();
 8001aaa:	f000 f98b 	bl	8001dc4 <Error_Handler>
 8001aae:	e7f2      	b.n	8001a96 <MX_I2C1_Init+0x32>
    Error_Handler();
 8001ab0:	f000 f988 	bl	8001dc4 <Error_Handler>
}
 8001ab4:	e7f5      	b.n	8001aa2 <MX_I2C1_Init+0x3e>
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	20000098 	.word	0x20000098
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	00402d41 	.word	0x00402d41

08001ac4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	b08e      	sub	sp, #56	@ 0x38
 8001ac8:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	2214      	movs	r2, #20
 8001acc:	2100      	movs	r1, #0
 8001ace:	a809      	add	r0, sp, #36	@ 0x24
 8001ad0:	f002 f9be 	bl	8003e50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad4:	221c      	movs	r2, #28
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	a802      	add	r0, sp, #8
 8001ada:	f002 f9b9 	bl	8003e50 <memset>
  if(i2cHandle->Instance==I2C1)
 8001ade:	6822      	ldr	r2, [r4, #0]
 8001ae0:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <HAL_I2C_MspInit+0x7c>)
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ae6:	b00e      	add	sp, #56	@ 0x38
 8001ae8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001aea:	2302      	movs	r3, #2
 8001aec:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aee:	a802      	add	r0, sp, #8
 8001af0:	f001 fbd6 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d120      	bne.n	8001b3a <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af8:	4c12      	ldr	r4, [pc, #72]	@ (8001b44 <HAL_I2C_MspInit+0x80>)
 8001afa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001afc:	2302      	movs	r3, #2
 8001afe:	431a      	orrs	r2, r3
 8001b00:	6362      	str	r2, [r4, #52]	@ 0x34
 8001b02:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001b04:	4013      	ands	r3, r2
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b0a:	23c0      	movs	r3, #192	@ 0xc0
 8001b0c:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0e:	3bae      	subs	r3, #174	@ 0xae
 8001b10:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b12:	3b11      	subs	r3, #17
 8001b14:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001b1a:	3306      	adds	r3, #6
 8001b1c:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	a909      	add	r1, sp, #36	@ 0x24
 8001b20:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <HAL_I2C_MspInit+0x84>)
 8001b22:	f000 fc0f 	bl	8002344 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b26:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001b28:	2280      	movs	r2, #128	@ 0x80
 8001b2a:	0392      	lsls	r2, r2, #14
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001b30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001b32:	4013      	ands	r3, r2
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	9b01      	ldr	r3, [sp, #4]
}
 8001b38:	e7d5      	b.n	8001ae6 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001b3a:	f000 f943 	bl	8001dc4 <Error_Handler>
 8001b3e:	e7db      	b.n	8001af8 <HAL_I2C_MspInit+0x34>
 8001b40:	40005400 	.word	0x40005400
 8001b44:	40021000 	.word	0x40021000
 8001b48:	50000400 	.word	0x50000400

08001b4c <debug_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void debug_uart(const char *msg)
{
 8001b4c:	b510      	push	{r4, lr}
 8001b4e:	0004      	movs	r4, r0
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001b50:	f7fe fada 	bl	8000108 <strlen>
 8001b54:	2301      	movs	r3, #1
 8001b56:	b282      	uxth	r2, r0
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <debug_uart+0x18>)
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	0021      	movs	r1, r4
 8001b5e:	f001 ff8a 	bl	8003a76 <HAL_UART_Transmit>
}
 8001b62:	bd10      	pop	{r4, pc}
 8001b64:	200001ec 	.word	0x200001ec

08001b68 <enterShutdown>:

void enterShutdown(void)
{
 8001b68:	b510      	push	{r4, lr}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8001b6a:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <enterShutdown+0x14>)
 8001b6c:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <enterShutdown+0x18>)
 8001b6e:	619a      	str	r2, [r3, #24]
  	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f001 f8f9 	bl	8002d68 <HAL_PWR_EnableWakeUpPin>
    HAL_PWREx_EnterSHUTDOWNMode();
 8001b76:	f001 f905 	bl	8002d84 <HAL_PWREx_EnterSHUTDOWNMode>
}
 8001b7a:	bd10      	pop	{r4, pc}
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	0001002f 	.word	0x0001002f

08001b84 <configureBMA400>:

// Configure BMA400 for low power + wake-up on Y-axis motion
void configureBMA400(struct bma400_dev *dev)
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	b08f      	sub	sp, #60	@ 0x3c
 8001b88:	0005      	movs	r5, r0
	bma400_set_power_mode(BMA400_MODE_LOW_POWER, dev);
 8001b8a:	0001      	movs	r1, r0
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff fdad 	bl	80016ec <bma400_set_power_mode>

	struct bma400_device_conf dev_conf[] = {
 8001b92:	ac06      	add	r4, sp, #24
 8001b94:	221e      	movs	r2, #30
 8001b96:	2100      	movs	r1, #0
 8001b98:	0020      	movs	r0, r4
 8001b9a:	f002 f959 	bl	8003e50 <memset>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	7023      	strb	r3, [r4, #0]
 8001ba2:	220e      	movs	r2, #14
 8001ba4:	70a2      	strb	r2, [r4, #2]
 8001ba6:	32ec      	adds	r2, #236	@ 0xec
 8001ba8:	80a2      	strh	r2, [r4, #4]
 8001baa:	2601      	movs	r6, #1
 8001bac:	72a6      	strb	r6, [r4, #10]
 8001bae:	7326      	strb	r6, [r4, #12]
 8001bb0:	73a3      	strb	r3, [r4, #14]
 8001bb2:	73e3      	strb	r3, [r4, #15]
 8001bb4:	74e6      	strb	r6, [r4, #19]
 8001bb6:	2703      	movs	r7, #3
 8001bb8:	7527      	strb	r7, [r4, #20]
 8001bba:	75a6      	strb	r6, [r4, #22]
 8001bbc:	75e3      	strb	r3, [r4, #23]
				.pin_conf = BMA400_INT_OPEN_DRAIN_ACTIVE_0
			}
		}
	};

	bma400_set_device_conf(dev_conf, 3, dev);
 8001bbe:	002a      	movs	r2, r5
 8001bc0:	2103      	movs	r1, #3
 8001bc2:	0020      	movs	r0, r4
 8001bc4:	f7ff fe1e 	bl	8001804 <bma400_set_device_conf>

	struct bma400_sensor_conf sensor_conf = {
 8001bc8:	ac01      	add	r4, sp, #4
 8001bca:	2214      	movs	r2, #20
 8001bcc:	2100      	movs	r1, #0
 8001bce:	0020      	movs	r0, r4
 8001bd0:	f002 f93e 	bl	8003e50 <memset>
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	70a3      	strb	r3, [r4, #2]
 8001bd8:	7126      	strb	r6, [r4, #4]
 8001bda:	7167      	strb	r7, [r4, #5]
			.osr = BMA400_ACCEL_OSR_SETTING_3,
			.odr = BMA400_ODR_100HZ
		}
	};

	bma400_set_sensor_conf(&sensor_conf, 1, dev);
 8001bdc:	002a      	movs	r2, r5
 8001bde:	2101      	movs	r1, #1
 8001be0:	0020      	movs	r0, r4
 8001be2:	f7ff fdd4 	bl	800178e <bma400_set_sensor_conf>
	set_auto_wakeup(BMA400_ENABLE, dev);	// enable auto wake up
 8001be6:	0029      	movs	r1, r5
 8001be8:	2001      	movs	r0, #1
 8001bea:	f7ff fe95 	bl	8001918 <set_auto_wakeup>
}
 8001bee:	b00f      	add	sp, #60	@ 0x3c
 8001bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001bf4 <SendESP>:

void SendESP(UART_HandleTypeDef *huart, uint16_t value) {
 8001bf4:	b530      	push	{r4, r5, lr}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	0004      	movs	r4, r0
 8001bfa:	000b      	movs	r3, r1
	char msg[16];
	snprintf(msg, sizeof(msg), "%u\n", value);
 8001bfc:	4a13      	ldr	r2, [pc, #76]	@ (8001c4c <SendESP+0x58>)
 8001bfe:	2110      	movs	r1, #16
 8001c00:	4668      	mov	r0, sp
 8001c02:	f002 f8ef 	bl	8003de4 <sniprintf>

	HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, SET);
 8001c06:	25a0      	movs	r5, #160	@ 0xa0
 8001c08:	05ed      	lsls	r5, r5, #23
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	2120      	movs	r1, #32
 8001c0e:	0028      	movs	r0, r5
 8001c10:	f000 fc70 	bl	80024f4 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001c14:	2096      	movs	r0, #150	@ 0x96
 8001c16:	0040      	lsls	r0, r0, #1
 8001c18:	f000 fb1a 	bl	8002250 <HAL_Delay>
	HAL_UART_Transmit(huart, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001c1c:	4668      	mov	r0, sp
 8001c1e:	f7fe fa73 	bl	8000108 <strlen>
 8001c22:	2301      	movs	r3, #1
 8001c24:	b282      	uxth	r2, r0
 8001c26:	425b      	negs	r3, r3
 8001c28:	4669      	mov	r1, sp
 8001c2a:	0020      	movs	r0, r4
 8001c2c:	f001 ff23 	bl	8003a76 <HAL_UART_Transmit>
	HAL_Delay(10);
 8001c30:	200a      	movs	r0, #10
 8001c32:	f000 fb0d 	bl	8002250 <HAL_Delay>
	HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2120      	movs	r1, #32
 8001c3a:	0028      	movs	r0, r5
 8001c3c:	f000 fc5a 	bl	80024f4 <HAL_GPIO_WritePin>
	HAL_Delay(70);
 8001c40:	2046      	movs	r0, #70	@ 0x46
 8001c42:	f000 fb05 	bl	8002250 <HAL_Delay>
}
 8001c46:	b005      	add	sp, #20
 8001c48:	bd30      	pop	{r4, r5, pc}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	080047a8 	.word	0x080047a8

08001c50 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c52:	b085      	sub	sp, #20
    if (htim->Instance == TIM16)
 8001c54:	6803      	ldr	r3, [r0, #0]
 8001c56:	4a4b      	ldr	r2, [pc, #300]	@ (8001d84 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d004      	beq.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x16>
            send_flag = 1;
            send_time = motion_time;
        }
	}

    if (htim->Instance == TIM14)
 8001c5c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01b      	beq.n	8001c9a <HAL_TIM_PeriodElapsedCallback+0x4a>
            }
            prev_y = sample.y;
            prev_valid = true;
        }
    }
}
 8001c62:	b005      	add	sp, #20
 8001c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        motion_time++;
 8001c66:	4949      	ldr	r1, [pc, #292]	@ (8001d8c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001c68:	880a      	ldrh	r2, [r1, #0]
 8001c6a:	3201      	adds	r2, #1
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	800a      	strh	r2, [r1, #0]
        tick_counter++;
 8001c70:	4947      	ldr	r1, [pc, #284]	@ (8001d90 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c72:	880a      	ldrh	r2, [r1, #0]
 8001c74:	3201      	adds	r2, #1
 8001c76:	b292      	uxth	r2, r2
 8001c78:	800a      	strh	r2, [r1, #0]
        if (tick_counter >= 2000)
 8001c7a:	21fa      	movs	r1, #250	@ 0xfa
 8001c7c:	00c9      	lsls	r1, r1, #3
 8001c7e:	428a      	cmp	r2, r1
 8001c80:	d3ec      	bcc.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0xc>
            tick_counter = 0;
 8001c82:	4a43      	ldr	r2, [pc, #268]	@ (8001d90 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c84:	2100      	movs	r1, #0
 8001c86:	8011      	strh	r1, [r2, #0]
            send_flag = 1;
 8001c88:	4a42      	ldr	r2, [pc, #264]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001c8a:	3101      	adds	r1, #1
 8001c8c:	7011      	strb	r1, [r2, #0]
            send_time = motion_time;
 8001c8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d8c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001c90:	8812      	ldrh	r2, [r2, #0]
 8001c92:	b292      	uxth	r2, r2
 8001c94:	4940      	ldr	r1, [pc, #256]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001c96:	800a      	strh	r2, [r1, #0]
 8001c98:	e7e0      	b.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0xc>
        if (bma400_get_accel_data(BMA400_DATA_ONLY, &sample, &bma400) == BMA400_OK)
 8001c9a:	4a40      	ldr	r2, [pc, #256]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001c9c:	a901      	add	r1, sp, #4
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff fd5e 	bl	8001760 <bma400_get_accel_data>
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d1dc      	bne.n	8001c62 <HAL_TIM_PeriodElapsedCallback+0x12>
            if (prev_valid)
 8001ca8:	4b3d      	ldr	r3, [pc, #244]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d022      	beq.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0xa6>
                float diff = fabsf(sample.y - prev_y);
 8001cb0:	ab01      	add	r3, sp, #4
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	5e18      	ldrsh	r0, [r3, r0]
 8001cb6:	f7fe ff05 	bl	8000ac4 <__aeabi_i2f>
 8001cba:	4b3a      	ldr	r3, [pc, #232]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	f7fe fc9d 	bl	80005fc <__aeabi_fsub>
 8001cc2:	0040      	lsls	r0, r0, #1
 8001cc4:	0840      	lsrs	r0, r0, #1
                diff_history[diff_idx++] = diff;
 8001cc6:	4938      	ldr	r1, [pc, #224]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001cc8:	880a      	ldrh	r2, [r1, #0]
 8001cca:	1c53      	adds	r3, r2, #1
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	800b      	strh	r3, [r1, #0]
 8001cd0:	4936      	ldr	r1, [pc, #216]	@ (8001dac <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	5050      	str	r0, [r2, r1]
                if (diff_idx >= DIFF_FIFO_SIZE) diff_idx = 0;
 8001cd6:	2b13      	cmp	r3, #19
 8001cd8:	d902      	bls.n	8001ce0 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001cda:	4b33      	ldr	r3, [pc, #204]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	801a      	strh	r2, [r3, #0]
                if (diff_cnt < DIFF_FIFO_SIZE) diff_cnt++;
 8001ce0:	4b33      	ldr	r3, [pc, #204]	@ (8001db0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	2b13      	cmp	r3, #19
 8001ce6:	d802      	bhi.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x9e>
 8001ce8:	4a31      	ldr	r2, [pc, #196]	@ (8001db0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001cea:	3301      	adds	r3, #1
 8001cec:	8013      	strh	r3, [r2, #0]
                if (diff_cnt == DIFF_FIFO_SIZE)
 8001cee:	4b30      	ldr	r3, [pc, #192]	@ (8001db0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	2b14      	cmp	r3, #20
 8001cf4:	d00a      	beq.n	8001d0c <HAL_TIM_PeriodElapsedCallback+0xbc>
            prev_y = sample.y;
 8001cf6:	ab01      	add	r3, sp, #4
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	5e18      	ldrsh	r0, [r3, r0]
 8001cfc:	4c29      	ldr	r4, [pc, #164]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001cfe:	f7fe fee1 	bl	8000ac4 <__aeabi_i2f>
 8001d02:	6020      	str	r0, [r4, #0]
            prev_valid = true;
 8001d04:	4b26      	ldr	r3, [pc, #152]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
}
 8001d0a:	e7aa      	b.n	8001c62 <HAL_TIM_PeriodElapsedCallback+0x12>
                    float minv = diff_history[0], maxv = diff_history[0];
 8001d0c:	4b27      	ldr	r3, [pc, #156]	@ (8001dac <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d0e:	681e      	ldr	r6, [r3, #0]
 8001d10:	1c37      	adds	r7, r6, #0
                    for (uint16_t i = 1; i < DIFF_FIFO_SIZE; i++)
 8001d12:	2401      	movs	r4, #1
 8001d14:	e001      	b.n	8001d1a <HAL_TIM_PeriodElapsedCallback+0xca>
 8001d16:	3401      	adds	r4, #1
 8001d18:	b2a4      	uxth	r4, r4
 8001d1a:	2c13      	cmp	r4, #19
 8001d1c:	d811      	bhi.n	8001d42 <HAL_TIM_PeriodElapsedCallback+0xf2>
                        if (diff_history[i] < minv) minv = diff_history[i];
 8001d1e:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d20:	00a2      	lsls	r2, r4, #2
 8001d22:	58d5      	ldr	r5, [r2, r3]
 8001d24:	1c31      	adds	r1, r6, #0
 8001d26:	1c28      	adds	r0, r5, #0
 8001d28:	f7fe fb88 	bl	800043c <__aeabi_fcmplt>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d000      	beq.n	8001d32 <HAL_TIM_PeriodElapsedCallback+0xe2>
 8001d30:	1c2e      	adds	r6, r5, #0
                        if (diff_history[i] > maxv) maxv = diff_history[i];
 8001d32:	1c39      	adds	r1, r7, #0
 8001d34:	1c28      	adds	r0, r5, #0
 8001d36:	f7fe fb95 	bl	8000464 <__aeabi_fcmpgt>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d0eb      	beq.n	8001d16 <HAL_TIM_PeriodElapsedCallback+0xc6>
 8001d3e:	1c2f      	adds	r7, r5, #0
 8001d40:	e7e9      	b.n	8001d16 <HAL_TIM_PeriodElapsedCallback+0xc6>
                    if ((maxv - minv) < DIFF_STABLE_THRESHOLD)
 8001d42:	1c31      	adds	r1, r6, #0
 8001d44:	1c38      	adds	r0, r7, #0
 8001d46:	f7fe fc59 	bl	80005fc <__aeabi_fsub>
 8001d4a:	491a      	ldr	r1, [pc, #104]	@ (8001db4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001d4c:	f7fe fb76 	bl	800043c <__aeabi_fcmplt>
 8001d50:	2800      	cmp	r0, #0
 8001d52:	d0d0      	beq.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0xa6>
                    	HAL_TIM_Base_Stop_IT(&htim14);
 8001d54:	4818      	ldr	r0, [pc, #96]	@ (8001db8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001d56:	f001 fb71 	bl	800343c <HAL_TIM_Base_Stop_IT>
                        HAL_TIM_Base_Stop_IT(&htim16);
 8001d5a:	4818      	ldr	r0, [pc, #96]	@ (8001dbc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001d5c:	f001 fb6e 	bl	800343c <HAL_TIM_Base_Stop_IT>
                        send_time = motion_time;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4a0c      	ldr	r2, [pc, #48]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001d68:	8013      	strh	r3, [r2, #0]
                        send_flag = 1;
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
                        diff_cnt = 0;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001d72:	2100      	movs	r1, #0
 8001d74:	8019      	strh	r1, [r3, #0]
                        diff_idx = 0;
 8001d76:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001d78:	8019      	strh	r1, [r3, #0]
                        prev_valid = false;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001d7c:	7019      	strb	r1, [r3, #0]
                        go_sleep = 1;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e7b8      	b.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8001d84:	40014400 	.word	0x40014400
 8001d88:	40002000 	.word	0x40002000
 8001d8c:	2000014e 	.word	0x2000014e
 8001d90:	200000ec 	.word	0x200000ec
 8001d94:	2000014c 	.word	0x2000014c
 8001d98:	2000014a 	.word	0x2000014a
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	200000ee 	.word	0x200000ee
 8001da4:	200000f0 	.word	0x200000f0
 8001da8:	200000f6 	.word	0x200000f6
 8001dac:	200000f8 	.word	0x200000f8
 8001db0:	200000f4 	.word	0x200000f4
 8001db4:	40a00000 	.word	0x40a00000
 8001db8:	200001a0 	.word	0x200001a0
 8001dbc:	20000154 	.word	0x20000154
 8001dc0:	20000148 	.word	0x20000148

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	20a0      	movs	r0, #160	@ 0xa0
 8001dca:	2201      	movs	r2, #1
 8001dcc:	0049      	lsls	r1, r1, #1
 8001dce:	05c0      	lsls	r0, r0, #23
 8001dd0:	f000 fb90 	bl	80024f4 <HAL_GPIO_WritePin>
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <Error_Handler+0x10>
	...

08001dd8 <SystemClock_Config>:
{
 8001dd8:	b500      	push	{lr}
 8001dda:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ddc:	221c      	movs	r2, #28
 8001dde:	2100      	movs	r1, #0
 8001de0:	a805      	add	r0, sp, #20
 8001de2:	f002 f835 	bl	8003e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de6:	2214      	movs	r2, #20
 8001de8:	2100      	movs	r1, #0
 8001dea:	4668      	mov	r0, sp
 8001dec:	f002 f830 	bl	8003e50 <memset>
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001df0:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <SystemClock_Config+0x64>)
 8001df2:	6813      	ldr	r3, [r2, #0]
 8001df4:	2107      	movs	r1, #7
 8001df6:	438b      	bics	r3, r1
 8001df8:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfe:	33fe      	adds	r3, #254	@ 0xfe
 8001e00:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8001e02:	2380      	movs	r3, #128	@ 0x80
 8001e04:	015b      	lsls	r3, r3, #5
 8001e06:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e08:	2340      	movs	r3, #64	@ 0x40
 8001e0a:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0c:	a805      	add	r0, sp, #20
 8001e0e:	f000 ffcb 	bl	8002da8 <HAL_RCC_OscConfig>
 8001e12:	2800      	cmp	r0, #0
 8001e14:	d10e      	bne.n	8001e34 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e16:	2307      	movs	r3, #7
 8001e18:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e1e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001e20:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001e22:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e24:	2100      	movs	r1, #0
 8001e26:	4668      	mov	r0, sp
 8001e28:	f001 f94c 	bl	80030c4 <HAL_RCC_ClockConfig>
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d103      	bne.n	8001e38 <SystemClock_Config+0x60>
}
 8001e30:	b00d      	add	sp, #52	@ 0x34
 8001e32:	bd00      	pop	{pc}
    Error_Handler();
 8001e34:	f7ff ffc6 	bl	8001dc4 <Error_Handler>
    Error_Handler();
 8001e38:	f7ff ffc4 	bl	8001dc4 <Error_Handler>
 8001e3c:	40022000 	.word	0x40022000

08001e40 <main>:
{
 8001e40:	b510      	push	{r4, lr}
  HAL_Init();
 8001e42:	f000 f9e7 	bl	8002214 <HAL_Init>
  SystemClock_Config();
 8001e46:	f7ff ffc7 	bl	8001dd8 <SystemClock_Config>
  MX_GPIO_Init();
 8001e4a:	f7ff fdbb 	bl	80019c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e4e:	f7ff fe09 	bl	8001a64 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001e52:	f000 f90f 	bl	8002074 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8001e56:	f000 f89f 	bl	8001f98 <MX_TIM14_Init>
  MX_TIM16_Init();
 8001e5a:	f000 f8b7 	bl	8001fcc <MX_TIM16_Init>
  bma400_init(&bma400);
 8001e5e:	4c15      	ldr	r4, [pc, #84]	@ (8001eb4 <main+0x74>)
 8001e60:	0020      	movs	r0, r4
 8001e62:	f7ff f9e7 	bl	8001234 <bma400_init>
  configureBMA400(&bma400);
 8001e66:	0020      	movs	r0, r4
 8001e68:	f7ff fe8c 	bl	8001b84 <configureBMA400>
  HAL_Delay(10);
 8001e6c:	200a      	movs	r0, #10
 8001e6e:	f000 f9ef 	bl	8002250 <HAL_Delay>
  debug_uart("woke up\n");
 8001e72:	4811      	ldr	r0, [pc, #68]	@ (8001eb8 <main+0x78>)
 8001e74:	f7ff fe6a 	bl	8001b4c <debug_uart>
  HAL_TIM_Base_Start_IT(&htim14);
 8001e78:	4810      	ldr	r0, [pc, #64]	@ (8001ebc <main+0x7c>)
 8001e7a:	f001 faab 	bl	80033d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8001e7e:	4810      	ldr	r0, [pc, #64]	@ (8001ec0 <main+0x80>)
 8001e80:	f001 faa8 	bl	80033d4 <HAL_TIM_Base_Start_IT>
	  if (send_flag)
 8001e84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <main+0x84>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <main+0x60>
	  if (go_sleep)
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <main+0x88>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f7      	beq.n	8001e84 <main+0x44>
		  go_sleep = 0;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <main+0x88>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
		  enterShutdown();
 8001e9a:	f7ff fe65 	bl	8001b68 <enterShutdown>
 8001e9e:	e7f1      	b.n	8001e84 <main+0x44>
	      send_flag = 0;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <main+0x84>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
	      SendESP(&huart1, send_time);
 8001ea6:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <main+0x8c>)
 8001ea8:	8819      	ldrh	r1, [r3, #0]
 8001eaa:	b289      	uxth	r1, r1
 8001eac:	4808      	ldr	r0, [pc, #32]	@ (8001ed0 <main+0x90>)
 8001eae:	f7ff fea1 	bl	8001bf4 <SendESP>
 8001eb2:	e7eb      	b.n	8001e8c <main+0x4c>
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	080047ac 	.word	0x080047ac
 8001ebc:	200001a0 	.word	0x200001a0
 8001ec0:	20000154 	.word	0x20000154
 8001ec4:	2000014c 	.word	0x2000014c
 8001ec8:	20000148 	.word	0x20000148
 8001ecc:	2000014a 	.word	0x2000014a
 8001ed0:	200001ec 	.word	0x200001ec

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b500      	push	{lr}
 8001ed6:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <HAL_MspInit+0x38>)
 8001eda:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001edc:	2201      	movs	r2, #1
 8001ede:	4311      	orrs	r1, r2
 8001ee0:	6419      	str	r1, [r3, #64]	@ 0x40
 8001ee2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	9200      	str	r2, [sp, #0]
 8001ee8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eec:	2180      	movs	r1, #128	@ 0x80
 8001eee:	0549      	lsls	r1, r1, #21
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef6:	400b      	ands	r3, r1
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8001efc:	2008      	movs	r0, #8
 8001efe:	f000 f9b9 	bl	8002274 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8001f02:	2010      	movs	r0, #16
 8001f04:	f000 f9b6 	bl	8002274 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f08:	b003      	add	sp, #12
 8001f0a:	bd00      	pop	{pc}
 8001f0c:	40021000 	.word	0x40021000

08001f10 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f10:	e7fe      	b.n	8001f10 <NMI_Handler>

08001f12 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <HardFault_Handler>

08001f14 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f14:	4770      	bx	lr

08001f16 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f18:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1a:	f000 f987 	bl	800222c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1e:	bd10      	pop	{r4, pc}

08001f20 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001f20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001f22:	4802      	ldr	r0, [pc, #8]	@ (8001f2c <TIM14_IRQHandler+0xc>)
 8001f24:	f001 faaa 	bl	800347c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	200001a0 	.word	0x200001a0

08001f30 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001f30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001f32:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <TIM16_IRQHandler+0xc>)
 8001f34:	f001 faa2 	bl	800347c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001f38:	bd10      	pop	{r4, pc}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	20000154 	.word	0x20000154

08001f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f40:	b510      	push	{r4, lr}
 8001f42:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f44:	4a0c      	ldr	r2, [pc, #48]	@ (8001f78 <_sbrk+0x38>)
 8001f46:	490d      	ldr	r1, [pc, #52]	@ (8001f7c <_sbrk+0x3c>)
 8001f48:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4a:	490d      	ldr	r1, [pc, #52]	@ (8001f80 <_sbrk+0x40>)
 8001f4c:	6809      	ldr	r1, [r1, #0]
 8001f4e:	2900      	cmp	r1, #0
 8001f50:	d007      	beq.n	8001f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f52:	490b      	ldr	r1, [pc, #44]	@ (8001f80 <_sbrk+0x40>)
 8001f54:	6808      	ldr	r0, [r1, #0]
 8001f56:	18c3      	adds	r3, r0, r3
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d806      	bhi.n	8001f6a <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f5c:	4a08      	ldr	r2, [pc, #32]	@ (8001f80 <_sbrk+0x40>)
 8001f5e:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001f60:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001f62:	4907      	ldr	r1, [pc, #28]	@ (8001f80 <_sbrk+0x40>)
 8001f64:	4807      	ldr	r0, [pc, #28]	@ (8001f84 <_sbrk+0x44>)
 8001f66:	6008      	str	r0, [r1, #0]
 8001f68:	e7f3      	b.n	8001f52 <_sbrk+0x12>
    errno = ENOMEM;
 8001f6a:	f001 ff79 	bl	8003e60 <__errno>
 8001f6e:	230c      	movs	r3, #12
 8001f70:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f72:	2001      	movs	r0, #1
 8001f74:	4240      	negs	r0, r0
 8001f76:	e7f3      	b.n	8001f60 <_sbrk+0x20>
 8001f78:	20001800 	.word	0x20001800
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	20000150 	.word	0x20000150
 8001f84:	200003d0 	.word	0x200003d0

08001f88 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f88:	4b02      	ldr	r3, [pc, #8]	@ (8001f94 <SystemInit+0xc>)
 8001f8a:	2280      	movs	r2, #128	@ 0x80
 8001f8c:	0512      	lsls	r2, r2, #20
 8001f8e:	609a      	str	r2, [r3, #8]
#endif
}
 8001f90:	4770      	bx	lr
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <MX_TIM14_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001f98:	b510      	push	{r4, lr}
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001f9a:	4809      	ldr	r0, [pc, #36]	@ (8001fc0 <MX_TIM14_Init+0x28>)
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <MX_TIM14_Init+0x2c>)
 8001f9e:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 1199;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <MX_TIM14_Init+0x30>)
 8001fa2:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 99;
 8001fa8:	2263      	movs	r2, #99	@ 0x63
 8001faa:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fac:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fae:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001fb0:	f001 fb5a 	bl	8003668 <HAL_TIM_Base_Init>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d100      	bne.n	8001fba <MX_TIM14_Init+0x22>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001fb8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001fba:	f7ff ff03 	bl	8001dc4 <Error_Handler>
}
 8001fbe:	e7fb      	b.n	8001fb8 <MX_TIM14_Init+0x20>
 8001fc0:	200001a0 	.word	0x200001a0
 8001fc4:	40002000 	.word	0x40002000
 8001fc8:	000004af 	.word	0x000004af

08001fcc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001fcc:	b510      	push	{r4, lr}
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001fce:	480a      	ldr	r0, [pc, #40]	@ (8001ff8 <MX_TIM16_Init+0x2c>)
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <MX_TIM16_Init+0x30>)
 8001fd2:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 1199;
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <MX_TIM16_Init+0x34>)
 8001fd6:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 9;
 8001fdc:	2209      	movs	r2, #9
 8001fde:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe0:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fe2:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fe6:	f001 fb3f 	bl	8003668 <HAL_TIM_Base_Init>
 8001fea:	2800      	cmp	r0, #0
 8001fec:	d100      	bne.n	8001ff0 <MX_TIM16_Init+0x24>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001fee:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001ff0:	f7ff fee8 	bl	8001dc4 <Error_Handler>
}
 8001ff4:	e7fb      	b.n	8001fee <MX_TIM16_Init+0x22>
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	20000154 	.word	0x20000154
 8001ffc:	40014400 	.word	0x40014400
 8002000:	000004af 	.word	0x000004af

08002004 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002004:	b500      	push	{lr}
 8002006:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM14)
 8002008:	6803      	ldr	r3, [r0, #0]
 800200a:	4a17      	ldr	r2, [pc, #92]	@ (8002068 <HAL_TIM_Base_MspInit+0x64>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d004      	beq.n	800201a <HAL_TIM_Base_MspInit+0x16>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM16)
 8002010:	4a16      	ldr	r2, [pc, #88]	@ (800206c <HAL_TIM_Base_MspInit+0x68>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d014      	beq.n	8002040 <HAL_TIM_Base_MspInit+0x3c>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002016:	b003      	add	sp, #12
 8002018:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_TIM_Base_MspInit+0x6c>)
 800201c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800201e:	2180      	movs	r1, #128	@ 0x80
 8002020:	0209      	lsls	r1, r1, #8
 8002022:	430a      	orrs	r2, r1
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	400b      	ands	r3, r1
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	2013      	movs	r0, #19
 8002034:	f000 f972 	bl	800231c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002038:	2013      	movs	r0, #19
 800203a:	f000 f973 	bl	8002324 <HAL_NVIC_EnableIRQ>
 800203e:	e7ea      	b.n	8002016 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <HAL_TIM_Base_MspInit+0x6c>)
 8002042:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002044:	2180      	movs	r1, #128	@ 0x80
 8002046:	0289      	lsls	r1, r1, #10
 8002048:	430a      	orrs	r2, r1
 800204a:	641a      	str	r2, [r3, #64]	@ 0x40
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	400b      	ands	r3, r1
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2101      	movs	r1, #1
 8002058:	2015      	movs	r0, #21
 800205a:	f000 f95f 	bl	800231c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800205e:	2015      	movs	r0, #21
 8002060:	f000 f960 	bl	8002324 <HAL_NVIC_EnableIRQ>
}
 8002064:	e7d7      	b.n	8002016 <HAL_TIM_Base_MspInit+0x12>
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	40002000 	.word	0x40002000
 800206c:	40014400 	.word	0x40014400
 8002070:	40021000 	.word	0x40021000

08002074 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002074:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002076:	4819      	ldr	r0, [pc, #100]	@ (80020dc <MX_USART1_UART_Init+0x68>)
 8002078:	4b19      	ldr	r3, [pc, #100]	@ (80020e0 <MX_USART1_UART_Init+0x6c>)
 800207a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800207c:	23e1      	movs	r3, #225	@ 0xe1
 800207e:	025b      	lsls	r3, r3, #9
 8002080:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	2300      	movs	r3, #0
 8002084:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002086:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002088:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800208a:	220c      	movs	r2, #12
 800208c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002090:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002092:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002094:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002096:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002098:	f001 fdd6 	bl	8003c48 <HAL_UART_Init>
 800209c:	2800      	cmp	r0, #0
 800209e:	d111      	bne.n	80020c4 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a0:	480e      	ldr	r0, [pc, #56]	@ (80020dc <MX_USART1_UART_Init+0x68>)
 80020a2:	2100      	movs	r1, #0
 80020a4:	f001 fe50 	bl	8003d48 <HAL_UARTEx_SetTxFifoThreshold>
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d10e      	bne.n	80020ca <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ac:	480b      	ldr	r0, [pc, #44]	@ (80020dc <MX_USART1_UART_Init+0x68>)
 80020ae:	2100      	movs	r1, #0
 80020b0:	f001 fe70 	bl	8003d94 <HAL_UARTEx_SetRxFifoThreshold>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d10b      	bne.n	80020d0 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020b8:	4808      	ldr	r0, [pc, #32]	@ (80020dc <MX_USART1_UART_Init+0x68>)
 80020ba:	f001 fe25 	bl	8003d08 <HAL_UARTEx_DisableFifoMode>
 80020be:	2800      	cmp	r0, #0
 80020c0:	d109      	bne.n	80020d6 <MX_USART1_UART_Init+0x62>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020c2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80020c4:	f7ff fe7e 	bl	8001dc4 <Error_Handler>
 80020c8:	e7ea      	b.n	80020a0 <MX_USART1_UART_Init+0x2c>
    Error_Handler();
 80020ca:	f7ff fe7b 	bl	8001dc4 <Error_Handler>
 80020ce:	e7ed      	b.n	80020ac <MX_USART1_UART_Init+0x38>
    Error_Handler();
 80020d0:	f7ff fe78 	bl	8001dc4 <Error_Handler>
 80020d4:	e7f0      	b.n	80020b8 <MX_USART1_UART_Init+0x44>
    Error_Handler();
 80020d6:	f7ff fe75 	bl	8001dc4 <Error_Handler>
}
 80020da:	e7f2      	b.n	80020c2 <MX_USART1_UART_Init+0x4e>
 80020dc:	200001ec 	.word	0x200001ec
 80020e0:	40013800 	.word	0x40013800

080020e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e4:	b510      	push	{r4, lr}
 80020e6:	b08e      	sub	sp, #56	@ 0x38
 80020e8:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ea:	2214      	movs	r2, #20
 80020ec:	2100      	movs	r1, #0
 80020ee:	a809      	add	r0, sp, #36	@ 0x24
 80020f0:	f001 feae 	bl	8003e50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f4:	221c      	movs	r2, #28
 80020f6:	2100      	movs	r1, #0
 80020f8:	a802      	add	r0, sp, #8
 80020fa:	f001 fea9 	bl	8003e50 <memset>
  if(uartHandle->Instance==USART1)
 80020fe:	6822      	ldr	r2, [r4, #0]
 8002100:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <HAL_UART_MspInit+0x7c>)
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002106:	b00e      	add	sp, #56	@ 0x38
 8002108:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800210a:	2301      	movs	r3, #1
 800210c:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800210e:	a802      	add	r0, sp, #8
 8002110:	f001 f8c6 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 8002114:	2800      	cmp	r0, #0
 8002116:	d120      	bne.n	800215a <HAL_UART_MspInit+0x76>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_UART_MspInit+0x80>)
 800211a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800211c:	2180      	movs	r1, #128	@ 0x80
 800211e:	01c9      	lsls	r1, r1, #7
 8002120:	430a      	orrs	r2, r1
 8002122:	641a      	str	r2, [r3, #64]	@ 0x40
 8002124:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002126:	400a      	ands	r2, r1
 8002128:	9200      	str	r2, [sp, #0]
 800212a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800212e:	2201      	movs	r2, #1
 8002130:	4311      	orrs	r1, r2
 8002132:	6359      	str	r1, [r3, #52]	@ 0x34
 8002134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002136:	4013      	ands	r3, r2
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800213c:	23c0      	movs	r3, #192	@ 0xc0
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800214c:	920d      	str	r2, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	20a0      	movs	r0, #160	@ 0xa0
 8002150:	a909      	add	r1, sp, #36	@ 0x24
 8002152:	05c0      	lsls	r0, r0, #23
 8002154:	f000 f8f6 	bl	8002344 <HAL_GPIO_Init>
}
 8002158:	e7d5      	b.n	8002106 <HAL_UART_MspInit+0x22>
      Error_Handler();
 800215a:	f7ff fe33 	bl	8001dc4 <Error_Handler>
 800215e:	e7db      	b.n	8002118 <HAL_UART_MspInit+0x34>
 8002160:	40013800 	.word	0x40013800
 8002164:	40021000 	.word	0x40021000

08002168 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002168:	480d      	ldr	r0, [pc, #52]	@ (80021a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800216a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800216c:	f7ff ff0c 	bl	8001f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002170:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002172:	e003      	b.n	800217c <LoopCopyDataInit>

08002174 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002174:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002176:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002178:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800217a:	3104      	adds	r1, #4

0800217c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800217c:	480a      	ldr	r0, [pc, #40]	@ (80021a8 <LoopForever+0xa>)
  ldr r3, =_edata
 800217e:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <LoopForever+0xe>)
  adds r2, r0, r1
 8002180:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002182:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002184:	d3f6      	bcc.n	8002174 <CopyDataInit>
  ldr r2, =_sbss
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <LoopForever+0x12>)
  b LoopFillZerobss
 8002188:	e002      	b.n	8002190 <LoopFillZerobss>

0800218a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  str  r3, [r2]
 800218c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800218e:	3204      	adds	r2, #4

08002190 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <LoopForever+0x16>)
  cmp r2, r3
 8002192:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002194:	d3f9      	bcc.n	800218a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002196:	f001 fe69 	bl	8003e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219a:	f7ff fe51 	bl	8001e40 <main>

0800219e <LoopForever>:

LoopForever:
    b LoopForever
 800219e:	e7fe      	b.n	800219e <LoopForever>
  ldr   r0, =_estack
 80021a0:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80021a4:	0800487c 	.word	0x0800487c
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021ac:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 80021b0:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 80021b4:	200003cc 	.word	0x200003cc

080021b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b8:	e7fe      	b.n	80021b8 <ADC1_IRQHandler>
	...

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b510      	push	{r4, lr}
 80021be:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <HAL_InitTick+0x4c>)
 80021c2:	7819      	ldrb	r1, [r3, #0]
 80021c4:	2900      	cmp	r1, #0
 80021c6:	d101      	bne.n	80021cc <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80021c8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80021ca:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80021cc:	20fa      	movs	r0, #250	@ 0xfa
 80021ce:	0080      	lsls	r0, r0, #2
 80021d0:	f7fd ffac 	bl	800012c <__udivsi3>
 80021d4:	0001      	movs	r1, r0
 80021d6:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <HAL_InitTick+0x50>)
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	f7fd ffa7 	bl	800012c <__udivsi3>
 80021de:	f000 f8ad 	bl	800233c <HAL_SYSTICK_Config>
 80021e2:	2800      	cmp	r0, #0
 80021e4:	d10d      	bne.n	8002202 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	2c03      	cmp	r4, #3
 80021e8:	d901      	bls.n	80021ee <HAL_InitTick+0x32>
        status = HAL_ERROR;
 80021ea:	2001      	movs	r0, #1
 80021ec:	e7ed      	b.n	80021ca <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ee:	3001      	adds	r0, #1
 80021f0:	2200      	movs	r2, #0
 80021f2:	0021      	movs	r1, r4
 80021f4:	4240      	negs	r0, r0
 80021f6:	f000 f891 	bl	800231c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021fa:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_InitTick+0x54>)
 80021fc:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80021fe:	2000      	movs	r0, #0
 8002200:	e7e3      	b.n	80021ca <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8002202:	2001      	movs	r0, #1
 8002204:	e7e1      	b.n	80021ca <HAL_InitTick+0xe>
 8002206:	46c0      	nop			@ (mov r8, r8)
 8002208:	20000024 	.word	0x20000024
 800220c:	20000020 	.word	0x20000020
 8002210:	20000028 	.word	0x20000028

08002214 <HAL_Init>:
{
 8002214:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002216:	2003      	movs	r0, #3
 8002218:	f7ff ffd0 	bl	80021bc <HAL_InitTick>
 800221c:	1e04      	subs	r4, r0, #0
 800221e:	d002      	beq.n	8002226 <HAL_Init+0x12>
    status = HAL_ERROR;
 8002220:	2401      	movs	r4, #1
}
 8002222:	0020      	movs	r0, r4
 8002224:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8002226:	f7ff fe55 	bl	8001ed4 <HAL_MspInit>
 800222a:	e7fa      	b.n	8002222 <HAL_Init+0xe>

0800222c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <HAL_IncTick+0x10>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4a03      	ldr	r2, [pc, #12]	@ (8002240 <HAL_IncTick+0x14>)
 8002232:	6811      	ldr	r1, [r2, #0]
 8002234:	185b      	adds	r3, r3, r1
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	4770      	bx	lr
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	20000024 	.word	0x20000024
 8002240:	20000280 	.word	0x20000280

08002244 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002244:	4b01      	ldr	r3, [pc, #4]	@ (800224c <HAL_GetTick+0x8>)
 8002246:	6818      	ldr	r0, [r3, #0]
}
 8002248:	4770      	bx	lr
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	20000280 	.word	0x20000280

08002250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff fff6 	bl	8002244 <HAL_GetTick>
 8002258:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	1c63      	adds	r3, r4, #1
 800225c:	d002      	beq.n	8002264 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800225e:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <HAL_Delay+0x20>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002264:	f7ff ffee 	bl	8002244 <HAL_GetTick>
 8002268:	1b40      	subs	r0, r0, r5
 800226a:	42a0      	cmp	r0, r4
 800226c:	d3fa      	bcc.n	8002264 <HAL_Delay+0x14>
  {
  }
}
 800226e:	bd70      	pop	{r4, r5, r6, pc}
 8002270:	20000024 	.word	0x20000024

08002274 <HAL_SYSCFG_EnableRemap>:
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8002274:	4a02      	ldr	r2, [pc, #8]	@ (8002280 <HAL_SYSCFG_EnableRemap+0xc>)
 8002276:	6813      	ldr	r3, [r2, #0]
 8002278:	4303      	orrs	r3, r0
 800227a:	6013      	str	r3, [r2, #0]
}
 800227c:	4770      	bx	lr
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	40010000 	.word	0x40010000

08002284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002284:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8002286:	2800      	cmp	r0, #0
 8002288:	db11      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800228a:	0883      	lsrs	r3, r0, #2
 800228c:	4d13      	ldr	r5, [pc, #76]	@ (80022dc <__NVIC_SetPriority+0x58>)
 800228e:	33c0      	adds	r3, #192	@ 0xc0
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	595c      	ldr	r4, [r3, r5]
 8002294:	2203      	movs	r2, #3
 8002296:	4010      	ands	r0, r2
 8002298:	00c0      	lsls	r0, r0, #3
 800229a:	32fc      	adds	r2, #252	@ 0xfc
 800229c:	0016      	movs	r6, r2
 800229e:	4086      	lsls	r6, r0
 80022a0:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022a2:	0189      	lsls	r1, r1, #6
 80022a4:	400a      	ands	r2, r1
 80022a6:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022a8:	4322      	orrs	r2, r4
 80022aa:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022ac:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ae:	230f      	movs	r3, #15
 80022b0:	4003      	ands	r3, r0
 80022b2:	3b08      	subs	r3, #8
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3306      	adds	r3, #6
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4a09      	ldr	r2, [pc, #36]	@ (80022e0 <__NVIC_SetPriority+0x5c>)
 80022bc:	4694      	mov	ip, r2
 80022be:	4463      	add	r3, ip
 80022c0:	685c      	ldr	r4, [r3, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	4010      	ands	r0, r2
 80022c6:	00c0      	lsls	r0, r0, #3
 80022c8:	32fc      	adds	r2, #252	@ 0xfc
 80022ca:	0015      	movs	r5, r2
 80022cc:	4085      	lsls	r5, r0
 80022ce:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022d0:	0189      	lsls	r1, r1, #6
 80022d2:	400a      	ands	r2, r1
 80022d4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022d6:	4322      	orrs	r2, r4
 80022d8:	605a      	str	r2, [r3, #4]
}
 80022da:	e7e7      	b.n	80022ac <__NVIC_SetPriority+0x28>
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e4:	3801      	subs	r0, #1
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	045b      	lsls	r3, r3, #17
 80022ea:	4298      	cmp	r0, r3
 80022ec:	d20f      	bcs.n	800230e <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <SysTick_Config+0x30>)
 80022f0:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022f2:	4809      	ldr	r0, [pc, #36]	@ (8002318 <SysTick_Config+0x34>)
 80022f4:	6a03      	ldr	r3, [r0, #32]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	21c0      	movs	r1, #192	@ 0xc0
 80022fc:	0609      	lsls	r1, r1, #24
 80022fe:	430b      	orrs	r3, r1
 8002300:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002302:	2300      	movs	r3, #0
 8002304:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	3307      	adds	r3, #7
 8002308:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230a:	2000      	movs	r0, #0
}
 800230c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2001      	movs	r0, #1
 8002310:	e7fc      	b.n	800230c <SysTick_Config+0x28>
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	e000e010 	.word	0xe000e010
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231c:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800231e:	f7ff ffb1 	bl	8002284 <__NVIC_SetPriority>
}
 8002322:	bd10      	pop	{r4, pc}

08002324 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002324:	2800      	cmp	r0, #0
 8002326:	db05      	blt.n	8002334 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002328:	221f      	movs	r2, #31
 800232a:	4002      	ands	r2, r0
 800232c:	2301      	movs	r3, #1
 800232e:	4093      	lsls	r3, r2
 8002330:	4a01      	ldr	r2, [pc, #4]	@ (8002338 <HAL_NVIC_EnableIRQ+0x14>)
 8002332:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002334:	4770      	bx	lr
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	e000e100 	.word	0xe000e100

0800233c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233c:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 800233e:	f7ff ffd1 	bl	80022e4 <SysTick_Config>
}
 8002342:	bd10      	pop	{r4, pc}

08002344 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002346:	46d6      	mov	lr, sl
 8002348:	464f      	mov	r7, r9
 800234a:	4646      	mov	r6, r8
 800234c:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800234e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002350:	e03b      	b.n	80023ca <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002352:	2505      	movs	r5, #5
 8002354:	e000      	b.n	8002358 <HAL_GPIO_Init+0x14>
 8002356:	2500      	movs	r5, #0
 8002358:	40a5      	lsls	r5, r4
 800235a:	002c      	movs	r4, r5
 800235c:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 800235e:	4d61      	ldr	r5, [pc, #388]	@ (80024e4 <HAL_GPIO_Init+0x1a0>)
 8002360:	3218      	adds	r2, #24
 8002362:	0092      	lsls	r2, r2, #2
 8002364:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002366:	2280      	movs	r2, #128	@ 0x80
 8002368:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 800236a:	464a      	mov	r2, r9
 800236c:	43d2      	mvns	r2, r2
 800236e:	003d      	movs	r5, r7
 8002370:	464c      	mov	r4, r9
 8002372:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002374:	684c      	ldr	r4, [r1, #4]
 8002376:	03e4      	lsls	r4, r4, #15
 8002378:	d502      	bpl.n	8002380 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 800237a:	003d      	movs	r5, r7
 800237c:	464c      	mov	r4, r9
 800237e:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8002380:	4c58      	ldr	r4, [pc, #352]	@ (80024e4 <HAL_GPIO_Init+0x1a0>)
 8002382:	2780      	movs	r7, #128	@ 0x80
 8002384:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 8002386:	2584      	movs	r5, #132	@ 0x84
 8002388:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 800238a:	003d      	movs	r5, r7
 800238c:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800238e:	684c      	ldr	r4, [r1, #4]
 8002390:	03a4      	lsls	r4, r4, #14
 8002392:	d502      	bpl.n	800239a <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8002394:	003d      	movs	r5, r7
 8002396:	464c      	mov	r4, r9
 8002398:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 800239a:	4c52      	ldr	r4, [pc, #328]	@ (80024e4 <HAL_GPIO_Init+0x1a0>)
 800239c:	2784      	movs	r7, #132	@ 0x84
 800239e:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80023a0:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 80023a2:	003d      	movs	r5, r7
 80023a4:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a6:	684c      	ldr	r4, [r1, #4]
 80023a8:	02e4      	lsls	r4, r4, #11
 80023aa:	d502      	bpl.n	80023b2 <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 80023ac:	003d      	movs	r5, r7
 80023ae:	464c      	mov	r4, r9
 80023b0:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 80023b2:	4c4c      	ldr	r4, [pc, #304]	@ (80024e4 <HAL_GPIO_Init+0x1a0>)
 80023b4:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 80023b6:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 80023b8:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ba:	684c      	ldr	r4, [r1, #4]
 80023bc:	02a4      	lsls	r4, r4, #10
 80023be:	d501      	bpl.n	80023c4 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 80023c0:	464a      	mov	r2, r9
 80023c2:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 80023c4:	4c47      	ldr	r4, [pc, #284]	@ (80024e4 <HAL_GPIO_Init+0x1a0>)
 80023c6:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 80023c8:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023ca:	680c      	ldr	r4, [r1, #0]
 80023cc:	0022      	movs	r2, r4
 80023ce:	40da      	lsrs	r2, r3
 80023d0:	d100      	bne.n	80023d4 <HAL_GPIO_Init+0x90>
 80023d2:	e081      	b.n	80024d8 <HAL_GPIO_Init+0x194>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80023d4:	2201      	movs	r2, #1
 80023d6:	409a      	lsls	r2, r3
 80023d8:	0026      	movs	r6, r4
 80023da:	4016      	ands	r6, r2
 80023dc:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 80023de:	4214      	tst	r4, r2
 80023e0:	d0f2      	beq.n	80023c8 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e2:	684c      	ldr	r4, [r1, #4]
 80023e4:	2c02      	cmp	r4, #2
 80023e6:	d001      	beq.n	80023ec <HAL_GPIO_Init+0xa8>
 80023e8:	2c12      	cmp	r4, #18
 80023ea:	d118      	bne.n	800241e <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 80023ec:	08dd      	lsrs	r5, r3, #3
 80023ee:	3508      	adds	r5, #8
 80023f0:	00ad      	lsls	r5, r5, #2
 80023f2:	582c      	ldr	r4, [r5, r0]
 80023f4:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80023f6:	2707      	movs	r7, #7
 80023f8:	401f      	ands	r7, r3
 80023fa:	00bf      	lsls	r7, r7, #2
 80023fc:	240f      	movs	r4, #15
 80023fe:	46a2      	mov	sl, r4
 8002400:	0026      	movs	r6, r4
 8002402:	40be      	lsls	r6, r7
 8002404:	46b0      	mov	r8, r6
 8002406:	4666      	mov	r6, ip
 8002408:	4644      	mov	r4, r8
 800240a:	43a6      	bics	r6, r4
 800240c:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800240e:	690c      	ldr	r4, [r1, #16]
 8002410:	4656      	mov	r6, sl
 8002412:	4026      	ands	r6, r4
 8002414:	0034      	movs	r4, r6
 8002416:	40bc      	lsls	r4, r7
 8002418:	4666      	mov	r6, ip
 800241a:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 800241c:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 800241e:	6804      	ldr	r4, [r0, #0]
 8002420:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002422:	005d      	lsls	r5, r3, #1
 8002424:	2403      	movs	r4, #3
 8002426:	46a2      	mov	sl, r4
 8002428:	0027      	movs	r7, r4
 800242a:	40af      	lsls	r7, r5
 800242c:	46b8      	mov	r8, r7
 800242e:	43ff      	mvns	r7, r7
 8002430:	4666      	mov	r6, ip
 8002432:	4644      	mov	r4, r8
 8002434:	43a6      	bics	r6, r4
 8002436:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002438:	684c      	ldr	r4, [r1, #4]
 800243a:	4656      	mov	r6, sl
 800243c:	4026      	ands	r6, r4
 800243e:	0034      	movs	r4, r6
 8002440:	40ac      	lsls	r4, r5
 8002442:	4666      	mov	r6, ip
 8002444:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8002446:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002448:	684c      	ldr	r4, [r1, #4]
 800244a:	1e66      	subs	r6, r4, #1
 800244c:	2e01      	cmp	r6, #1
 800244e:	d903      	bls.n	8002458 <HAL_GPIO_Init+0x114>
 8002450:	2c11      	cmp	r4, #17
 8002452:	d001      	beq.n	8002458 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002454:	2c12      	cmp	r4, #18
 8002456:	d112      	bne.n	800247e <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8002458:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800245a:	403c      	ands	r4, r7
 800245c:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800245e:	68cc      	ldr	r4, [r1, #12]
 8002460:	40ac      	lsls	r4, r5
 8002462:	4666      	mov	r6, ip
 8002464:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8002466:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8002468:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800246a:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800246c:	684a      	ldr	r2, [r1, #4]
 800246e:	0912      	lsrs	r2, r2, #4
 8002470:	4694      	mov	ip, r2
 8002472:	2201      	movs	r2, #1
 8002474:	4666      	mov	r6, ip
 8002476:	4032      	ands	r2, r6
 8002478:	409a      	lsls	r2, r3
 800247a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 800247c:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800247e:	684a      	ldr	r2, [r1, #4]
 8002480:	2a03      	cmp	r2, #3
 8002482:	d005      	beq.n	8002490 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8002484:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002486:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002488:	688a      	ldr	r2, [r1, #8]
 800248a:	40aa      	lsls	r2, r5
 800248c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 800248e:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002490:	684a      	ldr	r2, [r1, #4]
 8002492:	00d2      	lsls	r2, r2, #3
 8002494:	d598      	bpl.n	80023c8 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8002496:	089a      	lsrs	r2, r3, #2
 8002498:	0014      	movs	r4, r2
 800249a:	3418      	adds	r4, #24
 800249c:	00a4      	lsls	r4, r4, #2
 800249e:	4d11      	ldr	r5, [pc, #68]	@ (80024e4 <HAL_GPIO_Init+0x1a0>)
 80024a0:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80024a2:	2403      	movs	r4, #3
 80024a4:	401c      	ands	r4, r3
 80024a6:	00e4      	lsls	r4, r4, #3
 80024a8:	250f      	movs	r5, #15
 80024aa:	40a5      	lsls	r5, r4
 80024ac:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80024ae:	25a0      	movs	r5, #160	@ 0xa0
 80024b0:	05ed      	lsls	r5, r5, #23
 80024b2:	42a8      	cmp	r0, r5
 80024b4:	d100      	bne.n	80024b8 <HAL_GPIO_Init+0x174>
 80024b6:	e74e      	b.n	8002356 <HAL_GPIO_Init+0x12>
 80024b8:	4d0b      	ldr	r5, [pc, #44]	@ (80024e8 <HAL_GPIO_Init+0x1a4>)
 80024ba:	42a8      	cmp	r0, r5
 80024bc:	d008      	beq.n	80024d0 <HAL_GPIO_Init+0x18c>
 80024be:	4d0b      	ldr	r5, [pc, #44]	@ (80024ec <HAL_GPIO_Init+0x1a8>)
 80024c0:	42a8      	cmp	r0, r5
 80024c2:	d007      	beq.n	80024d4 <HAL_GPIO_Init+0x190>
 80024c4:	4d0a      	ldr	r5, [pc, #40]	@ (80024f0 <HAL_GPIO_Init+0x1ac>)
 80024c6:	42a8      	cmp	r0, r5
 80024c8:	d100      	bne.n	80024cc <HAL_GPIO_Init+0x188>
 80024ca:	e742      	b.n	8002352 <HAL_GPIO_Init+0xe>
 80024cc:	2506      	movs	r5, #6
 80024ce:	e743      	b.n	8002358 <HAL_GPIO_Init+0x14>
 80024d0:	2501      	movs	r5, #1
 80024d2:	e741      	b.n	8002358 <HAL_GPIO_Init+0x14>
 80024d4:	2502      	movs	r5, #2
 80024d6:	e73f      	b.n	8002358 <HAL_GPIO_Init+0x14>
  }
}
 80024d8:	bce0      	pop	{r5, r6, r7}
 80024da:	46ba      	mov	sl, r7
 80024dc:	46b1      	mov	r9, r6
 80024de:	46a8      	mov	r8, r5
 80024e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	40021800 	.word	0x40021800
 80024e8:	50000400 	.word	0x50000400
 80024ec:	50000800 	.word	0x50000800
 80024f0:	50001400 	.word	0x50001400

080024f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f4:	2a00      	cmp	r2, #0
 80024f6:	d001      	beq.n	80024fc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024fa:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024fc:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80024fe:	e7fc      	b.n	80024fa <HAL_GPIO_WritePin+0x6>

08002500 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002500:	6802      	ldr	r2, [r0, #0]
 8002502:	6993      	ldr	r3, [r2, #24]
 8002504:	079b      	lsls	r3, r3, #30
 8002506:	d501      	bpl.n	800250c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002508:	2300      	movs	r3, #0
 800250a:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800250c:	6803      	ldr	r3, [r0, #0]
 800250e:	699a      	ldr	r2, [r3, #24]
 8002510:	07d2      	lsls	r2, r2, #31
 8002512:	d403      	bmi.n	800251c <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	2101      	movs	r1, #1
 8002518:	430a      	orrs	r2, r1
 800251a:	619a      	str	r2, [r3, #24]
  }
}
 800251c:	4770      	bx	lr
	...

08002520 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002520:	b510      	push	{r4, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002522:	0589      	lsls	r1, r1, #22
 8002524:	0d89      	lsrs	r1, r1, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002526:	0412      	lsls	r2, r2, #16
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002528:	4311      	orrs	r1, r2
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800252a:	4319      	orrs	r1, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800252c:	9b02      	ldr	r3, [sp, #8]
 800252e:	4319      	orrs	r1, r3
 8002530:	0049      	lsls	r1, r1, #1
 8002532:	0849      	lsrs	r1, r1, #1
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002534:	6804      	ldr	r4, [r0, #0]
 8002536:	6862      	ldr	r2, [r4, #4]
 8002538:	0d5b      	lsrs	r3, r3, #21
 800253a:	2080      	movs	r0, #128	@ 0x80
 800253c:	00c0      	lsls	r0, r0, #3
 800253e:	4003      	ands	r3, r0
 8002540:	4803      	ldr	r0, [pc, #12]	@ (8002550 <I2C_TransferConfig+0x30>)
 8002542:	4303      	orrs	r3, r0
 8002544:	439a      	bics	r2, r3
 8002546:	0013      	movs	r3, r2
 8002548:	430b      	orrs	r3, r1
 800254a:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800254c:	bd10      	pop	{r4, pc}
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	03ff63ff 	.word	0x03ff63ff

08002554 <I2C_IsErrorOccurred>:
{
 8002554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002556:	46c6      	mov	lr, r8
 8002558:	b500      	push	{lr}
 800255a:	0004      	movs	r4, r0
 800255c:	000d      	movs	r5, r1
 800255e:	0017      	movs	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8002560:	6801      	ldr	r1, [r0, #0]
 8002562:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002564:	2210      	movs	r2, #16
 8002566:	0016      	movs	r6, r2
 8002568:	401e      	ands	r6, r3
 800256a:	421a      	tst	r2, r3
 800256c:	d100      	bne.n	8002570 <I2C_IsErrorOccurred+0x1c>
 800256e:	e075      	b.n	800265c <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002570:	2310      	movs	r3, #16
 8002572:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	4698      	mov	r8, r3
  HAL_StatusTypeDef status = HAL_OK;
 8002578:	2600      	movs	r6, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800257a:	6820      	ldr	r0, [r4, #0]
 800257c:	6983      	ldr	r3, [r0, #24]
 800257e:	069b      	lsls	r3, r3, #26
 8002580:	d431      	bmi.n	80025e6 <I2C_IsErrorOccurred+0x92>
 8002582:	2e00      	cmp	r6, #0
 8002584:	d12f      	bne.n	80025e6 <I2C_IsErrorOccurred+0x92>
      if (Timeout != HAL_MAX_DELAY)
 8002586:	1c6b      	adds	r3, r5, #1
 8002588:	d0f7      	beq.n	800257a <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800258a:	f7ff fe5b 	bl	8002244 <HAL_GetTick>
 800258e:	1bc0      	subs	r0, r0, r7
 8002590:	42a8      	cmp	r0, r5
 8002592:	d801      	bhi.n	8002598 <I2C_IsErrorOccurred+0x44>
 8002594:	2d00      	cmp	r5, #0
 8002596:	d1f0      	bne.n	800257a <I2C_IsErrorOccurred+0x26>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002598:	6821      	ldr	r1, [r4, #0]
 800259a:	684b      	ldr	r3, [r1, #4]
 800259c:	2280      	movs	r2, #128	@ 0x80
 800259e:	01d2      	lsls	r2, r2, #7
 80025a0:	4013      	ands	r3, r2
          tmp2 = hi2c->Mode;
 80025a2:	2242      	movs	r2, #66	@ 0x42
 80025a4:	5ca2      	ldrb	r2, [r4, r2]
 80025a6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025a8:	6988      	ldr	r0, [r1, #24]
 80025aa:	0400      	lsls	r0, r0, #16
 80025ac:	d503      	bpl.n	80025b6 <I2C_IsErrorOccurred+0x62>
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 80025b2:	2a20      	cmp	r2, #32
 80025b4:	d10e      	bne.n	80025d4 <I2C_IsErrorOccurred+0x80>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	069b      	lsls	r3, r3, #26
 80025bc:	d4dd      	bmi.n	800257a <I2C_IsErrorOccurred+0x26>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025be:	f7ff fe41 	bl	8002244 <HAL_GetTick>
 80025c2:	1bc0      	subs	r0, r0, r7
 80025c4:	2819      	cmp	r0, #25
 80025c6:	d9f6      	bls.n	80025b6 <I2C_IsErrorOccurred+0x62>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	2320      	movs	r3, #32
 80025ca:	4642      	mov	r2, r8
 80025cc:	431a      	orrs	r2, r3
 80025ce:	4690      	mov	r8, r2
              status = HAL_ERROR;
 80025d0:	2601      	movs	r6, #1
              break;
 80025d2:	e7d2      	b.n	800257a <I2C_IsErrorOccurred+0x26>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025d4:	684a      	ldr	r2, [r1, #4]
 80025d6:	2380      	movs	r3, #128	@ 0x80
 80025d8:	01db      	lsls	r3, r3, #7
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80025de:	f7ff fe31 	bl	8002244 <HAL_GetTick>
 80025e2:	0007      	movs	r7, r0
 80025e4:	e7e7      	b.n	80025b6 <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 80025e6:	2e00      	cmp	r6, #0
 80025e8:	d101      	bne.n	80025ee <I2C_IsErrorOccurred+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ea:	2320      	movs	r3, #32
 80025ec:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80025ee:	2604      	movs	r6, #4
 80025f0:	4643      	mov	r3, r8
 80025f2:	4333      	orrs	r3, r6
 80025f4:	001e      	movs	r6, r3
    status = HAL_ERROR;
 80025f6:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 80025f8:	6822      	ldr	r2, [r4, #0]
 80025fa:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025fc:	05d9      	lsls	r1, r3, #23
 80025fe:	d504      	bpl.n	800260a <I2C_IsErrorOccurred+0xb6>
    error_code |= HAL_I2C_ERROR_BERR;
 8002600:	2101      	movs	r1, #1
 8002602:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002604:	31ff      	adds	r1, #255	@ 0xff
 8002606:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002608:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800260a:	055a      	lsls	r2, r3, #21
 800260c:	d506      	bpl.n	800261c <I2C_IsErrorOccurred+0xc8>
    error_code |= HAL_I2C_ERROR_OVR;
 800260e:	2208      	movs	r2, #8
 8002610:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002612:	6822      	ldr	r2, [r4, #0]
 8002614:	2180      	movs	r1, #128	@ 0x80
 8002616:	00c9      	lsls	r1, r1, #3
 8002618:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800261a:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800261c:	059b      	lsls	r3, r3, #22
 800261e:	d51f      	bpl.n	8002660 <I2C_IsErrorOccurred+0x10c>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002620:	2302      	movs	r3, #2
 8002622:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	2280      	movs	r2, #128	@ 0x80
 8002628:	0092      	lsls	r2, r2, #2
 800262a:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800262c:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800262e:	0020      	movs	r0, r4
 8002630:	f7ff ff66 	bl	8002500 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002634:	6822      	ldr	r2, [r4, #0]
 8002636:	6853      	ldr	r3, [r2, #4]
 8002638:	490b      	ldr	r1, [pc, #44]	@ (8002668 <I2C_IsErrorOccurred+0x114>)
 800263a:	400b      	ands	r3, r1
 800263c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800263e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002640:	4333      	orrs	r3, r6
 8002642:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002644:	2341      	movs	r3, #65	@ 0x41
 8002646:	2220      	movs	r2, #32
 8002648:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800264a:	2300      	movs	r3, #0
 800264c:	3222      	adds	r2, #34	@ 0x22
 800264e:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8002650:	3a02      	subs	r2, #2
 8002652:	54a3      	strb	r3, [r4, r2]
}
 8002654:	0028      	movs	r0, r5
 8002656:	bc80      	pop	{r7}
 8002658:	46b8      	mov	r8, r7
 800265a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800265c:	2500      	movs	r5, #0
 800265e:	e7cb      	b.n	80025f8 <I2C_IsErrorOccurred+0xa4>
  if (status != HAL_OK)
 8002660:	2d00      	cmp	r5, #0
 8002662:	d0f7      	beq.n	8002654 <I2C_IsErrorOccurred+0x100>
 8002664:	e7e3      	b.n	800262e <I2C_IsErrorOccurred+0xda>
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	fe00e800 	.word	0xfe00e800

0800266c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	0004      	movs	r4, r0
 8002670:	000d      	movs	r5, r1
 8002672:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	079b      	lsls	r3, r3, #30
 800267a:	d420      	bmi.n	80026be <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800267c:	0032      	movs	r2, r6
 800267e:	0029      	movs	r1, r5
 8002680:	0020      	movs	r0, r4
 8002682:	f7ff ff67 	bl	8002554 <I2C_IsErrorOccurred>
 8002686:	2800      	cmp	r0, #0
 8002688:	d11b      	bne.n	80026c2 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800268a:	1c6b      	adds	r3, r5, #1
 800268c:	d0f2      	beq.n	8002674 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7ff fdd9 	bl	8002244 <HAL_GetTick>
 8002692:	1b80      	subs	r0, r0, r6
 8002694:	42a8      	cmp	r0, r5
 8002696:	d801      	bhi.n	800269c <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8002698:	2d00      	cmp	r5, #0
 800269a:	d1eb      	bne.n	8002674 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	079b      	lsls	r3, r3, #30
 80026a2:	d4e7      	bmi.n	8002674 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80026a6:	2220      	movs	r2, #32
 80026a8:	4313      	orrs	r3, r2
 80026aa:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026ac:	2341      	movs	r3, #65	@ 0x41
 80026ae:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	3222      	adds	r2, #34	@ 0x22
 80026b4:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 80026b6:	3a02      	subs	r2, #2
 80026b8:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 80026ba:	2001      	movs	r0, #1
 80026bc:	e000      	b.n	80026c0 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
  return HAL_OK;
 80026be:	2000      	movs	r0, #0
}
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80026c2:	2001      	movs	r0, #1
 80026c4:	e7fc      	b.n	80026c0 <I2C_WaitOnTXISFlagUntilTimeout+0x54>

080026c6 <I2C_WaitOnFlagUntilTimeout>:
{
 80026c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c8:	46d6      	mov	lr, sl
 80026ca:	464f      	mov	r7, r9
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b083      	sub	sp, #12
 80026d0:	0007      	movs	r7, r0
 80026d2:	000d      	movs	r5, r1
 80026d4:	0016      	movs	r6, r2
 80026d6:	4699      	mov	r9, r3
 80026d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80026da:	469a      	mov	sl, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	699c      	ldr	r4, [r3, #24]
 80026e0:	402c      	ands	r4, r5
 80026e2:	1b64      	subs	r4, r4, r5
 80026e4:	4263      	negs	r3, r4
 80026e6:	415c      	adcs	r4, r3
 80026e8:	9601      	str	r6, [sp, #4]
 80026ea:	42b4      	cmp	r4, r6
 80026ec:	d128      	bne.n	8002740 <I2C_WaitOnFlagUntilTimeout+0x7a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ee:	4652      	mov	r2, sl
 80026f0:	4649      	mov	r1, r9
 80026f2:	0038      	movs	r0, r7
 80026f4:	f7ff ff2e 	bl	8002554 <I2C_IsErrorOccurred>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d127      	bne.n	800274c <I2C_WaitOnFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 80026fc:	464b      	mov	r3, r9
 80026fe:	3301      	adds	r3, #1
 8002700:	d0ec      	beq.n	80026dc <I2C_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002702:	f7ff fd9f 	bl	8002244 <HAL_GetTick>
 8002706:	4653      	mov	r3, sl
 8002708:	1ac0      	subs	r0, r0, r3
 800270a:	4548      	cmp	r0, r9
 800270c:	d802      	bhi.n	8002714 <I2C_WaitOnFlagUntilTimeout+0x4e>
 800270e:	464b      	mov	r3, r9
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e3      	bne.n	80026dc <I2C_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	402b      	ands	r3, r5
 800271a:	1b5b      	subs	r3, r3, r5
 800271c:	425a      	negs	r2, r3
 800271e:	4153      	adcs	r3, r2
 8002720:	9a01      	ldr	r2, [sp, #4]
 8002722:	4293      	cmp	r3, r2
 8002724:	d1da      	bne.n	80026dc <I2C_WaitOnFlagUntilTimeout+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002728:	2220      	movs	r2, #32
 800272a:	4313      	orrs	r3, r2
 800272c:	647b      	str	r3, [r7, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800272e:	2341      	movs	r3, #65	@ 0x41
 8002730:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002732:	2300      	movs	r3, #0
 8002734:	3222      	adds	r2, #34	@ 0x22
 8002736:	54bb      	strb	r3, [r7, r2]
          __HAL_UNLOCK(hi2c);
 8002738:	3a02      	subs	r2, #2
 800273a:	54bb      	strb	r3, [r7, r2]
          return HAL_ERROR;
 800273c:	2001      	movs	r0, #1
 800273e:	e000      	b.n	8002742 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8002740:	2000      	movs	r0, #0
}
 8002742:	b003      	add	sp, #12
 8002744:	bcc0      	pop	{r6, r7}
 8002746:	46ba      	mov	sl, r7
 8002748:	46b1      	mov	r9, r6
 800274a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800274c:	2001      	movs	r0, #1
 800274e:	e7f8      	b.n	8002742 <I2C_WaitOnFlagUntilTimeout+0x7c>

08002750 <I2C_RequestMemoryWrite>:
{
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	0004      	movs	r4, r0
 8002756:	0015      	movs	r5, r2
 8002758:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800275a:	2380      	movs	r3, #128	@ 0x80
 800275c:	b2f2      	uxtb	r2, r6
 800275e:	4819      	ldr	r0, [pc, #100]	@ (80027c4 <I2C_RequestMemoryWrite+0x74>)
 8002760:	9000      	str	r0, [sp, #0]
 8002762:	045b      	lsls	r3, r3, #17
 8002764:	0020      	movs	r0, r4
 8002766:	f7ff fedb 	bl	8002520 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276a:	9a07      	ldr	r2, [sp, #28]
 800276c:	9906      	ldr	r1, [sp, #24]
 800276e:	0020      	movs	r0, r4
 8002770:	f7ff ff7c 	bl	800266c <I2C_WaitOnTXISFlagUntilTimeout>
 8002774:	2800      	cmp	r0, #0
 8002776:	d11e      	bne.n	80027b6 <I2C_RequestMemoryWrite+0x66>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002778:	2e01      	cmp	r6, #1
 800277a:	d10e      	bne.n	800279a <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	b2ed      	uxtb	r5, r5
 8002780:	629d      	str	r5, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002782:	9b07      	ldr	r3, [sp, #28]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	9b06      	ldr	r3, [sp, #24]
 8002788:	2200      	movs	r2, #0
 800278a:	2180      	movs	r1, #128	@ 0x80
 800278c:	0020      	movs	r0, r4
 800278e:	f7ff ff9a 	bl	80026c6 <I2C_WaitOnFlagUntilTimeout>
 8002792:	2800      	cmp	r0, #0
 8002794:	d113      	bne.n	80027be <I2C_RequestMemoryWrite+0x6e>
}
 8002796:	b002      	add	sp, #8
 8002798:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	0a2a      	lsrs	r2, r5, #8
 800279e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a0:	9a07      	ldr	r2, [sp, #28]
 80027a2:	9906      	ldr	r1, [sp, #24]
 80027a4:	0020      	movs	r0, r4
 80027a6:	f7ff ff61 	bl	800266c <I2C_WaitOnTXISFlagUntilTimeout>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d105      	bne.n	80027ba <I2C_RequestMemoryWrite+0x6a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	b2ed      	uxtb	r5, r5
 80027b2:	629d      	str	r5, [r3, #40]	@ 0x28
 80027b4:	e7e5      	b.n	8002782 <I2C_RequestMemoryWrite+0x32>
    return HAL_ERROR;
 80027b6:	2001      	movs	r0, #1
 80027b8:	e7ed      	b.n	8002796 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80027ba:	2001      	movs	r0, #1
 80027bc:	e7eb      	b.n	8002796 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80027be:	2001      	movs	r0, #1
 80027c0:	e7e9      	b.n	8002796 <I2C_RequestMemoryWrite+0x46>
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	80002000 	.word	0x80002000

080027c8 <I2C_RequestMemoryRead>:
{
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	0004      	movs	r4, r0
 80027ce:	0015      	movs	r5, r2
 80027d0:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <I2C_RequestMemoryRead+0x70>)
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2300      	movs	r3, #0
 80027da:	f7ff fea1 	bl	8002520 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027de:	9a07      	ldr	r2, [sp, #28]
 80027e0:	9906      	ldr	r1, [sp, #24]
 80027e2:	0020      	movs	r0, r4
 80027e4:	f7ff ff42 	bl	800266c <I2C_WaitOnTXISFlagUntilTimeout>
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d11e      	bne.n	800282a <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ec:	2e01      	cmp	r6, #1
 80027ee:	d10e      	bne.n	800280e <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	b2ed      	uxtb	r5, r5
 80027f4:	629d      	str	r5, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80027f6:	9b07      	ldr	r3, [sp, #28]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	9b06      	ldr	r3, [sp, #24]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2140      	movs	r1, #64	@ 0x40
 8002800:	0020      	movs	r0, r4
 8002802:	f7ff ff60 	bl	80026c6 <I2C_WaitOnFlagUntilTimeout>
 8002806:	2800      	cmp	r0, #0
 8002808:	d113      	bne.n	8002832 <I2C_RequestMemoryRead+0x6a>
}
 800280a:	b002      	add	sp, #8
 800280c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	0a2a      	lsrs	r2, r5, #8
 8002812:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002814:	9a07      	ldr	r2, [sp, #28]
 8002816:	9906      	ldr	r1, [sp, #24]
 8002818:	0020      	movs	r0, r4
 800281a:	f7ff ff27 	bl	800266c <I2C_WaitOnTXISFlagUntilTimeout>
 800281e:	2800      	cmp	r0, #0
 8002820:	d105      	bne.n	800282e <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	b2ed      	uxtb	r5, r5
 8002826:	629d      	str	r5, [r3, #40]	@ 0x28
 8002828:	e7e5      	b.n	80027f6 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 800282a:	2001      	movs	r0, #1
 800282c:	e7ed      	b.n	800280a <I2C_RequestMemoryRead+0x42>
      return HAL_ERROR;
 800282e:	2001      	movs	r0, #1
 8002830:	e7eb      	b.n	800280a <I2C_RequestMemoryRead+0x42>
    return HAL_ERROR;
 8002832:	2001      	movs	r0, #1
 8002834:	e7e9      	b.n	800280a <I2C_RequestMemoryRead+0x42>
 8002836:	46c0      	nop			@ (mov r8, r8)
 8002838:	80002000 	.word	0x80002000

0800283c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	0004      	movs	r4, r0
 8002840:	000d      	movs	r5, r1
 8002842:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002844:	e003      	b.n	800284e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	069b      	lsls	r3, r3, #26
 800284c:	d512      	bpl.n	8002874 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	069b      	lsls	r3, r3, #26
 8002854:	d41b      	bmi.n	800288e <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002856:	0032      	movs	r2, r6
 8002858:	0029      	movs	r1, r5
 800285a:	0020      	movs	r0, r4
 800285c:	f7ff fe7a 	bl	8002554 <I2C_IsErrorOccurred>
 8002860:	2800      	cmp	r0, #0
 8002862:	d116      	bne.n	8002892 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002864:	f7ff fcee 	bl	8002244 <HAL_GetTick>
 8002868:	1b80      	subs	r0, r0, r6
 800286a:	42a8      	cmp	r0, r5
 800286c:	d8eb      	bhi.n	8002846 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800286e:	2d00      	cmp	r5, #0
 8002870:	d1ed      	bne.n	800284e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
 8002872:	e7e8      	b.n	8002846 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002874:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002876:	2220      	movs	r2, #32
 8002878:	4313      	orrs	r3, r2
 800287a:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800287c:	2341      	movs	r3, #65	@ 0x41
 800287e:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	2300      	movs	r3, #0
 8002882:	3222      	adds	r2, #34	@ 0x22
 8002884:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8002886:	3a02      	subs	r2, #2
 8002888:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 800288a:	2001      	movs	r0, #1
 800288c:	e000      	b.n	8002890 <I2C_WaitOnSTOPFlagUntilTimeout+0x54>
  return HAL_OK;
 800288e:	2000      	movs	r0, #0
}
 8002890:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002892:	2001      	movs	r0, #1
 8002894:	e7fc      	b.n	8002890 <I2C_WaitOnSTOPFlagUntilTimeout+0x54>
	...

08002898 <HAL_I2C_Init>:
{
 8002898:	b510      	push	{r4, lr}
 800289a:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 800289c:	d060      	beq.n	8002960 <HAL_I2C_Init+0xc8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800289e:	2341      	movs	r3, #65	@ 0x41
 80028a0:	5cc3      	ldrb	r3, [r0, r3]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d048      	beq.n	8002938 <HAL_I2C_Init+0xa0>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a6:	2341      	movs	r3, #65	@ 0x41
 80028a8:	2224      	movs	r2, #36	@ 0x24
 80028aa:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80028ac:	6822      	ldr	r2, [r4, #0]
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	2101      	movs	r1, #1
 80028b2:	438b      	bics	r3, r1
 80028b4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028b6:	6863      	ldr	r3, [r4, #4]
 80028b8:	6822      	ldr	r2, [r4, #0]
 80028ba:	492a      	ldr	r1, [pc, #168]	@ (8002964 <HAL_I2C_Init+0xcc>)
 80028bc:	400b      	ands	r3, r1
 80028be:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028c0:	6822      	ldr	r2, [r4, #0]
 80028c2:	6893      	ldr	r3, [r2, #8]
 80028c4:	4928      	ldr	r1, [pc, #160]	@ (8002968 <HAL_I2C_Init+0xd0>)
 80028c6:	400b      	ands	r3, r1
 80028c8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ca:	68e3      	ldr	r3, [r4, #12]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d039      	beq.n	8002944 <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028d0:	68a1      	ldr	r1, [r4, #8]
 80028d2:	6822      	ldr	r2, [r4, #0]
 80028d4:	2384      	movs	r3, #132	@ 0x84
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	430b      	orrs	r3, r1
 80028da:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028dc:	68e3      	ldr	r3, [r4, #12]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d037      	beq.n	8002952 <HAL_I2C_Init+0xba>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028e2:	6822      	ldr	r2, [r4, #0]
 80028e4:	6853      	ldr	r3, [r2, #4]
 80028e6:	4921      	ldr	r1, [pc, #132]	@ (800296c <HAL_I2C_Init+0xd4>)
 80028e8:	400b      	ands	r3, r1
 80028ea:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ec:	6822      	ldr	r2, [r4, #0]
 80028ee:	6851      	ldr	r1, [r2, #4]
 80028f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002970 <HAL_I2C_Init+0xd8>)
 80028f2:	430b      	orrs	r3, r1
 80028f4:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028f6:	6822      	ldr	r2, [r4, #0]
 80028f8:	68d3      	ldr	r3, [r2, #12]
 80028fa:	491b      	ldr	r1, [pc, #108]	@ (8002968 <HAL_I2C_Init+0xd0>)
 80028fc:	400b      	ands	r3, r1
 80028fe:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002900:	6923      	ldr	r3, [r4, #16]
 8002902:	6962      	ldr	r2, [r4, #20]
 8002904:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002906:	69a2      	ldr	r2, [r4, #24]
 8002908:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800290a:	6821      	ldr	r1, [r4, #0]
 800290c:	4313      	orrs	r3, r2
 800290e:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002910:	69e3      	ldr	r3, [r4, #28]
 8002912:	6a21      	ldr	r1, [r4, #32]
 8002914:	6822      	ldr	r2, [r4, #0]
 8002916:	430b      	orrs	r3, r1
 8002918:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800291a:	6822      	ldr	r2, [r4, #0]
 800291c:	6813      	ldr	r3, [r2, #0]
 800291e:	2101      	movs	r1, #1
 8002920:	430b      	orrs	r3, r1
 8002922:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002924:	2300      	movs	r3, #0
 8002926:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002928:	2241      	movs	r2, #65	@ 0x41
 800292a:	311f      	adds	r1, #31
 800292c:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800292e:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002930:	3201      	adds	r2, #1
 8002932:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002934:	2000      	movs	r0, #0
}
 8002936:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002938:	3340      	adds	r3, #64	@ 0x40
 800293a:	2200      	movs	r2, #0
 800293c:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 800293e:	f7ff f8c1 	bl	8001ac4 <HAL_I2C_MspInit>
 8002942:	e7b0      	b.n	80028a6 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002944:	68a1      	ldr	r1, [r4, #8]
 8002946:	6822      	ldr	r2, [r4, #0]
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	430b      	orrs	r3, r1
 800294e:	6093      	str	r3, [r2, #8]
 8002950:	e7c4      	b.n	80028dc <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002952:	6822      	ldr	r2, [r4, #0]
 8002954:	6851      	ldr	r1, [r2, #4]
 8002956:	2380      	movs	r3, #128	@ 0x80
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	430b      	orrs	r3, r1
 800295c:	6053      	str	r3, [r2, #4]
 800295e:	e7c5      	b.n	80028ec <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8002960:	2001      	movs	r0, #1
 8002962:	e7e8      	b.n	8002936 <HAL_I2C_Init+0x9e>
 8002964:	f0ffffff 	.word	0xf0ffffff
 8002968:	ffff7fff 	.word	0xffff7fff
 800296c:	fffff7ff 	.word	0xfffff7ff
 8002970:	02008000 	.word	0x02008000

08002974 <HAL_I2C_Mem_Write>:
{
 8002974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002976:	b087      	sub	sp, #28
 8002978:	0004      	movs	r4, r0
 800297a:	9103      	str	r1, [sp, #12]
 800297c:	9204      	str	r2, [sp, #16]
 800297e:	9305      	str	r3, [sp, #20]
 8002980:	ab0c      	add	r3, sp, #48	@ 0x30
 8002982:	cb20      	ldmia	r3!, {r5}
 8002984:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002986:	2341      	movs	r3, #65	@ 0x41
 8002988:	5cc3      	ldrb	r3, [r0, r3]
 800298a:	2b20      	cmp	r3, #32
 800298c:	d000      	beq.n	8002990 <HAL_I2C_Mem_Write+0x1c>
 800298e:	e0b3      	b.n	8002af8 <HAL_I2C_Mem_Write+0x184>
    if ((pData == NULL) || (Size == 0U))
 8002990:	2d00      	cmp	r5, #0
 8002992:	d018      	beq.n	80029c6 <HAL_I2C_Mem_Write+0x52>
 8002994:	2f00      	cmp	r7, #0
 8002996:	d016      	beq.n	80029c6 <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8002998:	2340      	movs	r3, #64	@ 0x40
 800299a:	5cc3      	ldrb	r3, [r0, r3]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d100      	bne.n	80029a2 <HAL_I2C_Mem_Write+0x2e>
 80029a0:	e0ad      	b.n	8002afe <HAL_I2C_Mem_Write+0x18a>
 80029a2:	2340      	movs	r3, #64	@ 0x40
 80029a4:	2201      	movs	r2, #1
 80029a6:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80029a8:	f7ff fc4c 	bl	8002244 <HAL_GetTick>
 80029ac:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ae:	2180      	movs	r1, #128	@ 0x80
 80029b0:	9000      	str	r0, [sp, #0]
 80029b2:	2319      	movs	r3, #25
 80029b4:	2201      	movs	r2, #1
 80029b6:	0209      	lsls	r1, r1, #8
 80029b8:	0020      	movs	r0, r4
 80029ba:	f7ff fe84 	bl	80026c6 <I2C_WaitOnFlagUntilTimeout>
 80029be:	2800      	cmp	r0, #0
 80029c0:	d006      	beq.n	80029d0 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 80029c2:	2001      	movs	r0, #1
 80029c4:	e099      	b.n	8002afa <HAL_I2C_Mem_Write+0x186>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80029cc:	2001      	movs	r0, #1
 80029ce:	e094      	b.n	8002afa <HAL_I2C_Mem_Write+0x186>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029d0:	2341      	movs	r3, #65	@ 0x41
 80029d2:	2221      	movs	r2, #33	@ 0x21
 80029d4:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029d6:	3301      	adds	r3, #1
 80029d8:	321f      	adds	r2, #31
 80029da:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029dc:	2300      	movs	r3, #0
 80029de:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80029e0:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029e2:	8567      	strh	r7, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029e4:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029e6:	9601      	str	r6, [sp, #4]
 80029e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	9b05      	ldr	r3, [sp, #20]
 80029ee:	9a04      	ldr	r2, [sp, #16]
 80029f0:	9903      	ldr	r1, [sp, #12]
 80029f2:	0020      	movs	r0, r4
 80029f4:	f7ff feac 	bl	8002750 <I2C_RequestMemoryWrite>
 80029f8:	2800      	cmp	r0, #0
 80029fa:	d10f      	bne.n	8002a1c <HAL_I2C_Mem_Write+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029fc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2bff      	cmp	r3, #255	@ 0xff
 8002a02:	d910      	bls.n	8002a26 <HAL_I2C_Mem_Write+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a04:	23ff      	movs	r3, #255	@ 0xff
 8002a06:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a08:	3b7f      	subs	r3, #127	@ 0x7f
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	9200      	str	r2, [sp, #0]
 8002a0e:	045b      	lsls	r3, r3, #17
 8002a10:	32ff      	adds	r2, #255	@ 0xff
 8002a12:	9903      	ldr	r1, [sp, #12]
 8002a14:	0020      	movs	r0, r4
 8002a16:	f7ff fd83 	bl	8002520 <I2C_TransferConfig>
 8002a1a:	e021      	b.n	8002a60 <HAL_I2C_Mem_Write+0xec>
      __HAL_UNLOCK(hi2c);
 8002a1c:	2340      	movs	r3, #64	@ 0x40
 8002a1e:	2200      	movs	r2, #0
 8002a20:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8002a22:	2001      	movs	r0, #1
 8002a24:	e069      	b.n	8002afa <HAL_I2C_Mem_Write+0x186>
      hi2c->XferSize = hi2c->XferCount;
 8002a26:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002a28:	b292      	uxth	r2, r2
 8002a2a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	2100      	movs	r1, #0
 8002a32:	9100      	str	r1, [sp, #0]
 8002a34:	049b      	lsls	r3, r3, #18
 8002a36:	9903      	ldr	r1, [sp, #12]
 8002a38:	0020      	movs	r0, r4
 8002a3a:	f7ff fd71 	bl	8002520 <I2C_TransferConfig>
 8002a3e:	e00f      	b.n	8002a60 <HAL_I2C_Mem_Write+0xec>
          hi2c->XferSize = hi2c->XferCount;
 8002a40:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002a42:	b292      	uxth	r2, r2
 8002a44:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	9100      	str	r1, [sp, #0]
 8002a4e:	049b      	lsls	r3, r3, #18
 8002a50:	9903      	ldr	r1, [sp, #12]
 8002a52:	0020      	movs	r0, r4
 8002a54:	f7ff fd64 	bl	8002520 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002a58:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d034      	beq.n	8002aca <HAL_I2C_Mem_Write+0x156>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a60:	0032      	movs	r2, r6
 8002a62:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002a64:	0020      	movs	r0, r4
 8002a66:	f7ff fe01 	bl	800266c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d149      	bne.n	8002b02 <HAL_I2C_Mem_Write+0x18e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a6e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002a76:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a78:	3301      	adds	r3, #1
 8002a7a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002a7c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a84:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a8c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	2a00      	cmp	r2, #0
 8002a92:	d0e1      	beq.n	8002a58 <HAL_I2C_Mem_Write+0xe4>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1df      	bne.n	8002a58 <HAL_I2C_Mem_Write+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a98:	9600      	str	r6, [sp, #0]
 8002a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2180      	movs	r1, #128	@ 0x80
 8002aa0:	0020      	movs	r0, r4
 8002aa2:	f7ff fe10 	bl	80026c6 <I2C_WaitOnFlagUntilTimeout>
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d12d      	bne.n	8002b06 <HAL_I2C_Mem_Write+0x192>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aaa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2bff      	cmp	r3, #255	@ 0xff
 8002ab0:	d9c6      	bls.n	8002a40 <HAL_I2C_Mem_Write+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab2:	23ff      	movs	r3, #255	@ 0xff
 8002ab4:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ab6:	3b7f      	subs	r3, #127	@ 0x7f
 8002ab8:	2200      	movs	r2, #0
 8002aba:	9200      	str	r2, [sp, #0]
 8002abc:	045b      	lsls	r3, r3, #17
 8002abe:	32ff      	adds	r2, #255	@ 0xff
 8002ac0:	9903      	ldr	r1, [sp, #12]
 8002ac2:	0020      	movs	r0, r4
 8002ac4:	f7ff fd2c 	bl	8002520 <I2C_TransferConfig>
 8002ac8:	e7c6      	b.n	8002a58 <HAL_I2C_Mem_Write+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aca:	0032      	movs	r2, r6
 8002acc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002ace:	0020      	movs	r0, r4
 8002ad0:	f7ff feb4 	bl	800283c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d118      	bne.n	8002b0a <HAL_I2C_Mem_Write+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	2220      	movs	r2, #32
 8002adc:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002ade:	6821      	ldr	r1, [r4, #0]
 8002ae0:	684b      	ldr	r3, [r1, #4]
 8002ae2:	4d0b      	ldr	r5, [pc, #44]	@ (8002b10 <HAL_I2C_Mem_Write+0x19c>)
 8002ae4:	402b      	ands	r3, r5
 8002ae6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ae8:	2341      	movs	r3, #65	@ 0x41
 8002aea:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	3222      	adds	r2, #34	@ 0x22
 8002af0:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8002af2:	3a02      	subs	r2, #2
 8002af4:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8002af6:	e000      	b.n	8002afa <HAL_I2C_Mem_Write+0x186>
    return HAL_BUSY;
 8002af8:	2002      	movs	r0, #2
}
 8002afa:	b007      	add	sp, #28
 8002afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002afe:	2002      	movs	r0, #2
 8002b00:	e7fb      	b.n	8002afa <HAL_I2C_Mem_Write+0x186>
        return HAL_ERROR;
 8002b02:	2001      	movs	r0, #1
 8002b04:	e7f9      	b.n	8002afa <HAL_I2C_Mem_Write+0x186>
          return HAL_ERROR;
 8002b06:	2001      	movs	r0, #1
 8002b08:	e7f7      	b.n	8002afa <HAL_I2C_Mem_Write+0x186>
      return HAL_ERROR;
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	e7f5      	b.n	8002afa <HAL_I2C_Mem_Write+0x186>
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	fe00e800 	.word	0xfe00e800

08002b14 <HAL_I2C_Mem_Read>:
{
 8002b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b16:	b087      	sub	sp, #28
 8002b18:	0004      	movs	r4, r0
 8002b1a:	9103      	str	r1, [sp, #12]
 8002b1c:	9204      	str	r2, [sp, #16]
 8002b1e:	9305      	str	r3, [sp, #20]
 8002b20:	ab0c      	add	r3, sp, #48	@ 0x30
 8002b22:	cb20      	ldmia	r3!, {r5}
 8002b24:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b26:	2341      	movs	r3, #65	@ 0x41
 8002b28:	5cc3      	ldrb	r3, [r0, r3]
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d000      	beq.n	8002b30 <HAL_I2C_Mem_Read+0x1c>
 8002b2e:	e0b5      	b.n	8002c9c <HAL_I2C_Mem_Read+0x188>
    if ((pData == NULL) || (Size == 0U))
 8002b30:	2d00      	cmp	r5, #0
 8002b32:	d018      	beq.n	8002b66 <HAL_I2C_Mem_Read+0x52>
 8002b34:	2f00      	cmp	r7, #0
 8002b36:	d016      	beq.n	8002b66 <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 8002b38:	2340      	movs	r3, #64	@ 0x40
 8002b3a:	5cc3      	ldrb	r3, [r0, r3]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d100      	bne.n	8002b42 <HAL_I2C_Mem_Read+0x2e>
 8002b40:	e0af      	b.n	8002ca2 <HAL_I2C_Mem_Read+0x18e>
 8002b42:	2340      	movs	r3, #64	@ 0x40
 8002b44:	2201      	movs	r2, #1
 8002b46:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8002b48:	f7ff fb7c 	bl	8002244 <HAL_GetTick>
 8002b4c:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b4e:	2180      	movs	r1, #128	@ 0x80
 8002b50:	9000      	str	r0, [sp, #0]
 8002b52:	2319      	movs	r3, #25
 8002b54:	2201      	movs	r2, #1
 8002b56:	0209      	lsls	r1, r1, #8
 8002b58:	0020      	movs	r0, r4
 8002b5a:	f7ff fdb4 	bl	80026c6 <I2C_WaitOnFlagUntilTimeout>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d006      	beq.n	8002b70 <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 8002b62:	2001      	movs	r0, #1
 8002b64:	e09b      	b.n	8002c9e <HAL_I2C_Mem_Read+0x18a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	e096      	b.n	8002c9e <HAL_I2C_Mem_Read+0x18a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b70:	2341      	movs	r3, #65	@ 0x41
 8002b72:	2222      	movs	r2, #34	@ 0x22
 8002b74:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b76:	3301      	adds	r3, #1
 8002b78:	321e      	adds	r2, #30
 8002b7a:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8002b80:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b82:	8567      	strh	r7, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b84:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b86:	9601      	str	r6, [sp, #4]
 8002b88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	9b05      	ldr	r3, [sp, #20]
 8002b8e:	9a04      	ldr	r2, [sp, #16]
 8002b90:	9903      	ldr	r1, [sp, #12]
 8002b92:	0020      	movs	r0, r4
 8002b94:	f7ff fe18 	bl	80027c8 <I2C_RequestMemoryRead>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d10f      	bne.n	8002bbc <HAL_I2C_Mem_Read+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2bff      	cmp	r3, #255	@ 0xff
 8002ba2:	d910      	bls.n	8002bc6 <HAL_I2C_Mem_Read+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba4:	23ff      	movs	r3, #255	@ 0xff
 8002ba6:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ba8:	3b7f      	subs	r3, #127	@ 0x7f
 8002baa:	4a42      	ldr	r2, [pc, #264]	@ (8002cb4 <HAL_I2C_Mem_Read+0x1a0>)
 8002bac:	9200      	str	r2, [sp, #0]
 8002bae:	045b      	lsls	r3, r3, #17
 8002bb0:	22ff      	movs	r2, #255	@ 0xff
 8002bb2:	9903      	ldr	r1, [sp, #12]
 8002bb4:	0020      	movs	r0, r4
 8002bb6:	f7ff fcb3 	bl	8002520 <I2C_TransferConfig>
 8002bba:	e021      	b.n	8002c00 <HAL_I2C_Mem_Read+0xec>
      __HAL_UNLOCK(hi2c);
 8002bbc:	2340      	movs	r3, #64	@ 0x40
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	e06b      	b.n	8002c9e <HAL_I2C_Mem_Read+0x18a>
      hi2c->XferSize = hi2c->XferCount;
 8002bc6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002bc8:	b292      	uxth	r2, r2
 8002bca:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	4938      	ldr	r1, [pc, #224]	@ (8002cb4 <HAL_I2C_Mem_Read+0x1a0>)
 8002bd2:	9100      	str	r1, [sp, #0]
 8002bd4:	049b      	lsls	r3, r3, #18
 8002bd6:	9903      	ldr	r1, [sp, #12]
 8002bd8:	0020      	movs	r0, r4
 8002bda:	f7ff fca1 	bl	8002520 <I2C_TransferConfig>
 8002bde:	e00f      	b.n	8002c00 <HAL_I2C_Mem_Read+0xec>
          hi2c->XferSize = hi2c->XferCount;
 8002be0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002be2:	b292      	uxth	r2, r2
 8002be4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	2100      	movs	r1, #0
 8002bec:	9100      	str	r1, [sp, #0]
 8002bee:	049b      	lsls	r3, r3, #18
 8002bf0:	9903      	ldr	r1, [sp, #12]
 8002bf2:	0020      	movs	r0, r4
 8002bf4:	f7ff fc94 	bl	8002520 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002bf8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d036      	beq.n	8002c6e <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c00:	9600      	str	r6, [sp, #0]
 8002c02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002c04:	2200      	movs	r2, #0
 8002c06:	2104      	movs	r1, #4
 8002c08:	0020      	movs	r0, r4
 8002c0a:	f7ff fd5c 	bl	80026c6 <I2C_WaitOnFlagUntilTimeout>
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d149      	bne.n	8002ca6 <HAL_I2C_Mem_Read+0x192>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c18:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002c1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002c20:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002c28:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002c2a:	3a01      	subs	r2, #1
 8002c2c:	b292      	uxth	r2, r2
 8002c2e:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c30:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002c32:	b292      	uxth	r2, r2
 8002c34:	2a00      	cmp	r2, #0
 8002c36:	d0df      	beq.n	8002bf8 <HAL_I2C_Mem_Read+0xe4>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1dd      	bne.n	8002bf8 <HAL_I2C_Mem_Read+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c3c:	9600      	str	r6, [sp, #0]
 8002c3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002c40:	2200      	movs	r2, #0
 8002c42:	2180      	movs	r1, #128	@ 0x80
 8002c44:	0020      	movs	r0, r4
 8002c46:	f7ff fd3e 	bl	80026c6 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	2800      	cmp	r0, #0
 8002c4c:	d12d      	bne.n	8002caa <HAL_I2C_Mem_Read+0x196>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c4e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2bff      	cmp	r3, #255	@ 0xff
 8002c54:	d9c4      	bls.n	8002be0 <HAL_I2C_Mem_Read+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c56:	23ff      	movs	r3, #255	@ 0xff
 8002c58:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c5a:	3b7f      	subs	r3, #127	@ 0x7f
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	9200      	str	r2, [sp, #0]
 8002c60:	045b      	lsls	r3, r3, #17
 8002c62:	32ff      	adds	r2, #255	@ 0xff
 8002c64:	9903      	ldr	r1, [sp, #12]
 8002c66:	0020      	movs	r0, r4
 8002c68:	f7ff fc5a 	bl	8002520 <I2C_TransferConfig>
 8002c6c:	e7c4      	b.n	8002bf8 <HAL_I2C_Mem_Read+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6e:	0032      	movs	r2, r6
 8002c70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002c72:	0020      	movs	r0, r4
 8002c74:	f7ff fde2 	bl	800283c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d118      	bne.n	8002cae <HAL_I2C_Mem_Read+0x19a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002c82:	6821      	ldr	r1, [r4, #0]
 8002c84:	684b      	ldr	r3, [r1, #4]
 8002c86:	4d0c      	ldr	r5, [pc, #48]	@ (8002cb8 <HAL_I2C_Mem_Read+0x1a4>)
 8002c88:	402b      	ands	r3, r5
 8002c8a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c8c:	2341      	movs	r3, #65	@ 0x41
 8002c8e:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	3222      	adds	r2, #34	@ 0x22
 8002c94:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8002c96:	3a02      	subs	r2, #2
 8002c98:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8002c9a:	e000      	b.n	8002c9e <HAL_I2C_Mem_Read+0x18a>
    return HAL_BUSY;
 8002c9c:	2002      	movs	r0, #2
}
 8002c9e:	b007      	add	sp, #28
 8002ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002ca2:	2002      	movs	r0, #2
 8002ca4:	e7fb      	b.n	8002c9e <HAL_I2C_Mem_Read+0x18a>
        return HAL_ERROR;
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	e7f9      	b.n	8002c9e <HAL_I2C_Mem_Read+0x18a>
          return HAL_ERROR;
 8002caa:	2001      	movs	r0, #1
 8002cac:	e7f7      	b.n	8002c9e <HAL_I2C_Mem_Read+0x18a>
      return HAL_ERROR;
 8002cae:	2001      	movs	r0, #1
 8002cb0:	e7f5      	b.n	8002c9e <HAL_I2C_Mem_Read+0x18a>
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	80002400 	.word	0x80002400
 8002cb8:	fe00e800 	.word	0xfe00e800

08002cbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbe:	2341      	movs	r3, #65	@ 0x41
 8002cc0:	5cc3      	ldrb	r3, [r0, r3]
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d120      	bne.n	8002d08 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc6:	3320      	adds	r3, #32
 8002cc8:	5cc3      	ldrb	r3, [r0, r3]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d01e      	beq.n	8002d0c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002cce:	2440      	movs	r4, #64	@ 0x40
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd4:	2541      	movs	r5, #65	@ 0x41
 8002cd6:	2324      	movs	r3, #36	@ 0x24
 8002cd8:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cda:	6806      	ldr	r6, [r0, #0]
 8002cdc:	6833      	ldr	r3, [r6, #0]
 8002cde:	4393      	bics	r3, r2
 8002ce0:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ce2:	6806      	ldr	r6, [r0, #0]
 8002ce4:	6833      	ldr	r3, [r6, #0]
 8002ce6:	4f0a      	ldr	r7, [pc, #40]	@ (8002d10 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8002ce8:	403b      	ands	r3, r7
 8002cea:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cec:	6806      	ldr	r6, [r0, #0]
 8002cee:	6833      	ldr	r3, [r6, #0]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cf4:	6801      	ldr	r1, [r0, #0]
 8002cf6:	680b      	ldr	r3, [r1, #0]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d00:	2300      	movs	r3, #0
 8002d02:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8002d04:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002d08:	2002      	movs	r0, #2
 8002d0a:	e7fc      	b.n	8002d06 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	e7fa      	b.n	8002d06 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8002d10:	ffffefff 	.word	0xffffefff

08002d14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d14:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d16:	2341      	movs	r3, #65	@ 0x41
 8002d18:	5cc3      	ldrb	r3, [r0, r3]
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d11e      	bne.n	8002d5c <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d1e:	3320      	adds	r3, #32
 8002d20:	5cc3      	ldrb	r3, [r0, r3]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d01c      	beq.n	8002d60 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8002d26:	2440      	movs	r4, #64	@ 0x40
 8002d28:	2201      	movs	r2, #1
 8002d2a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2c:	2541      	movs	r5, #65	@ 0x41
 8002d2e:	2324      	movs	r3, #36	@ 0x24
 8002d30:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d32:	6806      	ldr	r6, [r0, #0]
 8002d34:	6833      	ldr	r3, [r6, #0]
 8002d36:	4393      	bics	r3, r2
 8002d38:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d3a:	6806      	ldr	r6, [r0, #0]
 8002d3c:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d3e:	4f09      	ldr	r7, [pc, #36]	@ (8002d64 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8002d40:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d42:	0209      	lsls	r1, r1, #8
 8002d44:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d46:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d48:	6801      	ldr	r1, [r0, #0]
 8002d4a:	680b      	ldr	r3, [r1, #0]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d50:	2320      	movs	r3, #32
 8002d52:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d54:	2300      	movs	r3, #0
 8002d56:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8002d58:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002d5c:	2002      	movs	r0, #2
 8002d5e:	e7fc      	b.n	8002d5a <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8002d60:	2002      	movs	r0, #2
 8002d62:	e7fa      	b.n	8002d5a <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8002d64:	fffff0ff 	.word	0xfffff0ff

08002d68 <HAL_PWR_EnableWakeUpPin>:
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR4_WP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8002d68:	4905      	ldr	r1, [pc, #20]	@ (8002d80 <HAL_PWR_EnableWakeUpPin+0x18>)
 8002d6a:	68ca      	ldr	r2, [r1, #12]
 8002d6c:	232f      	movs	r3, #47	@ 0x2f
 8002d6e:	4003      	ands	r3, r0
 8002d70:	439a      	bics	r2, r3
 8002d72:	0a00      	lsrs	r0, r0, #8
 8002d74:	4302      	orrs	r2, r0
 8002d76:	60ca      	str	r2, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8002d78:	688a      	ldr	r2, [r1, #8]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
}
 8002d7e:	4770      	bx	lr
 8002d80:	40007000 	.word	0x40007000

08002d84 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8002d84:	4a06      	ldr	r2, [pc, #24]	@ (8002da0 <HAL_PWREx_EnterSHUTDOWNMode+0x1c>)
 8002d86:	6813      	ldr	r3, [r2, #0]
 8002d88:	2107      	movs	r1, #7
 8002d8a:	438b      	bics	r3, r1
 8002d8c:	3903      	subs	r1, #3
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d92:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <HAL_PWREx_EnterSHUTDOWNMode+0x20>)
 8002d94:	6913      	ldr	r3, [r2, #16]
 8002d96:	430b      	orrs	r3, r1
 8002d98:	6113      	str	r3, [r2, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8002d9a:	bf30      	wfi
}
 8002d9c:	4770      	bx	lr
 8002d9e:	46c0      	nop			@ (mov r8, r8)
 8002da0:	40007000 	.word	0x40007000
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dac:	d100      	bne.n	8002db0 <HAL_RCC_OscConfig+0x8>
 8002dae:	e139      	b.n	8003024 <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db0:	6803      	ldr	r3, [r0, #0]
 8002db2:	07db      	lsls	r3, r3, #31
 8002db4:	d52c      	bpl.n	8002e10 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db6:	4ba1      	ldr	r3, [pc, #644]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	2338      	movs	r3, #56	@ 0x38
 8002dbc:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d022      	beq.n	8002e08 <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc2:	6843      	ldr	r3, [r0, #4]
 8002dc4:	2280      	movs	r2, #128	@ 0x80
 8002dc6:	0252      	lsls	r2, r2, #9
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d02e      	beq.n	8002e2a <HAL_RCC_OscConfig+0x82>
 8002dcc:	22a0      	movs	r2, #160	@ 0xa0
 8002dce:	02d2      	lsls	r2, r2, #11
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d031      	beq.n	8002e38 <HAL_RCC_OscConfig+0x90>
 8002dd4:	4b99      	ldr	r3, [pc, #612]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4999      	ldr	r1, [pc, #612]	@ (8003040 <HAL_RCC_OscConfig+0x298>)
 8002dda:	400a      	ands	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4998      	ldr	r1, [pc, #608]	@ (8003044 <HAL_RCC_OscConfig+0x29c>)
 8002de2:	400a      	ands	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de6:	6863      	ldr	r3, [r4, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d031      	beq.n	8002e50 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7ff fa2a 	bl	8002244 <HAL_GetTick>
 8002df0:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df2:	4b92      	ldr	r3, [pc, #584]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	039b      	lsls	r3, r3, #14
 8002df8:	d40a      	bmi.n	8002e10 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002dfa:	f7ff fa23 	bl	8002244 <HAL_GetTick>
 8002dfe:	1b40      	subs	r0, r0, r5
 8002e00:	2864      	cmp	r0, #100	@ 0x64
 8002e02:	d9f6      	bls.n	8002df2 <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 8002e04:	2003      	movs	r0, #3
 8002e06:	e10e      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002e08:	6843      	ldr	r3, [r0, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d100      	bne.n	8002e10 <HAL_RCC_OscConfig+0x68>
 8002e0e:	e10b      	b.n	8003028 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	079b      	lsls	r3, r3, #30
 8002e14:	d547      	bpl.n	8002ea6 <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e16:	4b89      	ldr	r3, [pc, #548]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002e1c:	421a      	tst	r2, r3
 8002e1e:	d161      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e20:	68e3      	ldr	r3, [r4, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d122      	bne.n	8002e6c <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 8002e26:	2001      	movs	r0, #1
 8002e28:	e0fd      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2a:	4a84      	ldr	r2, [pc, #528]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002e2c:	6811      	ldr	r1, [r2, #0]
 8002e2e:	2380      	movs	r3, #128	@ 0x80
 8002e30:	025b      	lsls	r3, r3, #9
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e7d6      	b.n	8002de6 <HAL_RCC_OscConfig+0x3e>
 8002e38:	4b80      	ldr	r3, [pc, #512]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002e3a:	6819      	ldr	r1, [r3, #0]
 8002e3c:	2280      	movs	r2, #128	@ 0x80
 8002e3e:	02d2      	lsls	r2, r2, #11
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	2280      	movs	r2, #128	@ 0x80
 8002e48:	0252      	lsls	r2, r2, #9
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	e7ca      	b.n	8002de6 <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 8002e50:	f7ff f9f8 	bl	8002244 <HAL_GetTick>
 8002e54:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e56:	4b79      	ldr	r3, [pc, #484]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	039b      	lsls	r3, r3, #14
 8002e5c:	d5d8      	bpl.n	8002e10 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002e5e:	f7ff f9f1 	bl	8002244 <HAL_GetTick>
 8002e62:	1b40      	subs	r0, r0, r5
 8002e64:	2864      	cmp	r0, #100	@ 0x64
 8002e66:	d9f6      	bls.n	8002e56 <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 8002e68:	2003      	movs	r0, #3
 8002e6a:	e0dc      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6c:	4b73      	ldr	r3, [pc, #460]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	4975      	ldr	r1, [pc, #468]	@ (8003048 <HAL_RCC_OscConfig+0x2a0>)
 8002e72:	400a      	ands	r2, r1
 8002e74:	6961      	ldr	r1, [r4, #20]
 8002e76:	0209      	lsls	r1, r1, #8
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4973      	ldr	r1, [pc, #460]	@ (800304c <HAL_RCC_OscConfig+0x2a4>)
 8002e80:	400a      	ands	r2, r1
 8002e82:	6921      	ldr	r1, [r4, #16]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	0adb      	lsrs	r3, r3, #11
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	401a      	ands	r2, r3
 8002e90:	4b6f      	ldr	r3, [pc, #444]	@ (8003050 <HAL_RCC_OscConfig+0x2a8>)
 8002e92:	40d3      	lsrs	r3, r2
 8002e94:	4a6f      	ldr	r2, [pc, #444]	@ (8003054 <HAL_RCC_OscConfig+0x2ac>)
 8002e96:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e98:	4b6f      	ldr	r3, [pc, #444]	@ (8003058 <HAL_RCC_OscConfig+0x2b0>)
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	f7ff f98e 	bl	80021bc <HAL_InitTick>
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d000      	beq.n	8002ea6 <HAL_RCC_OscConfig+0xfe>
 8002ea4:	e0c2      	b.n	800302c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	071b      	lsls	r3, r3, #28
 8002eaa:	d557      	bpl.n	8002f5c <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002eac:	4b63      	ldr	r3, [pc, #396]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	2338      	movs	r3, #56	@ 0x38
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b18      	cmp	r3, #24
 8002eb6:	d04e      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eb8:	69a3      	ldr	r3, [r4, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d077      	beq.n	8002fae <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ebe:	4a5f      	ldr	r2, [pc, #380]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002ec0:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7ff f9bc 	bl	8002244 <HAL_GetTick>
 8002ecc:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002ece:	4b5b      	ldr	r3, [pc, #364]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed2:	079b      	lsls	r3, r3, #30
 8002ed4:	d442      	bmi.n	8002f5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002ed6:	f7ff f9b5 	bl	8002244 <HAL_GetTick>
 8002eda:	1b40      	subs	r0, r0, r5
 8002edc:	2802      	cmp	r0, #2
 8002ede:	d9f6      	bls.n	8002ece <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002ee0:	2003      	movs	r0, #3
 8002ee2:	e0a0      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee4:	68e3      	ldr	r3, [r4, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d022      	beq.n	8002f30 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002eea:	4a54      	ldr	r2, [pc, #336]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002eec:	6813      	ldr	r3, [r2, #0]
 8002eee:	4957      	ldr	r1, [pc, #348]	@ (800304c <HAL_RCC_OscConfig+0x2a4>)
 8002ef0:	400b      	ands	r3, r1
 8002ef2:	6921      	ldr	r1, [r4, #16]
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8002ef8:	6811      	ldr	r1, [r2, #0]
 8002efa:	2380      	movs	r3, #128	@ 0x80
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	430b      	orrs	r3, r1
 8002f00:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f02:	f7ff f99f 	bl	8002244 <HAL_GetTick>
 8002f06:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f08:	4b4c      	ldr	r3, [pc, #304]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	055b      	lsls	r3, r3, #21
 8002f0e:	d406      	bmi.n	8002f1e <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002f10:	f7ff f998 	bl	8002244 <HAL_GetTick>
 8002f14:	1b40      	subs	r0, r0, r5
 8002f16:	2802      	cmp	r0, #2
 8002f18:	d9f6      	bls.n	8002f08 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8002f1a:	2003      	movs	r0, #3
 8002f1c:	e083      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4947      	ldr	r1, [pc, #284]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002f20:	684b      	ldr	r3, [r1, #4]
 8002f22:	4a49      	ldr	r2, [pc, #292]	@ (8003048 <HAL_RCC_OscConfig+0x2a0>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	6962      	ldr	r2, [r4, #20]
 8002f28:	0212      	lsls	r2, r2, #8
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
 8002f2e:	e7ba      	b.n	8002ea6 <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 8002f30:	4a42      	ldr	r2, [pc, #264]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	4949      	ldr	r1, [pc, #292]	@ (800305c <HAL_RCC_OscConfig+0x2b4>)
 8002f36:	400b      	ands	r3, r1
 8002f38:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f3a:	f7ff f983 	bl	8002244 <HAL_GetTick>
 8002f3e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f40:	4b3e      	ldr	r3, [pc, #248]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	055b      	lsls	r3, r3, #21
 8002f46:	d5ae      	bpl.n	8002ea6 <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002f48:	f7ff f97c 	bl	8002244 <HAL_GetTick>
 8002f4c:	1b40      	subs	r0, r0, r5
 8002f4e:	2802      	cmp	r0, #2
 8002f50:	d9f6      	bls.n	8002f40 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8002f52:	2003      	movs	r0, #3
 8002f54:	e067      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002f56:	69a3      	ldr	r3, [r4, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d069      	beq.n	8003030 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	075b      	lsls	r3, r3, #29
 8002f60:	d568      	bpl.n	8003034 <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002f62:	4b36      	ldr	r3, [pc, #216]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	2338      	movs	r3, #56	@ 0x38
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d032      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6e:	68a3      	ldr	r3, [r4, #8]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d034      	beq.n	8002fde <HAL_RCC_OscConfig+0x236>
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	d038      	beq.n	8002fea <HAL_RCC_OscConfig+0x242>
 8002f78:	4b30      	ldr	r3, [pc, #192]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002f7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	438a      	bics	r2, r1
 8002f80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f84:	3103      	adds	r1, #3
 8002f86:	438a      	bics	r2, r1
 8002f88:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8a:	68a3      	ldr	r3, [r4, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d038      	beq.n	8003002 <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7ff f958 	bl	8002244 <HAL_GetTick>
 8002f94:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f96:	4b29      	ldr	r3, [pc, #164]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9a:	079b      	lsls	r3, r3, #30
 8002f9c:	d42f      	bmi.n	8002ffe <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7ff f951 	bl	8002244 <HAL_GetTick>
 8002fa2:	1b00      	subs	r0, r0, r4
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8003060 <HAL_RCC_OscConfig+0x2b8>)
 8002fa6:	4298      	cmp	r0, r3
 8002fa8:	d9f5      	bls.n	8002f96 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002faa:	2003      	movs	r0, #3
 8002fac:	e03b      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 8002fae:	4a23      	ldr	r2, [pc, #140]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002fb0:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	438b      	bics	r3, r1
 8002fb6:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002fb8:	f7ff f944 	bl	8002244 <HAL_GetTick>
 8002fbc:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc2:	079b      	lsls	r3, r3, #30
 8002fc4:	d5ca      	bpl.n	8002f5c <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002fc6:	f7ff f93d 	bl	8002244 <HAL_GetTick>
 8002fca:	1b40      	subs	r0, r0, r5
 8002fcc:	2802      	cmp	r0, #2
 8002fce:	d9f6      	bls.n	8002fbe <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8002fd0:	2003      	movs	r0, #3
 8002fd2:	e028      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002fd4:	68a3      	ldr	r3, [r4, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d02e      	beq.n	8003038 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002fda:	2000      	movs	r0, #0
 8002fdc:	e023      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fde:	4a17      	ldr	r2, [pc, #92]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002fe0:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002fe8:	e7cf      	b.n	8002f8a <HAL_RCC_OscConfig+0x1e2>
 8002fea:	4b14      	ldr	r3, [pc, #80]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 8002fec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fee:	2104      	movs	r1, #4
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ff4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ff6:	3903      	subs	r1, #3
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ffc:	e7c5      	b.n	8002f8a <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 8002ffe:	2000      	movs	r0, #0
 8003000:	e011      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8003002:	f7ff f91f 	bl	8002244 <HAL_GetTick>
 8003006:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003008:	4b0c      	ldr	r3, [pc, #48]	@ (800303c <HAL_RCC_OscConfig+0x294>)
 800300a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300c:	079b      	lsls	r3, r3, #30
 800300e:	d507      	bpl.n	8003020 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7ff f918 	bl	8002244 <HAL_GetTick>
 8003014:	1b00      	subs	r0, r0, r4
 8003016:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_RCC_OscConfig+0x2b8>)
 8003018:	4298      	cmp	r0, r3
 800301a:	d9f5      	bls.n	8003008 <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 800301c:	2003      	movs	r0, #3
 800301e:	e002      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8003020:	2000      	movs	r0, #0
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 8003024:	2001      	movs	r0, #1
}
 8003026:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003028:	2001      	movs	r0, #1
 800302a:	e7fc      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 800302c:	2001      	movs	r0, #1
 800302e:	e7fa      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8003030:	2001      	movs	r0, #1
 8003032:	e7f8      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8003034:	2000      	movs	r0, #0
 8003036:	e7f6      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8003038:	2001      	movs	r0, #1
 800303a:	e7f4      	b.n	8003026 <HAL_RCC_OscConfig+0x27e>
 800303c:	40021000 	.word	0x40021000
 8003040:	fffeffff 	.word	0xfffeffff
 8003044:	fffbffff 	.word	0xfffbffff
 8003048:	ffff80ff 	.word	0xffff80ff
 800304c:	ffffc7ff 	.word	0xffffc7ff
 8003050:	02dc6c00 	.word	0x02dc6c00
 8003054:	20000020 	.word	0x20000020
 8003058:	20000028 	.word	0x20000028
 800305c:	fffffeff 	.word	0xfffffeff
 8003060:	00001388 	.word	0x00001388

08003064 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003064:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x54>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2238      	movs	r2, #56	@ 0x38
 800306a:	421a      	tst	r2, r3
 800306c:	d107      	bne.n	800307e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800306e:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x54>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	0ad2      	lsrs	r2, r2, #11
 8003074:	2307      	movs	r3, #7
 8003076:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003078:	4810      	ldr	r0, [pc, #64]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x58>)
 800307a:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 800307c:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800307e:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x54>)
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	2338      	movs	r3, #56	@ 0x38
 8003084:	4013      	ands	r3, r2
 8003086:	2b08      	cmp	r3, #8
 8003088:	d010      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800308a:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x54>)
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	2338      	movs	r3, #56	@ 0x38
 8003090:	4013      	ands	r3, r2
 8003092:	2b20      	cmp	r3, #32
 8003094:	d00c      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003096:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x54>)
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	2338      	movs	r3, #56	@ 0x38
 800309c:	4013      	ands	r3, r2
 800309e:	2b18      	cmp	r3, #24
 80030a0:	d001      	beq.n	80030a6 <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 80030a2:	2000      	movs	r0, #0
  return sysclockfreq;
 80030a4:	e7ea      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 80030a6:	20fa      	movs	r0, #250	@ 0xfa
 80030a8:	01c0      	lsls	r0, r0, #7
 80030aa:	e7e7      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 80030ac:	4804      	ldr	r0, [pc, #16]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80030ae:	e7e5      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 80030b0:	2080      	movs	r0, #128	@ 0x80
 80030b2:	0200      	lsls	r0, r0, #8
 80030b4:	e7e2      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x18>
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	40021000 	.word	0x40021000
 80030bc:	02dc6c00 	.word	0x02dc6c00
 80030c0:	007a1200 	.word	0x007a1200

080030c4 <HAL_RCC_ClockConfig>:
{
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	0004      	movs	r4, r0
 80030c8:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d100      	bne.n	80030d0 <HAL_RCC_ClockConfig+0xc>
 80030ce:	e0a4      	b.n	800321a <HAL_RCC_ClockConfig+0x156>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d0:	4b54      	ldr	r3, [pc, #336]	@ (8003224 <HAL_RCC_ClockConfig+0x160>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2307      	movs	r3, #7
 80030d6:	4013      	ands	r3, r2
 80030d8:	428b      	cmp	r3, r1
 80030da:	d321      	bcc.n	8003120 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	079a      	lsls	r2, r3, #30
 80030e0:	d510      	bpl.n	8003104 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e2:	075b      	lsls	r3, r3, #29
 80030e4:	d507      	bpl.n	80030f6 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030e6:	4950      	ldr	r1, [pc, #320]	@ (8003228 <HAL_RCC_ClockConfig+0x164>)
 80030e8:	688a      	ldr	r2, [r1, #8]
 80030ea:	4b50      	ldr	r3, [pc, #320]	@ (800322c <HAL_RCC_ClockConfig+0x168>)
 80030ec:	401a      	ands	r2, r3
 80030ee:	23b0      	movs	r3, #176	@ 0xb0
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003228 <HAL_RCC_ClockConfig+0x164>)
 80030f8:	6893      	ldr	r3, [r2, #8]
 80030fa:	494d      	ldr	r1, [pc, #308]	@ (8003230 <HAL_RCC_ClockConfig+0x16c>)
 80030fc:	400b      	ands	r3, r1
 80030fe:	68e1      	ldr	r1, [r4, #12]
 8003100:	430b      	orrs	r3, r1
 8003102:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	07db      	lsls	r3, r3, #31
 8003108:	d54c      	bpl.n	80031a4 <HAL_RCC_ClockConfig+0xe0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	6863      	ldr	r3, [r4, #4]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d01e      	beq.n	800314e <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003110:	2b00      	cmp	r3, #0
 8003112:	d139      	bne.n	8003188 <HAL_RCC_ClockConfig+0xc4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003114:	4a44      	ldr	r2, [pc, #272]	@ (8003228 <HAL_RCC_ClockConfig+0x164>)
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	0552      	lsls	r2, r2, #21
 800311a:	d41c      	bmi.n	8003156 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800311c:	2001      	movs	r0, #1
 800311e:	e064      	b.n	80031ea <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003120:	4a40      	ldr	r2, [pc, #256]	@ (8003224 <HAL_RCC_ClockConfig+0x160>)
 8003122:	6813      	ldr	r3, [r2, #0]
 8003124:	2107      	movs	r1, #7
 8003126:	438b      	bics	r3, r1
 8003128:	432b      	orrs	r3, r5
 800312a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800312c:	f7ff f88a 	bl	8002244 <HAL_GetTick>
 8003130:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003132:	4b3c      	ldr	r3, [pc, #240]	@ (8003224 <HAL_RCC_ClockConfig+0x160>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	2307      	movs	r3, #7
 8003138:	4013      	ands	r3, r2
 800313a:	42ab      	cmp	r3, r5
 800313c:	d0ce      	beq.n	80030dc <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800313e:	f7ff f881 	bl	8002244 <HAL_GetTick>
 8003142:	1b80      	subs	r0, r0, r6
 8003144:	4a3b      	ldr	r2, [pc, #236]	@ (8003234 <HAL_RCC_ClockConfig+0x170>)
 8003146:	4290      	cmp	r0, r2
 8003148:	d9f3      	bls.n	8003132 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800314a:	2003      	movs	r0, #3
 800314c:	e04d      	b.n	80031ea <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314e:	4a36      	ldr	r2, [pc, #216]	@ (8003228 <HAL_RCC_ClockConfig+0x164>)
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	0392      	lsls	r2, r2, #14
 8003154:	d563      	bpl.n	800321e <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003156:	4934      	ldr	r1, [pc, #208]	@ (8003228 <HAL_RCC_ClockConfig+0x164>)
 8003158:	688a      	ldr	r2, [r1, #8]
 800315a:	2007      	movs	r0, #7
 800315c:	4382      	bics	r2, r0
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003162:	f7ff f86f 	bl	8002244 <HAL_GetTick>
 8003166:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003168:	4b2f      	ldr	r3, [pc, #188]	@ (8003228 <HAL_RCC_ClockConfig+0x164>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2238      	movs	r2, #56	@ 0x38
 800316e:	401a      	ands	r2, r3
 8003170:	6863      	ldr	r3, [r4, #4]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	429a      	cmp	r2, r3
 8003176:	d015      	beq.n	80031a4 <HAL_RCC_ClockConfig+0xe0>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003178:	f7ff f864 	bl	8002244 <HAL_GetTick>
 800317c:	1b80      	subs	r0, r0, r6
 800317e:	4b2d      	ldr	r3, [pc, #180]	@ (8003234 <HAL_RCC_ClockConfig+0x170>)
 8003180:	4298      	cmp	r0, r3
 8003182:	d9f1      	bls.n	8003168 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8003184:	2003      	movs	r0, #3
 8003186:	e030      	b.n	80031ea <HAL_RCC_ClockConfig+0x126>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003188:	2b03      	cmp	r3, #3
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0xd4>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800318c:	4a26      	ldr	r2, [pc, #152]	@ (8003228 <HAL_RCC_ClockConfig+0x164>)
 800318e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003190:	0792      	lsls	r2, r2, #30
 8003192:	d4e0      	bmi.n	8003156 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8003194:	2001      	movs	r0, #1
 8003196:	e028      	b.n	80031ea <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003198:	4a23      	ldr	r2, [pc, #140]	@ (8003228 <HAL_RCC_ClockConfig+0x164>)
 800319a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800319c:	0792      	lsls	r2, r2, #30
 800319e:	d4da      	bmi.n	8003156 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80031a0:	2001      	movs	r0, #1
 80031a2:	e022      	b.n	80031ea <HAL_RCC_ClockConfig+0x126>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003224 <HAL_RCC_ClockConfig+0x160>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	2307      	movs	r3, #7
 80031aa:	4013      	ands	r3, r2
 80031ac:	42ab      	cmp	r3, r5
 80031ae:	d81d      	bhi.n	80031ec <HAL_RCC_ClockConfig+0x128>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	075b      	lsls	r3, r3, #29
 80031b4:	d506      	bpl.n	80031c4 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003228 <HAL_RCC_ClockConfig+0x164>)
 80031b8:	6893      	ldr	r3, [r2, #8]
 80031ba:	491f      	ldr	r1, [pc, #124]	@ (8003238 <HAL_RCC_ClockConfig+0x174>)
 80031bc:	400b      	ands	r3, r1
 80031be:	6921      	ldr	r1, [r4, #16]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80031c4:	f7ff ff4e 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 80031c8:	4b17      	ldr	r3, [pc, #92]	@ (8003228 <HAL_RCC_ClockConfig+0x164>)
 80031ca:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031cc:	0a12      	lsrs	r2, r2, #8
 80031ce:	230f      	movs	r3, #15
 80031d0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80031d2:	4a1a      	ldr	r2, [pc, #104]	@ (800323c <HAL_RCC_ClockConfig+0x178>)
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031d8:	231f      	movs	r3, #31
 80031da:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80031dc:	40d8      	lsrs	r0, r3
 80031de:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <HAL_RCC_ClockConfig+0x17c>)
 80031e0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80031e2:	4b18      	ldr	r3, [pc, #96]	@ (8003244 <HAL_RCC_ClockConfig+0x180>)
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	f7fe ffe9 	bl	80021bc <HAL_InitTick>
}
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003224 <HAL_RCC_ClockConfig+0x160>)
 80031ee:	6813      	ldr	r3, [r2, #0]
 80031f0:	2107      	movs	r1, #7
 80031f2:	438b      	bics	r3, r1
 80031f4:	432b      	orrs	r3, r5
 80031f6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80031f8:	f7ff f824 	bl	8002244 <HAL_GetTick>
 80031fc:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031fe:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <HAL_RCC_ClockConfig+0x160>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	2307      	movs	r3, #7
 8003204:	4013      	ands	r3, r2
 8003206:	42ab      	cmp	r3, r5
 8003208:	d0d2      	beq.n	80031b0 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800320a:	f7ff f81b 	bl	8002244 <HAL_GetTick>
 800320e:	1b80      	subs	r0, r0, r6
 8003210:	4b08      	ldr	r3, [pc, #32]	@ (8003234 <HAL_RCC_ClockConfig+0x170>)
 8003212:	4298      	cmp	r0, r3
 8003214:	d9f3      	bls.n	80031fe <HAL_RCC_ClockConfig+0x13a>
        return HAL_TIMEOUT;
 8003216:	2003      	movs	r0, #3
 8003218:	e7e7      	b.n	80031ea <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800321a:	2001      	movs	r0, #1
 800321c:	e7e5      	b.n	80031ea <HAL_RCC_ClockConfig+0x126>
        return HAL_ERROR;
 800321e:	2001      	movs	r0, #1
 8003220:	e7e3      	b.n	80031ea <HAL_RCC_ClockConfig+0x126>
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	40022000 	.word	0x40022000
 8003228:	40021000 	.word	0x40021000
 800322c:	ffff84ff 	.word	0xffff84ff
 8003230:	fffff0ff 	.word	0xfffff0ff
 8003234:	00001388 	.word	0x00001388
 8003238:	ffff8fff 	.word	0xffff8fff
 800323c:	080047d8 	.word	0x080047d8
 8003240:	20000020 	.word	0x20000020
 8003244:	20000028 	.word	0x20000028

08003248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003248:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800324a:	f7ff ff0b 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 800324e:	4b07      	ldr	r3, [pc, #28]	@ (800326c <HAL_RCC_GetHCLKFreq+0x24>)
 8003250:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003252:	0a12      	lsrs	r2, r2, #8
 8003254:	230f      	movs	r3, #15
 8003256:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003258:	4a05      	ldr	r2, [pc, #20]	@ (8003270 <HAL_RCC_GetHCLKFreq+0x28>)
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800325e:	231f      	movs	r3, #31
 8003260:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003262:	40d8      	lsrs	r0, r3
 8003264:	4b03      	ldr	r3, [pc, #12]	@ (8003274 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003266:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8003268:	bd10      	pop	{r4, pc}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	40021000 	.word	0x40021000
 8003270:	080047d8 	.word	0x080047d8
 8003274:	20000020 	.word	0x20000020

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800327a:	f7ff ffe5 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 800327e:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	0b12      	lsrs	r2, r2, #12
 8003284:	2307      	movs	r3, #7
 8003286:	4013      	ands	r3, r2
 8003288:	4a04      	ldr	r2, [pc, #16]	@ (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	589a      	ldr	r2, [r3, r2]
 800328e:	231f      	movs	r3, #31
 8003290:	4013      	ands	r3, r2
 8003292:	40d8      	lsrs	r0, r3
}
 8003294:	bd10      	pop	{r4, pc}
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	40021000 	.word	0x40021000
 800329c:	080047b8 	.word	0x080047b8

080032a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032a6:	6803      	ldr	r3, [r0, #0]
 80032a8:	065b      	lsls	r3, r3, #25
 80032aa:	d550      	bpl.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ac:	4b42      	ldr	r3, [pc, #264]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	d435      	bmi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b4:	4b40      	ldr	r3, [pc, #256]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80032b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032b8:	2180      	movs	r1, #128	@ 0x80
 80032ba:	0549      	lsls	r1, r1, #21
 80032bc:	430a      	orrs	r2, r1
 80032be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c2:	400b      	ands	r3, r1
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80032c8:	2501      	movs	r5, #1
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80032ca:	4b3b      	ldr	r3, [pc, #236]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80032cc:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80032ce:	22c0      	movs	r2, #192	@ 0xc0
 80032d0:	0092      	lsls	r2, r2, #2
 80032d2:	000b      	movs	r3, r1
 80032d4:	4013      	ands	r3, r2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032d6:	4211      	tst	r1, r2
 80032d8:	d035      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80032da:	69a2      	ldr	r2, [r4, #24]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d00d      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80032e0:	4a35      	ldr	r2, [pc, #212]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80032e2:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80032e4:	4935      	ldr	r1, [pc, #212]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80032e6:	400b      	ands	r3, r1
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e8:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 80032ea:	2180      	movs	r1, #128	@ 0x80
 80032ec:	0249      	lsls	r1, r1, #9
 80032ee:	4301      	orrs	r1, r0
 80032f0:	65d1      	str	r1, [r2, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032f2:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 80032f4:	4832      	ldr	r0, [pc, #200]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80032f6:	4001      	ands	r1, r0
 80032f8:	65d1      	str	r1, [r2, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80032fa:	65d3      	str	r3, [r2, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80032fc:	07db      	lsls	r3, r3, #31
 80032fe:	d411      	bmi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003300:	4a2d      	ldr	r2, [pc, #180]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003302:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8003304:	492d      	ldr	r1, [pc, #180]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8003306:	400b      	ands	r3, r1
 8003308:	69a1      	ldr	r1, [r4, #24]
 800330a:	430b      	orrs	r3, r1
 800330c:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800330e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003310:	2d01      	cmp	r5, #1
 8003312:	d11d      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003314:	4a28      	ldr	r2, [pc, #160]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003316:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8003318:	492a      	ldr	r1, [pc, #168]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800331a:	400b      	ands	r3, r1
 800331c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800331e:	e017      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    FlagStatus       pwrclkchanged = RESET;
 8003320:	2500      	movs	r5, #0
 8003322:	e7d2      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
      tickstart = HAL_GetTick();
 8003324:	f7fe ff8e 	bl	8002244 <HAL_GetTick>
 8003328:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800332a:	4b23      	ldr	r3, [pc, #140]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800332c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332e:	079b      	lsls	r3, r3, #30
 8003330:	d407      	bmi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003332:	f7fe ff87 	bl	8002244 <HAL_GetTick>
 8003336:	1b80      	subs	r0, r0, r6
 8003338:	4b23      	ldr	r3, [pc, #140]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800333a:	4298      	cmp	r0, r3
 800333c:	d9f5      	bls.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x8a>
          ret = HAL_TIMEOUT;
 800333e:	2003      	movs	r0, #3
 8003340:	e002      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003342:	2000      	movs	r0, #0
 8003344:	e000      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8003346:	2000      	movs	r0, #0
    if (ret == HAL_OK)
 8003348:	2800      	cmp	r0, #0
 800334a:	d1e1      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800334c:	e7d8      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800334e:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	07db      	lsls	r3, r3, #31
 8003354:	d506      	bpl.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003356:	4a18      	ldr	r2, [pc, #96]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003358:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800335a:	2103      	movs	r1, #3
 800335c:	438b      	bics	r3, r1
 800335e:	68a1      	ldr	r1, [r4, #8]
 8003360:	430b      	orrs	r3, r1
 8003362:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	079b      	lsls	r3, r3, #30
 8003368:	d506      	bpl.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800336a:	4a13      	ldr	r2, [pc, #76]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800336c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800336e:	4917      	ldr	r1, [pc, #92]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003370:	400b      	ands	r3, r1
 8003372:	68e1      	ldr	r1, [r4, #12]
 8003374:	430b      	orrs	r3, r1
 8003376:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	069b      	lsls	r3, r3, #26
 800337c:	d506      	bpl.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800337e:	4a0e      	ldr	r2, [pc, #56]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003380:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	6961      	ldr	r1, [r4, #20]
 8003388:	430b      	orrs	r3, r1
 800338a:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	075b      	lsls	r3, r3, #29
 8003390:	d506      	bpl.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003392:	4a09      	ldr	r2, [pc, #36]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003394:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003396:	490e      	ldr	r1, [pc, #56]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003398:	400b      	ands	r3, r1
 800339a:	6921      	ldr	r1, [r4, #16]
 800339c:	430b      	orrs	r3, r1
 800339e:	6553      	str	r3, [r2, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	061b      	lsls	r3, r3, #24
 80033a4:	d506      	bpl.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80033a6:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80033a8:	6813      	ldr	r3, [r2, #0]
 80033aa:	21e0      	movs	r1, #224	@ 0xe0
 80033ac:	438b      	bics	r3, r1
 80033ae:	6861      	ldr	r1, [r4, #4]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 80033b4:	b002      	add	sp, #8
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	fffffcff 	.word	0xfffffcff
 80033c0:	fffeffff 	.word	0xfffeffff
 80033c4:	efffffff 	.word	0xefffffff
 80033c8:	00001388 	.word	0x00001388
 80033cc:	ffffcfff 	.word	0xffffcfff
 80033d0:	ffff3fff 	.word	0xffff3fff

080033d4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d4:	233d      	movs	r3, #61	@ 0x3d
 80033d6:	5cc3      	ldrb	r3, [r0, r3]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d122      	bne.n	8003422 <HAL_TIM_Base_Start_IT+0x4e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	333c      	adds	r3, #60	@ 0x3c
 80033de:	2202      	movs	r2, #2
 80033e0:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033e2:	6802      	ldr	r2, [r0, #0]
 80033e4:	68d3      	ldr	r3, [r2, #12]
 80033e6:	2101      	movs	r1, #1
 80033e8:	430b      	orrs	r3, r1
 80033ea:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ec:	6803      	ldr	r3, [r0, #0]
 80033ee:	4a10      	ldr	r2, [pc, #64]	@ (8003430 <HAL_TIM_Base_Start_IT+0x5c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d008      	beq.n	8003406 <HAL_TIM_Base_Start_IT+0x32>
 80033f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003434 <HAL_TIM_Base_Start_IT+0x60>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d005      	beq.n	8003406 <HAL_TIM_Base_Start_IT+0x32>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2101      	movs	r1, #1
 80033fe:	430a      	orrs	r2, r1
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003402:	2000      	movs	r0, #0
 8003404:	e00e      	b.n	8003424 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	490b      	ldr	r1, [pc, #44]	@ (8003438 <HAL_TIM_Base_Start_IT+0x64>)
 800340a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340c:	2a06      	cmp	r2, #6
 800340e:	d00a      	beq.n	8003426 <HAL_TIM_Base_Start_IT+0x52>
 8003410:	3907      	subs	r1, #7
 8003412:	428a      	cmp	r2, r1
 8003414:	d009      	beq.n	800342a <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800341e:	2000      	movs	r0, #0
 8003420:	e000      	b.n	8003424 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8003422:	2001      	movs	r0, #1
}
 8003424:	4770      	bx	lr
  return HAL_OK;
 8003426:	2000      	movs	r0, #0
 8003428:	e7fc      	b.n	8003424 <HAL_TIM_Base_Start_IT+0x50>
 800342a:	2000      	movs	r0, #0
 800342c:	e7fa      	b.n	8003424 <HAL_TIM_Base_Start_IT+0x50>
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40000400 	.word	0x40000400
 8003438:	00010007 	.word	0x00010007

0800343c <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800343c:	6802      	ldr	r2, [r0, #0]
 800343e:	68d3      	ldr	r3, [r2, #12]
 8003440:	2101      	movs	r1, #1
 8003442:	438b      	bics	r3, r1
 8003444:	60d3      	str	r3, [r2, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003446:	6803      	ldr	r3, [r0, #0]
 8003448:	6a19      	ldr	r1, [r3, #32]
 800344a:	4a08      	ldr	r2, [pc, #32]	@ (800346c <HAL_TIM_Base_Stop_IT+0x30>)
 800344c:	4211      	tst	r1, r2
 800344e:	d107      	bne.n	8003460 <HAL_TIM_Base_Stop_IT+0x24>
 8003450:	6a19      	ldr	r1, [r3, #32]
 8003452:	4a07      	ldr	r2, [pc, #28]	@ (8003470 <HAL_TIM_Base_Stop_IT+0x34>)
 8003454:	4211      	tst	r1, r2
 8003456:	d103      	bne.n	8003460 <HAL_TIM_Base_Stop_IT+0x24>
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	2101      	movs	r1, #1
 800345c:	438a      	bics	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003460:	233d      	movs	r3, #61	@ 0x3d
 8003462:	2201      	movs	r2, #1
 8003464:	54c2      	strb	r2, [r0, r3]

  /* Return function status */
  return HAL_OK;
}
 8003466:	2000      	movs	r0, #0
 8003468:	4770      	bx	lr
 800346a:	46c0      	nop			@ (mov r8, r8)
 800346c:	00001111 	.word	0x00001111
 8003470:	00000444 	.word	0x00000444

08003474 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003474:	4770      	bx	lr

08003476 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003478:	4770      	bx	lr

0800347a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800347a:	4770      	bx	lr

0800347c <HAL_TIM_IRQHandler>:
{
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8003480:	6803      	ldr	r3, [r0, #0]
 8003482:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003484:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003486:	07a2      	lsls	r2, r4, #30
 8003488:	d50e      	bpl.n	80034a8 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800348a:	07b2      	lsls	r2, r6, #30
 800348c:	d50c      	bpl.n	80034a8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800348e:	2203      	movs	r2, #3
 8003490:	4252      	negs	r2, r2
 8003492:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003494:	2301      	movs	r3, #1
 8003496:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003498:	6803      	ldr	r3, [r0, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	079b      	lsls	r3, r3, #30
 800349e:	d057      	beq.n	8003550 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 80034a0:	f7ff ffe9 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a4:	2300      	movs	r3, #0
 80034a6:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034a8:	0763      	lsls	r3, r4, #29
 80034aa:	d512      	bpl.n	80034d2 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034ac:	0773      	lsls	r3, r6, #29
 80034ae:	d510      	bpl.n	80034d2 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	2205      	movs	r2, #5
 80034b4:	4252      	negs	r2, r2
 80034b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034b8:	2302      	movs	r3, #2
 80034ba:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	699a      	ldr	r2, [r3, #24]
 80034c0:	23c0      	movs	r3, #192	@ 0xc0
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	421a      	tst	r2, r3
 80034c6:	d049      	beq.n	800355c <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 80034c8:	0028      	movs	r0, r5
 80034ca:	f7ff ffd4 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	2300      	movs	r3, #0
 80034d0:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034d2:	0723      	lsls	r3, r4, #28
 80034d4:	d510      	bpl.n	80034f8 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034d6:	0733      	lsls	r3, r6, #28
 80034d8:	d50e      	bpl.n	80034f8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034da:	682b      	ldr	r3, [r5, #0]
 80034dc:	2209      	movs	r2, #9
 80034de:	4252      	negs	r2, r2
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e2:	2304      	movs	r3, #4
 80034e4:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e6:	682b      	ldr	r3, [r5, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	079b      	lsls	r3, r3, #30
 80034ec:	d03d      	beq.n	800356a <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	0028      	movs	r0, r5
 80034f0:	f7ff ffc1 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f4:	2300      	movs	r3, #0
 80034f6:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034f8:	06e3      	lsls	r3, r4, #27
 80034fa:	d512      	bpl.n	8003522 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034fc:	06f3      	lsls	r3, r6, #27
 80034fe:	d510      	bpl.n	8003522 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	2211      	movs	r2, #17
 8003504:	4252      	negs	r2, r2
 8003506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003508:	2308      	movs	r3, #8
 800350a:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	23c0      	movs	r3, #192	@ 0xc0
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	421a      	tst	r2, r3
 8003516:	d02f      	beq.n	8003578 <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003518:	0028      	movs	r0, r5
 800351a:	f7ff ffac 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351e:	2300      	movs	r3, #0
 8003520:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003522:	07e3      	lsls	r3, r4, #31
 8003524:	d501      	bpl.n	800352a <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003526:	07f3      	lsls	r3, r6, #31
 8003528:	d42d      	bmi.n	8003586 <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800352a:	2382      	movs	r3, #130	@ 0x82
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	421c      	tst	r4, r3
 8003530:	d001      	beq.n	8003536 <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003532:	0633      	lsls	r3, r6, #24
 8003534:	d42f      	bmi.n	8003596 <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003536:	05e3      	lsls	r3, r4, #23
 8003538:	d501      	bpl.n	800353e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800353a:	0633      	lsls	r3, r6, #24
 800353c:	d432      	bmi.n	80035a4 <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800353e:	0663      	lsls	r3, r4, #25
 8003540:	d501      	bpl.n	8003546 <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003542:	0673      	lsls	r3, r6, #25
 8003544:	d435      	bmi.n	80035b2 <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003546:	06a4      	lsls	r4, r4, #26
 8003548:	d501      	bpl.n	800354e <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800354a:	06b6      	lsls	r6, r6, #26
 800354c:	d439      	bmi.n	80035c2 <HAL_TIM_IRQHandler+0x146>
}
 800354e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003550:	f7ff ff90 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	0028      	movs	r0, r5
 8003556:	f7ff ff8f 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
 800355a:	e7a3      	b.n	80034a4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355c:	0028      	movs	r0, r5
 800355e:	f7ff ff89 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003562:	0028      	movs	r0, r5
 8003564:	f7ff ff88 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
 8003568:	e7b1      	b.n	80034ce <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356a:	0028      	movs	r0, r5
 800356c:	f7ff ff82 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	0028      	movs	r0, r5
 8003572:	f7ff ff81 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
 8003576:	e7bd      	b.n	80034f4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003578:	0028      	movs	r0, r5
 800357a:	f7ff ff7b 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357e:	0028      	movs	r0, r5
 8003580:	f7ff ff7a 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
 8003584:	e7cb      	b.n	800351e <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003586:	682b      	ldr	r3, [r5, #0]
 8003588:	2202      	movs	r2, #2
 800358a:	4252      	negs	r2, r2
 800358c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800358e:	0028      	movs	r0, r5
 8003590:	f7fe fb5e 	bl	8001c50 <HAL_TIM_PeriodElapsedCallback>
 8003594:	e7c9      	b.n	800352a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003596:	682b      	ldr	r3, [r5, #0]
 8003598:	4a0e      	ldr	r2, [pc, #56]	@ (80035d4 <HAL_TIM_IRQHandler+0x158>)
 800359a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800359c:	0028      	movs	r0, r5
 800359e:	f000 f894 	bl	80036ca <HAL_TIMEx_BreakCallback>
 80035a2:	e7c8      	b.n	8003536 <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	4a0c      	ldr	r2, [pc, #48]	@ (80035d8 <HAL_TIM_IRQHandler+0x15c>)
 80035a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80035aa:	0028      	movs	r0, r5
 80035ac:	f000 f88e 	bl	80036cc <HAL_TIMEx_Break2Callback>
 80035b0:	e7c5      	b.n	800353e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035b2:	682b      	ldr	r3, [r5, #0]
 80035b4:	2241      	movs	r2, #65	@ 0x41
 80035b6:	4252      	negs	r2, r2
 80035b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80035ba:	0028      	movs	r0, r5
 80035bc:	f7ff ff5d 	bl	800347a <HAL_TIM_TriggerCallback>
 80035c0:	e7c1      	b.n	8003546 <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035c2:	682b      	ldr	r3, [r5, #0]
 80035c4:	2221      	movs	r2, #33	@ 0x21
 80035c6:	4252      	negs	r2, r2
 80035c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80035ca:	0028      	movs	r0, r5
 80035cc:	f000 f87c 	bl	80036c8 <HAL_TIMEx_CommutCallback>
}
 80035d0:	e7bd      	b.n	800354e <HAL_TIM_IRQHandler+0xd2>
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	ffffdf7f 	.word	0xffffdf7f
 80035d8:	fffffeff 	.word	0xfffffeff

080035dc <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035dc:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035de:	4a1c      	ldr	r2, [pc, #112]	@ (8003650 <TIM_Base_SetConfig+0x74>)
 80035e0:	4290      	cmp	r0, r2
 80035e2:	d002      	beq.n	80035ea <TIM_Base_SetConfig+0xe>
 80035e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003654 <TIM_Base_SetConfig+0x78>)
 80035e6:	4290      	cmp	r0, r2
 80035e8:	d103      	bne.n	80035f2 <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ea:	2270      	movs	r2, #112	@ 0x70
 80035ec:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80035ee:	684a      	ldr	r2, [r1, #4]
 80035f0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035f2:	4a17      	ldr	r2, [pc, #92]	@ (8003650 <TIM_Base_SetConfig+0x74>)
 80035f4:	4290      	cmp	r0, r2
 80035f6:	d00b      	beq.n	8003610 <TIM_Base_SetConfig+0x34>
 80035f8:	4a16      	ldr	r2, [pc, #88]	@ (8003654 <TIM_Base_SetConfig+0x78>)
 80035fa:	4290      	cmp	r0, r2
 80035fc:	d008      	beq.n	8003610 <TIM_Base_SetConfig+0x34>
 80035fe:	4a16      	ldr	r2, [pc, #88]	@ (8003658 <TIM_Base_SetConfig+0x7c>)
 8003600:	4290      	cmp	r0, r2
 8003602:	d005      	beq.n	8003610 <TIM_Base_SetConfig+0x34>
 8003604:	4a15      	ldr	r2, [pc, #84]	@ (800365c <TIM_Base_SetConfig+0x80>)
 8003606:	4290      	cmp	r0, r2
 8003608:	d002      	beq.n	8003610 <TIM_Base_SetConfig+0x34>
 800360a:	4a15      	ldr	r2, [pc, #84]	@ (8003660 <TIM_Base_SetConfig+0x84>)
 800360c:	4290      	cmp	r0, r2
 800360e:	d103      	bne.n	8003618 <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003610:	4a14      	ldr	r2, [pc, #80]	@ (8003664 <TIM_Base_SetConfig+0x88>)
 8003612:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003614:	68ca      	ldr	r2, [r1, #12]
 8003616:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003618:	2280      	movs	r2, #128	@ 0x80
 800361a:	4393      	bics	r3, r2
 800361c:	694a      	ldr	r2, [r1, #20]
 800361e:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003620:	688a      	ldr	r2, [r1, #8]
 8003622:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003624:	680a      	ldr	r2, [r1, #0]
 8003626:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003628:	4a09      	ldr	r2, [pc, #36]	@ (8003650 <TIM_Base_SetConfig+0x74>)
 800362a:	4290      	cmp	r0, r2
 800362c:	d005      	beq.n	800363a <TIM_Base_SetConfig+0x5e>
 800362e:	4a0b      	ldr	r2, [pc, #44]	@ (800365c <TIM_Base_SetConfig+0x80>)
 8003630:	4290      	cmp	r0, r2
 8003632:	d002      	beq.n	800363a <TIM_Base_SetConfig+0x5e>
 8003634:	4a0a      	ldr	r2, [pc, #40]	@ (8003660 <TIM_Base_SetConfig+0x84>)
 8003636:	4290      	cmp	r0, r2
 8003638:	d101      	bne.n	800363e <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800363a:	690a      	ldr	r2, [r1, #16]
 800363c:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800363e:	6802      	ldr	r2, [r0, #0]
 8003640:	2104      	movs	r1, #4
 8003642:	430a      	orrs	r2, r1
 8003644:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003646:	2201      	movs	r2, #1
 8003648:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800364a:	6003      	str	r3, [r0, #0]
}
 800364c:	4770      	bx	lr
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40000400 	.word	0x40000400
 8003658:	40002000 	.word	0x40002000
 800365c:	40014400 	.word	0x40014400
 8003660:	40014800 	.word	0x40014800
 8003664:	fffffcff 	.word	0xfffffcff

08003668 <HAL_TIM_Base_Init>:
{
 8003668:	b570      	push	{r4, r5, r6, lr}
 800366a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800366c:	d02a      	beq.n	80036c4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800366e:	233d      	movs	r3, #61	@ 0x3d
 8003670:	5cc3      	ldrb	r3, [r0, r3]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d020      	beq.n	80036b8 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8003676:	253d      	movs	r5, #61	@ 0x3d
 8003678:	2302      	movs	r3, #2
 800367a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367c:	0021      	movs	r1, r4
 800367e:	c901      	ldmia	r1!, {r0}
 8003680:	f7ff ffac 	bl	80035dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003684:	2301      	movs	r3, #1
 8003686:	2248      	movs	r2, #72	@ 0x48
 8003688:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368a:	3a0a      	subs	r2, #10
 800368c:	54a3      	strb	r3, [r4, r2]
 800368e:	3201      	adds	r2, #1
 8003690:	54a3      	strb	r3, [r4, r2]
 8003692:	3201      	adds	r2, #1
 8003694:	54a3      	strb	r3, [r4, r2]
 8003696:	3201      	adds	r2, #1
 8003698:	54a3      	strb	r3, [r4, r2]
 800369a:	3201      	adds	r2, #1
 800369c:	54a3      	strb	r3, [r4, r2]
 800369e:	3201      	adds	r2, #1
 80036a0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a2:	3201      	adds	r2, #1
 80036a4:	54a3      	strb	r3, [r4, r2]
 80036a6:	3201      	adds	r2, #1
 80036a8:	54a3      	strb	r3, [r4, r2]
 80036aa:	3201      	adds	r2, #1
 80036ac:	54a3      	strb	r3, [r4, r2]
 80036ae:	3201      	adds	r2, #1
 80036b0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80036b2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80036b4:	2000      	movs	r0, #0
}
 80036b6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80036b8:	333c      	adds	r3, #60	@ 0x3c
 80036ba:	2200      	movs	r2, #0
 80036bc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80036be:	f7fe fca1 	bl	8002004 <HAL_TIM_Base_MspInit>
 80036c2:	e7d8      	b.n	8003676 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80036c4:	2001      	movs	r0, #1
 80036c6:	e7f6      	b.n	80036b6 <HAL_TIM_Base_Init+0x4e>

080036c8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c8:	4770      	bx	lr

080036ca <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036ca:	4770      	bx	lr

080036cc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036cc:	4770      	bx	lr
	...

080036d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d0:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036d2:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d6:	2201      	movs	r2, #1
 80036d8:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036dc:	6801      	ldr	r1, [r0, #0]
 80036de:	680b      	ldr	r3, [r1, #0]
 80036e0:	4d12      	ldr	r5, [pc, #72]	@ (800372c <UART_EndRxTransfer+0x5c>)
 80036e2:	402b      	ands	r3, r5
 80036e4:	600b      	str	r3, [r1, #0]
 80036e6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036ea:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ee:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036f2:	6802      	ldr	r2, [r0, #0]
 80036f4:	6893      	ldr	r3, [r2, #8]
 80036f6:	4c0e      	ldr	r4, [pc, #56]	@ (8003730 <UART_EndRxTransfer+0x60>)
 80036f8:	4023      	ands	r3, r4
 80036fa:	6093      	str	r3, [r2, #8]
 80036fc:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003700:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003702:	2b01      	cmp	r3, #1
 8003704:	d006      	beq.n	8003714 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003706:	238c      	movs	r3, #140	@ 0x8c
 8003708:	2220      	movs	r2, #32
 800370a:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370c:	2300      	movs	r3, #0
 800370e:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003710:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8003712:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003714:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003718:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371c:	6802      	ldr	r2, [r0, #0]
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	2410      	movs	r4, #16
 8003722:	43a3      	bics	r3, r4
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	f381 8810 	msr	PRIMASK, r1
}
 800372a:	e7ec      	b.n	8003706 <UART_EndRxTransfer+0x36>
 800372c:	fffffedf 	.word	0xfffffedf
 8003730:	effffffe 	.word	0xeffffffe

08003734 <UART_SetConfig>:
{
 8003734:	b510      	push	{r4, lr}
 8003736:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003738:	6883      	ldr	r3, [r0, #8]
 800373a:	6902      	ldr	r2, [r0, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	6942      	ldr	r2, [r0, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	69c2      	ldr	r2, [r0, #28]
 8003744:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003746:	6801      	ldr	r1, [r0, #0]
 8003748:	680a      	ldr	r2, [r1, #0]
 800374a:	4862      	ldr	r0, [pc, #392]	@ (80038d4 <UART_SetConfig+0x1a0>)
 800374c:	4002      	ands	r2, r0
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	6853      	ldr	r3, [r2, #4]
 8003756:	4960      	ldr	r1, [pc, #384]	@ (80038d8 <UART_SetConfig+0x1a4>)
 8003758:	400b      	ands	r3, r1
 800375a:	68e1      	ldr	r1, [r4, #12]
 800375c:	430b      	orrs	r3, r1
 800375e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003760:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8003762:	6a22      	ldr	r2, [r4, #32]
 8003764:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003766:	6821      	ldr	r1, [r4, #0]
 8003768:	688b      	ldr	r3, [r1, #8]
 800376a:	485c      	ldr	r0, [pc, #368]	@ (80038dc <UART_SetConfig+0x1a8>)
 800376c:	4003      	ands	r3, r0
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003772:	6822      	ldr	r2, [r4, #0]
 8003774:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003776:	210f      	movs	r1, #15
 8003778:	438b      	bics	r3, r1
 800377a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800377c:	430b      	orrs	r3, r1
 800377e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	4a57      	ldr	r2, [pc, #348]	@ (80038e0 <UART_SetConfig+0x1ac>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d030      	beq.n	80037ea <UART_SetConfig+0xb6>
 8003788:	4a56      	ldr	r2, [pc, #344]	@ (80038e4 <UART_SetConfig+0x1b0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d03e      	beq.n	800380c <UART_SetConfig+0xd8>
 800378e:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003790:	69e0      	ldr	r0, [r4, #28]
 8003792:	2280      	movs	r2, #128	@ 0x80
 8003794:	0212      	lsls	r2, r2, #8
 8003796:	4290      	cmp	r0, r2
 8003798:	d042      	beq.n	8003820 <UART_SetConfig+0xec>
    switch (clocksource)
 800379a:	2b04      	cmp	r3, #4
 800379c:	d100      	bne.n	80037a0 <UART_SetConfig+0x6c>
 800379e:	e089      	b.n	80038b4 <UART_SetConfig+0x180>
 80037a0:	d87b      	bhi.n	800389a <UART_SetConfig+0x166>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d100      	bne.n	80037a8 <UART_SetConfig+0x74>
 80037a6:	e07f      	b.n	80038a8 <UART_SetConfig+0x174>
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d174      	bne.n	8003896 <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80037ac:	4b4e      	ldr	r3, [pc, #312]	@ (80038e8 <UART_SetConfig+0x1b4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	2107      	movs	r1, #7
 80037b4:	4019      	ands	r1, r3
 80037b6:	3101      	adds	r1, #1
 80037b8:	484c      	ldr	r0, [pc, #304]	@ (80038ec <UART_SetConfig+0x1b8>)
 80037ba:	f7fc fcb7 	bl	800012c <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80037c0:	4b4b      	ldr	r3, [pc, #300]	@ (80038f0 <UART_SetConfig+0x1bc>)
 80037c2:	0052      	lsls	r2, r2, #1
 80037c4:	5ad1      	ldrh	r1, [r2, r3]
 80037c6:	f7fc fcb1 	bl	800012c <__udivsi3>
 80037ca:	6861      	ldr	r1, [r4, #4]
 80037cc:	084b      	lsrs	r3, r1, #1
 80037ce:	18c0      	adds	r0, r0, r3
 80037d0:	f7fc fcac 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037d4:	0002      	movs	r2, r0
 80037d6:	3a10      	subs	r2, #16
 80037d8:	4b46      	ldr	r3, [pc, #280]	@ (80038f4 <UART_SetConfig+0x1c0>)
 80037da:	429a      	cmp	r2, r3
 80037dc:	d86f      	bhi.n	80038be <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	0400      	lsls	r0, r0, #16
 80037e2:	0c00      	lsrs	r0, r0, #16
 80037e4:	60d8      	str	r0, [r3, #12]
 80037e6:	2000      	movs	r0, #0
 80037e8:	e06a      	b.n	80038c0 <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037ea:	4b3f      	ldr	r3, [pc, #252]	@ (80038e8 <UART_SetConfig+0x1b4>)
 80037ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037ee:	2303      	movs	r3, #3
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d00c      	beq.n	8003810 <UART_SetConfig+0xdc>
 80037f6:	d805      	bhi.n	8003804 <UART_SetConfig+0xd0>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <UART_SetConfig+0xe0>
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10b      	bne.n	8003818 <UART_SetConfig+0xe4>
 8003800:	3303      	adds	r3, #3
 8003802:	e7c5      	b.n	8003790 <UART_SetConfig+0x5c>
 8003804:	2b03      	cmp	r3, #3
 8003806:	d109      	bne.n	800381c <UART_SetConfig+0xe8>
 8003808:	3305      	adds	r3, #5
 800380a:	e7c1      	b.n	8003790 <UART_SetConfig+0x5c>
 800380c:	2300      	movs	r3, #0
 800380e:	e7bf      	b.n	8003790 <UART_SetConfig+0x5c>
 8003810:	2302      	movs	r3, #2
 8003812:	e7bd      	b.n	8003790 <UART_SetConfig+0x5c>
 8003814:	2300      	movs	r3, #0
 8003816:	e7bb      	b.n	8003790 <UART_SetConfig+0x5c>
 8003818:	2310      	movs	r3, #16
 800381a:	e7b9      	b.n	8003790 <UART_SetConfig+0x5c>
 800381c:	2310      	movs	r3, #16
 800381e:	e7b7      	b.n	8003790 <UART_SetConfig+0x5c>
    switch (clocksource)
 8003820:	2b04      	cmp	r3, #4
 8003822:	d035      	beq.n	8003890 <UART_SetConfig+0x15c>
 8003824:	d82a      	bhi.n	800387c <UART_SetConfig+0x148>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d02c      	beq.n	8003884 <UART_SetConfig+0x150>
 800382a:	2b02      	cmp	r3, #2
 800382c:	d124      	bne.n	8003878 <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800382e:	4b2e      	ldr	r3, [pc, #184]	@ (80038e8 <UART_SetConfig+0x1b4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	2107      	movs	r1, #7
 8003836:	4019      	ands	r1, r3
 8003838:	3101      	adds	r1, #1
 800383a:	482c      	ldr	r0, [pc, #176]	@ (80038ec <UART_SetConfig+0x1b8>)
 800383c:	f7fc fc76 	bl	800012c <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003840:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003842:	4b2b      	ldr	r3, [pc, #172]	@ (80038f0 <UART_SetConfig+0x1bc>)
 8003844:	0052      	lsls	r2, r2, #1
 8003846:	5ad1      	ldrh	r1, [r2, r3]
 8003848:	f7fc fc70 	bl	800012c <__udivsi3>
 800384c:	0040      	lsls	r0, r0, #1
 800384e:	6861      	ldr	r1, [r4, #4]
 8003850:	084b      	lsrs	r3, r1, #1
 8003852:	18c0      	adds	r0, r0, r3
 8003854:	f7fc fc6a 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003858:	0002      	movs	r2, r0
 800385a:	3a10      	subs	r2, #16
 800385c:	4b25      	ldr	r3, [pc, #148]	@ (80038f4 <UART_SetConfig+0x1c0>)
 800385e:	429a      	cmp	r2, r3
 8003860:	d82b      	bhi.n	80038ba <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003862:	b282      	uxth	r2, r0
 8003864:	230f      	movs	r3, #15
 8003866:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003868:	0840      	lsrs	r0, r0, #1
 800386a:	3b08      	subs	r3, #8
 800386c:	4003      	ands	r3, r0
 800386e:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8003870:	6822      	ldr	r2, [r4, #0]
 8003872:	60d3      	str	r3, [r2, #12]
 8003874:	2000      	movs	r0, #0
 8003876:	e023      	b.n	80038c0 <UART_SetConfig+0x18c>
    switch (clocksource)
 8003878:	2001      	movs	r0, #1
 800387a:	e021      	b.n	80038c0 <UART_SetConfig+0x18c>
 800387c:	2b08      	cmp	r3, #8
 800387e:	d0df      	beq.n	8003840 <UART_SetConfig+0x10c>
 8003880:	2001      	movs	r0, #1
 8003882:	e01d      	b.n	80038c0 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003884:	f7ff fcf8 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003888:	2800      	cmp	r0, #0
 800388a:	d1d9      	bne.n	8003840 <UART_SetConfig+0x10c>
 800388c:	2000      	movs	r0, #0
 800388e:	e017      	b.n	80038c0 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003890:	f7ff fbe8 	bl	8003064 <HAL_RCC_GetSysClockFreq>
        break;
 8003894:	e7f8      	b.n	8003888 <UART_SetConfig+0x154>
    switch (clocksource)
 8003896:	2001      	movs	r0, #1
 8003898:	e012      	b.n	80038c0 <UART_SetConfig+0x18c>
 800389a:	2b08      	cmp	r3, #8
 800389c:	d102      	bne.n	80038a4 <UART_SetConfig+0x170>
 800389e:	2080      	movs	r0, #128	@ 0x80
 80038a0:	0200      	lsls	r0, r0, #8
 80038a2:	e78c      	b.n	80037be <UART_SetConfig+0x8a>
 80038a4:	2001      	movs	r0, #1
 80038a6:	e00b      	b.n	80038c0 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a8:	f7ff fce6 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d186      	bne.n	80037be <UART_SetConfig+0x8a>
 80038b0:	2000      	movs	r0, #0
 80038b2:	e005      	b.n	80038c0 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 80038b4:	f7ff fbd6 	bl	8003064 <HAL_RCC_GetSysClockFreq>
        break;
 80038b8:	e7f8      	b.n	80038ac <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 80038ba:	2001      	movs	r0, #1
 80038bc:	e000      	b.n	80038c0 <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 80038be:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 80038c0:	2301      	movs	r3, #1
 80038c2:	226a      	movs	r2, #106	@ 0x6a
 80038c4:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 80038c6:	3a02      	subs	r2, #2
 80038c8:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80038ce:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	cfff69f3 	.word	0xcfff69f3
 80038d8:	ffffcfff 	.word	0xffffcfff
 80038dc:	11fff4ff 	.word	0x11fff4ff
 80038e0:	40013800 	.word	0x40013800
 80038e4:	40004400 	.word	0x40004400
 80038e8:	40021000 	.word	0x40021000
 80038ec:	02dc6c00 	.word	0x02dc6c00
 80038f0:	08004818 	.word	0x08004818
 80038f4:	0000ffef 	.word	0x0000ffef

080038f8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038f8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80038fa:	071b      	lsls	r3, r3, #28
 80038fc:	d506      	bpl.n	800390c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038fe:	6802      	ldr	r2, [r0, #0]
 8003900:	6853      	ldr	r3, [r2, #4]
 8003902:	492c      	ldr	r1, [pc, #176]	@ (80039b4 <UART_AdvFeatureConfig+0xbc>)
 8003904:	400b      	ands	r3, r1
 8003906:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003908:	430b      	orrs	r3, r1
 800390a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800390c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800390e:	07db      	lsls	r3, r3, #31
 8003910:	d506      	bpl.n	8003920 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003912:	6802      	ldr	r2, [r0, #0]
 8003914:	6853      	ldr	r3, [r2, #4]
 8003916:	4928      	ldr	r1, [pc, #160]	@ (80039b8 <UART_AdvFeatureConfig+0xc0>)
 8003918:	400b      	ands	r3, r1
 800391a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800391c:	430b      	orrs	r3, r1
 800391e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003920:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003922:	079b      	lsls	r3, r3, #30
 8003924:	d506      	bpl.n	8003934 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003926:	6802      	ldr	r2, [r0, #0]
 8003928:	6853      	ldr	r3, [r2, #4]
 800392a:	4924      	ldr	r1, [pc, #144]	@ (80039bc <UART_AdvFeatureConfig+0xc4>)
 800392c:	400b      	ands	r3, r1
 800392e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8003930:	430b      	orrs	r3, r1
 8003932:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003934:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003936:	075b      	lsls	r3, r3, #29
 8003938:	d506      	bpl.n	8003948 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800393a:	6802      	ldr	r2, [r0, #0]
 800393c:	6853      	ldr	r3, [r2, #4]
 800393e:	4920      	ldr	r1, [pc, #128]	@ (80039c0 <UART_AdvFeatureConfig+0xc8>)
 8003940:	400b      	ands	r3, r1
 8003942:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8003944:	430b      	orrs	r3, r1
 8003946:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003948:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800394a:	06db      	lsls	r3, r3, #27
 800394c:	d506      	bpl.n	800395c <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800394e:	6802      	ldr	r2, [r0, #0]
 8003950:	6893      	ldr	r3, [r2, #8]
 8003952:	491c      	ldr	r1, [pc, #112]	@ (80039c4 <UART_AdvFeatureConfig+0xcc>)
 8003954:	400b      	ands	r3, r1
 8003956:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003958:	430b      	orrs	r3, r1
 800395a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800395c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800395e:	069b      	lsls	r3, r3, #26
 8003960:	d506      	bpl.n	8003970 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003962:	6802      	ldr	r2, [r0, #0]
 8003964:	6893      	ldr	r3, [r2, #8]
 8003966:	4918      	ldr	r1, [pc, #96]	@ (80039c8 <UART_AdvFeatureConfig+0xd0>)
 8003968:	400b      	ands	r3, r1
 800396a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800396c:	430b      	orrs	r3, r1
 800396e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003970:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003972:	065b      	lsls	r3, r3, #25
 8003974:	d50b      	bpl.n	800398e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003976:	6802      	ldr	r2, [r0, #0]
 8003978:	6853      	ldr	r3, [r2, #4]
 800397a:	4914      	ldr	r1, [pc, #80]	@ (80039cc <UART_AdvFeatureConfig+0xd4>)
 800397c:	400b      	ands	r3, r1
 800397e:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8003980:	430b      	orrs	r3, r1
 8003982:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003984:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003986:	2380      	movs	r3, #128	@ 0x80
 8003988:	035b      	lsls	r3, r3, #13
 800398a:	429a      	cmp	r2, r3
 800398c:	d00a      	beq.n	80039a4 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800398e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	d506      	bpl.n	80039a2 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003994:	6802      	ldr	r2, [r0, #0]
 8003996:	6853      	ldr	r3, [r2, #4]
 8003998:	490d      	ldr	r1, [pc, #52]	@ (80039d0 <UART_AdvFeatureConfig+0xd8>)
 800399a:	400b      	ands	r3, r1
 800399c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800399e:	430b      	orrs	r3, r1
 80039a0:	6053      	str	r3, [r2, #4]
}
 80039a2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039a4:	6802      	ldr	r2, [r0, #0]
 80039a6:	6853      	ldr	r3, [r2, #4]
 80039a8:	490a      	ldr	r1, [pc, #40]	@ (80039d4 <UART_AdvFeatureConfig+0xdc>)
 80039aa:	400b      	ands	r3, r1
 80039ac:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80039ae:	430b      	orrs	r3, r1
 80039b0:	6053      	str	r3, [r2, #4]
 80039b2:	e7ec      	b.n	800398e <UART_AdvFeatureConfig+0x96>
 80039b4:	ffff7fff 	.word	0xffff7fff
 80039b8:	fffdffff 	.word	0xfffdffff
 80039bc:	fffeffff 	.word	0xfffeffff
 80039c0:	fffbffff 	.word	0xfffbffff
 80039c4:	ffffefff 	.word	0xffffefff
 80039c8:	ffffdfff 	.word	0xffffdfff
 80039cc:	ffefffff 	.word	0xffefffff
 80039d0:	fff7ffff 	.word	0xfff7ffff
 80039d4:	ff9fffff 	.word	0xff9fffff

080039d8 <UART_WaitOnFlagUntilTimeout>:
{
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	46ce      	mov	lr, r9
 80039dc:	4647      	mov	r7, r8
 80039de:	b580      	push	{r7, lr}
 80039e0:	0006      	movs	r6, r0
 80039e2:	000d      	movs	r5, r1
 80039e4:	0017      	movs	r7, r2
 80039e6:	4699      	mov	r9, r3
 80039e8:	9b08      	ldr	r3, [sp, #32]
 80039ea:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ec:	6833      	ldr	r3, [r6, #0]
 80039ee:	69dc      	ldr	r4, [r3, #28]
 80039f0:	402c      	ands	r4, r5
 80039f2:	1b64      	subs	r4, r4, r5
 80039f4:	4263      	negs	r3, r4
 80039f6:	415c      	adcs	r4, r3
 80039f8:	42bc      	cmp	r4, r7
 80039fa:	d133      	bne.n	8003a64 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 80039fc:	4643      	mov	r3, r8
 80039fe:	3301      	adds	r3, #1
 8003a00:	d0f4      	beq.n	80039ec <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a02:	f7fe fc1f 	bl	8002244 <HAL_GetTick>
 8003a06:	464b      	mov	r3, r9
 8003a08:	1ac0      	subs	r0, r0, r3
 8003a0a:	4540      	cmp	r0, r8
 8003a0c:	d82f      	bhi.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x96>
 8003a0e:	4643      	mov	r3, r8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d02e      	beq.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a14:	6832      	ldr	r2, [r6, #0]
 8003a16:	6813      	ldr	r3, [r2, #0]
 8003a18:	075b      	lsls	r3, r3, #29
 8003a1a:	d5e7      	bpl.n	80039ec <UART_WaitOnFlagUntilTimeout+0x14>
 8003a1c:	2d80      	cmp	r5, #128	@ 0x80
 8003a1e:	d0e5      	beq.n	80039ec <UART_WaitOnFlagUntilTimeout+0x14>
 8003a20:	2d40      	cmp	r5, #64	@ 0x40
 8003a22:	d0e3      	beq.n	80039ec <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a24:	69d3      	ldr	r3, [r2, #28]
 8003a26:	071b      	lsls	r3, r3, #28
 8003a28:	d410      	bmi.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a2a:	69d3      	ldr	r3, [r2, #28]
 8003a2c:	051b      	lsls	r3, r3, #20
 8003a2e:	d5dd      	bpl.n	80039ec <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a30:	2380      	movs	r3, #128	@ 0x80
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 8003a36:	0030      	movs	r0, r6
 8003a38:	f7ff fe4a 	bl	80036d0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a3c:	2390      	movs	r3, #144	@ 0x90
 8003a3e:	2220      	movs	r2, #32
 8003a40:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8003a42:	3b0c      	subs	r3, #12
 8003a44:	2200      	movs	r2, #0
 8003a46:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8003a48:	2003      	movs	r0, #3
 8003a4a:	e00c      	b.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a4c:	2408      	movs	r4, #8
 8003a4e:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8003a50:	0030      	movs	r0, r6
 8003a52:	f7ff fe3d 	bl	80036d0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a56:	2390      	movs	r3, #144	@ 0x90
 8003a58:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 8003a5a:	3b0c      	subs	r3, #12
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8003a60:	2001      	movs	r0, #1
 8003a62:	e000      	b.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8003a64:	2000      	movs	r0, #0
}
 8003a66:	bcc0      	pop	{r6, r7}
 8003a68:	46b9      	mov	r9, r7
 8003a6a:	46b0      	mov	r8, r6
 8003a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003a6e:	2003      	movs	r0, #3
 8003a70:	e7f9      	b.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x8e>
 8003a72:	2003      	movs	r0, #3
 8003a74:	e7f7      	b.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x8e>

08003a76 <HAL_UART_Transmit>:
{
 8003a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a78:	46c6      	mov	lr, r8
 8003a7a:	b500      	push	{lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	0004      	movs	r4, r0
 8003a80:	000d      	movs	r5, r1
 8003a82:	4690      	mov	r8, r2
 8003a84:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003a86:	2388      	movs	r3, #136	@ 0x88
 8003a88:	58c3      	ldr	r3, [r0, r3]
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d166      	bne.n	8003b5c <HAL_UART_Transmit+0xe6>
    if ((pData == NULL) || (Size == 0U))
 8003a8e:	2900      	cmp	r1, #0
 8003a90:	d069      	beq.n	8003b66 <HAL_UART_Transmit+0xf0>
 8003a92:	2a00      	cmp	r2, #0
 8003a94:	d069      	beq.n	8003b6a <HAL_UART_Transmit+0xf4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a96:	6882      	ldr	r2, [r0, #8]
 8003a98:	2380      	movs	r3, #128	@ 0x80
 8003a9a:	015b      	lsls	r3, r3, #5
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d104      	bne.n	8003aaa <HAL_UART_Transmit+0x34>
 8003aa0:	6903      	ldr	r3, [r0, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003aa6:	07cb      	lsls	r3, r1, #31
 8003aa8:	d461      	bmi.n	8003b6e <HAL_UART_Transmit+0xf8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aaa:	2390      	movs	r3, #144	@ 0x90
 8003aac:	2200      	movs	r2, #0
 8003aae:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab0:	3b08      	subs	r3, #8
 8003ab2:	3221      	adds	r2, #33	@ 0x21
 8003ab4:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8003ab6:	f7fe fbc5 	bl	8002244 <HAL_GetTick>
 8003aba:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8003abc:	2354      	movs	r3, #84	@ 0x54
 8003abe:	4642      	mov	r2, r8
 8003ac0:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac6:	68a2      	ldr	r2, [r4, #8]
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	015b      	lsls	r3, r3, #5
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d002      	beq.n	8003ad6 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	4698      	mov	r8, r3
 8003ad4:	e018      	b.n	8003b08 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad6:	6923      	ldr	r3, [r4, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d02a      	beq.n	8003b32 <HAL_UART_Transmit+0xbc>
      pdata16bits = NULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	4698      	mov	r8, r3
 8003ae0:	e012      	b.n	8003b08 <HAL_UART_Transmit+0x92>
        huart->gState = HAL_UART_STATE_READY;
 8003ae2:	2388      	movs	r3, #136	@ 0x88
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 8003ae8:	2003      	movs	r0, #3
 8003aea:	e038      	b.n	8003b5e <HAL_UART_Transmit+0xe8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aec:	4643      	mov	r3, r8
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	05db      	lsls	r3, r3, #23
 8003af4:	0ddb      	lsrs	r3, r3, #23
 8003af6:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 8003af8:	2302      	movs	r3, #2
 8003afa:	469c      	mov	ip, r3
 8003afc:	44e0      	add	r8, ip
      huart->TxXferCount--;
 8003afe:	2356      	movs	r3, #86	@ 0x56
 8003b00:	5ae2      	ldrh	r2, [r4, r3]
 8003b02:	3a01      	subs	r2, #1
 8003b04:	b292      	uxth	r2, r2
 8003b06:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8003b08:	2356      	movs	r3, #86	@ 0x56
 8003b0a:	5ae3      	ldrh	r3, [r4, r3]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d012      	beq.n	8003b38 <HAL_UART_Transmit+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b12:	9600      	str	r6, [sp, #0]
 8003b14:	003b      	movs	r3, r7
 8003b16:	2200      	movs	r2, #0
 8003b18:	2180      	movs	r1, #128	@ 0x80
 8003b1a:	0020      	movs	r0, r4
 8003b1c:	f7ff ff5c 	bl	80039d8 <UART_WaitOnFlagUntilTimeout>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d1de      	bne.n	8003ae2 <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 8003b24:	2d00      	cmp	r5, #0
 8003b26:	d0e1      	beq.n	8003aec <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b28:	782a      	ldrb	r2, [r5, #0]
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b2e:	3501      	adds	r5, #1
 8003b30:	e7e5      	b.n	8003afe <HAL_UART_Transmit+0x88>
      pdata16bits = (const uint16_t *) pData;
 8003b32:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003b34:	2500      	movs	r5, #0
 8003b36:	e7e7      	b.n	8003b08 <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b38:	9600      	str	r6, [sp, #0]
 8003b3a:	003b      	movs	r3, r7
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2140      	movs	r1, #64	@ 0x40
 8003b40:	0020      	movs	r0, r4
 8003b42:	f7ff ff49 	bl	80039d8 <UART_WaitOnFlagUntilTimeout>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d103      	bne.n	8003b52 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8003b4a:	2388      	movs	r3, #136	@ 0x88
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8003b50:	e005      	b.n	8003b5e <HAL_UART_Transmit+0xe8>
      huart->gState = HAL_UART_STATE_READY;
 8003b52:	2388      	movs	r3, #136	@ 0x88
 8003b54:	2220      	movs	r2, #32
 8003b56:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003b58:	2003      	movs	r0, #3
 8003b5a:	e000      	b.n	8003b5e <HAL_UART_Transmit+0xe8>
    return HAL_BUSY;
 8003b5c:	2002      	movs	r0, #2
}
 8003b5e:	b002      	add	sp, #8
 8003b60:	bc80      	pop	{r7}
 8003b62:	46b8      	mov	r8, r7
 8003b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8003b66:	2001      	movs	r0, #1
 8003b68:	e7f9      	b.n	8003b5e <HAL_UART_Transmit+0xe8>
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	e7f7      	b.n	8003b5e <HAL_UART_Transmit+0xe8>
        return  HAL_ERROR;
 8003b6e:	2001      	movs	r0, #1
 8003b70:	e7f5      	b.n	8003b5e <HAL_UART_Transmit+0xe8>
	...

08003b74 <UART_CheckIdleState>:
{
 8003b74:	b530      	push	{r4, r5, lr}
 8003b76:	b083      	sub	sp, #12
 8003b78:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7a:	2390      	movs	r3, #144	@ 0x90
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8003b80:	f7fe fb60 	bl	8002244 <HAL_GetTick>
 8003b84:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	071b      	lsls	r3, r3, #28
 8003b8c:	d410      	bmi.n	8003bb0 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	075b      	lsls	r3, r3, #29
 8003b94:	d42b      	bmi.n	8003bee <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 8003b96:	2320      	movs	r3, #32
 8003b98:	2288      	movs	r2, #136	@ 0x88
 8003b9a:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	3204      	adds	r2, #4
 8003b9e:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ba4:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8003ba6:	3a08      	subs	r2, #8
 8003ba8:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003baa:	2000      	movs	r0, #0
}
 8003bac:	b003      	add	sp, #12
 8003bae:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb0:	2180      	movs	r1, #128	@ 0x80
 8003bb2:	4b23      	ldr	r3, [pc, #140]	@ (8003c40 <UART_CheckIdleState+0xcc>)
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	2200      	movs	r2, #0
 8003bba:	0389      	lsls	r1, r1, #14
 8003bbc:	0020      	movs	r0, r4
 8003bbe:	f7ff ff0b 	bl	80039d8 <UART_WaitOnFlagUntilTimeout>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d0e3      	beq.n	8003b8e <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bc6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bd0:	6822      	ldr	r2, [r4, #0]
 8003bd2:	6813      	ldr	r3, [r2, #0]
 8003bd4:	2080      	movs	r0, #128	@ 0x80
 8003bd6:	4383      	bics	r3, r0
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003bde:	2388      	movs	r3, #136	@ 0x88
 8003be0:	2220      	movs	r2, #32
 8003be2:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8003be4:	3b04      	subs	r3, #4
 8003be6:	2200      	movs	r2, #0
 8003be8:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003bea:	387d      	subs	r0, #125	@ 0x7d
 8003bec:	e7de      	b.n	8003bac <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bee:	2180      	movs	r1, #128	@ 0x80
 8003bf0:	4b13      	ldr	r3, [pc, #76]	@ (8003c40 <UART_CheckIdleState+0xcc>)
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	002b      	movs	r3, r5
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	03c9      	lsls	r1, r1, #15
 8003bfa:	0020      	movs	r0, r4
 8003bfc:	f7ff feec 	bl	80039d8 <UART_WaitOnFlagUntilTimeout>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d0c8      	beq.n	8003b96 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c04:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c0e:	6821      	ldr	r1, [r4, #0]
 8003c10:	680b      	ldr	r3, [r1, #0]
 8003c12:	4d0c      	ldr	r5, [pc, #48]	@ (8003c44 <UART_CheckIdleState+0xd0>)
 8003c14:	402b      	ands	r3, r5
 8003c16:	600b      	str	r3, [r1, #0]
 8003c18:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c1c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c20:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c24:	6821      	ldr	r1, [r4, #0]
 8003c26:	688b      	ldr	r3, [r1, #8]
 8003c28:	4393      	bics	r3, r2
 8003c2a:	608b      	str	r3, [r1, #8]
 8003c2c:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003c30:	238c      	movs	r3, #140	@ 0x8c
 8003c32:	321f      	adds	r2, #31
 8003c34:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8003c36:	3b08      	subs	r3, #8
 8003c38:	2200      	movs	r2, #0
 8003c3a:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003c3c:	2003      	movs	r0, #3
 8003c3e:	e7b5      	b.n	8003bac <UART_CheckIdleState+0x38>
 8003c40:	01ffffff 	.word	0x01ffffff
 8003c44:	fffffedf 	.word	0xfffffedf

08003c48 <HAL_UART_Init>:
{
 8003c48:	b510      	push	{r4, lr}
 8003c4a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003c4c:	d030      	beq.n	8003cb0 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4e:	2388      	movs	r3, #136	@ 0x88
 8003c50:	58c3      	ldr	r3, [r0, r3]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d022      	beq.n	8003c9c <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8003c56:	2388      	movs	r3, #136	@ 0x88
 8003c58:	2224      	movs	r2, #36	@ 0x24
 8003c5a:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8003c5c:	6822      	ldr	r2, [r4, #0]
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	2101      	movs	r1, #1
 8003c62:	438b      	bics	r3, r1
 8003c64:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c66:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d11d      	bne.n	8003ca8 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c6c:	0020      	movs	r0, r4
 8003c6e:	f7ff fd61 	bl	8003734 <UART_SetConfig>
 8003c72:	2801      	cmp	r0, #1
 8003c74:	d011      	beq.n	8003c9a <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c76:	6822      	ldr	r2, [r4, #0]
 8003c78:	6853      	ldr	r3, [r2, #4]
 8003c7a:	490e      	ldr	r1, [pc, #56]	@ (8003cb4 <HAL_UART_Init+0x6c>)
 8003c7c:	400b      	ands	r3, r1
 8003c7e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c80:	6822      	ldr	r2, [r4, #0]
 8003c82:	6893      	ldr	r3, [r2, #8]
 8003c84:	212a      	movs	r1, #42	@ 0x2a
 8003c86:	438b      	bics	r3, r1
 8003c88:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003c8a:	6822      	ldr	r2, [r4, #0]
 8003c8c:	6813      	ldr	r3, [r2, #0]
 8003c8e:	3929      	subs	r1, #41	@ 0x29
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003c94:	0020      	movs	r0, r4
 8003c96:	f7ff ff6d 	bl	8003b74 <UART_CheckIdleState>
}
 8003c9a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003c9c:	3384      	adds	r3, #132	@ 0x84
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8003ca2:	f7fe fa1f 	bl	80020e4 <HAL_UART_MspInit>
 8003ca6:	e7d6      	b.n	8003c56 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8003ca8:	0020      	movs	r0, r4
 8003caa:	f7ff fe25 	bl	80038f8 <UART_AdvFeatureConfig>
 8003cae:	e7dd      	b.n	8003c6c <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	e7f2      	b.n	8003c9a <HAL_UART_Init+0x52>
 8003cb4:	ffffb7ff 	.word	0xffffb7ff

08003cb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cbc:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d105      	bne.n	8003cce <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	226a      	movs	r2, #106	@ 0x6a
 8003cc6:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 8003cc8:	3a02      	subs	r2, #2
 8003cca:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003cce:	6802      	ldr	r2, [r0, #0]
 8003cd0:	6895      	ldr	r5, [r2, #8]
 8003cd2:	0e6d      	lsrs	r5, r5, #25
 8003cd4:	2307      	movs	r3, #7
 8003cd6:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003cd8:	6892      	ldr	r2, [r2, #8]
 8003cda:	0f52      	lsrs	r2, r2, #29
 8003cdc:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003cde:	4f08      	ldr	r7, [pc, #32]	@ (8003d00 <UARTEx_SetNbDataToProcess+0x48>)
 8003ce0:	5cf8      	ldrb	r0, [r7, r3]
 8003ce2:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ce4:	4e07      	ldr	r6, [pc, #28]	@ (8003d04 <UARTEx_SetNbDataToProcess+0x4c>)
 8003ce6:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ce8:	f7fc faaa 	bl	8000240 <__divsi3>
 8003cec:	236a      	movs	r3, #106	@ 0x6a
 8003cee:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cf0:	5d78      	ldrb	r0, [r7, r5]
 8003cf2:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003cf4:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cf6:	f7fc faa3 	bl	8000240 <__divsi3>
 8003cfa:	2368      	movs	r3, #104	@ 0x68
 8003cfc:	52e0      	strh	r0, [r4, r3]
}
 8003cfe:	e7e5      	b.n	8003ccc <UARTEx_SetNbDataToProcess+0x14>
 8003d00:	08004838 	.word	0x08004838
 8003d04:	08004830 	.word	0x08004830

08003d08 <HAL_UARTEx_DisableFifoMode>:
{
 8003d08:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003d0a:	2384      	movs	r3, #132	@ 0x84
 8003d0c:	5cc3      	ldrb	r3, [r0, r3]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d015      	beq.n	8003d3e <HAL_UARTEx_DisableFifoMode+0x36>
 8003d12:	2484      	movs	r4, #132	@ 0x84
 8003d14:	2601      	movs	r6, #1
 8003d16:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8003d18:	2588      	movs	r5, #136	@ 0x88
 8003d1a:	2324      	movs	r3, #36	@ 0x24
 8003d1c:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d1e:	6802      	ldr	r2, [r0, #0]
 8003d20:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003d22:	6811      	ldr	r1, [r2, #0]
 8003d24:	43b1      	bics	r1, r6
 8003d26:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d28:	4a06      	ldr	r2, [pc, #24]	@ (8003d44 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8003d2a:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d30:	6801      	ldr	r1, [r0, #0]
 8003d32:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003d34:	2320      	movs	r3, #32
 8003d36:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8003d38:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8003d3a:	2000      	movs	r0, #0
}
 8003d3c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003d3e:	2002      	movs	r0, #2
 8003d40:	e7fc      	b.n	8003d3c <HAL_UARTEx_DisableFifoMode+0x34>
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	dfffffff 	.word	0xdfffffff

08003d48 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	0004      	movs	r4, r0
 8003d4c:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003d4e:	2384      	movs	r3, #132	@ 0x84
 8003d50:	5cc3      	ldrb	r3, [r0, r3]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d01b      	beq.n	8003d8e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8003d56:	2584      	movs	r5, #132	@ 0x84
 8003d58:	2001      	movs	r0, #1
 8003d5a:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003d5c:	2688      	movs	r6, #136	@ 0x88
 8003d5e:	2324      	movs	r3, #36	@ 0x24
 8003d60:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	4381      	bics	r1, r0
 8003d6a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d6c:	6820      	ldr	r0, [r4, #0]
 8003d6e:	6883      	ldr	r3, [r0, #8]
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	08d9      	lsrs	r1, r3, #3
 8003d74:	4311      	orrs	r1, r2
 8003d76:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003d78:	0020      	movs	r0, r4
 8003d7a:	f7ff ff9d 	bl	8003cb8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003d82:	2320      	movs	r3, #32
 8003d84:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8003d86:	2300      	movs	r3, #0
 8003d88:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003d8a:	2000      	movs	r0, #0
}
 8003d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003d8e:	2002      	movs	r0, #2
 8003d90:	e7fc      	b.n	8003d8c <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

08003d94 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	0004      	movs	r4, r0
 8003d98:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8003d9a:	2284      	movs	r2, #132	@ 0x84
 8003d9c:	5c82      	ldrb	r2, [r0, r2]
 8003d9e:	2a01      	cmp	r2, #1
 8003da0:	d01b      	beq.n	8003dda <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8003da2:	2584      	movs	r5, #132	@ 0x84
 8003da4:	2001      	movs	r0, #1
 8003da6:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003da8:	2688      	movs	r6, #136	@ 0x88
 8003daa:	2224      	movs	r2, #36	@ 0x24
 8003dac:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dae:	6822      	ldr	r2, [r4, #0]
 8003db0:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003db2:	6811      	ldr	r1, [r2, #0]
 8003db4:	4381      	bics	r1, r0
 8003db6:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003db8:	6822      	ldr	r2, [r4, #0]
 8003dba:	6891      	ldr	r1, [r2, #8]
 8003dbc:	4808      	ldr	r0, [pc, #32]	@ (8003de0 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8003dbe:	4001      	ands	r1, r0
 8003dc0:	4319      	orrs	r1, r3
 8003dc2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003dc4:	0020      	movs	r0, r4
 8003dc6:	f7ff ff77 	bl	8003cb8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003dce:	2320      	movs	r3, #32
 8003dd0:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003dd6:	2000      	movs	r0, #0
}
 8003dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003dda:	2002      	movs	r0, #2
 8003ddc:	e7fc      	b.n	8003dd8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	f1ffffff 	.word	0xf1ffffff

08003de4 <sniprintf>:
 8003de4:	b40c      	push	{r2, r3}
 8003de6:	b530      	push	{r4, r5, lr}
 8003de8:	4b18      	ldr	r3, [pc, #96]	@ (8003e4c <sniprintf+0x68>)
 8003dea:	000c      	movs	r4, r1
 8003dec:	681d      	ldr	r5, [r3, #0]
 8003dee:	b09d      	sub	sp, #116	@ 0x74
 8003df0:	2900      	cmp	r1, #0
 8003df2:	da08      	bge.n	8003e06 <sniprintf+0x22>
 8003df4:	238b      	movs	r3, #139	@ 0x8b
 8003df6:	2001      	movs	r0, #1
 8003df8:	602b      	str	r3, [r5, #0]
 8003dfa:	4240      	negs	r0, r0
 8003dfc:	b01d      	add	sp, #116	@ 0x74
 8003dfe:	bc30      	pop	{r4, r5}
 8003e00:	bc08      	pop	{r3}
 8003e02:	b002      	add	sp, #8
 8003e04:	4718      	bx	r3
 8003e06:	2382      	movs	r3, #130	@ 0x82
 8003e08:	466a      	mov	r2, sp
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	8293      	strh	r3, [r2, #20]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9002      	str	r0, [sp, #8]
 8003e12:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003e14:	9006      	str	r0, [sp, #24]
 8003e16:	4299      	cmp	r1, r3
 8003e18:	d000      	beq.n	8003e1c <sniprintf+0x38>
 8003e1a:	1e4b      	subs	r3, r1, #1
 8003e1c:	9304      	str	r3, [sp, #16]
 8003e1e:	9307      	str	r3, [sp, #28]
 8003e20:	2301      	movs	r3, #1
 8003e22:	466a      	mov	r2, sp
 8003e24:	425b      	negs	r3, r3
 8003e26:	82d3      	strh	r3, [r2, #22]
 8003e28:	0028      	movs	r0, r5
 8003e2a:	ab21      	add	r3, sp, #132	@ 0x84
 8003e2c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003e2e:	a902      	add	r1, sp, #8
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	f000 f99d 	bl	8004170 <_svfiprintf_r>
 8003e36:	1c43      	adds	r3, r0, #1
 8003e38:	da01      	bge.n	8003e3e <sniprintf+0x5a>
 8003e3a:	238b      	movs	r3, #139	@ 0x8b
 8003e3c:	602b      	str	r3, [r5, #0]
 8003e3e:	2c00      	cmp	r4, #0
 8003e40:	d0dc      	beq.n	8003dfc <sniprintf+0x18>
 8003e42:	2200      	movs	r2, #0
 8003e44:	9b02      	ldr	r3, [sp, #8]
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e7d8      	b.n	8003dfc <sniprintf+0x18>
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	2000002c 	.word	0x2000002c

08003e50 <memset>:
 8003e50:	0003      	movs	r3, r0
 8003e52:	1882      	adds	r2, r0, r2
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d100      	bne.n	8003e5a <memset+0xa>
 8003e58:	4770      	bx	lr
 8003e5a:	7019      	strb	r1, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	e7f9      	b.n	8003e54 <memset+0x4>

08003e60 <__errno>:
 8003e60:	4b01      	ldr	r3, [pc, #4]	@ (8003e68 <__errno+0x8>)
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	4770      	bx	lr
 8003e66:	46c0      	nop			@ (mov r8, r8)
 8003e68:	2000002c 	.word	0x2000002c

08003e6c <__libc_init_array>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	2600      	movs	r6, #0
 8003e70:	4c0c      	ldr	r4, [pc, #48]	@ (8003ea4 <__libc_init_array+0x38>)
 8003e72:	4d0d      	ldr	r5, [pc, #52]	@ (8003ea8 <__libc_init_array+0x3c>)
 8003e74:	1b64      	subs	r4, r4, r5
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	42a6      	cmp	r6, r4
 8003e7a:	d109      	bne.n	8003e90 <__libc_init_array+0x24>
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	f000 fc61 	bl	8004744 <_init>
 8003e82:	4c0a      	ldr	r4, [pc, #40]	@ (8003eac <__libc_init_array+0x40>)
 8003e84:	4d0a      	ldr	r5, [pc, #40]	@ (8003eb0 <__libc_init_array+0x44>)
 8003e86:	1b64      	subs	r4, r4, r5
 8003e88:	10a4      	asrs	r4, r4, #2
 8003e8a:	42a6      	cmp	r6, r4
 8003e8c:	d105      	bne.n	8003e9a <__libc_init_array+0x2e>
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	00b3      	lsls	r3, r6, #2
 8003e92:	58eb      	ldr	r3, [r5, r3]
 8003e94:	4798      	blx	r3
 8003e96:	3601      	adds	r6, #1
 8003e98:	e7ee      	b.n	8003e78 <__libc_init_array+0xc>
 8003e9a:	00b3      	lsls	r3, r6, #2
 8003e9c:	58eb      	ldr	r3, [r5, r3]
 8003e9e:	4798      	blx	r3
 8003ea0:	3601      	adds	r6, #1
 8003ea2:	e7f2      	b.n	8003e8a <__libc_init_array+0x1e>
 8003ea4:	08004874 	.word	0x08004874
 8003ea8:	08004874 	.word	0x08004874
 8003eac:	08004878 	.word	0x08004878
 8003eb0:	08004874 	.word	0x08004874

08003eb4 <__retarget_lock_acquire_recursive>:
 8003eb4:	4770      	bx	lr

08003eb6 <__retarget_lock_release_recursive>:
 8003eb6:	4770      	bx	lr

08003eb8 <_free_r>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	0005      	movs	r5, r0
 8003ebc:	1e0c      	subs	r4, r1, #0
 8003ebe:	d010      	beq.n	8003ee2 <_free_r+0x2a>
 8003ec0:	3c04      	subs	r4, #4
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	da00      	bge.n	8003eca <_free_r+0x12>
 8003ec8:	18e4      	adds	r4, r4, r3
 8003eca:	0028      	movs	r0, r5
 8003ecc:	f000 f8e0 	bl	8004090 <__malloc_lock>
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f48 <_free_r+0x90>)
 8003ed2:	6813      	ldr	r3, [r2, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d105      	bne.n	8003ee4 <_free_r+0x2c>
 8003ed8:	6063      	str	r3, [r4, #4]
 8003eda:	6014      	str	r4, [r2, #0]
 8003edc:	0028      	movs	r0, r5
 8003ede:	f000 f8df 	bl	80040a0 <__malloc_unlock>
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	42a3      	cmp	r3, r4
 8003ee6:	d908      	bls.n	8003efa <_free_r+0x42>
 8003ee8:	6820      	ldr	r0, [r4, #0]
 8003eea:	1821      	adds	r1, r4, r0
 8003eec:	428b      	cmp	r3, r1
 8003eee:	d1f3      	bne.n	8003ed8 <_free_r+0x20>
 8003ef0:	6819      	ldr	r1, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	1809      	adds	r1, r1, r0
 8003ef6:	6021      	str	r1, [r4, #0]
 8003ef8:	e7ee      	b.n	8003ed8 <_free_r+0x20>
 8003efa:	001a      	movs	r2, r3
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <_free_r+0x4e>
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	d9f9      	bls.n	8003efa <_free_r+0x42>
 8003f06:	6811      	ldr	r1, [r2, #0]
 8003f08:	1850      	adds	r0, r2, r1
 8003f0a:	42a0      	cmp	r0, r4
 8003f0c:	d10b      	bne.n	8003f26 <_free_r+0x6e>
 8003f0e:	6820      	ldr	r0, [r4, #0]
 8003f10:	1809      	adds	r1, r1, r0
 8003f12:	1850      	adds	r0, r2, r1
 8003f14:	6011      	str	r1, [r2, #0]
 8003f16:	4283      	cmp	r3, r0
 8003f18:	d1e0      	bne.n	8003edc <_free_r+0x24>
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	1841      	adds	r1, r0, r1
 8003f20:	6011      	str	r1, [r2, #0]
 8003f22:	6053      	str	r3, [r2, #4]
 8003f24:	e7da      	b.n	8003edc <_free_r+0x24>
 8003f26:	42a0      	cmp	r0, r4
 8003f28:	d902      	bls.n	8003f30 <_free_r+0x78>
 8003f2a:	230c      	movs	r3, #12
 8003f2c:	602b      	str	r3, [r5, #0]
 8003f2e:	e7d5      	b.n	8003edc <_free_r+0x24>
 8003f30:	6820      	ldr	r0, [r4, #0]
 8003f32:	1821      	adds	r1, r4, r0
 8003f34:	428b      	cmp	r3, r1
 8003f36:	d103      	bne.n	8003f40 <_free_r+0x88>
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	1809      	adds	r1, r1, r0
 8003f3e:	6021      	str	r1, [r4, #0]
 8003f40:	6063      	str	r3, [r4, #4]
 8003f42:	6054      	str	r4, [r2, #4]
 8003f44:	e7ca      	b.n	8003edc <_free_r+0x24>
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	200003c8 	.word	0x200003c8

08003f4c <sbrk_aligned>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	4e0f      	ldr	r6, [pc, #60]	@ (8003f8c <sbrk_aligned+0x40>)
 8003f50:	000d      	movs	r5, r1
 8003f52:	6831      	ldr	r1, [r6, #0]
 8003f54:	0004      	movs	r4, r0
 8003f56:	2900      	cmp	r1, #0
 8003f58:	d102      	bne.n	8003f60 <sbrk_aligned+0x14>
 8003f5a:	f000 fb95 	bl	8004688 <_sbrk_r>
 8003f5e:	6030      	str	r0, [r6, #0]
 8003f60:	0029      	movs	r1, r5
 8003f62:	0020      	movs	r0, r4
 8003f64:	f000 fb90 	bl	8004688 <_sbrk_r>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d103      	bne.n	8003f74 <sbrk_aligned+0x28>
 8003f6c:	2501      	movs	r5, #1
 8003f6e:	426d      	negs	r5, r5
 8003f70:	0028      	movs	r0, r5
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
 8003f74:	2303      	movs	r3, #3
 8003f76:	1cc5      	adds	r5, r0, #3
 8003f78:	439d      	bics	r5, r3
 8003f7a:	42a8      	cmp	r0, r5
 8003f7c:	d0f8      	beq.n	8003f70 <sbrk_aligned+0x24>
 8003f7e:	1a29      	subs	r1, r5, r0
 8003f80:	0020      	movs	r0, r4
 8003f82:	f000 fb81 	bl	8004688 <_sbrk_r>
 8003f86:	3001      	adds	r0, #1
 8003f88:	d1f2      	bne.n	8003f70 <sbrk_aligned+0x24>
 8003f8a:	e7ef      	b.n	8003f6c <sbrk_aligned+0x20>
 8003f8c:	200003c4 	.word	0x200003c4

08003f90 <_malloc_r>:
 8003f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f92:	2203      	movs	r2, #3
 8003f94:	1ccb      	adds	r3, r1, #3
 8003f96:	4393      	bics	r3, r2
 8003f98:	3308      	adds	r3, #8
 8003f9a:	0005      	movs	r5, r0
 8003f9c:	001f      	movs	r7, r3
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d234      	bcs.n	800400c <_malloc_r+0x7c>
 8003fa2:	270c      	movs	r7, #12
 8003fa4:	42b9      	cmp	r1, r7
 8003fa6:	d833      	bhi.n	8004010 <_malloc_r+0x80>
 8003fa8:	0028      	movs	r0, r5
 8003faa:	f000 f871 	bl	8004090 <__malloc_lock>
 8003fae:	4e37      	ldr	r6, [pc, #220]	@ (800408c <_malloc_r+0xfc>)
 8003fb0:	6833      	ldr	r3, [r6, #0]
 8003fb2:	001c      	movs	r4, r3
 8003fb4:	2c00      	cmp	r4, #0
 8003fb6:	d12f      	bne.n	8004018 <_malloc_r+0x88>
 8003fb8:	0039      	movs	r1, r7
 8003fba:	0028      	movs	r0, r5
 8003fbc:	f7ff ffc6 	bl	8003f4c <sbrk_aligned>
 8003fc0:	0004      	movs	r4, r0
 8003fc2:	1c43      	adds	r3, r0, #1
 8003fc4:	d15f      	bne.n	8004086 <_malloc_r+0xf6>
 8003fc6:	6834      	ldr	r4, [r6, #0]
 8003fc8:	9400      	str	r4, [sp, #0]
 8003fca:	9b00      	ldr	r3, [sp, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d14a      	bne.n	8004066 <_malloc_r+0xd6>
 8003fd0:	2c00      	cmp	r4, #0
 8003fd2:	d052      	beq.n	800407a <_malloc_r+0xea>
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	0028      	movs	r0, r5
 8003fd8:	18e3      	adds	r3, r4, r3
 8003fda:	9900      	ldr	r1, [sp, #0]
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	f000 fb53 	bl	8004688 <_sbrk_r>
 8003fe2:	9b01      	ldr	r3, [sp, #4]
 8003fe4:	4283      	cmp	r3, r0
 8003fe6:	d148      	bne.n	800407a <_malloc_r+0xea>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	0028      	movs	r0, r5
 8003fec:	1aff      	subs	r7, r7, r3
 8003fee:	0039      	movs	r1, r7
 8003ff0:	f7ff ffac 	bl	8003f4c <sbrk_aligned>
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	d040      	beq.n	800407a <_malloc_r+0xea>
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	19db      	adds	r3, r3, r7
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	6833      	ldr	r3, [r6, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	2a00      	cmp	r2, #0
 8004004:	d133      	bne.n	800406e <_malloc_r+0xde>
 8004006:	9b00      	ldr	r3, [sp, #0]
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	e019      	b.n	8004040 <_malloc_r+0xb0>
 800400c:	2b00      	cmp	r3, #0
 800400e:	dac9      	bge.n	8003fa4 <_malloc_r+0x14>
 8004010:	230c      	movs	r3, #12
 8004012:	602b      	str	r3, [r5, #0]
 8004014:	2000      	movs	r0, #0
 8004016:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004018:	6821      	ldr	r1, [r4, #0]
 800401a:	1bc9      	subs	r1, r1, r7
 800401c:	d420      	bmi.n	8004060 <_malloc_r+0xd0>
 800401e:	290b      	cmp	r1, #11
 8004020:	d90a      	bls.n	8004038 <_malloc_r+0xa8>
 8004022:	19e2      	adds	r2, r4, r7
 8004024:	6027      	str	r7, [r4, #0]
 8004026:	42a3      	cmp	r3, r4
 8004028:	d104      	bne.n	8004034 <_malloc_r+0xa4>
 800402a:	6032      	str	r2, [r6, #0]
 800402c:	6863      	ldr	r3, [r4, #4]
 800402e:	6011      	str	r1, [r2, #0]
 8004030:	6053      	str	r3, [r2, #4]
 8004032:	e005      	b.n	8004040 <_malloc_r+0xb0>
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	e7f9      	b.n	800402c <_malloc_r+0x9c>
 8004038:	6862      	ldr	r2, [r4, #4]
 800403a:	42a3      	cmp	r3, r4
 800403c:	d10e      	bne.n	800405c <_malloc_r+0xcc>
 800403e:	6032      	str	r2, [r6, #0]
 8004040:	0028      	movs	r0, r5
 8004042:	f000 f82d 	bl	80040a0 <__malloc_unlock>
 8004046:	0020      	movs	r0, r4
 8004048:	2207      	movs	r2, #7
 800404a:	300b      	adds	r0, #11
 800404c:	1d23      	adds	r3, r4, #4
 800404e:	4390      	bics	r0, r2
 8004050:	1ac2      	subs	r2, r0, r3
 8004052:	4298      	cmp	r0, r3
 8004054:	d0df      	beq.n	8004016 <_malloc_r+0x86>
 8004056:	1a1b      	subs	r3, r3, r0
 8004058:	50a3      	str	r3, [r4, r2]
 800405a:	e7dc      	b.n	8004016 <_malloc_r+0x86>
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	e7ef      	b.n	8004040 <_malloc_r+0xb0>
 8004060:	0023      	movs	r3, r4
 8004062:	6864      	ldr	r4, [r4, #4]
 8004064:	e7a6      	b.n	8003fb4 <_malloc_r+0x24>
 8004066:	9c00      	ldr	r4, [sp, #0]
 8004068:	6863      	ldr	r3, [r4, #4]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	e7ad      	b.n	8003fca <_malloc_r+0x3a>
 800406e:	001a      	movs	r2, r3
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	42a3      	cmp	r3, r4
 8004074:	d1fb      	bne.n	800406e <_malloc_r+0xde>
 8004076:	2300      	movs	r3, #0
 8004078:	e7da      	b.n	8004030 <_malloc_r+0xa0>
 800407a:	230c      	movs	r3, #12
 800407c:	0028      	movs	r0, r5
 800407e:	602b      	str	r3, [r5, #0]
 8004080:	f000 f80e 	bl	80040a0 <__malloc_unlock>
 8004084:	e7c6      	b.n	8004014 <_malloc_r+0x84>
 8004086:	6007      	str	r7, [r0, #0]
 8004088:	e7da      	b.n	8004040 <_malloc_r+0xb0>
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	200003c8 	.word	0x200003c8

08004090 <__malloc_lock>:
 8004090:	b510      	push	{r4, lr}
 8004092:	4802      	ldr	r0, [pc, #8]	@ (800409c <__malloc_lock+0xc>)
 8004094:	f7ff ff0e 	bl	8003eb4 <__retarget_lock_acquire_recursive>
 8004098:	bd10      	pop	{r4, pc}
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	200003c0 	.word	0x200003c0

080040a0 <__malloc_unlock>:
 80040a0:	b510      	push	{r4, lr}
 80040a2:	4802      	ldr	r0, [pc, #8]	@ (80040ac <__malloc_unlock+0xc>)
 80040a4:	f7ff ff07 	bl	8003eb6 <__retarget_lock_release_recursive>
 80040a8:	bd10      	pop	{r4, pc}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	200003c0 	.word	0x200003c0

080040b0 <__ssputs_r>:
 80040b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b2:	688e      	ldr	r6, [r1, #8]
 80040b4:	b085      	sub	sp, #20
 80040b6:	001f      	movs	r7, r3
 80040b8:	000c      	movs	r4, r1
 80040ba:	680b      	ldr	r3, [r1, #0]
 80040bc:	9002      	str	r0, [sp, #8]
 80040be:	9203      	str	r2, [sp, #12]
 80040c0:	42be      	cmp	r6, r7
 80040c2:	d830      	bhi.n	8004126 <__ssputs_r+0x76>
 80040c4:	210c      	movs	r1, #12
 80040c6:	5e62      	ldrsh	r2, [r4, r1]
 80040c8:	2190      	movs	r1, #144	@ 0x90
 80040ca:	00c9      	lsls	r1, r1, #3
 80040cc:	420a      	tst	r2, r1
 80040ce:	d028      	beq.n	8004122 <__ssputs_r+0x72>
 80040d0:	2003      	movs	r0, #3
 80040d2:	6921      	ldr	r1, [r4, #16]
 80040d4:	1a5b      	subs	r3, r3, r1
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	6963      	ldr	r3, [r4, #20]
 80040da:	4343      	muls	r3, r0
 80040dc:	9801      	ldr	r0, [sp, #4]
 80040de:	0fdd      	lsrs	r5, r3, #31
 80040e0:	18ed      	adds	r5, r5, r3
 80040e2:	1c7b      	adds	r3, r7, #1
 80040e4:	181b      	adds	r3, r3, r0
 80040e6:	106d      	asrs	r5, r5, #1
 80040e8:	42ab      	cmp	r3, r5
 80040ea:	d900      	bls.n	80040ee <__ssputs_r+0x3e>
 80040ec:	001d      	movs	r5, r3
 80040ee:	0552      	lsls	r2, r2, #21
 80040f0:	d528      	bpl.n	8004144 <__ssputs_r+0x94>
 80040f2:	0029      	movs	r1, r5
 80040f4:	9802      	ldr	r0, [sp, #8]
 80040f6:	f7ff ff4b 	bl	8003f90 <_malloc_r>
 80040fa:	1e06      	subs	r6, r0, #0
 80040fc:	d02c      	beq.n	8004158 <__ssputs_r+0xa8>
 80040fe:	9a01      	ldr	r2, [sp, #4]
 8004100:	6921      	ldr	r1, [r4, #16]
 8004102:	f000 fade 	bl	80046c2 <memcpy>
 8004106:	89a2      	ldrh	r2, [r4, #12]
 8004108:	4b18      	ldr	r3, [pc, #96]	@ (800416c <__ssputs_r+0xbc>)
 800410a:	401a      	ands	r2, r3
 800410c:	2380      	movs	r3, #128	@ 0x80
 800410e:	4313      	orrs	r3, r2
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	9b01      	ldr	r3, [sp, #4]
 8004114:	6126      	str	r6, [r4, #16]
 8004116:	18f6      	adds	r6, r6, r3
 8004118:	6026      	str	r6, [r4, #0]
 800411a:	003e      	movs	r6, r7
 800411c:	6165      	str	r5, [r4, #20]
 800411e:	1aed      	subs	r5, r5, r3
 8004120:	60a5      	str	r5, [r4, #8]
 8004122:	42be      	cmp	r6, r7
 8004124:	d900      	bls.n	8004128 <__ssputs_r+0x78>
 8004126:	003e      	movs	r6, r7
 8004128:	0032      	movs	r2, r6
 800412a:	9903      	ldr	r1, [sp, #12]
 800412c:	6820      	ldr	r0, [r4, #0]
 800412e:	f000 fa99 	bl	8004664 <memmove>
 8004132:	2000      	movs	r0, #0
 8004134:	68a3      	ldr	r3, [r4, #8]
 8004136:	1b9b      	subs	r3, r3, r6
 8004138:	60a3      	str	r3, [r4, #8]
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	199b      	adds	r3, r3, r6
 800413e:	6023      	str	r3, [r4, #0]
 8004140:	b005      	add	sp, #20
 8004142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004144:	002a      	movs	r2, r5
 8004146:	9802      	ldr	r0, [sp, #8]
 8004148:	f000 fac4 	bl	80046d4 <_realloc_r>
 800414c:	1e06      	subs	r6, r0, #0
 800414e:	d1e0      	bne.n	8004112 <__ssputs_r+0x62>
 8004150:	6921      	ldr	r1, [r4, #16]
 8004152:	9802      	ldr	r0, [sp, #8]
 8004154:	f7ff feb0 	bl	8003eb8 <_free_r>
 8004158:	230c      	movs	r3, #12
 800415a:	2001      	movs	r0, #1
 800415c:	9a02      	ldr	r2, [sp, #8]
 800415e:	4240      	negs	r0, r0
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	89a2      	ldrh	r2, [r4, #12]
 8004164:	3334      	adds	r3, #52	@ 0x34
 8004166:	4313      	orrs	r3, r2
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	e7e9      	b.n	8004140 <__ssputs_r+0x90>
 800416c:	fffffb7f 	.word	0xfffffb7f

08004170 <_svfiprintf_r>:
 8004170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004172:	b0a1      	sub	sp, #132	@ 0x84
 8004174:	9003      	str	r0, [sp, #12]
 8004176:	001d      	movs	r5, r3
 8004178:	898b      	ldrh	r3, [r1, #12]
 800417a:	000f      	movs	r7, r1
 800417c:	0016      	movs	r6, r2
 800417e:	061b      	lsls	r3, r3, #24
 8004180:	d511      	bpl.n	80041a6 <_svfiprintf_r+0x36>
 8004182:	690b      	ldr	r3, [r1, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10e      	bne.n	80041a6 <_svfiprintf_r+0x36>
 8004188:	2140      	movs	r1, #64	@ 0x40
 800418a:	f7ff ff01 	bl	8003f90 <_malloc_r>
 800418e:	6038      	str	r0, [r7, #0]
 8004190:	6138      	str	r0, [r7, #16]
 8004192:	2800      	cmp	r0, #0
 8004194:	d105      	bne.n	80041a2 <_svfiprintf_r+0x32>
 8004196:	230c      	movs	r3, #12
 8004198:	9a03      	ldr	r2, [sp, #12]
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	2001      	movs	r0, #1
 800419e:	4240      	negs	r0, r0
 80041a0:	e0cf      	b.n	8004342 <_svfiprintf_r+0x1d2>
 80041a2:	2340      	movs	r3, #64	@ 0x40
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	2300      	movs	r3, #0
 80041a8:	ac08      	add	r4, sp, #32
 80041aa:	6163      	str	r3, [r4, #20]
 80041ac:	3320      	adds	r3, #32
 80041ae:	7663      	strb	r3, [r4, #25]
 80041b0:	3310      	adds	r3, #16
 80041b2:	76a3      	strb	r3, [r4, #26]
 80041b4:	9507      	str	r5, [sp, #28]
 80041b6:	0035      	movs	r5, r6
 80041b8:	782b      	ldrb	r3, [r5, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <_svfiprintf_r+0x52>
 80041be:	2b25      	cmp	r3, #37	@ 0x25
 80041c0:	d148      	bne.n	8004254 <_svfiprintf_r+0xe4>
 80041c2:	1bab      	subs	r3, r5, r6
 80041c4:	9305      	str	r3, [sp, #20]
 80041c6:	42b5      	cmp	r5, r6
 80041c8:	d00b      	beq.n	80041e2 <_svfiprintf_r+0x72>
 80041ca:	0032      	movs	r2, r6
 80041cc:	0039      	movs	r1, r7
 80041ce:	9803      	ldr	r0, [sp, #12]
 80041d0:	f7ff ff6e 	bl	80040b0 <__ssputs_r>
 80041d4:	3001      	adds	r0, #1
 80041d6:	d100      	bne.n	80041da <_svfiprintf_r+0x6a>
 80041d8:	e0ae      	b.n	8004338 <_svfiprintf_r+0x1c8>
 80041da:	6963      	ldr	r3, [r4, #20]
 80041dc:	9a05      	ldr	r2, [sp, #20]
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	6163      	str	r3, [r4, #20]
 80041e2:	782b      	ldrb	r3, [r5, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d100      	bne.n	80041ea <_svfiprintf_r+0x7a>
 80041e8:	e0a6      	b.n	8004338 <_svfiprintf_r+0x1c8>
 80041ea:	2201      	movs	r2, #1
 80041ec:	2300      	movs	r3, #0
 80041ee:	4252      	negs	r2, r2
 80041f0:	6062      	str	r2, [r4, #4]
 80041f2:	a904      	add	r1, sp, #16
 80041f4:	3254      	adds	r2, #84	@ 0x54
 80041f6:	1852      	adds	r2, r2, r1
 80041f8:	1c6e      	adds	r6, r5, #1
 80041fa:	6023      	str	r3, [r4, #0]
 80041fc:	60e3      	str	r3, [r4, #12]
 80041fe:	60a3      	str	r3, [r4, #8]
 8004200:	7013      	strb	r3, [r2, #0]
 8004202:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004204:	4b54      	ldr	r3, [pc, #336]	@ (8004358 <_svfiprintf_r+0x1e8>)
 8004206:	2205      	movs	r2, #5
 8004208:	0018      	movs	r0, r3
 800420a:	7831      	ldrb	r1, [r6, #0]
 800420c:	9305      	str	r3, [sp, #20]
 800420e:	f000 fa4d 	bl	80046ac <memchr>
 8004212:	1c75      	adds	r5, r6, #1
 8004214:	2800      	cmp	r0, #0
 8004216:	d11f      	bne.n	8004258 <_svfiprintf_r+0xe8>
 8004218:	6822      	ldr	r2, [r4, #0]
 800421a:	06d3      	lsls	r3, r2, #27
 800421c:	d504      	bpl.n	8004228 <_svfiprintf_r+0xb8>
 800421e:	2353      	movs	r3, #83	@ 0x53
 8004220:	a904      	add	r1, sp, #16
 8004222:	185b      	adds	r3, r3, r1
 8004224:	2120      	movs	r1, #32
 8004226:	7019      	strb	r1, [r3, #0]
 8004228:	0713      	lsls	r3, r2, #28
 800422a:	d504      	bpl.n	8004236 <_svfiprintf_r+0xc6>
 800422c:	2353      	movs	r3, #83	@ 0x53
 800422e:	a904      	add	r1, sp, #16
 8004230:	185b      	adds	r3, r3, r1
 8004232:	212b      	movs	r1, #43	@ 0x2b
 8004234:	7019      	strb	r1, [r3, #0]
 8004236:	7833      	ldrb	r3, [r6, #0]
 8004238:	2b2a      	cmp	r3, #42	@ 0x2a
 800423a:	d016      	beq.n	800426a <_svfiprintf_r+0xfa>
 800423c:	0035      	movs	r5, r6
 800423e:	2100      	movs	r1, #0
 8004240:	200a      	movs	r0, #10
 8004242:	68e3      	ldr	r3, [r4, #12]
 8004244:	782a      	ldrb	r2, [r5, #0]
 8004246:	1c6e      	adds	r6, r5, #1
 8004248:	3a30      	subs	r2, #48	@ 0x30
 800424a:	2a09      	cmp	r2, #9
 800424c:	d950      	bls.n	80042f0 <_svfiprintf_r+0x180>
 800424e:	2900      	cmp	r1, #0
 8004250:	d111      	bne.n	8004276 <_svfiprintf_r+0x106>
 8004252:	e017      	b.n	8004284 <_svfiprintf_r+0x114>
 8004254:	3501      	adds	r5, #1
 8004256:	e7af      	b.n	80041b8 <_svfiprintf_r+0x48>
 8004258:	9b05      	ldr	r3, [sp, #20]
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	1ac0      	subs	r0, r0, r3
 800425e:	2301      	movs	r3, #1
 8004260:	4083      	lsls	r3, r0
 8004262:	4313      	orrs	r3, r2
 8004264:	002e      	movs	r6, r5
 8004266:	6023      	str	r3, [r4, #0]
 8004268:	e7cc      	b.n	8004204 <_svfiprintf_r+0x94>
 800426a:	9b07      	ldr	r3, [sp, #28]
 800426c:	1d19      	adds	r1, r3, #4
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	9107      	str	r1, [sp, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	db01      	blt.n	800427a <_svfiprintf_r+0x10a>
 8004276:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004278:	e004      	b.n	8004284 <_svfiprintf_r+0x114>
 800427a:	425b      	negs	r3, r3
 800427c:	60e3      	str	r3, [r4, #12]
 800427e:	2302      	movs	r3, #2
 8004280:	4313      	orrs	r3, r2
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	782b      	ldrb	r3, [r5, #0]
 8004286:	2b2e      	cmp	r3, #46	@ 0x2e
 8004288:	d10c      	bne.n	80042a4 <_svfiprintf_r+0x134>
 800428a:	786b      	ldrb	r3, [r5, #1]
 800428c:	2b2a      	cmp	r3, #42	@ 0x2a
 800428e:	d134      	bne.n	80042fa <_svfiprintf_r+0x18a>
 8004290:	9b07      	ldr	r3, [sp, #28]
 8004292:	3502      	adds	r5, #2
 8004294:	1d1a      	adds	r2, r3, #4
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	9207      	str	r2, [sp, #28]
 800429a:	2b00      	cmp	r3, #0
 800429c:	da01      	bge.n	80042a2 <_svfiprintf_r+0x132>
 800429e:	2301      	movs	r3, #1
 80042a0:	425b      	negs	r3, r3
 80042a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80042a4:	4e2d      	ldr	r6, [pc, #180]	@ (800435c <_svfiprintf_r+0x1ec>)
 80042a6:	2203      	movs	r2, #3
 80042a8:	0030      	movs	r0, r6
 80042aa:	7829      	ldrb	r1, [r5, #0]
 80042ac:	f000 f9fe 	bl	80046ac <memchr>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d006      	beq.n	80042c2 <_svfiprintf_r+0x152>
 80042b4:	2340      	movs	r3, #64	@ 0x40
 80042b6:	1b80      	subs	r0, r0, r6
 80042b8:	4083      	lsls	r3, r0
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	3501      	adds	r5, #1
 80042be:	4313      	orrs	r3, r2
 80042c0:	6023      	str	r3, [r4, #0]
 80042c2:	7829      	ldrb	r1, [r5, #0]
 80042c4:	2206      	movs	r2, #6
 80042c6:	4826      	ldr	r0, [pc, #152]	@ (8004360 <_svfiprintf_r+0x1f0>)
 80042c8:	1c6e      	adds	r6, r5, #1
 80042ca:	7621      	strb	r1, [r4, #24]
 80042cc:	f000 f9ee 	bl	80046ac <memchr>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d038      	beq.n	8004346 <_svfiprintf_r+0x1d6>
 80042d4:	4b23      	ldr	r3, [pc, #140]	@ (8004364 <_svfiprintf_r+0x1f4>)
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d122      	bne.n	8004320 <_svfiprintf_r+0x1b0>
 80042da:	2207      	movs	r2, #7
 80042dc:	9b07      	ldr	r3, [sp, #28]
 80042de:	3307      	adds	r3, #7
 80042e0:	4393      	bics	r3, r2
 80042e2:	3308      	adds	r3, #8
 80042e4:	9307      	str	r3, [sp, #28]
 80042e6:	6963      	ldr	r3, [r4, #20]
 80042e8:	9a04      	ldr	r2, [sp, #16]
 80042ea:	189b      	adds	r3, r3, r2
 80042ec:	6163      	str	r3, [r4, #20]
 80042ee:	e762      	b.n	80041b6 <_svfiprintf_r+0x46>
 80042f0:	4343      	muls	r3, r0
 80042f2:	0035      	movs	r5, r6
 80042f4:	2101      	movs	r1, #1
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	e7a4      	b.n	8004244 <_svfiprintf_r+0xd4>
 80042fa:	2300      	movs	r3, #0
 80042fc:	200a      	movs	r0, #10
 80042fe:	0019      	movs	r1, r3
 8004300:	3501      	adds	r5, #1
 8004302:	6063      	str	r3, [r4, #4]
 8004304:	782a      	ldrb	r2, [r5, #0]
 8004306:	1c6e      	adds	r6, r5, #1
 8004308:	3a30      	subs	r2, #48	@ 0x30
 800430a:	2a09      	cmp	r2, #9
 800430c:	d903      	bls.n	8004316 <_svfiprintf_r+0x1a6>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0c8      	beq.n	80042a4 <_svfiprintf_r+0x134>
 8004312:	9109      	str	r1, [sp, #36]	@ 0x24
 8004314:	e7c6      	b.n	80042a4 <_svfiprintf_r+0x134>
 8004316:	4341      	muls	r1, r0
 8004318:	0035      	movs	r5, r6
 800431a:	2301      	movs	r3, #1
 800431c:	1889      	adds	r1, r1, r2
 800431e:	e7f1      	b.n	8004304 <_svfiprintf_r+0x194>
 8004320:	aa07      	add	r2, sp, #28
 8004322:	9200      	str	r2, [sp, #0]
 8004324:	0021      	movs	r1, r4
 8004326:	003a      	movs	r2, r7
 8004328:	4b0f      	ldr	r3, [pc, #60]	@ (8004368 <_svfiprintf_r+0x1f8>)
 800432a:	9803      	ldr	r0, [sp, #12]
 800432c:	e000      	b.n	8004330 <_svfiprintf_r+0x1c0>
 800432e:	bf00      	nop
 8004330:	9004      	str	r0, [sp, #16]
 8004332:	9b04      	ldr	r3, [sp, #16]
 8004334:	3301      	adds	r3, #1
 8004336:	d1d6      	bne.n	80042e6 <_svfiprintf_r+0x176>
 8004338:	89bb      	ldrh	r3, [r7, #12]
 800433a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800433c:	065b      	lsls	r3, r3, #25
 800433e:	d500      	bpl.n	8004342 <_svfiprintf_r+0x1d2>
 8004340:	e72c      	b.n	800419c <_svfiprintf_r+0x2c>
 8004342:	b021      	add	sp, #132	@ 0x84
 8004344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004346:	aa07      	add	r2, sp, #28
 8004348:	9200      	str	r2, [sp, #0]
 800434a:	0021      	movs	r1, r4
 800434c:	003a      	movs	r2, r7
 800434e:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <_svfiprintf_r+0x1f8>)
 8004350:	9803      	ldr	r0, [sp, #12]
 8004352:	f000 f87b 	bl	800444c <_printf_i>
 8004356:	e7eb      	b.n	8004330 <_svfiprintf_r+0x1c0>
 8004358:	08004840 	.word	0x08004840
 800435c:	08004846 	.word	0x08004846
 8004360:	0800484a 	.word	0x0800484a
 8004364:	00000000 	.word	0x00000000
 8004368:	080040b1 	.word	0x080040b1

0800436c <_printf_common>:
 800436c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800436e:	0016      	movs	r6, r2
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	688a      	ldr	r2, [r1, #8]
 8004374:	690b      	ldr	r3, [r1, #16]
 8004376:	000c      	movs	r4, r1
 8004378:	9000      	str	r0, [sp, #0]
 800437a:	4293      	cmp	r3, r2
 800437c:	da00      	bge.n	8004380 <_printf_common+0x14>
 800437e:	0013      	movs	r3, r2
 8004380:	0022      	movs	r2, r4
 8004382:	6033      	str	r3, [r6, #0]
 8004384:	3243      	adds	r2, #67	@ 0x43
 8004386:	7812      	ldrb	r2, [r2, #0]
 8004388:	2a00      	cmp	r2, #0
 800438a:	d001      	beq.n	8004390 <_printf_common+0x24>
 800438c:	3301      	adds	r3, #1
 800438e:	6033      	str	r3, [r6, #0]
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	069b      	lsls	r3, r3, #26
 8004394:	d502      	bpl.n	800439c <_printf_common+0x30>
 8004396:	6833      	ldr	r3, [r6, #0]
 8004398:	3302      	adds	r3, #2
 800439a:	6033      	str	r3, [r6, #0]
 800439c:	6822      	ldr	r2, [r4, #0]
 800439e:	2306      	movs	r3, #6
 80043a0:	0015      	movs	r5, r2
 80043a2:	401d      	ands	r5, r3
 80043a4:	421a      	tst	r2, r3
 80043a6:	d027      	beq.n	80043f8 <_printf_common+0x8c>
 80043a8:	0023      	movs	r3, r4
 80043aa:	3343      	adds	r3, #67	@ 0x43
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	1e5a      	subs	r2, r3, #1
 80043b0:	4193      	sbcs	r3, r2
 80043b2:	6822      	ldr	r2, [r4, #0]
 80043b4:	0692      	lsls	r2, r2, #26
 80043b6:	d430      	bmi.n	800441a <_printf_common+0xae>
 80043b8:	0022      	movs	r2, r4
 80043ba:	9901      	ldr	r1, [sp, #4]
 80043bc:	9800      	ldr	r0, [sp, #0]
 80043be:	9d08      	ldr	r5, [sp, #32]
 80043c0:	3243      	adds	r2, #67	@ 0x43
 80043c2:	47a8      	blx	r5
 80043c4:	3001      	adds	r0, #1
 80043c6:	d025      	beq.n	8004414 <_printf_common+0xa8>
 80043c8:	2206      	movs	r2, #6
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	2500      	movs	r5, #0
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d105      	bne.n	80043e0 <_printf_common+0x74>
 80043d4:	6833      	ldr	r3, [r6, #0]
 80043d6:	68e5      	ldr	r5, [r4, #12]
 80043d8:	1aed      	subs	r5, r5, r3
 80043da:	43eb      	mvns	r3, r5
 80043dc:	17db      	asrs	r3, r3, #31
 80043de:	401d      	ands	r5, r3
 80043e0:	68a3      	ldr	r3, [r4, #8]
 80043e2:	6922      	ldr	r2, [r4, #16]
 80043e4:	4293      	cmp	r3, r2
 80043e6:	dd01      	ble.n	80043ec <_printf_common+0x80>
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	18ed      	adds	r5, r5, r3
 80043ec:	2600      	movs	r6, #0
 80043ee:	42b5      	cmp	r5, r6
 80043f0:	d120      	bne.n	8004434 <_printf_common+0xc8>
 80043f2:	2000      	movs	r0, #0
 80043f4:	e010      	b.n	8004418 <_printf_common+0xac>
 80043f6:	3501      	adds	r5, #1
 80043f8:	68e3      	ldr	r3, [r4, #12]
 80043fa:	6832      	ldr	r2, [r6, #0]
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	42ab      	cmp	r3, r5
 8004400:	ddd2      	ble.n	80043a8 <_printf_common+0x3c>
 8004402:	0022      	movs	r2, r4
 8004404:	2301      	movs	r3, #1
 8004406:	9901      	ldr	r1, [sp, #4]
 8004408:	9800      	ldr	r0, [sp, #0]
 800440a:	9f08      	ldr	r7, [sp, #32]
 800440c:	3219      	adds	r2, #25
 800440e:	47b8      	blx	r7
 8004410:	3001      	adds	r0, #1
 8004412:	d1f0      	bne.n	80043f6 <_printf_common+0x8a>
 8004414:	2001      	movs	r0, #1
 8004416:	4240      	negs	r0, r0
 8004418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800441a:	2030      	movs	r0, #48	@ 0x30
 800441c:	18e1      	adds	r1, r4, r3
 800441e:	3143      	adds	r1, #67	@ 0x43
 8004420:	7008      	strb	r0, [r1, #0]
 8004422:	0021      	movs	r1, r4
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	3145      	adds	r1, #69	@ 0x45
 8004428:	7809      	ldrb	r1, [r1, #0]
 800442a:	18a2      	adds	r2, r4, r2
 800442c:	3243      	adds	r2, #67	@ 0x43
 800442e:	3302      	adds	r3, #2
 8004430:	7011      	strb	r1, [r2, #0]
 8004432:	e7c1      	b.n	80043b8 <_printf_common+0x4c>
 8004434:	0022      	movs	r2, r4
 8004436:	2301      	movs	r3, #1
 8004438:	9901      	ldr	r1, [sp, #4]
 800443a:	9800      	ldr	r0, [sp, #0]
 800443c:	9f08      	ldr	r7, [sp, #32]
 800443e:	321a      	adds	r2, #26
 8004440:	47b8      	blx	r7
 8004442:	3001      	adds	r0, #1
 8004444:	d0e6      	beq.n	8004414 <_printf_common+0xa8>
 8004446:	3601      	adds	r6, #1
 8004448:	e7d1      	b.n	80043ee <_printf_common+0x82>
	...

0800444c <_printf_i>:
 800444c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444e:	b08b      	sub	sp, #44	@ 0x2c
 8004450:	9206      	str	r2, [sp, #24]
 8004452:	000a      	movs	r2, r1
 8004454:	3243      	adds	r2, #67	@ 0x43
 8004456:	9307      	str	r3, [sp, #28]
 8004458:	9005      	str	r0, [sp, #20]
 800445a:	9203      	str	r2, [sp, #12]
 800445c:	7e0a      	ldrb	r2, [r1, #24]
 800445e:	000c      	movs	r4, r1
 8004460:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004462:	2a78      	cmp	r2, #120	@ 0x78
 8004464:	d809      	bhi.n	800447a <_printf_i+0x2e>
 8004466:	2a62      	cmp	r2, #98	@ 0x62
 8004468:	d80b      	bhi.n	8004482 <_printf_i+0x36>
 800446a:	2a00      	cmp	r2, #0
 800446c:	d100      	bne.n	8004470 <_printf_i+0x24>
 800446e:	e0ba      	b.n	80045e6 <_printf_i+0x19a>
 8004470:	497a      	ldr	r1, [pc, #488]	@ (800465c <_printf_i+0x210>)
 8004472:	9104      	str	r1, [sp, #16]
 8004474:	2a58      	cmp	r2, #88	@ 0x58
 8004476:	d100      	bne.n	800447a <_printf_i+0x2e>
 8004478:	e08e      	b.n	8004598 <_printf_i+0x14c>
 800447a:	0025      	movs	r5, r4
 800447c:	3542      	adds	r5, #66	@ 0x42
 800447e:	702a      	strb	r2, [r5, #0]
 8004480:	e022      	b.n	80044c8 <_printf_i+0x7c>
 8004482:	0010      	movs	r0, r2
 8004484:	3863      	subs	r0, #99	@ 0x63
 8004486:	2815      	cmp	r0, #21
 8004488:	d8f7      	bhi.n	800447a <_printf_i+0x2e>
 800448a:	f7fb fe45 	bl	8000118 <__gnu_thumb1_case_shi>
 800448e:	0016      	.short	0x0016
 8004490:	fff6001f 	.word	0xfff6001f
 8004494:	fff6fff6 	.word	0xfff6fff6
 8004498:	001ffff6 	.word	0x001ffff6
 800449c:	fff6fff6 	.word	0xfff6fff6
 80044a0:	fff6fff6 	.word	0xfff6fff6
 80044a4:	0036009f 	.word	0x0036009f
 80044a8:	fff6007e 	.word	0xfff6007e
 80044ac:	00b0fff6 	.word	0x00b0fff6
 80044b0:	0036fff6 	.word	0x0036fff6
 80044b4:	fff6fff6 	.word	0xfff6fff6
 80044b8:	0082      	.short	0x0082
 80044ba:	0025      	movs	r5, r4
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	3542      	adds	r5, #66	@ 0x42
 80044c0:	1d11      	adds	r1, r2, #4
 80044c2:	6019      	str	r1, [r3, #0]
 80044c4:	6813      	ldr	r3, [r2, #0]
 80044c6:	702b      	strb	r3, [r5, #0]
 80044c8:	2301      	movs	r3, #1
 80044ca:	e09e      	b.n	800460a <_printf_i+0x1be>
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	6809      	ldr	r1, [r1, #0]
 80044d0:	1d02      	adds	r2, r0, #4
 80044d2:	060d      	lsls	r5, r1, #24
 80044d4:	d50b      	bpl.n	80044ee <_printf_i+0xa2>
 80044d6:	6806      	ldr	r6, [r0, #0]
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	2e00      	cmp	r6, #0
 80044dc:	da03      	bge.n	80044e6 <_printf_i+0x9a>
 80044de:	232d      	movs	r3, #45	@ 0x2d
 80044e0:	9a03      	ldr	r2, [sp, #12]
 80044e2:	4276      	negs	r6, r6
 80044e4:	7013      	strb	r3, [r2, #0]
 80044e6:	4b5d      	ldr	r3, [pc, #372]	@ (800465c <_printf_i+0x210>)
 80044e8:	270a      	movs	r7, #10
 80044ea:	9304      	str	r3, [sp, #16]
 80044ec:	e018      	b.n	8004520 <_printf_i+0xd4>
 80044ee:	6806      	ldr	r6, [r0, #0]
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	0649      	lsls	r1, r1, #25
 80044f4:	d5f1      	bpl.n	80044da <_printf_i+0x8e>
 80044f6:	b236      	sxth	r6, r6
 80044f8:	e7ef      	b.n	80044da <_printf_i+0x8e>
 80044fa:	6808      	ldr	r0, [r1, #0]
 80044fc:	6819      	ldr	r1, [r3, #0]
 80044fe:	c940      	ldmia	r1!, {r6}
 8004500:	0605      	lsls	r5, r0, #24
 8004502:	d402      	bmi.n	800450a <_printf_i+0xbe>
 8004504:	0640      	lsls	r0, r0, #25
 8004506:	d500      	bpl.n	800450a <_printf_i+0xbe>
 8004508:	b2b6      	uxth	r6, r6
 800450a:	6019      	str	r1, [r3, #0]
 800450c:	4b53      	ldr	r3, [pc, #332]	@ (800465c <_printf_i+0x210>)
 800450e:	270a      	movs	r7, #10
 8004510:	9304      	str	r3, [sp, #16]
 8004512:	2a6f      	cmp	r2, #111	@ 0x6f
 8004514:	d100      	bne.n	8004518 <_printf_i+0xcc>
 8004516:	3f02      	subs	r7, #2
 8004518:	0023      	movs	r3, r4
 800451a:	2200      	movs	r2, #0
 800451c:	3343      	adds	r3, #67	@ 0x43
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	6863      	ldr	r3, [r4, #4]
 8004522:	60a3      	str	r3, [r4, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	db06      	blt.n	8004536 <_printf_i+0xea>
 8004528:	2104      	movs	r1, #4
 800452a:	6822      	ldr	r2, [r4, #0]
 800452c:	9d03      	ldr	r5, [sp, #12]
 800452e:	438a      	bics	r2, r1
 8004530:	6022      	str	r2, [r4, #0]
 8004532:	4333      	orrs	r3, r6
 8004534:	d00c      	beq.n	8004550 <_printf_i+0x104>
 8004536:	9d03      	ldr	r5, [sp, #12]
 8004538:	0030      	movs	r0, r6
 800453a:	0039      	movs	r1, r7
 800453c:	f7fb fe7c 	bl	8000238 <__aeabi_uidivmod>
 8004540:	9b04      	ldr	r3, [sp, #16]
 8004542:	3d01      	subs	r5, #1
 8004544:	5c5b      	ldrb	r3, [r3, r1]
 8004546:	702b      	strb	r3, [r5, #0]
 8004548:	0033      	movs	r3, r6
 800454a:	0006      	movs	r6, r0
 800454c:	429f      	cmp	r7, r3
 800454e:	d9f3      	bls.n	8004538 <_printf_i+0xec>
 8004550:	2f08      	cmp	r7, #8
 8004552:	d109      	bne.n	8004568 <_printf_i+0x11c>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	07db      	lsls	r3, r3, #31
 8004558:	d506      	bpl.n	8004568 <_printf_i+0x11c>
 800455a:	6862      	ldr	r2, [r4, #4]
 800455c:	6923      	ldr	r3, [r4, #16]
 800455e:	429a      	cmp	r2, r3
 8004560:	dc02      	bgt.n	8004568 <_printf_i+0x11c>
 8004562:	2330      	movs	r3, #48	@ 0x30
 8004564:	3d01      	subs	r5, #1
 8004566:	702b      	strb	r3, [r5, #0]
 8004568:	9b03      	ldr	r3, [sp, #12]
 800456a:	1b5b      	subs	r3, r3, r5
 800456c:	6123      	str	r3, [r4, #16]
 800456e:	9b07      	ldr	r3, [sp, #28]
 8004570:	0021      	movs	r1, r4
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	9805      	ldr	r0, [sp, #20]
 8004576:	9b06      	ldr	r3, [sp, #24]
 8004578:	aa09      	add	r2, sp, #36	@ 0x24
 800457a:	f7ff fef7 	bl	800436c <_printf_common>
 800457e:	3001      	adds	r0, #1
 8004580:	d148      	bne.n	8004614 <_printf_i+0x1c8>
 8004582:	2001      	movs	r0, #1
 8004584:	4240      	negs	r0, r0
 8004586:	b00b      	add	sp, #44	@ 0x2c
 8004588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800458a:	2220      	movs	r2, #32
 800458c:	6809      	ldr	r1, [r1, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	6022      	str	r2, [r4, #0]
 8004592:	2278      	movs	r2, #120	@ 0x78
 8004594:	4932      	ldr	r1, [pc, #200]	@ (8004660 <_printf_i+0x214>)
 8004596:	9104      	str	r1, [sp, #16]
 8004598:	0021      	movs	r1, r4
 800459a:	3145      	adds	r1, #69	@ 0x45
 800459c:	700a      	strb	r2, [r1, #0]
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	6822      	ldr	r2, [r4, #0]
 80045a2:	c940      	ldmia	r1!, {r6}
 80045a4:	0610      	lsls	r0, r2, #24
 80045a6:	d402      	bmi.n	80045ae <_printf_i+0x162>
 80045a8:	0650      	lsls	r0, r2, #25
 80045aa:	d500      	bpl.n	80045ae <_printf_i+0x162>
 80045ac:	b2b6      	uxth	r6, r6
 80045ae:	6019      	str	r1, [r3, #0]
 80045b0:	07d3      	lsls	r3, r2, #31
 80045b2:	d502      	bpl.n	80045ba <_printf_i+0x16e>
 80045b4:	2320      	movs	r3, #32
 80045b6:	4313      	orrs	r3, r2
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	2e00      	cmp	r6, #0
 80045bc:	d001      	beq.n	80045c2 <_printf_i+0x176>
 80045be:	2710      	movs	r7, #16
 80045c0:	e7aa      	b.n	8004518 <_printf_i+0xcc>
 80045c2:	2220      	movs	r2, #32
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	4393      	bics	r3, r2
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	e7f8      	b.n	80045be <_printf_i+0x172>
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	680d      	ldr	r5, [r1, #0]
 80045d0:	1d10      	adds	r0, r2, #4
 80045d2:	6949      	ldr	r1, [r1, #20]
 80045d4:	6018      	str	r0, [r3, #0]
 80045d6:	6813      	ldr	r3, [r2, #0]
 80045d8:	062e      	lsls	r6, r5, #24
 80045da:	d501      	bpl.n	80045e0 <_printf_i+0x194>
 80045dc:	6019      	str	r1, [r3, #0]
 80045de:	e002      	b.n	80045e6 <_printf_i+0x19a>
 80045e0:	066d      	lsls	r5, r5, #25
 80045e2:	d5fb      	bpl.n	80045dc <_printf_i+0x190>
 80045e4:	8019      	strh	r1, [r3, #0]
 80045e6:	2300      	movs	r3, #0
 80045e8:	9d03      	ldr	r5, [sp, #12]
 80045ea:	6123      	str	r3, [r4, #16]
 80045ec:	e7bf      	b.n	800456e <_printf_i+0x122>
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	1d11      	adds	r1, r2, #4
 80045f2:	6019      	str	r1, [r3, #0]
 80045f4:	6815      	ldr	r5, [r2, #0]
 80045f6:	2100      	movs	r1, #0
 80045f8:	0028      	movs	r0, r5
 80045fa:	6862      	ldr	r2, [r4, #4]
 80045fc:	f000 f856 	bl	80046ac <memchr>
 8004600:	2800      	cmp	r0, #0
 8004602:	d001      	beq.n	8004608 <_printf_i+0x1bc>
 8004604:	1b40      	subs	r0, r0, r5
 8004606:	6060      	str	r0, [r4, #4]
 8004608:	6863      	ldr	r3, [r4, #4]
 800460a:	6123      	str	r3, [r4, #16]
 800460c:	2300      	movs	r3, #0
 800460e:	9a03      	ldr	r2, [sp, #12]
 8004610:	7013      	strb	r3, [r2, #0]
 8004612:	e7ac      	b.n	800456e <_printf_i+0x122>
 8004614:	002a      	movs	r2, r5
 8004616:	6923      	ldr	r3, [r4, #16]
 8004618:	9906      	ldr	r1, [sp, #24]
 800461a:	9805      	ldr	r0, [sp, #20]
 800461c:	9d07      	ldr	r5, [sp, #28]
 800461e:	47a8      	blx	r5
 8004620:	3001      	adds	r0, #1
 8004622:	d0ae      	beq.n	8004582 <_printf_i+0x136>
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	079b      	lsls	r3, r3, #30
 8004628:	d415      	bmi.n	8004656 <_printf_i+0x20a>
 800462a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800462c:	68e0      	ldr	r0, [r4, #12]
 800462e:	4298      	cmp	r0, r3
 8004630:	daa9      	bge.n	8004586 <_printf_i+0x13a>
 8004632:	0018      	movs	r0, r3
 8004634:	e7a7      	b.n	8004586 <_printf_i+0x13a>
 8004636:	0022      	movs	r2, r4
 8004638:	2301      	movs	r3, #1
 800463a:	9906      	ldr	r1, [sp, #24]
 800463c:	9805      	ldr	r0, [sp, #20]
 800463e:	9e07      	ldr	r6, [sp, #28]
 8004640:	3219      	adds	r2, #25
 8004642:	47b0      	blx	r6
 8004644:	3001      	adds	r0, #1
 8004646:	d09c      	beq.n	8004582 <_printf_i+0x136>
 8004648:	3501      	adds	r5, #1
 800464a:	68e3      	ldr	r3, [r4, #12]
 800464c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	42ab      	cmp	r3, r5
 8004652:	dcf0      	bgt.n	8004636 <_printf_i+0x1ea>
 8004654:	e7e9      	b.n	800462a <_printf_i+0x1de>
 8004656:	2500      	movs	r5, #0
 8004658:	e7f7      	b.n	800464a <_printf_i+0x1fe>
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	08004851 	.word	0x08004851
 8004660:	08004862 	.word	0x08004862

08004664 <memmove>:
 8004664:	b510      	push	{r4, lr}
 8004666:	4288      	cmp	r0, r1
 8004668:	d902      	bls.n	8004670 <memmove+0xc>
 800466a:	188b      	adds	r3, r1, r2
 800466c:	4298      	cmp	r0, r3
 800466e:	d308      	bcc.n	8004682 <memmove+0x1e>
 8004670:	2300      	movs	r3, #0
 8004672:	429a      	cmp	r2, r3
 8004674:	d007      	beq.n	8004686 <memmove+0x22>
 8004676:	5ccc      	ldrb	r4, [r1, r3]
 8004678:	54c4      	strb	r4, [r0, r3]
 800467a:	3301      	adds	r3, #1
 800467c:	e7f9      	b.n	8004672 <memmove+0xe>
 800467e:	5c8b      	ldrb	r3, [r1, r2]
 8004680:	5483      	strb	r3, [r0, r2]
 8004682:	3a01      	subs	r2, #1
 8004684:	d2fb      	bcs.n	800467e <memmove+0x1a>
 8004686:	bd10      	pop	{r4, pc}

08004688 <_sbrk_r>:
 8004688:	2300      	movs	r3, #0
 800468a:	b570      	push	{r4, r5, r6, lr}
 800468c:	4d06      	ldr	r5, [pc, #24]	@ (80046a8 <_sbrk_r+0x20>)
 800468e:	0004      	movs	r4, r0
 8004690:	0008      	movs	r0, r1
 8004692:	602b      	str	r3, [r5, #0]
 8004694:	f7fd fc54 	bl	8001f40 <_sbrk>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d103      	bne.n	80046a4 <_sbrk_r+0x1c>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d000      	beq.n	80046a4 <_sbrk_r+0x1c>
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	200003bc 	.word	0x200003bc

080046ac <memchr>:
 80046ac:	b2c9      	uxtb	r1, r1
 80046ae:	1882      	adds	r2, r0, r2
 80046b0:	4290      	cmp	r0, r2
 80046b2:	d101      	bne.n	80046b8 <memchr+0xc>
 80046b4:	2000      	movs	r0, #0
 80046b6:	4770      	bx	lr
 80046b8:	7803      	ldrb	r3, [r0, #0]
 80046ba:	428b      	cmp	r3, r1
 80046bc:	d0fb      	beq.n	80046b6 <memchr+0xa>
 80046be:	3001      	adds	r0, #1
 80046c0:	e7f6      	b.n	80046b0 <memchr+0x4>

080046c2 <memcpy>:
 80046c2:	2300      	movs	r3, #0
 80046c4:	b510      	push	{r4, lr}
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d100      	bne.n	80046cc <memcpy+0xa>
 80046ca:	bd10      	pop	{r4, pc}
 80046cc:	5ccc      	ldrb	r4, [r1, r3]
 80046ce:	54c4      	strb	r4, [r0, r3]
 80046d0:	3301      	adds	r3, #1
 80046d2:	e7f8      	b.n	80046c6 <memcpy+0x4>

080046d4 <_realloc_r>:
 80046d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046d6:	0006      	movs	r6, r0
 80046d8:	000c      	movs	r4, r1
 80046da:	0015      	movs	r5, r2
 80046dc:	2900      	cmp	r1, #0
 80046de:	d105      	bne.n	80046ec <_realloc_r+0x18>
 80046e0:	0011      	movs	r1, r2
 80046e2:	f7ff fc55 	bl	8003f90 <_malloc_r>
 80046e6:	0004      	movs	r4, r0
 80046e8:	0020      	movs	r0, r4
 80046ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046ec:	2a00      	cmp	r2, #0
 80046ee:	d103      	bne.n	80046f8 <_realloc_r+0x24>
 80046f0:	f7ff fbe2 	bl	8003eb8 <_free_r>
 80046f4:	002c      	movs	r4, r5
 80046f6:	e7f7      	b.n	80046e8 <_realloc_r+0x14>
 80046f8:	f000 f81c 	bl	8004734 <_malloc_usable_size_r>
 80046fc:	0007      	movs	r7, r0
 80046fe:	4285      	cmp	r5, r0
 8004700:	d802      	bhi.n	8004708 <_realloc_r+0x34>
 8004702:	0843      	lsrs	r3, r0, #1
 8004704:	42ab      	cmp	r3, r5
 8004706:	d3ef      	bcc.n	80046e8 <_realloc_r+0x14>
 8004708:	0029      	movs	r1, r5
 800470a:	0030      	movs	r0, r6
 800470c:	f7ff fc40 	bl	8003f90 <_malloc_r>
 8004710:	9001      	str	r0, [sp, #4]
 8004712:	2800      	cmp	r0, #0
 8004714:	d101      	bne.n	800471a <_realloc_r+0x46>
 8004716:	9c01      	ldr	r4, [sp, #4]
 8004718:	e7e6      	b.n	80046e8 <_realloc_r+0x14>
 800471a:	002a      	movs	r2, r5
 800471c:	42bd      	cmp	r5, r7
 800471e:	d900      	bls.n	8004722 <_realloc_r+0x4e>
 8004720:	003a      	movs	r2, r7
 8004722:	0021      	movs	r1, r4
 8004724:	9801      	ldr	r0, [sp, #4]
 8004726:	f7ff ffcc 	bl	80046c2 <memcpy>
 800472a:	0021      	movs	r1, r4
 800472c:	0030      	movs	r0, r6
 800472e:	f7ff fbc3 	bl	8003eb8 <_free_r>
 8004732:	e7f0      	b.n	8004716 <_realloc_r+0x42>

08004734 <_malloc_usable_size_r>:
 8004734:	1f0b      	subs	r3, r1, #4
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	1f18      	subs	r0, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	da01      	bge.n	8004742 <_malloc_usable_size_r+0xe>
 800473e:	580b      	ldr	r3, [r1, r0]
 8004740:	18c0      	adds	r0, r0, r3
 8004742:	4770      	bx	lr

08004744 <_init>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474a:	bc08      	pop	{r3}
 800474c:	469e      	mov	lr, r3
 800474e:	4770      	bx	lr

08004750 <_fini>:
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004756:	bc08      	pop	{r3}
 8004758:	469e      	mov	lr, r3
 800475a:	4770      	bx	lr
