
gate_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08004da8  08004da8  00005da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f30  08004f30  0000607c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004f30  08004f30  0000607c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004f30  08004f30  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f30  08004f30  00005f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f34  08004f34  00005f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08004f38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  2000007c  08004fb4  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08004fb4  000063ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e726  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031df  00000000  00000000  000247ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00010f09  00000000  00000000  000279a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  000388b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000efa  00000000  00000000  00039af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b46  00000000  00000000  0003a9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fb65  00000000  00000000  00050538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085b4d  00000000  00000000  0007009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f5bea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a28  00000000  00000000  000f5c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  000f9658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d90 	.word	0x08004d90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08004d90 	.word	0x08004d90

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cfrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0008      	movs	r0, r1
 800041c:	4661      	mov	r1, ip
 800041e:	e7ff      	b.n	8000420 <__aeabi_cfcmpeq>

08000420 <__aeabi_cfcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 fbab 	bl	8000b7c <__lesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cfcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_fcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 fb33 	bl	8000a9c <__eqsf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_fcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fb9d 	bl	8000b7c <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_fcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fb93 	bl	8000b7c <__lesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_fcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_fcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fb41 	bl	8000aec <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_fcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_fcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fb37 	bl	8000aec <__gesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_fcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_fadd>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	024b      	lsls	r3, r1, #9
 8000490:	0a5a      	lsrs	r2, r3, #9
 8000492:	4694      	mov	ip, r2
 8000494:	004a      	lsls	r2, r1, #1
 8000496:	0fc9      	lsrs	r1, r1, #31
 8000498:	46ce      	mov	lr, r9
 800049a:	4647      	mov	r7, r8
 800049c:	4689      	mov	r9, r1
 800049e:	0045      	lsls	r5, r0, #1
 80004a0:	0246      	lsls	r6, r0, #9
 80004a2:	0e2d      	lsrs	r5, r5, #24
 80004a4:	0e12      	lsrs	r2, r2, #24
 80004a6:	b580      	push	{r7, lr}
 80004a8:	0999      	lsrs	r1, r3, #6
 80004aa:	0a77      	lsrs	r7, r6, #9
 80004ac:	0fc4      	lsrs	r4, r0, #31
 80004ae:	09b6      	lsrs	r6, r6, #6
 80004b0:	1aab      	subs	r3, r5, r2
 80004b2:	454c      	cmp	r4, r9
 80004b4:	d020      	beq.n	80004f8 <__aeabi_fadd+0x6c>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	dd0c      	ble.n	80004d4 <__aeabi_fadd+0x48>
 80004ba:	2a00      	cmp	r2, #0
 80004bc:	d134      	bne.n	8000528 <__aeabi_fadd+0x9c>
 80004be:	2900      	cmp	r1, #0
 80004c0:	d02a      	beq.n	8000518 <__aeabi_fadd+0x8c>
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d100      	bne.n	80004ca <__aeabi_fadd+0x3e>
 80004c8:	e08f      	b.n	80005ea <__aeabi_fadd+0x15e>
 80004ca:	2bff      	cmp	r3, #255	@ 0xff
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x44>
 80004ce:	e0cd      	b.n	800066c <__aeabi_fadd+0x1e0>
 80004d0:	0013      	movs	r3, r2
 80004d2:	e02f      	b.n	8000534 <__aeabi_fadd+0xa8>
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d060      	beq.n	800059a <__aeabi_fadd+0x10e>
 80004d8:	1b53      	subs	r3, r2, r5
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d000      	beq.n	80004e0 <__aeabi_fadd+0x54>
 80004de:	e0ee      	b.n	80006be <__aeabi_fadd+0x232>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fadd+0x5a>
 80004e4:	e13e      	b.n	8000764 <__aeabi_fadd+0x2d8>
 80004e6:	1e5c      	subs	r4, r3, #1
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x62>
 80004ec:	e16b      	b.n	80007c6 <__aeabi_fadd+0x33a>
 80004ee:	2bff      	cmp	r3, #255	@ 0xff
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x68>
 80004f2:	e0b9      	b.n	8000668 <__aeabi_fadd+0x1dc>
 80004f4:	0023      	movs	r3, r4
 80004f6:	e0e7      	b.n	80006c8 <__aeabi_fadd+0x23c>
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	dc00      	bgt.n	80004fe <__aeabi_fadd+0x72>
 80004fc:	e0a4      	b.n	8000648 <__aeabi_fadd+0x1bc>
 80004fe:	2a00      	cmp	r2, #0
 8000500:	d069      	beq.n	80005d6 <__aeabi_fadd+0x14a>
 8000502:	2dff      	cmp	r5, #255	@ 0xff
 8000504:	d100      	bne.n	8000508 <__aeabi_fadd+0x7c>
 8000506:	e0b1      	b.n	800066c <__aeabi_fadd+0x1e0>
 8000508:	2280      	movs	r2, #128	@ 0x80
 800050a:	04d2      	lsls	r2, r2, #19
 800050c:	4311      	orrs	r1, r2
 800050e:	2b1b      	cmp	r3, #27
 8000510:	dc00      	bgt.n	8000514 <__aeabi_fadd+0x88>
 8000512:	e0e9      	b.n	80006e8 <__aeabi_fadd+0x25c>
 8000514:	002b      	movs	r3, r5
 8000516:	3605      	adds	r6, #5
 8000518:	08f7      	lsrs	r7, r6, #3
 800051a:	2bff      	cmp	r3, #255	@ 0xff
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x94>
 800051e:	e0a5      	b.n	800066c <__aeabi_fadd+0x1e0>
 8000520:	027a      	lsls	r2, r7, #9
 8000522:	0a52      	lsrs	r2, r2, #9
 8000524:	b2d8      	uxtb	r0, r3
 8000526:	e030      	b.n	800058a <__aeabi_fadd+0xfe>
 8000528:	2dff      	cmp	r5, #255	@ 0xff
 800052a:	d100      	bne.n	800052e <__aeabi_fadd+0xa2>
 800052c:	e09e      	b.n	800066c <__aeabi_fadd+0x1e0>
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	04d2      	lsls	r2, r2, #19
 8000532:	4311      	orrs	r1, r2
 8000534:	2001      	movs	r0, #1
 8000536:	2b1b      	cmp	r3, #27
 8000538:	dc08      	bgt.n	800054c <__aeabi_fadd+0xc0>
 800053a:	0008      	movs	r0, r1
 800053c:	2220      	movs	r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	4099      	lsls	r1, r3
 8000544:	000b      	movs	r3, r1
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	4193      	sbcs	r3, r2
 800054a:	4318      	orrs	r0, r3
 800054c:	1a36      	subs	r6, r6, r0
 800054e:	0173      	lsls	r3, r6, #5
 8000550:	d400      	bmi.n	8000554 <__aeabi_fadd+0xc8>
 8000552:	e071      	b.n	8000638 <__aeabi_fadd+0x1ac>
 8000554:	01b6      	lsls	r6, r6, #6
 8000556:	09b7      	lsrs	r7, r6, #6
 8000558:	0038      	movs	r0, r7
 800055a:	f000 fe0b 	bl	8001174 <__clzsi2>
 800055e:	003b      	movs	r3, r7
 8000560:	3805      	subs	r0, #5
 8000562:	4083      	lsls	r3, r0
 8000564:	4285      	cmp	r5, r0
 8000566:	dd4d      	ble.n	8000604 <__aeabi_fadd+0x178>
 8000568:	4eb4      	ldr	r6, [pc, #720]	@ (800083c <__aeabi_fadd+0x3b0>)
 800056a:	1a2d      	subs	r5, r5, r0
 800056c:	401e      	ands	r6, r3
 800056e:	075a      	lsls	r2, r3, #29
 8000570:	d068      	beq.n	8000644 <__aeabi_fadd+0x1b8>
 8000572:	220f      	movs	r2, #15
 8000574:	4013      	ands	r3, r2
 8000576:	2b04      	cmp	r3, #4
 8000578:	d064      	beq.n	8000644 <__aeabi_fadd+0x1b8>
 800057a:	3604      	adds	r6, #4
 800057c:	0173      	lsls	r3, r6, #5
 800057e:	d561      	bpl.n	8000644 <__aeabi_fadd+0x1b8>
 8000580:	1c68      	adds	r0, r5, #1
 8000582:	2dfe      	cmp	r5, #254	@ 0xfe
 8000584:	d154      	bne.n	8000630 <__aeabi_fadd+0x1a4>
 8000586:	20ff      	movs	r0, #255	@ 0xff
 8000588:	2200      	movs	r2, #0
 800058a:	05c0      	lsls	r0, r0, #23
 800058c:	4310      	orrs	r0, r2
 800058e:	07e4      	lsls	r4, r4, #31
 8000590:	4320      	orrs	r0, r4
 8000592:	bcc0      	pop	{r6, r7}
 8000594:	46b9      	mov	r9, r7
 8000596:	46b0      	mov	r8, r6
 8000598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800059a:	22fe      	movs	r2, #254	@ 0xfe
 800059c:	4690      	mov	r8, r2
 800059e:	1c68      	adds	r0, r5, #1
 80005a0:	0002      	movs	r2, r0
 80005a2:	4640      	mov	r0, r8
 80005a4:	4210      	tst	r0, r2
 80005a6:	d16b      	bne.n	8000680 <__aeabi_fadd+0x1f4>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_fadd+0x122>
 80005ac:	e0dd      	b.n	800076a <__aeabi_fadd+0x2de>
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d100      	bne.n	80005b4 <__aeabi_fadd+0x128>
 80005b2:	e102      	b.n	80007ba <__aeabi_fadd+0x32e>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	d0b3      	beq.n	8000520 <__aeabi_fadd+0x94>
 80005b8:	2280      	movs	r2, #128	@ 0x80
 80005ba:	1a77      	subs	r7, r6, r1
 80005bc:	04d2      	lsls	r2, r2, #19
 80005be:	4217      	tst	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x138>
 80005c2:	e136      	b.n	8000832 <__aeabi_fadd+0x3a6>
 80005c4:	464c      	mov	r4, r9
 80005c6:	1b8e      	subs	r6, r1, r6
 80005c8:	d061      	beq.n	800068e <__aeabi_fadd+0x202>
 80005ca:	2001      	movs	r0, #1
 80005cc:	4216      	tst	r6, r2
 80005ce:	d130      	bne.n	8000632 <__aeabi_fadd+0x1a6>
 80005d0:	2300      	movs	r3, #0
 80005d2:	08f7      	lsrs	r7, r6, #3
 80005d4:	e7a4      	b.n	8000520 <__aeabi_fadd+0x94>
 80005d6:	2900      	cmp	r1, #0
 80005d8:	d09e      	beq.n	8000518 <__aeabi_fadd+0x8c>
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d100      	bne.n	80005e2 <__aeabi_fadd+0x156>
 80005e0:	e0ca      	b.n	8000778 <__aeabi_fadd+0x2ec>
 80005e2:	2bff      	cmp	r3, #255	@ 0xff
 80005e4:	d042      	beq.n	800066c <__aeabi_fadd+0x1e0>
 80005e6:	0013      	movs	r3, r2
 80005e8:	e791      	b.n	800050e <__aeabi_fadd+0x82>
 80005ea:	1a71      	subs	r1, r6, r1
 80005ec:	014b      	lsls	r3, r1, #5
 80005ee:	d400      	bmi.n	80005f2 <__aeabi_fadd+0x166>
 80005f0:	e0d1      	b.n	8000796 <__aeabi_fadd+0x30a>
 80005f2:	018f      	lsls	r7, r1, #6
 80005f4:	09bf      	lsrs	r7, r7, #6
 80005f6:	0038      	movs	r0, r7
 80005f8:	f000 fdbc 	bl	8001174 <__clzsi2>
 80005fc:	003b      	movs	r3, r7
 80005fe:	3805      	subs	r0, #5
 8000600:	4083      	lsls	r3, r0
 8000602:	2501      	movs	r5, #1
 8000604:	2220      	movs	r2, #32
 8000606:	1b40      	subs	r0, r0, r5
 8000608:	3001      	adds	r0, #1
 800060a:	1a12      	subs	r2, r2, r0
 800060c:	001e      	movs	r6, r3
 800060e:	4093      	lsls	r3, r2
 8000610:	40c6      	lsrs	r6, r0
 8000612:	1e5a      	subs	r2, r3, #1
 8000614:	4193      	sbcs	r3, r2
 8000616:	431e      	orrs	r6, r3
 8000618:	d039      	beq.n	800068e <__aeabi_fadd+0x202>
 800061a:	0773      	lsls	r3, r6, #29
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x194>
 800061e:	e11b      	b.n	8000858 <__aeabi_fadd+0x3cc>
 8000620:	230f      	movs	r3, #15
 8000622:	2500      	movs	r5, #0
 8000624:	4033      	ands	r3, r6
 8000626:	2b04      	cmp	r3, #4
 8000628:	d1a7      	bne.n	800057a <__aeabi_fadd+0xee>
 800062a:	2001      	movs	r0, #1
 800062c:	0172      	lsls	r2, r6, #5
 800062e:	d57c      	bpl.n	800072a <__aeabi_fadd+0x29e>
 8000630:	b2c0      	uxtb	r0, r0
 8000632:	01b2      	lsls	r2, r6, #6
 8000634:	0a52      	lsrs	r2, r2, #9
 8000636:	e7a8      	b.n	800058a <__aeabi_fadd+0xfe>
 8000638:	0773      	lsls	r3, r6, #29
 800063a:	d003      	beq.n	8000644 <__aeabi_fadd+0x1b8>
 800063c:	230f      	movs	r3, #15
 800063e:	4033      	ands	r3, r6
 8000640:	2b04      	cmp	r3, #4
 8000642:	d19a      	bne.n	800057a <__aeabi_fadd+0xee>
 8000644:	002b      	movs	r3, r5
 8000646:	e767      	b.n	8000518 <__aeabi_fadd+0x8c>
 8000648:	2b00      	cmp	r3, #0
 800064a:	d023      	beq.n	8000694 <__aeabi_fadd+0x208>
 800064c:	1b53      	subs	r3, r2, r5
 800064e:	2d00      	cmp	r5, #0
 8000650:	d17b      	bne.n	800074a <__aeabi_fadd+0x2be>
 8000652:	2e00      	cmp	r6, #0
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x1cc>
 8000656:	e086      	b.n	8000766 <__aeabi_fadd+0x2da>
 8000658:	1e5d      	subs	r5, r3, #1
 800065a:	2b01      	cmp	r3, #1
 800065c:	d100      	bne.n	8000660 <__aeabi_fadd+0x1d4>
 800065e:	e08b      	b.n	8000778 <__aeabi_fadd+0x2ec>
 8000660:	2bff      	cmp	r3, #255	@ 0xff
 8000662:	d002      	beq.n	800066a <__aeabi_fadd+0x1de>
 8000664:	002b      	movs	r3, r5
 8000666:	e075      	b.n	8000754 <__aeabi_fadd+0x2c8>
 8000668:	464c      	mov	r4, r9
 800066a:	4667      	mov	r7, ip
 800066c:	2f00      	cmp	r7, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0x1e6>
 8000670:	e789      	b.n	8000586 <__aeabi_fadd+0xfa>
 8000672:	2280      	movs	r2, #128	@ 0x80
 8000674:	03d2      	lsls	r2, r2, #15
 8000676:	433a      	orrs	r2, r7
 8000678:	0252      	lsls	r2, r2, #9
 800067a:	20ff      	movs	r0, #255	@ 0xff
 800067c:	0a52      	lsrs	r2, r2, #9
 800067e:	e784      	b.n	800058a <__aeabi_fadd+0xfe>
 8000680:	1a77      	subs	r7, r6, r1
 8000682:	017b      	lsls	r3, r7, #5
 8000684:	d46b      	bmi.n	800075e <__aeabi_fadd+0x2d2>
 8000686:	2f00      	cmp	r7, #0
 8000688:	d000      	beq.n	800068c <__aeabi_fadd+0x200>
 800068a:	e765      	b.n	8000558 <__aeabi_fadd+0xcc>
 800068c:	2400      	movs	r4, #0
 800068e:	2000      	movs	r0, #0
 8000690:	2200      	movs	r2, #0
 8000692:	e77a      	b.n	800058a <__aeabi_fadd+0xfe>
 8000694:	22fe      	movs	r2, #254	@ 0xfe
 8000696:	1c6b      	adds	r3, r5, #1
 8000698:	421a      	tst	r2, r3
 800069a:	d149      	bne.n	8000730 <__aeabi_fadd+0x2a4>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0x216>
 80006a0:	e09f      	b.n	80007e2 <__aeabi_fadd+0x356>
 80006a2:	2e00      	cmp	r6, #0
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x21c>
 80006a6:	e0ba      	b.n	800081e <__aeabi_fadd+0x392>
 80006a8:	2900      	cmp	r1, #0
 80006aa:	d100      	bne.n	80006ae <__aeabi_fadd+0x222>
 80006ac:	e0cf      	b.n	800084e <__aeabi_fadd+0x3c2>
 80006ae:	1872      	adds	r2, r6, r1
 80006b0:	0153      	lsls	r3, r2, #5
 80006b2:	d400      	bmi.n	80006b6 <__aeabi_fadd+0x22a>
 80006b4:	e0cd      	b.n	8000852 <__aeabi_fadd+0x3c6>
 80006b6:	0192      	lsls	r2, r2, #6
 80006b8:	2001      	movs	r0, #1
 80006ba:	0a52      	lsrs	r2, r2, #9
 80006bc:	e765      	b.n	800058a <__aeabi_fadd+0xfe>
 80006be:	2aff      	cmp	r2, #255	@ 0xff
 80006c0:	d0d2      	beq.n	8000668 <__aeabi_fadd+0x1dc>
 80006c2:	2080      	movs	r0, #128	@ 0x80
 80006c4:	04c0      	lsls	r0, r0, #19
 80006c6:	4306      	orrs	r6, r0
 80006c8:	2001      	movs	r0, #1
 80006ca:	2b1b      	cmp	r3, #27
 80006cc:	dc08      	bgt.n	80006e0 <__aeabi_fadd+0x254>
 80006ce:	0030      	movs	r0, r6
 80006d0:	2420      	movs	r4, #32
 80006d2:	40d8      	lsrs	r0, r3
 80006d4:	1ae3      	subs	r3, r4, r3
 80006d6:	409e      	lsls	r6, r3
 80006d8:	0033      	movs	r3, r6
 80006da:	1e5c      	subs	r4, r3, #1
 80006dc:	41a3      	sbcs	r3, r4
 80006de:	4318      	orrs	r0, r3
 80006e0:	464c      	mov	r4, r9
 80006e2:	0015      	movs	r5, r2
 80006e4:	1a0e      	subs	r6, r1, r0
 80006e6:	e732      	b.n	800054e <__aeabi_fadd+0xc2>
 80006e8:	0008      	movs	r0, r1
 80006ea:	2220      	movs	r2, #32
 80006ec:	40d8      	lsrs	r0, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	4099      	lsls	r1, r3
 80006f2:	000b      	movs	r3, r1
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	4193      	sbcs	r3, r2
 80006f8:	4303      	orrs	r3, r0
 80006fa:	18f6      	adds	r6, r6, r3
 80006fc:	0173      	lsls	r3, r6, #5
 80006fe:	d59b      	bpl.n	8000638 <__aeabi_fadd+0x1ac>
 8000700:	3501      	adds	r5, #1
 8000702:	2dff      	cmp	r5, #255	@ 0xff
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x27c>
 8000706:	e73e      	b.n	8000586 <__aeabi_fadd+0xfa>
 8000708:	2301      	movs	r3, #1
 800070a:	494d      	ldr	r1, [pc, #308]	@ (8000840 <__aeabi_fadd+0x3b4>)
 800070c:	0872      	lsrs	r2, r6, #1
 800070e:	4033      	ands	r3, r6
 8000710:	400a      	ands	r2, r1
 8000712:	431a      	orrs	r2, r3
 8000714:	0016      	movs	r6, r2
 8000716:	0753      	lsls	r3, r2, #29
 8000718:	d004      	beq.n	8000724 <__aeabi_fadd+0x298>
 800071a:	230f      	movs	r3, #15
 800071c:	4013      	ands	r3, r2
 800071e:	2b04      	cmp	r3, #4
 8000720:	d000      	beq.n	8000724 <__aeabi_fadd+0x298>
 8000722:	e72a      	b.n	800057a <__aeabi_fadd+0xee>
 8000724:	0173      	lsls	r3, r6, #5
 8000726:	d500      	bpl.n	800072a <__aeabi_fadd+0x29e>
 8000728:	e72a      	b.n	8000580 <__aeabi_fadd+0xf4>
 800072a:	002b      	movs	r3, r5
 800072c:	08f7      	lsrs	r7, r6, #3
 800072e:	e6f7      	b.n	8000520 <__aeabi_fadd+0x94>
 8000730:	2bff      	cmp	r3, #255	@ 0xff
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x2aa>
 8000734:	e727      	b.n	8000586 <__aeabi_fadd+0xfa>
 8000736:	1871      	adds	r1, r6, r1
 8000738:	0849      	lsrs	r1, r1, #1
 800073a:	074a      	lsls	r2, r1, #29
 800073c:	d02f      	beq.n	800079e <__aeabi_fadd+0x312>
 800073e:	220f      	movs	r2, #15
 8000740:	400a      	ands	r2, r1
 8000742:	2a04      	cmp	r2, #4
 8000744:	d02b      	beq.n	800079e <__aeabi_fadd+0x312>
 8000746:	1d0e      	adds	r6, r1, #4
 8000748:	e6e6      	b.n	8000518 <__aeabi_fadd+0x8c>
 800074a:	2aff      	cmp	r2, #255	@ 0xff
 800074c:	d08d      	beq.n	800066a <__aeabi_fadd+0x1de>
 800074e:	2080      	movs	r0, #128	@ 0x80
 8000750:	04c0      	lsls	r0, r0, #19
 8000752:	4306      	orrs	r6, r0
 8000754:	2b1b      	cmp	r3, #27
 8000756:	dd24      	ble.n	80007a2 <__aeabi_fadd+0x316>
 8000758:	0013      	movs	r3, r2
 800075a:	1d4e      	adds	r6, r1, #5
 800075c:	e6dc      	b.n	8000518 <__aeabi_fadd+0x8c>
 800075e:	464c      	mov	r4, r9
 8000760:	1b8f      	subs	r7, r1, r6
 8000762:	e6f9      	b.n	8000558 <__aeabi_fadd+0xcc>
 8000764:	464c      	mov	r4, r9
 8000766:	000e      	movs	r6, r1
 8000768:	e6d6      	b.n	8000518 <__aeabi_fadd+0x8c>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d149      	bne.n	8000802 <__aeabi_fadd+0x376>
 800076e:	2900      	cmp	r1, #0
 8000770:	d068      	beq.n	8000844 <__aeabi_fadd+0x3b8>
 8000772:	4667      	mov	r7, ip
 8000774:	464c      	mov	r4, r9
 8000776:	e77c      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000778:	1870      	adds	r0, r6, r1
 800077a:	0143      	lsls	r3, r0, #5
 800077c:	d574      	bpl.n	8000868 <__aeabi_fadd+0x3dc>
 800077e:	4930      	ldr	r1, [pc, #192]	@ (8000840 <__aeabi_fadd+0x3b4>)
 8000780:	0840      	lsrs	r0, r0, #1
 8000782:	4001      	ands	r1, r0
 8000784:	0743      	lsls	r3, r0, #29
 8000786:	d009      	beq.n	800079c <__aeabi_fadd+0x310>
 8000788:	230f      	movs	r3, #15
 800078a:	4003      	ands	r3, r0
 800078c:	2b04      	cmp	r3, #4
 800078e:	d005      	beq.n	800079c <__aeabi_fadd+0x310>
 8000790:	2302      	movs	r3, #2
 8000792:	1d0e      	adds	r6, r1, #4
 8000794:	e6c0      	b.n	8000518 <__aeabi_fadd+0x8c>
 8000796:	2301      	movs	r3, #1
 8000798:	08cf      	lsrs	r7, r1, #3
 800079a:	e6c1      	b.n	8000520 <__aeabi_fadd+0x94>
 800079c:	2302      	movs	r3, #2
 800079e:	08cf      	lsrs	r7, r1, #3
 80007a0:	e6be      	b.n	8000520 <__aeabi_fadd+0x94>
 80007a2:	2520      	movs	r5, #32
 80007a4:	0030      	movs	r0, r6
 80007a6:	40d8      	lsrs	r0, r3
 80007a8:	1aeb      	subs	r3, r5, r3
 80007aa:	409e      	lsls	r6, r3
 80007ac:	0033      	movs	r3, r6
 80007ae:	1e5d      	subs	r5, r3, #1
 80007b0:	41ab      	sbcs	r3, r5
 80007b2:	4303      	orrs	r3, r0
 80007b4:	0015      	movs	r5, r2
 80007b6:	185e      	adds	r6, r3, r1
 80007b8:	e7a0      	b.n	80006fc <__aeabi_fadd+0x270>
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fadd+0x334>
 80007be:	e765      	b.n	800068c <__aeabi_fadd+0x200>
 80007c0:	464c      	mov	r4, r9
 80007c2:	4667      	mov	r7, ip
 80007c4:	e6ac      	b.n	8000520 <__aeabi_fadd+0x94>
 80007c6:	1b8f      	subs	r7, r1, r6
 80007c8:	017b      	lsls	r3, r7, #5
 80007ca:	d52e      	bpl.n	800082a <__aeabi_fadd+0x39e>
 80007cc:	01bf      	lsls	r7, r7, #6
 80007ce:	09bf      	lsrs	r7, r7, #6
 80007d0:	0038      	movs	r0, r7
 80007d2:	f000 fccf 	bl	8001174 <__clzsi2>
 80007d6:	003b      	movs	r3, r7
 80007d8:	3805      	subs	r0, #5
 80007da:	4083      	lsls	r3, r0
 80007dc:	464c      	mov	r4, r9
 80007de:	3501      	adds	r5, #1
 80007e0:	e710      	b.n	8000604 <__aeabi_fadd+0x178>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x35c>
 80007e6:	e740      	b.n	800066a <__aeabi_fadd+0x1de>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x362>
 80007ec:	e741      	b.n	8000672 <__aeabi_fadd+0x1e6>
 80007ee:	2380      	movs	r3, #128	@ 0x80
 80007f0:	03db      	lsls	r3, r3, #15
 80007f2:	429f      	cmp	r7, r3
 80007f4:	d200      	bcs.n	80007f8 <__aeabi_fadd+0x36c>
 80007f6:	e73c      	b.n	8000672 <__aeabi_fadd+0x1e6>
 80007f8:	459c      	cmp	ip, r3
 80007fa:	d300      	bcc.n	80007fe <__aeabi_fadd+0x372>
 80007fc:	e739      	b.n	8000672 <__aeabi_fadd+0x1e6>
 80007fe:	4667      	mov	r7, ip
 8000800:	e737      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000802:	2900      	cmp	r1, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x37c>
 8000806:	e734      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000808:	2380      	movs	r3, #128	@ 0x80
 800080a:	03db      	lsls	r3, r3, #15
 800080c:	429f      	cmp	r7, r3
 800080e:	d200      	bcs.n	8000812 <__aeabi_fadd+0x386>
 8000810:	e72f      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000812:	459c      	cmp	ip, r3
 8000814:	d300      	bcc.n	8000818 <__aeabi_fadd+0x38c>
 8000816:	e72c      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000818:	464c      	mov	r4, r9
 800081a:	4667      	mov	r7, ip
 800081c:	e729      	b.n	8000672 <__aeabi_fadd+0x1e6>
 800081e:	2900      	cmp	r1, #0
 8000820:	d100      	bne.n	8000824 <__aeabi_fadd+0x398>
 8000822:	e734      	b.n	800068e <__aeabi_fadd+0x202>
 8000824:	2300      	movs	r3, #0
 8000826:	08cf      	lsrs	r7, r1, #3
 8000828:	e67a      	b.n	8000520 <__aeabi_fadd+0x94>
 800082a:	464c      	mov	r4, r9
 800082c:	2301      	movs	r3, #1
 800082e:	08ff      	lsrs	r7, r7, #3
 8000830:	e676      	b.n	8000520 <__aeabi_fadd+0x94>
 8000832:	2f00      	cmp	r7, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x3ac>
 8000836:	e729      	b.n	800068c <__aeabi_fadd+0x200>
 8000838:	08ff      	lsrs	r7, r7, #3
 800083a:	e671      	b.n	8000520 <__aeabi_fadd+0x94>
 800083c:	fbffffff 	.word	0xfbffffff
 8000840:	7dffffff 	.word	0x7dffffff
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	2400      	movs	r4, #0
 8000848:	20ff      	movs	r0, #255	@ 0xff
 800084a:	03d2      	lsls	r2, r2, #15
 800084c:	e69d      	b.n	800058a <__aeabi_fadd+0xfe>
 800084e:	2300      	movs	r3, #0
 8000850:	e666      	b.n	8000520 <__aeabi_fadd+0x94>
 8000852:	2300      	movs	r3, #0
 8000854:	08d7      	lsrs	r7, r2, #3
 8000856:	e663      	b.n	8000520 <__aeabi_fadd+0x94>
 8000858:	2001      	movs	r0, #1
 800085a:	0172      	lsls	r2, r6, #5
 800085c:	d500      	bpl.n	8000860 <__aeabi_fadd+0x3d4>
 800085e:	e6e7      	b.n	8000630 <__aeabi_fadd+0x1a4>
 8000860:	0031      	movs	r1, r6
 8000862:	2300      	movs	r3, #0
 8000864:	08cf      	lsrs	r7, r1, #3
 8000866:	e65b      	b.n	8000520 <__aeabi_fadd+0x94>
 8000868:	2301      	movs	r3, #1
 800086a:	08c7      	lsrs	r7, r0, #3
 800086c:	e658      	b.n	8000520 <__aeabi_fadd+0x94>
 800086e:	46c0      	nop			@ (mov r8, r8)

08000870 <__aeabi_fdiv>:
 8000870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000872:	4646      	mov	r6, r8
 8000874:	464f      	mov	r7, r9
 8000876:	46d6      	mov	lr, sl
 8000878:	0245      	lsls	r5, r0, #9
 800087a:	b5c0      	push	{r6, r7, lr}
 800087c:	0fc3      	lsrs	r3, r0, #31
 800087e:	0047      	lsls	r7, r0, #1
 8000880:	4698      	mov	r8, r3
 8000882:	1c0e      	adds	r6, r1, #0
 8000884:	0a6d      	lsrs	r5, r5, #9
 8000886:	0e3f      	lsrs	r7, r7, #24
 8000888:	d05b      	beq.n	8000942 <__aeabi_fdiv+0xd2>
 800088a:	2fff      	cmp	r7, #255	@ 0xff
 800088c:	d021      	beq.n	80008d2 <__aeabi_fdiv+0x62>
 800088e:	2380      	movs	r3, #128	@ 0x80
 8000890:	00ed      	lsls	r5, r5, #3
 8000892:	04db      	lsls	r3, r3, #19
 8000894:	431d      	orrs	r5, r3
 8000896:	2300      	movs	r3, #0
 8000898:	4699      	mov	r9, r3
 800089a:	469a      	mov	sl, r3
 800089c:	3f7f      	subs	r7, #127	@ 0x7f
 800089e:	0274      	lsls	r4, r6, #9
 80008a0:	0073      	lsls	r3, r6, #1
 80008a2:	0a64      	lsrs	r4, r4, #9
 80008a4:	0e1b      	lsrs	r3, r3, #24
 80008a6:	0ff6      	lsrs	r6, r6, #31
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d020      	beq.n	80008ee <__aeabi_fdiv+0x7e>
 80008ac:	2bff      	cmp	r3, #255	@ 0xff
 80008ae:	d043      	beq.n	8000938 <__aeabi_fdiv+0xc8>
 80008b0:	2280      	movs	r2, #128	@ 0x80
 80008b2:	2000      	movs	r0, #0
 80008b4:	00e4      	lsls	r4, r4, #3
 80008b6:	04d2      	lsls	r2, r2, #19
 80008b8:	4314      	orrs	r4, r2
 80008ba:	3b7f      	subs	r3, #127	@ 0x7f
 80008bc:	4642      	mov	r2, r8
 80008be:	1aff      	subs	r7, r7, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	4072      	eors	r2, r6
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d900      	bls.n	80008ca <__aeabi_fdiv+0x5a>
 80008c8:	e09d      	b.n	8000a06 <__aeabi_fdiv+0x196>
 80008ca:	4971      	ldr	r1, [pc, #452]	@ (8000a90 <__aeabi_fdiv+0x220>)
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	58cb      	ldr	r3, [r1, r3]
 80008d0:	469f      	mov	pc, r3
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d15a      	bne.n	800098c <__aeabi_fdiv+0x11c>
 80008d6:	2308      	movs	r3, #8
 80008d8:	4699      	mov	r9, r3
 80008da:	3b06      	subs	r3, #6
 80008dc:	0274      	lsls	r4, r6, #9
 80008de:	469a      	mov	sl, r3
 80008e0:	0073      	lsls	r3, r6, #1
 80008e2:	27ff      	movs	r7, #255	@ 0xff
 80008e4:	0a64      	lsrs	r4, r4, #9
 80008e6:	0e1b      	lsrs	r3, r3, #24
 80008e8:	0ff6      	lsrs	r6, r6, #31
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1de      	bne.n	80008ac <__aeabi_fdiv+0x3c>
 80008ee:	2c00      	cmp	r4, #0
 80008f0:	d13b      	bne.n	800096a <__aeabi_fdiv+0xfa>
 80008f2:	2301      	movs	r3, #1
 80008f4:	4642      	mov	r2, r8
 80008f6:	4649      	mov	r1, r9
 80008f8:	4072      	eors	r2, r6
 80008fa:	4319      	orrs	r1, r3
 80008fc:	290e      	cmp	r1, #14
 80008fe:	d818      	bhi.n	8000932 <__aeabi_fdiv+0xc2>
 8000900:	4864      	ldr	r0, [pc, #400]	@ (8000a94 <__aeabi_fdiv+0x224>)
 8000902:	0089      	lsls	r1, r1, #2
 8000904:	5841      	ldr	r1, [r0, r1]
 8000906:	468f      	mov	pc, r1
 8000908:	4653      	mov	r3, sl
 800090a:	2b02      	cmp	r3, #2
 800090c:	d100      	bne.n	8000910 <__aeabi_fdiv+0xa0>
 800090e:	e0b8      	b.n	8000a82 <__aeabi_fdiv+0x212>
 8000910:	2b03      	cmp	r3, #3
 8000912:	d06e      	beq.n	80009f2 <__aeabi_fdiv+0x182>
 8000914:	4642      	mov	r2, r8
 8000916:	002c      	movs	r4, r5
 8000918:	2b01      	cmp	r3, #1
 800091a:	d140      	bne.n	800099e <__aeabi_fdiv+0x12e>
 800091c:	2000      	movs	r0, #0
 800091e:	2400      	movs	r4, #0
 8000920:	05c0      	lsls	r0, r0, #23
 8000922:	4320      	orrs	r0, r4
 8000924:	07d2      	lsls	r2, r2, #31
 8000926:	4310      	orrs	r0, r2
 8000928:	bce0      	pop	{r5, r6, r7}
 800092a:	46ba      	mov	sl, r7
 800092c:	46b1      	mov	r9, r6
 800092e:	46a8      	mov	r8, r5
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000932:	20ff      	movs	r0, #255	@ 0xff
 8000934:	2400      	movs	r4, #0
 8000936:	e7f3      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d120      	bne.n	800097e <__aeabi_fdiv+0x10e>
 800093c:	2302      	movs	r3, #2
 800093e:	3fff      	subs	r7, #255	@ 0xff
 8000940:	e7d8      	b.n	80008f4 <__aeabi_fdiv+0x84>
 8000942:	2d00      	cmp	r5, #0
 8000944:	d105      	bne.n	8000952 <__aeabi_fdiv+0xe2>
 8000946:	2304      	movs	r3, #4
 8000948:	4699      	mov	r9, r3
 800094a:	3b03      	subs	r3, #3
 800094c:	2700      	movs	r7, #0
 800094e:	469a      	mov	sl, r3
 8000950:	e7a5      	b.n	800089e <__aeabi_fdiv+0x2e>
 8000952:	0028      	movs	r0, r5
 8000954:	f000 fc0e 	bl	8001174 <__clzsi2>
 8000958:	2776      	movs	r7, #118	@ 0x76
 800095a:	1f43      	subs	r3, r0, #5
 800095c:	409d      	lsls	r5, r3
 800095e:	2300      	movs	r3, #0
 8000960:	427f      	negs	r7, r7
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	1a3f      	subs	r7, r7, r0
 8000968:	e799      	b.n	800089e <__aeabi_fdiv+0x2e>
 800096a:	0020      	movs	r0, r4
 800096c:	f000 fc02 	bl	8001174 <__clzsi2>
 8000970:	1f43      	subs	r3, r0, #5
 8000972:	409c      	lsls	r4, r3
 8000974:	2376      	movs	r3, #118	@ 0x76
 8000976:	425b      	negs	r3, r3
 8000978:	1a1b      	subs	r3, r3, r0
 800097a:	2000      	movs	r0, #0
 800097c:	e79e      	b.n	80008bc <__aeabi_fdiv+0x4c>
 800097e:	2303      	movs	r3, #3
 8000980:	464a      	mov	r2, r9
 8000982:	431a      	orrs	r2, r3
 8000984:	4691      	mov	r9, r2
 8000986:	2003      	movs	r0, #3
 8000988:	33fc      	adds	r3, #252	@ 0xfc
 800098a:	e797      	b.n	80008bc <__aeabi_fdiv+0x4c>
 800098c:	230c      	movs	r3, #12
 800098e:	4699      	mov	r9, r3
 8000990:	3b09      	subs	r3, #9
 8000992:	27ff      	movs	r7, #255	@ 0xff
 8000994:	469a      	mov	sl, r3
 8000996:	e782      	b.n	800089e <__aeabi_fdiv+0x2e>
 8000998:	2803      	cmp	r0, #3
 800099a:	d02c      	beq.n	80009f6 <__aeabi_fdiv+0x186>
 800099c:	0032      	movs	r2, r6
 800099e:	0038      	movs	r0, r7
 80009a0:	307f      	adds	r0, #127	@ 0x7f
 80009a2:	2800      	cmp	r0, #0
 80009a4:	dd47      	ble.n	8000a36 <__aeabi_fdiv+0x1c6>
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d004      	beq.n	80009b4 <__aeabi_fdiv+0x144>
 80009aa:	230f      	movs	r3, #15
 80009ac:	4023      	ands	r3, r4
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fdiv+0x144>
 80009b2:	3404      	adds	r4, #4
 80009b4:	0123      	lsls	r3, r4, #4
 80009b6:	d503      	bpl.n	80009c0 <__aeabi_fdiv+0x150>
 80009b8:	0038      	movs	r0, r7
 80009ba:	4b37      	ldr	r3, [pc, #220]	@ (8000a98 <__aeabi_fdiv+0x228>)
 80009bc:	3080      	adds	r0, #128	@ 0x80
 80009be:	401c      	ands	r4, r3
 80009c0:	28fe      	cmp	r0, #254	@ 0xfe
 80009c2:	dcb6      	bgt.n	8000932 <__aeabi_fdiv+0xc2>
 80009c4:	01a4      	lsls	r4, r4, #6
 80009c6:	0a64      	lsrs	r4, r4, #9
 80009c8:	b2c0      	uxtb	r0, r0
 80009ca:	e7a9      	b.n	8000920 <__aeabi_fdiv+0xb0>
 80009cc:	2480      	movs	r4, #128	@ 0x80
 80009ce:	2200      	movs	r2, #0
 80009d0:	20ff      	movs	r0, #255	@ 0xff
 80009d2:	03e4      	lsls	r4, r4, #15
 80009d4:	e7a4      	b.n	8000920 <__aeabi_fdiv+0xb0>
 80009d6:	2380      	movs	r3, #128	@ 0x80
 80009d8:	03db      	lsls	r3, r3, #15
 80009da:	421d      	tst	r5, r3
 80009dc:	d001      	beq.n	80009e2 <__aeabi_fdiv+0x172>
 80009de:	421c      	tst	r4, r3
 80009e0:	d00b      	beq.n	80009fa <__aeabi_fdiv+0x18a>
 80009e2:	2480      	movs	r4, #128	@ 0x80
 80009e4:	03e4      	lsls	r4, r4, #15
 80009e6:	432c      	orrs	r4, r5
 80009e8:	0264      	lsls	r4, r4, #9
 80009ea:	4642      	mov	r2, r8
 80009ec:	20ff      	movs	r0, #255	@ 0xff
 80009ee:	0a64      	lsrs	r4, r4, #9
 80009f0:	e796      	b.n	8000920 <__aeabi_fdiv+0xb0>
 80009f2:	4646      	mov	r6, r8
 80009f4:	002c      	movs	r4, r5
 80009f6:	2380      	movs	r3, #128	@ 0x80
 80009f8:	03db      	lsls	r3, r3, #15
 80009fa:	431c      	orrs	r4, r3
 80009fc:	0264      	lsls	r4, r4, #9
 80009fe:	0032      	movs	r2, r6
 8000a00:	20ff      	movs	r0, #255	@ 0xff
 8000a02:	0a64      	lsrs	r4, r4, #9
 8000a04:	e78c      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a06:	016d      	lsls	r5, r5, #5
 8000a08:	0160      	lsls	r0, r4, #5
 8000a0a:	4285      	cmp	r5, r0
 8000a0c:	d22d      	bcs.n	8000a6a <__aeabi_fdiv+0x1fa>
 8000a0e:	231b      	movs	r3, #27
 8000a10:	2400      	movs	r4, #0
 8000a12:	3f01      	subs	r7, #1
 8000a14:	2601      	movs	r6, #1
 8000a16:	0029      	movs	r1, r5
 8000a18:	0064      	lsls	r4, r4, #1
 8000a1a:	006d      	lsls	r5, r5, #1
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	db01      	blt.n	8000a24 <__aeabi_fdiv+0x1b4>
 8000a20:	4285      	cmp	r5, r0
 8000a22:	d301      	bcc.n	8000a28 <__aeabi_fdiv+0x1b8>
 8000a24:	1a2d      	subs	r5, r5, r0
 8000a26:	4334      	orrs	r4, r6
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1f3      	bne.n	8000a16 <__aeabi_fdiv+0x1a6>
 8000a2e:	1e6b      	subs	r3, r5, #1
 8000a30:	419d      	sbcs	r5, r3
 8000a32:	432c      	orrs	r4, r5
 8000a34:	e7b3      	b.n	800099e <__aeabi_fdiv+0x12e>
 8000a36:	2301      	movs	r3, #1
 8000a38:	1a1b      	subs	r3, r3, r0
 8000a3a:	2b1b      	cmp	r3, #27
 8000a3c:	dd00      	ble.n	8000a40 <__aeabi_fdiv+0x1d0>
 8000a3e:	e76d      	b.n	800091c <__aeabi_fdiv+0xac>
 8000a40:	0021      	movs	r1, r4
 8000a42:	379e      	adds	r7, #158	@ 0x9e
 8000a44:	40d9      	lsrs	r1, r3
 8000a46:	40bc      	lsls	r4, r7
 8000a48:	000b      	movs	r3, r1
 8000a4a:	1e61      	subs	r1, r4, #1
 8000a4c:	418c      	sbcs	r4, r1
 8000a4e:	4323      	orrs	r3, r4
 8000a50:	0759      	lsls	r1, r3, #29
 8000a52:	d004      	beq.n	8000a5e <__aeabi_fdiv+0x1ee>
 8000a54:	210f      	movs	r1, #15
 8000a56:	4019      	ands	r1, r3
 8000a58:	2904      	cmp	r1, #4
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_fdiv+0x1ee>
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	0159      	lsls	r1, r3, #5
 8000a60:	d413      	bmi.n	8000a8a <__aeabi_fdiv+0x21a>
 8000a62:	019b      	lsls	r3, r3, #6
 8000a64:	2000      	movs	r0, #0
 8000a66:	0a5c      	lsrs	r4, r3, #9
 8000a68:	e75a      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a6a:	231a      	movs	r3, #26
 8000a6c:	2401      	movs	r4, #1
 8000a6e:	1a2d      	subs	r5, r5, r0
 8000a70:	e7d0      	b.n	8000a14 <__aeabi_fdiv+0x1a4>
 8000a72:	1e98      	subs	r0, r3, #2
 8000a74:	4243      	negs	r3, r0
 8000a76:	4158      	adcs	r0, r3
 8000a78:	4240      	negs	r0, r0
 8000a7a:	0032      	movs	r2, r6
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	b2c0      	uxtb	r0, r0
 8000a80:	e74e      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a82:	4642      	mov	r2, r8
 8000a84:	20ff      	movs	r0, #255	@ 0xff
 8000a86:	2400      	movs	r4, #0
 8000a88:	e74a      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	e747      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a90:	08004dac 	.word	0x08004dac
 8000a94:	08004dec 	.word	0x08004dec
 8000a98:	f7ffffff 	.word	0xf7ffffff

08000a9c <__eqsf2>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	0042      	lsls	r2, r0, #1
 8000aa0:	024e      	lsls	r6, r1, #9
 8000aa2:	004c      	lsls	r4, r1, #1
 8000aa4:	0245      	lsls	r5, r0, #9
 8000aa6:	0a6d      	lsrs	r5, r5, #9
 8000aa8:	0e12      	lsrs	r2, r2, #24
 8000aaa:	0fc3      	lsrs	r3, r0, #31
 8000aac:	0a76      	lsrs	r6, r6, #9
 8000aae:	0e24      	lsrs	r4, r4, #24
 8000ab0:	0fc9      	lsrs	r1, r1, #31
 8000ab2:	2aff      	cmp	r2, #255	@ 0xff
 8000ab4:	d010      	beq.n	8000ad8 <__eqsf2+0x3c>
 8000ab6:	2cff      	cmp	r4, #255	@ 0xff
 8000ab8:	d00c      	beq.n	8000ad4 <__eqsf2+0x38>
 8000aba:	2001      	movs	r0, #1
 8000abc:	42a2      	cmp	r2, r4
 8000abe:	d10a      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ac0:	42b5      	cmp	r5, r6
 8000ac2:	d108      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	d00f      	beq.n	8000ae8 <__eqsf2+0x4c>
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	d104      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000acc:	0028      	movs	r0, r5
 8000ace:	1e43      	subs	r3, r0, #1
 8000ad0:	4198      	sbcs	r0, r3
 8000ad2:	e000      	b.n	8000ad6 <__eqsf2+0x3a>
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
 8000ad8:	2001      	movs	r0, #1
 8000ada:	2cff      	cmp	r4, #255	@ 0xff
 8000adc:	d1fb      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ade:	4335      	orrs	r5, r6
 8000ae0:	d1f9      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ae2:	404b      	eors	r3, r1
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	e7f6      	b.n	8000ad6 <__eqsf2+0x3a>
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e7f4      	b.n	8000ad6 <__eqsf2+0x3a>

08000aec <__gesf2>:
 8000aec:	b530      	push	{r4, r5, lr}
 8000aee:	0042      	lsls	r2, r0, #1
 8000af0:	0244      	lsls	r4, r0, #9
 8000af2:	024d      	lsls	r5, r1, #9
 8000af4:	0fc3      	lsrs	r3, r0, #31
 8000af6:	0048      	lsls	r0, r1, #1
 8000af8:	0a64      	lsrs	r4, r4, #9
 8000afa:	0e12      	lsrs	r2, r2, #24
 8000afc:	0a6d      	lsrs	r5, r5, #9
 8000afe:	0e00      	lsrs	r0, r0, #24
 8000b00:	0fc9      	lsrs	r1, r1, #31
 8000b02:	2aff      	cmp	r2, #255	@ 0xff
 8000b04:	d018      	beq.n	8000b38 <__gesf2+0x4c>
 8000b06:	28ff      	cmp	r0, #255	@ 0xff
 8000b08:	d00a      	beq.n	8000b20 <__gesf2+0x34>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d11e      	bne.n	8000b4c <__gesf2+0x60>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d10a      	bne.n	8000b28 <__gesf2+0x3c>
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d029      	beq.n	8000b6a <__gesf2+0x7e>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d12d      	bne.n	8000b76 <__gesf2+0x8a>
 8000b1a:	0048      	lsls	r0, r1, #1
 8000b1c:	3801      	subs	r0, #1
 8000b1e:	bd30      	pop	{r4, r5, pc}
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d125      	bne.n	8000b70 <__gesf2+0x84>
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	d101      	bne.n	8000b2c <__gesf2+0x40>
 8000b28:	2c00      	cmp	r4, #0
 8000b2a:	d0f6      	beq.n	8000b1a <__gesf2+0x2e>
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	d019      	beq.n	8000b64 <__gesf2+0x78>
 8000b30:	2001      	movs	r0, #1
 8000b32:	425b      	negs	r3, r3
 8000b34:	4318      	orrs	r0, r3
 8000b36:	e7f2      	b.n	8000b1e <__gesf2+0x32>
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	d119      	bne.n	8000b70 <__gesf2+0x84>
 8000b3c:	28ff      	cmp	r0, #255	@ 0xff
 8000b3e:	d1f7      	bne.n	8000b30 <__gesf2+0x44>
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d115      	bne.n	8000b70 <__gesf2+0x84>
 8000b44:	2000      	movs	r0, #0
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d1f2      	bne.n	8000b30 <__gesf2+0x44>
 8000b4a:	e7e8      	b.n	8000b1e <__gesf2+0x32>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d0ef      	beq.n	8000b30 <__gesf2+0x44>
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d1ed      	bne.n	8000b30 <__gesf2+0x44>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	dceb      	bgt.n	8000b30 <__gesf2+0x44>
 8000b58:	db04      	blt.n	8000b64 <__gesf2+0x78>
 8000b5a:	42ac      	cmp	r4, r5
 8000b5c:	d8e8      	bhi.n	8000b30 <__gesf2+0x44>
 8000b5e:	2000      	movs	r0, #0
 8000b60:	42ac      	cmp	r4, r5
 8000b62:	d2dc      	bcs.n	8000b1e <__gesf2+0x32>
 8000b64:	0058      	lsls	r0, r3, #1
 8000b66:	3801      	subs	r0, #1
 8000b68:	e7d9      	b.n	8000b1e <__gesf2+0x32>
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d0d7      	beq.n	8000b1e <__gesf2+0x32>
 8000b6e:	e7df      	b.n	8000b30 <__gesf2+0x44>
 8000b70:	2002      	movs	r0, #2
 8000b72:	4240      	negs	r0, r0
 8000b74:	e7d3      	b.n	8000b1e <__gesf2+0x32>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d1da      	bne.n	8000b30 <__gesf2+0x44>
 8000b7a:	e7ee      	b.n	8000b5a <__gesf2+0x6e>

08000b7c <__lesf2>:
 8000b7c:	b530      	push	{r4, r5, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0244      	lsls	r4, r0, #9
 8000b82:	024d      	lsls	r5, r1, #9
 8000b84:	0fc3      	lsrs	r3, r0, #31
 8000b86:	0048      	lsls	r0, r1, #1
 8000b88:	0a64      	lsrs	r4, r4, #9
 8000b8a:	0e12      	lsrs	r2, r2, #24
 8000b8c:	0a6d      	lsrs	r5, r5, #9
 8000b8e:	0e00      	lsrs	r0, r0, #24
 8000b90:	0fc9      	lsrs	r1, r1, #31
 8000b92:	2aff      	cmp	r2, #255	@ 0xff
 8000b94:	d017      	beq.n	8000bc6 <__lesf2+0x4a>
 8000b96:	28ff      	cmp	r0, #255	@ 0xff
 8000b98:	d00a      	beq.n	8000bb0 <__lesf2+0x34>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d11b      	bne.n	8000bd6 <__lesf2+0x5a>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d10a      	bne.n	8000bb8 <__lesf2+0x3c>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d01d      	beq.n	8000be2 <__lesf2+0x66>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d12d      	bne.n	8000c06 <__lesf2+0x8a>
 8000baa:	0048      	lsls	r0, r1, #1
 8000bac:	3801      	subs	r0, #1
 8000bae:	e011      	b.n	8000bd4 <__lesf2+0x58>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d10e      	bne.n	8000bd2 <__lesf2+0x56>
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d101      	bne.n	8000bbc <__lesf2+0x40>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d0f6      	beq.n	8000baa <__lesf2+0x2e>
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d10c      	bne.n	8000bda <__lesf2+0x5e>
 8000bc0:	0058      	lsls	r0, r3, #1
 8000bc2:	3801      	subs	r0, #1
 8000bc4:	e006      	b.n	8000bd4 <__lesf2+0x58>
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	d103      	bne.n	8000bd2 <__lesf2+0x56>
 8000bca:	28ff      	cmp	r0, #255	@ 0xff
 8000bcc:	d105      	bne.n	8000bda <__lesf2+0x5e>
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d015      	beq.n	8000bfe <__lesf2+0x82>
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	bd30      	pop	{r4, r5, pc}
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d106      	bne.n	8000be8 <__lesf2+0x6c>
 8000bda:	2001      	movs	r0, #1
 8000bdc:	425b      	negs	r3, r3
 8000bde:	4318      	orrs	r0, r3
 8000be0:	e7f8      	b.n	8000bd4 <__lesf2+0x58>
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	d0f6      	beq.n	8000bd4 <__lesf2+0x58>
 8000be6:	e7f8      	b.n	8000bda <__lesf2+0x5e>
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d1f6      	bne.n	8000bda <__lesf2+0x5e>
 8000bec:	4282      	cmp	r2, r0
 8000bee:	dcf4      	bgt.n	8000bda <__lesf2+0x5e>
 8000bf0:	dbe6      	blt.n	8000bc0 <__lesf2+0x44>
 8000bf2:	42ac      	cmp	r4, r5
 8000bf4:	d8f1      	bhi.n	8000bda <__lesf2+0x5e>
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	42ac      	cmp	r4, r5
 8000bfa:	d2eb      	bcs.n	8000bd4 <__lesf2+0x58>
 8000bfc:	e7e0      	b.n	8000bc0 <__lesf2+0x44>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d1ea      	bne.n	8000bda <__lesf2+0x5e>
 8000c04:	e7e6      	b.n	8000bd4 <__lesf2+0x58>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d1e7      	bne.n	8000bda <__lesf2+0x5e>
 8000c0a:	e7f2      	b.n	8000bf2 <__lesf2+0x76>

08000c0c <__aeabi_fsub>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	4647      	mov	r7, r8
 8000c10:	46ce      	mov	lr, r9
 8000c12:	0243      	lsls	r3, r0, #9
 8000c14:	b580      	push	{r7, lr}
 8000c16:	0a5f      	lsrs	r7, r3, #9
 8000c18:	099b      	lsrs	r3, r3, #6
 8000c1a:	0045      	lsls	r5, r0, #1
 8000c1c:	004a      	lsls	r2, r1, #1
 8000c1e:	469c      	mov	ip, r3
 8000c20:	024b      	lsls	r3, r1, #9
 8000c22:	0fc4      	lsrs	r4, r0, #31
 8000c24:	0fce      	lsrs	r6, r1, #31
 8000c26:	0e2d      	lsrs	r5, r5, #24
 8000c28:	0a58      	lsrs	r0, r3, #9
 8000c2a:	0e12      	lsrs	r2, r2, #24
 8000c2c:	0999      	lsrs	r1, r3, #6
 8000c2e:	2aff      	cmp	r2, #255	@ 0xff
 8000c30:	d06b      	beq.n	8000d0a <__aeabi_fsub+0xfe>
 8000c32:	2301      	movs	r3, #1
 8000c34:	405e      	eors	r6, r3
 8000c36:	1aab      	subs	r3, r5, r2
 8000c38:	42b4      	cmp	r4, r6
 8000c3a:	d04b      	beq.n	8000cd4 <__aeabi_fsub+0xc8>
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	dc00      	bgt.n	8000c42 <__aeabi_fsub+0x36>
 8000c40:	e0ff      	b.n	8000e42 <__aeabi_fsub+0x236>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fsub+0x3c>
 8000c46:	e088      	b.n	8000d5a <__aeabi_fsub+0x14e>
 8000c48:	2dff      	cmp	r5, #255	@ 0xff
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_fsub+0x42>
 8000c4c:	e0ef      	b.n	8000e2e <__aeabi_fsub+0x222>
 8000c4e:	2280      	movs	r2, #128	@ 0x80
 8000c50:	04d2      	lsls	r2, r2, #19
 8000c52:	4311      	orrs	r1, r2
 8000c54:	2001      	movs	r0, #1
 8000c56:	2b1b      	cmp	r3, #27
 8000c58:	dc08      	bgt.n	8000c6c <__aeabi_fsub+0x60>
 8000c5a:	0008      	movs	r0, r1
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	40d8      	lsrs	r0, r3
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	4099      	lsls	r1, r3
 8000c64:	000b      	movs	r3, r1
 8000c66:	1e5a      	subs	r2, r3, #1
 8000c68:	4193      	sbcs	r3, r2
 8000c6a:	4318      	orrs	r0, r3
 8000c6c:	4663      	mov	r3, ip
 8000c6e:	1a1b      	subs	r3, r3, r0
 8000c70:	469c      	mov	ip, r3
 8000c72:	4663      	mov	r3, ip
 8000c74:	015b      	lsls	r3, r3, #5
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_fsub+0x6e>
 8000c78:	e0cd      	b.n	8000e16 <__aeabi_fsub+0x20a>
 8000c7a:	4663      	mov	r3, ip
 8000c7c:	019f      	lsls	r7, r3, #6
 8000c7e:	09bf      	lsrs	r7, r7, #6
 8000c80:	0038      	movs	r0, r7
 8000c82:	f000 fa77 	bl	8001174 <__clzsi2>
 8000c86:	003b      	movs	r3, r7
 8000c88:	3805      	subs	r0, #5
 8000c8a:	4083      	lsls	r3, r0
 8000c8c:	4285      	cmp	r5, r0
 8000c8e:	dc00      	bgt.n	8000c92 <__aeabi_fsub+0x86>
 8000c90:	e0a2      	b.n	8000dd8 <__aeabi_fsub+0x1cc>
 8000c92:	4ab7      	ldr	r2, [pc, #732]	@ (8000f70 <__aeabi_fsub+0x364>)
 8000c94:	1a2d      	subs	r5, r5, r0
 8000c96:	401a      	ands	r2, r3
 8000c98:	4694      	mov	ip, r2
 8000c9a:	075a      	lsls	r2, r3, #29
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fsub+0x94>
 8000c9e:	e0c3      	b.n	8000e28 <__aeabi_fsub+0x21c>
 8000ca0:	220f      	movs	r2, #15
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d100      	bne.n	8000caa <__aeabi_fsub+0x9e>
 8000ca8:	e0be      	b.n	8000e28 <__aeabi_fsub+0x21c>
 8000caa:	2304      	movs	r3, #4
 8000cac:	4698      	mov	r8, r3
 8000cae:	44c4      	add	ip, r8
 8000cb0:	4663      	mov	r3, ip
 8000cb2:	015b      	lsls	r3, r3, #5
 8000cb4:	d400      	bmi.n	8000cb8 <__aeabi_fsub+0xac>
 8000cb6:	e0b7      	b.n	8000e28 <__aeabi_fsub+0x21c>
 8000cb8:	1c68      	adds	r0, r5, #1
 8000cba:	2dfe      	cmp	r5, #254	@ 0xfe
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_fsub+0xb4>
 8000cbe:	e0a5      	b.n	8000e0c <__aeabi_fsub+0x200>
 8000cc0:	20ff      	movs	r0, #255	@ 0xff
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	05c0      	lsls	r0, r0, #23
 8000cc6:	4310      	orrs	r0, r2
 8000cc8:	07e4      	lsls	r4, r4, #31
 8000cca:	4320      	orrs	r0, r4
 8000ccc:	bcc0      	pop	{r6, r7}
 8000cce:	46b9      	mov	r9, r7
 8000cd0:	46b0      	mov	r8, r6
 8000cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	dc00      	bgt.n	8000cda <__aeabi_fsub+0xce>
 8000cd8:	e1eb      	b.n	80010b2 <__aeabi_fsub+0x4a6>
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d046      	beq.n	8000d6c <__aeabi_fsub+0x160>
 8000cde:	2dff      	cmp	r5, #255	@ 0xff
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fsub+0xd8>
 8000ce2:	e0a4      	b.n	8000e2e <__aeabi_fsub+0x222>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	04d2      	lsls	r2, r2, #19
 8000ce8:	4311      	orrs	r1, r2
 8000cea:	2b1b      	cmp	r3, #27
 8000cec:	dc00      	bgt.n	8000cf0 <__aeabi_fsub+0xe4>
 8000cee:	e0fb      	b.n	8000ee8 <__aeabi_fsub+0x2dc>
 8000cf0:	2305      	movs	r3, #5
 8000cf2:	4698      	mov	r8, r3
 8000cf4:	002b      	movs	r3, r5
 8000cf6:	44c4      	add	ip, r8
 8000cf8:	4662      	mov	r2, ip
 8000cfa:	08d7      	lsrs	r7, r2, #3
 8000cfc:	2bff      	cmp	r3, #255	@ 0xff
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_fsub+0xf6>
 8000d00:	e095      	b.n	8000e2e <__aeabi_fsub+0x222>
 8000d02:	027a      	lsls	r2, r7, #9
 8000d04:	0a52      	lsrs	r2, r2, #9
 8000d06:	b2d8      	uxtb	r0, r3
 8000d08:	e7dc      	b.n	8000cc4 <__aeabi_fsub+0xb8>
 8000d0a:	002b      	movs	r3, r5
 8000d0c:	3bff      	subs	r3, #255	@ 0xff
 8000d0e:	4699      	mov	r9, r3
 8000d10:	2900      	cmp	r1, #0
 8000d12:	d118      	bne.n	8000d46 <__aeabi_fsub+0x13a>
 8000d14:	2301      	movs	r3, #1
 8000d16:	405e      	eors	r6, r3
 8000d18:	42b4      	cmp	r4, r6
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_fsub+0x112>
 8000d1c:	e0ca      	b.n	8000eb4 <__aeabi_fsub+0x2a8>
 8000d1e:	464b      	mov	r3, r9
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d02d      	beq.n	8000d80 <__aeabi_fsub+0x174>
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d000      	beq.n	8000d2a <__aeabi_fsub+0x11e>
 8000d28:	e13c      	b.n	8000fa4 <__aeabi_fsub+0x398>
 8000d2a:	23ff      	movs	r3, #255	@ 0xff
 8000d2c:	4664      	mov	r4, ip
 8000d2e:	2c00      	cmp	r4, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x128>
 8000d32:	e15f      	b.n	8000ff4 <__aeabi_fsub+0x3e8>
 8000d34:	1e5d      	subs	r5, r3, #1
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d100      	bne.n	8000d3c <__aeabi_fsub+0x130>
 8000d3a:	e174      	b.n	8001026 <__aeabi_fsub+0x41a>
 8000d3c:	0034      	movs	r4, r6
 8000d3e:	2bff      	cmp	r3, #255	@ 0xff
 8000d40:	d074      	beq.n	8000e2c <__aeabi_fsub+0x220>
 8000d42:	002b      	movs	r3, r5
 8000d44:	e103      	b.n	8000f4e <__aeabi_fsub+0x342>
 8000d46:	42b4      	cmp	r4, r6
 8000d48:	d100      	bne.n	8000d4c <__aeabi_fsub+0x140>
 8000d4a:	e09c      	b.n	8000e86 <__aeabi_fsub+0x27a>
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d017      	beq.n	8000d80 <__aeabi_fsub+0x174>
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d0ea      	beq.n	8000d2a <__aeabi_fsub+0x11e>
 8000d54:	0007      	movs	r7, r0
 8000d56:	0034      	movs	r4, r6
 8000d58:	e06c      	b.n	8000e34 <__aeabi_fsub+0x228>
 8000d5a:	2900      	cmp	r1, #0
 8000d5c:	d0cc      	beq.n	8000cf8 <__aeabi_fsub+0xec>
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d02b      	beq.n	8000dbc <__aeabi_fsub+0x1b0>
 8000d64:	2bff      	cmp	r3, #255	@ 0xff
 8000d66:	d062      	beq.n	8000e2e <__aeabi_fsub+0x222>
 8000d68:	0013      	movs	r3, r2
 8000d6a:	e773      	b.n	8000c54 <__aeabi_fsub+0x48>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	d0c3      	beq.n	8000cf8 <__aeabi_fsub+0xec>
 8000d70:	1e5a      	subs	r2, r3, #1
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x16c>
 8000d76:	e11e      	b.n	8000fb6 <__aeabi_fsub+0x3aa>
 8000d78:	2bff      	cmp	r3, #255	@ 0xff
 8000d7a:	d058      	beq.n	8000e2e <__aeabi_fsub+0x222>
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	e7b4      	b.n	8000cea <__aeabi_fsub+0xde>
 8000d80:	22fe      	movs	r2, #254	@ 0xfe
 8000d82:	1c6b      	adds	r3, r5, #1
 8000d84:	421a      	tst	r2, r3
 8000d86:	d10d      	bne.n	8000da4 <__aeabi_fsub+0x198>
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	d060      	beq.n	8000e4e <__aeabi_fsub+0x242>
 8000d8c:	4663      	mov	r3, ip
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d000      	beq.n	8000d94 <__aeabi_fsub+0x188>
 8000d92:	e120      	b.n	8000fd6 <__aeabi_fsub+0x3ca>
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d000      	beq.n	8000d9a <__aeabi_fsub+0x18e>
 8000d98:	e128      	b.n	8000fec <__aeabi_fsub+0x3e0>
 8000d9a:	2280      	movs	r2, #128	@ 0x80
 8000d9c:	2400      	movs	r4, #0
 8000d9e:	20ff      	movs	r0, #255	@ 0xff
 8000da0:	03d2      	lsls	r2, r2, #15
 8000da2:	e78f      	b.n	8000cc4 <__aeabi_fsub+0xb8>
 8000da4:	4663      	mov	r3, ip
 8000da6:	1a5f      	subs	r7, r3, r1
 8000da8:	017b      	lsls	r3, r7, #5
 8000daa:	d500      	bpl.n	8000dae <__aeabi_fsub+0x1a2>
 8000dac:	e0fe      	b.n	8000fac <__aeabi_fsub+0x3a0>
 8000dae:	2f00      	cmp	r7, #0
 8000db0:	d000      	beq.n	8000db4 <__aeabi_fsub+0x1a8>
 8000db2:	e765      	b.n	8000c80 <__aeabi_fsub+0x74>
 8000db4:	2400      	movs	r4, #0
 8000db6:	2000      	movs	r0, #0
 8000db8:	2200      	movs	r2, #0
 8000dba:	e783      	b.n	8000cc4 <__aeabi_fsub+0xb8>
 8000dbc:	4663      	mov	r3, ip
 8000dbe:	1a59      	subs	r1, r3, r1
 8000dc0:	014b      	lsls	r3, r1, #5
 8000dc2:	d400      	bmi.n	8000dc6 <__aeabi_fsub+0x1ba>
 8000dc4:	e119      	b.n	8000ffa <__aeabi_fsub+0x3ee>
 8000dc6:	018f      	lsls	r7, r1, #6
 8000dc8:	09bf      	lsrs	r7, r7, #6
 8000dca:	0038      	movs	r0, r7
 8000dcc:	f000 f9d2 	bl	8001174 <__clzsi2>
 8000dd0:	003b      	movs	r3, r7
 8000dd2:	3805      	subs	r0, #5
 8000dd4:	4083      	lsls	r3, r0
 8000dd6:	2501      	movs	r5, #1
 8000dd8:	2220      	movs	r2, #32
 8000dda:	1b40      	subs	r0, r0, r5
 8000ddc:	3001      	adds	r0, #1
 8000dde:	1a12      	subs	r2, r2, r0
 8000de0:	0019      	movs	r1, r3
 8000de2:	4093      	lsls	r3, r2
 8000de4:	40c1      	lsrs	r1, r0
 8000de6:	1e5a      	subs	r2, r3, #1
 8000de8:	4193      	sbcs	r3, r2
 8000dea:	4319      	orrs	r1, r3
 8000dec:	468c      	mov	ip, r1
 8000dee:	1e0b      	subs	r3, r1, #0
 8000df0:	d0e1      	beq.n	8000db6 <__aeabi_fsub+0x1aa>
 8000df2:	075b      	lsls	r3, r3, #29
 8000df4:	d100      	bne.n	8000df8 <__aeabi_fsub+0x1ec>
 8000df6:	e152      	b.n	800109e <__aeabi_fsub+0x492>
 8000df8:	230f      	movs	r3, #15
 8000dfa:	2500      	movs	r5, #0
 8000dfc:	400b      	ands	r3, r1
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d000      	beq.n	8000e04 <__aeabi_fsub+0x1f8>
 8000e02:	e752      	b.n	8000caa <__aeabi_fsub+0x9e>
 8000e04:	2001      	movs	r0, #1
 8000e06:	014a      	lsls	r2, r1, #5
 8000e08:	d400      	bmi.n	8000e0c <__aeabi_fsub+0x200>
 8000e0a:	e092      	b.n	8000f32 <__aeabi_fsub+0x326>
 8000e0c:	b2c0      	uxtb	r0, r0
 8000e0e:	4663      	mov	r3, ip
 8000e10:	019a      	lsls	r2, r3, #6
 8000e12:	0a52      	lsrs	r2, r2, #9
 8000e14:	e756      	b.n	8000cc4 <__aeabi_fsub+0xb8>
 8000e16:	4663      	mov	r3, ip
 8000e18:	075b      	lsls	r3, r3, #29
 8000e1a:	d005      	beq.n	8000e28 <__aeabi_fsub+0x21c>
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	4662      	mov	r2, ip
 8000e20:	4013      	ands	r3, r2
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d000      	beq.n	8000e28 <__aeabi_fsub+0x21c>
 8000e26:	e740      	b.n	8000caa <__aeabi_fsub+0x9e>
 8000e28:	002b      	movs	r3, r5
 8000e2a:	e765      	b.n	8000cf8 <__aeabi_fsub+0xec>
 8000e2c:	0007      	movs	r7, r0
 8000e2e:	2f00      	cmp	r7, #0
 8000e30:	d100      	bne.n	8000e34 <__aeabi_fsub+0x228>
 8000e32:	e745      	b.n	8000cc0 <__aeabi_fsub+0xb4>
 8000e34:	2280      	movs	r2, #128	@ 0x80
 8000e36:	03d2      	lsls	r2, r2, #15
 8000e38:	433a      	orrs	r2, r7
 8000e3a:	0252      	lsls	r2, r2, #9
 8000e3c:	20ff      	movs	r0, #255	@ 0xff
 8000e3e:	0a52      	lsrs	r2, r2, #9
 8000e40:	e740      	b.n	8000cc4 <__aeabi_fsub+0xb8>
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d179      	bne.n	8000f3a <__aeabi_fsub+0x32e>
 8000e46:	22fe      	movs	r2, #254	@ 0xfe
 8000e48:	1c6b      	adds	r3, r5, #1
 8000e4a:	421a      	tst	r2, r3
 8000e4c:	d1aa      	bne.n	8000da4 <__aeabi_fsub+0x198>
 8000e4e:	4663      	mov	r3, ip
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fsub+0x24a>
 8000e54:	e0f5      	b.n	8001042 <__aeabi_fsub+0x436>
 8000e56:	2900      	cmp	r1, #0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_fsub+0x250>
 8000e5a:	e0d1      	b.n	8001000 <__aeabi_fsub+0x3f4>
 8000e5c:	1a5f      	subs	r7, r3, r1
 8000e5e:	2380      	movs	r3, #128	@ 0x80
 8000e60:	04db      	lsls	r3, r3, #19
 8000e62:	421f      	tst	r7, r3
 8000e64:	d100      	bne.n	8000e68 <__aeabi_fsub+0x25c>
 8000e66:	e10e      	b.n	8001086 <__aeabi_fsub+0x47a>
 8000e68:	4662      	mov	r2, ip
 8000e6a:	2401      	movs	r4, #1
 8000e6c:	1a8a      	subs	r2, r1, r2
 8000e6e:	4694      	mov	ip, r2
 8000e70:	2000      	movs	r0, #0
 8000e72:	4034      	ands	r4, r6
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_fsub+0x26e>
 8000e78:	e724      	b.n	8000cc4 <__aeabi_fsub+0xb8>
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	421a      	tst	r2, r3
 8000e7e:	d1c6      	bne.n	8000e0e <__aeabi_fsub+0x202>
 8000e80:	2300      	movs	r3, #0
 8000e82:	08d7      	lsrs	r7, r2, #3
 8000e84:	e73d      	b.n	8000d02 <__aeabi_fsub+0xf6>
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d017      	beq.n	8000eba <__aeabi_fsub+0x2ae>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d000      	beq.n	8000e90 <__aeabi_fsub+0x284>
 8000e8e:	e0af      	b.n	8000ff0 <__aeabi_fsub+0x3e4>
 8000e90:	23ff      	movs	r3, #255	@ 0xff
 8000e92:	4665      	mov	r5, ip
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	d100      	bne.n	8000e9a <__aeabi_fsub+0x28e>
 8000e98:	e0ad      	b.n	8000ff6 <__aeabi_fsub+0x3ea>
 8000e9a:	1e5e      	subs	r6, r3, #1
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_fsub+0x296>
 8000ea0:	e089      	b.n	8000fb6 <__aeabi_fsub+0x3aa>
 8000ea2:	2bff      	cmp	r3, #255	@ 0xff
 8000ea4:	d0c2      	beq.n	8000e2c <__aeabi_fsub+0x220>
 8000ea6:	2e1b      	cmp	r6, #27
 8000ea8:	dc00      	bgt.n	8000eac <__aeabi_fsub+0x2a0>
 8000eaa:	e0ab      	b.n	8001004 <__aeabi_fsub+0x3f8>
 8000eac:	1d4b      	adds	r3, r1, #5
 8000eae:	469c      	mov	ip, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	e721      	b.n	8000cf8 <__aeabi_fsub+0xec>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d170      	bne.n	8000f9c <__aeabi_fsub+0x390>
 8000eba:	22fe      	movs	r2, #254	@ 0xfe
 8000ebc:	1c6b      	adds	r3, r5, #1
 8000ebe:	421a      	tst	r2, r3
 8000ec0:	d15e      	bne.n	8000f80 <__aeabi_fsub+0x374>
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d000      	beq.n	8000ec8 <__aeabi_fsub+0x2bc>
 8000ec6:	e0c3      	b.n	8001050 <__aeabi_fsub+0x444>
 8000ec8:	4663      	mov	r3, ip
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fsub+0x2c4>
 8000ece:	e0d0      	b.n	8001072 <__aeabi_fsub+0x466>
 8000ed0:	2900      	cmp	r1, #0
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_fsub+0x2ca>
 8000ed4:	e094      	b.n	8001000 <__aeabi_fsub+0x3f4>
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	4462      	add	r2, ip
 8000eda:	0153      	lsls	r3, r2, #5
 8000edc:	d400      	bmi.n	8000ee0 <__aeabi_fsub+0x2d4>
 8000ede:	e0d8      	b.n	8001092 <__aeabi_fsub+0x486>
 8000ee0:	0192      	lsls	r2, r2, #6
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	0a52      	lsrs	r2, r2, #9
 8000ee6:	e6ed      	b.n	8000cc4 <__aeabi_fsub+0xb8>
 8000ee8:	0008      	movs	r0, r1
 8000eea:	2220      	movs	r2, #32
 8000eec:	40d8      	lsrs	r0, r3
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	4099      	lsls	r1, r3
 8000ef2:	000b      	movs	r3, r1
 8000ef4:	1e5a      	subs	r2, r3, #1
 8000ef6:	4193      	sbcs	r3, r2
 8000ef8:	4303      	orrs	r3, r0
 8000efa:	449c      	add	ip, r3
 8000efc:	4663      	mov	r3, ip
 8000efe:	015b      	lsls	r3, r3, #5
 8000f00:	d589      	bpl.n	8000e16 <__aeabi_fsub+0x20a>
 8000f02:	3501      	adds	r5, #1
 8000f04:	2dff      	cmp	r5, #255	@ 0xff
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x2fe>
 8000f08:	e6da      	b.n	8000cc0 <__aeabi_fsub+0xb4>
 8000f0a:	4662      	mov	r2, ip
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	4919      	ldr	r1, [pc, #100]	@ (8000f74 <__aeabi_fsub+0x368>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	0852      	lsrs	r2, r2, #1
 8000f14:	400a      	ands	r2, r1
 8000f16:	431a      	orrs	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	4694      	mov	ip, r2
 8000f1c:	075b      	lsls	r3, r3, #29
 8000f1e:	d004      	beq.n	8000f2a <__aeabi_fsub+0x31e>
 8000f20:	230f      	movs	r3, #15
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fsub+0x31e>
 8000f28:	e6bf      	b.n	8000caa <__aeabi_fsub+0x9e>
 8000f2a:	4663      	mov	r3, ip
 8000f2c:	015b      	lsls	r3, r3, #5
 8000f2e:	d500      	bpl.n	8000f32 <__aeabi_fsub+0x326>
 8000f30:	e6c2      	b.n	8000cb8 <__aeabi_fsub+0xac>
 8000f32:	4663      	mov	r3, ip
 8000f34:	08df      	lsrs	r7, r3, #3
 8000f36:	002b      	movs	r3, r5
 8000f38:	e6e3      	b.n	8000d02 <__aeabi_fsub+0xf6>
 8000f3a:	1b53      	subs	r3, r2, r5
 8000f3c:	2d00      	cmp	r5, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_fsub+0x336>
 8000f40:	e6f4      	b.n	8000d2c <__aeabi_fsub+0x120>
 8000f42:	2080      	movs	r0, #128	@ 0x80
 8000f44:	4664      	mov	r4, ip
 8000f46:	04c0      	lsls	r0, r0, #19
 8000f48:	4304      	orrs	r4, r0
 8000f4a:	46a4      	mov	ip, r4
 8000f4c:	0034      	movs	r4, r6
 8000f4e:	2001      	movs	r0, #1
 8000f50:	2b1b      	cmp	r3, #27
 8000f52:	dc09      	bgt.n	8000f68 <__aeabi_fsub+0x35c>
 8000f54:	2520      	movs	r5, #32
 8000f56:	4660      	mov	r0, ip
 8000f58:	40d8      	lsrs	r0, r3
 8000f5a:	1aeb      	subs	r3, r5, r3
 8000f5c:	4665      	mov	r5, ip
 8000f5e:	409d      	lsls	r5, r3
 8000f60:	002b      	movs	r3, r5
 8000f62:	1e5d      	subs	r5, r3, #1
 8000f64:	41ab      	sbcs	r3, r5
 8000f66:	4318      	orrs	r0, r3
 8000f68:	1a0b      	subs	r3, r1, r0
 8000f6a:	469c      	mov	ip, r3
 8000f6c:	0015      	movs	r5, r2
 8000f6e:	e680      	b.n	8000c72 <__aeabi_fsub+0x66>
 8000f70:	fbffffff 	.word	0xfbffffff
 8000f74:	7dffffff 	.word	0x7dffffff
 8000f78:	22fe      	movs	r2, #254	@ 0xfe
 8000f7a:	1c6b      	adds	r3, r5, #1
 8000f7c:	4213      	tst	r3, r2
 8000f7e:	d0a3      	beq.n	8000ec8 <__aeabi_fsub+0x2bc>
 8000f80:	2bff      	cmp	r3, #255	@ 0xff
 8000f82:	d100      	bne.n	8000f86 <__aeabi_fsub+0x37a>
 8000f84:	e69c      	b.n	8000cc0 <__aeabi_fsub+0xb4>
 8000f86:	4461      	add	r1, ip
 8000f88:	0849      	lsrs	r1, r1, #1
 8000f8a:	074a      	lsls	r2, r1, #29
 8000f8c:	d049      	beq.n	8001022 <__aeabi_fsub+0x416>
 8000f8e:	220f      	movs	r2, #15
 8000f90:	400a      	ands	r2, r1
 8000f92:	2a04      	cmp	r2, #4
 8000f94:	d045      	beq.n	8001022 <__aeabi_fsub+0x416>
 8000f96:	1d0a      	adds	r2, r1, #4
 8000f98:	4694      	mov	ip, r2
 8000f9a:	e6ad      	b.n	8000cf8 <__aeabi_fsub+0xec>
 8000f9c:	2d00      	cmp	r5, #0
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_fsub+0x396>
 8000fa0:	e776      	b.n	8000e90 <__aeabi_fsub+0x284>
 8000fa2:	e68d      	b.n	8000cc0 <__aeabi_fsub+0xb4>
 8000fa4:	0034      	movs	r4, r6
 8000fa6:	20ff      	movs	r0, #255	@ 0xff
 8000fa8:	2200      	movs	r2, #0
 8000faa:	e68b      	b.n	8000cc4 <__aeabi_fsub+0xb8>
 8000fac:	4663      	mov	r3, ip
 8000fae:	2401      	movs	r4, #1
 8000fb0:	1acf      	subs	r7, r1, r3
 8000fb2:	4034      	ands	r4, r6
 8000fb4:	e664      	b.n	8000c80 <__aeabi_fsub+0x74>
 8000fb6:	4461      	add	r1, ip
 8000fb8:	014b      	lsls	r3, r1, #5
 8000fba:	d56d      	bpl.n	8001098 <__aeabi_fsub+0x48c>
 8000fbc:	0848      	lsrs	r0, r1, #1
 8000fbe:	4944      	ldr	r1, [pc, #272]	@ (80010d0 <__aeabi_fsub+0x4c4>)
 8000fc0:	4001      	ands	r1, r0
 8000fc2:	0743      	lsls	r3, r0, #29
 8000fc4:	d02c      	beq.n	8001020 <__aeabi_fsub+0x414>
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	4003      	ands	r3, r0
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d028      	beq.n	8001020 <__aeabi_fsub+0x414>
 8000fce:	1d0b      	adds	r3, r1, #4
 8000fd0:	469c      	mov	ip, r3
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e690      	b.n	8000cf8 <__aeabi_fsub+0xec>
 8000fd6:	2900      	cmp	r1, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_fsub+0x3d0>
 8000fda:	e72b      	b.n	8000e34 <__aeabi_fsub+0x228>
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	03db      	lsls	r3, r3, #15
 8000fe0:	429f      	cmp	r7, r3
 8000fe2:	d200      	bcs.n	8000fe6 <__aeabi_fsub+0x3da>
 8000fe4:	e726      	b.n	8000e34 <__aeabi_fsub+0x228>
 8000fe6:	4298      	cmp	r0, r3
 8000fe8:	d300      	bcc.n	8000fec <__aeabi_fsub+0x3e0>
 8000fea:	e723      	b.n	8000e34 <__aeabi_fsub+0x228>
 8000fec:	2401      	movs	r4, #1
 8000fee:	4034      	ands	r4, r6
 8000ff0:	0007      	movs	r7, r0
 8000ff2:	e71f      	b.n	8000e34 <__aeabi_fsub+0x228>
 8000ff4:	0034      	movs	r4, r6
 8000ff6:	468c      	mov	ip, r1
 8000ff8:	e67e      	b.n	8000cf8 <__aeabi_fsub+0xec>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	08cf      	lsrs	r7, r1, #3
 8000ffe:	e680      	b.n	8000d02 <__aeabi_fsub+0xf6>
 8001000:	2300      	movs	r3, #0
 8001002:	e67e      	b.n	8000d02 <__aeabi_fsub+0xf6>
 8001004:	2020      	movs	r0, #32
 8001006:	4665      	mov	r5, ip
 8001008:	1b80      	subs	r0, r0, r6
 800100a:	4085      	lsls	r5, r0
 800100c:	4663      	mov	r3, ip
 800100e:	0028      	movs	r0, r5
 8001010:	40f3      	lsrs	r3, r6
 8001012:	1e45      	subs	r5, r0, #1
 8001014:	41a8      	sbcs	r0, r5
 8001016:	4303      	orrs	r3, r0
 8001018:	469c      	mov	ip, r3
 800101a:	0015      	movs	r5, r2
 800101c:	448c      	add	ip, r1
 800101e:	e76d      	b.n	8000efc <__aeabi_fsub+0x2f0>
 8001020:	2302      	movs	r3, #2
 8001022:	08cf      	lsrs	r7, r1, #3
 8001024:	e66d      	b.n	8000d02 <__aeabi_fsub+0xf6>
 8001026:	1b0f      	subs	r7, r1, r4
 8001028:	017b      	lsls	r3, r7, #5
 800102a:	d528      	bpl.n	800107e <__aeabi_fsub+0x472>
 800102c:	01bf      	lsls	r7, r7, #6
 800102e:	09bf      	lsrs	r7, r7, #6
 8001030:	0038      	movs	r0, r7
 8001032:	f000 f89f 	bl	8001174 <__clzsi2>
 8001036:	003b      	movs	r3, r7
 8001038:	3805      	subs	r0, #5
 800103a:	4083      	lsls	r3, r0
 800103c:	0034      	movs	r4, r6
 800103e:	2501      	movs	r5, #1
 8001040:	e6ca      	b.n	8000dd8 <__aeabi_fsub+0x1cc>
 8001042:	2900      	cmp	r1, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_fsub+0x43c>
 8001046:	e6b5      	b.n	8000db4 <__aeabi_fsub+0x1a8>
 8001048:	2401      	movs	r4, #1
 800104a:	0007      	movs	r7, r0
 800104c:	4034      	ands	r4, r6
 800104e:	e658      	b.n	8000d02 <__aeabi_fsub+0xf6>
 8001050:	4663      	mov	r3, ip
 8001052:	2b00      	cmp	r3, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_fsub+0x44c>
 8001056:	e6e9      	b.n	8000e2c <__aeabi_fsub+0x220>
 8001058:	2900      	cmp	r1, #0
 800105a:	d100      	bne.n	800105e <__aeabi_fsub+0x452>
 800105c:	e6ea      	b.n	8000e34 <__aeabi_fsub+0x228>
 800105e:	2380      	movs	r3, #128	@ 0x80
 8001060:	03db      	lsls	r3, r3, #15
 8001062:	429f      	cmp	r7, r3
 8001064:	d200      	bcs.n	8001068 <__aeabi_fsub+0x45c>
 8001066:	e6e5      	b.n	8000e34 <__aeabi_fsub+0x228>
 8001068:	4298      	cmp	r0, r3
 800106a:	d300      	bcc.n	800106e <__aeabi_fsub+0x462>
 800106c:	e6e2      	b.n	8000e34 <__aeabi_fsub+0x228>
 800106e:	0007      	movs	r7, r0
 8001070:	e6e0      	b.n	8000e34 <__aeabi_fsub+0x228>
 8001072:	2900      	cmp	r1, #0
 8001074:	d100      	bne.n	8001078 <__aeabi_fsub+0x46c>
 8001076:	e69e      	b.n	8000db6 <__aeabi_fsub+0x1aa>
 8001078:	2300      	movs	r3, #0
 800107a:	08cf      	lsrs	r7, r1, #3
 800107c:	e641      	b.n	8000d02 <__aeabi_fsub+0xf6>
 800107e:	0034      	movs	r4, r6
 8001080:	2301      	movs	r3, #1
 8001082:	08ff      	lsrs	r7, r7, #3
 8001084:	e63d      	b.n	8000d02 <__aeabi_fsub+0xf6>
 8001086:	2f00      	cmp	r7, #0
 8001088:	d100      	bne.n	800108c <__aeabi_fsub+0x480>
 800108a:	e693      	b.n	8000db4 <__aeabi_fsub+0x1a8>
 800108c:	2300      	movs	r3, #0
 800108e:	08ff      	lsrs	r7, r7, #3
 8001090:	e637      	b.n	8000d02 <__aeabi_fsub+0xf6>
 8001092:	2300      	movs	r3, #0
 8001094:	08d7      	lsrs	r7, r2, #3
 8001096:	e634      	b.n	8000d02 <__aeabi_fsub+0xf6>
 8001098:	2301      	movs	r3, #1
 800109a:	08cf      	lsrs	r7, r1, #3
 800109c:	e631      	b.n	8000d02 <__aeabi_fsub+0xf6>
 800109e:	2280      	movs	r2, #128	@ 0x80
 80010a0:	000b      	movs	r3, r1
 80010a2:	04d2      	lsls	r2, r2, #19
 80010a4:	2001      	movs	r0, #1
 80010a6:	4013      	ands	r3, r2
 80010a8:	4211      	tst	r1, r2
 80010aa:	d000      	beq.n	80010ae <__aeabi_fsub+0x4a2>
 80010ac:	e6ae      	b.n	8000e0c <__aeabi_fsub+0x200>
 80010ae:	08cf      	lsrs	r7, r1, #3
 80010b0:	e627      	b.n	8000d02 <__aeabi_fsub+0xf6>
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d100      	bne.n	80010b8 <__aeabi_fsub+0x4ac>
 80010b6:	e75f      	b.n	8000f78 <__aeabi_fsub+0x36c>
 80010b8:	1b56      	subs	r6, r2, r5
 80010ba:	2d00      	cmp	r5, #0
 80010bc:	d101      	bne.n	80010c2 <__aeabi_fsub+0x4b6>
 80010be:	0033      	movs	r3, r6
 80010c0:	e6e7      	b.n	8000e92 <__aeabi_fsub+0x286>
 80010c2:	2380      	movs	r3, #128	@ 0x80
 80010c4:	4660      	mov	r0, ip
 80010c6:	04db      	lsls	r3, r3, #19
 80010c8:	4318      	orrs	r0, r3
 80010ca:	4684      	mov	ip, r0
 80010cc:	e6eb      	b.n	8000ea6 <__aeabi_fsub+0x29a>
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	7dffffff 	.word	0x7dffffff

080010d4 <__aeabi_i2f>:
 80010d4:	b570      	push	{r4, r5, r6, lr}
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d012      	beq.n	8001100 <__aeabi_i2f+0x2c>
 80010da:	17c3      	asrs	r3, r0, #31
 80010dc:	18c5      	adds	r5, r0, r3
 80010de:	405d      	eors	r5, r3
 80010e0:	0fc4      	lsrs	r4, r0, #31
 80010e2:	0028      	movs	r0, r5
 80010e4:	f000 f846 	bl	8001174 <__clzsi2>
 80010e8:	239e      	movs	r3, #158	@ 0x9e
 80010ea:	1a1b      	subs	r3, r3, r0
 80010ec:	2b96      	cmp	r3, #150	@ 0x96
 80010ee:	dc0f      	bgt.n	8001110 <__aeabi_i2f+0x3c>
 80010f0:	2808      	cmp	r0, #8
 80010f2:	d038      	beq.n	8001166 <__aeabi_i2f+0x92>
 80010f4:	3808      	subs	r0, #8
 80010f6:	4085      	lsls	r5, r0
 80010f8:	026d      	lsls	r5, r5, #9
 80010fa:	0a6d      	lsrs	r5, r5, #9
 80010fc:	b2d8      	uxtb	r0, r3
 80010fe:	e002      	b.n	8001106 <__aeabi_i2f+0x32>
 8001100:	2400      	movs	r4, #0
 8001102:	2000      	movs	r0, #0
 8001104:	2500      	movs	r5, #0
 8001106:	05c0      	lsls	r0, r0, #23
 8001108:	4328      	orrs	r0, r5
 800110a:	07e4      	lsls	r4, r4, #31
 800110c:	4320      	orrs	r0, r4
 800110e:	bd70      	pop	{r4, r5, r6, pc}
 8001110:	2b99      	cmp	r3, #153	@ 0x99
 8001112:	dc14      	bgt.n	800113e <__aeabi_i2f+0x6a>
 8001114:	1f42      	subs	r2, r0, #5
 8001116:	4095      	lsls	r5, r2
 8001118:	002a      	movs	r2, r5
 800111a:	4915      	ldr	r1, [pc, #84]	@ (8001170 <__aeabi_i2f+0x9c>)
 800111c:	4011      	ands	r1, r2
 800111e:	0755      	lsls	r5, r2, #29
 8001120:	d01c      	beq.n	800115c <__aeabi_i2f+0x88>
 8001122:	250f      	movs	r5, #15
 8001124:	402a      	ands	r2, r5
 8001126:	2a04      	cmp	r2, #4
 8001128:	d018      	beq.n	800115c <__aeabi_i2f+0x88>
 800112a:	3104      	adds	r1, #4
 800112c:	08ca      	lsrs	r2, r1, #3
 800112e:	0149      	lsls	r1, r1, #5
 8001130:	d515      	bpl.n	800115e <__aeabi_i2f+0x8a>
 8001132:	239f      	movs	r3, #159	@ 0x9f
 8001134:	0252      	lsls	r2, r2, #9
 8001136:	1a18      	subs	r0, r3, r0
 8001138:	0a55      	lsrs	r5, r2, #9
 800113a:	b2c0      	uxtb	r0, r0
 800113c:	e7e3      	b.n	8001106 <__aeabi_i2f+0x32>
 800113e:	2205      	movs	r2, #5
 8001140:	0029      	movs	r1, r5
 8001142:	1a12      	subs	r2, r2, r0
 8001144:	40d1      	lsrs	r1, r2
 8001146:	0002      	movs	r2, r0
 8001148:	321b      	adds	r2, #27
 800114a:	4095      	lsls	r5, r2
 800114c:	002a      	movs	r2, r5
 800114e:	1e55      	subs	r5, r2, #1
 8001150:	41aa      	sbcs	r2, r5
 8001152:	430a      	orrs	r2, r1
 8001154:	4906      	ldr	r1, [pc, #24]	@ (8001170 <__aeabi_i2f+0x9c>)
 8001156:	4011      	ands	r1, r2
 8001158:	0755      	lsls	r5, r2, #29
 800115a:	d1e2      	bne.n	8001122 <__aeabi_i2f+0x4e>
 800115c:	08ca      	lsrs	r2, r1, #3
 800115e:	0252      	lsls	r2, r2, #9
 8001160:	0a55      	lsrs	r5, r2, #9
 8001162:	b2d8      	uxtb	r0, r3
 8001164:	e7cf      	b.n	8001106 <__aeabi_i2f+0x32>
 8001166:	026d      	lsls	r5, r5, #9
 8001168:	0a6d      	lsrs	r5, r5, #9
 800116a:	308e      	adds	r0, #142	@ 0x8e
 800116c:	e7cb      	b.n	8001106 <__aeabi_i2f+0x32>
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	fbffffff 	.word	0xfbffffff

08001174 <__clzsi2>:
 8001174:	211c      	movs	r1, #28
 8001176:	2301      	movs	r3, #1
 8001178:	041b      	lsls	r3, r3, #16
 800117a:	4298      	cmp	r0, r3
 800117c:	d301      	bcc.n	8001182 <__clzsi2+0xe>
 800117e:	0c00      	lsrs	r0, r0, #16
 8001180:	3910      	subs	r1, #16
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	4298      	cmp	r0, r3
 8001186:	d301      	bcc.n	800118c <__clzsi2+0x18>
 8001188:	0a00      	lsrs	r0, r0, #8
 800118a:	3908      	subs	r1, #8
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	4298      	cmp	r0, r3
 8001190:	d301      	bcc.n	8001196 <__clzsi2+0x22>
 8001192:	0900      	lsrs	r0, r0, #4
 8001194:	3904      	subs	r1, #4
 8001196:	a202      	add	r2, pc, #8	@ (adr r2, 80011a0 <__clzsi2+0x2c>)
 8001198:	5c10      	ldrb	r0, [r2, r0]
 800119a:	1840      	adds	r0, r0, r1
 800119c:	4770      	bx	lr
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	02020304 	.word	0x02020304
 80011a4:	01010101 	.word	0x01010101
	...

080011b0 <null_ptr_check>:

static int8_t null_ptr_check(const struct bma400_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->intf_ptr == NULL))
 80011b0:	2800      	cmp	r0, #0
 80011b2:	d00d      	beq.n	80011d0 <null_ptr_check+0x20>
 80011b4:	68c3      	ldr	r3, [r0, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00d      	beq.n	80011d6 <null_ptr_check+0x26>
 80011ba:	6903      	ldr	r3, [r0, #16]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00d      	beq.n	80011dc <null_ptr_check+0x2c>
 80011c0:	6843      	ldr	r3, [r0, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <null_ptr_check+0x1a>
        rslt = BMA400_E_NULL_PTR;
    }
    else
    {
        /* Device structure is fine */
        rslt = BMA400_OK;
 80011c6:	2000      	movs	r0, #0
    }

    return rslt;
}
 80011c8:	4770      	bx	lr
        rslt = BMA400_E_NULL_PTR;
 80011ca:	2001      	movs	r0, #1
 80011cc:	4240      	negs	r0, r0
 80011ce:	e7fb      	b.n	80011c8 <null_ptr_check+0x18>
 80011d0:	2001      	movs	r0, #1
 80011d2:	4240      	negs	r0, r0
 80011d4:	e7f8      	b.n	80011c8 <null_ptr_check+0x18>
 80011d6:	2001      	movs	r0, #1
 80011d8:	4240      	negs	r0, r0
 80011da:	e7f5      	b.n	80011c8 <null_ptr_check+0x18>
 80011dc:	2001      	movs	r0, #1
 80011de:	4240      	negs	r0, r0
 80011e0:	e7f2      	b.n	80011c8 <null_ptr_check+0x18>
	...

080011e4 <map_int_pin>:

    return rslt;
}

static void map_int_pin(uint8_t *data_array, uint8_t int_enable, enum bma400_int_chan int_map)
{
 80011e4:	b510      	push	{r4, lr}
    switch (int_enable)
 80011e6:	290b      	cmp	r1, #11
 80011e8:	d812      	bhi.n	8001210 <map_int_pin+0x2c>
 80011ea:	0089      	lsls	r1, r1, #2
 80011ec:	4bb9      	ldr	r3, [pc, #740]	@ (80014d4 <map_int_pin+0x2f0>)
 80011ee:	585b      	ldr	r3, [r3, r1]
 80011f0:	469f      	mov	pc, r3
    {
        case BMA400_DATA_READY_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80011f2:	2a01      	cmp	r2, #1
 80011f4:	d00d      	beq.n	8001212 <map_int_pin+0x2e>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80011f6:	2a02      	cmp	r2, #2
 80011f8:	d011      	beq.n	800121e <map_int_pin+0x3a>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d106      	bne.n	800120c <map_int_pin+0x28>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_DRDY);
 80011fe:	7801      	ldrb	r1, [r0, #0]
 8001200:	237f      	movs	r3, #127	@ 0x7f
 8001202:	4019      	ands	r1, r3
 8001204:	7001      	strb	r1, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_DRDY);
 8001206:	7841      	ldrb	r1, [r0, #1]
 8001208:	400b      	ands	r3, r1
 800120a:	7043      	strb	r3, [r0, #1]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800120c:	2a03      	cmp	r2, #3
 800120e:	d00c      	beq.n	800122a <map_int_pin+0x46>

            break;
        default:
            break;
    }
}
 8001210:	bd10      	pop	{r4, pc}
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 8001212:	7801      	ldrb	r1, [r0, #0]
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	425b      	negs	r3, r3
 8001218:	430b      	orrs	r3, r1
 800121a:	7003      	strb	r3, [r0, #0]
 800121c:	e7eb      	b.n	80011f6 <map_int_pin+0x12>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 800121e:	7841      	ldrb	r1, [r0, #1]
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	425b      	negs	r3, r3
 8001224:	430b      	orrs	r3, r1
 8001226:	7043      	strb	r3, [r0, #1]
 8001228:	e7e7      	b.n	80011fa <map_int_pin+0x16>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 800122a:	7802      	ldrb	r2, [r0, #0]
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	425b      	negs	r3, r3
 8001230:	431a      	orrs	r2, r3
 8001232:	7002      	strb	r2, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 8001234:	7842      	ldrb	r2, [r0, #1]
 8001236:	4313      	orrs	r3, r2
 8001238:	7043      	strb	r3, [r0, #1]
 800123a:	e7e9      	b.n	8001210 <map_int_pin+0x2c>
            if (int_map == BMA400_INT_CHANNEL_1)
 800123c:	2a01      	cmp	r2, #1
 800123e:	d014      	beq.n	800126a <map_int_pin+0x86>
            if (int_map == BMA400_INT_CHANNEL_2)
 8001240:	2a02      	cmp	r2, #2
 8001242:	d017      	beq.n	8001274 <map_int_pin+0x90>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8001244:	2a00      	cmp	r2, #0
 8001246:	d106      	bne.n	8001256 <map_int_pin+0x72>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_WM);
 8001248:	7803      	ldrb	r3, [r0, #0]
 800124a:	2140      	movs	r1, #64	@ 0x40
 800124c:	438b      	bics	r3, r1
 800124e:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_WM);
 8001250:	7843      	ldrb	r3, [r0, #1]
 8001252:	438b      	bics	r3, r1
 8001254:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001256:	2a03      	cmp	r2, #3
 8001258:	d1da      	bne.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 800125a:	7803      	ldrb	r3, [r0, #0]
 800125c:	2240      	movs	r2, #64	@ 0x40
 800125e:	4313      	orrs	r3, r2
 8001260:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001262:	7843      	ldrb	r3, [r0, #1]
 8001264:	4313      	orrs	r3, r2
 8001266:	7043      	strb	r3, [r0, #1]
 8001268:	e7d2      	b.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 800126a:	7803      	ldrb	r3, [r0, #0]
 800126c:	2140      	movs	r1, #64	@ 0x40
 800126e:	430b      	orrs	r3, r1
 8001270:	7003      	strb	r3, [r0, #0]
 8001272:	e7e5      	b.n	8001240 <map_int_pin+0x5c>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001274:	7843      	ldrb	r3, [r0, #1]
 8001276:	2140      	movs	r1, #64	@ 0x40
 8001278:	430b      	orrs	r3, r1
 800127a:	7043      	strb	r3, [r0, #1]
 800127c:	e7e2      	b.n	8001244 <map_int_pin+0x60>
            if (int_map == BMA400_INT_CHANNEL_1)
 800127e:	2a01      	cmp	r2, #1
 8001280:	d014      	beq.n	80012ac <map_int_pin+0xc8>
            if (int_map == BMA400_INT_CHANNEL_2)
 8001282:	2a02      	cmp	r2, #2
 8001284:	d017      	beq.n	80012b6 <map_int_pin+0xd2>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8001286:	2a00      	cmp	r2, #0
 8001288:	d106      	bne.n	8001298 <map_int_pin+0xb4>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 800128a:	7803      	ldrb	r3, [r0, #0]
 800128c:	2120      	movs	r1, #32
 800128e:	438b      	bics	r3, r1
 8001290:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_FULL);
 8001292:	7843      	ldrb	r3, [r0, #1]
 8001294:	438b      	bics	r3, r1
 8001296:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001298:	2a03      	cmp	r2, #3
 800129a:	d1b9      	bne.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 800129c:	7803      	ldrb	r3, [r0, #0]
 800129e:	2220      	movs	r2, #32
 80012a0:	4313      	orrs	r3, r2
 80012a2:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 80012a4:	7843      	ldrb	r3, [r0, #1]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	7043      	strb	r3, [r0, #1]
 80012aa:	e7b1      	b.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 80012ac:	7803      	ldrb	r3, [r0, #0]
 80012ae:	2120      	movs	r1, #32
 80012b0:	430b      	orrs	r3, r1
 80012b2:	7003      	strb	r3, [r0, #0]
 80012b4:	e7e5      	b.n	8001282 <map_int_pin+0x9e>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 80012b6:	7843      	ldrb	r3, [r0, #1]
 80012b8:	2120      	movs	r1, #32
 80012ba:	430b      	orrs	r3, r1
 80012bc:	7043      	strb	r3, [r0, #1]
 80012be:	e7e2      	b.n	8001286 <map_int_pin+0xa2>
            if (int_map == BMA400_INT_CHANNEL_1)
 80012c0:	2a01      	cmp	r2, #1
 80012c2:	d014      	beq.n	80012ee <map_int_pin+0x10a>
            if (int_map == BMA400_INT_CHANNEL_2)
 80012c4:	2a02      	cmp	r2, #2
 80012c6:	d017      	beq.n	80012f8 <map_int_pin+0x114>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80012c8:	2a00      	cmp	r2, #0
 80012ca:	d106      	bne.n	80012da <map_int_pin+0xf6>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_INT_OVERRUN);
 80012cc:	7803      	ldrb	r3, [r0, #0]
 80012ce:	2110      	movs	r1, #16
 80012d0:	438b      	bics	r3, r1
 80012d2:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_INT_OVERRUN);
 80012d4:	7843      	ldrb	r3, [r0, #1]
 80012d6:	438b      	bics	r3, r1
 80012d8:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80012da:	2a03      	cmp	r2, #3
 80012dc:	d198      	bne.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80012de:	7803      	ldrb	r3, [r0, #0]
 80012e0:	2210      	movs	r2, #16
 80012e2:	4313      	orrs	r3, r2
 80012e4:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80012e6:	7843      	ldrb	r3, [r0, #1]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	7043      	strb	r3, [r0, #1]
 80012ec:	e790      	b.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80012ee:	7803      	ldrb	r3, [r0, #0]
 80012f0:	2110      	movs	r1, #16
 80012f2:	430b      	orrs	r3, r1
 80012f4:	7003      	strb	r3, [r0, #0]
 80012f6:	e7e5      	b.n	80012c4 <map_int_pin+0xe0>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80012f8:	7843      	ldrb	r3, [r0, #1]
 80012fa:	2110      	movs	r1, #16
 80012fc:	430b      	orrs	r3, r1
 80012fe:	7043      	strb	r3, [r0, #1]
 8001300:	e7e2      	b.n	80012c8 <map_int_pin+0xe4>
            if (int_map == BMA400_INT_CHANNEL_1)
 8001302:	2a01      	cmp	r2, #1
 8001304:	d015      	beq.n	8001332 <map_int_pin+0x14e>
            if (int_map == BMA400_INT_CHANNEL_2)
 8001306:	2a02      	cmp	r2, #2
 8001308:	d018      	beq.n	800133c <map_int_pin+0x158>
            if (int_map == BMA400_UNMAP_INT_PIN)
 800130a:	2a00      	cmp	r2, #0
 800130c:	d106      	bne.n	800131c <map_int_pin+0x138>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN2);
 800130e:	7803      	ldrb	r3, [r0, #0]
 8001310:	2108      	movs	r1, #8
 8001312:	438b      	bics	r3, r1
 8001314:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN2);
 8001316:	7843      	ldrb	r3, [r0, #1]
 8001318:	438b      	bics	r3, r1
 800131a:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800131c:	2a03      	cmp	r2, #3
 800131e:	d000      	beq.n	8001322 <map_int_pin+0x13e>
 8001320:	e776      	b.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8001322:	7803      	ldrb	r3, [r0, #0]
 8001324:	2208      	movs	r2, #8
 8001326:	4313      	orrs	r3, r2
 8001328:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 800132a:	7843      	ldrb	r3, [r0, #1]
 800132c:	4313      	orrs	r3, r2
 800132e:	7043      	strb	r3, [r0, #1]
 8001330:	e76e      	b.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8001332:	7803      	ldrb	r3, [r0, #0]
 8001334:	2108      	movs	r1, #8
 8001336:	430b      	orrs	r3, r1
 8001338:	7003      	strb	r3, [r0, #0]
 800133a:	e7e4      	b.n	8001306 <map_int_pin+0x122>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 800133c:	7843      	ldrb	r3, [r0, #1]
 800133e:	2108      	movs	r1, #8
 8001340:	430b      	orrs	r3, r1
 8001342:	7043      	strb	r3, [r0, #1]
 8001344:	e7e1      	b.n	800130a <map_int_pin+0x126>
            if (int_map == BMA400_INT_CHANNEL_1)
 8001346:	2a01      	cmp	r2, #1
 8001348:	d015      	beq.n	8001376 <map_int_pin+0x192>
            if (int_map == BMA400_INT_CHANNEL_2)
 800134a:	2a02      	cmp	r2, #2
 800134c:	d018      	beq.n	8001380 <map_int_pin+0x19c>
            if (int_map == BMA400_UNMAP_INT_PIN)
 800134e:	2a00      	cmp	r2, #0
 8001350:	d106      	bne.n	8001360 <map_int_pin+0x17c>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN1);
 8001352:	7803      	ldrb	r3, [r0, #0]
 8001354:	2104      	movs	r1, #4
 8001356:	438b      	bics	r3, r1
 8001358:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN1);
 800135a:	7843      	ldrb	r3, [r0, #1]
 800135c:	438b      	bics	r3, r1
 800135e:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001360:	2a03      	cmp	r2, #3
 8001362:	d000      	beq.n	8001366 <map_int_pin+0x182>
 8001364:	e754      	b.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8001366:	7803      	ldrb	r3, [r0, #0]
 8001368:	2204      	movs	r2, #4
 800136a:	4313      	orrs	r3, r2
 800136c:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 800136e:	7843      	ldrb	r3, [r0, #1]
 8001370:	4313      	orrs	r3, r2
 8001372:	7043      	strb	r3, [r0, #1]
 8001374:	e74c      	b.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8001376:	7803      	ldrb	r3, [r0, #0]
 8001378:	2104      	movs	r1, #4
 800137a:	430b      	orrs	r3, r1
 800137c:	7003      	strb	r3, [r0, #0]
 800137e:	e7e4      	b.n	800134a <map_int_pin+0x166>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8001380:	7843      	ldrb	r3, [r0, #1]
 8001382:	2104      	movs	r1, #4
 8001384:	430b      	orrs	r3, r1
 8001386:	7043      	strb	r3, [r0, #1]
 8001388:	e7e1      	b.n	800134e <map_int_pin+0x16a>
            if (int_map == BMA400_INT_CHANNEL_1)
 800138a:	2a01      	cmp	r2, #1
 800138c:	d015      	beq.n	80013ba <map_int_pin+0x1d6>
            if (int_map == BMA400_INT_CHANNEL_2)
 800138e:	2a02      	cmp	r2, #2
 8001390:	d018      	beq.n	80013c4 <map_int_pin+0x1e0>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8001392:	2a00      	cmp	r2, #0
 8001394:	d106      	bne.n	80013a4 <map_int_pin+0x1c0>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 8001396:	7803      	ldrb	r3, [r0, #0]
 8001398:	2102      	movs	r1, #2
 800139a:	438b      	bics	r3, r1
 800139c:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_ORIENT_CH);
 800139e:	7843      	ldrb	r3, [r0, #1]
 80013a0:	438b      	bics	r3, r1
 80013a2:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80013a4:	2a03      	cmp	r2, #3
 80013a6:	d000      	beq.n	80013aa <map_int_pin+0x1c6>
 80013a8:	e732      	b.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80013aa:	7803      	ldrb	r3, [r0, #0]
 80013ac:	2202      	movs	r2, #2
 80013ae:	4313      	orrs	r3, r2
 80013b0:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80013b2:	7843      	ldrb	r3, [r0, #1]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	7043      	strb	r3, [r0, #1]
 80013b8:	e72a      	b.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80013ba:	7803      	ldrb	r3, [r0, #0]
 80013bc:	2102      	movs	r1, #2
 80013be:	430b      	orrs	r3, r1
 80013c0:	7003      	strb	r3, [r0, #0]
 80013c2:	e7e4      	b.n	800138e <map_int_pin+0x1aa>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80013c4:	7843      	ldrb	r3, [r0, #1]
 80013c6:	2102      	movs	r1, #2
 80013c8:	430b      	orrs	r3, r1
 80013ca:	7043      	strb	r3, [r0, #1]
 80013cc:	e7e1      	b.n	8001392 <map_int_pin+0x1ae>
            if (int_map == BMA400_INT_CHANNEL_1)
 80013ce:	2a01      	cmp	r2, #1
 80013d0:	d015      	beq.n	80013fe <map_int_pin+0x21a>
            if (int_map == BMA400_INT_CHANNEL_2)
 80013d2:	2a02      	cmp	r2, #2
 80013d4:	d018      	beq.n	8001408 <map_int_pin+0x224>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80013d6:	2a00      	cmp	r2, #0
 80013d8:	d106      	bne.n	80013e8 <map_int_pin+0x204>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_WAKEUP_INT);
 80013da:	7803      	ldrb	r3, [r0, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	438b      	bics	r3, r1
 80013e0:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_WAKEUP_INT);
 80013e2:	7843      	ldrb	r3, [r0, #1]
 80013e4:	438b      	bics	r3, r1
 80013e6:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80013e8:	2a03      	cmp	r2, #3
 80013ea:	d000      	beq.n	80013ee <map_int_pin+0x20a>
 80013ec:	e710      	b.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80013ee:	7803      	ldrb	r3, [r0, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4313      	orrs	r3, r2
 80013f4:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80013f6:	7843      	ldrb	r3, [r0, #1]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	7043      	strb	r3, [r0, #1]
 80013fc:	e708      	b.n	8001210 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80013fe:	7803      	ldrb	r3, [r0, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	430b      	orrs	r3, r1
 8001404:	7003      	strb	r3, [r0, #0]
 8001406:	e7e4      	b.n	80013d2 <map_int_pin+0x1ee>
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001408:	7843      	ldrb	r3, [r0, #1]
 800140a:	2101      	movs	r1, #1
 800140c:	430b      	orrs	r3, r1
 800140e:	7043      	strb	r3, [r0, #1]
 8001410:	e7e1      	b.n	80013d6 <map_int_pin+0x1f2>
            if (int_map == BMA400_INT_CHANNEL_1)
 8001412:	2a01      	cmp	r2, #1
 8001414:	d017      	beq.n	8001446 <map_int_pin+0x262>
            if (int_map == BMA400_INT_CHANNEL_2)
 8001416:	2a02      	cmp	r2, #2
 8001418:	d01a      	beq.n	8001450 <map_int_pin+0x26c>
            if (int_map == BMA400_UNMAP_INT_PIN)
 800141a:	2a00      	cmp	r2, #0
 800141c:	d107      	bne.n	800142e <map_int_pin+0x24a>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT1);
 800141e:	7881      	ldrb	r1, [r0, #2]
 8001420:	2308      	movs	r3, #8
 8001422:	000c      	movs	r4, r1
 8001424:	439c      	bics	r4, r3
 8001426:	7084      	strb	r4, [r0, #2]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT2);
 8001428:	2377      	movs	r3, #119	@ 0x77
 800142a:	400b      	ands	r3, r1
 800142c:	7083      	strb	r3, [r0, #2]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800142e:	2a03      	cmp	r2, #3
 8001430:	d000      	beq.n	8001434 <map_int_pin+0x250>
 8001432:	e6ed      	b.n	8001210 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8001434:	7882      	ldrb	r2, [r0, #2]
 8001436:	2308      	movs	r3, #8
 8001438:	4313      	orrs	r3, r2
 800143a:	7083      	strb	r3, [r0, #2]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 800143c:	2378      	movs	r3, #120	@ 0x78
 800143e:	425b      	negs	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	7083      	strb	r3, [r0, #2]
 8001444:	e6e4      	b.n	8001210 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8001446:	7883      	ldrb	r3, [r0, #2]
 8001448:	2108      	movs	r1, #8
 800144a:	430b      	orrs	r3, r1
 800144c:	7083      	strb	r3, [r0, #2]
 800144e:	e7e2      	b.n	8001416 <map_int_pin+0x232>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8001450:	7881      	ldrb	r1, [r0, #2]
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	425b      	negs	r3, r3
 8001456:	430b      	orrs	r3, r1
 8001458:	7083      	strb	r3, [r0, #2]
 800145a:	e7de      	b.n	800141a <map_int_pin+0x236>
            if (int_map == BMA400_INT_CHANNEL_1)
 800145c:	2a01      	cmp	r2, #1
 800145e:	d016      	beq.n	800148e <map_int_pin+0x2aa>
            if (int_map == BMA400_INT_CHANNEL_2)
 8001460:	2a02      	cmp	r2, #2
 8001462:	d019      	beq.n	8001498 <map_int_pin+0x2b4>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8001464:	2a00      	cmp	r2, #0
 8001466:	d107      	bne.n	8001478 <map_int_pin+0x294>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT1);
 8001468:	7883      	ldrb	r3, [r0, #2]
 800146a:	2104      	movs	r1, #4
 800146c:	001c      	movs	r4, r3
 800146e:	438c      	bics	r4, r1
 8001470:	7084      	strb	r4, [r0, #2]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT2);
 8001472:	2144      	movs	r1, #68	@ 0x44
 8001474:	438b      	bics	r3, r1
 8001476:	7083      	strb	r3, [r0, #2]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001478:	2a03      	cmp	r2, #3
 800147a:	d000      	beq.n	800147e <map_int_pin+0x29a>
 800147c:	e6c8      	b.n	8001210 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 800147e:	7883      	ldrb	r3, [r0, #2]
 8001480:	2204      	movs	r2, #4
 8001482:	431a      	orrs	r2, r3
 8001484:	7082      	strb	r2, [r0, #2]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8001486:	2244      	movs	r2, #68	@ 0x44
 8001488:	4313      	orrs	r3, r2
 800148a:	7083      	strb	r3, [r0, #2]
 800148c:	e6c0      	b.n	8001210 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 800148e:	7883      	ldrb	r3, [r0, #2]
 8001490:	2104      	movs	r1, #4
 8001492:	430b      	orrs	r3, r1
 8001494:	7083      	strb	r3, [r0, #2]
 8001496:	e7e3      	b.n	8001460 <map_int_pin+0x27c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8001498:	7883      	ldrb	r3, [r0, #2]
 800149a:	2140      	movs	r1, #64	@ 0x40
 800149c:	430b      	orrs	r3, r1
 800149e:	7083      	strb	r3, [r0, #2]
 80014a0:	e7e0      	b.n	8001464 <map_int_pin+0x280>
            if (int_map == BMA400_INT_CHANNEL_1)
 80014a2:	2a01      	cmp	r2, #1
 80014a4:	d018      	beq.n	80014d8 <map_int_pin+0x2f4>
            if (int_map == BMA400_INT_CHANNEL_2)
 80014a6:	2a02      	cmp	r2, #2
 80014a8:	d01b      	beq.n	80014e2 <map_int_pin+0x2fe>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80014aa:	2a00      	cmp	r2, #0
 80014ac:	d107      	bne.n	80014be <map_int_pin+0x2da>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_EN_STEP_INT);
 80014ae:	7883      	ldrb	r3, [r0, #2]
 80014b0:	2101      	movs	r1, #1
 80014b2:	001c      	movs	r4, r3
 80014b4:	438c      	bics	r4, r1
 80014b6:	7084      	strb	r4, [r0, #2]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 80014b8:	2111      	movs	r1, #17
 80014ba:	438b      	bics	r3, r1
 80014bc:	7083      	strb	r3, [r0, #2]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80014be:	2a03      	cmp	r2, #3
 80014c0:	d000      	beq.n	80014c4 <map_int_pin+0x2e0>
 80014c2:	e6a5      	b.n	8001210 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 80014c4:	7883      	ldrb	r3, [r0, #2]
 80014c6:	2201      	movs	r2, #1
 80014c8:	431a      	orrs	r2, r3
 80014ca:	7082      	strb	r2, [r0, #2]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 80014cc:	2211      	movs	r2, #17
 80014ce:	4313      	orrs	r3, r2
 80014d0:	7083      	strb	r3, [r0, #2]
}
 80014d2:	e69d      	b.n	8001210 <map_int_pin+0x2c>
 80014d4:	08004e28 	.word	0x08004e28
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 80014d8:	7883      	ldrb	r3, [r0, #2]
 80014da:	2101      	movs	r1, #1
 80014dc:	430b      	orrs	r3, r1
 80014de:	7083      	strb	r3, [r0, #2]
 80014e0:	e7e1      	b.n	80014a6 <map_int_pin+0x2c2>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 80014e2:	7883      	ldrb	r3, [r0, #2]
 80014e4:	2110      	movs	r1, #16
 80014e6:	430b      	orrs	r3, r1
 80014e8:	7083      	strb	r3, [r0, #2]
 80014ea:	e7de      	b.n	80014aa <map_int_pin+0x2c6>

080014ec <bma400_set_regs>:
{
 80014ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ee:	46d6      	mov	lr, sl
 80014f0:	464f      	mov	r7, r9
 80014f2:	4646      	mov	r6, r8
 80014f4:	b5c0      	push	{r6, r7, lr}
 80014f6:	0005      	movs	r5, r0
 80014f8:	4689      	mov	r9, r1
 80014fa:	4690      	mov	r8, r2
 80014fc:	001e      	movs	r6, r3
    rslt = null_ptr_check(dev);
 80014fe:	0018      	movs	r0, r3
 8001500:	f7ff fe56 	bl	80011b0 <null_ptr_check>
 8001504:	1e07      	subs	r7, r0, #0
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8001506:	d12b      	bne.n	8001560 <bma400_set_regs+0x74>
 8001508:	464b      	mov	r3, r9
 800150a:	2b00      	cmp	r3, #0
 800150c:	d030      	beq.n	8001570 <bma400_set_regs+0x84>
        if (len == 1)
 800150e:	4643      	mov	r3, r8
 8001510:	2b01      	cmp	r3, #1
 8001512:	d004      	beq.n	800151e <bma400_set_regs+0x32>
        if (len > 1)
 8001514:	4643      	mov	r3, r8
 8001516:	2b01      	cmp	r3, #1
 8001518:	d924      	bls.n	8001564 <bma400_set_regs+0x78>
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 800151a:	2400      	movs	r4, #0
 800151c:	e00c      	b.n	8001538 <bma400_set_regs+0x4c>
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 800151e:	6934      	ldr	r4, [r6, #16]
 8001520:	6873      	ldr	r3, [r6, #4]
 8001522:	4642      	mov	r2, r8
 8001524:	4649      	mov	r1, r9
 8001526:	0028      	movs	r0, r5
 8001528:	47a0      	blx	r4
 800152a:	7730      	strb	r0, [r6, #28]
            if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 800152c:	2800      	cmp	r0, #0
 800152e:	d0f1      	beq.n	8001514 <bma400_set_regs+0x28>
                rslt = BMA400_E_COM_FAIL;
 8001530:	3f02      	subs	r7, #2
 8001532:	e7ef      	b.n	8001514 <bma400_set_regs+0x28>
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8001534:	3401      	adds	r4, #1
 8001536:	b2e4      	uxtb	r4, r4
 8001538:	0021      	movs	r1, r4
 800153a:	4544      	cmp	r4, r8
 800153c:	d212      	bcs.n	8001564 <bma400_set_regs+0x78>
 800153e:	2f00      	cmp	r7, #0
 8001540:	d110      	bne.n	8001564 <bma400_set_regs+0x78>
                dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr);
 8001542:	6933      	ldr	r3, [r6, #16]
 8001544:	469a      	mov	sl, r3
 8001546:	6873      	ldr	r3, [r6, #4]
 8001548:	4449      	add	r1, r9
 800154a:	2201      	movs	r2, #1
 800154c:	0028      	movs	r0, r5
 800154e:	47d0      	blx	sl
 8001550:	7730      	strb	r0, [r6, #28]
                reg_addr++;
 8001552:	3501      	adds	r5, #1
 8001554:	b2ed      	uxtb	r5, r5
                if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8001556:	2800      	cmp	r0, #0
 8001558:	d0ec      	beq.n	8001534 <bma400_set_regs+0x48>
                    rslt = BMA400_E_COM_FAIL;
 800155a:	2702      	movs	r7, #2
 800155c:	427f      	negs	r7, r7
 800155e:	e7e9      	b.n	8001534 <bma400_set_regs+0x48>
        rslt = BMA400_E_NULL_PTR;
 8001560:	2701      	movs	r7, #1
 8001562:	427f      	negs	r7, r7
}
 8001564:	0038      	movs	r0, r7
 8001566:	bce0      	pop	{r5, r6, r7}
 8001568:	46ba      	mov	sl, r7
 800156a:	46b1      	mov	r9, r6
 800156c:	46a8      	mov	r8, r5
 800156e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMA400_E_NULL_PTR;
 8001570:	2701      	movs	r7, #1
 8001572:	427f      	negs	r7, r7
 8001574:	e7f6      	b.n	8001564 <bma400_set_regs+0x78>

08001576 <set_activity_change_conf>:
{
 8001576:	b530      	push	{r4, r5, lr}
 8001578:	b083      	sub	sp, #12
 800157a:	000b      	movs	r3, r1
    uint8_t data_array[2] = { 0 };
 800157c:	a901      	add	r1, sp, #4
 800157e:	2200      	movs	r2, #0
 8001580:	800a      	strh	r2, [r1, #0]
    data_array[0] = act_ch_set->act_ch_thres;
 8001582:	7802      	ldrb	r2, [r0, #0]
 8001584:	700a      	strb	r2, [r1, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN, act_ch_set->axes_sel);
 8001586:	7842      	ldrb	r2, [r0, #1]
 8001588:	0152      	lsls	r2, r2, #5
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	704a      	strb	r2, [r1, #1]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC, act_ch_set->data_source);
 800158e:	7885      	ldrb	r5, [r0, #2]
 8001590:	012d      	lsls	r5, r5, #4
 8001592:	2410      	movs	r4, #16
 8001594:	402c      	ands	r4, r5
 8001596:	4322      	orrs	r2, r4
 8001598:	704a      	strb	r2, [r1, #1]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 800159a:	78c4      	ldrb	r4, [r0, #3]
 800159c:	200f      	movs	r0, #15
 800159e:	4020      	ands	r0, r4
 80015a0:	4302      	orrs	r2, r0
 80015a2:	704a      	strb	r2, [r1, #1]
    rslt = bma400_set_regs(BMA400_REG_ACT_CH_CONFIG_0, data_array, 2, dev);
 80015a4:	2202      	movs	r2, #2
 80015a6:	2055      	movs	r0, #85	@ 0x55
 80015a8:	f7ff ffa0 	bl	80014ec <bma400_set_regs>
}
 80015ac:	b003      	add	sp, #12
 80015ae:	bd30      	pop	{r4, r5, pc}

080015b0 <set_gen1_int>:
{
 80015b0:	b570      	push	{r4, r5, r6, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	0005      	movs	r5, r0
 80015b6:	000e      	movs	r6, r1
    uint8_t data_array[11] = { 0 };
 80015b8:	ac01      	add	r4, sp, #4
 80015ba:	220b      	movs	r2, #11
 80015bc:	2100      	movs	r1, #0
 80015be:	0020      	movs	r0, r4
 80015c0:	f002 ff6c 	bl	800449c <memset>
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 80015c4:	792a      	ldrb	r2, [r5, #4]
 80015c6:	0152      	lsls	r2, r2, #5
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 80015cc:	7969      	ldrb	r1, [r5, #5]
 80015ce:	0109      	lsls	r1, r1, #4
 80015d0:	2310      	movs	r3, #16
 80015d2:	400b      	ands	r3, r1
 80015d4:	431a      	orrs	r2, r3
 80015d6:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 80015d8:	7a29      	ldrb	r1, [r5, #8]
 80015da:	0088      	lsls	r0, r1, #2
 80015dc:	230c      	movs	r3, #12
 80015de:	4003      	ands	r3, r0
 80015e0:	431a      	orrs	r2, r3
 80015e2:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80015e4:	7a68      	ldrb	r0, [r5, #9]
 80015e6:	2303      	movs	r3, #3
 80015e8:	4003      	ands	r3, r0
 80015ea:	431a      	orrs	r2, r3
 80015ec:	7022      	strb	r2, [r4, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 80015ee:	79aa      	ldrb	r2, [r5, #6]
 80015f0:	0052      	lsls	r2, r2, #1
 80015f2:	2302      	movs	r3, #2
 80015f4:	4013      	ands	r3, r2
 80015f6:	7063      	strb	r3, [r4, #1]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 80015f8:	79e8      	ldrb	r0, [r5, #7]
 80015fa:	2201      	movs	r2, #1
 80015fc:	4002      	ands	r2, r0
 80015fe:	4313      	orrs	r3, r2
 8001600:	7063      	strb	r3, [r4, #1]
    data_array[2] = gen_int_set->gen_int_thres;
 8001602:	782b      	ldrb	r3, [r5, #0]
 8001604:	70a3      	strb	r3, [r4, #2]
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8001606:	886b      	ldrh	r3, [r5, #2]
 8001608:	0a1a      	lsrs	r2, r3, #8
 800160a:	70e2      	strb	r2, [r4, #3]
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 800160c:	7123      	strb	r3, [r4, #4]
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 800160e:	2900      	cmp	r1, #0
 8001610:	d116      	bne.n	8001640 <set_gen1_int+0x90>
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8001612:	896b      	ldrh	r3, [r5, #10]
 8001614:	7aaa      	ldrb	r2, [r5, #10]
 8001616:	0021      	movs	r1, r4
 8001618:	7162      	strb	r2, [r4, #5]
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	71a3      	strb	r3, [r4, #6]
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 800161e:	89ab      	ldrh	r3, [r5, #12]
 8001620:	7b2a      	ldrb	r2, [r5, #12]
 8001622:	71e2      	strb	r2, [r4, #7]
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	7223      	strb	r3, [r4, #8]
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8001628:	89eb      	ldrh	r3, [r5, #14]
 800162a:	7baa      	ldrb	r2, [r5, #14]
 800162c:	7262      	strb	r2, [r4, #9]
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	72a3      	strb	r3, [r4, #10]
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 11, dev);
 8001632:	0033      	movs	r3, r6
 8001634:	220b      	movs	r2, #11
 8001636:	203f      	movs	r0, #63	@ 0x3f
 8001638:	f7ff ff58 	bl	80014ec <bma400_set_regs>
}
 800163c:	b004      	add	sp, #16
 800163e:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 5, dev);
 8001640:	0033      	movs	r3, r6
 8001642:	2205      	movs	r2, #5
 8001644:	a901      	add	r1, sp, #4
 8001646:	203f      	movs	r0, #63	@ 0x3f
 8001648:	f7ff ff50 	bl	80014ec <bma400_set_regs>
 800164c:	e7f6      	b.n	800163c <set_gen1_int+0x8c>

0800164e <set_gen2_int>:
{
 800164e:	b570      	push	{r4, r5, r6, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	0005      	movs	r5, r0
 8001654:	000e      	movs	r6, r1
    uint8_t data_array[11] = { 0 };
 8001656:	ac01      	add	r4, sp, #4
 8001658:	220b      	movs	r2, #11
 800165a:	2100      	movs	r1, #0
 800165c:	0020      	movs	r0, r4
 800165e:	f002 ff1d 	bl	800449c <memset>
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8001662:	792a      	ldrb	r2, [r5, #4]
 8001664:	0152      	lsls	r2, r2, #5
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 800166a:	7969      	ldrb	r1, [r5, #5]
 800166c:	0109      	lsls	r1, r1, #4
 800166e:	2310      	movs	r3, #16
 8001670:	400b      	ands	r3, r1
 8001672:	431a      	orrs	r2, r3
 8001674:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8001676:	7a29      	ldrb	r1, [r5, #8]
 8001678:	0088      	lsls	r0, r1, #2
 800167a:	230c      	movs	r3, #12
 800167c:	4003      	ands	r3, r0
 800167e:	431a      	orrs	r2, r3
 8001680:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8001682:	7a68      	ldrb	r0, [r5, #9]
 8001684:	2303      	movs	r3, #3
 8001686:	4003      	ands	r3, r0
 8001688:	431a      	orrs	r2, r3
 800168a:	7022      	strb	r2, [r4, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800168c:	79aa      	ldrb	r2, [r5, #6]
 800168e:	0052      	lsls	r2, r2, #1
 8001690:	2302      	movs	r3, #2
 8001692:	4013      	ands	r3, r2
 8001694:	7063      	strb	r3, [r4, #1]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8001696:	79e8      	ldrb	r0, [r5, #7]
 8001698:	2201      	movs	r2, #1
 800169a:	4002      	ands	r2, r0
 800169c:	4313      	orrs	r3, r2
 800169e:	7063      	strb	r3, [r4, #1]
    data_array[2] = gen_int_set->gen_int_thres;
 80016a0:	782b      	ldrb	r3, [r5, #0]
 80016a2:	70a3      	strb	r3, [r4, #2]
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 80016a4:	886b      	ldrh	r3, [r5, #2]
 80016a6:	0a1a      	lsrs	r2, r3, #8
 80016a8:	70e2      	strb	r2, [r4, #3]
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 80016aa:	7123      	strb	r3, [r4, #4]
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 80016ac:	2900      	cmp	r1, #0
 80016ae:	d116      	bne.n	80016de <set_gen2_int+0x90>
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 80016b0:	896b      	ldrh	r3, [r5, #10]
 80016b2:	7aaa      	ldrb	r2, [r5, #10]
 80016b4:	0021      	movs	r1, r4
 80016b6:	7162      	strb	r2, [r4, #5]
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	71a3      	strb	r3, [r4, #6]
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 80016bc:	89ab      	ldrh	r3, [r5, #12]
 80016be:	7b2a      	ldrb	r2, [r5, #12]
 80016c0:	71e2      	strb	r2, [r4, #7]
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	7223      	strb	r3, [r4, #8]
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 80016c6:	89eb      	ldrh	r3, [r5, #14]
 80016c8:	7baa      	ldrb	r2, [r5, #14]
 80016ca:	7262      	strb	r2, [r4, #9]
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	72a3      	strb	r3, [r4, #10]
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 11, dev);
 80016d0:	0033      	movs	r3, r6
 80016d2:	220b      	movs	r2, #11
 80016d4:	204a      	movs	r0, #74	@ 0x4a
 80016d6:	f7ff ff09 	bl	80014ec <bma400_set_regs>
}
 80016da:	b004      	add	sp, #16
 80016dc:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 5, dev);
 80016de:	0033      	movs	r3, r6
 80016e0:	2205      	movs	r2, #5
 80016e2:	a901      	add	r1, sp, #4
 80016e4:	204a      	movs	r0, #74	@ 0x4a
 80016e6:	f7ff ff01 	bl	80014ec <bma400_set_regs>
 80016ea:	e7f6      	b.n	80016da <set_gen2_int+0x8c>

080016ec <set_orient_int>:
{
 80016ec:	b570      	push	{r4, r5, r6, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	0004      	movs	r4, r0
 80016f2:	000e      	movs	r6, r1
    uint8_t data_array[10] = { 0 };
 80016f4:	ad01      	add	r5, sp, #4
 80016f6:	220a      	movs	r2, #10
 80016f8:	2100      	movs	r1, #0
 80016fa:	0028      	movs	r0, r5
 80016fc:	f002 fece 	bl	800449c <memset>
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 8001700:	7822      	ldrb	r2, [r4, #0]
 8001702:	0152      	lsls	r2, r2, #5
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	702a      	strb	r2, [r5, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 8001708:	7861      	ldrb	r1, [r4, #1]
 800170a:	0109      	lsls	r1, r1, #4
 800170c:	2310      	movs	r3, #16
 800170e:	400b      	ands	r3, r1
 8001710:	431a      	orrs	r2, r3
 8001712:	702a      	strb	r2, [r5, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 8001714:	78a1      	ldrb	r1, [r4, #2]
 8001716:	0088      	lsls	r0, r1, #2
 8001718:	230c      	movs	r3, #12
 800171a:	4003      	ands	r3, r0
 800171c:	431a      	orrs	r2, r3
 800171e:	702a      	strb	r2, [r5, #0]
    data_array[1] = orient_conf->orient_thres;
 8001720:	78e3      	ldrb	r3, [r4, #3]
 8001722:	706b      	strb	r3, [r5, #1]
    data_array[2] = orient_conf->stability_thres;
 8001724:	7923      	ldrb	r3, [r4, #4]
 8001726:	70ab      	strb	r3, [r5, #2]
    data_array[3] = orient_conf->orient_int_dur;
 8001728:	7963      	ldrb	r3, [r4, #5]
 800172a:	70eb      	strb	r3, [r5, #3]
    if (orient_conf->ref_update == BMA400_UPDATE_MANUAL)
 800172c:	2900      	cmp	r1, #0
 800172e:	d116      	bne.n	800175e <set_orient_int+0x72>
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 8001730:	88e3      	ldrh	r3, [r4, #6]
 8001732:	79a2      	ldrb	r2, [r4, #6]
 8001734:	0029      	movs	r1, r5
 8001736:	712a      	strb	r2, [r5, #4]
        data_array[5] = BMA400_GET_MSB(orient_conf->orient_ref_x);
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	716b      	strb	r3, [r5, #5]
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 800173c:	8923      	ldrh	r3, [r4, #8]
 800173e:	7a22      	ldrb	r2, [r4, #8]
 8001740:	71aa      	strb	r2, [r5, #6]
        data_array[7] = BMA400_GET_MSB(orient_conf->orient_ref_y);
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	71eb      	strb	r3, [r5, #7]
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 8001746:	8963      	ldrh	r3, [r4, #10]
 8001748:	7aa2      	ldrb	r2, [r4, #10]
 800174a:	722a      	strb	r2, [r5, #8]
        data_array[9] = BMA400_GET_MSB(orient_conf->orient_ref_z);
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	726b      	strb	r3, [r5, #9]
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 10, dev);
 8001750:	0033      	movs	r3, r6
 8001752:	220a      	movs	r2, #10
 8001754:	2035      	movs	r0, #53	@ 0x35
 8001756:	f7ff fec9 	bl	80014ec <bma400_set_regs>
}
 800175a:	b004      	add	sp, #16
 800175c:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 4, dev);
 800175e:	0033      	movs	r3, r6
 8001760:	2204      	movs	r2, #4
 8001762:	a901      	add	r1, sp, #4
 8001764:	2035      	movs	r0, #53	@ 0x35
 8001766:	f7ff fec1 	bl	80014ec <bma400_set_regs>
 800176a:	e7f6      	b.n	800175a <set_orient_int+0x6e>

0800176c <set_autowakeup_interrupt>:
{
 800176c:	b530      	push	{r4, r5, lr}
 800176e:	b083      	sub	sp, #12
 8001770:	0004      	movs	r4, r0
 8001772:	000d      	movs	r5, r1
    uint8_t data_array[5] = { 0 };
 8001774:	2205      	movs	r2, #5
 8001776:	2100      	movs	r1, #0
 8001778:	4668      	mov	r0, sp
 800177a:	f002 fe8f 	bl	800449c <memset>
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 800177e:	7823      	ldrb	r3, [r4, #0]
 8001780:	2203      	movs	r2, #3
 8001782:	401a      	ands	r2, r3
 8001784:	466b      	mov	r3, sp
 8001786:	701a      	strb	r2, [r3, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 8001788:	7861      	ldrb	r1, [r4, #1]
 800178a:	0089      	lsls	r1, r1, #2
 800178c:	231c      	movs	r3, #28
 800178e:	400b      	ands	r3, r1
 8001790:	431a      	orrs	r2, r3
 8001792:	466b      	mov	r3, sp
 8001794:	701a      	strb	r2, [r3, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 8001796:	78a3      	ldrb	r3, [r4, #2]
 8001798:	015b      	lsls	r3, r3, #5
 800179a:	431a      	orrs	r2, r3
 800179c:	466b      	mov	r3, sp
 800179e:	701a      	strb	r2, [r3, #0]
    data_array[1] = wakeup_conf->int_wkup_threshold;
 80017a0:	78e3      	ldrb	r3, [r4, #3]
 80017a2:	466a      	mov	r2, sp
 80017a4:	7053      	strb	r3, [r2, #1]
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 80017a6:	7923      	ldrb	r3, [r4, #4]
 80017a8:	7093      	strb	r3, [r2, #2]
    data_array[3] = wakeup_conf->int_wkup_ref_y;
 80017aa:	7963      	ldrb	r3, [r4, #5]
 80017ac:	70d3      	strb	r3, [r2, #3]
    data_array[4] = wakeup_conf->int_wkup_ref_z;
 80017ae:	79a3      	ldrb	r3, [r4, #6]
 80017b0:	7113      	strb	r3, [r2, #4]
    rslt = bma400_set_regs(BMA400_REG_WAKEUP_INT_CONF_0, data_array, 5, dev);
 80017b2:	002b      	movs	r3, r5
 80017b4:	2205      	movs	r2, #5
 80017b6:	4669      	mov	r1, sp
 80017b8:	202f      	movs	r0, #47	@ 0x2f
 80017ba:	f7ff fe97 	bl	80014ec <bma400_set_regs>
}
 80017be:	b003      	add	sp, #12
 80017c0:	bd30      	pop	{r4, r5, pc}

080017c2 <bma400_get_regs>:
{
 80017c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c4:	46ce      	mov	lr, r9
 80017c6:	4647      	mov	r7, r8
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0a1      	sub	sp, #132	@ 0x84
 80017cc:	0004      	movs	r4, r0
 80017ce:	4688      	mov	r8, r1
 80017d0:	0017      	movs	r7, r2
 80017d2:	001e      	movs	r6, r3
    rslt = null_ptr_check(dev);
 80017d4:	0018      	movs	r0, r3
 80017d6:	f7ff fceb 	bl	80011b0 <null_ptr_check>
 80017da:	4681      	mov	r9, r0
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 80017dc:	2800      	cmp	r0, #0
 80017de:	d129      	bne.n	8001834 <bma400_get_regs+0x72>
 80017e0:	4643      	mov	r3, r8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d02a      	beq.n	800183c <bma400_get_regs+0x7a>
        if (dev->intf != BMA400_I2C_INTF)
 80017e6:	7873      	ldrb	r3, [r6, #1]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d003      	beq.n	80017f4 <bma400_get_regs+0x32>
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	425b      	negs	r3, r3
 80017f0:	431c      	orrs	r4, r3
 80017f2:	b2e4      	uxtb	r4, r4
        dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr);
 80017f4:	68f5      	ldr	r5, [r6, #12]
 80017f6:	7a32      	ldrb	r2, [r6, #8]
 80017f8:	6873      	ldr	r3, [r6, #4]
 80017fa:	19d2      	adds	r2, r2, r7
 80017fc:	4669      	mov	r1, sp
 80017fe:	0020      	movs	r0, r4
 8001800:	47a8      	blx	r5
 8001802:	7730      	strb	r0, [r6, #28]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8001804:	2800      	cmp	r0, #0
 8001806:	d101      	bne.n	800180c <bma400_get_regs+0x4a>
            for (index = 0; index < len; index++)
 8001808:	2400      	movs	r4, #0
 800180a:	e00b      	b.n	8001824 <bma400_get_regs+0x62>
            rslt = BMA400_E_COM_FAIL;
 800180c:	2302      	movs	r3, #2
 800180e:	425b      	negs	r3, r3
 8001810:	4699      	mov	r9, r3
 8001812:	e009      	b.n	8001828 <bma400_get_regs+0x66>
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 8001814:	7a35      	ldrb	r5, [r6, #8]
 8001816:	1965      	adds	r5, r4, r5
 8001818:	466b      	mov	r3, sp
 800181a:	5d5b      	ldrb	r3, [r3, r5]
 800181c:	4642      	mov	r2, r8
 800181e:	5513      	strb	r3, [r2, r4]
            for (index = 0; index < len; index++)
 8001820:	3401      	adds	r4, #1
 8001822:	b2a4      	uxth	r4, r4
 8001824:	42bc      	cmp	r4, r7
 8001826:	d3f5      	bcc.n	8001814 <bma400_get_regs+0x52>
}
 8001828:	4648      	mov	r0, r9
 800182a:	b021      	add	sp, #132	@ 0x84
 800182c:	bcc0      	pop	{r6, r7}
 800182e:	46b9      	mov	r9, r7
 8001830:	46b0      	mov	r8, r6
 8001832:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMA400_E_NULL_PTR;
 8001834:	2301      	movs	r3, #1
 8001836:	425b      	negs	r3, r3
 8001838:	4699      	mov	r9, r3
 800183a:	e7f5      	b.n	8001828 <bma400_get_regs+0x66>
 800183c:	2301      	movs	r3, #1
 800183e:	425b      	negs	r3, r3
 8001840:	4699      	mov	r9, r3
 8001842:	e7f1      	b.n	8001828 <bma400_get_regs+0x66>

08001844 <bma400_init>:
{
 8001844:	b530      	push	{r4, r5, lr}
 8001846:	b083      	sub	sp, #12
 8001848:	0005      	movs	r5, r0
    uint8_t chip_id = 0;
 800184a:	466b      	mov	r3, sp
 800184c:	2200      	movs	r2, #0
 800184e:	71da      	strb	r2, [r3, #7]
    rslt = null_ptr_check(dev);
 8001850:	f7ff fcae 	bl	80011b0 <null_ptr_check>
 8001854:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8001856:	d10a      	bne.n	800186e <bma400_init+0x2a>
        dev->delay_us(5000, dev->intf_ptr);
 8001858:	696b      	ldr	r3, [r5, #20]
 800185a:	6869      	ldr	r1, [r5, #4]
 800185c:	4814      	ldr	r0, [pc, #80]	@ (80018b0 <bma400_init+0x6c>)
 800185e:	4798      	blx	r3
        if (dev->intf == BMA400_SPI_INTF)
 8001860:	786b      	ldrb	r3, [r5, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <bma400_init+0x30>
            dev->dummy_byte = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	722b      	strb	r3, [r5, #8]
        if (rslt == BMA400_OK)
 800186a:	2c00      	cmp	r4, #0
 800186c:	d00d      	beq.n	800188a <bma400_init+0x46>
}
 800186e:	0020      	movs	r0, r4
 8001870:	b003      	add	sp, #12
 8001872:	bd30      	pop	{r4, r5, pc}
            dev->dummy_byte = 1;
 8001874:	3301      	adds	r3, #1
 8001876:	722b      	strb	r3, [r5, #8]
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8001878:	002b      	movs	r3, r5
 800187a:	2201      	movs	r2, #1
 800187c:	4669      	mov	r1, sp
 800187e:	3107      	adds	r1, #7
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff ff9e 	bl	80017c2 <bma400_get_regs>
 8001886:	0004      	movs	r4, r0
 8001888:	e7ef      	b.n	800186a <bma400_init+0x26>
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 800188a:	002b      	movs	r3, r5
 800188c:	2201      	movs	r2, #1
 800188e:	4669      	mov	r1, sp
 8001890:	3107      	adds	r1, #7
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff ff95 	bl	80017c2 <bma400_get_regs>
 8001898:	1e04      	subs	r4, r0, #0
            if (rslt == BMA400_OK)
 800189a:	d1e8      	bne.n	800186e <bma400_init+0x2a>
                if (chip_id == BMA400_CHIP_ID)
 800189c:	466b      	mov	r3, sp
 800189e:	3307      	adds	r3, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b90      	cmp	r3, #144	@ 0x90
 80018a4:	d101      	bne.n	80018aa <bma400_init+0x66>
                    dev->chip_id = chip_id;
 80018a6:	702b      	strb	r3, [r5, #0]
 80018a8:	e7e1      	b.n	800186e <bma400_init+0x2a>
                    rslt = BMA400_E_DEV_NOT_FOUND;
 80018aa:	2403      	movs	r4, #3
 80018ac:	4264      	negs	r4, r4
 80018ae:	e7de      	b.n	800186e <bma400_init+0x2a>
 80018b0:	00001388 	.word	0x00001388

080018b4 <get_accel_data>:
{
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	0005      	movs	r5, r0
 80018ba:	000c      	movs	r4, r1
 80018bc:	0016      	movs	r6, r2
    uint8_t data_array[9] = { 0 };
 80018be:	2209      	movs	r2, #9
 80018c0:	2100      	movs	r1, #0
 80018c2:	a801      	add	r0, sp, #4
 80018c4:	f002 fdea 	bl	800449c <memset>
    if (data_sel == BMA400_DATA_ONLY)
 80018c8:	2d00      	cmp	r5, #0
 80018ca:	d03f      	beq.n	800194c <get_accel_data+0x98>
    else if (data_sel == BMA400_DATA_SENSOR_TIME)
 80018cc:	2d01      	cmp	r5, #1
 80018ce:	d150      	bne.n	8001972 <get_accel_data+0xbe>
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 9, dev);
 80018d0:	0033      	movs	r3, r6
 80018d2:	2209      	movs	r2, #9
 80018d4:	a901      	add	r1, sp, #4
 80018d6:	2004      	movs	r0, #4
 80018d8:	f7ff ff73 	bl	80017c2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 80018dc:	2800      	cmp	r0, #0
 80018de:	d133      	bne.n	8001948 <get_accel_data+0x94>
        lsb = data_array[0];
 80018e0:	aa01      	add	r2, sp, #4
 80018e2:	7813      	ldrb	r3, [r2, #0]
        msb = data_array[1];
 80018e4:	7852      	ldrb	r2, [r2, #1]
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 80018e6:	0212      	lsls	r2, r2, #8
 80018e8:	189b      	adds	r3, r3, r2
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	8023      	strh	r3, [r4, #0]
        if (accel->x > 2047)
 80018f0:	2180      	movs	r1, #128	@ 0x80
 80018f2:	0109      	lsls	r1, r1, #4
 80018f4:	428b      	cmp	r3, r1
 80018f6:	db03      	blt.n	8001900 <get_accel_data+0x4c>
            accel->x = accel->x - 4096;
 80018f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <get_accel_data+0xc4>)
 80018fa:	469c      	mov	ip, r3
 80018fc:	4462      	add	r2, ip
 80018fe:	8022      	strh	r2, [r4, #0]
        lsb = data_array[2];
 8001900:	ab01      	add	r3, sp, #4
 8001902:	789a      	ldrb	r2, [r3, #2]
        msb = data_array[3];
 8001904:	78db      	ldrb	r3, [r3, #3]
        accel->y = (int16_t)(((uint16_t)msb * 256) | lsb);
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	4313      	orrs	r3, r2
 800190a:	b21b      	sxth	r3, r3
 800190c:	8063      	strh	r3, [r4, #2]
        if (accel->y > 2047)
 800190e:	2280      	movs	r2, #128	@ 0x80
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	4293      	cmp	r3, r2
 8001914:	db04      	blt.n	8001920 <get_accel_data+0x6c>
            accel->y = accel->y - 4096;
 8001916:	b29b      	uxth	r3, r3
 8001918:	4a17      	ldr	r2, [pc, #92]	@ (8001978 <get_accel_data+0xc4>)
 800191a:	4694      	mov	ip, r2
 800191c:	4463      	add	r3, ip
 800191e:	8063      	strh	r3, [r4, #2]
        lsb = data_array[4];
 8001920:	ab01      	add	r3, sp, #4
 8001922:	791a      	ldrb	r2, [r3, #4]
        msb = data_array[5];
 8001924:	795b      	ldrb	r3, [r3, #5]
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	4313      	orrs	r3, r2
 800192a:	b21b      	sxth	r3, r3
 800192c:	80a3      	strh	r3, [r4, #4]
        if (accel->z > 2047)
 800192e:	2280      	movs	r2, #128	@ 0x80
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	4293      	cmp	r3, r2
 8001934:	db04      	blt.n	8001940 <get_accel_data+0x8c>
            accel->z = accel->z - 4096;
 8001936:	b29b      	uxth	r3, r3
 8001938:	4a0f      	ldr	r2, [pc, #60]	@ (8001978 <get_accel_data+0xc4>)
 800193a:	4694      	mov	ip, r2
 800193c:	4463      	add	r3, ip
 800193e:	80a3      	strh	r3, [r4, #4]
        if (data_sel == BMA400_DATA_ONLY)
 8001940:	2d00      	cmp	r5, #0
 8001942:	d10a      	bne.n	800195a <get_accel_data+0xa6>
            accel->sensortime = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	60a3      	str	r3, [r4, #8]
}
 8001948:	b004      	add	sp, #16
 800194a:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 6, dev);
 800194c:	0033      	movs	r3, r6
 800194e:	2206      	movs	r2, #6
 8001950:	a901      	add	r1, sp, #4
 8001952:	2004      	movs	r0, #4
 8001954:	f7ff ff35 	bl	80017c2 <bma400_get_regs>
 8001958:	e7c0      	b.n	80018dc <get_accel_data+0x28>
        if (data_sel == BMA400_DATA_SENSOR_TIME)
 800195a:	2d01      	cmp	r5, #1
 800195c:	d1f4      	bne.n	8001948 <get_accel_data+0x94>
            time_0 = data_array[6];
 800195e:	a901      	add	r1, sp, #4
 8001960:	798a      	ldrb	r2, [r1, #6]
            time_1 = ((uint16_t)data_array[7] << 8);
 8001962:	79cb      	ldrb	r3, [r1, #7]
 8001964:	021b      	lsls	r3, r3, #8
            time_2 = ((uint32_t)data_array[8] << 16);
 8001966:	7a09      	ldrb	r1, [r1, #8]
 8001968:	0409      	lsls	r1, r1, #16
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 800196a:	185b      	adds	r3, r3, r1
 800196c:	18d3      	adds	r3, r2, r3
 800196e:	60a3      	str	r3, [r4, #8]
 8001970:	e7ea      	b.n	8001948 <get_accel_data+0x94>
        rslt = BMA400_E_INVALID_CONFIG;
 8001972:	2004      	movs	r0, #4
 8001974:	4240      	negs	r0, r0
 8001976:	e7e7      	b.n	8001948 <get_accel_data+0x94>
 8001978:	fffff000 	.word	0xfffff000

0800197c <set_accel_conf>:
{
 800197c:	b530      	push	{r4, r5, lr}
 800197e:	b083      	sub	sp, #12
 8001980:	0004      	movs	r4, r0
 8001982:	000d      	movs	r5, r1
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 8001984:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <set_accel_conf+0x94>)
 8001986:	881a      	ldrh	r2, [r3, #0]
 8001988:	4669      	mov	r1, sp
 800198a:	808a      	strh	r2, [r1, #4]
 800198c:	789b      	ldrb	r3, [r3, #2]
 800198e:	718b      	strb	r3, [r1, #6]
    rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8001990:	002b      	movs	r3, r5
 8001992:	2203      	movs	r2, #3
 8001994:	a901      	add	r1, sp, #4
 8001996:	2019      	movs	r0, #25
 8001998:	f7ff ff13 	bl	80017c2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 800199c:	2800      	cmp	r0, #0
 800199e:	d001      	beq.n	80019a4 <set_accel_conf+0x28>
}
 80019a0:	b003      	add	sp, #12
 80019a2:	bd30      	pop	{r4, r5, pc}
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 80019a4:	a901      	add	r1, sp, #4
 80019a6:	7808      	ldrb	r0, [r1, #0]
 80019a8:	7962      	ldrb	r2, [r4, #5]
 80019aa:	237f      	movs	r3, #127	@ 0x7f
 80019ac:	4003      	ands	r3, r0
 80019ae:	01d2      	lsls	r2, r2, #7
 80019b0:	4313      	orrs	r3, r2
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	700b      	strb	r3, [r1, #0]
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 80019b6:	7920      	ldrb	r0, [r4, #4]
 80019b8:	0140      	lsls	r0, r0, #5
 80019ba:	2260      	movs	r2, #96	@ 0x60
 80019bc:	4002      	ands	r2, r0
 80019be:	2060      	movs	r0, #96	@ 0x60
 80019c0:	4383      	bics	r3, r0
 80019c2:	4313      	orrs	r3, r2
 80019c4:	700b      	strb	r3, [r1, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 80019c6:	7848      	ldrb	r0, [r1, #1]
 80019c8:	7863      	ldrb	r3, [r4, #1]
 80019ca:	223f      	movs	r2, #63	@ 0x3f
 80019cc:	4002      	ands	r2, r0
 80019ce:	019b      	lsls	r3, r3, #6
 80019d0:	431a      	orrs	r2, r3
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	704a      	strb	r2, [r1, #1]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 80019d6:	78e0      	ldrb	r0, [r4, #3]
 80019d8:	0100      	lsls	r0, r0, #4
 80019da:	2330      	movs	r3, #48	@ 0x30
 80019dc:	4003      	ands	r3, r0
 80019de:	2030      	movs	r0, #48	@ 0x30
 80019e0:	4382      	bics	r2, r0
 80019e2:	431a      	orrs	r2, r3
 80019e4:	704a      	strb	r2, [r1, #1]
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 80019e6:	7820      	ldrb	r0, [r4, #0]
 80019e8:	230f      	movs	r3, #15
 80019ea:	439a      	bics	r2, r3
 80019ec:	4003      	ands	r3, r0
 80019ee:	431a      	orrs	r2, r3
 80019f0:	704a      	strb	r2, [r1, #1]
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 80019f2:	788b      	ldrb	r3, [r1, #2]
 80019f4:	78a0      	ldrb	r0, [r4, #2]
 80019f6:	0080      	lsls	r0, r0, #2
 80019f8:	220c      	movs	r2, #12
 80019fa:	4002      	ands	r2, r0
 80019fc:	200c      	movs	r0, #12
 80019fe:	4383      	bics	r3, r0
 8001a00:	4313      	orrs	r3, r2
 8001a02:	708b      	strb	r3, [r1, #2]
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8001a04:	002b      	movs	r3, r5
 8001a06:	2203      	movs	r2, #3
 8001a08:	300d      	adds	r0, #13
 8001a0a:	f7ff fd6f 	bl	80014ec <bma400_set_regs>
 8001a0e:	e7c7      	b.n	80019a0 <set_accel_conf+0x24>
 8001a10:	08004da8 	.word	0x08004da8

08001a14 <set_tap_conf>:
{
 8001a14:	b530      	push	{r4, r5, lr}
 8001a16:	b083      	sub	sp, #12
 8001a18:	0005      	movs	r5, r0
 8001a1a:	000c      	movs	r4, r1
    uint8_t reg_data[2] = { 0, 0 };
 8001a1c:	a901      	add	r1, sp, #4
 8001a1e:	2300      	movs	r3, #0
 8001a20:	800b      	strh	r3, [r1, #0]
    rslt = bma400_get_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8001a22:	0023      	movs	r3, r4
 8001a24:	2202      	movs	r2, #2
 8001a26:	2057      	movs	r0, #87	@ 0x57
 8001a28:	f7ff fecb 	bl	80017c2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d001      	beq.n	8001a34 <set_tap_conf+0x20>
}
 8001a30:	b003      	add	sp, #12
 8001a32:	bd30      	pop	{r4, r5, pc}
        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_TAP_AXES_EN, tap_set->axes_sel);
 8001a34:	a901      	add	r1, sp, #4
 8001a36:	780b      	ldrb	r3, [r1, #0]
 8001a38:	7828      	ldrb	r0, [r5, #0]
 8001a3a:	00c0      	lsls	r0, r0, #3
 8001a3c:	2218      	movs	r2, #24
 8001a3e:	4002      	ands	r2, r0
 8001a40:	2018      	movs	r0, #24
 8001a42:	4383      	bics	r3, r0
 8001a44:	4313      	orrs	r3, r2
 8001a46:	700b      	strb	r3, [r1, #0]
        reg_data[0] = BMA400_SET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY, tap_set->sensitivity);
 8001a48:	7868      	ldrb	r0, [r5, #1]
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	4393      	bics	r3, r2
 8001a4e:	4002      	ands	r2, r0
 8001a50:	4313      	orrs	r3, r2
 8001a52:	700b      	strb	r3, [r1, #0]
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET_DT, tap_set->quiet_dt);
 8001a54:	784a      	ldrb	r2, [r1, #1]
 8001a56:	7928      	ldrb	r0, [r5, #4]
 8001a58:	0100      	lsls	r0, r0, #4
 8001a5a:	2330      	movs	r3, #48	@ 0x30
 8001a5c:	4003      	ands	r3, r0
 8001a5e:	2030      	movs	r0, #48	@ 0x30
 8001a60:	4382      	bics	r2, r0
 8001a62:	431a      	orrs	r2, r3
 8001a64:	704a      	strb	r2, [r1, #1]
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET, tap_set->quiet);
 8001a66:	78e8      	ldrb	r0, [r5, #3]
 8001a68:	0080      	lsls	r0, r0, #2
 8001a6a:	230c      	movs	r3, #12
 8001a6c:	4003      	ands	r3, r0
 8001a6e:	200c      	movs	r0, #12
 8001a70:	4382      	bics	r2, r0
 8001a72:	431a      	orrs	r2, r3
 8001a74:	704a      	strb	r2, [r1, #1]
        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH, tap_set->tics_th);
 8001a76:	78a8      	ldrb	r0, [r5, #2]
 8001a78:	2303      	movs	r3, #3
 8001a7a:	439a      	bics	r2, r3
 8001a7c:	4003      	ands	r3, r0
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	704a      	strb	r2, [r1, #1]
        rslt = bma400_set_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8001a82:	0023      	movs	r3, r4
 8001a84:	2202      	movs	r2, #2
 8001a86:	2057      	movs	r0, #87	@ 0x57
 8001a88:	f7ff fd30 	bl	80014ec <bma400_set_regs>
 8001a8c:	e7d0      	b.n	8001a30 <set_tap_conf+0x1c>

08001a8e <set_sensor_conf>:
{
 8001a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a90:	b083      	sub	sp, #12
 8001a92:	9001      	str	r0, [sp, #4]
 8001a94:	000c      	movs	r4, r1
 8001a96:	0016      	movs	r6, r2
    if (BMA400_ACCEL == conf->type)
 8001a98:	780b      	ldrb	r3, [r1, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d018      	beq.n	8001ad0 <set_sensor_conf+0x42>
    enum bma400_int_chan int_map = BMA400_UNMAP_INT_PIN;
 8001a9e:	2200      	movs	r2, #0
    uint8_t int_enable = 0;
 8001aa0:	2100      	movs	r1, #0
    int8_t rslt = BMA400_E_INVALID_CONFIG;
 8001aa2:	2504      	movs	r5, #4
 8001aa4:	426d      	negs	r5, r5
    if (BMA400_TAP_INT == conf->type)
 8001aa6:	7823      	ldrb	r3, [r4, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d019      	beq.n	8001ae0 <set_sensor_conf+0x52>
    if (BMA400_ACTIVITY_CHANGE_INT == conf->type)
 8001aac:	7823      	ldrb	r3, [r4, #0]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d01e      	beq.n	8001af0 <set_sensor_conf+0x62>
    if (BMA400_GEN1_INT == conf->type)
 8001ab2:	7823      	ldrb	r3, [r4, #0]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d023      	beq.n	8001b00 <set_sensor_conf+0x72>
    if (BMA400_GEN2_INT == conf->type)
 8001ab8:	7827      	ldrb	r7, [r4, #0]
 8001aba:	2f04      	cmp	r7, #4
 8001abc:	d028      	beq.n	8001b10 <set_sensor_conf+0x82>
    if (BMA400_ORIENT_CHANGE_INT == conf->type)
 8001abe:	7823      	ldrb	r3, [r4, #0]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d02d      	beq.n	8001b20 <set_sensor_conf+0x92>
    if (BMA400_STEP_COUNTER_INT == conf->type)
 8001ac4:	7823      	ldrb	r3, [r4, #0]
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d032      	beq.n	8001b30 <set_sensor_conf+0xa2>
    if (rslt == BMA400_OK)
 8001aca:	2d00      	cmp	r5, #0
 8001acc:	d136      	bne.n	8001b3c <set_sensor_conf+0xae>
 8001ace:	e032      	b.n	8001b36 <set_sensor_conf+0xa8>
        rslt = set_accel_conf(&conf->param.accel, dev);
 8001ad0:	1c88      	adds	r0, r1, #2
 8001ad2:	0011      	movs	r1, r2
 8001ad4:	f7ff ff52 	bl	800197c <set_accel_conf>
 8001ad8:	0005      	movs	r5, r0
        int_map = conf->param.accel.int_chan;
 8001ada:	7a22      	ldrb	r2, [r4, #8]
        int_enable = BMA400_DATA_READY_INT_MAP;
 8001adc:	2101      	movs	r1, #1
 8001ade:	e7e2      	b.n	8001aa6 <set_sensor_conf+0x18>
        rslt = set_tap_conf(&conf->param.tap, dev);
 8001ae0:	1ca0      	adds	r0, r4, #2
 8001ae2:	0031      	movs	r1, r6
 8001ae4:	f7ff ff96 	bl	8001a14 <set_tap_conf>
 8001ae8:	0005      	movs	r5, r0
        int_map = conf->param.tap.int_chan;
 8001aea:	79e2      	ldrb	r2, [r4, #7]
        int_enable = BMA400_TAP_INT_MAP;
 8001aec:	2109      	movs	r1, #9
 8001aee:	e7dd      	b.n	8001aac <set_sensor_conf+0x1e>
        rslt = set_activity_change_conf(&conf->param.act_ch, dev);
 8001af0:	1ca0      	adds	r0, r4, #2
 8001af2:	0031      	movs	r1, r6
 8001af4:	f7ff fd3f 	bl	8001576 <set_activity_change_conf>
 8001af8:	0005      	movs	r5, r0
        int_map = conf->param.act_ch.int_chan;
 8001afa:	79a2      	ldrb	r2, [r4, #6]
        int_enable = BMA400_ACT_CH_INT_MAP;
 8001afc:	2108      	movs	r1, #8
 8001afe:	e7d8      	b.n	8001ab2 <set_sensor_conf+0x24>
        rslt = set_gen1_int(&conf->param.gen_int, dev);
 8001b00:	1ca0      	adds	r0, r4, #2
 8001b02:	0031      	movs	r1, r6
 8001b04:	f7ff fd54 	bl	80015b0 <set_gen1_int>
 8001b08:	0005      	movs	r5, r0
        int_map = conf->param.gen_int.int_chan;
 8001b0a:	7ca2      	ldrb	r2, [r4, #18]
        int_enable = BMA400_GEN1_INT_MAP;
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	e7d3      	b.n	8001ab8 <set_sensor_conf+0x2a>
        rslt = set_gen2_int(&conf->param.gen_int, dev);
 8001b10:	1ca0      	adds	r0, r4, #2
 8001b12:	0031      	movs	r1, r6
 8001b14:	f7ff fd9b 	bl	800164e <set_gen2_int>
 8001b18:	0005      	movs	r5, r0
        int_map = conf->param.gen_int.int_chan;
 8001b1a:	7ca2      	ldrb	r2, [r4, #18]
        int_enable = BMA400_GEN2_INT_MAP;
 8001b1c:	0039      	movs	r1, r7
 8001b1e:	e7ce      	b.n	8001abe <set_sensor_conf+0x30>
        rslt = set_orient_int(&conf->param.orient, dev);
 8001b20:	1ca0      	adds	r0, r4, #2
 8001b22:	0031      	movs	r1, r6
 8001b24:	f7ff fde2 	bl	80016ec <set_orient_int>
 8001b28:	0005      	movs	r5, r0
        int_map = conf->param.orient.int_chan;
 8001b2a:	7ba2      	ldrb	r2, [r4, #14]
        int_enable = BMA400_ORIENT_CH_INT_MAP;
 8001b2c:	2106      	movs	r1, #6
 8001b2e:	e7c9      	b.n	8001ac4 <set_sensor_conf+0x36>
        int_map = conf->param.step_cnt.int_chan;
 8001b30:	78a2      	ldrb	r2, [r4, #2]
        int_enable = BMA400_STEP_INT_MAP;
 8001b32:	210a      	movs	r1, #10
        rslt = BMA400_OK;
 8001b34:	2500      	movs	r5, #0
        map_int_pin(data, int_enable, int_map);
 8001b36:	9801      	ldr	r0, [sp, #4]
 8001b38:	f7ff fb54 	bl	80011e4 <map_int_pin>
}
 8001b3c:	0028      	movs	r0, r5
 8001b3e:	b003      	add	sp, #12
 8001b40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b42 <set_autowakeup_timeout>:
{
 8001b42:	b530      	push	{r4, r5, lr}
 8001b44:	b083      	sub	sp, #12
 8001b46:	0005      	movs	r5, r0
 8001b48:	000c      	movs	r4, r1
    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &data_array[1], 1, dev);
 8001b4a:	000b      	movs	r3, r1
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4669      	mov	r1, sp
 8001b50:	3105      	adds	r1, #5
 8001b52:	202d      	movs	r0, #45	@ 0x2d
 8001b54:	f7ff fe35 	bl	80017c2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	d001      	beq.n	8001b60 <set_autowakeup_timeout+0x1e>
}
 8001b5c:	b003      	add	sp, #12
 8001b5e:	bd30      	pop	{r4, r5, pc}
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 8001b60:	a901      	add	r1, sp, #4
 8001b62:	784b      	ldrb	r3, [r1, #1]
 8001b64:	7828      	ldrb	r0, [r5, #0]
 8001b66:	0080      	lsls	r0, r0, #2
 8001b68:	2204      	movs	r2, #4
 8001b6a:	4002      	ands	r2, r0
 8001b6c:	2004      	movs	r0, #4
 8001b6e:	4383      	bics	r3, r0
 8001b70:	4313      	orrs	r3, r2
 8001b72:	704b      	strb	r3, [r1, #1]
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 8001b74:	8868      	ldrh	r0, [r5, #2]
        msb = BMA400_GET_BITS(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_MSB);
 8001b76:	1102      	asrs	r2, r0, #4
        data_array[0] = msb;
 8001b78:	700a      	strb	r2, [r1, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT_THRES, lsb);
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	0100      	lsls	r0, r0, #4
 8001b80:	4303      	orrs	r3, r0
 8001b82:	704b      	strb	r3, [r1, #1]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_0, data_array, 2, dev);
 8001b84:	0023      	movs	r3, r4
 8001b86:	3a0d      	subs	r2, #13
 8001b88:	202c      	movs	r0, #44	@ 0x2c
 8001b8a:	f7ff fcaf 	bl	80014ec <bma400_set_regs>
 8001b8e:	e7e5      	b.n	8001b5c <set_autowakeup_timeout+0x1a>

08001b90 <set_auto_low_power>:
{
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	0004      	movs	r4, r0
 8001b96:	000d      	movs	r5, r1
    rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8001b98:	000b      	movs	r3, r1
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4669      	mov	r1, sp
 8001b9e:	3107      	adds	r1, #7
 8001ba0:	202b      	movs	r0, #43	@ 0x2b
 8001ba2:	f7ff fe0e 	bl	80017c2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	d10d      	bne.n	8001bc6 <set_auto_low_power+0x36>
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_AUTO_LOW_POW, auto_lp_conf->auto_low_power_trigger);
 8001baa:	466b      	mov	r3, sp
 8001bac:	1dd9      	adds	r1, r3, #7
 8001bae:	79db      	ldrb	r3, [r3, #7]
 8001bb0:	7826      	ldrb	r6, [r4, #0]
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	4393      	bics	r3, r2
 8001bb6:	4032      	ands	r2, r6
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	700b      	strb	r3, [r1, #0]
        if (auto_lp_conf->auto_low_power_trigger & 0x0C)
 8001bbc:	230c      	movs	r3, #12
 8001bbe:	4233      	tst	r3, r6
 8001bc0:	d103      	bne.n	8001bca <set_auto_low_power+0x3a>
        if (rslt == BMA400_OK)
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	d01d      	beq.n	8001c02 <set_auto_low_power+0x72>
}
 8001bc6:	b002      	add	sp, #8
 8001bc8:	bd70      	pop	{r4, r5, r6, pc}
            rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8001bca:	002b      	movs	r3, r5
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4669      	mov	r1, sp
 8001bd0:	3106      	adds	r1, #6
 8001bd2:	302a      	adds	r0, #42	@ 0x2a
 8001bd4:	f7ff fdf5 	bl	80017c2 <bma400_get_regs>
            if (rslt == BMA400_OK)
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d1f4      	bne.n	8001bc6 <set_auto_low_power+0x36>
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 8001bdc:	8862      	ldrh	r2, [r4, #2]
 8001bde:	1113      	asrs	r3, r2, #4
 8001be0:	4669      	mov	r1, sp
 8001be2:	3106      	adds	r1, #6
 8001be4:	700b      	strb	r3, [r1, #0]
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 8001be6:	466b      	mov	r3, sp
 8001be8:	1dd8      	adds	r0, r3, #7
 8001bea:	79dc      	ldrb	r4, [r3, #7]
 8001bec:	230f      	movs	r3, #15
 8001bee:	4023      	ands	r3, r4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	7003      	strb	r3, [r0, #0]
                rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8001bf6:	002b      	movs	r3, r5
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	202a      	movs	r0, #42	@ 0x2a
 8001bfc:	f7ff fc76 	bl	80014ec <bma400_set_regs>
 8001c00:	e7df      	b.n	8001bc2 <set_auto_low_power+0x32>
            rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8001c02:	002b      	movs	r3, r5
 8001c04:	2201      	movs	r2, #1
 8001c06:	4669      	mov	r1, sp
 8001c08:	3107      	adds	r1, #7
 8001c0a:	302b      	adds	r0, #43	@ 0x2b
 8001c0c:	f7ff fc6e 	bl	80014ec <bma400_set_regs>
 8001c10:	e7d9      	b.n	8001bc6 <set_auto_low_power+0x36>

08001c12 <set_int_pin_conf>:
            break;
    }
}

static int8_t set_int_pin_conf(struct bma400_int_pin_conf int_conf, struct bma400_dev *dev)
{
 8001c12:	b530      	push	{r4, r5, lr}
 8001c14:	b085      	sub	sp, #20
 8001c16:	ab01      	add	r3, sp, #4
 8001c18:	8018      	strh	r0, [r3, #0]
 8001c1a:	000c      	movs	r4, r1
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8001c1c:	000b      	movs	r3, r1
 8001c1e:	2201      	movs	r2, #1
 8001c20:	210f      	movs	r1, #15
 8001c22:	4469      	add	r1, sp
 8001c24:	2024      	movs	r0, #36	@ 0x24
 8001c26:	f7ff fdcc 	bl	80017c2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d10c      	bne.n	8001c48 <set_int_pin_conf+0x36>
    {
        if (int_conf.int_chan == BMA400_INT_CHANNEL_1)
 8001c2e:	ab01      	add	r3, sp, #4
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d00a      	beq.n	8001c4c <set_int_pin_conf+0x3a>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
        }

        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d015      	beq.n	8001c66 <set_int_pin_conf+0x54>
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
        }

        /* Set the configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8001c3a:	0023      	movs	r3, r4
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	210f      	movs	r1, #15
 8001c40:	4469      	add	r1, sp
 8001c42:	2024      	movs	r0, #36	@ 0x24
 8001c44:	f7ff fc52 	bl	80014ec <bma400_set_regs>
    }

    return rslt;
}
 8001c48:	b005      	add	sp, #20
 8001c4a:	bd30      	pop	{r4, r5, pc}
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
 8001c4c:	300f      	adds	r0, #15
 8001c4e:	4468      	add	r0, sp
 8001c50:	7802      	ldrb	r2, [r0, #0]
 8001c52:	a901      	add	r1, sp, #4
 8001c54:	784d      	ldrb	r5, [r1, #1]
 8001c56:	006d      	lsls	r5, r5, #1
 8001c58:	2106      	movs	r1, #6
 8001c5a:	4029      	ands	r1, r5
 8001c5c:	2506      	movs	r5, #6
 8001c5e:	43aa      	bics	r2, r5
 8001c60:	430a      	orrs	r2, r1
 8001c62:	7002      	strb	r2, [r0, #0]
 8001c64:	e7e7      	b.n	8001c36 <set_int_pin_conf+0x24>
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 8001c66:	200f      	movs	r0, #15
 8001c68:	4468      	add	r0, sp
 8001c6a:	7803      	ldrb	r3, [r0, #0]
 8001c6c:	aa01      	add	r2, sp, #4
 8001c6e:	7851      	ldrb	r1, [r2, #1]
 8001c70:	0149      	lsls	r1, r1, #5
 8001c72:	2260      	movs	r2, #96	@ 0x60
 8001c74:	400a      	ands	r2, r1
 8001c76:	2160      	movs	r1, #96	@ 0x60
 8001c78:	438b      	bics	r3, r1
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	7003      	strb	r3, [r0, #0]
 8001c7e:	e7dc      	b.n	8001c3a <set_int_pin_conf+0x28>

08001c80 <set_fifo_conf>:

    return rslt;
}

static int8_t set_fifo_conf(const struct bma400_fifo_conf *fifo_conf, struct bma400_dev *dev)
{
 8001c80:	b530      	push	{r4, r5, lr}
 8001c82:	b083      	sub	sp, #12
 8001c84:	0004      	movs	r4, r0
 8001c86:	000d      	movs	r5, r1
    int8_t rslt;
    uint8_t data_array[3];
    uint8_t sens_data[3];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001c88:	0008      	movs	r0, r1
 8001c8a:	f7ff fa91 	bl	80011b0 <null_ptr_check>

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d001      	beq.n	8001c96 <set_fifo_conf+0x16>
            }
        }
    }

    return rslt;
}
 8001c92:	b003      	add	sp, #12
 8001c94:	bd30      	pop	{r4, r5, pc}
        rslt = bma400_get_regs(BMA400_REG_FIFO_CONFIG_0, sens_data, 3, dev);
 8001c96:	002b      	movs	r3, r5
 8001c98:	2203      	movs	r2, #3
 8001c9a:	4669      	mov	r1, sp
 8001c9c:	3026      	adds	r0, #38	@ 0x26
 8001c9e:	f7ff fd90 	bl	80017c2 <bma400_get_regs>
        if (rslt == BMA400_OK)
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d1f5      	bne.n	8001c92 <set_fifo_conf+0x12>
            data_array[0] = fifo_conf->conf_regs;
 8001ca6:	7823      	ldrb	r3, [r4, #0]
 8001ca8:	aa01      	add	r2, sp, #4
 8001caa:	7013      	strb	r3, [r2, #0]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 8001cac:	7862      	ldrb	r2, [r4, #1]
 8001cae:	2a00      	cmp	r2, #0
 8001cb0:	d106      	bne.n	8001cc0 <set_fifo_conf+0x40>
                data_array[0] = sens_data[0] & (~data_array[0]);
 8001cb2:	466a      	mov	r2, sp
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	4013      	ands	r3, r2
 8001cbc:	aa01      	add	r2, sp, #4
 8001cbe:	7013      	strb	r3, [r2, #0]
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 8001cc0:	8863      	ldrh	r3, [r4, #2]
 8001cc2:	78a0      	ldrb	r0, [r4, #2]
 8001cc4:	a901      	add	r1, sp, #4
 8001cc6:	7048      	strb	r0, [r1, #1]
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	708b      	strb	r3, [r1, #2]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 8001ccc:	2207      	movs	r2, #7
 8001cce:	4013      	ands	r3, r2
 8001cd0:	708b      	strb	r3, [r1, #2]
            if ((data_array[1] == sens_data[1]) && (data_array[2] == sens_data[2]))
 8001cd2:	466a      	mov	r2, sp
 8001cd4:	7852      	ldrb	r2, [r2, #1]
 8001cd6:	4290      	cmp	r0, r2
 8001cd8:	d103      	bne.n	8001ce2 <set_fifo_conf+0x62>
 8001cda:	466a      	mov	r2, sp
 8001cdc:	7892      	ldrb	r2, [r2, #2]
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d006      	beq.n	8001cf0 <set_fifo_conf+0x70>
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 3, dev);
 8001ce2:	002b      	movs	r3, r5
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	a901      	add	r1, sp, #4
 8001ce8:	2026      	movs	r0, #38	@ 0x26
 8001cea:	f7ff fbff 	bl	80014ec <bma400_set_regs>
 8001cee:	e7d0      	b.n	8001c92 <set_fifo_conf+0x12>
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 1, dev);
 8001cf0:	002b      	movs	r3, r5
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2026      	movs	r0, #38	@ 0x26
 8001cf6:	f7ff fbf9 	bl	80014ec <bma400_set_regs>
 8001cfa:	e7ca      	b.n	8001c92 <set_fifo_conf+0x12>

08001cfc <bma400_set_power_mode>:
{
 8001cfc:	b570      	push	{r4, r5, r6, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	0005      	movs	r5, r0
 8001d02:	000e      	movs	r6, r1
    uint8_t reg_data = 0;
 8001d04:	466b      	mov	r3, sp
 8001d06:	2200      	movs	r2, #0
 8001d08:	71da      	strb	r2, [r3, #7]
    rslt = null_ptr_check(dev);
 8001d0a:	0008      	movs	r0, r1
 8001d0c:	f7ff fa50 	bl	80011b0 <null_ptr_check>
 8001d10:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8001d12:	d002      	beq.n	8001d1a <bma400_set_power_mode+0x1e>
}
 8001d14:	0020      	movs	r0, r4
 8001d16:	b002      	add	sp, #8
 8001d18:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 8001d1a:	0033      	movs	r3, r6
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4669      	mov	r1, sp
 8001d20:	3107      	adds	r1, #7
 8001d22:	2019      	movs	r0, #25
 8001d24:	f7ff fd4d 	bl	80017c2 <bma400_get_regs>
 8001d28:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8001d2a:	d1f3      	bne.n	8001d14 <bma400_set_power_mode+0x18>
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 8001d2c:	466b      	mov	r3, sp
 8001d2e:	79da      	ldrb	r2, [r3, #7]
 8001d30:	2303      	movs	r3, #3
 8001d32:	402b      	ands	r3, r5
 8001d34:	2103      	movs	r1, #3
 8001d36:	438a      	bics	r2, r1
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	466a      	mov	r2, sp
 8001d3c:	71d3      	strb	r3, [r2, #7]
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 8001d3e:	0033      	movs	r3, r6
 8001d40:	2201      	movs	r2, #1
 8001d42:	4669      	mov	r1, sp
 8001d44:	3107      	adds	r1, #7
 8001d46:	2019      	movs	r0, #25
 8001d48:	f7ff fbd0 	bl	80014ec <bma400_set_regs>
 8001d4c:	0004      	movs	r4, r0
        if (power_mode == BMA400_MODE_LOW_POWER)
 8001d4e:	2d01      	cmp	r5, #1
 8001d50:	d004      	beq.n	8001d5c <bma400_set_power_mode+0x60>
            dev->delay_us(10000, dev->intf_ptr); /* TBC */
 8001d52:	6973      	ldr	r3, [r6, #20]
 8001d54:	6871      	ldr	r1, [r6, #4]
 8001d56:	4804      	ldr	r0, [pc, #16]	@ (8001d68 <bma400_set_power_mode+0x6c>)
 8001d58:	4798      	blx	r3
 8001d5a:	e7db      	b.n	8001d14 <bma400_set_power_mode+0x18>
            dev->delay_us(40000, dev->intf_ptr);
 8001d5c:	6973      	ldr	r3, [r6, #20]
 8001d5e:	6871      	ldr	r1, [r6, #4]
 8001d60:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <bma400_set_power_mode+0x70>)
 8001d62:	4798      	blx	r3
 8001d64:	e7d6      	b.n	8001d14 <bma400_set_power_mode+0x18>
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	00002710 	.word	0x00002710
 8001d6c:	00009c40 	.word	0x00009c40

08001d70 <bma400_get_accel_data>:
{
 8001d70:	b570      	push	{r4, r5, r6, lr}
 8001d72:	0006      	movs	r6, r0
 8001d74:	000d      	movs	r5, r1
 8001d76:	0014      	movs	r4, r2
    rslt = null_ptr_check(dev);
 8001d78:	0010      	movs	r0, r2
 8001d7a:	f7ff fa19 	bl	80011b0 <null_ptr_check>
    if ((rslt == BMA400_OK) && (accel != NULL))
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	d107      	bne.n	8001d92 <bma400_get_accel_data+0x22>
 8001d82:	2d00      	cmp	r5, #0
 8001d84:	d008      	beq.n	8001d98 <bma400_get_accel_data+0x28>
        rslt = get_accel_data(data_sel, accel, dev);
 8001d86:	0022      	movs	r2, r4
 8001d88:	0029      	movs	r1, r5
 8001d8a:	0030      	movs	r0, r6
 8001d8c:	f7ff fd92 	bl	80018b4 <get_accel_data>
}
 8001d90:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BMA400_E_NULL_PTR;
 8001d92:	2001      	movs	r0, #1
 8001d94:	4240      	negs	r0, r0
 8001d96:	e7fb      	b.n	8001d90 <bma400_get_accel_data+0x20>
 8001d98:	2001      	movs	r0, #1
 8001d9a:	4240      	negs	r0, r0
 8001d9c:	e7f8      	b.n	8001d90 <bma400_get_accel_data+0x20>

08001d9e <bma400_set_sensor_conf>:
{
 8001d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da0:	b083      	sub	sp, #12
 8001da2:	0006      	movs	r6, r0
 8001da4:	000f      	movs	r7, r1
 8001da6:	0015      	movs	r5, r2
    uint8_t data_array[3] = { 0 };
 8001da8:	2203      	movs	r2, #3
 8001daa:	2100      	movs	r1, #0
 8001dac:	a801      	add	r0, sp, #4
 8001dae:	f002 fb75 	bl	800449c <memset>
    rslt = null_ptr_check(dev);
 8001db2:	0028      	movs	r0, r5
 8001db4:	f7ff f9fc 	bl	80011b0 <null_ptr_check>
    if ((rslt == BMA400_OK) && (conf != NULL))
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d124      	bne.n	8001e06 <bma400_set_sensor_conf+0x68>
 8001dbc:	2e00      	cmp	r6, #0
 8001dbe:	d025      	beq.n	8001e0c <bma400_set_sensor_conf+0x6e>
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8001dc0:	002b      	movs	r3, r5
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	a901      	add	r1, sp, #4
 8001dc6:	3021      	adds	r0, #33	@ 0x21
 8001dc8:	f7ff fcfb 	bl	80017c2 <bma400_get_regs>
        if (rslt == BMA400_OK)
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	d001      	beq.n	8001dd4 <bma400_set_sensor_conf+0x36>
}
 8001dd0:	b003      	add	sp, #12
 8001dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8001dd4:	2400      	movs	r4, #0
 8001dd6:	42bc      	cmp	r4, r7
 8001dd8:	d20c      	bcs.n	8001df4 <bma400_set_sensor_conf+0x56>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d10a      	bne.n	8001df4 <bma400_set_sensor_conf+0x56>
                rslt = set_sensor_conf(data_array, conf + idx, dev);
 8001dde:	00a1      	lsls	r1, r4, #2
 8001de0:	1909      	adds	r1, r1, r4
 8001de2:	0089      	lsls	r1, r1, #2
 8001de4:	1871      	adds	r1, r6, r1
 8001de6:	002a      	movs	r2, r5
 8001de8:	a801      	add	r0, sp, #4
 8001dea:	f7ff fe50 	bl	8001a8e <set_sensor_conf>
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8001dee:	3401      	adds	r4, #1
 8001df0:	b2a4      	uxth	r4, r4
 8001df2:	e7f0      	b.n	8001dd6 <bma400_set_sensor_conf+0x38>
            if (rslt == BMA400_OK)
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d1eb      	bne.n	8001dd0 <bma400_set_sensor_conf+0x32>
                rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8001df8:	002b      	movs	r3, r5
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	a901      	add	r1, sp, #4
 8001dfe:	3021      	adds	r0, #33	@ 0x21
 8001e00:	f7ff fb74 	bl	80014ec <bma400_set_regs>
 8001e04:	e7e4      	b.n	8001dd0 <bma400_set_sensor_conf+0x32>
        rslt = BMA400_E_NULL_PTR;
 8001e06:	2001      	movs	r0, #1
 8001e08:	4240      	negs	r0, r0
 8001e0a:	e7e1      	b.n	8001dd0 <bma400_set_sensor_conf+0x32>
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	4240      	negs	r0, r0
 8001e10:	e7de      	b.n	8001dd0 <bma400_set_sensor_conf+0x32>
	...

08001e14 <bma400_set_device_conf>:
{
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e16:	46ce      	mov	lr, r9
 8001e18:	4647      	mov	r7, r8
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	0006      	movs	r6, r0
 8001e20:	000f      	movs	r7, r1
 8001e22:	4690      	mov	r8, r2
    uint8_t data_array[3] = { 0 };
 8001e24:	2203      	movs	r2, #3
 8001e26:	2100      	movs	r1, #0
 8001e28:	a801      	add	r0, sp, #4
 8001e2a:	f002 fb37 	bl	800449c <memset>
    rslt = null_ptr_check(dev);
 8001e2e:	4640      	mov	r0, r8
 8001e30:	f7ff f9be 	bl	80011b0 <null_ptr_check>
    if ((rslt == BMA400_OK) && (conf != NULL))
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d000      	beq.n	8001e3a <bma400_set_device_conf+0x26>
 8001e38:	e06d      	b.n	8001f16 <bma400_set_device_conf+0x102>
 8001e3a:	2e00      	cmp	r6, #0
 8001e3c:	d100      	bne.n	8001e40 <bma400_set_device_conf+0x2c>
 8001e3e:	e06d      	b.n	8001f1c <bma400_set_device_conf+0x108>
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8001e40:	4643      	mov	r3, r8
 8001e42:	2203      	movs	r2, #3
 8001e44:	a901      	add	r1, sp, #4
 8001e46:	3021      	adds	r0, #33	@ 0x21
 8001e48:	f7ff fcbb 	bl	80017c2 <bma400_get_regs>
 8001e4c:	0005      	movs	r5, r0
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8001e4e:	2400      	movs	r4, #0
 8001e50:	e007      	b.n	8001e62 <bma400_set_device_conf+0x4e>
                    rslt = set_autowakeup_timeout(&conf[idx].param.auto_wakeup, dev);
 8001e52:	4648      	mov	r0, r9
 8001e54:	3002      	adds	r0, #2
 8001e56:	4641      	mov	r1, r8
 8001e58:	f7ff fe73 	bl	8001b42 <set_autowakeup_timeout>
 8001e5c:	0005      	movs	r5, r0
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8001e5e:	3401      	adds	r4, #1
 8001e60:	b2a4      	uxth	r4, r4
 8001e62:	42a7      	cmp	r7, r4
 8001e64:	d947      	bls.n	8001ef6 <bma400_set_device_conf+0xe2>
 8001e66:	2d00      	cmp	r5, #0
 8001e68:	d145      	bne.n	8001ef6 <bma400_set_device_conf+0xe2>
            switch (conf[idx].type)
 8001e6a:	00a3      	lsls	r3, r4, #2
 8001e6c:	191b      	adds	r3, r3, r4
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	18f2      	adds	r2, r6, r3
 8001e72:	4691      	mov	r9, r2
 8001e74:	5cf3      	ldrb	r3, [r6, r3]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d83a      	bhi.n	8001ef0 <bma400_set_device_conf+0xdc>
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4a29      	ldr	r2, [pc, #164]	@ (8001f24 <bma400_set_device_conf+0x110>)
 8001e7e:	58d3      	ldr	r3, [r2, r3]
 8001e80:	469f      	mov	pc, r3
                    rslt = set_autowakeup_interrupt(&conf[idx].param.wakeup, dev);
 8001e82:	464b      	mov	r3, r9
 8001e84:	1c98      	adds	r0, r3, #2
 8001e86:	4641      	mov	r1, r8
 8001e88:	f7ff fc70 	bl	800176c <set_autowakeup_interrupt>
 8001e8c:	1e05      	subs	r5, r0, #0
                    if (rslt == BMA400_OK)
 8001e8e:	d1e6      	bne.n	8001e5e <bma400_set_device_conf+0x4a>
                        map_int_pin(data_array, BMA400_WAKEUP_INT_MAP, conf[idx].param.wakeup.int_chan);
 8001e90:	464b      	mov	r3, r9
 8001e92:	7a5a      	ldrb	r2, [r3, #9]
 8001e94:	2107      	movs	r1, #7
 8001e96:	a801      	add	r0, sp, #4
 8001e98:	f7ff f9a4 	bl	80011e4 <map_int_pin>
 8001e9c:	e7df      	b.n	8001e5e <bma400_set_device_conf+0x4a>
                    rslt = set_auto_low_power(&conf[idx].param.auto_lp, dev);
 8001e9e:	4648      	mov	r0, r9
 8001ea0:	3002      	adds	r0, #2
 8001ea2:	4641      	mov	r1, r8
 8001ea4:	f7ff fe74 	bl	8001b90 <set_auto_low_power>
 8001ea8:	0005      	movs	r5, r0
                    break;
 8001eaa:	e7d8      	b.n	8001e5e <bma400_set_device_conf+0x4a>
                    rslt = set_int_pin_conf(conf[idx].param.int_conf, dev);
 8001eac:	464b      	mov	r3, r9
 8001eae:	8858      	ldrh	r0, [r3, #2]
 8001eb0:	4641      	mov	r1, r8
 8001eb2:	f7ff feae 	bl	8001c12 <set_int_pin_conf>
 8001eb6:	0005      	movs	r5, r0
                    break;
 8001eb8:	e7d1      	b.n	8001e5e <bma400_set_device_conf+0x4a>
                    map_int_pin(data_array, BMA400_INT_OVERRUN_MAP, conf[idx].param.overrun_int.int_chan);
 8001eba:	464b      	mov	r3, r9
 8001ebc:	789a      	ldrb	r2, [r3, #2]
 8001ebe:	210b      	movs	r1, #11
 8001ec0:	a801      	add	r0, sp, #4
 8001ec2:	f7ff f98f 	bl	80011e4 <map_int_pin>
                    break;
 8001ec6:	e7ca      	b.n	8001e5e <bma400_set_device_conf+0x4a>
                    rslt = set_fifo_conf(&conf[idx].param.fifo_conf, dev);
 8001ec8:	464b      	mov	r3, r9
 8001eca:	1c98      	adds	r0, r3, #2
 8001ecc:	4641      	mov	r1, r8
 8001ece:	f7ff fed7 	bl	8001c80 <set_fifo_conf>
 8001ed2:	1e05      	subs	r5, r0, #0
                    if (rslt == BMA400_OK)
 8001ed4:	d1c3      	bne.n	8001e5e <bma400_set_device_conf+0x4a>
                        map_int_pin(data_array, BMA400_FIFO_WM_INT_MAP, conf[idx].param.fifo_conf.fifo_wm_channel);
 8001ed6:	464b      	mov	r3, r9
 8001ed8:	79da      	ldrb	r2, [r3, #7]
 8001eda:	2102      	movs	r1, #2
 8001edc:	a801      	add	r0, sp, #4
 8001ede:	f7ff f981 	bl	80011e4 <map_int_pin>
                        map_int_pin(data_array, BMA400_FIFO_FULL_INT_MAP, conf[idx].param.fifo_conf.fifo_full_channel);
 8001ee2:	464b      	mov	r3, r9
 8001ee4:	799a      	ldrb	r2, [r3, #6]
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	a801      	add	r0, sp, #4
 8001eea:	f7ff f97b 	bl	80011e4 <map_int_pin>
 8001eee:	e7b6      	b.n	8001e5e <bma400_set_device_conf+0x4a>
            switch (conf[idx].type)
 8001ef0:	2504      	movs	r5, #4
 8001ef2:	426d      	negs	r5, r5
 8001ef4:	e7b3      	b.n	8001e5e <bma400_set_device_conf+0x4a>
        if (rslt == BMA400_OK)
 8001ef6:	2d00      	cmp	r5, #0
 8001ef8:	d005      	beq.n	8001f06 <bma400_set_device_conf+0xf2>
}
 8001efa:	0028      	movs	r0, r5
 8001efc:	b003      	add	sp, #12
 8001efe:	bcc0      	pop	{r6, r7}
 8001f00:	46b9      	mov	r9, r7
 8001f02:	46b0      	mov	r8, r6
 8001f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8001f06:	4643      	mov	r3, r8
 8001f08:	2203      	movs	r2, #3
 8001f0a:	a901      	add	r1, sp, #4
 8001f0c:	2021      	movs	r0, #33	@ 0x21
 8001f0e:	f7ff faed 	bl	80014ec <bma400_set_regs>
 8001f12:	0005      	movs	r5, r0
 8001f14:	e7f1      	b.n	8001efa <bma400_set_device_conf+0xe6>
        rslt = BMA400_E_NULL_PTR;
 8001f16:	2501      	movs	r5, #1
 8001f18:	426d      	negs	r5, r5
 8001f1a:	e7ee      	b.n	8001efa <bma400_set_device_conf+0xe6>
 8001f1c:	2501      	movs	r5, #1
 8001f1e:	426d      	negs	r5, r5
 8001f20:	e7eb      	b.n	8001efa <bma400_set_device_conf+0xe6>
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	08004e58 	.word	0x08004e58

08001f28 <set_auto_wakeup>:
{
 8001f28:	b530      	push	{r4, r5, lr}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	0005      	movs	r5, r0
 8001f2e:	000c      	movs	r4, r1
    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 8001f30:	000b      	movs	r3, r1
 8001f32:	2201      	movs	r2, #1
 8001f34:	4669      	mov	r1, sp
 8001f36:	3107      	adds	r1, #7
 8001f38:	202d      	movs	r0, #45	@ 0x2d
 8001f3a:	f7ff fc42 	bl	80017c2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d001      	beq.n	8001f46 <set_auto_wakeup+0x1e>
}
 8001f42:	b003      	add	sp, #12
 8001f44:	bd30      	pop	{r4, r5, pc}
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 8001f46:	466b      	mov	r3, sp
 8001f48:	79db      	ldrb	r3, [r3, #7]
 8001f4a:	006d      	lsls	r5, r5, #1
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	402a      	ands	r2, r5
 8001f50:	2102      	movs	r1, #2
 8001f52:	438b      	bics	r3, r1
 8001f54:	4313      	orrs	r3, r2
 8001f56:	466a      	mov	r2, sp
 8001f58:	71d3      	strb	r3, [r2, #7]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 8001f5a:	0023      	movs	r3, r4
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4669      	mov	r1, sp
 8001f60:	3107      	adds	r1, #7
 8001f62:	302d      	adds	r0, #45	@ 0x2d
 8001f64:	f7ff fac2 	bl	80014ec <bma400_set_regs>
 8001f68:	e7eb      	b.n	8001f42 <set_auto_wakeup+0x1a>

08001f6a <user_i2c_read>:

    return rslt;
}

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 8001f6a:	b510      	push	{r4, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	0004      	movs	r4, r0
 8001f70:	0018      	movs	r0, r3
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;

    if (HAL_I2C_Mem_Read(hi2c, BMA400_I2C_ADDR, reg_addr,
 8001f72:	2301      	movs	r3, #1
 8001f74:	425b      	negs	r3, r3
 8001f76:	9302      	str	r3, [sp, #8]
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	9201      	str	r2, [sp, #4]
 8001f7c:	9100      	str	r1, [sp, #0]
 8001f7e:	3302      	adds	r3, #2
 8001f80:	0022      	movs	r2, r4
 8001f82:	2128      	movs	r1, #40	@ 0x28
 8001f84:	f001 f90c 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d101      	bne.n	8001f90 <user_i2c_read+0x26>
    }
    else
    {
        return BMA400_E_COM_FAIL;
    }
}
 8001f8c:	b004      	add	sp, #16
 8001f8e:	bd10      	pop	{r4, pc}
        return BMA400_E_COM_FAIL;
 8001f90:	2002      	movs	r0, #2
 8001f92:	4240      	negs	r0, r0
 8001f94:	e7fa      	b.n	8001f8c <user_i2c_read+0x22>

08001f96 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8001f96:	b510      	push	{r4, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	0004      	movs	r4, r0
 8001f9c:	0018      	movs	r0, r3
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;

    if (HAL_I2C_Mem_Write(hi2c, BMA400_I2C_ADDR, reg_addr,
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	425b      	negs	r3, r3
 8001fa2:	9302      	str	r3, [sp, #8]
 8001fa4:	b292      	uxth	r2, r2
 8001fa6:	9201      	str	r2, [sp, #4]
 8001fa8:	9100      	str	r1, [sp, #0]
 8001faa:	3302      	adds	r3, #2
 8001fac:	0022      	movs	r2, r4
 8001fae:	2128      	movs	r1, #40	@ 0x28
 8001fb0:	f001 f826 	bl	8003000 <HAL_I2C_Mem_Write>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d101      	bne.n	8001fbc <user_i2c_write+0x26>
    }
    else
    {
        return BMA400_E_COM_FAIL;
    }
}
 8001fb8:	b004      	add	sp, #16
 8001fba:	bd10      	pop	{r4, pc}
        return BMA400_E_COM_FAIL;
 8001fbc:	2002      	movs	r0, #2
 8001fbe:	4240      	negs	r0, r0
 8001fc0:	e7fa      	b.n	8001fb8 <user_i2c_write+0x22>

08001fc2 <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 8001fc2:	b510      	push	{r4, lr}
    // Zakładamy, że potrzebne opóźnienia mają ≥ 1000us (1ms)
    HAL_Delay(period / 1000);
 8001fc4:	21fa      	movs	r1, #250	@ 0xfa
 8001fc6:	0089      	lsls	r1, r1, #2
 8001fc8:	f7fe f8b0 	bl	800012c <__udivsi3>
 8001fcc:	f000 fc86 	bl	80028dc <HAL_Delay>

    // Jeśli potrzebujesz dokładniejszych opóźnień — patrz niżej
}
 8001fd0:	bd10      	pop	{r4, pc}
	...

08001fd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd6:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	2214      	movs	r2, #20
 8001fda:	2100      	movs	r1, #0
 8001fdc:	a805      	add	r0, sp, #20
 8001fde:	f002 fa5d 	bl	800449c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	4b22      	ldr	r3, [pc, #136]	@ (800206c <MX_GPIO_Init+0x98>)
 8001fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fe6:	2404      	movs	r4, #4
 8001fe8:	4322      	orrs	r2, r4
 8001fea:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fee:	4022      	ands	r2, r4
 8001ff0:	9201      	str	r2, [sp, #4]
 8001ff2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	4311      	orrs	r1, r2
 8001ffa:	6359      	str	r1, [r3, #52]	@ 0x34
 8001ffc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ffe:	400a      	ands	r2, r1
 8002000:	9202      	str	r2, [sp, #8]
 8002002:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002006:	2501      	movs	r5, #1
 8002008:	432a      	orrs	r2, r5
 800200a:	635a      	str	r2, [r3, #52]	@ 0x34
 800200c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800200e:	402a      	ands	r2, r5
 8002010:	9203      	str	r2, [sp, #12]
 8002012:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002014:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002016:	2202      	movs	r2, #2
 8002018:	4311      	orrs	r1, r2
 800201a:	6359      	str	r1, [r3, #52]	@ 0x34
 800201c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201e:	401a      	ands	r2, r3
 8002020:	9204      	str	r2, [sp, #16]
 8002022:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_IO_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002024:	27d0      	movs	r7, #208	@ 0xd0
 8002026:	007f      	lsls	r7, r7, #1
 8002028:	26a0      	movs	r6, #160	@ 0xa0
 800202a:	05f6      	lsls	r6, r6, #23
 800202c:	2200      	movs	r2, #0
 800202e:	0039      	movs	r1, r7
 8002030:	0030      	movs	r0, r6
 8002032:	f000 fda5 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8002036:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002038:	2400      	movs	r4, #0
 800203a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 800203e:	a905      	add	r1, sp, #20
 8002040:	480b      	ldr	r0, [pc, #44]	@ (8002070 <MX_GPIO_Init+0x9c>)
 8002042:	f000 fcc5 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_IO_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = EN_IO_Pin|LED1_Pin|LED2_Pin;
 8002046:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002048:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	a905      	add	r1, sp, #20
 8002050:	0030      	movs	r0, r6
 8002052:	f000 fcbd 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002056:	2340      	movs	r3, #64	@ 0x40
 8002058:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800205c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800205e:	a905      	add	r1, sp, #20
 8002060:	0030      	movs	r0, r6
 8002062:	f000 fcb5 	bl	80029d0 <HAL_GPIO_Init>

}
 8002066:	b00b      	add	sp, #44	@ 0x2c
 8002068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	40021000 	.word	0x40021000
 8002070:	50001400 	.word	0x50001400

08002074 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002074:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002076:	4814      	ldr	r0, [pc, #80]	@ (80020c8 <MX_I2C1_Init+0x54>)
 8002078:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <MX_I2C1_Init+0x58>)
 800207a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00402D41;
 800207c:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <MX_I2C1_Init+0x5c>)
 800207e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002084:	2201      	movs	r2, #1
 8002086:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002088:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800208a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800208c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800208e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002090:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002092:	f000 ff47 	bl	8002f24 <HAL_I2C_Init>
 8002096:	2800      	cmp	r0, #0
 8002098:	d10c      	bne.n	80020b4 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800209a:	480b      	ldr	r0, [pc, #44]	@ (80020c8 <MX_I2C1_Init+0x54>)
 800209c:	2100      	movs	r1, #0
 800209e:	f001 f953 	bl	8003348 <HAL_I2CEx_ConfigAnalogFilter>
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d109      	bne.n	80020ba <MX_I2C1_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020a6:	4808      	ldr	r0, [pc, #32]	@ (80020c8 <MX_I2C1_Init+0x54>)
 80020a8:	2100      	movs	r1, #0
 80020aa:	f001 f979 	bl	80033a0 <HAL_I2CEx_ConfigDigitalFilter>
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d106      	bne.n	80020c0 <MX_I2C1_Init+0x4c>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020b2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80020b4:	f000 f9bc 	bl	8002430 <Error_Handler>
 80020b8:	e7ef      	b.n	800209a <MX_I2C1_Init+0x26>
    Error_Handler();
 80020ba:	f000 f9b9 	bl	8002430 <Error_Handler>
 80020be:	e7f2      	b.n	80020a6 <MX_I2C1_Init+0x32>
    Error_Handler();
 80020c0:	f000 f9b6 	bl	8002430 <Error_Handler>
}
 80020c4:	e7f5      	b.n	80020b2 <MX_I2C1_Init+0x3e>
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	20000098 	.word	0x20000098
 80020cc:	40005400 	.word	0x40005400
 80020d0:	00402d41 	.word	0x00402d41

080020d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020d4:	b510      	push	{r4, lr}
 80020d6:	b08e      	sub	sp, #56	@ 0x38
 80020d8:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020da:	2214      	movs	r2, #20
 80020dc:	2100      	movs	r1, #0
 80020de:	a809      	add	r0, sp, #36	@ 0x24
 80020e0:	f002 f9dc 	bl	800449c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e4:	221c      	movs	r2, #28
 80020e6:	2100      	movs	r1, #0
 80020e8:	a802      	add	r0, sp, #8
 80020ea:	f002 f9d7 	bl	800449c <memset>
  if(i2cHandle->Instance==I2C1)
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	4b17      	ldr	r3, [pc, #92]	@ (8002150 <HAL_I2C_MspInit+0x7c>)
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020f6:	b00e      	add	sp, #56	@ 0x38
 80020f8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020fa:	2302      	movs	r3, #2
 80020fc:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020fe:	a802      	add	r0, sp, #8
 8002100:	f001 fbf4 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 8002104:	2800      	cmp	r0, #0
 8002106:	d120      	bne.n	800214a <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002108:	4c12      	ldr	r4, [pc, #72]	@ (8002154 <HAL_I2C_MspInit+0x80>)
 800210a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800210c:	2302      	movs	r3, #2
 800210e:	431a      	orrs	r2, r3
 8002110:	6362      	str	r2, [r4, #52]	@ 0x34
 8002112:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002114:	4013      	ands	r3, r2
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800211a:	23c0      	movs	r3, #192	@ 0xc0
 800211c:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800211e:	3bae      	subs	r3, #174	@ 0xae
 8002120:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002122:	3b11      	subs	r3, #17
 8002124:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800212a:	3306      	adds	r3, #6
 800212c:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212e:	a909      	add	r1, sp, #36	@ 0x24
 8002130:	4809      	ldr	r0, [pc, #36]	@ (8002158 <HAL_I2C_MspInit+0x84>)
 8002132:	f000 fc4d 	bl	80029d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002136:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002138:	2280      	movs	r2, #128	@ 0x80
 800213a:	0392      	lsls	r2, r2, #14
 800213c:	4313      	orrs	r3, r2
 800213e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002140:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002142:	4013      	ands	r3, r2
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	9b01      	ldr	r3, [sp, #4]
}
 8002148:	e7d5      	b.n	80020f6 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800214a:	f000 f971 	bl	8002430 <Error_Handler>
 800214e:	e7db      	b.n	8002108 <HAL_I2C_MspInit+0x34>
 8002150:	40005400 	.word	0x40005400
 8002154:	40021000 	.word	0x40021000
 8002158:	50000400 	.word	0x50000400

0800215c <configureBMA400>:
    HAL_PWR_EnterSTANDBYMode();
}

// Configure BMA400 for low power + wake-up on Y-axis motion
void configureBMA400(struct bma400_dev *dev)
{
 800215c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215e:	b08f      	sub	sp, #60	@ 0x3c
 8002160:	0005      	movs	r5, r0
	bma400_set_power_mode(BMA400_MODE_NORMAL, dev);
 8002162:	0001      	movs	r1, r0
 8002164:	2002      	movs	r0, #2
 8002166:	f7ff fdc9 	bl	8001cfc <bma400_set_power_mode>

	struct bma400_device_conf dev_conf[] = {
 800216a:	ac06      	add	r4, sp, #24
 800216c:	221e      	movs	r2, #30
 800216e:	2100      	movs	r1, #0
 8002170:	0020      	movs	r0, r4
 8002172:	f002 f993 	bl	800449c <memset>
 8002176:	2302      	movs	r3, #2
 8002178:	7023      	strb	r3, [r4, #0]
 800217a:	220e      	movs	r2, #14
 800217c:	70a2      	strb	r2, [r4, #2]
 800217e:	4a14      	ldr	r2, [pc, #80]	@ (80021d0 <configureBMA400+0x74>)
 8002180:	80a2      	strh	r2, [r4, #4]
 8002182:	2601      	movs	r6, #1
 8002184:	72a6      	strb	r6, [r4, #10]
 8002186:	7323      	strb	r3, [r4, #12]
 8002188:	7363      	strb	r3, [r4, #13]
 800218a:	73a3      	strb	r3, [r4, #14]
 800218c:	2205      	movs	r2, #5
 800218e:	73e2      	strb	r2, [r4, #15]
 8002190:	74e6      	strb	r6, [r4, #19]
 8002192:	2703      	movs	r7, #3
 8002194:	7527      	strb	r7, [r4, #20]
 8002196:	75a6      	strb	r6, [r4, #22]
 8002198:	75e3      	strb	r3, [r4, #23]
				.pin_conf = BMA400_INT_OPEN_DRAIN_ACTIVE_0
			}
		}
	};

	bma400_set_device_conf(dev_conf, 3, dev);
 800219a:	002a      	movs	r2, r5
 800219c:	2103      	movs	r1, #3
 800219e:	0020      	movs	r0, r4
 80021a0:	f7ff fe38 	bl	8001e14 <bma400_set_device_conf>

	struct bma400_sensor_conf sensor_conf = {
 80021a4:	ac01      	add	r4, sp, #4
 80021a6:	2214      	movs	r2, #20
 80021a8:	2100      	movs	r1, #0
 80021aa:	0020      	movs	r0, r4
 80021ac:	f002 f976 	bl	800449c <memset>
 80021b0:	230b      	movs	r3, #11
 80021b2:	70a3      	strb	r3, [r4, #2]
 80021b4:	7126      	strb	r6, [r4, #4]
 80021b6:	7167      	strb	r7, [r4, #5]
			.osr = BMA400_ACCEL_OSR_SETTING_3,
			.odr = BMA400_ODR_800HZ
		}
	};

	bma400_set_sensor_conf(&sensor_conf, 1, dev);
 80021b8:	002a      	movs	r2, r5
 80021ba:	2101      	movs	r1, #1
 80021bc:	0020      	movs	r0, r4
 80021be:	f7ff fdee 	bl	8001d9e <bma400_set_sensor_conf>
	set_auto_wakeup(BMA400_ENABLE, dev);	// enable auto wake up
 80021c2:	0029      	movs	r1, r5
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7ff feaf 	bl	8001f28 <set_auto_wakeup>
}
 80021ca:	b00f      	add	sp, #60	@ 0x3c
 80021cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	00004e20 	.word	0x00004e20

080021d4 <calc_average>:

float calc_average(float *buf, uint8_t size)
{
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	0007      	movs	r7, r0
 80021d8:	000e      	movs	r6, r1
    float sum = 0.0f;
    for (uint8_t i = 0; i < size; i++)
 80021da:	2400      	movs	r4, #0
    float sum = 0.0f;
 80021dc:	2500      	movs	r5, #0
    for (uint8_t i = 0; i < size; i++)
 80021de:	e007      	b.n	80021f0 <calc_average+0x1c>
        sum += buf[i];
 80021e0:	00a3      	lsls	r3, r4, #2
 80021e2:	59d9      	ldr	r1, [r3, r7]
 80021e4:	1c28      	adds	r0, r5, #0
 80021e6:	f7fe f951 	bl	800048c <__aeabi_fadd>
 80021ea:	1c05      	adds	r5, r0, #0
    for (uint8_t i = 0; i < size; i++)
 80021ec:	3401      	adds	r4, #1
 80021ee:	b2e4      	uxtb	r4, r4
 80021f0:	42b4      	cmp	r4, r6
 80021f2:	d3f5      	bcc.n	80021e0 <calc_average+0xc>
    return sum / size;
 80021f4:	0030      	movs	r0, r6
 80021f6:	f7fe ff6d 	bl	80010d4 <__aeabi_i2f>
 80021fa:	1c01      	adds	r1, r0, #0
 80021fc:	1c28      	adds	r0, r5, #0
 80021fe:	f7fe fb37 	bl	8000870 <__aeabi_fdiv>
}
 8002202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002204 <Send16BitESP>:

void Send16BitESP(UART_HandleTypeDef *huart, uint16_t value) {
 8002204:	b510      	push	{r4, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	0004      	movs	r4, r0
 800220a:	000b      	movs	r3, r1
	char msg[16];
	snprintf(msg, sizeof(msg), "%u\n", value);
 800220c:	4a08      	ldr	r2, [pc, #32]	@ (8002230 <Send16BitESP+0x2c>)
 800220e:	2110      	movs	r1, #16
 8002210:	4668      	mov	r0, sp
 8002212:	f002 f90d 	bl	8004430 <sniprintf>

	//HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, SET);
	//HAL_Delay(300);
	HAL_UART_Transmit(huart, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8002216:	4668      	mov	r0, sp
 8002218:	f7fd ff76 	bl	8000108 <strlen>
 800221c:	2301      	movs	r3, #1
 800221e:	b282      	uxth	r2, r0
 8002220:	425b      	negs	r3, r3
 8002222:	4669      	mov	r1, sp
 8002224:	0020      	movs	r0, r4
 8002226:	f001 ff4c 	bl	80040c2 <HAL_UART_Transmit>
	//HAL_Delay(10);
	//HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, RESET);
}
 800222a:	b004      	add	sp, #16
 800222c:	bd10      	pop	{r4, pc}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	08004e70 	.word	0x08004e70

08002234 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002236:	b085      	sub	sp, #20
	if (htim->Instance == TIM14)
 8002238:	6803      	ldr	r3, [r0, #0]
 800223a:	4a6c      	ldr	r2, [pc, #432]	@ (80023ec <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d005      	beq.n	800224c <HAL_TIM_PeriodElapsedCallback+0x18>
	                }
	                break;
	        }
	    }
	}
    else if (htim->Instance == TIM16)
 8002240:	4a6b      	ldr	r2, [pc, #428]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d100      	bne.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
 8002246:	e0b6      	b.n	80023b6 <HAL_TIM_PeriodElapsedCallback+0x182>
            tick_counter = 0;
            flag_2sec = 1;
            send_2sec = motion_time;
        }
	}
}
 8002248:	b005      	add	sp, #20
 800224a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    if (bma400_get_accel_data(BMA400_DATA_ONLY, &sample, &bma400) == BMA400_OK)
 800224c:	4a69      	ldr	r2, [pc, #420]	@ (80023f4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800224e:	a901      	add	r1, sp, #4
 8002250:	2000      	movs	r0, #0
 8002252:	f7ff fd8d 	bl	8001d70 <bma400_get_accel_data>
 8002256:	2800      	cmp	r0, #0
 8002258:	d1f6      	bne.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
	    	if (warmup_counter < WARMUP_SAMPLES)
 800225a:	4b67      	ldr	r3, [pc, #412]	@ (80023f8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800225c:	781e      	ldrb	r6, [r3, #0]
 800225e:	2e09      	cmp	r6, #9
 8002260:	d950      	bls.n	8002304 <HAL_TIM_PeriodElapsedCallback+0xd0>
	        sample_buffer[sample_index++] = sample.y;
 8002262:	ab01      	add	r3, sp, #4
 8002264:	2002      	movs	r0, #2
 8002266:	5e18      	ldrsh	r0, [r3, r0]
 8002268:	4a64      	ldr	r2, [pc, #400]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800226a:	7815      	ldrb	r5, [r2, #0]
 800226c:	1c6c      	adds	r4, r5, #1
 800226e:	b2e4      	uxtb	r4, r4
 8002270:	7014      	strb	r4, [r2, #0]
 8002272:	4e63      	ldr	r6, [pc, #396]	@ (8002400 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002274:	00ad      	lsls	r5, r5, #2
 8002276:	f7fe ff2d 	bl	80010d4 <__aeabi_i2f>
 800227a:	5170      	str	r0, [r6, r5]
	        if (sample_index >= SAMPLE_WINDOW)
 800227c:	2c09      	cmp	r4, #9
 800227e:	d902      	bls.n	8002286 <HAL_TIM_PeriodElapsedCallback+0x52>
	            sample_index = 0;
 8002280:	4b5e      	ldr	r3, [pc, #376]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
	        float avg = calc_average(sample_buffer, SAMPLE_WINDOW);
 8002286:	485e      	ldr	r0, [pc, #376]	@ (8002400 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002288:	210a      	movs	r1, #10
 800228a:	f7ff ffa3 	bl	80021d4 <calc_average>
 800228e:	1c04      	adds	r4, r0, #0
	        if (ave_min == 0.0f || avg < ave_min) ave_min = avg;
 8002290:	4b5c      	ldr	r3, [pc, #368]	@ (8002404 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002292:	681d      	ldr	r5, [r3, #0]
 8002294:	2100      	movs	r1, #0
 8002296:	1c28      	adds	r0, r5, #0
 8002298:	f7fe f8ca 	bl	8000430 <__aeabi_fcmpeq>
 800229c:	2800      	cmp	r0, #0
 800229e:	d105      	bne.n	80022ac <HAL_TIM_PeriodElapsedCallback+0x78>
 80022a0:	1c21      	adds	r1, r4, #0
 80022a2:	1c28      	adds	r0, r5, #0
 80022a4:	f7fe f8de 	bl	8000464 <__aeabi_fcmpgt>
 80022a8:	2800      	cmp	r0, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_TIM_PeriodElapsedCallback+0x7c>
 80022ac:	4b55      	ldr	r3, [pc, #340]	@ (8002404 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80022ae:	601c      	str	r4, [r3, #0]
	        if (avg > ave_max) ave_max = avg;
 80022b0:	4b55      	ldr	r3, [pc, #340]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	1c21      	adds	r1, r4, #0
 80022b6:	f7fe f8c1 	bl	800043c <__aeabi_fcmplt>
 80022ba:	2800      	cmp	r0, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_TIM_PeriodElapsedCallback+0x8e>
 80022be:	4b52      	ldr	r3, [pc, #328]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80022c0:	601c      	str	r4, [r3, #0]
	        float diff = ave_max - ave_min;
 80022c2:	4b51      	ldr	r3, [pc, #324]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002404 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	f7fe fc9f 	bl	8000c0c <__aeabi_fsub>
	        switch (motion_state)
 80022ce:	4b4f      	ldr	r3, [pc, #316]	@ (800240c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d058      	beq.n	8002388 <HAL_TIM_PeriodElapsedCallback+0x154>
 80022d6:	d82b      	bhi.n	8002330 <HAL_TIM_PeriodElapsedCallback+0xfc>
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d041      	beq.n	8002360 <HAL_TIM_PeriodElapsedCallback+0x12c>
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d1b3      	bne.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
	                if ((HAL_GetTick() - debounce_start_time) >= DEBOUNCE_TIME_MS)
 80022e0:	f000 faf6 	bl	80028d0 <HAL_GetTick>
 80022e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002410 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	1ac0      	subs	r0, r0, r3
 80022ea:	23fa      	movs	r3, #250	@ 0xfa
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4298      	cmp	r0, r3
 80022f0:	d3aa      	bcc.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
	                    motion_state = MOTION_RUNNING;
 80022f2:	4b46      	ldr	r3, [pc, #280]	@ (800240c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80022f4:	2202      	movs	r2, #2
 80022f6:	701a      	strb	r2, [r3, #0]
	                    ave_min = 0.0f;
 80022f8:	4b42      	ldr	r3, [pc, #264]	@ (8002404 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
	                    ave_max = 0.0f;
 80022fe:	4b42      	ldr	r3, [pc, #264]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	e7a1      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
	    	    sample_buffer[sample_index++] = sample.y;
 8002304:	ab01      	add	r3, sp, #4
 8002306:	2002      	movs	r0, #2
 8002308:	5e18      	ldrsh	r0, [r3, r0]
 800230a:	4a3c      	ldr	r2, [pc, #240]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800230c:	7815      	ldrb	r5, [r2, #0]
 800230e:	1c6c      	adds	r4, r5, #1
 8002310:	b2e4      	uxtb	r4, r4
 8002312:	7014      	strb	r4, [r2, #0]
 8002314:	4f3a      	ldr	r7, [pc, #232]	@ (8002400 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002316:	00ad      	lsls	r5, r5, #2
 8002318:	f7fe fedc 	bl	80010d4 <__aeabi_i2f>
 800231c:	5178      	str	r0, [r7, r5]
	    	    if (sample_index >= SAMPLE_WINDOW) sample_index = 0;
 800231e:	2c09      	cmp	r4, #9
 8002320:	d902      	bls.n	8002328 <HAL_TIM_PeriodElapsedCallback+0xf4>
 8002322:	4b36      	ldr	r3, [pc, #216]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
	    	    warmup_counter++;
 8002328:	4a33      	ldr	r2, [pc, #204]	@ (80023f8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800232a:	3601      	adds	r6, #1
 800232c:	7016      	strb	r6, [r2, #0]
	    	    return; // jeszcze nie analizujemy ruchu
 800232e:	e78b      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
	        switch (motion_state)
 8002330:	2b03      	cmp	r3, #3
 8002332:	d000      	beq.n	8002336 <HAL_TIM_PeriodElapsedCallback+0x102>
 8002334:	e788      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
	                if ((HAL_GetTick() - debounce_start_time) >= DEBOUNCE_TIME_MS)
 8002336:	f000 facb 	bl	80028d0 <HAL_GetTick>
 800233a:	4b35      	ldr	r3, [pc, #212]	@ (8002410 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	1ac0      	subs	r0, r0, r3
 8002340:	23fa      	movs	r3, #250	@ 0xfa
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4298      	cmp	r0, r3
 8002346:	d200      	bcs.n	800234a <HAL_TIM_PeriodElapsedCallback+0x116>
 8002348:	e77e      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
	                    motion_state = MOTION_IDLE;
 800234a:	4b30      	ldr	r3, [pc, #192]	@ (800240c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
	                    ave_min = 0.0f;
 8002350:	4b2c      	ldr	r3, [pc, #176]	@ (8002404 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002352:	2100      	movs	r1, #0
 8002354:	6019      	str	r1, [r3, #0]
	                    ave_max = 0.0f;
 8002356:	4b2c      	ldr	r3, [pc, #176]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002358:	6019      	str	r1, [r3, #0]
	                    sample_index = 0;
 800235a:	4b28      	ldr	r3, [pc, #160]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	e773      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
	                if (diff >= MOTION_THRESHOLD)
 8002360:	492c      	ldr	r1, [pc, #176]	@ (8002414 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002362:	f7fe f889 	bl	8000478 <__aeabi_fcmpge>
 8002366:	2800      	cmp	r0, #0
 8002368:	d100      	bne.n	800236c <HAL_TIM_PeriodElapsedCallback+0x138>
 800236a:	e76d      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
	                    motion_state = MOTION_DEBOUNCE_START;
 800236c:	4b27      	ldr	r3, [pc, #156]	@ (800240c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
	                    debounce_start_time = HAL_GetTick();
 8002372:	f000 faad 	bl	80028d0 <HAL_GetTick>
 8002376:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002378:	6018      	str	r0, [r3, #0]
	                    motion_time = 0;
 800237a:	4b27      	ldr	r3, [pc, #156]	@ (8002418 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800237c:	2200      	movs	r2, #0
 800237e:	801a      	strh	r2, [r3, #0]
	                    HAL_TIM_Base_Start_IT(&htim16);
 8002380:	4826      	ldr	r0, [pc, #152]	@ (800241c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002382:	f001 fb4d 	bl	8003a20 <HAL_TIM_Base_Start_IT>
 8002386:	e75f      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
	                if (diff >= MOTION_THRESHOLD)
 8002388:	4922      	ldr	r1, [pc, #136]	@ (8002414 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800238a:	f7fe f875 	bl	8000478 <__aeabi_fcmpge>
 800238e:	2800      	cmp	r0, #0
 8002390:	d100      	bne.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x160>
 8002392:	e759      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
	                    motion_state = MOTION_DEBOUNCE_STOP;
 8002394:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002396:	2203      	movs	r2, #3
 8002398:	701a      	strb	r2, [r3, #0]
	                    debounce_start_time = HAL_GetTick();
 800239a:	f000 fa99 	bl	80028d0 <HAL_GetTick>
 800239e:	4b1c      	ldr	r3, [pc, #112]	@ (8002410 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80023a0:	6018      	str	r0, [r3, #0]
	                    HAL_TIM_Base_Stop_IT(&htim16);
 80023a2:	481e      	ldr	r0, [pc, #120]	@ (800241c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80023a4:	f001 fb70 	bl	8003a88 <HAL_TIM_Base_Stop_IT>
	                    Send16BitESP(&huart1, motion_time);
 80023a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80023aa:	8819      	ldrh	r1, [r3, #0]
 80023ac:	b289      	uxth	r1, r1
 80023ae:	481c      	ldr	r0, [pc, #112]	@ (8002420 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80023b0:	f7ff ff28 	bl	8002204 <Send16BitESP>
 80023b4:	e748      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
        motion_time++;
 80023b6:	4a18      	ldr	r2, [pc, #96]	@ (8002418 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80023b8:	8813      	ldrh	r3, [r2, #0]
 80023ba:	3301      	adds	r3, #1
 80023bc:	b29b      	uxth	r3, r3
 80023be:	8013      	strh	r3, [r2, #0]
        tick_counter++;
 80023c0:	4a18      	ldr	r2, [pc, #96]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80023c2:	8813      	ldrh	r3, [r2, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	8013      	strh	r3, [r2, #0]
        if (tick_counter >= 2000)
 80023ca:	22fa      	movs	r2, #250	@ 0xfa
 80023cc:	00d2      	lsls	r2, r2, #3
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d200      	bcs.n	80023d4 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 80023d2:	e739      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
            tick_counter = 0;
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	801a      	strh	r2, [r3, #0]
            flag_2sec = 1;
 80023da:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80023dc:	3201      	adds	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
            send_2sec = motion_time;
 80023e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4a11      	ldr	r2, [pc, #68]	@ (800242c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80023e8:	8013      	strh	r3, [r2, #0]
 80023ea:	e72d      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x14>
 80023ec:	40002000 	.word	0x40002000
 80023f0:	40014400 	.word	0x40014400
 80023f4:	20000000 	.word	0x20000000
 80023f8:	200000ef 	.word	0x200000ef
 80023fc:	20000104 	.word	0x20000104
 8002400:	20000108 	.word	0x20000108
 8002404:	20000100 	.word	0x20000100
 8002408:	200000fc 	.word	0x200000fc
 800240c:	200000ee 	.word	0x200000ee
 8002410:	200000f8 	.word	0x200000f8
 8002414:	437a0000 	.word	0x437a0000
 8002418:	200000f4 	.word	0x200000f4
 800241c:	20000134 	.word	0x20000134
 8002420:	200001cc 	.word	0x200001cc
 8002424:	200000ec 	.word	0x200000ec
 8002428:	200000f2 	.word	0x200000f2
 800242c:	200000f0 	.word	0x200000f0

08002430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002430:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8002432:	2180      	movs	r1, #128	@ 0x80
 8002434:	20a0      	movs	r0, #160	@ 0xa0
 8002436:	2201      	movs	r2, #1
 8002438:	0049      	lsls	r1, r1, #1
 800243a:	05c0      	lsls	r0, r0, #23
 800243c:	f000 fba0 	bl	8002b80 <HAL_GPIO_WritePin>
  while (1)
 8002440:	e7fe      	b.n	8002440 <Error_Handler+0x10>
	...

08002444 <SystemClock_Config>:
{
 8002444:	b500      	push	{lr}
 8002446:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002448:	221c      	movs	r2, #28
 800244a:	2100      	movs	r1, #0
 800244c:	a805      	add	r0, sp, #20
 800244e:	f002 f825 	bl	800449c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002452:	2214      	movs	r2, #20
 8002454:	2100      	movs	r1, #0
 8002456:	4668      	mov	r0, sp
 8002458:	f002 f820 	bl	800449c <memset>
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 800245c:	4a12      	ldr	r2, [pc, #72]	@ (80024a8 <SystemClock_Config+0x64>)
 800245e:	6813      	ldr	r3, [r2, #0]
 8002460:	2107      	movs	r1, #7
 8002462:	438b      	bics	r3, r1
 8002464:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002466:	2302      	movs	r3, #2
 8002468:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800246a:	33fe      	adds	r3, #254	@ 0xfe
 800246c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800246e:	2380      	movs	r3, #128	@ 0x80
 8002470:	015b      	lsls	r3, r3, #5
 8002472:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002474:	2340      	movs	r3, #64	@ 0x40
 8002476:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002478:	a805      	add	r0, sp, #20
 800247a:	f000 ffbb 	bl	80033f4 <HAL_RCC_OscConfig>
 800247e:	2800      	cmp	r0, #0
 8002480:	d10e      	bne.n	80024a0 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002482:	2307      	movs	r3, #7
 8002484:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002486:	2300      	movs	r3, #0
 8002488:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800248a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800248c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800248e:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002490:	2100      	movs	r1, #0
 8002492:	4668      	mov	r0, sp
 8002494:	f001 f93c 	bl	8003710 <HAL_RCC_ClockConfig>
 8002498:	2800      	cmp	r0, #0
 800249a:	d103      	bne.n	80024a4 <SystemClock_Config+0x60>
}
 800249c:	b00d      	add	sp, #52	@ 0x34
 800249e:	bd00      	pop	{pc}
    Error_Handler();
 80024a0:	f7ff ffc6 	bl	8002430 <Error_Handler>
    Error_Handler();
 80024a4:	f7ff ffc4 	bl	8002430 <Error_Handler>
 80024a8:	40022000 	.word	0x40022000

080024ac <main>:
{
 80024ac:	b510      	push	{r4, lr}
  HAL_Init();
 80024ae:	f000 f9f7 	bl	80028a0 <HAL_Init>
  SystemClock_Config();
 80024b2:	f7ff ffc7 	bl	8002444 <SystemClock_Config>
  MX_GPIO_Init();
 80024b6:	f7ff fd8d 	bl	8001fd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80024ba:	f7ff fddb 	bl	8002074 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80024be:	f000 f91f 	bl	8002700 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80024c2:	f000 f8b1 	bl	8002628 <MX_TIM14_Init>
  MX_TIM16_Init();
 80024c6:	f000 f8c7 	bl	8002658 <MX_TIM16_Init>
  bma400_init(&bma400);
 80024ca:	4c1c      	ldr	r4, [pc, #112]	@ (800253c <main+0x90>)
 80024cc:	0020      	movs	r0, r4
 80024ce:	f7ff f9b9 	bl	8001844 <bma400_init>
  configureBMA400(&bma400);
 80024d2:	0020      	movs	r0, r4
 80024d4:	f7ff fe42 	bl	800215c <configureBMA400>
  HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, SET);
 80024d8:	20a0      	movs	r0, #160	@ 0xa0
 80024da:	2201      	movs	r2, #1
 80024dc:	2120      	movs	r1, #32
 80024de:	05c0      	lsls	r0, r0, #23
 80024e0:	f000 fb4e 	bl	8002b80 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80024e4:	2096      	movs	r0, #150	@ 0x96
 80024e6:	0040      	lsls	r0, r0, #1
 80024e8:	f000 f9f8 	bl	80028dc <HAL_Delay>
  Send16BitESP(&huart1, 111);
 80024ec:	4814      	ldr	r0, [pc, #80]	@ (8002540 <main+0x94>)
 80024ee:	216f      	movs	r1, #111	@ 0x6f
 80024f0:	f7ff fe88 	bl	8002204 <Send16BitESP>
  HAL_TIM_Base_Start_IT(&htim14);
 80024f4:	4813      	ldr	r0, [pc, #76]	@ (8002544 <main+0x98>)
 80024f6:	f001 fa93 	bl	8003a20 <HAL_TIM_Base_Start_IT>
  for (int i = 0; i < SAMPLE_WINDOW; i++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	e004      	b.n	8002508 <main+0x5c>
      sample_buffer[i] = 0.0f;
 80024fe:	4a12      	ldr	r2, [pc, #72]	@ (8002548 <main+0x9c>)
 8002500:	0099      	lsls	r1, r3, #2
 8002502:	2000      	movs	r0, #0
 8002504:	5088      	str	r0, [r1, r2]
  for (int i = 0; i < SAMPLE_WINDOW; i++)
 8002506:	3301      	adds	r3, #1
 8002508:	2b09      	cmp	r3, #9
 800250a:	ddf8      	ble.n	80024fe <main+0x52>
  ave_min = 0.0f;
 800250c:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <main+0xa0>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
  ave_max = 0.0f;
 8002512:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <main+0xa4>)
 8002514:	601a      	str	r2, [r3, #0]
  sample_index = 0;
 8002516:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <main+0xa8>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
  motion_state = MOTION_IDLE;
 800251c:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <main+0xac>)
 800251e:	701a      	strb	r2, [r3, #0]
	  if (flag_2sec)
 8002520:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <main+0xb0>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0fb      	beq.n	8002520 <main+0x74>
	      flag_2sec = 0;
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <main+0xb0>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
	      Send16BitESP(&huart1, send_2sec);
 800252e:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <main+0xb4>)
 8002530:	8819      	ldrh	r1, [r3, #0]
 8002532:	b289      	uxth	r1, r1
 8002534:	4802      	ldr	r0, [pc, #8]	@ (8002540 <main+0x94>)
 8002536:	f7ff fe65 	bl	8002204 <Send16BitESP>
 800253a:	e7f1      	b.n	8002520 <main+0x74>
 800253c:	20000000 	.word	0x20000000
 8002540:	200001cc 	.word	0x200001cc
 8002544:	20000180 	.word	0x20000180
 8002548:	20000108 	.word	0x20000108
 800254c:	20000100 	.word	0x20000100
 8002550:	200000fc 	.word	0x200000fc
 8002554:	20000104 	.word	0x20000104
 8002558:	200000ee 	.word	0x200000ee
 800255c:	200000f2 	.word	0x200000f2
 8002560:	200000f0 	.word	0x200000f0

08002564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b500      	push	{lr}
 8002566:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <HAL_MspInit+0x38>)
 800256a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800256c:	2201      	movs	r2, #1
 800256e:	4311      	orrs	r1, r2
 8002570:	6419      	str	r1, [r3, #64]	@ 0x40
 8002572:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002574:	400a      	ands	r2, r1
 8002576:	9200      	str	r2, [sp, #0]
 8002578:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800257c:	2180      	movs	r1, #128	@ 0x80
 800257e:	0549      	lsls	r1, r1, #21
 8002580:	430a      	orrs	r2, r1
 8002582:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002586:	400b      	ands	r3, r1
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 800258c:	2008      	movs	r0, #8
 800258e:	f000 f9b7 	bl	8002900 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8002592:	2010      	movs	r0, #16
 8002594:	f000 f9b4 	bl	8002900 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002598:	b003      	add	sp, #12
 800259a:	bd00      	pop	{pc}
 800259c:	40021000 	.word	0x40021000

080025a0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a0:	e7fe      	b.n	80025a0 <NMI_Handler>

080025a2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a2:	e7fe      	b.n	80025a2 <HardFault_Handler>

080025a4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025a4:	4770      	bx	lr

080025a6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025aa:	f000 f985 	bl	80028b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ae:	bd10      	pop	{r4, pc}

080025b0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80025b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80025b2:	4802      	ldr	r0, [pc, #8]	@ (80025bc <TIM14_IRQHandler+0xc>)
 80025b4:	f001 fa88 	bl	8003ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80025b8:	bd10      	pop	{r4, pc}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	20000180 	.word	0x20000180

080025c0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80025c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80025c2:	4802      	ldr	r0, [pc, #8]	@ (80025cc <TIM16_IRQHandler+0xc>)
 80025c4:	f001 fa80 	bl	8003ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	20000134 	.word	0x20000134

080025d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d0:	b510      	push	{r4, lr}
 80025d2:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002608 <_sbrk+0x38>)
 80025d6:	490d      	ldr	r1, [pc, #52]	@ (800260c <_sbrk+0x3c>)
 80025d8:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025da:	490d      	ldr	r1, [pc, #52]	@ (8002610 <_sbrk+0x40>)
 80025dc:	6809      	ldr	r1, [r1, #0]
 80025de:	2900      	cmp	r1, #0
 80025e0:	d007      	beq.n	80025f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e2:	490b      	ldr	r1, [pc, #44]	@ (8002610 <_sbrk+0x40>)
 80025e4:	6808      	ldr	r0, [r1, #0]
 80025e6:	18c3      	adds	r3, r0, r3
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d806      	bhi.n	80025fa <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80025ec:	4a08      	ldr	r2, [pc, #32]	@ (8002610 <_sbrk+0x40>)
 80025ee:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80025f0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80025f2:	4907      	ldr	r1, [pc, #28]	@ (8002610 <_sbrk+0x40>)
 80025f4:	4807      	ldr	r0, [pc, #28]	@ (8002614 <_sbrk+0x44>)
 80025f6:	6008      	str	r0, [r1, #0]
 80025f8:	e7f3      	b.n	80025e2 <_sbrk+0x12>
    errno = ENOMEM;
 80025fa:	f001 ff57 	bl	80044ac <__errno>
 80025fe:	230c      	movs	r3, #12
 8002600:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002602:	2001      	movs	r0, #1
 8002604:	4240      	negs	r0, r0
 8002606:	e7f3      	b.n	80025f0 <_sbrk+0x20>
 8002608:	20001800 	.word	0x20001800
 800260c:	00000400 	.word	0x00000400
 8002610:	20000130 	.word	0x20000130
 8002614:	200003b0 	.word	0x200003b0

08002618 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002618:	4b02      	ldr	r3, [pc, #8]	@ (8002624 <SystemInit+0xc>)
 800261a:	2280      	movs	r2, #128	@ 0x80
 800261c:	0512      	lsls	r2, r2, #20
 800261e:	609a      	str	r2, [r3, #8]
#endif
}
 8002620:	4770      	bx	lr
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <MX_TIM14_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002628:	b510      	push	{r4, lr}
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800262a:	4809      	ldr	r0, [pc, #36]	@ (8002650 <MX_TIM14_Init+0x28>)
 800262c:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <MX_TIM14_Init+0x2c>)
 800262e:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 119;
 8002630:	2377      	movs	r3, #119	@ 0x77
 8002632:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002634:	2300      	movs	r3, #0
 8002636:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 124;
 8002638:	227c      	movs	r2, #124	@ 0x7c
 800263a:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263c:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002640:	f001 fb38 	bl	8003cb4 <HAL_TIM_Base_Init>
 8002644:	2800      	cmp	r0, #0
 8002646:	d100      	bne.n	800264a <MX_TIM14_Init+0x22>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002648:	bd10      	pop	{r4, pc}
    Error_Handler();
 800264a:	f7ff fef1 	bl	8002430 <Error_Handler>
}
 800264e:	e7fb      	b.n	8002648 <MX_TIM14_Init+0x20>
 8002650:	20000180 	.word	0x20000180
 8002654:	40002000 	.word	0x40002000

08002658 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002658:	b510      	push	{r4, lr}
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800265a:	480a      	ldr	r0, [pc, #40]	@ (8002684 <MX_TIM16_Init+0x2c>)
 800265c:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <MX_TIM16_Init+0x30>)
 800265e:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 1199;
 8002660:	4b0a      	ldr	r3, [pc, #40]	@ (800268c <MX_TIM16_Init+0x34>)
 8002662:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002664:	2300      	movs	r3, #0
 8002666:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 9;
 8002668:	2209      	movs	r2, #9
 800266a:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266c:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 800266e:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002670:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002672:	f001 fb1f 	bl	8003cb4 <HAL_TIM_Base_Init>
 8002676:	2800      	cmp	r0, #0
 8002678:	d100      	bne.n	800267c <MX_TIM16_Init+0x24>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800267a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800267c:	f7ff fed8 	bl	8002430 <Error_Handler>
}
 8002680:	e7fb      	b.n	800267a <MX_TIM16_Init+0x22>
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	20000134 	.word	0x20000134
 8002688:	40014400 	.word	0x40014400
 800268c:	000004af 	.word	0x000004af

08002690 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002690:	b500      	push	{lr}
 8002692:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM14)
 8002694:	6803      	ldr	r3, [r0, #0]
 8002696:	4a17      	ldr	r2, [pc, #92]	@ (80026f4 <HAL_TIM_Base_MspInit+0x64>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d004      	beq.n	80026a6 <HAL_TIM_Base_MspInit+0x16>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM16)
 800269c:	4a16      	ldr	r2, [pc, #88]	@ (80026f8 <HAL_TIM_Base_MspInit+0x68>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d014      	beq.n	80026cc <HAL_TIM_Base_MspInit+0x3c>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80026a2:	b003      	add	sp, #12
 80026a4:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 80026a6:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <HAL_TIM_Base_MspInit+0x6c>)
 80026a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026aa:	2180      	movs	r1, #128	@ 0x80
 80026ac:	0209      	lsls	r1, r1, #8
 80026ae:	430a      	orrs	r2, r1
 80026b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	400b      	ands	r3, r1
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	2013      	movs	r0, #19
 80026c0:	f000 f972 	bl	80029a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80026c4:	2013      	movs	r0, #19
 80026c6:	f000 f973 	bl	80029b0 <HAL_NVIC_EnableIRQ>
 80026ca:	e7ea      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026cc:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <HAL_TIM_Base_MspInit+0x6c>)
 80026ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026d0:	2180      	movs	r1, #128	@ 0x80
 80026d2:	0289      	lsls	r1, r1, #10
 80026d4:	430a      	orrs	r2, r1
 80026d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	400b      	ands	r3, r1
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 80026e0:	2200      	movs	r2, #0
 80026e2:	2101      	movs	r1, #1
 80026e4:	2015      	movs	r0, #21
 80026e6:	f000 f95f 	bl	80029a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80026ea:	2015      	movs	r0, #21
 80026ec:	f000 f960 	bl	80029b0 <HAL_NVIC_EnableIRQ>
}
 80026f0:	e7d7      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x12>
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	40002000 	.word	0x40002000
 80026f8:	40014400 	.word	0x40014400
 80026fc:	40021000 	.word	0x40021000

08002700 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002700:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002702:	4819      	ldr	r0, [pc, #100]	@ (8002768 <MX_USART1_UART_Init+0x68>)
 8002704:	4b19      	ldr	r3, [pc, #100]	@ (800276c <MX_USART1_UART_Init+0x6c>)
 8002706:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002708:	23e1      	movs	r3, #225	@ 0xe1
 800270a:	025b      	lsls	r3, r3, #9
 800270c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	2300      	movs	r3, #0
 8002710:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002712:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002714:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002716:	220c      	movs	r2, #12
 8002718:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800271c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800271e:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002720:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002722:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002724:	f001 fdb6 	bl	8004294 <HAL_UART_Init>
 8002728:	2800      	cmp	r0, #0
 800272a:	d111      	bne.n	8002750 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800272c:	480e      	ldr	r0, [pc, #56]	@ (8002768 <MX_USART1_UART_Init+0x68>)
 800272e:	2100      	movs	r1, #0
 8002730:	f001 fe30 	bl	8004394 <HAL_UARTEx_SetTxFifoThreshold>
 8002734:	2800      	cmp	r0, #0
 8002736:	d10e      	bne.n	8002756 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002738:	480b      	ldr	r0, [pc, #44]	@ (8002768 <MX_USART1_UART_Init+0x68>)
 800273a:	2100      	movs	r1, #0
 800273c:	f001 fe50 	bl	80043e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002740:	2800      	cmp	r0, #0
 8002742:	d10b      	bne.n	800275c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002744:	4808      	ldr	r0, [pc, #32]	@ (8002768 <MX_USART1_UART_Init+0x68>)
 8002746:	f001 fe05 	bl	8004354 <HAL_UARTEx_DisableFifoMode>
 800274a:	2800      	cmp	r0, #0
 800274c:	d109      	bne.n	8002762 <MX_USART1_UART_Init+0x62>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800274e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002750:	f7ff fe6e 	bl	8002430 <Error_Handler>
 8002754:	e7ea      	b.n	800272c <MX_USART1_UART_Init+0x2c>
    Error_Handler();
 8002756:	f7ff fe6b 	bl	8002430 <Error_Handler>
 800275a:	e7ed      	b.n	8002738 <MX_USART1_UART_Init+0x38>
    Error_Handler();
 800275c:	f7ff fe68 	bl	8002430 <Error_Handler>
 8002760:	e7f0      	b.n	8002744 <MX_USART1_UART_Init+0x44>
    Error_Handler();
 8002762:	f7ff fe65 	bl	8002430 <Error_Handler>
}
 8002766:	e7f2      	b.n	800274e <MX_USART1_UART_Init+0x4e>
 8002768:	200001cc 	.word	0x200001cc
 800276c:	40013800 	.word	0x40013800

08002770 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002770:	b510      	push	{r4, lr}
 8002772:	b08e      	sub	sp, #56	@ 0x38
 8002774:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002776:	2214      	movs	r2, #20
 8002778:	2100      	movs	r1, #0
 800277a:	a809      	add	r0, sp, #36	@ 0x24
 800277c:	f001 fe8e 	bl	800449c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002780:	221c      	movs	r2, #28
 8002782:	2100      	movs	r1, #0
 8002784:	a802      	add	r0, sp, #8
 8002786:	f001 fe89 	bl	800449c <memset>
  if(uartHandle->Instance==USART1)
 800278a:	6822      	ldr	r2, [r4, #0]
 800278c:	4b17      	ldr	r3, [pc, #92]	@ (80027ec <HAL_UART_MspInit+0x7c>)
 800278e:	429a      	cmp	r2, r3
 8002790:	d001      	beq.n	8002796 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002792:	b00e      	add	sp, #56	@ 0x38
 8002794:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002796:	2301      	movs	r3, #1
 8002798:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800279a:	a802      	add	r0, sp, #8
 800279c:	f001 f8a6 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 80027a0:	2800      	cmp	r0, #0
 80027a2:	d120      	bne.n	80027e6 <HAL_UART_MspInit+0x76>
    __HAL_RCC_USART1_CLK_ENABLE();
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <HAL_UART_MspInit+0x80>)
 80027a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027a8:	2180      	movs	r1, #128	@ 0x80
 80027aa:	01c9      	lsls	r1, r1, #7
 80027ac:	430a      	orrs	r2, r1
 80027ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80027b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027b2:	400a      	ands	r2, r1
 80027b4:	9200      	str	r2, [sp, #0]
 80027b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ba:	2201      	movs	r2, #1
 80027bc:	4311      	orrs	r1, r2
 80027be:	6359      	str	r1, [r3, #52]	@ 0x34
 80027c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c2:	4013      	ands	r3, r2
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027c8:	23c0      	movs	r3, #192	@ 0xc0
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80027d8:	920d      	str	r2, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	20a0      	movs	r0, #160	@ 0xa0
 80027dc:	a909      	add	r1, sp, #36	@ 0x24
 80027de:	05c0      	lsls	r0, r0, #23
 80027e0:	f000 f8f6 	bl	80029d0 <HAL_GPIO_Init>
}
 80027e4:	e7d5      	b.n	8002792 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80027e6:	f7ff fe23 	bl	8002430 <Error_Handler>
 80027ea:	e7db      	b.n	80027a4 <HAL_UART_MspInit+0x34>
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40021000 	.word	0x40021000

080027f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027f4:	480d      	ldr	r0, [pc, #52]	@ (800282c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027f8:	f7ff ff0e 	bl	8002618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027fe:	e003      	b.n	8002808 <LoopCopyDataInit>

08002800 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002802:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002804:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002806:	3104      	adds	r1, #4

08002808 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002808:	480a      	ldr	r0, [pc, #40]	@ (8002834 <LoopForever+0xa>)
  ldr r3, =_edata
 800280a:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <LoopForever+0xe>)
  adds r2, r0, r1
 800280c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800280e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002810:	d3f6      	bcc.n	8002800 <CopyDataInit>
  ldr r2, =_sbss
 8002812:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <LoopForever+0x12>)
  b LoopFillZerobss
 8002814:	e002      	b.n	800281c <LoopFillZerobss>

08002816 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  str  r3, [r2]
 8002818:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800281a:	3204      	adds	r2, #4

0800281c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800281c:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <LoopForever+0x16>)
  cmp r2, r3
 800281e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002820:	d3f9      	bcc.n	8002816 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002822:	f001 fe49 	bl	80044b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002826:	f7ff fe41 	bl	80024ac <main>

0800282a <LoopForever>:

LoopForever:
    b LoopForever
 800282a:	e7fe      	b.n	800282a <LoopForever>
  ldr   r0, =_estack
 800282c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8002830:	08004f38 	.word	0x08004f38
  ldr r0, =_sdata
 8002834:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002838:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 800283c:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8002840:	200003ac 	.word	0x200003ac

08002844 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <ADC1_IRQHandler>
	...

08002848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002848:	b510      	push	{r4, lr}
 800284a:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 800284c:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <HAL_InitTick+0x4c>)
 800284e:	7819      	ldrb	r1, [r3, #0]
 8002850:	2900      	cmp	r1, #0
 8002852:	d101      	bne.n	8002858 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002854:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002856:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002858:	20fa      	movs	r0, #250	@ 0xfa
 800285a:	0080      	lsls	r0, r0, #2
 800285c:	f7fd fc66 	bl	800012c <__udivsi3>
 8002860:	0001      	movs	r1, r0
 8002862:	4b0d      	ldr	r3, [pc, #52]	@ (8002898 <HAL_InitTick+0x50>)
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	f7fd fc61 	bl	800012c <__udivsi3>
 800286a:	f000 f8ad 	bl	80029c8 <HAL_SYSTICK_Config>
 800286e:	2800      	cmp	r0, #0
 8002870:	d10d      	bne.n	800288e <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002872:	2c03      	cmp	r4, #3
 8002874:	d901      	bls.n	800287a <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8002876:	2001      	movs	r0, #1
 8002878:	e7ed      	b.n	8002856 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800287a:	3001      	adds	r0, #1
 800287c:	2200      	movs	r2, #0
 800287e:	0021      	movs	r1, r4
 8002880:	4240      	negs	r0, r0
 8002882:	f000 f891 	bl	80029a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002886:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_InitTick+0x54>)
 8002888:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800288a:	2000      	movs	r0, #0
 800288c:	e7e3      	b.n	8002856 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 800288e:	2001      	movs	r0, #1
 8002890:	e7e1      	b.n	8002856 <HAL_InitTick+0xe>
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	20000024 	.word	0x20000024
 8002898:	20000020 	.word	0x20000020
 800289c:	20000028 	.word	0x20000028

080028a0 <HAL_Init>:
{
 80028a0:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028a2:	2003      	movs	r0, #3
 80028a4:	f7ff ffd0 	bl	8002848 <HAL_InitTick>
 80028a8:	1e04      	subs	r4, r0, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_Init+0x12>
    status = HAL_ERROR;
 80028ac:	2401      	movs	r4, #1
}
 80028ae:	0020      	movs	r0, r4
 80028b0:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80028b2:	f7ff fe57 	bl	8002564 <HAL_MspInit>
 80028b6:	e7fa      	b.n	80028ae <HAL_Init+0xe>

080028b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80028b8:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <HAL_IncTick+0x10>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4a03      	ldr	r2, [pc, #12]	@ (80028cc <HAL_IncTick+0x14>)
 80028be:	6811      	ldr	r1, [r2, #0]
 80028c0:	185b      	adds	r3, r3, r1
 80028c2:	6013      	str	r3, [r2, #0]
}
 80028c4:	4770      	bx	lr
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	20000024 	.word	0x20000024
 80028cc:	20000260 	.word	0x20000260

080028d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80028d0:	4b01      	ldr	r3, [pc, #4]	@ (80028d8 <HAL_GetTick+0x8>)
 80028d2:	6818      	ldr	r0, [r3, #0]
}
 80028d4:	4770      	bx	lr
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	20000260 	.word	0x20000260

080028dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff fff6 	bl	80028d0 <HAL_GetTick>
 80028e4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	1c63      	adds	r3, r4, #1
 80028e8:	d002      	beq.n	80028f0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ea:	4b04      	ldr	r3, [pc, #16]	@ (80028fc <HAL_Delay+0x20>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028f0:	f7ff ffee 	bl	80028d0 <HAL_GetTick>
 80028f4:	1b40      	subs	r0, r0, r5
 80028f6:	42a0      	cmp	r0, r4
 80028f8:	d3fa      	bcc.n	80028f0 <HAL_Delay+0x14>
  {
  }
}
 80028fa:	bd70      	pop	{r4, r5, r6, pc}
 80028fc:	20000024 	.word	0x20000024

08002900 <HAL_SYSCFG_EnableRemap>:
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8002900:	4a02      	ldr	r2, [pc, #8]	@ (800290c <HAL_SYSCFG_EnableRemap+0xc>)
 8002902:	6813      	ldr	r3, [r2, #0]
 8002904:	4303      	orrs	r3, r0
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	4770      	bx	lr
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	40010000 	.word	0x40010000

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8002912:	2800      	cmp	r0, #0
 8002914:	db11      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002916:	0883      	lsrs	r3, r0, #2
 8002918:	4d13      	ldr	r5, [pc, #76]	@ (8002968 <__NVIC_SetPriority+0x58>)
 800291a:	33c0      	adds	r3, #192	@ 0xc0
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	595c      	ldr	r4, [r3, r5]
 8002920:	2203      	movs	r2, #3
 8002922:	4010      	ands	r0, r2
 8002924:	00c0      	lsls	r0, r0, #3
 8002926:	32fc      	adds	r2, #252	@ 0xfc
 8002928:	0016      	movs	r6, r2
 800292a:	4086      	lsls	r6, r0
 800292c:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800292e:	0189      	lsls	r1, r1, #6
 8002930:	400a      	ands	r2, r1
 8002932:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002934:	4322      	orrs	r2, r4
 8002936:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002938:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800293a:	230f      	movs	r3, #15
 800293c:	4003      	ands	r3, r0
 800293e:	3b08      	subs	r3, #8
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	3306      	adds	r3, #6
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4a09      	ldr	r2, [pc, #36]	@ (800296c <__NVIC_SetPriority+0x5c>)
 8002948:	4694      	mov	ip, r2
 800294a:	4463      	add	r3, ip
 800294c:	685c      	ldr	r4, [r3, #4]
 800294e:	2203      	movs	r2, #3
 8002950:	4010      	ands	r0, r2
 8002952:	00c0      	lsls	r0, r0, #3
 8002954:	32fc      	adds	r2, #252	@ 0xfc
 8002956:	0015      	movs	r5, r2
 8002958:	4085      	lsls	r5, r0
 800295a:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800295c:	0189      	lsls	r1, r1, #6
 800295e:	400a      	ands	r2, r1
 8002960:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002962:	4322      	orrs	r2, r4
 8002964:	605a      	str	r2, [r3, #4]
}
 8002966:	e7e7      	b.n	8002938 <__NVIC_SetPriority+0x28>
 8002968:	e000e100 	.word	0xe000e100
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002970:	3801      	subs	r0, #1
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	045b      	lsls	r3, r3, #17
 8002976:	4298      	cmp	r0, r3
 8002978:	d20f      	bcs.n	800299a <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <SysTick_Config+0x30>)
 800297c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800297e:	4809      	ldr	r0, [pc, #36]	@ (80029a4 <SysTick_Config+0x34>)
 8002980:	6a03      	ldr	r3, [r0, #32]
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	21c0      	movs	r1, #192	@ 0xc0
 8002988:	0609      	lsls	r1, r1, #24
 800298a:	430b      	orrs	r3, r1
 800298c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800298e:	2300      	movs	r3, #0
 8002990:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002992:	3307      	adds	r3, #7
 8002994:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002996:	2000      	movs	r0, #0
}
 8002998:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800299a:	2001      	movs	r0, #1
 800299c:	e7fc      	b.n	8002998 <SysTick_Config+0x28>
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	e000e010 	.word	0xe000e010
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a8:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80029aa:	f7ff ffb1 	bl	8002910 <__NVIC_SetPriority>
}
 80029ae:	bd10      	pop	{r4, pc}

080029b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80029b0:	2800      	cmp	r0, #0
 80029b2:	db05      	blt.n	80029c0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b4:	221f      	movs	r2, #31
 80029b6:	4002      	ands	r2, r0
 80029b8:	2301      	movs	r3, #1
 80029ba:	4093      	lsls	r3, r2
 80029bc:	4a01      	ldr	r2, [pc, #4]	@ (80029c4 <HAL_NVIC_EnableIRQ+0x14>)
 80029be:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80029c0:	4770      	bx	lr
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	e000e100 	.word	0xe000e100

080029c8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029c8:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 80029ca:	f7ff ffd1 	bl	8002970 <SysTick_Config>
}
 80029ce:	bd10      	pop	{r4, pc}

080029d0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80029d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d2:	46d6      	mov	lr, sl
 80029d4:	464f      	mov	r7, r9
 80029d6:	4646      	mov	r6, r8
 80029d8:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80029da:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80029dc:	e03b      	b.n	8002a56 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80029de:	2505      	movs	r5, #5
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x14>
 80029e2:	2500      	movs	r5, #0
 80029e4:	40a5      	lsls	r5, r4
 80029e6:	002c      	movs	r4, r5
 80029e8:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 80029ea:	4d61      	ldr	r5, [pc, #388]	@ (8002b70 <HAL_GPIO_Init+0x1a0>)
 80029ec:	3218      	adds	r2, #24
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80029f2:	2280      	movs	r2, #128	@ 0x80
 80029f4:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 80029f6:	464a      	mov	r2, r9
 80029f8:	43d2      	mvns	r2, r2
 80029fa:	003d      	movs	r5, r7
 80029fc:	464c      	mov	r4, r9
 80029fe:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a00:	684c      	ldr	r4, [r1, #4]
 8002a02:	03e4      	lsls	r4, r4, #15
 8002a04:	d502      	bpl.n	8002a0c <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8002a06:	003d      	movs	r5, r7
 8002a08:	464c      	mov	r4, r9
 8002a0a:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8002a0c:	4c58      	ldr	r4, [pc, #352]	@ (8002b70 <HAL_GPIO_Init+0x1a0>)
 8002a0e:	2780      	movs	r7, #128	@ 0x80
 8002a10:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 8002a12:	2584      	movs	r5, #132	@ 0x84
 8002a14:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8002a16:	003d      	movs	r5, r7
 8002a18:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a1a:	684c      	ldr	r4, [r1, #4]
 8002a1c:	03a4      	lsls	r4, r4, #14
 8002a1e:	d502      	bpl.n	8002a26 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8002a20:	003d      	movs	r5, r7
 8002a22:	464c      	mov	r4, r9
 8002a24:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8002a26:	4c52      	ldr	r4, [pc, #328]	@ (8002b70 <HAL_GPIO_Init+0x1a0>)
 8002a28:	2784      	movs	r7, #132	@ 0x84
 8002a2a:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002a2c:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 8002a2e:	003d      	movs	r5, r7
 8002a30:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a32:	684c      	ldr	r4, [r1, #4]
 8002a34:	02e4      	lsls	r4, r4, #11
 8002a36:	d502      	bpl.n	8002a3e <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8002a38:	003d      	movs	r5, r7
 8002a3a:	464c      	mov	r4, r9
 8002a3c:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 8002a3e:	4c4c      	ldr	r4, [pc, #304]	@ (8002b70 <HAL_GPIO_Init+0x1a0>)
 8002a40:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 8002a42:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8002a44:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a46:	684c      	ldr	r4, [r1, #4]
 8002a48:	02a4      	lsls	r4, r4, #10
 8002a4a:	d501      	bpl.n	8002a50 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8002a4c:	464a      	mov	r2, r9
 8002a4e:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 8002a50:	4c47      	ldr	r4, [pc, #284]	@ (8002b70 <HAL_GPIO_Init+0x1a0>)
 8002a52:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8002a54:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a56:	680c      	ldr	r4, [r1, #0]
 8002a58:	0022      	movs	r2, r4
 8002a5a:	40da      	lsrs	r2, r3
 8002a5c:	d100      	bne.n	8002a60 <HAL_GPIO_Init+0x90>
 8002a5e:	e081      	b.n	8002b64 <HAL_GPIO_Init+0x194>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002a60:	2201      	movs	r2, #1
 8002a62:	409a      	lsls	r2, r3
 8002a64:	0026      	movs	r6, r4
 8002a66:	4016      	ands	r6, r2
 8002a68:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8002a6a:	4214      	tst	r4, r2
 8002a6c:	d0f2      	beq.n	8002a54 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a6e:	684c      	ldr	r4, [r1, #4]
 8002a70:	2c02      	cmp	r4, #2
 8002a72:	d001      	beq.n	8002a78 <HAL_GPIO_Init+0xa8>
 8002a74:	2c12      	cmp	r4, #18
 8002a76:	d118      	bne.n	8002aaa <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8002a78:	08dd      	lsrs	r5, r3, #3
 8002a7a:	3508      	adds	r5, #8
 8002a7c:	00ad      	lsls	r5, r5, #2
 8002a7e:	582c      	ldr	r4, [r5, r0]
 8002a80:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002a82:	2707      	movs	r7, #7
 8002a84:	401f      	ands	r7, r3
 8002a86:	00bf      	lsls	r7, r7, #2
 8002a88:	240f      	movs	r4, #15
 8002a8a:	46a2      	mov	sl, r4
 8002a8c:	0026      	movs	r6, r4
 8002a8e:	40be      	lsls	r6, r7
 8002a90:	46b0      	mov	r8, r6
 8002a92:	4666      	mov	r6, ip
 8002a94:	4644      	mov	r4, r8
 8002a96:	43a6      	bics	r6, r4
 8002a98:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002a9a:	690c      	ldr	r4, [r1, #16]
 8002a9c:	4656      	mov	r6, sl
 8002a9e:	4026      	ands	r6, r4
 8002aa0:	0034      	movs	r4, r6
 8002aa2:	40bc      	lsls	r4, r7
 8002aa4:	4666      	mov	r6, ip
 8002aa6:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8002aa8:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8002aaa:	6804      	ldr	r4, [r0, #0]
 8002aac:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002aae:	005d      	lsls	r5, r3, #1
 8002ab0:	2403      	movs	r4, #3
 8002ab2:	46a2      	mov	sl, r4
 8002ab4:	0027      	movs	r7, r4
 8002ab6:	40af      	lsls	r7, r5
 8002ab8:	46b8      	mov	r8, r7
 8002aba:	43ff      	mvns	r7, r7
 8002abc:	4666      	mov	r6, ip
 8002abe:	4644      	mov	r4, r8
 8002ac0:	43a6      	bics	r6, r4
 8002ac2:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002ac4:	684c      	ldr	r4, [r1, #4]
 8002ac6:	4656      	mov	r6, sl
 8002ac8:	4026      	ands	r6, r4
 8002aca:	0034      	movs	r4, r6
 8002acc:	40ac      	lsls	r4, r5
 8002ace:	4666      	mov	r6, ip
 8002ad0:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8002ad2:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad4:	684c      	ldr	r4, [r1, #4]
 8002ad6:	1e66      	subs	r6, r4, #1
 8002ad8:	2e01      	cmp	r6, #1
 8002ada:	d903      	bls.n	8002ae4 <HAL_GPIO_Init+0x114>
 8002adc:	2c11      	cmp	r4, #17
 8002ade:	d001      	beq.n	8002ae4 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ae0:	2c12      	cmp	r4, #18
 8002ae2:	d112      	bne.n	8002b0a <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8002ae4:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ae6:	403c      	ands	r4, r7
 8002ae8:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002aea:	68cc      	ldr	r4, [r1, #12]
 8002aec:	40ac      	lsls	r4, r5
 8002aee:	4666      	mov	r6, ip
 8002af0:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8002af2:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8002af4:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002af6:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002af8:	684a      	ldr	r2, [r1, #4]
 8002afa:	0912      	lsrs	r2, r2, #4
 8002afc:	4694      	mov	ip, r2
 8002afe:	2201      	movs	r2, #1
 8002b00:	4666      	mov	r6, ip
 8002b02:	4032      	ands	r2, r6
 8002b04:	409a      	lsls	r2, r3
 8002b06:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8002b08:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002b0a:	684a      	ldr	r2, [r1, #4]
 8002b0c:	2a03      	cmp	r2, #3
 8002b0e:	d005      	beq.n	8002b1c <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8002b10:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b12:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b14:	688a      	ldr	r2, [r1, #8]
 8002b16:	40aa      	lsls	r2, r5
 8002b18:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 8002b1a:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b1c:	684a      	ldr	r2, [r1, #4]
 8002b1e:	00d2      	lsls	r2, r2, #3
 8002b20:	d598      	bpl.n	8002a54 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8002b22:	089a      	lsrs	r2, r3, #2
 8002b24:	0014      	movs	r4, r2
 8002b26:	3418      	adds	r4, #24
 8002b28:	00a4      	lsls	r4, r4, #2
 8002b2a:	4d11      	ldr	r5, [pc, #68]	@ (8002b70 <HAL_GPIO_Init+0x1a0>)
 8002b2c:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b2e:	2403      	movs	r4, #3
 8002b30:	401c      	ands	r4, r3
 8002b32:	00e4      	lsls	r4, r4, #3
 8002b34:	250f      	movs	r5, #15
 8002b36:	40a5      	lsls	r5, r4
 8002b38:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b3a:	25a0      	movs	r5, #160	@ 0xa0
 8002b3c:	05ed      	lsls	r5, r5, #23
 8002b3e:	42a8      	cmp	r0, r5
 8002b40:	d100      	bne.n	8002b44 <HAL_GPIO_Init+0x174>
 8002b42:	e74e      	b.n	80029e2 <HAL_GPIO_Init+0x12>
 8002b44:	4d0b      	ldr	r5, [pc, #44]	@ (8002b74 <HAL_GPIO_Init+0x1a4>)
 8002b46:	42a8      	cmp	r0, r5
 8002b48:	d008      	beq.n	8002b5c <HAL_GPIO_Init+0x18c>
 8002b4a:	4d0b      	ldr	r5, [pc, #44]	@ (8002b78 <HAL_GPIO_Init+0x1a8>)
 8002b4c:	42a8      	cmp	r0, r5
 8002b4e:	d007      	beq.n	8002b60 <HAL_GPIO_Init+0x190>
 8002b50:	4d0a      	ldr	r5, [pc, #40]	@ (8002b7c <HAL_GPIO_Init+0x1ac>)
 8002b52:	42a8      	cmp	r0, r5
 8002b54:	d100      	bne.n	8002b58 <HAL_GPIO_Init+0x188>
 8002b56:	e742      	b.n	80029de <HAL_GPIO_Init+0xe>
 8002b58:	2506      	movs	r5, #6
 8002b5a:	e743      	b.n	80029e4 <HAL_GPIO_Init+0x14>
 8002b5c:	2501      	movs	r5, #1
 8002b5e:	e741      	b.n	80029e4 <HAL_GPIO_Init+0x14>
 8002b60:	2502      	movs	r5, #2
 8002b62:	e73f      	b.n	80029e4 <HAL_GPIO_Init+0x14>
  }
}
 8002b64:	bce0      	pop	{r5, r6, r7}
 8002b66:	46ba      	mov	sl, r7
 8002b68:	46b1      	mov	r9, r6
 8002b6a:	46a8      	mov	r8, r5
 8002b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	40021800 	.word	0x40021800
 8002b74:	50000400 	.word	0x50000400
 8002b78:	50000800 	.word	0x50000800
 8002b7c:	50001400 	.word	0x50001400

08002b80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b80:	2a00      	cmp	r2, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b84:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b86:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b88:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8002b8a:	e7fc      	b.n	8002b86 <HAL_GPIO_WritePin+0x6>

08002b8c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b8c:	6802      	ldr	r2, [r0, #0]
 8002b8e:	6993      	ldr	r3, [r2, #24]
 8002b90:	079b      	lsls	r3, r3, #30
 8002b92:	d501      	bpl.n	8002b98 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b98:	6803      	ldr	r3, [r0, #0]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	07d2      	lsls	r2, r2, #31
 8002b9e:	d403      	bmi.n	8002ba8 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	619a      	str	r2, [r3, #24]
  }
}
 8002ba8:	4770      	bx	lr
	...

08002bac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bac:	b510      	push	{r4, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bae:	0589      	lsls	r1, r1, #22
 8002bb0:	0d89      	lsrs	r1, r1, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bb2:	0412      	lsls	r2, r2, #16
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bb4:	4311      	orrs	r1, r2
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bb6:	4319      	orrs	r1, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bb8:	9b02      	ldr	r3, [sp, #8]
 8002bba:	4319      	orrs	r1, r3
 8002bbc:	0049      	lsls	r1, r1, #1
 8002bbe:	0849      	lsrs	r1, r1, #1
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bc0:	6804      	ldr	r4, [r0, #0]
 8002bc2:	6862      	ldr	r2, [r4, #4]
 8002bc4:	0d5b      	lsrs	r3, r3, #21
 8002bc6:	2080      	movs	r0, #128	@ 0x80
 8002bc8:	00c0      	lsls	r0, r0, #3
 8002bca:	4003      	ands	r3, r0
 8002bcc:	4803      	ldr	r0, [pc, #12]	@ (8002bdc <I2C_TransferConfig+0x30>)
 8002bce:	4303      	orrs	r3, r0
 8002bd0:	439a      	bics	r2, r3
 8002bd2:	0013      	movs	r3, r2
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002bd8:	bd10      	pop	{r4, pc}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	03ff63ff 	.word	0x03ff63ff

08002be0 <I2C_IsErrorOccurred>:
{
 8002be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be2:	46c6      	mov	lr, r8
 8002be4:	b500      	push	{lr}
 8002be6:	0004      	movs	r4, r0
 8002be8:	000d      	movs	r5, r1
 8002bea:	0017      	movs	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bec:	6801      	ldr	r1, [r0, #0]
 8002bee:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	0016      	movs	r6, r2
 8002bf4:	401e      	ands	r6, r3
 8002bf6:	421a      	tst	r2, r3
 8002bf8:	d100      	bne.n	8002bfc <I2C_IsErrorOccurred+0x1c>
 8002bfa:	e075      	b.n	8002ce8 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	4698      	mov	r8, r3
  HAL_StatusTypeDef status = HAL_OK;
 8002c04:	2600      	movs	r6, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c06:	6820      	ldr	r0, [r4, #0]
 8002c08:	6983      	ldr	r3, [r0, #24]
 8002c0a:	069b      	lsls	r3, r3, #26
 8002c0c:	d431      	bmi.n	8002c72 <I2C_IsErrorOccurred+0x92>
 8002c0e:	2e00      	cmp	r6, #0
 8002c10:	d12f      	bne.n	8002c72 <I2C_IsErrorOccurred+0x92>
      if (Timeout != HAL_MAX_DELAY)
 8002c12:	1c6b      	adds	r3, r5, #1
 8002c14:	d0f7      	beq.n	8002c06 <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c16:	f7ff fe5b 	bl	80028d0 <HAL_GetTick>
 8002c1a:	1bc0      	subs	r0, r0, r7
 8002c1c:	42a8      	cmp	r0, r5
 8002c1e:	d801      	bhi.n	8002c24 <I2C_IsErrorOccurred+0x44>
 8002c20:	2d00      	cmp	r5, #0
 8002c22:	d1f0      	bne.n	8002c06 <I2C_IsErrorOccurred+0x26>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c24:	6821      	ldr	r1, [r4, #0]
 8002c26:	684b      	ldr	r3, [r1, #4]
 8002c28:	2280      	movs	r2, #128	@ 0x80
 8002c2a:	01d2      	lsls	r2, r2, #7
 8002c2c:	4013      	ands	r3, r2
          tmp2 = hi2c->Mode;
 8002c2e:	2242      	movs	r2, #66	@ 0x42
 8002c30:	5ca2      	ldrb	r2, [r4, r2]
 8002c32:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c34:	6988      	ldr	r0, [r1, #24]
 8002c36:	0400      	lsls	r0, r0, #16
 8002c38:	d503      	bpl.n	8002c42 <I2C_IsErrorOccurred+0x62>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 8002c3e:	2a20      	cmp	r2, #32
 8002c40:	d10e      	bne.n	8002c60 <I2C_IsErrorOccurred+0x80>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	069b      	lsls	r3, r3, #26
 8002c48:	d4dd      	bmi.n	8002c06 <I2C_IsErrorOccurred+0x26>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c4a:	f7ff fe41 	bl	80028d0 <HAL_GetTick>
 8002c4e:	1bc0      	subs	r0, r0, r7
 8002c50:	2819      	cmp	r0, #25
 8002c52:	d9f6      	bls.n	8002c42 <I2C_IsErrorOccurred+0x62>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c54:	2320      	movs	r3, #32
 8002c56:	4642      	mov	r2, r8
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	4690      	mov	r8, r2
              status = HAL_ERROR;
 8002c5c:	2601      	movs	r6, #1
              break;
 8002c5e:	e7d2      	b.n	8002c06 <I2C_IsErrorOccurred+0x26>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c60:	684a      	ldr	r2, [r1, #4]
 8002c62:	2380      	movs	r3, #128	@ 0x80
 8002c64:	01db      	lsls	r3, r3, #7
 8002c66:	4313      	orrs	r3, r2
 8002c68:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8002c6a:	f7ff fe31 	bl	80028d0 <HAL_GetTick>
 8002c6e:	0007      	movs	r7, r0
 8002c70:	e7e7      	b.n	8002c42 <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 8002c72:	2e00      	cmp	r6, #0
 8002c74:	d101      	bne.n	8002c7a <I2C_IsErrorOccurred+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c76:	2320      	movs	r3, #32
 8002c78:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002c7a:	2604      	movs	r6, #4
 8002c7c:	4643      	mov	r3, r8
 8002c7e:	4333      	orrs	r3, r6
 8002c80:	001e      	movs	r6, r3
    status = HAL_ERROR;
 8002c82:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8002c84:	6822      	ldr	r2, [r4, #0]
 8002c86:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c88:	05d9      	lsls	r1, r3, #23
 8002c8a:	d504      	bpl.n	8002c96 <I2C_IsErrorOccurred+0xb6>
    error_code |= HAL_I2C_ERROR_BERR;
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c90:	31ff      	adds	r1, #255	@ 0xff
 8002c92:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002c94:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c96:	055a      	lsls	r2, r3, #21
 8002c98:	d506      	bpl.n	8002ca8 <I2C_IsErrorOccurred+0xc8>
    error_code |= HAL_I2C_ERROR_OVR;
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c9e:	6822      	ldr	r2, [r4, #0]
 8002ca0:	2180      	movs	r1, #128	@ 0x80
 8002ca2:	00c9      	lsls	r1, r1, #3
 8002ca4:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002ca6:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ca8:	059b      	lsls	r3, r3, #22
 8002caa:	d51f      	bpl.n	8002cec <I2C_IsErrorOccurred+0x10c>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cac:	2302      	movs	r3, #2
 8002cae:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	2280      	movs	r2, #128	@ 0x80
 8002cb4:	0092      	lsls	r2, r2, #2
 8002cb6:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8002cb8:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8002cba:	0020      	movs	r0, r4
 8002cbc:	f7ff ff66 	bl	8002b8c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002cc0:	6822      	ldr	r2, [r4, #0]
 8002cc2:	6853      	ldr	r3, [r2, #4]
 8002cc4:	490b      	ldr	r1, [pc, #44]	@ (8002cf4 <I2C_IsErrorOccurred+0x114>)
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8002cca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002ccc:	4333      	orrs	r3, r6
 8002cce:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cd0:	2341      	movs	r3, #65	@ 0x41
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	3222      	adds	r2, #34	@ 0x22
 8002cda:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8002cdc:	3a02      	subs	r2, #2
 8002cde:	54a3      	strb	r3, [r4, r2]
}
 8002ce0:	0028      	movs	r0, r5
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	46b8      	mov	r8, r7
 8002ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8002ce8:	2500      	movs	r5, #0
 8002cea:	e7cb      	b.n	8002c84 <I2C_IsErrorOccurred+0xa4>
  if (status != HAL_OK)
 8002cec:	2d00      	cmp	r5, #0
 8002cee:	d0f7      	beq.n	8002ce0 <I2C_IsErrorOccurred+0x100>
 8002cf0:	e7e3      	b.n	8002cba <I2C_IsErrorOccurred+0xda>
 8002cf2:	46c0      	nop			@ (mov r8, r8)
 8002cf4:	fe00e800 	.word	0xfe00e800

08002cf8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	0004      	movs	r4, r0
 8002cfc:	000d      	movs	r5, r1
 8002cfe:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	079b      	lsls	r3, r3, #30
 8002d06:	d420      	bmi.n	8002d4a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d08:	0032      	movs	r2, r6
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	0020      	movs	r0, r4
 8002d0e:	f7ff ff67 	bl	8002be0 <I2C_IsErrorOccurred>
 8002d12:	2800      	cmp	r0, #0
 8002d14:	d11b      	bne.n	8002d4e <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8002d16:	1c6b      	adds	r3, r5, #1
 8002d18:	d0f2      	beq.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1a:	f7ff fdd9 	bl	80028d0 <HAL_GetTick>
 8002d1e:	1b80      	subs	r0, r0, r6
 8002d20:	42a8      	cmp	r0, r5
 8002d22:	d801      	bhi.n	8002d28 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8002d24:	2d00      	cmp	r5, #0
 8002d26:	d1eb      	bne.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	079b      	lsls	r3, r3, #30
 8002d2e:	d4e7      	bmi.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d30:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002d32:	2220      	movs	r2, #32
 8002d34:	4313      	orrs	r3, r2
 8002d36:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	2341      	movs	r3, #65	@ 0x41
 8002d3a:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	3222      	adds	r2, #34	@ 0x22
 8002d40:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8002d42:	3a02      	subs	r2, #2
 8002d44:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8002d46:	2001      	movs	r0, #1
 8002d48:	e000      	b.n	8002d4c <I2C_WaitOnTXISFlagUntilTimeout+0x54>
  return HAL_OK;
 8002d4a:	2000      	movs	r0, #0
}
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002d4e:	2001      	movs	r0, #1
 8002d50:	e7fc      	b.n	8002d4c <I2C_WaitOnTXISFlagUntilTimeout+0x54>

08002d52 <I2C_WaitOnFlagUntilTimeout>:
{
 8002d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d54:	46d6      	mov	lr, sl
 8002d56:	464f      	mov	r7, r9
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	0007      	movs	r7, r0
 8002d5e:	000d      	movs	r5, r1
 8002d60:	0016      	movs	r6, r2
 8002d62:	4699      	mov	r9, r3
 8002d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002d66:	469a      	mov	sl, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	699c      	ldr	r4, [r3, #24]
 8002d6c:	402c      	ands	r4, r5
 8002d6e:	1b64      	subs	r4, r4, r5
 8002d70:	4263      	negs	r3, r4
 8002d72:	415c      	adcs	r4, r3
 8002d74:	9601      	str	r6, [sp, #4]
 8002d76:	42b4      	cmp	r4, r6
 8002d78:	d128      	bne.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x7a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7a:	4652      	mov	r2, sl
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	0038      	movs	r0, r7
 8002d80:	f7ff ff2e 	bl	8002be0 <I2C_IsErrorOccurred>
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d127      	bne.n	8002dd8 <I2C_WaitOnFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 8002d88:	464b      	mov	r3, r9
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	d0ec      	beq.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8e:	f7ff fd9f 	bl	80028d0 <HAL_GetTick>
 8002d92:	4653      	mov	r3, sl
 8002d94:	1ac0      	subs	r0, r0, r3
 8002d96:	4548      	cmp	r0, r9
 8002d98:	d802      	bhi.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0x4e>
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e3      	bne.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	402b      	ands	r3, r5
 8002da6:	1b5b      	subs	r3, r3, r5
 8002da8:	425a      	negs	r2, r3
 8002daa:	4153      	adcs	r3, r2
 8002dac:	9a01      	ldr	r2, [sp, #4]
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d1da      	bne.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002db2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002db4:	2220      	movs	r2, #32
 8002db6:	4313      	orrs	r3, r2
 8002db8:	647b      	str	r3, [r7, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	2341      	movs	r3, #65	@ 0x41
 8002dbc:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	3222      	adds	r2, #34	@ 0x22
 8002dc2:	54bb      	strb	r3, [r7, r2]
          __HAL_UNLOCK(hi2c);
 8002dc4:	3a02      	subs	r2, #2
 8002dc6:	54bb      	strb	r3, [r7, r2]
          return HAL_ERROR;
 8002dc8:	2001      	movs	r0, #1
 8002dca:	e000      	b.n	8002dce <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8002dcc:	2000      	movs	r0, #0
}
 8002dce:	b003      	add	sp, #12
 8002dd0:	bcc0      	pop	{r6, r7}
 8002dd2:	46ba      	mov	sl, r7
 8002dd4:	46b1      	mov	r9, r6
 8002dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8002dd8:	2001      	movs	r0, #1
 8002dda:	e7f8      	b.n	8002dce <I2C_WaitOnFlagUntilTimeout+0x7c>

08002ddc <I2C_RequestMemoryWrite>:
{
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	0004      	movs	r4, r0
 8002de2:	0015      	movs	r5, r2
 8002de4:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002de6:	2380      	movs	r3, #128	@ 0x80
 8002de8:	b2f2      	uxtb	r2, r6
 8002dea:	4819      	ldr	r0, [pc, #100]	@ (8002e50 <I2C_RequestMemoryWrite+0x74>)
 8002dec:	9000      	str	r0, [sp, #0]
 8002dee:	045b      	lsls	r3, r3, #17
 8002df0:	0020      	movs	r0, r4
 8002df2:	f7ff fedb 	bl	8002bac <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df6:	9a07      	ldr	r2, [sp, #28]
 8002df8:	9906      	ldr	r1, [sp, #24]
 8002dfa:	0020      	movs	r0, r4
 8002dfc:	f7ff ff7c 	bl	8002cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d11e      	bne.n	8002e42 <I2C_RequestMemoryWrite+0x66>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e04:	2e01      	cmp	r6, #1
 8002e06:	d10e      	bne.n	8002e26 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	b2ed      	uxtb	r5, r5
 8002e0c:	629d      	str	r5, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0e:	9b07      	ldr	r3, [sp, #28]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	9b06      	ldr	r3, [sp, #24]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2180      	movs	r1, #128	@ 0x80
 8002e18:	0020      	movs	r0, r4
 8002e1a:	f7ff ff9a 	bl	8002d52 <I2C_WaitOnFlagUntilTimeout>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d113      	bne.n	8002e4a <I2C_RequestMemoryWrite+0x6e>
}
 8002e22:	b002      	add	sp, #8
 8002e24:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	0a2a      	lsrs	r2, r5, #8
 8002e2a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2c:	9a07      	ldr	r2, [sp, #28]
 8002e2e:	9906      	ldr	r1, [sp, #24]
 8002e30:	0020      	movs	r0, r4
 8002e32:	f7ff ff61 	bl	8002cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e36:	2800      	cmp	r0, #0
 8002e38:	d105      	bne.n	8002e46 <I2C_RequestMemoryWrite+0x6a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	b2ed      	uxtb	r5, r5
 8002e3e:	629d      	str	r5, [r3, #40]	@ 0x28
 8002e40:	e7e5      	b.n	8002e0e <I2C_RequestMemoryWrite+0x32>
    return HAL_ERROR;
 8002e42:	2001      	movs	r0, #1
 8002e44:	e7ed      	b.n	8002e22 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8002e46:	2001      	movs	r0, #1
 8002e48:	e7eb      	b.n	8002e22 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	e7e9      	b.n	8002e22 <I2C_RequestMemoryWrite+0x46>
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	80002000 	.word	0x80002000

08002e54 <I2C_RequestMemoryRead>:
{
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	0004      	movs	r4, r0
 8002e5a:	0015      	movs	r5, r2
 8002e5c:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	4b18      	ldr	r3, [pc, #96]	@ (8002ec4 <I2C_RequestMemoryRead+0x70>)
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2300      	movs	r3, #0
 8002e66:	f7ff fea1 	bl	8002bac <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6a:	9a07      	ldr	r2, [sp, #28]
 8002e6c:	9906      	ldr	r1, [sp, #24]
 8002e6e:	0020      	movs	r0, r4
 8002e70:	f7ff ff42 	bl	8002cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d11e      	bne.n	8002eb6 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e78:	2e01      	cmp	r6, #1
 8002e7a:	d10e      	bne.n	8002e9a <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	b2ed      	uxtb	r5, r5
 8002e80:	629d      	str	r5, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e82:	9b07      	ldr	r3, [sp, #28]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	9b06      	ldr	r3, [sp, #24]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2140      	movs	r1, #64	@ 0x40
 8002e8c:	0020      	movs	r0, r4
 8002e8e:	f7ff ff60 	bl	8002d52 <I2C_WaitOnFlagUntilTimeout>
 8002e92:	2800      	cmp	r0, #0
 8002e94:	d113      	bne.n	8002ebe <I2C_RequestMemoryRead+0x6a>
}
 8002e96:	b002      	add	sp, #8
 8002e98:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	0a2a      	lsrs	r2, r5, #8
 8002e9e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea0:	9a07      	ldr	r2, [sp, #28]
 8002ea2:	9906      	ldr	r1, [sp, #24]
 8002ea4:	0020      	movs	r0, r4
 8002ea6:	f7ff ff27 	bl	8002cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d105      	bne.n	8002eba <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	b2ed      	uxtb	r5, r5
 8002eb2:	629d      	str	r5, [r3, #40]	@ 0x28
 8002eb4:	e7e5      	b.n	8002e82 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	e7ed      	b.n	8002e96 <I2C_RequestMemoryRead+0x42>
      return HAL_ERROR;
 8002eba:	2001      	movs	r0, #1
 8002ebc:	e7eb      	b.n	8002e96 <I2C_RequestMemoryRead+0x42>
    return HAL_ERROR;
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	e7e9      	b.n	8002e96 <I2C_RequestMemoryRead+0x42>
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	80002000 	.word	0x80002000

08002ec8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	0004      	movs	r4, r0
 8002ecc:	000d      	movs	r5, r1
 8002ece:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed0:	e003      	b.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	069b      	lsls	r3, r3, #26
 8002ed8:	d512      	bpl.n	8002f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	069b      	lsls	r3, r3, #26
 8002ee0:	d41b      	bmi.n	8002f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee2:	0032      	movs	r2, r6
 8002ee4:	0029      	movs	r1, r5
 8002ee6:	0020      	movs	r0, r4
 8002ee8:	f7ff fe7a 	bl	8002be0 <I2C_IsErrorOccurred>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d116      	bne.n	8002f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef0:	f7ff fcee 	bl	80028d0 <HAL_GetTick>
 8002ef4:	1b80      	subs	r0, r0, r6
 8002ef6:	42a8      	cmp	r0, r5
 8002ef8:	d8eb      	bhi.n	8002ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8002efa:	2d00      	cmp	r5, #0
 8002efc:	d1ed      	bne.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
 8002efe:	e7e8      	b.n	8002ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f00:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002f02:	2220      	movs	r2, #32
 8002f04:	4313      	orrs	r3, r2
 8002f06:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	2341      	movs	r3, #65	@ 0x41
 8002f0a:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	3222      	adds	r2, #34	@ 0x22
 8002f10:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8002f12:	3a02      	subs	r2, #2
 8002f14:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8002f16:	2001      	movs	r0, #1
 8002f18:	e000      	b.n	8002f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x54>
  return HAL_OK;
 8002f1a:	2000      	movs	r0, #0
}
 8002f1c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002f1e:	2001      	movs	r0, #1
 8002f20:	e7fc      	b.n	8002f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x54>
	...

08002f24 <HAL_I2C_Init>:
{
 8002f24:	b510      	push	{r4, lr}
 8002f26:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8002f28:	d060      	beq.n	8002fec <HAL_I2C_Init+0xc8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f2a:	2341      	movs	r3, #65	@ 0x41
 8002f2c:	5cc3      	ldrb	r3, [r0, r3]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d048      	beq.n	8002fc4 <HAL_I2C_Init+0xa0>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f32:	2341      	movs	r3, #65	@ 0x41
 8002f34:	2224      	movs	r2, #36	@ 0x24
 8002f36:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8002f38:	6822      	ldr	r2, [r4, #0]
 8002f3a:	6813      	ldr	r3, [r2, #0]
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	438b      	bics	r3, r1
 8002f40:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f42:	6863      	ldr	r3, [r4, #4]
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	492a      	ldr	r1, [pc, #168]	@ (8002ff0 <HAL_I2C_Init+0xcc>)
 8002f48:	400b      	ands	r3, r1
 8002f4a:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f4c:	6822      	ldr	r2, [r4, #0]
 8002f4e:	6893      	ldr	r3, [r2, #8]
 8002f50:	4928      	ldr	r1, [pc, #160]	@ (8002ff4 <HAL_I2C_Init+0xd0>)
 8002f52:	400b      	ands	r3, r1
 8002f54:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f56:	68e3      	ldr	r3, [r4, #12]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d039      	beq.n	8002fd0 <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f5c:	68a1      	ldr	r1, [r4, #8]
 8002f5e:	6822      	ldr	r2, [r4, #0]
 8002f60:	2384      	movs	r3, #132	@ 0x84
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f68:	68e3      	ldr	r3, [r4, #12]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d037      	beq.n	8002fde <HAL_I2C_Init+0xba>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f6e:	6822      	ldr	r2, [r4, #0]
 8002f70:	6853      	ldr	r3, [r2, #4]
 8002f72:	4921      	ldr	r1, [pc, #132]	@ (8002ff8 <HAL_I2C_Init+0xd4>)
 8002f74:	400b      	ands	r3, r1
 8002f76:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f78:	6822      	ldr	r2, [r4, #0]
 8002f7a:	6851      	ldr	r1, [r2, #4]
 8002f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ffc <HAL_I2C_Init+0xd8>)
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f82:	6822      	ldr	r2, [r4, #0]
 8002f84:	68d3      	ldr	r3, [r2, #12]
 8002f86:	491b      	ldr	r1, [pc, #108]	@ (8002ff4 <HAL_I2C_Init+0xd0>)
 8002f88:	400b      	ands	r3, r1
 8002f8a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f8c:	6923      	ldr	r3, [r4, #16]
 8002f8e:	6962      	ldr	r2, [r4, #20]
 8002f90:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f92:	69a2      	ldr	r2, [r4, #24]
 8002f94:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f96:	6821      	ldr	r1, [r4, #0]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f9c:	69e3      	ldr	r3, [r4, #28]
 8002f9e:	6a21      	ldr	r1, [r4, #32]
 8002fa0:	6822      	ldr	r2, [r4, #0]
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002fa6:	6822      	ldr	r2, [r4, #0]
 8002fa8:	6813      	ldr	r3, [r2, #0]
 8002faa:	2101      	movs	r1, #1
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	2241      	movs	r2, #65	@ 0x41
 8002fb6:	311f      	adds	r1, #31
 8002fb8:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fba:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	3201      	adds	r2, #1
 8002fbe:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002fc0:	2000      	movs	r0, #0
}
 8002fc2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002fc4:	3340      	adds	r3, #64	@ 0x40
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8002fca:	f7ff f883 	bl	80020d4 <HAL_I2C_MspInit>
 8002fce:	e7b0      	b.n	8002f32 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fd0:	68a1      	ldr	r1, [r4, #8]
 8002fd2:	6822      	ldr	r2, [r4, #0]
 8002fd4:	2380      	movs	r3, #128	@ 0x80
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6093      	str	r3, [r2, #8]
 8002fdc:	e7c4      	b.n	8002f68 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fde:	6822      	ldr	r2, [r4, #0]
 8002fe0:	6851      	ldr	r1, [r2, #4]
 8002fe2:	2380      	movs	r3, #128	@ 0x80
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	6053      	str	r3, [r2, #4]
 8002fea:	e7c5      	b.n	8002f78 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8002fec:	2001      	movs	r0, #1
 8002fee:	e7e8      	b.n	8002fc2 <HAL_I2C_Init+0x9e>
 8002ff0:	f0ffffff 	.word	0xf0ffffff
 8002ff4:	ffff7fff 	.word	0xffff7fff
 8002ff8:	fffff7ff 	.word	0xfffff7ff
 8002ffc:	02008000 	.word	0x02008000

08003000 <HAL_I2C_Mem_Write>:
{
 8003000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003002:	b087      	sub	sp, #28
 8003004:	0004      	movs	r4, r0
 8003006:	9103      	str	r1, [sp, #12]
 8003008:	9204      	str	r2, [sp, #16]
 800300a:	9305      	str	r3, [sp, #20]
 800300c:	ab0c      	add	r3, sp, #48	@ 0x30
 800300e:	cb20      	ldmia	r3!, {r5}
 8003010:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003012:	2341      	movs	r3, #65	@ 0x41
 8003014:	5cc3      	ldrb	r3, [r0, r3]
 8003016:	2b20      	cmp	r3, #32
 8003018:	d000      	beq.n	800301c <HAL_I2C_Mem_Write+0x1c>
 800301a:	e0b3      	b.n	8003184 <HAL_I2C_Mem_Write+0x184>
    if ((pData == NULL) || (Size == 0U))
 800301c:	2d00      	cmp	r5, #0
 800301e:	d018      	beq.n	8003052 <HAL_I2C_Mem_Write+0x52>
 8003020:	2f00      	cmp	r7, #0
 8003022:	d016      	beq.n	8003052 <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8003024:	2340      	movs	r3, #64	@ 0x40
 8003026:	5cc3      	ldrb	r3, [r0, r3]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d100      	bne.n	800302e <HAL_I2C_Mem_Write+0x2e>
 800302c:	e0ad      	b.n	800318a <HAL_I2C_Mem_Write+0x18a>
 800302e:	2340      	movs	r3, #64	@ 0x40
 8003030:	2201      	movs	r2, #1
 8003032:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8003034:	f7ff fc4c 	bl	80028d0 <HAL_GetTick>
 8003038:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800303a:	2180      	movs	r1, #128	@ 0x80
 800303c:	9000      	str	r0, [sp, #0]
 800303e:	2319      	movs	r3, #25
 8003040:	2201      	movs	r2, #1
 8003042:	0209      	lsls	r1, r1, #8
 8003044:	0020      	movs	r0, r4
 8003046:	f7ff fe84 	bl	8002d52 <I2C_WaitOnFlagUntilTimeout>
 800304a:	2800      	cmp	r0, #0
 800304c:	d006      	beq.n	800305c <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 800304e:	2001      	movs	r0, #1
 8003050:	e099      	b.n	8003186 <HAL_I2C_Mem_Write+0x186>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003052:	2380      	movs	r3, #128	@ 0x80
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003058:	2001      	movs	r0, #1
 800305a:	e094      	b.n	8003186 <HAL_I2C_Mem_Write+0x186>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800305c:	2341      	movs	r3, #65	@ 0x41
 800305e:	2221      	movs	r2, #33	@ 0x21
 8003060:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003062:	3301      	adds	r3, #1
 8003064:	321f      	adds	r2, #31
 8003066:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003068:	2300      	movs	r3, #0
 800306a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800306c:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800306e:	8567      	strh	r7, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003070:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003072:	9601      	str	r6, [sp, #4]
 8003074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	9b05      	ldr	r3, [sp, #20]
 800307a:	9a04      	ldr	r2, [sp, #16]
 800307c:	9903      	ldr	r1, [sp, #12]
 800307e:	0020      	movs	r0, r4
 8003080:	f7ff feac 	bl	8002ddc <I2C_RequestMemoryWrite>
 8003084:	2800      	cmp	r0, #0
 8003086:	d10f      	bne.n	80030a8 <HAL_I2C_Mem_Write+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003088:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	2bff      	cmp	r3, #255	@ 0xff
 800308e:	d910      	bls.n	80030b2 <HAL_I2C_Mem_Write+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003090:	23ff      	movs	r3, #255	@ 0xff
 8003092:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003094:	3b7f      	subs	r3, #127	@ 0x7f
 8003096:	2200      	movs	r2, #0
 8003098:	9200      	str	r2, [sp, #0]
 800309a:	045b      	lsls	r3, r3, #17
 800309c:	32ff      	adds	r2, #255	@ 0xff
 800309e:	9903      	ldr	r1, [sp, #12]
 80030a0:	0020      	movs	r0, r4
 80030a2:	f7ff fd83 	bl	8002bac <I2C_TransferConfig>
 80030a6:	e021      	b.n	80030ec <HAL_I2C_Mem_Write+0xec>
      __HAL_UNLOCK(hi2c);
 80030a8:	2340      	movs	r3, #64	@ 0x40
 80030aa:	2200      	movs	r2, #0
 80030ac:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80030ae:	2001      	movs	r0, #1
 80030b0:	e069      	b.n	8003186 <HAL_I2C_Mem_Write+0x186>
      hi2c->XferSize = hi2c->XferCount;
 80030b2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80030b4:	b292      	uxth	r2, r2
 80030b6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030b8:	2380      	movs	r3, #128	@ 0x80
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	2100      	movs	r1, #0
 80030be:	9100      	str	r1, [sp, #0]
 80030c0:	049b      	lsls	r3, r3, #18
 80030c2:	9903      	ldr	r1, [sp, #12]
 80030c4:	0020      	movs	r0, r4
 80030c6:	f7ff fd71 	bl	8002bac <I2C_TransferConfig>
 80030ca:	e00f      	b.n	80030ec <HAL_I2C_Mem_Write+0xec>
          hi2c->XferSize = hi2c->XferCount;
 80030cc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80030ce:	b292      	uxth	r2, r2
 80030d0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030d2:	2380      	movs	r3, #128	@ 0x80
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	2100      	movs	r1, #0
 80030d8:	9100      	str	r1, [sp, #0]
 80030da:	049b      	lsls	r3, r3, #18
 80030dc:	9903      	ldr	r1, [sp, #12]
 80030de:	0020      	movs	r0, r4
 80030e0:	f7ff fd64 	bl	8002bac <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80030e4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d034      	beq.n	8003156 <HAL_I2C_Mem_Write+0x156>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ec:	0032      	movs	r2, r6
 80030ee:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80030f0:	0020      	movs	r0, r4
 80030f2:	f7ff fe01 	bl	8002cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d149      	bne.n	800318e <HAL_I2C_Mem_Write+0x18e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	7812      	ldrb	r2, [r2, #0]
 8003100:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003102:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003104:	3301      	adds	r3, #1
 8003106:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003108:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800310a:	3b01      	subs	r3, #1
 800310c:	b29b      	uxth	r3, r3
 800310e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003110:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003112:	3b01      	subs	r3, #1
 8003114:	b29b      	uxth	r3, r3
 8003116:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003118:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800311a:	b292      	uxth	r2, r2
 800311c:	2a00      	cmp	r2, #0
 800311e:	d0e1      	beq.n	80030e4 <HAL_I2C_Mem_Write+0xe4>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1df      	bne.n	80030e4 <HAL_I2C_Mem_Write+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003124:	9600      	str	r6, [sp, #0]
 8003126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003128:	2200      	movs	r2, #0
 800312a:	2180      	movs	r1, #128	@ 0x80
 800312c:	0020      	movs	r0, r4
 800312e:	f7ff fe10 	bl	8002d52 <I2C_WaitOnFlagUntilTimeout>
 8003132:	2800      	cmp	r0, #0
 8003134:	d12d      	bne.n	8003192 <HAL_I2C_Mem_Write+0x192>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003136:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2bff      	cmp	r3, #255	@ 0xff
 800313c:	d9c6      	bls.n	80030cc <HAL_I2C_Mem_Write+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800313e:	23ff      	movs	r3, #255	@ 0xff
 8003140:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003142:	3b7f      	subs	r3, #127	@ 0x7f
 8003144:	2200      	movs	r2, #0
 8003146:	9200      	str	r2, [sp, #0]
 8003148:	045b      	lsls	r3, r3, #17
 800314a:	32ff      	adds	r2, #255	@ 0xff
 800314c:	9903      	ldr	r1, [sp, #12]
 800314e:	0020      	movs	r0, r4
 8003150:	f7ff fd2c 	bl	8002bac <I2C_TransferConfig>
 8003154:	e7c6      	b.n	80030e4 <HAL_I2C_Mem_Write+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003156:	0032      	movs	r2, r6
 8003158:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800315a:	0020      	movs	r0, r4
 800315c:	f7ff feb4 	bl	8002ec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003160:	2800      	cmp	r0, #0
 8003162:	d118      	bne.n	8003196 <HAL_I2C_Mem_Write+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	2220      	movs	r2, #32
 8003168:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800316a:	6821      	ldr	r1, [r4, #0]
 800316c:	684b      	ldr	r3, [r1, #4]
 800316e:	4d0b      	ldr	r5, [pc, #44]	@ (800319c <HAL_I2C_Mem_Write+0x19c>)
 8003170:	402b      	ands	r3, r5
 8003172:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003174:	2341      	movs	r3, #65	@ 0x41
 8003176:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003178:	2300      	movs	r3, #0
 800317a:	3222      	adds	r2, #34	@ 0x22
 800317c:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 800317e:	3a02      	subs	r2, #2
 8003180:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8003182:	e000      	b.n	8003186 <HAL_I2C_Mem_Write+0x186>
    return HAL_BUSY;
 8003184:	2002      	movs	r0, #2
}
 8003186:	b007      	add	sp, #28
 8003188:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800318a:	2002      	movs	r0, #2
 800318c:	e7fb      	b.n	8003186 <HAL_I2C_Mem_Write+0x186>
        return HAL_ERROR;
 800318e:	2001      	movs	r0, #1
 8003190:	e7f9      	b.n	8003186 <HAL_I2C_Mem_Write+0x186>
          return HAL_ERROR;
 8003192:	2001      	movs	r0, #1
 8003194:	e7f7      	b.n	8003186 <HAL_I2C_Mem_Write+0x186>
      return HAL_ERROR;
 8003196:	2001      	movs	r0, #1
 8003198:	e7f5      	b.n	8003186 <HAL_I2C_Mem_Write+0x186>
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	fe00e800 	.word	0xfe00e800

080031a0 <HAL_I2C_Mem_Read>:
{
 80031a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a2:	b087      	sub	sp, #28
 80031a4:	0004      	movs	r4, r0
 80031a6:	9103      	str	r1, [sp, #12]
 80031a8:	9204      	str	r2, [sp, #16]
 80031aa:	9305      	str	r3, [sp, #20]
 80031ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80031ae:	cb20      	ldmia	r3!, {r5}
 80031b0:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b2:	2341      	movs	r3, #65	@ 0x41
 80031b4:	5cc3      	ldrb	r3, [r0, r3]
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d000      	beq.n	80031bc <HAL_I2C_Mem_Read+0x1c>
 80031ba:	e0b5      	b.n	8003328 <HAL_I2C_Mem_Read+0x188>
    if ((pData == NULL) || (Size == 0U))
 80031bc:	2d00      	cmp	r5, #0
 80031be:	d018      	beq.n	80031f2 <HAL_I2C_Mem_Read+0x52>
 80031c0:	2f00      	cmp	r7, #0
 80031c2:	d016      	beq.n	80031f2 <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 80031c4:	2340      	movs	r3, #64	@ 0x40
 80031c6:	5cc3      	ldrb	r3, [r0, r3]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d100      	bne.n	80031ce <HAL_I2C_Mem_Read+0x2e>
 80031cc:	e0af      	b.n	800332e <HAL_I2C_Mem_Read+0x18e>
 80031ce:	2340      	movs	r3, #64	@ 0x40
 80031d0:	2201      	movs	r2, #1
 80031d2:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80031d4:	f7ff fb7c 	bl	80028d0 <HAL_GetTick>
 80031d8:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031da:	2180      	movs	r1, #128	@ 0x80
 80031dc:	9000      	str	r0, [sp, #0]
 80031de:	2319      	movs	r3, #25
 80031e0:	2201      	movs	r2, #1
 80031e2:	0209      	lsls	r1, r1, #8
 80031e4:	0020      	movs	r0, r4
 80031e6:	f7ff fdb4 	bl	8002d52 <I2C_WaitOnFlagUntilTimeout>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d006      	beq.n	80031fc <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 80031ee:	2001      	movs	r0, #1
 80031f0:	e09b      	b.n	800332a <HAL_I2C_Mem_Read+0x18a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031f2:	2380      	movs	r3, #128	@ 0x80
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80031f8:	2001      	movs	r0, #1
 80031fa:	e096      	b.n	800332a <HAL_I2C_Mem_Read+0x18a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031fc:	2341      	movs	r3, #65	@ 0x41
 80031fe:	2222      	movs	r2, #34	@ 0x22
 8003200:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003202:	3301      	adds	r3, #1
 8003204:	321e      	adds	r2, #30
 8003206:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003208:	2300      	movs	r3, #0
 800320a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800320c:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800320e:	8567      	strh	r7, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003210:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003212:	9601      	str	r6, [sp, #4]
 8003214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	9b05      	ldr	r3, [sp, #20]
 800321a:	9a04      	ldr	r2, [sp, #16]
 800321c:	9903      	ldr	r1, [sp, #12]
 800321e:	0020      	movs	r0, r4
 8003220:	f7ff fe18 	bl	8002e54 <I2C_RequestMemoryRead>
 8003224:	2800      	cmp	r0, #0
 8003226:	d10f      	bne.n	8003248 <HAL_I2C_Mem_Read+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003228:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	2bff      	cmp	r3, #255	@ 0xff
 800322e:	d910      	bls.n	8003252 <HAL_I2C_Mem_Read+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003230:	23ff      	movs	r3, #255	@ 0xff
 8003232:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003234:	3b7f      	subs	r3, #127	@ 0x7f
 8003236:	4a42      	ldr	r2, [pc, #264]	@ (8003340 <HAL_I2C_Mem_Read+0x1a0>)
 8003238:	9200      	str	r2, [sp, #0]
 800323a:	045b      	lsls	r3, r3, #17
 800323c:	22ff      	movs	r2, #255	@ 0xff
 800323e:	9903      	ldr	r1, [sp, #12]
 8003240:	0020      	movs	r0, r4
 8003242:	f7ff fcb3 	bl	8002bac <I2C_TransferConfig>
 8003246:	e021      	b.n	800328c <HAL_I2C_Mem_Read+0xec>
      __HAL_UNLOCK(hi2c);
 8003248:	2340      	movs	r3, #64	@ 0x40
 800324a:	2200      	movs	r2, #0
 800324c:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 800324e:	2001      	movs	r0, #1
 8003250:	e06b      	b.n	800332a <HAL_I2C_Mem_Read+0x18a>
      hi2c->XferSize = hi2c->XferCount;
 8003252:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003254:	b292      	uxth	r2, r2
 8003256:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003258:	2380      	movs	r3, #128	@ 0x80
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	4938      	ldr	r1, [pc, #224]	@ (8003340 <HAL_I2C_Mem_Read+0x1a0>)
 800325e:	9100      	str	r1, [sp, #0]
 8003260:	049b      	lsls	r3, r3, #18
 8003262:	9903      	ldr	r1, [sp, #12]
 8003264:	0020      	movs	r0, r4
 8003266:	f7ff fca1 	bl	8002bac <I2C_TransferConfig>
 800326a:	e00f      	b.n	800328c <HAL_I2C_Mem_Read+0xec>
          hi2c->XferSize = hi2c->XferCount;
 800326c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800326e:	b292      	uxth	r2, r2
 8003270:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003272:	2380      	movs	r3, #128	@ 0x80
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	2100      	movs	r1, #0
 8003278:	9100      	str	r1, [sp, #0]
 800327a:	049b      	lsls	r3, r3, #18
 800327c:	9903      	ldr	r1, [sp, #12]
 800327e:	0020      	movs	r0, r4
 8003280:	f7ff fc94 	bl	8002bac <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003284:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d036      	beq.n	80032fa <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800328c:	9600      	str	r6, [sp, #0]
 800328e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003290:	2200      	movs	r2, #0
 8003292:	2104      	movs	r1, #4
 8003294:	0020      	movs	r0, r4
 8003296:	f7ff fd5c 	bl	8002d52 <I2C_WaitOnFlagUntilTimeout>
 800329a:	2800      	cmp	r0, #0
 800329c:	d149      	bne.n	8003332 <HAL_I2C_Mem_Read+0x192>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80032a4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80032a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80032a8:	3301      	adds	r3, #1
 80032aa:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80032ac:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80032b4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80032b6:	3a01      	subs	r2, #1
 80032b8:	b292      	uxth	r2, r2
 80032ba:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032bc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80032be:	b292      	uxth	r2, r2
 80032c0:	2a00      	cmp	r2, #0
 80032c2:	d0df      	beq.n	8003284 <HAL_I2C_Mem_Read+0xe4>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1dd      	bne.n	8003284 <HAL_I2C_Mem_Read+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032c8:	9600      	str	r6, [sp, #0]
 80032ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80032cc:	2200      	movs	r2, #0
 80032ce:	2180      	movs	r1, #128	@ 0x80
 80032d0:	0020      	movs	r0, r4
 80032d2:	f7ff fd3e 	bl	8002d52 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	2800      	cmp	r0, #0
 80032d8:	d12d      	bne.n	8003336 <HAL_I2C_Mem_Read+0x196>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2bff      	cmp	r3, #255	@ 0xff
 80032e0:	d9c4      	bls.n	800326c <HAL_I2C_Mem_Read+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e2:	23ff      	movs	r3, #255	@ 0xff
 80032e4:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032e6:	3b7f      	subs	r3, #127	@ 0x7f
 80032e8:	2200      	movs	r2, #0
 80032ea:	9200      	str	r2, [sp, #0]
 80032ec:	045b      	lsls	r3, r3, #17
 80032ee:	32ff      	adds	r2, #255	@ 0xff
 80032f0:	9903      	ldr	r1, [sp, #12]
 80032f2:	0020      	movs	r0, r4
 80032f4:	f7ff fc5a 	bl	8002bac <I2C_TransferConfig>
 80032f8:	e7c4      	b.n	8003284 <HAL_I2C_Mem_Read+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fa:	0032      	movs	r2, r6
 80032fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80032fe:	0020      	movs	r0, r4
 8003300:	f7ff fde2 	bl	8002ec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003304:	2800      	cmp	r0, #0
 8003306:	d118      	bne.n	800333a <HAL_I2C_Mem_Read+0x19a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	2220      	movs	r2, #32
 800330c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800330e:	6821      	ldr	r1, [r4, #0]
 8003310:	684b      	ldr	r3, [r1, #4]
 8003312:	4d0c      	ldr	r5, [pc, #48]	@ (8003344 <HAL_I2C_Mem_Read+0x1a4>)
 8003314:	402b      	ands	r3, r5
 8003316:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003318:	2341      	movs	r3, #65	@ 0x41
 800331a:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800331c:	2300      	movs	r3, #0
 800331e:	3222      	adds	r2, #34	@ 0x22
 8003320:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8003322:	3a02      	subs	r2, #2
 8003324:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8003326:	e000      	b.n	800332a <HAL_I2C_Mem_Read+0x18a>
    return HAL_BUSY;
 8003328:	2002      	movs	r0, #2
}
 800332a:	b007      	add	sp, #28
 800332c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800332e:	2002      	movs	r0, #2
 8003330:	e7fb      	b.n	800332a <HAL_I2C_Mem_Read+0x18a>
        return HAL_ERROR;
 8003332:	2001      	movs	r0, #1
 8003334:	e7f9      	b.n	800332a <HAL_I2C_Mem_Read+0x18a>
          return HAL_ERROR;
 8003336:	2001      	movs	r0, #1
 8003338:	e7f7      	b.n	800332a <HAL_I2C_Mem_Read+0x18a>
      return HAL_ERROR;
 800333a:	2001      	movs	r0, #1
 800333c:	e7f5      	b.n	800332a <HAL_I2C_Mem_Read+0x18a>
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	80002400 	.word	0x80002400
 8003344:	fe00e800 	.word	0xfe00e800

08003348 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003348:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334a:	2341      	movs	r3, #65	@ 0x41
 800334c:	5cc3      	ldrb	r3, [r0, r3]
 800334e:	2b20      	cmp	r3, #32
 8003350:	d120      	bne.n	8003394 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003352:	3320      	adds	r3, #32
 8003354:	5cc3      	ldrb	r3, [r0, r3]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d01e      	beq.n	8003398 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800335a:	2440      	movs	r4, #64	@ 0x40
 800335c:	2201      	movs	r2, #1
 800335e:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003360:	2541      	movs	r5, #65	@ 0x41
 8003362:	2324      	movs	r3, #36	@ 0x24
 8003364:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003366:	6806      	ldr	r6, [r0, #0]
 8003368:	6833      	ldr	r3, [r6, #0]
 800336a:	4393      	bics	r3, r2
 800336c:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800336e:	6806      	ldr	r6, [r0, #0]
 8003370:	6833      	ldr	r3, [r6, #0]
 8003372:	4f0a      	ldr	r7, [pc, #40]	@ (800339c <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8003374:	403b      	ands	r3, r7
 8003376:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003378:	6806      	ldr	r6, [r0, #0]
 800337a:	6833      	ldr	r3, [r6, #0]
 800337c:	430b      	orrs	r3, r1
 800337e:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003380:	6801      	ldr	r1, [r0, #0]
 8003382:	680b      	ldr	r3, [r1, #0]
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003388:	2320      	movs	r3, #32
 800338a:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338c:	2300      	movs	r3, #0
 800338e:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8003390:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003394:	2002      	movs	r0, #2
 8003396:	e7fc      	b.n	8003392 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8003398:	2002      	movs	r0, #2
 800339a:	e7fa      	b.n	8003392 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 800339c:	ffffefff 	.word	0xffffefff

080033a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033a0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a2:	2341      	movs	r3, #65	@ 0x41
 80033a4:	5cc3      	ldrb	r3, [r0, r3]
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d11e      	bne.n	80033e8 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033aa:	3320      	adds	r3, #32
 80033ac:	5cc3      	ldrb	r3, [r0, r3]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d01c      	beq.n	80033ec <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 80033b2:	2440      	movs	r4, #64	@ 0x40
 80033b4:	2201      	movs	r2, #1
 80033b6:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033b8:	2541      	movs	r5, #65	@ 0x41
 80033ba:	2324      	movs	r3, #36	@ 0x24
 80033bc:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033be:	6806      	ldr	r6, [r0, #0]
 80033c0:	6833      	ldr	r3, [r6, #0]
 80033c2:	4393      	bics	r3, r2
 80033c4:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033c6:	6806      	ldr	r6, [r0, #0]
 80033c8:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033ca:	4f09      	ldr	r7, [pc, #36]	@ (80033f0 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 80033cc:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033ce:	0209      	lsls	r1, r1, #8
 80033d0:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033d2:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033d4:	6801      	ldr	r1, [r0, #0]
 80033d6:	680b      	ldr	r3, [r1, #0]
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	2320      	movs	r3, #32
 80033de:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e0:	2300      	movs	r3, #0
 80033e2:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80033e4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80033e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80033e8:	2002      	movs	r0, #2
 80033ea:	e7fc      	b.n	80033e6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 80033ec:	2002      	movs	r0, #2
 80033ee:	e7fa      	b.n	80033e6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 80033f0:	fffff0ff 	.word	0xfffff0ff

080033f4 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033f8:	d100      	bne.n	80033fc <HAL_RCC_OscConfig+0x8>
 80033fa:	e139      	b.n	8003670 <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fc:	6803      	ldr	r3, [r0, #0]
 80033fe:	07db      	lsls	r3, r3, #31
 8003400:	d52c      	bpl.n	800345c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003402:	4ba1      	ldr	r3, [pc, #644]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	2338      	movs	r3, #56	@ 0x38
 8003408:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800340a:	2b08      	cmp	r3, #8
 800340c:	d022      	beq.n	8003454 <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340e:	6843      	ldr	r3, [r0, #4]
 8003410:	2280      	movs	r2, #128	@ 0x80
 8003412:	0252      	lsls	r2, r2, #9
 8003414:	4293      	cmp	r3, r2
 8003416:	d02e      	beq.n	8003476 <HAL_RCC_OscConfig+0x82>
 8003418:	22a0      	movs	r2, #160	@ 0xa0
 800341a:	02d2      	lsls	r2, r2, #11
 800341c:	4293      	cmp	r3, r2
 800341e:	d031      	beq.n	8003484 <HAL_RCC_OscConfig+0x90>
 8003420:	4b99      	ldr	r3, [pc, #612]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4999      	ldr	r1, [pc, #612]	@ (800368c <HAL_RCC_OscConfig+0x298>)
 8003426:	400a      	ands	r2, r1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4998      	ldr	r1, [pc, #608]	@ (8003690 <HAL_RCC_OscConfig+0x29c>)
 800342e:	400a      	ands	r2, r1
 8003430:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003432:	6863      	ldr	r3, [r4, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d031      	beq.n	800349c <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7ff fa4a 	bl	80028d0 <HAL_GetTick>
 800343c:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800343e:	4b92      	ldr	r3, [pc, #584]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	039b      	lsls	r3, r3, #14
 8003444:	d40a      	bmi.n	800345c <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003446:	f7ff fa43 	bl	80028d0 <HAL_GetTick>
 800344a:	1b40      	subs	r0, r0, r5
 800344c:	2864      	cmp	r0, #100	@ 0x64
 800344e:	d9f6      	bls.n	800343e <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 8003450:	2003      	movs	r0, #3
 8003452:	e10e      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003454:	6843      	ldr	r3, [r0, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d100      	bne.n	800345c <HAL_RCC_OscConfig+0x68>
 800345a:	e10b      	b.n	8003674 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	079b      	lsls	r3, r3, #30
 8003460:	d547      	bpl.n	80034f2 <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003462:	4b89      	ldr	r3, [pc, #548]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003468:	421a      	tst	r2, r3
 800346a:	d161      	bne.n	8003530 <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800346c:	68e3      	ldr	r3, [r4, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d122      	bne.n	80034b8 <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 8003472:	2001      	movs	r0, #1
 8003474:	e0fd      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003476:	4a84      	ldr	r2, [pc, #528]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 8003478:	6811      	ldr	r1, [r2, #0]
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	025b      	lsls	r3, r3, #9
 800347e:	430b      	orrs	r3, r1
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e7d6      	b.n	8003432 <HAL_RCC_OscConfig+0x3e>
 8003484:	4b80      	ldr	r3, [pc, #512]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 8003486:	6819      	ldr	r1, [r3, #0]
 8003488:	2280      	movs	r2, #128	@ 0x80
 800348a:	02d2      	lsls	r2, r2, #11
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	6819      	ldr	r1, [r3, #0]
 8003492:	2280      	movs	r2, #128	@ 0x80
 8003494:	0252      	lsls	r2, r2, #9
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e7ca      	b.n	8003432 <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 800349c:	f7ff fa18 	bl	80028d0 <HAL_GetTick>
 80034a0:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034a2:	4b79      	ldr	r3, [pc, #484]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	039b      	lsls	r3, r3, #14
 80034a8:	d5d8      	bpl.n	800345c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80034aa:	f7ff fa11 	bl	80028d0 <HAL_GetTick>
 80034ae:	1b40      	subs	r0, r0, r5
 80034b0:	2864      	cmp	r0, #100	@ 0x64
 80034b2:	d9f6      	bls.n	80034a2 <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 80034b4:	2003      	movs	r0, #3
 80034b6:	e0dc      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b8:	4b73      	ldr	r3, [pc, #460]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4975      	ldr	r1, [pc, #468]	@ (8003694 <HAL_RCC_OscConfig+0x2a0>)
 80034be:	400a      	ands	r2, r1
 80034c0:	6961      	ldr	r1, [r4, #20]
 80034c2:	0209      	lsls	r1, r1, #8
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4973      	ldr	r1, [pc, #460]	@ (8003698 <HAL_RCC_OscConfig+0x2a4>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	6921      	ldr	r1, [r4, #16]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	0adb      	lsrs	r3, r3, #11
 80034d8:	2207      	movs	r2, #7
 80034da:	401a      	ands	r2, r3
 80034dc:	4b6f      	ldr	r3, [pc, #444]	@ (800369c <HAL_RCC_OscConfig+0x2a8>)
 80034de:	40d3      	lsrs	r3, r2
 80034e0:	4a6f      	ldr	r2, [pc, #444]	@ (80036a0 <HAL_RCC_OscConfig+0x2ac>)
 80034e2:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034e4:	4b6f      	ldr	r3, [pc, #444]	@ (80036a4 <HAL_RCC_OscConfig+0x2b0>)
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	f7ff f9ae 	bl	8002848 <HAL_InitTick>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d000      	beq.n	80034f2 <HAL_RCC_OscConfig+0xfe>
 80034f0:	e0c2      	b.n	8003678 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	071b      	lsls	r3, r3, #28
 80034f6:	d557      	bpl.n	80035a8 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80034f8:	4b63      	ldr	r3, [pc, #396]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	2338      	movs	r3, #56	@ 0x38
 80034fe:	4013      	ands	r3, r2
 8003500:	2b18      	cmp	r3, #24
 8003502:	d04e      	beq.n	80035a2 <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003504:	69a3      	ldr	r3, [r4, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d077      	beq.n	80035fa <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800350a:	4a5f      	ldr	r2, [pc, #380]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 800350c:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800350e:	2101      	movs	r1, #1
 8003510:	430b      	orrs	r3, r1
 8003512:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7ff f9dc 	bl	80028d0 <HAL_GetTick>
 8003518:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800351a:	4b5b      	ldr	r3, [pc, #364]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 800351c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351e:	079b      	lsls	r3, r3, #30
 8003520:	d442      	bmi.n	80035a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003522:	f7ff f9d5 	bl	80028d0 <HAL_GetTick>
 8003526:	1b40      	subs	r0, r0, r5
 8003528:	2802      	cmp	r0, #2
 800352a:	d9f6      	bls.n	800351a <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 800352c:	2003      	movs	r0, #3
 800352e:	e0a0      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003530:	68e3      	ldr	r3, [r4, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d022      	beq.n	800357c <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003536:	4a54      	ldr	r2, [pc, #336]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 8003538:	6813      	ldr	r3, [r2, #0]
 800353a:	4957      	ldr	r1, [pc, #348]	@ (8003698 <HAL_RCC_OscConfig+0x2a4>)
 800353c:	400b      	ands	r3, r1
 800353e:	6921      	ldr	r1, [r4, #16]
 8003540:	430b      	orrs	r3, r1
 8003542:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8003544:	6811      	ldr	r1, [r2, #0]
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	430b      	orrs	r3, r1
 800354c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800354e:	f7ff f9bf 	bl	80028d0 <HAL_GetTick>
 8003552:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003554:	4b4c      	ldr	r3, [pc, #304]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	055b      	lsls	r3, r3, #21
 800355a:	d406      	bmi.n	800356a <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800355c:	f7ff f9b8 	bl	80028d0 <HAL_GetTick>
 8003560:	1b40      	subs	r0, r0, r5
 8003562:	2802      	cmp	r0, #2
 8003564:	d9f6      	bls.n	8003554 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8003566:	2003      	movs	r0, #3
 8003568:	e083      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356a:	4947      	ldr	r1, [pc, #284]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 800356c:	684b      	ldr	r3, [r1, #4]
 800356e:	4a49      	ldr	r2, [pc, #292]	@ (8003694 <HAL_RCC_OscConfig+0x2a0>)
 8003570:	4013      	ands	r3, r2
 8003572:	6962      	ldr	r2, [r4, #20]
 8003574:	0212      	lsls	r2, r2, #8
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
 800357a:	e7ba      	b.n	80034f2 <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 800357c:	4a42      	ldr	r2, [pc, #264]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	4949      	ldr	r1, [pc, #292]	@ (80036a8 <HAL_RCC_OscConfig+0x2b4>)
 8003582:	400b      	ands	r3, r1
 8003584:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003586:	f7ff f9a3 	bl	80028d0 <HAL_GetTick>
 800358a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800358c:	4b3e      	ldr	r3, [pc, #248]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	055b      	lsls	r3, r3, #21
 8003592:	d5ae      	bpl.n	80034f2 <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003594:	f7ff f99c 	bl	80028d0 <HAL_GetTick>
 8003598:	1b40      	subs	r0, r0, r5
 800359a:	2802      	cmp	r0, #2
 800359c:	d9f6      	bls.n	800358c <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 800359e:	2003      	movs	r0, #3
 80035a0:	e067      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80035a2:	69a3      	ldr	r3, [r4, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d069      	beq.n	800367c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	075b      	lsls	r3, r3, #29
 80035ac:	d568      	bpl.n	8003680 <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80035ae:	4b36      	ldr	r3, [pc, #216]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	2338      	movs	r3, #56	@ 0x38
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d032      	beq.n	8003620 <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ba:	68a3      	ldr	r3, [r4, #8]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d034      	beq.n	800362a <HAL_RCC_OscConfig+0x236>
 80035c0:	2b05      	cmp	r3, #5
 80035c2:	d038      	beq.n	8003636 <HAL_RCC_OscConfig+0x242>
 80035c4:	4b30      	ldr	r3, [pc, #192]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 80035c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035c8:	2101      	movs	r1, #1
 80035ca:	438a      	bics	r2, r1
 80035cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035d0:	3103      	adds	r1, #3
 80035d2:	438a      	bics	r2, r1
 80035d4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d6:	68a3      	ldr	r3, [r4, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d038      	beq.n	800364e <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7ff f978 	bl	80028d0 <HAL_GetTick>
 80035e0:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80035e2:	4b29      	ldr	r3, [pc, #164]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 80035e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e6:	079b      	lsls	r3, r3, #30
 80035e8:	d42f      	bmi.n	800364a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7ff f971 	bl	80028d0 <HAL_GetTick>
 80035ee:	1b00      	subs	r0, r0, r4
 80035f0:	4b2e      	ldr	r3, [pc, #184]	@ (80036ac <HAL_RCC_OscConfig+0x2b8>)
 80035f2:	4298      	cmp	r0, r3
 80035f4:	d9f5      	bls.n	80035e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80035f6:	2003      	movs	r0, #3
 80035f8:	e03b      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 80035fa:	4a23      	ldr	r2, [pc, #140]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 80035fc:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80035fe:	2101      	movs	r1, #1
 8003600:	438b      	bics	r3, r1
 8003602:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003604:	f7ff f964 	bl	80028d0 <HAL_GetTick>
 8003608:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800360a:	4b1f      	ldr	r3, [pc, #124]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 800360c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360e:	079b      	lsls	r3, r3, #30
 8003610:	d5ca      	bpl.n	80035a8 <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003612:	f7ff f95d 	bl	80028d0 <HAL_GetTick>
 8003616:	1b40      	subs	r0, r0, r5
 8003618:	2802      	cmp	r0, #2
 800361a:	d9f6      	bls.n	800360a <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 800361c:	2003      	movs	r0, #3
 800361e:	e028      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8003620:	68a3      	ldr	r3, [r4, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d02e      	beq.n	8003684 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8003626:	2000      	movs	r0, #0
 8003628:	e023      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362a:	4a17      	ldr	r2, [pc, #92]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 800362c:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800362e:	2101      	movs	r1, #1
 8003630:	430b      	orrs	r3, r1
 8003632:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003634:	e7cf      	b.n	80035d6 <HAL_RCC_OscConfig+0x1e2>
 8003636:	4b14      	ldr	r3, [pc, #80]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 8003638:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800363a:	2104      	movs	r1, #4
 800363c:	430a      	orrs	r2, r1
 800363e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003640:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003642:	3903      	subs	r1, #3
 8003644:	430a      	orrs	r2, r1
 8003646:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003648:	e7c5      	b.n	80035d6 <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 800364a:	2000      	movs	r0, #0
 800364c:	e011      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 800364e:	f7ff f93f 	bl	80028d0 <HAL_GetTick>
 8003652:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003654:	4b0c      	ldr	r3, [pc, #48]	@ (8003688 <HAL_RCC_OscConfig+0x294>)
 8003656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003658:	079b      	lsls	r3, r3, #30
 800365a:	d507      	bpl.n	800366c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7ff f938 	bl	80028d0 <HAL_GetTick>
 8003660:	1b00      	subs	r0, r0, r4
 8003662:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <HAL_RCC_OscConfig+0x2b8>)
 8003664:	4298      	cmp	r0, r3
 8003666:	d9f5      	bls.n	8003654 <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 8003668:	2003      	movs	r0, #3
 800366a:	e002      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 800366c:	2000      	movs	r0, #0
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 8003670:	2001      	movs	r0, #1
}
 8003672:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003674:	2001      	movs	r0, #1
 8003676:	e7fc      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 8003678:	2001      	movs	r0, #1
 800367a:	e7fa      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 800367c:	2001      	movs	r0, #1
 800367e:	e7f8      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8003680:	2000      	movs	r0, #0
 8003682:	e7f6      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8003684:	2001      	movs	r0, #1
 8003686:	e7f4      	b.n	8003672 <HAL_RCC_OscConfig+0x27e>
 8003688:	40021000 	.word	0x40021000
 800368c:	fffeffff 	.word	0xfffeffff
 8003690:	fffbffff 	.word	0xfffbffff
 8003694:	ffff80ff 	.word	0xffff80ff
 8003698:	ffffc7ff 	.word	0xffffc7ff
 800369c:	02dc6c00 	.word	0x02dc6c00
 80036a0:	20000020 	.word	0x20000020
 80036a4:	20000028 	.word	0x20000028
 80036a8:	fffffeff 	.word	0xfffffeff
 80036ac:	00001388 	.word	0x00001388

080036b0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036b0:	4b14      	ldr	r3, [pc, #80]	@ (8003704 <HAL_RCC_GetSysClockFreq+0x54>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2238      	movs	r2, #56	@ 0x38
 80036b6:	421a      	tst	r2, r3
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80036ba:	4b12      	ldr	r3, [pc, #72]	@ (8003704 <HAL_RCC_GetSysClockFreq+0x54>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	0ad2      	lsrs	r2, r2, #11
 80036c0:	2307      	movs	r3, #7
 80036c2:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80036c4:	4810      	ldr	r0, [pc, #64]	@ (8003708 <HAL_RCC_GetSysClockFreq+0x58>)
 80036c6:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 80036c8:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003704 <HAL_RCC_GetSysClockFreq+0x54>)
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	2338      	movs	r3, #56	@ 0x38
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d010      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80036d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <HAL_RCC_GetSysClockFreq+0x54>)
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	2338      	movs	r3, #56	@ 0x38
 80036dc:	4013      	ands	r3, r2
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d00c      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80036e2:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <HAL_RCC_GetSysClockFreq+0x54>)
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	2338      	movs	r3, #56	@ 0x38
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b18      	cmp	r3, #24
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 80036ee:	2000      	movs	r0, #0
  return sysclockfreq;
 80036f0:	e7ea      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 80036f2:	20fa      	movs	r0, #250	@ 0xfa
 80036f4:	01c0      	lsls	r0, r0, #7
 80036f6:	e7e7      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 80036f8:	4804      	ldr	r0, [pc, #16]	@ (800370c <HAL_RCC_GetSysClockFreq+0x5c>)
 80036fa:	e7e5      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 80036fc:	2080      	movs	r0, #128	@ 0x80
 80036fe:	0200      	lsls	r0, r0, #8
 8003700:	e7e2      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x18>
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	40021000 	.word	0x40021000
 8003708:	02dc6c00 	.word	0x02dc6c00
 800370c:	007a1200 	.word	0x007a1200

08003710 <HAL_RCC_ClockConfig>:
{
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	0004      	movs	r4, r0
 8003714:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003716:	2800      	cmp	r0, #0
 8003718:	d100      	bne.n	800371c <HAL_RCC_ClockConfig+0xc>
 800371a:	e0a4      	b.n	8003866 <HAL_RCC_ClockConfig+0x156>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800371c:	4b54      	ldr	r3, [pc, #336]	@ (8003870 <HAL_RCC_ClockConfig+0x160>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2307      	movs	r3, #7
 8003722:	4013      	ands	r3, r2
 8003724:	428b      	cmp	r3, r1
 8003726:	d321      	bcc.n	800376c <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	079a      	lsls	r2, r3, #30
 800372c:	d510      	bpl.n	8003750 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372e:	075b      	lsls	r3, r3, #29
 8003730:	d507      	bpl.n	8003742 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003732:	4950      	ldr	r1, [pc, #320]	@ (8003874 <HAL_RCC_ClockConfig+0x164>)
 8003734:	688a      	ldr	r2, [r1, #8]
 8003736:	4b50      	ldr	r3, [pc, #320]	@ (8003878 <HAL_RCC_ClockConfig+0x168>)
 8003738:	401a      	ands	r2, r3
 800373a:	23b0      	movs	r3, #176	@ 0xb0
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003742:	4a4c      	ldr	r2, [pc, #304]	@ (8003874 <HAL_RCC_ClockConfig+0x164>)
 8003744:	6893      	ldr	r3, [r2, #8]
 8003746:	494d      	ldr	r1, [pc, #308]	@ (800387c <HAL_RCC_ClockConfig+0x16c>)
 8003748:	400b      	ands	r3, r1
 800374a:	68e1      	ldr	r1, [r4, #12]
 800374c:	430b      	orrs	r3, r1
 800374e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	07db      	lsls	r3, r3, #31
 8003754:	d54c      	bpl.n	80037f0 <HAL_RCC_ClockConfig+0xe0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003756:	6863      	ldr	r3, [r4, #4]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d01e      	beq.n	800379a <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800375c:	2b00      	cmp	r3, #0
 800375e:	d139      	bne.n	80037d4 <HAL_RCC_ClockConfig+0xc4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003760:	4a44      	ldr	r2, [pc, #272]	@ (8003874 <HAL_RCC_ClockConfig+0x164>)
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	0552      	lsls	r2, r2, #21
 8003766:	d41c      	bmi.n	80037a2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8003768:	2001      	movs	r0, #1
 800376a:	e064      	b.n	8003836 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376c:	4a40      	ldr	r2, [pc, #256]	@ (8003870 <HAL_RCC_ClockConfig+0x160>)
 800376e:	6813      	ldr	r3, [r2, #0]
 8003770:	2107      	movs	r1, #7
 8003772:	438b      	bics	r3, r1
 8003774:	432b      	orrs	r3, r5
 8003776:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003778:	f7ff f8aa 	bl	80028d0 <HAL_GetTick>
 800377c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800377e:	4b3c      	ldr	r3, [pc, #240]	@ (8003870 <HAL_RCC_ClockConfig+0x160>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	2307      	movs	r3, #7
 8003784:	4013      	ands	r3, r2
 8003786:	42ab      	cmp	r3, r5
 8003788:	d0ce      	beq.n	8003728 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800378a:	f7ff f8a1 	bl	80028d0 <HAL_GetTick>
 800378e:	1b80      	subs	r0, r0, r6
 8003790:	4a3b      	ldr	r2, [pc, #236]	@ (8003880 <HAL_RCC_ClockConfig+0x170>)
 8003792:	4290      	cmp	r0, r2
 8003794:	d9f3      	bls.n	800377e <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8003796:	2003      	movs	r0, #3
 8003798:	e04d      	b.n	8003836 <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800379a:	4a36      	ldr	r2, [pc, #216]	@ (8003874 <HAL_RCC_ClockConfig+0x164>)
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	0392      	lsls	r2, r2, #14
 80037a0:	d563      	bpl.n	800386a <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037a2:	4934      	ldr	r1, [pc, #208]	@ (8003874 <HAL_RCC_ClockConfig+0x164>)
 80037a4:	688a      	ldr	r2, [r1, #8]
 80037a6:	2007      	movs	r0, #7
 80037a8:	4382      	bics	r2, r0
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80037ae:	f7ff f88f 	bl	80028d0 <HAL_GetTick>
 80037b2:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003874 <HAL_RCC_ClockConfig+0x164>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2238      	movs	r2, #56	@ 0x38
 80037ba:	401a      	ands	r2, r3
 80037bc:	6863      	ldr	r3, [r4, #4]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d015      	beq.n	80037f0 <HAL_RCC_ClockConfig+0xe0>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7ff f884 	bl	80028d0 <HAL_GetTick>
 80037c8:	1b80      	subs	r0, r0, r6
 80037ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003880 <HAL_RCC_ClockConfig+0x170>)
 80037cc:	4298      	cmp	r0, r3
 80037ce:	d9f1      	bls.n	80037b4 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 80037d0:	2003      	movs	r0, #3
 80037d2:	e030      	b.n	8003836 <HAL_RCC_ClockConfig+0x126>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0xd4>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80037d8:	4a26      	ldr	r2, [pc, #152]	@ (8003874 <HAL_RCC_ClockConfig+0x164>)
 80037da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037dc:	0792      	lsls	r2, r2, #30
 80037de:	d4e0      	bmi.n	80037a2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80037e0:	2001      	movs	r0, #1
 80037e2:	e028      	b.n	8003836 <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80037e4:	4a23      	ldr	r2, [pc, #140]	@ (8003874 <HAL_RCC_ClockConfig+0x164>)
 80037e6:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80037e8:	0792      	lsls	r2, r2, #30
 80037ea:	d4da      	bmi.n	80037a2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80037ec:	2001      	movs	r0, #1
 80037ee:	e022      	b.n	8003836 <HAL_RCC_ClockConfig+0x126>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003870 <HAL_RCC_ClockConfig+0x160>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	2307      	movs	r3, #7
 80037f6:	4013      	ands	r3, r2
 80037f8:	42ab      	cmp	r3, r5
 80037fa:	d81d      	bhi.n	8003838 <HAL_RCC_ClockConfig+0x128>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	075b      	lsls	r3, r3, #29
 8003800:	d506      	bpl.n	8003810 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003802:	4a1c      	ldr	r2, [pc, #112]	@ (8003874 <HAL_RCC_ClockConfig+0x164>)
 8003804:	6893      	ldr	r3, [r2, #8]
 8003806:	491f      	ldr	r1, [pc, #124]	@ (8003884 <HAL_RCC_ClockConfig+0x174>)
 8003808:	400b      	ands	r3, r1
 800380a:	6921      	ldr	r1, [r4, #16]
 800380c:	430b      	orrs	r3, r1
 800380e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003810:	f7ff ff4e 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8003814:	4b17      	ldr	r3, [pc, #92]	@ (8003874 <HAL_RCC_ClockConfig+0x164>)
 8003816:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003818:	0a12      	lsrs	r2, r2, #8
 800381a:	230f      	movs	r3, #15
 800381c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800381e:	4a1a      	ldr	r2, [pc, #104]	@ (8003888 <HAL_RCC_ClockConfig+0x178>)
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003824:	231f      	movs	r3, #31
 8003826:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003828:	40d8      	lsrs	r0, r3
 800382a:	4b18      	ldr	r3, [pc, #96]	@ (800388c <HAL_RCC_ClockConfig+0x17c>)
 800382c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800382e:	4b18      	ldr	r3, [pc, #96]	@ (8003890 <HAL_RCC_ClockConfig+0x180>)
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	f7ff f809 	bl	8002848 <HAL_InitTick>
}
 8003836:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003838:	4a0d      	ldr	r2, [pc, #52]	@ (8003870 <HAL_RCC_ClockConfig+0x160>)
 800383a:	6813      	ldr	r3, [r2, #0]
 800383c:	2107      	movs	r1, #7
 800383e:	438b      	bics	r3, r1
 8003840:	432b      	orrs	r3, r5
 8003842:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003844:	f7ff f844 	bl	80028d0 <HAL_GetTick>
 8003848:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800384a:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <HAL_RCC_ClockConfig+0x160>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	2307      	movs	r3, #7
 8003850:	4013      	ands	r3, r2
 8003852:	42ab      	cmp	r3, r5
 8003854:	d0d2      	beq.n	80037fc <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003856:	f7ff f83b 	bl	80028d0 <HAL_GetTick>
 800385a:	1b80      	subs	r0, r0, r6
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <HAL_RCC_ClockConfig+0x170>)
 800385e:	4298      	cmp	r0, r3
 8003860:	d9f3      	bls.n	800384a <HAL_RCC_ClockConfig+0x13a>
        return HAL_TIMEOUT;
 8003862:	2003      	movs	r0, #3
 8003864:	e7e7      	b.n	8003836 <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 8003866:	2001      	movs	r0, #1
 8003868:	e7e5      	b.n	8003836 <HAL_RCC_ClockConfig+0x126>
        return HAL_ERROR;
 800386a:	2001      	movs	r0, #1
 800386c:	e7e3      	b.n	8003836 <HAL_RCC_ClockConfig+0x126>
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	40022000 	.word	0x40022000
 8003874:	40021000 	.word	0x40021000
 8003878:	ffff84ff 	.word	0xffff84ff
 800387c:	fffff0ff 	.word	0xfffff0ff
 8003880:	00001388 	.word	0x00001388
 8003884:	ffff8fff 	.word	0xffff8fff
 8003888:	08004e94 	.word	0x08004e94
 800388c:	20000020 	.word	0x20000020
 8003890:	20000028 	.word	0x20000028

08003894 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003896:	f7ff ff0b 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800389a:	4b07      	ldr	r3, [pc, #28]	@ (80038b8 <HAL_RCC_GetHCLKFreq+0x24>)
 800389c:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800389e:	0a12      	lsrs	r2, r2, #8
 80038a0:	230f      	movs	r3, #15
 80038a2:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80038a4:	4a05      	ldr	r2, [pc, #20]	@ (80038bc <HAL_RCC_GetHCLKFreq+0x28>)
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80038aa:	231f      	movs	r3, #31
 80038ac:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80038ae:	40d8      	lsrs	r0, r3
 80038b0:	4b03      	ldr	r3, [pc, #12]	@ (80038c0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80038b2:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80038b4:	bd10      	pop	{r4, pc}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	40021000 	.word	0x40021000
 80038bc:	08004e94 	.word	0x08004e94
 80038c0:	20000020 	.word	0x20000020

080038c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80038c6:	f7ff ffe5 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038ca:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	0b12      	lsrs	r2, r2, #12
 80038d0:	2307      	movs	r3, #7
 80038d2:	4013      	ands	r3, r2
 80038d4:	4a04      	ldr	r2, [pc, #16]	@ (80038e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	589a      	ldr	r2, [r3, r2]
 80038da:	231f      	movs	r3, #31
 80038dc:	4013      	ands	r3, r2
 80038de:	40d8      	lsrs	r0, r3
}
 80038e0:	bd10      	pop	{r4, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	40021000 	.word	0x40021000
 80038e8:	08004e74 	.word	0x08004e74

080038ec <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038f2:	6803      	ldr	r3, [r0, #0]
 80038f4:	065b      	lsls	r3, r3, #25
 80038f6:	d550      	bpl.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f8:	4b42      	ldr	r3, [pc, #264]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80038fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	d435      	bmi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003900:	4b40      	ldr	r3, [pc, #256]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003902:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003904:	2180      	movs	r1, #128	@ 0x80
 8003906:	0549      	lsls	r1, r1, #21
 8003908:	430a      	orrs	r2, r1
 800390a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800390c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390e:	400b      	ands	r3, r1
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003914:	2501      	movs	r5, #1
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003916:	4b3b      	ldr	r3, [pc, #236]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003918:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800391a:	22c0      	movs	r2, #192	@ 0xc0
 800391c:	0092      	lsls	r2, r2, #2
 800391e:	000b      	movs	r3, r1
 8003920:	4013      	ands	r3, r2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003922:	4211      	tst	r1, r2
 8003924:	d035      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8003926:	69a2      	ldr	r2, [r4, #24]
 8003928:	429a      	cmp	r2, r3
 800392a:	d00d      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800392c:	4a35      	ldr	r2, [pc, #212]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800392e:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8003930:	4935      	ldr	r1, [pc, #212]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8003932:	400b      	ands	r3, r1
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003934:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8003936:	2180      	movs	r1, #128	@ 0x80
 8003938:	0249      	lsls	r1, r1, #9
 800393a:	4301      	orrs	r1, r0
 800393c:	65d1      	str	r1, [r2, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800393e:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8003940:	4832      	ldr	r0, [pc, #200]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8003942:	4001      	ands	r1, r0
 8003944:	65d1      	str	r1, [r2, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003946:	65d3      	str	r3, [r2, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003948:	07db      	lsls	r3, r3, #31
 800394a:	d411      	bmi.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800394c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800394e:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8003950:	492d      	ldr	r1, [pc, #180]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8003952:	400b      	ands	r3, r1
 8003954:	69a1      	ldr	r1, [r4, #24]
 8003956:	430b      	orrs	r3, r1
 8003958:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800395a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800395c:	2d01      	cmp	r5, #1
 800395e:	d11d      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003960:	4a28      	ldr	r2, [pc, #160]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003962:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8003964:	492a      	ldr	r1, [pc, #168]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003966:	400b      	ands	r3, r1
 8003968:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800396a:	e017      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    FlagStatus       pwrclkchanged = RESET;
 800396c:	2500      	movs	r5, #0
 800396e:	e7d2      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      tickstart = HAL_GetTick();
 8003970:	f7fe ffae 	bl	80028d0 <HAL_GetTick>
 8003974:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003976:	4b23      	ldr	r3, [pc, #140]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397a:	079b      	lsls	r3, r3, #30
 800397c:	d407      	bmi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fe ffa7 	bl	80028d0 <HAL_GetTick>
 8003982:	1b80      	subs	r0, r0, r6
 8003984:	4b23      	ldr	r3, [pc, #140]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003986:	4298      	cmp	r0, r3
 8003988:	d9f5      	bls.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x8a>
          ret = HAL_TIMEOUT;
 800398a:	2003      	movs	r0, #3
 800398c:	e002      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800398e:	2000      	movs	r0, #0
 8003990:	e000      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8003992:	2000      	movs	r0, #0
    if (ret == HAL_OK)
 8003994:	2800      	cmp	r0, #0
 8003996:	d1e1      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003998:	e7d8      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800399a:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	07db      	lsls	r3, r3, #31
 80039a0:	d506      	bpl.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a2:	4a18      	ldr	r2, [pc, #96]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80039a4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80039a6:	2103      	movs	r1, #3
 80039a8:	438b      	bics	r3, r1
 80039aa:	68a1      	ldr	r1, [r4, #8]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	079b      	lsls	r3, r3, #30
 80039b4:	d506      	bpl.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039b6:	4a13      	ldr	r2, [pc, #76]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80039b8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80039ba:	4917      	ldr	r1, [pc, #92]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80039bc:	400b      	ands	r3, r1
 80039be:	68e1      	ldr	r1, [r4, #12]
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	069b      	lsls	r3, r3, #26
 80039c8:	d506      	bpl.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80039cc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	089b      	lsrs	r3, r3, #2
 80039d2:	6961      	ldr	r1, [r4, #20]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	075b      	lsls	r3, r3, #29
 80039dc:	d506      	bpl.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80039de:	4a09      	ldr	r2, [pc, #36]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80039e0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80039e2:	490e      	ldr	r1, [pc, #56]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039e4:	400b      	ands	r3, r1
 80039e6:	6921      	ldr	r1, [r4, #16]
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6553      	str	r3, [r2, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	061b      	lsls	r3, r3, #24
 80039f0:	d506      	bpl.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80039f2:	4a04      	ldr	r2, [pc, #16]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80039f4:	6813      	ldr	r3, [r2, #0]
 80039f6:	21e0      	movs	r1, #224	@ 0xe0
 80039f8:	438b      	bics	r3, r1
 80039fa:	6861      	ldr	r1, [r4, #4]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 8003a00:	b002      	add	sp, #8
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
 8003a04:	40021000 	.word	0x40021000
 8003a08:	fffffcff 	.word	0xfffffcff
 8003a0c:	fffeffff 	.word	0xfffeffff
 8003a10:	efffffff 	.word	0xefffffff
 8003a14:	00001388 	.word	0x00001388
 8003a18:	ffffcfff 	.word	0xffffcfff
 8003a1c:	ffff3fff 	.word	0xffff3fff

08003a20 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a20:	233d      	movs	r3, #61	@ 0x3d
 8003a22:	5cc3      	ldrb	r3, [r0, r3]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d122      	bne.n	8003a6e <HAL_TIM_Base_Start_IT+0x4e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	333c      	adds	r3, #60	@ 0x3c
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a2e:	6802      	ldr	r2, [r0, #0]
 8003a30:	68d3      	ldr	r3, [r2, #12]
 8003a32:	2101      	movs	r1, #1
 8003a34:	430b      	orrs	r3, r1
 8003a36:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a38:	6803      	ldr	r3, [r0, #0]
 8003a3a:	4a10      	ldr	r2, [pc, #64]	@ (8003a7c <HAL_TIM_Base_Start_IT+0x5c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d008      	beq.n	8003a52 <HAL_TIM_Base_Start_IT+0x32>
 8003a40:	4a0f      	ldr	r2, [pc, #60]	@ (8003a80 <HAL_TIM_Base_Start_IT+0x60>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d005      	beq.n	8003a52 <HAL_TIM_Base_Start_IT+0x32>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	2101      	movs	r1, #1
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a4e:	2000      	movs	r0, #0
 8003a50:	e00e      	b.n	8003a70 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	490b      	ldr	r1, [pc, #44]	@ (8003a84 <HAL_TIM_Base_Start_IT+0x64>)
 8003a56:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a58:	2a06      	cmp	r2, #6
 8003a5a:	d00a      	beq.n	8003a72 <HAL_TIM_Base_Start_IT+0x52>
 8003a5c:	3907      	subs	r1, #7
 8003a5e:	428a      	cmp	r2, r1
 8003a60:	d009      	beq.n	8003a76 <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	2101      	movs	r1, #1
 8003a66:	430a      	orrs	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8003a6e:	2001      	movs	r0, #1
}
 8003a70:	4770      	bx	lr
  return HAL_OK;
 8003a72:	2000      	movs	r0, #0
 8003a74:	e7fc      	b.n	8003a70 <HAL_TIM_Base_Start_IT+0x50>
 8003a76:	2000      	movs	r0, #0
 8003a78:	e7fa      	b.n	8003a70 <HAL_TIM_Base_Start_IT+0x50>
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40000400 	.word	0x40000400
 8003a84:	00010007 	.word	0x00010007

08003a88 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a88:	6802      	ldr	r2, [r0, #0]
 8003a8a:	68d3      	ldr	r3, [r2, #12]
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	438b      	bics	r3, r1
 8003a90:	60d3      	str	r3, [r2, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a92:	6803      	ldr	r3, [r0, #0]
 8003a94:	6a19      	ldr	r1, [r3, #32]
 8003a96:	4a08      	ldr	r2, [pc, #32]	@ (8003ab8 <HAL_TIM_Base_Stop_IT+0x30>)
 8003a98:	4211      	tst	r1, r2
 8003a9a:	d107      	bne.n	8003aac <HAL_TIM_Base_Stop_IT+0x24>
 8003a9c:	6a19      	ldr	r1, [r3, #32]
 8003a9e:	4a07      	ldr	r2, [pc, #28]	@ (8003abc <HAL_TIM_Base_Stop_IT+0x34>)
 8003aa0:	4211      	tst	r1, r2
 8003aa2:	d103      	bne.n	8003aac <HAL_TIM_Base_Stop_IT+0x24>
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003aac:	233d      	movs	r3, #61	@ 0x3d
 8003aae:	2201      	movs	r2, #1
 8003ab0:	54c2      	strb	r2, [r0, r3]

  /* Return function status */
  return HAL_OK;
}
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	4770      	bx	lr
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	00001111 	.word	0x00001111
 8003abc:	00000444 	.word	0x00000444

08003ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_IRQHandler>:
{
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8003acc:	6803      	ldr	r3, [r0, #0]
 8003ace:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ad0:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ad2:	07a2      	lsls	r2, r4, #30
 8003ad4:	d50e      	bpl.n	8003af4 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ad6:	07b2      	lsls	r2, r6, #30
 8003ad8:	d50c      	bpl.n	8003af4 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ada:	2203      	movs	r2, #3
 8003adc:	4252      	negs	r2, r2
 8003ade:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae4:	6803      	ldr	r3, [r0, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	079b      	lsls	r3, r3, #30
 8003aea:	d057      	beq.n	8003b9c <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 8003aec:	f7ff ffe9 	bl	8003ac2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af0:	2300      	movs	r3, #0
 8003af2:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003af4:	0763      	lsls	r3, r4, #29
 8003af6:	d512      	bpl.n	8003b1e <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003af8:	0773      	lsls	r3, r6, #29
 8003afa:	d510      	bpl.n	8003b1e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	2205      	movs	r2, #5
 8003b00:	4252      	negs	r2, r2
 8003b02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b04:	2302      	movs	r3, #2
 8003b06:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	23c0      	movs	r3, #192	@ 0xc0
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	421a      	tst	r2, r3
 8003b12:	d049      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b14:	0028      	movs	r0, r5
 8003b16:	f7ff ffd4 	bl	8003ac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b1e:	0723      	lsls	r3, r4, #28
 8003b20:	d510      	bpl.n	8003b44 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b22:	0733      	lsls	r3, r6, #28
 8003b24:	d50e      	bpl.n	8003b44 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b26:	682b      	ldr	r3, [r5, #0]
 8003b28:	2209      	movs	r2, #9
 8003b2a:	4252      	negs	r2, r2
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b2e:	2304      	movs	r3, #4
 8003b30:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b32:	682b      	ldr	r3, [r5, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	079b      	lsls	r3, r3, #30
 8003b38:	d03d      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3a:	0028      	movs	r0, r5
 8003b3c:	f7ff ffc1 	bl	8003ac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b40:	2300      	movs	r3, #0
 8003b42:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b44:	06e3      	lsls	r3, r4, #27
 8003b46:	d512      	bpl.n	8003b6e <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b48:	06f3      	lsls	r3, r6, #27
 8003b4a:	d510      	bpl.n	8003b6e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	2211      	movs	r2, #17
 8003b50:	4252      	negs	r2, r2
 8003b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b54:	2308      	movs	r3, #8
 8003b56:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b58:	682b      	ldr	r3, [r5, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	23c0      	movs	r3, #192	@ 0xc0
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	421a      	tst	r2, r3
 8003b62:	d02f      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b64:	0028      	movs	r0, r5
 8003b66:	f7ff ffac 	bl	8003ac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b6e:	07e3      	lsls	r3, r4, #31
 8003b70:	d501      	bpl.n	8003b76 <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b72:	07f3      	lsls	r3, r6, #31
 8003b74:	d42d      	bmi.n	8003bd2 <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b76:	2382      	movs	r3, #130	@ 0x82
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	421c      	tst	r4, r3
 8003b7c:	d001      	beq.n	8003b82 <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b7e:	0633      	lsls	r3, r6, #24
 8003b80:	d42f      	bmi.n	8003be2 <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b82:	05e3      	lsls	r3, r4, #23
 8003b84:	d501      	bpl.n	8003b8a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b86:	0633      	lsls	r3, r6, #24
 8003b88:	d432      	bmi.n	8003bf0 <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b8a:	0663      	lsls	r3, r4, #25
 8003b8c:	d501      	bpl.n	8003b92 <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b8e:	0673      	lsls	r3, r6, #25
 8003b90:	d435      	bmi.n	8003bfe <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b92:	06a4      	lsls	r4, r4, #26
 8003b94:	d501      	bpl.n	8003b9a <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b96:	06b6      	lsls	r6, r6, #26
 8003b98:	d439      	bmi.n	8003c0e <HAL_TIM_IRQHandler+0x146>
}
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9c:	f7ff ff90 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	0028      	movs	r0, r5
 8003ba2:	f7ff ff8f 	bl	8003ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ba6:	e7a3      	b.n	8003af0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba8:	0028      	movs	r0, r5
 8003baa:	f7ff ff89 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bae:	0028      	movs	r0, r5
 8003bb0:	f7ff ff88 	bl	8003ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bb4:	e7b1      	b.n	8003b1a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	0028      	movs	r0, r5
 8003bb8:	f7ff ff82 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	0028      	movs	r0, r5
 8003bbe:	f7ff ff81 	bl	8003ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bc2:	e7bd      	b.n	8003b40 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc4:	0028      	movs	r0, r5
 8003bc6:	f7ff ff7b 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bca:	0028      	movs	r0, r5
 8003bcc:	f7ff ff7a 	bl	8003ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bd0:	e7cb      	b.n	8003b6a <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bd2:	682b      	ldr	r3, [r5, #0]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	4252      	negs	r2, r2
 8003bd8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bda:	0028      	movs	r0, r5
 8003bdc:	f7fe fb2a 	bl	8002234 <HAL_TIM_PeriodElapsedCallback>
 8003be0:	e7c9      	b.n	8003b76 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003be2:	682b      	ldr	r3, [r5, #0]
 8003be4:	4a0e      	ldr	r2, [pc, #56]	@ (8003c20 <HAL_TIM_IRQHandler+0x158>)
 8003be6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003be8:	0028      	movs	r0, r5
 8003bea:	f000 f894 	bl	8003d16 <HAL_TIMEx_BreakCallback>
 8003bee:	e7c8      	b.n	8003b82 <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8003c24 <HAL_TIM_IRQHandler+0x15c>)
 8003bf4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003bf6:	0028      	movs	r0, r5
 8003bf8:	f000 f88e 	bl	8003d18 <HAL_TIMEx_Break2Callback>
 8003bfc:	e7c5      	b.n	8003b8a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bfe:	682b      	ldr	r3, [r5, #0]
 8003c00:	2241      	movs	r2, #65	@ 0x41
 8003c02:	4252      	negs	r2, r2
 8003c04:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c06:	0028      	movs	r0, r5
 8003c08:	f7ff ff5d 	bl	8003ac6 <HAL_TIM_TriggerCallback>
 8003c0c:	e7c1      	b.n	8003b92 <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c0e:	682b      	ldr	r3, [r5, #0]
 8003c10:	2221      	movs	r2, #33	@ 0x21
 8003c12:	4252      	negs	r2, r2
 8003c14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003c16:	0028      	movs	r0, r5
 8003c18:	f000 f87c 	bl	8003d14 <HAL_TIMEx_CommutCallback>
}
 8003c1c:	e7bd      	b.n	8003b9a <HAL_TIM_IRQHandler+0xd2>
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	ffffdf7f 	.word	0xffffdf7f
 8003c24:	fffffeff 	.word	0xfffffeff

08003c28 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c28:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c9c <TIM_Base_SetConfig+0x74>)
 8003c2c:	4290      	cmp	r0, r2
 8003c2e:	d002      	beq.n	8003c36 <TIM_Base_SetConfig+0xe>
 8003c30:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca0 <TIM_Base_SetConfig+0x78>)
 8003c32:	4290      	cmp	r0, r2
 8003c34:	d103      	bne.n	8003c3e <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c36:	2270      	movs	r2, #112	@ 0x70
 8003c38:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003c3a:	684a      	ldr	r2, [r1, #4]
 8003c3c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c3e:	4a17      	ldr	r2, [pc, #92]	@ (8003c9c <TIM_Base_SetConfig+0x74>)
 8003c40:	4290      	cmp	r0, r2
 8003c42:	d00b      	beq.n	8003c5c <TIM_Base_SetConfig+0x34>
 8003c44:	4a16      	ldr	r2, [pc, #88]	@ (8003ca0 <TIM_Base_SetConfig+0x78>)
 8003c46:	4290      	cmp	r0, r2
 8003c48:	d008      	beq.n	8003c5c <TIM_Base_SetConfig+0x34>
 8003c4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ca4 <TIM_Base_SetConfig+0x7c>)
 8003c4c:	4290      	cmp	r0, r2
 8003c4e:	d005      	beq.n	8003c5c <TIM_Base_SetConfig+0x34>
 8003c50:	4a15      	ldr	r2, [pc, #84]	@ (8003ca8 <TIM_Base_SetConfig+0x80>)
 8003c52:	4290      	cmp	r0, r2
 8003c54:	d002      	beq.n	8003c5c <TIM_Base_SetConfig+0x34>
 8003c56:	4a15      	ldr	r2, [pc, #84]	@ (8003cac <TIM_Base_SetConfig+0x84>)
 8003c58:	4290      	cmp	r0, r2
 8003c5a:	d103      	bne.n	8003c64 <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c5c:	4a14      	ldr	r2, [pc, #80]	@ (8003cb0 <TIM_Base_SetConfig+0x88>)
 8003c5e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c60:	68ca      	ldr	r2, [r1, #12]
 8003c62:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c64:	2280      	movs	r2, #128	@ 0x80
 8003c66:	4393      	bics	r3, r2
 8003c68:	694a      	ldr	r2, [r1, #20]
 8003c6a:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6c:	688a      	ldr	r2, [r1, #8]
 8003c6e:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c70:	680a      	ldr	r2, [r1, #0]
 8003c72:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c74:	4a09      	ldr	r2, [pc, #36]	@ (8003c9c <TIM_Base_SetConfig+0x74>)
 8003c76:	4290      	cmp	r0, r2
 8003c78:	d005      	beq.n	8003c86 <TIM_Base_SetConfig+0x5e>
 8003c7a:	4a0b      	ldr	r2, [pc, #44]	@ (8003ca8 <TIM_Base_SetConfig+0x80>)
 8003c7c:	4290      	cmp	r0, r2
 8003c7e:	d002      	beq.n	8003c86 <TIM_Base_SetConfig+0x5e>
 8003c80:	4a0a      	ldr	r2, [pc, #40]	@ (8003cac <TIM_Base_SetConfig+0x84>)
 8003c82:	4290      	cmp	r0, r2
 8003c84:	d101      	bne.n	8003c8a <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c86:	690a      	ldr	r2, [r1, #16]
 8003c88:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003c8a:	6802      	ldr	r2, [r0, #0]
 8003c8c:	2104      	movs	r1, #4
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c92:	2201      	movs	r2, #1
 8003c94:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 8003c96:	6003      	str	r3, [r0, #0]
}
 8003c98:	4770      	bx	lr
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	40012c00 	.word	0x40012c00
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40002000 	.word	0x40002000
 8003ca8:	40014400 	.word	0x40014400
 8003cac:	40014800 	.word	0x40014800
 8003cb0:	fffffcff 	.word	0xfffffcff

08003cb4 <HAL_TIM_Base_Init>:
{
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003cb8:	d02a      	beq.n	8003d10 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003cba:	233d      	movs	r3, #61	@ 0x3d
 8003cbc:	5cc3      	ldrb	r3, [r0, r3]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d020      	beq.n	8003d04 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc2:	253d      	movs	r5, #61	@ 0x3d
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc8:	0021      	movs	r1, r4
 8003cca:	c901      	ldmia	r1!, {r0}
 8003ccc:	f7ff ffac 	bl	8003c28 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	2248      	movs	r2, #72	@ 0x48
 8003cd4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd6:	3a0a      	subs	r2, #10
 8003cd8:	54a3      	strb	r3, [r4, r2]
 8003cda:	3201      	adds	r2, #1
 8003cdc:	54a3      	strb	r3, [r4, r2]
 8003cde:	3201      	adds	r2, #1
 8003ce0:	54a3      	strb	r3, [r4, r2]
 8003ce2:	3201      	adds	r2, #1
 8003ce4:	54a3      	strb	r3, [r4, r2]
 8003ce6:	3201      	adds	r2, #1
 8003ce8:	54a3      	strb	r3, [r4, r2]
 8003cea:	3201      	adds	r2, #1
 8003cec:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cee:	3201      	adds	r2, #1
 8003cf0:	54a3      	strb	r3, [r4, r2]
 8003cf2:	3201      	adds	r2, #1
 8003cf4:	54a3      	strb	r3, [r4, r2]
 8003cf6:	3201      	adds	r2, #1
 8003cf8:	54a3      	strb	r3, [r4, r2]
 8003cfa:	3201      	adds	r2, #1
 8003cfc:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003cfe:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003d00:	2000      	movs	r0, #0
}
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d04:	333c      	adds	r3, #60	@ 0x3c
 8003d06:	2200      	movs	r2, #0
 8003d08:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003d0a:	f7fe fcc1 	bl	8002690 <HAL_TIM_Base_MspInit>
 8003d0e:	e7d8      	b.n	8003cc2 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8003d10:	2001      	movs	r0, #1
 8003d12:	e7f6      	b.n	8003d02 <HAL_TIM_Base_Init+0x4e>

08003d14 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d14:	4770      	bx	lr

08003d16 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d18:	4770      	bx	lr
	...

08003d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d1c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d1e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	2201      	movs	r2, #1
 8003d24:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d28:	6801      	ldr	r1, [r0, #0]
 8003d2a:	680b      	ldr	r3, [r1, #0]
 8003d2c:	4d12      	ldr	r5, [pc, #72]	@ (8003d78 <UART_EndRxTransfer+0x5c>)
 8003d2e:	402b      	ands	r3, r5
 8003d30:	600b      	str	r3, [r1, #0]
 8003d32:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d36:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d3e:	6802      	ldr	r2, [r0, #0]
 8003d40:	6893      	ldr	r3, [r2, #8]
 8003d42:	4c0e      	ldr	r4, [pc, #56]	@ (8003d7c <UART_EndRxTransfer+0x60>)
 8003d44:	4023      	ands	r3, r4
 8003d46:	6093      	str	r3, [r2, #8]
 8003d48:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d4c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d006      	beq.n	8003d60 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d52:	238c      	movs	r3, #140	@ 0x8c
 8003d54:	2220      	movs	r2, #32
 8003d56:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d5c:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8003d5e:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d60:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d64:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d68:	6802      	ldr	r2, [r0, #0]
 8003d6a:	6813      	ldr	r3, [r2, #0]
 8003d6c:	2410      	movs	r4, #16
 8003d6e:	43a3      	bics	r3, r4
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	f381 8810 	msr	PRIMASK, r1
}
 8003d76:	e7ec      	b.n	8003d52 <UART_EndRxTransfer+0x36>
 8003d78:	fffffedf 	.word	0xfffffedf
 8003d7c:	effffffe 	.word	0xeffffffe

08003d80 <UART_SetConfig>:
{
 8003d80:	b510      	push	{r4, lr}
 8003d82:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d84:	6883      	ldr	r3, [r0, #8]
 8003d86:	6902      	ldr	r2, [r0, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	6942      	ldr	r2, [r0, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	69c2      	ldr	r2, [r0, #28]
 8003d90:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d92:	6801      	ldr	r1, [r0, #0]
 8003d94:	680a      	ldr	r2, [r1, #0]
 8003d96:	4862      	ldr	r0, [pc, #392]	@ (8003f20 <UART_SetConfig+0x1a0>)
 8003d98:	4002      	ands	r2, r0
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d9e:	6822      	ldr	r2, [r4, #0]
 8003da0:	6853      	ldr	r3, [r2, #4]
 8003da2:	4960      	ldr	r1, [pc, #384]	@ (8003f24 <UART_SetConfig+0x1a4>)
 8003da4:	400b      	ands	r3, r1
 8003da6:	68e1      	ldr	r1, [r4, #12]
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dac:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8003dae:	6a22      	ldr	r2, [r4, #32]
 8003db0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003db2:	6821      	ldr	r1, [r4, #0]
 8003db4:	688b      	ldr	r3, [r1, #8]
 8003db6:	485c      	ldr	r0, [pc, #368]	@ (8003f28 <UART_SetConfig+0x1a8>)
 8003db8:	4003      	ands	r3, r0
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003dbe:	6822      	ldr	r2, [r4, #0]
 8003dc0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003dc2:	210f      	movs	r1, #15
 8003dc4:	438b      	bics	r3, r1
 8003dc6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	4a57      	ldr	r2, [pc, #348]	@ (8003f2c <UART_SetConfig+0x1ac>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d030      	beq.n	8003e36 <UART_SetConfig+0xb6>
 8003dd4:	4a56      	ldr	r2, [pc, #344]	@ (8003f30 <UART_SetConfig+0x1b0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d03e      	beq.n	8003e58 <UART_SetConfig+0xd8>
 8003dda:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ddc:	69e0      	ldr	r0, [r4, #28]
 8003dde:	2280      	movs	r2, #128	@ 0x80
 8003de0:	0212      	lsls	r2, r2, #8
 8003de2:	4290      	cmp	r0, r2
 8003de4:	d042      	beq.n	8003e6c <UART_SetConfig+0xec>
    switch (clocksource)
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d100      	bne.n	8003dec <UART_SetConfig+0x6c>
 8003dea:	e089      	b.n	8003f00 <UART_SetConfig+0x180>
 8003dec:	d87b      	bhi.n	8003ee6 <UART_SetConfig+0x166>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d100      	bne.n	8003df4 <UART_SetConfig+0x74>
 8003df2:	e07f      	b.n	8003ef4 <UART_SetConfig+0x174>
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d174      	bne.n	8003ee2 <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003df8:	4b4e      	ldr	r3, [pc, #312]	@ (8003f34 <UART_SetConfig+0x1b4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	2107      	movs	r1, #7
 8003e00:	4019      	ands	r1, r3
 8003e02:	3101      	adds	r1, #1
 8003e04:	484c      	ldr	r0, [pc, #304]	@ (8003f38 <UART_SetConfig+0x1b8>)
 8003e06:	f7fc f991 	bl	800012c <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e0a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f3c <UART_SetConfig+0x1bc>)
 8003e0e:	0052      	lsls	r2, r2, #1
 8003e10:	5ad1      	ldrh	r1, [r2, r3]
 8003e12:	f7fc f98b 	bl	800012c <__udivsi3>
 8003e16:	6861      	ldr	r1, [r4, #4]
 8003e18:	084b      	lsrs	r3, r1, #1
 8003e1a:	18c0      	adds	r0, r0, r3
 8003e1c:	f7fc f986 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e20:	0002      	movs	r2, r0
 8003e22:	3a10      	subs	r2, #16
 8003e24:	4b46      	ldr	r3, [pc, #280]	@ (8003f40 <UART_SetConfig+0x1c0>)
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d86f      	bhi.n	8003f0a <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	0400      	lsls	r0, r0, #16
 8003e2e:	0c00      	lsrs	r0, r0, #16
 8003e30:	60d8      	str	r0, [r3, #12]
 8003e32:	2000      	movs	r0, #0
 8003e34:	e06a      	b.n	8003f0c <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e36:	4b3f      	ldr	r3, [pc, #252]	@ (8003f34 <UART_SetConfig+0x1b4>)
 8003e38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d00c      	beq.n	8003e5c <UART_SetConfig+0xdc>
 8003e42:	d805      	bhi.n	8003e50 <UART_SetConfig+0xd0>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <UART_SetConfig+0xe0>
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d10b      	bne.n	8003e64 <UART_SetConfig+0xe4>
 8003e4c:	3303      	adds	r3, #3
 8003e4e:	e7c5      	b.n	8003ddc <UART_SetConfig+0x5c>
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d109      	bne.n	8003e68 <UART_SetConfig+0xe8>
 8003e54:	3305      	adds	r3, #5
 8003e56:	e7c1      	b.n	8003ddc <UART_SetConfig+0x5c>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e7bf      	b.n	8003ddc <UART_SetConfig+0x5c>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e7bd      	b.n	8003ddc <UART_SetConfig+0x5c>
 8003e60:	2300      	movs	r3, #0
 8003e62:	e7bb      	b.n	8003ddc <UART_SetConfig+0x5c>
 8003e64:	2310      	movs	r3, #16
 8003e66:	e7b9      	b.n	8003ddc <UART_SetConfig+0x5c>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	e7b7      	b.n	8003ddc <UART_SetConfig+0x5c>
    switch (clocksource)
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d035      	beq.n	8003edc <UART_SetConfig+0x15c>
 8003e70:	d82a      	bhi.n	8003ec8 <UART_SetConfig+0x148>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d02c      	beq.n	8003ed0 <UART_SetConfig+0x150>
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d124      	bne.n	8003ec4 <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8003f34 <UART_SetConfig+0x1b4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	2107      	movs	r1, #7
 8003e82:	4019      	ands	r1, r3
 8003e84:	3101      	adds	r1, #1
 8003e86:	482c      	ldr	r0, [pc, #176]	@ (8003f38 <UART_SetConfig+0x1b8>)
 8003e88:	f7fc f950 	bl	800012c <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e8c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8003f3c <UART_SetConfig+0x1bc>)
 8003e90:	0052      	lsls	r2, r2, #1
 8003e92:	5ad1      	ldrh	r1, [r2, r3]
 8003e94:	f7fc f94a 	bl	800012c <__udivsi3>
 8003e98:	0040      	lsls	r0, r0, #1
 8003e9a:	6861      	ldr	r1, [r4, #4]
 8003e9c:	084b      	lsrs	r3, r1, #1
 8003e9e:	18c0      	adds	r0, r0, r3
 8003ea0:	f7fc f944 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	3a10      	subs	r2, #16
 8003ea8:	4b25      	ldr	r3, [pc, #148]	@ (8003f40 <UART_SetConfig+0x1c0>)
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d82b      	bhi.n	8003f06 <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eae:	b282      	uxth	r2, r0
 8003eb0:	230f      	movs	r3, #15
 8003eb2:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eb4:	0840      	lsrs	r0, r0, #1
 8003eb6:	3b08      	subs	r3, #8
 8003eb8:	4003      	ands	r3, r0
 8003eba:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8003ebc:	6822      	ldr	r2, [r4, #0]
 8003ebe:	60d3      	str	r3, [r2, #12]
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	e023      	b.n	8003f0c <UART_SetConfig+0x18c>
    switch (clocksource)
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	e021      	b.n	8003f0c <UART_SetConfig+0x18c>
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d0df      	beq.n	8003e8c <UART_SetConfig+0x10c>
 8003ecc:	2001      	movs	r0, #1
 8003ece:	e01d      	b.n	8003f0c <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed0:	f7ff fcf8 	bl	80038c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d1d9      	bne.n	8003e8c <UART_SetConfig+0x10c>
 8003ed8:	2000      	movs	r0, #0
 8003eda:	e017      	b.n	8003f0c <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003edc:	f7ff fbe8 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
        break;
 8003ee0:	e7f8      	b.n	8003ed4 <UART_SetConfig+0x154>
    switch (clocksource)
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	e012      	b.n	8003f0c <UART_SetConfig+0x18c>
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d102      	bne.n	8003ef0 <UART_SetConfig+0x170>
 8003eea:	2080      	movs	r0, #128	@ 0x80
 8003eec:	0200      	lsls	r0, r0, #8
 8003eee:	e78c      	b.n	8003e0a <UART_SetConfig+0x8a>
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	e00b      	b.n	8003f0c <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef4:	f7ff fce6 	bl	80038c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d186      	bne.n	8003e0a <UART_SetConfig+0x8a>
 8003efc:	2000      	movs	r0, #0
 8003efe:	e005      	b.n	8003f0c <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003f00:	f7ff fbd6 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
        break;
 8003f04:	e7f8      	b.n	8003ef8 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 8003f06:	2001      	movs	r0, #1
 8003f08:	e000      	b.n	8003f0c <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 8003f0a:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	226a      	movs	r2, #106	@ 0x6a
 8003f10:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8003f12:	3a02      	subs	r2, #2
 8003f14:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f1a:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8003f1c:	bd10      	pop	{r4, pc}
 8003f1e:	46c0      	nop			@ (mov r8, r8)
 8003f20:	cfff69f3 	.word	0xcfff69f3
 8003f24:	ffffcfff 	.word	0xffffcfff
 8003f28:	11fff4ff 	.word	0x11fff4ff
 8003f2c:	40013800 	.word	0x40013800
 8003f30:	40004400 	.word	0x40004400
 8003f34:	40021000 	.word	0x40021000
 8003f38:	02dc6c00 	.word	0x02dc6c00
 8003f3c:	08004ed4 	.word	0x08004ed4
 8003f40:	0000ffef 	.word	0x0000ffef

08003f44 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f44:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003f46:	071b      	lsls	r3, r3, #28
 8003f48:	d506      	bpl.n	8003f58 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f4a:	6802      	ldr	r2, [r0, #0]
 8003f4c:	6853      	ldr	r3, [r2, #4]
 8003f4e:	492c      	ldr	r1, [pc, #176]	@ (8004000 <UART_AdvFeatureConfig+0xbc>)
 8003f50:	400b      	ands	r3, r1
 8003f52:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f58:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003f5a:	07db      	lsls	r3, r3, #31
 8003f5c:	d506      	bpl.n	8003f6c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f5e:	6802      	ldr	r2, [r0, #0]
 8003f60:	6853      	ldr	r3, [r2, #4]
 8003f62:	4928      	ldr	r1, [pc, #160]	@ (8004004 <UART_AdvFeatureConfig+0xc0>)
 8003f64:	400b      	ands	r3, r1
 8003f66:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f6c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003f6e:	079b      	lsls	r3, r3, #30
 8003f70:	d506      	bpl.n	8003f80 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f72:	6802      	ldr	r2, [r0, #0]
 8003f74:	6853      	ldr	r3, [r2, #4]
 8003f76:	4924      	ldr	r1, [pc, #144]	@ (8004008 <UART_AdvFeatureConfig+0xc4>)
 8003f78:	400b      	ands	r3, r1
 8003f7a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f80:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003f82:	075b      	lsls	r3, r3, #29
 8003f84:	d506      	bpl.n	8003f94 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f86:	6802      	ldr	r2, [r0, #0]
 8003f88:	6853      	ldr	r3, [r2, #4]
 8003f8a:	4920      	ldr	r1, [pc, #128]	@ (800400c <UART_AdvFeatureConfig+0xc8>)
 8003f8c:	400b      	ands	r3, r1
 8003f8e:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f94:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003f96:	06db      	lsls	r3, r3, #27
 8003f98:	d506      	bpl.n	8003fa8 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f9a:	6802      	ldr	r2, [r0, #0]
 8003f9c:	6893      	ldr	r3, [r2, #8]
 8003f9e:	491c      	ldr	r1, [pc, #112]	@ (8004010 <UART_AdvFeatureConfig+0xcc>)
 8003fa0:	400b      	ands	r3, r1
 8003fa2:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fa8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003faa:	069b      	lsls	r3, r3, #26
 8003fac:	d506      	bpl.n	8003fbc <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fae:	6802      	ldr	r2, [r0, #0]
 8003fb0:	6893      	ldr	r3, [r2, #8]
 8003fb2:	4918      	ldr	r1, [pc, #96]	@ (8004014 <UART_AdvFeatureConfig+0xd0>)
 8003fb4:	400b      	ands	r3, r1
 8003fb6:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fbc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003fbe:	065b      	lsls	r3, r3, #25
 8003fc0:	d50b      	bpl.n	8003fda <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fc2:	6802      	ldr	r2, [r0, #0]
 8003fc4:	6853      	ldr	r3, [r2, #4]
 8003fc6:	4914      	ldr	r1, [pc, #80]	@ (8004018 <UART_AdvFeatureConfig+0xd4>)
 8003fc8:	400b      	ands	r3, r1
 8003fca:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fd0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003fd2:	2380      	movs	r3, #128	@ 0x80
 8003fd4:	035b      	lsls	r3, r3, #13
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d00a      	beq.n	8003ff0 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fda:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	d506      	bpl.n	8003fee <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fe0:	6802      	ldr	r2, [r0, #0]
 8003fe2:	6853      	ldr	r3, [r2, #4]
 8003fe4:	490d      	ldr	r1, [pc, #52]	@ (800401c <UART_AdvFeatureConfig+0xd8>)
 8003fe6:	400b      	ands	r3, r1
 8003fe8:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003fea:	430b      	orrs	r3, r1
 8003fec:	6053      	str	r3, [r2, #4]
}
 8003fee:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ff0:	6802      	ldr	r2, [r0, #0]
 8003ff2:	6853      	ldr	r3, [r2, #4]
 8003ff4:	490a      	ldr	r1, [pc, #40]	@ (8004020 <UART_AdvFeatureConfig+0xdc>)
 8003ff6:	400b      	ands	r3, r1
 8003ff8:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	6053      	str	r3, [r2, #4]
 8003ffe:	e7ec      	b.n	8003fda <UART_AdvFeatureConfig+0x96>
 8004000:	ffff7fff 	.word	0xffff7fff
 8004004:	fffdffff 	.word	0xfffdffff
 8004008:	fffeffff 	.word	0xfffeffff
 800400c:	fffbffff 	.word	0xfffbffff
 8004010:	ffffefff 	.word	0xffffefff
 8004014:	ffffdfff 	.word	0xffffdfff
 8004018:	ffefffff 	.word	0xffefffff
 800401c:	fff7ffff 	.word	0xfff7ffff
 8004020:	ff9fffff 	.word	0xff9fffff

08004024 <UART_WaitOnFlagUntilTimeout>:
{
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	46ce      	mov	lr, r9
 8004028:	4647      	mov	r7, r8
 800402a:	b580      	push	{r7, lr}
 800402c:	0006      	movs	r6, r0
 800402e:	000d      	movs	r5, r1
 8004030:	0017      	movs	r7, r2
 8004032:	4699      	mov	r9, r3
 8004034:	9b08      	ldr	r3, [sp, #32]
 8004036:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004038:	6833      	ldr	r3, [r6, #0]
 800403a:	69dc      	ldr	r4, [r3, #28]
 800403c:	402c      	ands	r4, r5
 800403e:	1b64      	subs	r4, r4, r5
 8004040:	4263      	negs	r3, r4
 8004042:	415c      	adcs	r4, r3
 8004044:	42bc      	cmp	r4, r7
 8004046:	d133      	bne.n	80040b0 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8004048:	4643      	mov	r3, r8
 800404a:	3301      	adds	r3, #1
 800404c:	d0f4      	beq.n	8004038 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fe fc3f 	bl	80028d0 <HAL_GetTick>
 8004052:	464b      	mov	r3, r9
 8004054:	1ac0      	subs	r0, r0, r3
 8004056:	4540      	cmp	r0, r8
 8004058:	d82f      	bhi.n	80040ba <UART_WaitOnFlagUntilTimeout+0x96>
 800405a:	4643      	mov	r3, r8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02e      	beq.n	80040be <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004060:	6832      	ldr	r2, [r6, #0]
 8004062:	6813      	ldr	r3, [r2, #0]
 8004064:	075b      	lsls	r3, r3, #29
 8004066:	d5e7      	bpl.n	8004038 <UART_WaitOnFlagUntilTimeout+0x14>
 8004068:	2d80      	cmp	r5, #128	@ 0x80
 800406a:	d0e5      	beq.n	8004038 <UART_WaitOnFlagUntilTimeout+0x14>
 800406c:	2d40      	cmp	r5, #64	@ 0x40
 800406e:	d0e3      	beq.n	8004038 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004070:	69d3      	ldr	r3, [r2, #28]
 8004072:	071b      	lsls	r3, r3, #28
 8004074:	d410      	bmi.n	8004098 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004076:	69d3      	ldr	r3, [r2, #28]
 8004078:	051b      	lsls	r3, r3, #20
 800407a:	d5dd      	bpl.n	8004038 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800407c:	2380      	movs	r3, #128	@ 0x80
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 8004082:	0030      	movs	r0, r6
 8004084:	f7ff fe4a 	bl	8003d1c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004088:	2390      	movs	r3, #144	@ 0x90
 800408a:	2220      	movs	r2, #32
 800408c:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 800408e:	3b0c      	subs	r3, #12
 8004090:	2200      	movs	r2, #0
 8004092:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8004094:	2003      	movs	r0, #3
 8004096:	e00c      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004098:	2408      	movs	r4, #8
 800409a:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 800409c:	0030      	movs	r0, r6
 800409e:	f7ff fe3d 	bl	8003d1c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040a2:	2390      	movs	r3, #144	@ 0x90
 80040a4:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 80040a6:	3b0c      	subs	r3, #12
 80040a8:	2200      	movs	r2, #0
 80040aa:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 80040ac:	2001      	movs	r0, #1
 80040ae:	e000      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 80040b0:	2000      	movs	r0, #0
}
 80040b2:	bcc0      	pop	{r6, r7}
 80040b4:	46b9      	mov	r9, r7
 80040b6:	46b0      	mov	r8, r6
 80040b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80040ba:	2003      	movs	r0, #3
 80040bc:	e7f9      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x8e>
 80040be:	2003      	movs	r0, #3
 80040c0:	e7f7      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x8e>

080040c2 <HAL_UART_Transmit>:
{
 80040c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c4:	46c6      	mov	lr, r8
 80040c6:	b500      	push	{lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	0004      	movs	r4, r0
 80040cc:	000d      	movs	r5, r1
 80040ce:	4690      	mov	r8, r2
 80040d0:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80040d2:	2388      	movs	r3, #136	@ 0x88
 80040d4:	58c3      	ldr	r3, [r0, r3]
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d166      	bne.n	80041a8 <HAL_UART_Transmit+0xe6>
    if ((pData == NULL) || (Size == 0U))
 80040da:	2900      	cmp	r1, #0
 80040dc:	d069      	beq.n	80041b2 <HAL_UART_Transmit+0xf0>
 80040de:	2a00      	cmp	r2, #0
 80040e0:	d069      	beq.n	80041b6 <HAL_UART_Transmit+0xf4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e2:	6882      	ldr	r2, [r0, #8]
 80040e4:	2380      	movs	r3, #128	@ 0x80
 80040e6:	015b      	lsls	r3, r3, #5
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d104      	bne.n	80040f6 <HAL_UART_Transmit+0x34>
 80040ec:	6903      	ldr	r3, [r0, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 80040f2:	07cb      	lsls	r3, r1, #31
 80040f4:	d461      	bmi.n	80041ba <HAL_UART_Transmit+0xf8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f6:	2390      	movs	r3, #144	@ 0x90
 80040f8:	2200      	movs	r2, #0
 80040fa:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040fc:	3b08      	subs	r3, #8
 80040fe:	3221      	adds	r2, #33	@ 0x21
 8004100:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8004102:	f7fe fbe5 	bl	80028d0 <HAL_GetTick>
 8004106:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8004108:	2354      	movs	r3, #84	@ 0x54
 800410a:	4642      	mov	r2, r8
 800410c:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 800410e:	3302      	adds	r3, #2
 8004110:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004112:	68a2      	ldr	r2, [r4, #8]
 8004114:	2380      	movs	r3, #128	@ 0x80
 8004116:	015b      	lsls	r3, r3, #5
 8004118:	429a      	cmp	r2, r3
 800411a:	d002      	beq.n	8004122 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 800411c:	2300      	movs	r3, #0
 800411e:	4698      	mov	r8, r3
 8004120:	e018      	b.n	8004154 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004122:	6923      	ldr	r3, [r4, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02a      	beq.n	800417e <HAL_UART_Transmit+0xbc>
      pdata16bits = NULL;
 8004128:	2300      	movs	r3, #0
 800412a:	4698      	mov	r8, r3
 800412c:	e012      	b.n	8004154 <HAL_UART_Transmit+0x92>
        huart->gState = HAL_UART_STATE_READY;
 800412e:	2388      	movs	r3, #136	@ 0x88
 8004130:	2220      	movs	r2, #32
 8004132:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 8004134:	2003      	movs	r0, #3
 8004136:	e038      	b.n	80041aa <HAL_UART_Transmit+0xe8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004138:	4643      	mov	r3, r8
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	6822      	ldr	r2, [r4, #0]
 800413e:	05db      	lsls	r3, r3, #23
 8004140:	0ddb      	lsrs	r3, r3, #23
 8004142:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 8004144:	2302      	movs	r3, #2
 8004146:	469c      	mov	ip, r3
 8004148:	44e0      	add	r8, ip
      huart->TxXferCount--;
 800414a:	2356      	movs	r3, #86	@ 0x56
 800414c:	5ae2      	ldrh	r2, [r4, r3]
 800414e:	3a01      	subs	r2, #1
 8004150:	b292      	uxth	r2, r2
 8004152:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8004154:	2356      	movs	r3, #86	@ 0x56
 8004156:	5ae3      	ldrh	r3, [r4, r3]
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d012      	beq.n	8004184 <HAL_UART_Transmit+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800415e:	9600      	str	r6, [sp, #0]
 8004160:	003b      	movs	r3, r7
 8004162:	2200      	movs	r2, #0
 8004164:	2180      	movs	r1, #128	@ 0x80
 8004166:	0020      	movs	r0, r4
 8004168:	f7ff ff5c 	bl	8004024 <UART_WaitOnFlagUntilTimeout>
 800416c:	2800      	cmp	r0, #0
 800416e:	d1de      	bne.n	800412e <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 8004170:	2d00      	cmp	r5, #0
 8004172:	d0e1      	beq.n	8004138 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004174:	782a      	ldrb	r2, [r5, #0]
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800417a:	3501      	adds	r5, #1
 800417c:	e7e5      	b.n	800414a <HAL_UART_Transmit+0x88>
      pdata16bits = (const uint16_t *) pData;
 800417e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004180:	2500      	movs	r5, #0
 8004182:	e7e7      	b.n	8004154 <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004184:	9600      	str	r6, [sp, #0]
 8004186:	003b      	movs	r3, r7
 8004188:	2200      	movs	r2, #0
 800418a:	2140      	movs	r1, #64	@ 0x40
 800418c:	0020      	movs	r0, r4
 800418e:	f7ff ff49 	bl	8004024 <UART_WaitOnFlagUntilTimeout>
 8004192:	2800      	cmp	r0, #0
 8004194:	d103      	bne.n	800419e <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8004196:	2388      	movs	r3, #136	@ 0x88
 8004198:	2220      	movs	r2, #32
 800419a:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 800419c:	e005      	b.n	80041aa <HAL_UART_Transmit+0xe8>
      huart->gState = HAL_UART_STATE_READY;
 800419e:	2388      	movs	r3, #136	@ 0x88
 80041a0:	2220      	movs	r2, #32
 80041a2:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80041a4:	2003      	movs	r0, #3
 80041a6:	e000      	b.n	80041aa <HAL_UART_Transmit+0xe8>
    return HAL_BUSY;
 80041a8:	2002      	movs	r0, #2
}
 80041aa:	b002      	add	sp, #8
 80041ac:	bc80      	pop	{r7}
 80041ae:	46b8      	mov	r8, r7
 80041b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 80041b2:	2001      	movs	r0, #1
 80041b4:	e7f9      	b.n	80041aa <HAL_UART_Transmit+0xe8>
 80041b6:	2001      	movs	r0, #1
 80041b8:	e7f7      	b.n	80041aa <HAL_UART_Transmit+0xe8>
        return  HAL_ERROR;
 80041ba:	2001      	movs	r0, #1
 80041bc:	e7f5      	b.n	80041aa <HAL_UART_Transmit+0xe8>
	...

080041c0 <UART_CheckIdleState>:
{
 80041c0:	b530      	push	{r4, r5, lr}
 80041c2:	b083      	sub	sp, #12
 80041c4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c6:	2390      	movs	r3, #144	@ 0x90
 80041c8:	2200      	movs	r2, #0
 80041ca:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80041cc:	f7fe fb80 	bl	80028d0 <HAL_GetTick>
 80041d0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	071b      	lsls	r3, r3, #28
 80041d8:	d410      	bmi.n	80041fc <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	075b      	lsls	r3, r3, #29
 80041e0:	d42b      	bmi.n	800423a <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 80041e2:	2320      	movs	r3, #32
 80041e4:	2288      	movs	r2, #136	@ 0x88
 80041e6:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80041e8:	3204      	adds	r2, #4
 80041ea:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ec:	2300      	movs	r3, #0
 80041ee:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f0:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80041f2:	3a08      	subs	r2, #8
 80041f4:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80041f6:	2000      	movs	r0, #0
}
 80041f8:	b003      	add	sp, #12
 80041fa:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041fc:	2180      	movs	r1, #128	@ 0x80
 80041fe:	4b23      	ldr	r3, [pc, #140]	@ (800428c <UART_CheckIdleState+0xcc>)
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	0003      	movs	r3, r0
 8004204:	2200      	movs	r2, #0
 8004206:	0389      	lsls	r1, r1, #14
 8004208:	0020      	movs	r0, r4
 800420a:	f7ff ff0b 	bl	8004024 <UART_WaitOnFlagUntilTimeout>
 800420e:	2800      	cmp	r0, #0
 8004210:	d0e3      	beq.n	80041da <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004212:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004216:	2301      	movs	r3, #1
 8004218:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800421c:	6822      	ldr	r2, [r4, #0]
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	2080      	movs	r0, #128	@ 0x80
 8004222:	4383      	bics	r3, r0
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800422a:	2388      	movs	r3, #136	@ 0x88
 800422c:	2220      	movs	r2, #32
 800422e:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8004230:	3b04      	subs	r3, #4
 8004232:	2200      	movs	r2, #0
 8004234:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004236:	387d      	subs	r0, #125	@ 0x7d
 8004238:	e7de      	b.n	80041f8 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800423a:	2180      	movs	r1, #128	@ 0x80
 800423c:	4b13      	ldr	r3, [pc, #76]	@ (800428c <UART_CheckIdleState+0xcc>)
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	002b      	movs	r3, r5
 8004242:	2200      	movs	r2, #0
 8004244:	03c9      	lsls	r1, r1, #15
 8004246:	0020      	movs	r0, r4
 8004248:	f7ff feec 	bl	8004024 <UART_WaitOnFlagUntilTimeout>
 800424c:	2800      	cmp	r0, #0
 800424e:	d0c8      	beq.n	80041e2 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004250:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004254:	2201      	movs	r2, #1
 8004256:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800425a:	6821      	ldr	r1, [r4, #0]
 800425c:	680b      	ldr	r3, [r1, #0]
 800425e:	4d0c      	ldr	r5, [pc, #48]	@ (8004290 <UART_CheckIdleState+0xd0>)
 8004260:	402b      	ands	r3, r5
 8004262:	600b      	str	r3, [r1, #0]
 8004264:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004268:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004270:	6821      	ldr	r1, [r4, #0]
 8004272:	688b      	ldr	r3, [r1, #8]
 8004274:	4393      	bics	r3, r2
 8004276:	608b      	str	r3, [r1, #8]
 8004278:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800427c:	238c      	movs	r3, #140	@ 0x8c
 800427e:	321f      	adds	r2, #31
 8004280:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8004282:	3b08      	subs	r3, #8
 8004284:	2200      	movs	r2, #0
 8004286:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004288:	2003      	movs	r0, #3
 800428a:	e7b5      	b.n	80041f8 <UART_CheckIdleState+0x38>
 800428c:	01ffffff 	.word	0x01ffffff
 8004290:	fffffedf 	.word	0xfffffedf

08004294 <HAL_UART_Init>:
{
 8004294:	b510      	push	{r4, lr}
 8004296:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004298:	d030      	beq.n	80042fc <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 800429a:	2388      	movs	r3, #136	@ 0x88
 800429c:	58c3      	ldr	r3, [r0, r3]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d022      	beq.n	80042e8 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80042a2:	2388      	movs	r3, #136	@ 0x88
 80042a4:	2224      	movs	r2, #36	@ 0x24
 80042a6:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80042a8:	6822      	ldr	r2, [r4, #0]
 80042aa:	6813      	ldr	r3, [r2, #0]
 80042ac:	2101      	movs	r1, #1
 80042ae:	438b      	bics	r3, r1
 80042b0:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d11d      	bne.n	80042f4 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042b8:	0020      	movs	r0, r4
 80042ba:	f7ff fd61 	bl	8003d80 <UART_SetConfig>
 80042be:	2801      	cmp	r0, #1
 80042c0:	d011      	beq.n	80042e6 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c2:	6822      	ldr	r2, [r4, #0]
 80042c4:	6853      	ldr	r3, [r2, #4]
 80042c6:	490e      	ldr	r1, [pc, #56]	@ (8004300 <HAL_UART_Init+0x6c>)
 80042c8:	400b      	ands	r3, r1
 80042ca:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042cc:	6822      	ldr	r2, [r4, #0]
 80042ce:	6893      	ldr	r3, [r2, #8]
 80042d0:	212a      	movs	r1, #42	@ 0x2a
 80042d2:	438b      	bics	r3, r1
 80042d4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80042d6:	6822      	ldr	r2, [r4, #0]
 80042d8:	6813      	ldr	r3, [r2, #0]
 80042da:	3929      	subs	r1, #41	@ 0x29
 80042dc:	430b      	orrs	r3, r1
 80042de:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80042e0:	0020      	movs	r0, r4
 80042e2:	f7ff ff6d 	bl	80041c0 <UART_CheckIdleState>
}
 80042e6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80042e8:	3384      	adds	r3, #132	@ 0x84
 80042ea:	2200      	movs	r2, #0
 80042ec:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80042ee:	f7fe fa3f 	bl	8002770 <HAL_UART_MspInit>
 80042f2:	e7d6      	b.n	80042a2 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80042f4:	0020      	movs	r0, r4
 80042f6:	f7ff fe25 	bl	8003f44 <UART_AdvFeatureConfig>
 80042fa:	e7dd      	b.n	80042b8 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 80042fc:	2001      	movs	r0, #1
 80042fe:	e7f2      	b.n	80042e6 <HAL_UART_Init+0x52>
 8004300:	ffffb7ff 	.word	0xffffb7ff

08004304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004308:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 800430e:	3301      	adds	r3, #1
 8004310:	226a      	movs	r2, #106	@ 0x6a
 8004312:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 8004314:	3a02      	subs	r2, #2
 8004316:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800431a:	6802      	ldr	r2, [r0, #0]
 800431c:	6895      	ldr	r5, [r2, #8]
 800431e:	0e6d      	lsrs	r5, r5, #25
 8004320:	2307      	movs	r3, #7
 8004322:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004324:	6892      	ldr	r2, [r2, #8]
 8004326:	0f52      	lsrs	r2, r2, #29
 8004328:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800432a:	4f08      	ldr	r7, [pc, #32]	@ (800434c <UARTEx_SetNbDataToProcess+0x48>)
 800432c:	5cf8      	ldrb	r0, [r7, r3]
 800432e:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004330:	4e07      	ldr	r6, [pc, #28]	@ (8004350 <UARTEx_SetNbDataToProcess+0x4c>)
 8004332:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004334:	f7fb ff84 	bl	8000240 <__divsi3>
 8004338:	236a      	movs	r3, #106	@ 0x6a
 800433a:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800433c:	5d78      	ldrb	r0, [r7, r5]
 800433e:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004340:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004342:	f7fb ff7d 	bl	8000240 <__divsi3>
 8004346:	2368      	movs	r3, #104	@ 0x68
 8004348:	52e0      	strh	r0, [r4, r3]
}
 800434a:	e7e5      	b.n	8004318 <UARTEx_SetNbDataToProcess+0x14>
 800434c:	08004ef4 	.word	0x08004ef4
 8004350:	08004eec 	.word	0x08004eec

08004354 <HAL_UARTEx_DisableFifoMode>:
{
 8004354:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8004356:	2384      	movs	r3, #132	@ 0x84
 8004358:	5cc3      	ldrb	r3, [r0, r3]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d015      	beq.n	800438a <HAL_UARTEx_DisableFifoMode+0x36>
 800435e:	2484      	movs	r4, #132	@ 0x84
 8004360:	2601      	movs	r6, #1
 8004362:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8004364:	2588      	movs	r5, #136	@ 0x88
 8004366:	2324      	movs	r3, #36	@ 0x24
 8004368:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800436a:	6802      	ldr	r2, [r0, #0]
 800436c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800436e:	6811      	ldr	r1, [r2, #0]
 8004370:	43b1      	bics	r1, r6
 8004372:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004374:	4a06      	ldr	r2, [pc, #24]	@ (8004390 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8004376:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004378:	2200      	movs	r2, #0
 800437a:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800437c:	6801      	ldr	r1, [r0, #0]
 800437e:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004380:	2320      	movs	r3, #32
 8004382:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8004384:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8004386:	2000      	movs	r0, #0
}
 8004388:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800438a:	2002      	movs	r0, #2
 800438c:	e7fc      	b.n	8004388 <HAL_UARTEx_DisableFifoMode+0x34>
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	dfffffff 	.word	0xdfffffff

08004394 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	0004      	movs	r4, r0
 8004398:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800439a:	2384      	movs	r3, #132	@ 0x84
 800439c:	5cc3      	ldrb	r3, [r0, r3]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d01b      	beq.n	80043da <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80043a2:	2584      	movs	r5, #132	@ 0x84
 80043a4:	2001      	movs	r0, #1
 80043a6:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80043a8:	2688      	movs	r6, #136	@ 0x88
 80043aa:	2324      	movs	r3, #36	@ 0x24
 80043ac:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80043b2:	6819      	ldr	r1, [r3, #0]
 80043b4:	4381      	bics	r1, r0
 80043b6:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043b8:	6820      	ldr	r0, [r4, #0]
 80043ba:	6883      	ldr	r3, [r0, #8]
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	08d9      	lsrs	r1, r3, #3
 80043c0:	4311      	orrs	r1, r2
 80043c2:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 80043c4:	0020      	movs	r0, r4
 80043c6:	f7ff ff9d 	bl	8004304 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80043ce:	2320      	movs	r3, #32
 80043d0:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80043d2:	2300      	movs	r3, #0
 80043d4:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80043d6:	2000      	movs	r0, #0
}
 80043d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80043da:	2002      	movs	r0, #2
 80043dc:	e7fc      	b.n	80043d8 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

080043e0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	0004      	movs	r4, r0
 80043e4:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 80043e6:	2284      	movs	r2, #132	@ 0x84
 80043e8:	5c82      	ldrb	r2, [r0, r2]
 80043ea:	2a01      	cmp	r2, #1
 80043ec:	d01b      	beq.n	8004426 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80043ee:	2584      	movs	r5, #132	@ 0x84
 80043f0:	2001      	movs	r0, #1
 80043f2:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80043f4:	2688      	movs	r6, #136	@ 0x88
 80043f6:	2224      	movs	r2, #36	@ 0x24
 80043f8:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043fa:	6822      	ldr	r2, [r4, #0]
 80043fc:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80043fe:	6811      	ldr	r1, [r2, #0]
 8004400:	4381      	bics	r1, r0
 8004402:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004404:	6822      	ldr	r2, [r4, #0]
 8004406:	6891      	ldr	r1, [r2, #8]
 8004408:	4808      	ldr	r0, [pc, #32]	@ (800442c <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 800440a:	4001      	ands	r1, r0
 800440c:	4319      	orrs	r1, r3
 800440e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004410:	0020      	movs	r0, r4
 8004412:	f7ff ff77 	bl	8004304 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800441a:	2320      	movs	r3, #32
 800441c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800441e:	2300      	movs	r3, #0
 8004420:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004422:	2000      	movs	r0, #0
}
 8004424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8004426:	2002      	movs	r0, #2
 8004428:	e7fc      	b.n	8004424 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	f1ffffff 	.word	0xf1ffffff

08004430 <sniprintf>:
 8004430:	b40c      	push	{r2, r3}
 8004432:	b530      	push	{r4, r5, lr}
 8004434:	4b18      	ldr	r3, [pc, #96]	@ (8004498 <sniprintf+0x68>)
 8004436:	000c      	movs	r4, r1
 8004438:	681d      	ldr	r5, [r3, #0]
 800443a:	b09d      	sub	sp, #116	@ 0x74
 800443c:	2900      	cmp	r1, #0
 800443e:	da08      	bge.n	8004452 <sniprintf+0x22>
 8004440:	238b      	movs	r3, #139	@ 0x8b
 8004442:	2001      	movs	r0, #1
 8004444:	602b      	str	r3, [r5, #0]
 8004446:	4240      	negs	r0, r0
 8004448:	b01d      	add	sp, #116	@ 0x74
 800444a:	bc30      	pop	{r4, r5}
 800444c:	bc08      	pop	{r3}
 800444e:	b002      	add	sp, #8
 8004450:	4718      	bx	r3
 8004452:	2382      	movs	r3, #130	@ 0x82
 8004454:	466a      	mov	r2, sp
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	8293      	strh	r3, [r2, #20]
 800445a:	2300      	movs	r3, #0
 800445c:	9002      	str	r0, [sp, #8]
 800445e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004460:	9006      	str	r0, [sp, #24]
 8004462:	4299      	cmp	r1, r3
 8004464:	d000      	beq.n	8004468 <sniprintf+0x38>
 8004466:	1e4b      	subs	r3, r1, #1
 8004468:	9304      	str	r3, [sp, #16]
 800446a:	9307      	str	r3, [sp, #28]
 800446c:	2301      	movs	r3, #1
 800446e:	466a      	mov	r2, sp
 8004470:	425b      	negs	r3, r3
 8004472:	82d3      	strh	r3, [r2, #22]
 8004474:	0028      	movs	r0, r5
 8004476:	ab21      	add	r3, sp, #132	@ 0x84
 8004478:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800447a:	a902      	add	r1, sp, #8
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	f000 f99d 	bl	80047bc <_svfiprintf_r>
 8004482:	1c43      	adds	r3, r0, #1
 8004484:	da01      	bge.n	800448a <sniprintf+0x5a>
 8004486:	238b      	movs	r3, #139	@ 0x8b
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	2c00      	cmp	r4, #0
 800448c:	d0dc      	beq.n	8004448 <sniprintf+0x18>
 800448e:	2200      	movs	r2, #0
 8004490:	9b02      	ldr	r3, [sp, #8]
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	e7d8      	b.n	8004448 <sniprintf+0x18>
 8004496:	46c0      	nop			@ (mov r8, r8)
 8004498:	2000002c 	.word	0x2000002c

0800449c <memset>:
 800449c:	0003      	movs	r3, r0
 800449e:	1882      	adds	r2, r0, r2
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d100      	bne.n	80044a6 <memset+0xa>
 80044a4:	4770      	bx	lr
 80044a6:	7019      	strb	r1, [r3, #0]
 80044a8:	3301      	adds	r3, #1
 80044aa:	e7f9      	b.n	80044a0 <memset+0x4>

080044ac <__errno>:
 80044ac:	4b01      	ldr	r3, [pc, #4]	@ (80044b4 <__errno+0x8>)
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	4770      	bx	lr
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	2000002c 	.word	0x2000002c

080044b8 <__libc_init_array>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	2600      	movs	r6, #0
 80044bc:	4c0c      	ldr	r4, [pc, #48]	@ (80044f0 <__libc_init_array+0x38>)
 80044be:	4d0d      	ldr	r5, [pc, #52]	@ (80044f4 <__libc_init_array+0x3c>)
 80044c0:	1b64      	subs	r4, r4, r5
 80044c2:	10a4      	asrs	r4, r4, #2
 80044c4:	42a6      	cmp	r6, r4
 80044c6:	d109      	bne.n	80044dc <__libc_init_array+0x24>
 80044c8:	2600      	movs	r6, #0
 80044ca:	f000 fc61 	bl	8004d90 <_init>
 80044ce:	4c0a      	ldr	r4, [pc, #40]	@ (80044f8 <__libc_init_array+0x40>)
 80044d0:	4d0a      	ldr	r5, [pc, #40]	@ (80044fc <__libc_init_array+0x44>)
 80044d2:	1b64      	subs	r4, r4, r5
 80044d4:	10a4      	asrs	r4, r4, #2
 80044d6:	42a6      	cmp	r6, r4
 80044d8:	d105      	bne.n	80044e6 <__libc_init_array+0x2e>
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	00b3      	lsls	r3, r6, #2
 80044de:	58eb      	ldr	r3, [r5, r3]
 80044e0:	4798      	blx	r3
 80044e2:	3601      	adds	r6, #1
 80044e4:	e7ee      	b.n	80044c4 <__libc_init_array+0xc>
 80044e6:	00b3      	lsls	r3, r6, #2
 80044e8:	58eb      	ldr	r3, [r5, r3]
 80044ea:	4798      	blx	r3
 80044ec:	3601      	adds	r6, #1
 80044ee:	e7f2      	b.n	80044d6 <__libc_init_array+0x1e>
 80044f0:	08004f30 	.word	0x08004f30
 80044f4:	08004f30 	.word	0x08004f30
 80044f8:	08004f34 	.word	0x08004f34
 80044fc:	08004f30 	.word	0x08004f30

08004500 <__retarget_lock_acquire_recursive>:
 8004500:	4770      	bx	lr

08004502 <__retarget_lock_release_recursive>:
 8004502:	4770      	bx	lr

08004504 <_free_r>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	0005      	movs	r5, r0
 8004508:	1e0c      	subs	r4, r1, #0
 800450a:	d010      	beq.n	800452e <_free_r+0x2a>
 800450c:	3c04      	subs	r4, #4
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	da00      	bge.n	8004516 <_free_r+0x12>
 8004514:	18e4      	adds	r4, r4, r3
 8004516:	0028      	movs	r0, r5
 8004518:	f000 f8e0 	bl	80046dc <__malloc_lock>
 800451c:	4a1d      	ldr	r2, [pc, #116]	@ (8004594 <_free_r+0x90>)
 800451e:	6813      	ldr	r3, [r2, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <_free_r+0x2c>
 8004524:	6063      	str	r3, [r4, #4]
 8004526:	6014      	str	r4, [r2, #0]
 8004528:	0028      	movs	r0, r5
 800452a:	f000 f8df 	bl	80046ec <__malloc_unlock>
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	42a3      	cmp	r3, r4
 8004532:	d908      	bls.n	8004546 <_free_r+0x42>
 8004534:	6820      	ldr	r0, [r4, #0]
 8004536:	1821      	adds	r1, r4, r0
 8004538:	428b      	cmp	r3, r1
 800453a:	d1f3      	bne.n	8004524 <_free_r+0x20>
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	1809      	adds	r1, r1, r0
 8004542:	6021      	str	r1, [r4, #0]
 8004544:	e7ee      	b.n	8004524 <_free_r+0x20>
 8004546:	001a      	movs	r2, r3
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <_free_r+0x4e>
 800454e:	42a3      	cmp	r3, r4
 8004550:	d9f9      	bls.n	8004546 <_free_r+0x42>
 8004552:	6811      	ldr	r1, [r2, #0]
 8004554:	1850      	adds	r0, r2, r1
 8004556:	42a0      	cmp	r0, r4
 8004558:	d10b      	bne.n	8004572 <_free_r+0x6e>
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	1809      	adds	r1, r1, r0
 800455e:	1850      	adds	r0, r2, r1
 8004560:	6011      	str	r1, [r2, #0]
 8004562:	4283      	cmp	r3, r0
 8004564:	d1e0      	bne.n	8004528 <_free_r+0x24>
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	1841      	adds	r1, r0, r1
 800456c:	6011      	str	r1, [r2, #0]
 800456e:	6053      	str	r3, [r2, #4]
 8004570:	e7da      	b.n	8004528 <_free_r+0x24>
 8004572:	42a0      	cmp	r0, r4
 8004574:	d902      	bls.n	800457c <_free_r+0x78>
 8004576:	230c      	movs	r3, #12
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	e7d5      	b.n	8004528 <_free_r+0x24>
 800457c:	6820      	ldr	r0, [r4, #0]
 800457e:	1821      	adds	r1, r4, r0
 8004580:	428b      	cmp	r3, r1
 8004582:	d103      	bne.n	800458c <_free_r+0x88>
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	1809      	adds	r1, r1, r0
 800458a:	6021      	str	r1, [r4, #0]
 800458c:	6063      	str	r3, [r4, #4]
 800458e:	6054      	str	r4, [r2, #4]
 8004590:	e7ca      	b.n	8004528 <_free_r+0x24>
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	200003a8 	.word	0x200003a8

08004598 <sbrk_aligned>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	4e0f      	ldr	r6, [pc, #60]	@ (80045d8 <sbrk_aligned+0x40>)
 800459c:	000d      	movs	r5, r1
 800459e:	6831      	ldr	r1, [r6, #0]
 80045a0:	0004      	movs	r4, r0
 80045a2:	2900      	cmp	r1, #0
 80045a4:	d102      	bne.n	80045ac <sbrk_aligned+0x14>
 80045a6:	f000 fb95 	bl	8004cd4 <_sbrk_r>
 80045aa:	6030      	str	r0, [r6, #0]
 80045ac:	0029      	movs	r1, r5
 80045ae:	0020      	movs	r0, r4
 80045b0:	f000 fb90 	bl	8004cd4 <_sbrk_r>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d103      	bne.n	80045c0 <sbrk_aligned+0x28>
 80045b8:	2501      	movs	r5, #1
 80045ba:	426d      	negs	r5, r5
 80045bc:	0028      	movs	r0, r5
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	2303      	movs	r3, #3
 80045c2:	1cc5      	adds	r5, r0, #3
 80045c4:	439d      	bics	r5, r3
 80045c6:	42a8      	cmp	r0, r5
 80045c8:	d0f8      	beq.n	80045bc <sbrk_aligned+0x24>
 80045ca:	1a29      	subs	r1, r5, r0
 80045cc:	0020      	movs	r0, r4
 80045ce:	f000 fb81 	bl	8004cd4 <_sbrk_r>
 80045d2:	3001      	adds	r0, #1
 80045d4:	d1f2      	bne.n	80045bc <sbrk_aligned+0x24>
 80045d6:	e7ef      	b.n	80045b8 <sbrk_aligned+0x20>
 80045d8:	200003a4 	.word	0x200003a4

080045dc <_malloc_r>:
 80045dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045de:	2203      	movs	r2, #3
 80045e0:	1ccb      	adds	r3, r1, #3
 80045e2:	4393      	bics	r3, r2
 80045e4:	3308      	adds	r3, #8
 80045e6:	0005      	movs	r5, r0
 80045e8:	001f      	movs	r7, r3
 80045ea:	2b0c      	cmp	r3, #12
 80045ec:	d234      	bcs.n	8004658 <_malloc_r+0x7c>
 80045ee:	270c      	movs	r7, #12
 80045f0:	42b9      	cmp	r1, r7
 80045f2:	d833      	bhi.n	800465c <_malloc_r+0x80>
 80045f4:	0028      	movs	r0, r5
 80045f6:	f000 f871 	bl	80046dc <__malloc_lock>
 80045fa:	4e37      	ldr	r6, [pc, #220]	@ (80046d8 <_malloc_r+0xfc>)
 80045fc:	6833      	ldr	r3, [r6, #0]
 80045fe:	001c      	movs	r4, r3
 8004600:	2c00      	cmp	r4, #0
 8004602:	d12f      	bne.n	8004664 <_malloc_r+0x88>
 8004604:	0039      	movs	r1, r7
 8004606:	0028      	movs	r0, r5
 8004608:	f7ff ffc6 	bl	8004598 <sbrk_aligned>
 800460c:	0004      	movs	r4, r0
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	d15f      	bne.n	80046d2 <_malloc_r+0xf6>
 8004612:	6834      	ldr	r4, [r6, #0]
 8004614:	9400      	str	r4, [sp, #0]
 8004616:	9b00      	ldr	r3, [sp, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d14a      	bne.n	80046b2 <_malloc_r+0xd6>
 800461c:	2c00      	cmp	r4, #0
 800461e:	d052      	beq.n	80046c6 <_malloc_r+0xea>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	0028      	movs	r0, r5
 8004624:	18e3      	adds	r3, r4, r3
 8004626:	9900      	ldr	r1, [sp, #0]
 8004628:	9301      	str	r3, [sp, #4]
 800462a:	f000 fb53 	bl	8004cd4 <_sbrk_r>
 800462e:	9b01      	ldr	r3, [sp, #4]
 8004630:	4283      	cmp	r3, r0
 8004632:	d148      	bne.n	80046c6 <_malloc_r+0xea>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	0028      	movs	r0, r5
 8004638:	1aff      	subs	r7, r7, r3
 800463a:	0039      	movs	r1, r7
 800463c:	f7ff ffac 	bl	8004598 <sbrk_aligned>
 8004640:	3001      	adds	r0, #1
 8004642:	d040      	beq.n	80046c6 <_malloc_r+0xea>
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	19db      	adds	r3, r3, r7
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	6833      	ldr	r3, [r6, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	2a00      	cmp	r2, #0
 8004650:	d133      	bne.n	80046ba <_malloc_r+0xde>
 8004652:	9b00      	ldr	r3, [sp, #0]
 8004654:	6033      	str	r3, [r6, #0]
 8004656:	e019      	b.n	800468c <_malloc_r+0xb0>
 8004658:	2b00      	cmp	r3, #0
 800465a:	dac9      	bge.n	80045f0 <_malloc_r+0x14>
 800465c:	230c      	movs	r3, #12
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	2000      	movs	r0, #0
 8004662:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004664:	6821      	ldr	r1, [r4, #0]
 8004666:	1bc9      	subs	r1, r1, r7
 8004668:	d420      	bmi.n	80046ac <_malloc_r+0xd0>
 800466a:	290b      	cmp	r1, #11
 800466c:	d90a      	bls.n	8004684 <_malloc_r+0xa8>
 800466e:	19e2      	adds	r2, r4, r7
 8004670:	6027      	str	r7, [r4, #0]
 8004672:	42a3      	cmp	r3, r4
 8004674:	d104      	bne.n	8004680 <_malloc_r+0xa4>
 8004676:	6032      	str	r2, [r6, #0]
 8004678:	6863      	ldr	r3, [r4, #4]
 800467a:	6011      	str	r1, [r2, #0]
 800467c:	6053      	str	r3, [r2, #4]
 800467e:	e005      	b.n	800468c <_malloc_r+0xb0>
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	e7f9      	b.n	8004678 <_malloc_r+0x9c>
 8004684:	6862      	ldr	r2, [r4, #4]
 8004686:	42a3      	cmp	r3, r4
 8004688:	d10e      	bne.n	80046a8 <_malloc_r+0xcc>
 800468a:	6032      	str	r2, [r6, #0]
 800468c:	0028      	movs	r0, r5
 800468e:	f000 f82d 	bl	80046ec <__malloc_unlock>
 8004692:	0020      	movs	r0, r4
 8004694:	2207      	movs	r2, #7
 8004696:	300b      	adds	r0, #11
 8004698:	1d23      	adds	r3, r4, #4
 800469a:	4390      	bics	r0, r2
 800469c:	1ac2      	subs	r2, r0, r3
 800469e:	4298      	cmp	r0, r3
 80046a0:	d0df      	beq.n	8004662 <_malloc_r+0x86>
 80046a2:	1a1b      	subs	r3, r3, r0
 80046a4:	50a3      	str	r3, [r4, r2]
 80046a6:	e7dc      	b.n	8004662 <_malloc_r+0x86>
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	e7ef      	b.n	800468c <_malloc_r+0xb0>
 80046ac:	0023      	movs	r3, r4
 80046ae:	6864      	ldr	r4, [r4, #4]
 80046b0:	e7a6      	b.n	8004600 <_malloc_r+0x24>
 80046b2:	9c00      	ldr	r4, [sp, #0]
 80046b4:	6863      	ldr	r3, [r4, #4]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	e7ad      	b.n	8004616 <_malloc_r+0x3a>
 80046ba:	001a      	movs	r2, r3
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	42a3      	cmp	r3, r4
 80046c0:	d1fb      	bne.n	80046ba <_malloc_r+0xde>
 80046c2:	2300      	movs	r3, #0
 80046c4:	e7da      	b.n	800467c <_malloc_r+0xa0>
 80046c6:	230c      	movs	r3, #12
 80046c8:	0028      	movs	r0, r5
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	f000 f80e 	bl	80046ec <__malloc_unlock>
 80046d0:	e7c6      	b.n	8004660 <_malloc_r+0x84>
 80046d2:	6007      	str	r7, [r0, #0]
 80046d4:	e7da      	b.n	800468c <_malloc_r+0xb0>
 80046d6:	46c0      	nop			@ (mov r8, r8)
 80046d8:	200003a8 	.word	0x200003a8

080046dc <__malloc_lock>:
 80046dc:	b510      	push	{r4, lr}
 80046de:	4802      	ldr	r0, [pc, #8]	@ (80046e8 <__malloc_lock+0xc>)
 80046e0:	f7ff ff0e 	bl	8004500 <__retarget_lock_acquire_recursive>
 80046e4:	bd10      	pop	{r4, pc}
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	200003a0 	.word	0x200003a0

080046ec <__malloc_unlock>:
 80046ec:	b510      	push	{r4, lr}
 80046ee:	4802      	ldr	r0, [pc, #8]	@ (80046f8 <__malloc_unlock+0xc>)
 80046f0:	f7ff ff07 	bl	8004502 <__retarget_lock_release_recursive>
 80046f4:	bd10      	pop	{r4, pc}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	200003a0 	.word	0x200003a0

080046fc <__ssputs_r>:
 80046fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fe:	688e      	ldr	r6, [r1, #8]
 8004700:	b085      	sub	sp, #20
 8004702:	001f      	movs	r7, r3
 8004704:	000c      	movs	r4, r1
 8004706:	680b      	ldr	r3, [r1, #0]
 8004708:	9002      	str	r0, [sp, #8]
 800470a:	9203      	str	r2, [sp, #12]
 800470c:	42be      	cmp	r6, r7
 800470e:	d830      	bhi.n	8004772 <__ssputs_r+0x76>
 8004710:	210c      	movs	r1, #12
 8004712:	5e62      	ldrsh	r2, [r4, r1]
 8004714:	2190      	movs	r1, #144	@ 0x90
 8004716:	00c9      	lsls	r1, r1, #3
 8004718:	420a      	tst	r2, r1
 800471a:	d028      	beq.n	800476e <__ssputs_r+0x72>
 800471c:	2003      	movs	r0, #3
 800471e:	6921      	ldr	r1, [r4, #16]
 8004720:	1a5b      	subs	r3, r3, r1
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	6963      	ldr	r3, [r4, #20]
 8004726:	4343      	muls	r3, r0
 8004728:	9801      	ldr	r0, [sp, #4]
 800472a:	0fdd      	lsrs	r5, r3, #31
 800472c:	18ed      	adds	r5, r5, r3
 800472e:	1c7b      	adds	r3, r7, #1
 8004730:	181b      	adds	r3, r3, r0
 8004732:	106d      	asrs	r5, r5, #1
 8004734:	42ab      	cmp	r3, r5
 8004736:	d900      	bls.n	800473a <__ssputs_r+0x3e>
 8004738:	001d      	movs	r5, r3
 800473a:	0552      	lsls	r2, r2, #21
 800473c:	d528      	bpl.n	8004790 <__ssputs_r+0x94>
 800473e:	0029      	movs	r1, r5
 8004740:	9802      	ldr	r0, [sp, #8]
 8004742:	f7ff ff4b 	bl	80045dc <_malloc_r>
 8004746:	1e06      	subs	r6, r0, #0
 8004748:	d02c      	beq.n	80047a4 <__ssputs_r+0xa8>
 800474a:	9a01      	ldr	r2, [sp, #4]
 800474c:	6921      	ldr	r1, [r4, #16]
 800474e:	f000 fade 	bl	8004d0e <memcpy>
 8004752:	89a2      	ldrh	r2, [r4, #12]
 8004754:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <__ssputs_r+0xbc>)
 8004756:	401a      	ands	r2, r3
 8004758:	2380      	movs	r3, #128	@ 0x80
 800475a:	4313      	orrs	r3, r2
 800475c:	81a3      	strh	r3, [r4, #12]
 800475e:	9b01      	ldr	r3, [sp, #4]
 8004760:	6126      	str	r6, [r4, #16]
 8004762:	18f6      	adds	r6, r6, r3
 8004764:	6026      	str	r6, [r4, #0]
 8004766:	003e      	movs	r6, r7
 8004768:	6165      	str	r5, [r4, #20]
 800476a:	1aed      	subs	r5, r5, r3
 800476c:	60a5      	str	r5, [r4, #8]
 800476e:	42be      	cmp	r6, r7
 8004770:	d900      	bls.n	8004774 <__ssputs_r+0x78>
 8004772:	003e      	movs	r6, r7
 8004774:	0032      	movs	r2, r6
 8004776:	9903      	ldr	r1, [sp, #12]
 8004778:	6820      	ldr	r0, [r4, #0]
 800477a:	f000 fa99 	bl	8004cb0 <memmove>
 800477e:	2000      	movs	r0, #0
 8004780:	68a3      	ldr	r3, [r4, #8]
 8004782:	1b9b      	subs	r3, r3, r6
 8004784:	60a3      	str	r3, [r4, #8]
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	199b      	adds	r3, r3, r6
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	b005      	add	sp, #20
 800478e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004790:	002a      	movs	r2, r5
 8004792:	9802      	ldr	r0, [sp, #8]
 8004794:	f000 fac4 	bl	8004d20 <_realloc_r>
 8004798:	1e06      	subs	r6, r0, #0
 800479a:	d1e0      	bne.n	800475e <__ssputs_r+0x62>
 800479c:	6921      	ldr	r1, [r4, #16]
 800479e:	9802      	ldr	r0, [sp, #8]
 80047a0:	f7ff feb0 	bl	8004504 <_free_r>
 80047a4:	230c      	movs	r3, #12
 80047a6:	2001      	movs	r0, #1
 80047a8:	9a02      	ldr	r2, [sp, #8]
 80047aa:	4240      	negs	r0, r0
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	89a2      	ldrh	r2, [r4, #12]
 80047b0:	3334      	adds	r3, #52	@ 0x34
 80047b2:	4313      	orrs	r3, r2
 80047b4:	81a3      	strh	r3, [r4, #12]
 80047b6:	e7e9      	b.n	800478c <__ssputs_r+0x90>
 80047b8:	fffffb7f 	.word	0xfffffb7f

080047bc <_svfiprintf_r>:
 80047bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047be:	b0a1      	sub	sp, #132	@ 0x84
 80047c0:	9003      	str	r0, [sp, #12]
 80047c2:	001d      	movs	r5, r3
 80047c4:	898b      	ldrh	r3, [r1, #12]
 80047c6:	000f      	movs	r7, r1
 80047c8:	0016      	movs	r6, r2
 80047ca:	061b      	lsls	r3, r3, #24
 80047cc:	d511      	bpl.n	80047f2 <_svfiprintf_r+0x36>
 80047ce:	690b      	ldr	r3, [r1, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10e      	bne.n	80047f2 <_svfiprintf_r+0x36>
 80047d4:	2140      	movs	r1, #64	@ 0x40
 80047d6:	f7ff ff01 	bl	80045dc <_malloc_r>
 80047da:	6038      	str	r0, [r7, #0]
 80047dc:	6138      	str	r0, [r7, #16]
 80047de:	2800      	cmp	r0, #0
 80047e0:	d105      	bne.n	80047ee <_svfiprintf_r+0x32>
 80047e2:	230c      	movs	r3, #12
 80047e4:	9a03      	ldr	r2, [sp, #12]
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	2001      	movs	r0, #1
 80047ea:	4240      	negs	r0, r0
 80047ec:	e0cf      	b.n	800498e <_svfiprintf_r+0x1d2>
 80047ee:	2340      	movs	r3, #64	@ 0x40
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	2300      	movs	r3, #0
 80047f4:	ac08      	add	r4, sp, #32
 80047f6:	6163      	str	r3, [r4, #20]
 80047f8:	3320      	adds	r3, #32
 80047fa:	7663      	strb	r3, [r4, #25]
 80047fc:	3310      	adds	r3, #16
 80047fe:	76a3      	strb	r3, [r4, #26]
 8004800:	9507      	str	r5, [sp, #28]
 8004802:	0035      	movs	r5, r6
 8004804:	782b      	ldrb	r3, [r5, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <_svfiprintf_r+0x52>
 800480a:	2b25      	cmp	r3, #37	@ 0x25
 800480c:	d148      	bne.n	80048a0 <_svfiprintf_r+0xe4>
 800480e:	1bab      	subs	r3, r5, r6
 8004810:	9305      	str	r3, [sp, #20]
 8004812:	42b5      	cmp	r5, r6
 8004814:	d00b      	beq.n	800482e <_svfiprintf_r+0x72>
 8004816:	0032      	movs	r2, r6
 8004818:	0039      	movs	r1, r7
 800481a:	9803      	ldr	r0, [sp, #12]
 800481c:	f7ff ff6e 	bl	80046fc <__ssputs_r>
 8004820:	3001      	adds	r0, #1
 8004822:	d100      	bne.n	8004826 <_svfiprintf_r+0x6a>
 8004824:	e0ae      	b.n	8004984 <_svfiprintf_r+0x1c8>
 8004826:	6963      	ldr	r3, [r4, #20]
 8004828:	9a05      	ldr	r2, [sp, #20]
 800482a:	189b      	adds	r3, r3, r2
 800482c:	6163      	str	r3, [r4, #20]
 800482e:	782b      	ldrb	r3, [r5, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d100      	bne.n	8004836 <_svfiprintf_r+0x7a>
 8004834:	e0a6      	b.n	8004984 <_svfiprintf_r+0x1c8>
 8004836:	2201      	movs	r2, #1
 8004838:	2300      	movs	r3, #0
 800483a:	4252      	negs	r2, r2
 800483c:	6062      	str	r2, [r4, #4]
 800483e:	a904      	add	r1, sp, #16
 8004840:	3254      	adds	r2, #84	@ 0x54
 8004842:	1852      	adds	r2, r2, r1
 8004844:	1c6e      	adds	r6, r5, #1
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	60e3      	str	r3, [r4, #12]
 800484a:	60a3      	str	r3, [r4, #8]
 800484c:	7013      	strb	r3, [r2, #0]
 800484e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004850:	4b54      	ldr	r3, [pc, #336]	@ (80049a4 <_svfiprintf_r+0x1e8>)
 8004852:	2205      	movs	r2, #5
 8004854:	0018      	movs	r0, r3
 8004856:	7831      	ldrb	r1, [r6, #0]
 8004858:	9305      	str	r3, [sp, #20]
 800485a:	f000 fa4d 	bl	8004cf8 <memchr>
 800485e:	1c75      	adds	r5, r6, #1
 8004860:	2800      	cmp	r0, #0
 8004862:	d11f      	bne.n	80048a4 <_svfiprintf_r+0xe8>
 8004864:	6822      	ldr	r2, [r4, #0]
 8004866:	06d3      	lsls	r3, r2, #27
 8004868:	d504      	bpl.n	8004874 <_svfiprintf_r+0xb8>
 800486a:	2353      	movs	r3, #83	@ 0x53
 800486c:	a904      	add	r1, sp, #16
 800486e:	185b      	adds	r3, r3, r1
 8004870:	2120      	movs	r1, #32
 8004872:	7019      	strb	r1, [r3, #0]
 8004874:	0713      	lsls	r3, r2, #28
 8004876:	d504      	bpl.n	8004882 <_svfiprintf_r+0xc6>
 8004878:	2353      	movs	r3, #83	@ 0x53
 800487a:	a904      	add	r1, sp, #16
 800487c:	185b      	adds	r3, r3, r1
 800487e:	212b      	movs	r1, #43	@ 0x2b
 8004880:	7019      	strb	r1, [r3, #0]
 8004882:	7833      	ldrb	r3, [r6, #0]
 8004884:	2b2a      	cmp	r3, #42	@ 0x2a
 8004886:	d016      	beq.n	80048b6 <_svfiprintf_r+0xfa>
 8004888:	0035      	movs	r5, r6
 800488a:	2100      	movs	r1, #0
 800488c:	200a      	movs	r0, #10
 800488e:	68e3      	ldr	r3, [r4, #12]
 8004890:	782a      	ldrb	r2, [r5, #0]
 8004892:	1c6e      	adds	r6, r5, #1
 8004894:	3a30      	subs	r2, #48	@ 0x30
 8004896:	2a09      	cmp	r2, #9
 8004898:	d950      	bls.n	800493c <_svfiprintf_r+0x180>
 800489a:	2900      	cmp	r1, #0
 800489c:	d111      	bne.n	80048c2 <_svfiprintf_r+0x106>
 800489e:	e017      	b.n	80048d0 <_svfiprintf_r+0x114>
 80048a0:	3501      	adds	r5, #1
 80048a2:	e7af      	b.n	8004804 <_svfiprintf_r+0x48>
 80048a4:	9b05      	ldr	r3, [sp, #20]
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	1ac0      	subs	r0, r0, r3
 80048aa:	2301      	movs	r3, #1
 80048ac:	4083      	lsls	r3, r0
 80048ae:	4313      	orrs	r3, r2
 80048b0:	002e      	movs	r6, r5
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	e7cc      	b.n	8004850 <_svfiprintf_r+0x94>
 80048b6:	9b07      	ldr	r3, [sp, #28]
 80048b8:	1d19      	adds	r1, r3, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	9107      	str	r1, [sp, #28]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	db01      	blt.n	80048c6 <_svfiprintf_r+0x10a>
 80048c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048c4:	e004      	b.n	80048d0 <_svfiprintf_r+0x114>
 80048c6:	425b      	negs	r3, r3
 80048c8:	60e3      	str	r3, [r4, #12]
 80048ca:	2302      	movs	r3, #2
 80048cc:	4313      	orrs	r3, r2
 80048ce:	6023      	str	r3, [r4, #0]
 80048d0:	782b      	ldrb	r3, [r5, #0]
 80048d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80048d4:	d10c      	bne.n	80048f0 <_svfiprintf_r+0x134>
 80048d6:	786b      	ldrb	r3, [r5, #1]
 80048d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80048da:	d134      	bne.n	8004946 <_svfiprintf_r+0x18a>
 80048dc:	9b07      	ldr	r3, [sp, #28]
 80048de:	3502      	adds	r5, #2
 80048e0:	1d1a      	adds	r2, r3, #4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	9207      	str	r2, [sp, #28]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	da01      	bge.n	80048ee <_svfiprintf_r+0x132>
 80048ea:	2301      	movs	r3, #1
 80048ec:	425b      	negs	r3, r3
 80048ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80048f0:	4e2d      	ldr	r6, [pc, #180]	@ (80049a8 <_svfiprintf_r+0x1ec>)
 80048f2:	2203      	movs	r2, #3
 80048f4:	0030      	movs	r0, r6
 80048f6:	7829      	ldrb	r1, [r5, #0]
 80048f8:	f000 f9fe 	bl	8004cf8 <memchr>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	d006      	beq.n	800490e <_svfiprintf_r+0x152>
 8004900:	2340      	movs	r3, #64	@ 0x40
 8004902:	1b80      	subs	r0, r0, r6
 8004904:	4083      	lsls	r3, r0
 8004906:	6822      	ldr	r2, [r4, #0]
 8004908:	3501      	adds	r5, #1
 800490a:	4313      	orrs	r3, r2
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	7829      	ldrb	r1, [r5, #0]
 8004910:	2206      	movs	r2, #6
 8004912:	4826      	ldr	r0, [pc, #152]	@ (80049ac <_svfiprintf_r+0x1f0>)
 8004914:	1c6e      	adds	r6, r5, #1
 8004916:	7621      	strb	r1, [r4, #24]
 8004918:	f000 f9ee 	bl	8004cf8 <memchr>
 800491c:	2800      	cmp	r0, #0
 800491e:	d038      	beq.n	8004992 <_svfiprintf_r+0x1d6>
 8004920:	4b23      	ldr	r3, [pc, #140]	@ (80049b0 <_svfiprintf_r+0x1f4>)
 8004922:	2b00      	cmp	r3, #0
 8004924:	d122      	bne.n	800496c <_svfiprintf_r+0x1b0>
 8004926:	2207      	movs	r2, #7
 8004928:	9b07      	ldr	r3, [sp, #28]
 800492a:	3307      	adds	r3, #7
 800492c:	4393      	bics	r3, r2
 800492e:	3308      	adds	r3, #8
 8004930:	9307      	str	r3, [sp, #28]
 8004932:	6963      	ldr	r3, [r4, #20]
 8004934:	9a04      	ldr	r2, [sp, #16]
 8004936:	189b      	adds	r3, r3, r2
 8004938:	6163      	str	r3, [r4, #20]
 800493a:	e762      	b.n	8004802 <_svfiprintf_r+0x46>
 800493c:	4343      	muls	r3, r0
 800493e:	0035      	movs	r5, r6
 8004940:	2101      	movs	r1, #1
 8004942:	189b      	adds	r3, r3, r2
 8004944:	e7a4      	b.n	8004890 <_svfiprintf_r+0xd4>
 8004946:	2300      	movs	r3, #0
 8004948:	200a      	movs	r0, #10
 800494a:	0019      	movs	r1, r3
 800494c:	3501      	adds	r5, #1
 800494e:	6063      	str	r3, [r4, #4]
 8004950:	782a      	ldrb	r2, [r5, #0]
 8004952:	1c6e      	adds	r6, r5, #1
 8004954:	3a30      	subs	r2, #48	@ 0x30
 8004956:	2a09      	cmp	r2, #9
 8004958:	d903      	bls.n	8004962 <_svfiprintf_r+0x1a6>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0c8      	beq.n	80048f0 <_svfiprintf_r+0x134>
 800495e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004960:	e7c6      	b.n	80048f0 <_svfiprintf_r+0x134>
 8004962:	4341      	muls	r1, r0
 8004964:	0035      	movs	r5, r6
 8004966:	2301      	movs	r3, #1
 8004968:	1889      	adds	r1, r1, r2
 800496a:	e7f1      	b.n	8004950 <_svfiprintf_r+0x194>
 800496c:	aa07      	add	r2, sp, #28
 800496e:	9200      	str	r2, [sp, #0]
 8004970:	0021      	movs	r1, r4
 8004972:	003a      	movs	r2, r7
 8004974:	4b0f      	ldr	r3, [pc, #60]	@ (80049b4 <_svfiprintf_r+0x1f8>)
 8004976:	9803      	ldr	r0, [sp, #12]
 8004978:	e000      	b.n	800497c <_svfiprintf_r+0x1c0>
 800497a:	bf00      	nop
 800497c:	9004      	str	r0, [sp, #16]
 800497e:	9b04      	ldr	r3, [sp, #16]
 8004980:	3301      	adds	r3, #1
 8004982:	d1d6      	bne.n	8004932 <_svfiprintf_r+0x176>
 8004984:	89bb      	ldrh	r3, [r7, #12]
 8004986:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004988:	065b      	lsls	r3, r3, #25
 800498a:	d500      	bpl.n	800498e <_svfiprintf_r+0x1d2>
 800498c:	e72c      	b.n	80047e8 <_svfiprintf_r+0x2c>
 800498e:	b021      	add	sp, #132	@ 0x84
 8004990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004992:	aa07      	add	r2, sp, #28
 8004994:	9200      	str	r2, [sp, #0]
 8004996:	0021      	movs	r1, r4
 8004998:	003a      	movs	r2, r7
 800499a:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <_svfiprintf_r+0x1f8>)
 800499c:	9803      	ldr	r0, [sp, #12]
 800499e:	f000 f87b 	bl	8004a98 <_printf_i>
 80049a2:	e7eb      	b.n	800497c <_svfiprintf_r+0x1c0>
 80049a4:	08004efc 	.word	0x08004efc
 80049a8:	08004f02 	.word	0x08004f02
 80049ac:	08004f06 	.word	0x08004f06
 80049b0:	00000000 	.word	0x00000000
 80049b4:	080046fd 	.word	0x080046fd

080049b8 <_printf_common>:
 80049b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ba:	0016      	movs	r6, r2
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	688a      	ldr	r2, [r1, #8]
 80049c0:	690b      	ldr	r3, [r1, #16]
 80049c2:	000c      	movs	r4, r1
 80049c4:	9000      	str	r0, [sp, #0]
 80049c6:	4293      	cmp	r3, r2
 80049c8:	da00      	bge.n	80049cc <_printf_common+0x14>
 80049ca:	0013      	movs	r3, r2
 80049cc:	0022      	movs	r2, r4
 80049ce:	6033      	str	r3, [r6, #0]
 80049d0:	3243      	adds	r2, #67	@ 0x43
 80049d2:	7812      	ldrb	r2, [r2, #0]
 80049d4:	2a00      	cmp	r2, #0
 80049d6:	d001      	beq.n	80049dc <_printf_common+0x24>
 80049d8:	3301      	adds	r3, #1
 80049da:	6033      	str	r3, [r6, #0]
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	069b      	lsls	r3, r3, #26
 80049e0:	d502      	bpl.n	80049e8 <_printf_common+0x30>
 80049e2:	6833      	ldr	r3, [r6, #0]
 80049e4:	3302      	adds	r3, #2
 80049e6:	6033      	str	r3, [r6, #0]
 80049e8:	6822      	ldr	r2, [r4, #0]
 80049ea:	2306      	movs	r3, #6
 80049ec:	0015      	movs	r5, r2
 80049ee:	401d      	ands	r5, r3
 80049f0:	421a      	tst	r2, r3
 80049f2:	d027      	beq.n	8004a44 <_printf_common+0x8c>
 80049f4:	0023      	movs	r3, r4
 80049f6:	3343      	adds	r3, #67	@ 0x43
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	1e5a      	subs	r2, r3, #1
 80049fc:	4193      	sbcs	r3, r2
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	0692      	lsls	r2, r2, #26
 8004a02:	d430      	bmi.n	8004a66 <_printf_common+0xae>
 8004a04:	0022      	movs	r2, r4
 8004a06:	9901      	ldr	r1, [sp, #4]
 8004a08:	9800      	ldr	r0, [sp, #0]
 8004a0a:	9d08      	ldr	r5, [sp, #32]
 8004a0c:	3243      	adds	r2, #67	@ 0x43
 8004a0e:	47a8      	blx	r5
 8004a10:	3001      	adds	r0, #1
 8004a12:	d025      	beq.n	8004a60 <_printf_common+0xa8>
 8004a14:	2206      	movs	r2, #6
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	2500      	movs	r5, #0
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d105      	bne.n	8004a2c <_printf_common+0x74>
 8004a20:	6833      	ldr	r3, [r6, #0]
 8004a22:	68e5      	ldr	r5, [r4, #12]
 8004a24:	1aed      	subs	r5, r5, r3
 8004a26:	43eb      	mvns	r3, r5
 8004a28:	17db      	asrs	r3, r3, #31
 8004a2a:	401d      	ands	r5, r3
 8004a2c:	68a3      	ldr	r3, [r4, #8]
 8004a2e:	6922      	ldr	r2, [r4, #16]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	dd01      	ble.n	8004a38 <_printf_common+0x80>
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	18ed      	adds	r5, r5, r3
 8004a38:	2600      	movs	r6, #0
 8004a3a:	42b5      	cmp	r5, r6
 8004a3c:	d120      	bne.n	8004a80 <_printf_common+0xc8>
 8004a3e:	2000      	movs	r0, #0
 8004a40:	e010      	b.n	8004a64 <_printf_common+0xac>
 8004a42:	3501      	adds	r5, #1
 8004a44:	68e3      	ldr	r3, [r4, #12]
 8004a46:	6832      	ldr	r2, [r6, #0]
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	42ab      	cmp	r3, r5
 8004a4c:	ddd2      	ble.n	80049f4 <_printf_common+0x3c>
 8004a4e:	0022      	movs	r2, r4
 8004a50:	2301      	movs	r3, #1
 8004a52:	9901      	ldr	r1, [sp, #4]
 8004a54:	9800      	ldr	r0, [sp, #0]
 8004a56:	9f08      	ldr	r7, [sp, #32]
 8004a58:	3219      	adds	r2, #25
 8004a5a:	47b8      	blx	r7
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d1f0      	bne.n	8004a42 <_printf_common+0x8a>
 8004a60:	2001      	movs	r0, #1
 8004a62:	4240      	negs	r0, r0
 8004a64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a66:	2030      	movs	r0, #48	@ 0x30
 8004a68:	18e1      	adds	r1, r4, r3
 8004a6a:	3143      	adds	r1, #67	@ 0x43
 8004a6c:	7008      	strb	r0, [r1, #0]
 8004a6e:	0021      	movs	r1, r4
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	3145      	adds	r1, #69	@ 0x45
 8004a74:	7809      	ldrb	r1, [r1, #0]
 8004a76:	18a2      	adds	r2, r4, r2
 8004a78:	3243      	adds	r2, #67	@ 0x43
 8004a7a:	3302      	adds	r3, #2
 8004a7c:	7011      	strb	r1, [r2, #0]
 8004a7e:	e7c1      	b.n	8004a04 <_printf_common+0x4c>
 8004a80:	0022      	movs	r2, r4
 8004a82:	2301      	movs	r3, #1
 8004a84:	9901      	ldr	r1, [sp, #4]
 8004a86:	9800      	ldr	r0, [sp, #0]
 8004a88:	9f08      	ldr	r7, [sp, #32]
 8004a8a:	321a      	adds	r2, #26
 8004a8c:	47b8      	blx	r7
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d0e6      	beq.n	8004a60 <_printf_common+0xa8>
 8004a92:	3601      	adds	r6, #1
 8004a94:	e7d1      	b.n	8004a3a <_printf_common+0x82>
	...

08004a98 <_printf_i>:
 8004a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a9a:	b08b      	sub	sp, #44	@ 0x2c
 8004a9c:	9206      	str	r2, [sp, #24]
 8004a9e:	000a      	movs	r2, r1
 8004aa0:	3243      	adds	r2, #67	@ 0x43
 8004aa2:	9307      	str	r3, [sp, #28]
 8004aa4:	9005      	str	r0, [sp, #20]
 8004aa6:	9203      	str	r2, [sp, #12]
 8004aa8:	7e0a      	ldrb	r2, [r1, #24]
 8004aaa:	000c      	movs	r4, r1
 8004aac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004aae:	2a78      	cmp	r2, #120	@ 0x78
 8004ab0:	d809      	bhi.n	8004ac6 <_printf_i+0x2e>
 8004ab2:	2a62      	cmp	r2, #98	@ 0x62
 8004ab4:	d80b      	bhi.n	8004ace <_printf_i+0x36>
 8004ab6:	2a00      	cmp	r2, #0
 8004ab8:	d100      	bne.n	8004abc <_printf_i+0x24>
 8004aba:	e0ba      	b.n	8004c32 <_printf_i+0x19a>
 8004abc:	497a      	ldr	r1, [pc, #488]	@ (8004ca8 <_printf_i+0x210>)
 8004abe:	9104      	str	r1, [sp, #16]
 8004ac0:	2a58      	cmp	r2, #88	@ 0x58
 8004ac2:	d100      	bne.n	8004ac6 <_printf_i+0x2e>
 8004ac4:	e08e      	b.n	8004be4 <_printf_i+0x14c>
 8004ac6:	0025      	movs	r5, r4
 8004ac8:	3542      	adds	r5, #66	@ 0x42
 8004aca:	702a      	strb	r2, [r5, #0]
 8004acc:	e022      	b.n	8004b14 <_printf_i+0x7c>
 8004ace:	0010      	movs	r0, r2
 8004ad0:	3863      	subs	r0, #99	@ 0x63
 8004ad2:	2815      	cmp	r0, #21
 8004ad4:	d8f7      	bhi.n	8004ac6 <_printf_i+0x2e>
 8004ad6:	f7fb fb1f 	bl	8000118 <__gnu_thumb1_case_shi>
 8004ada:	0016      	.short	0x0016
 8004adc:	fff6001f 	.word	0xfff6001f
 8004ae0:	fff6fff6 	.word	0xfff6fff6
 8004ae4:	001ffff6 	.word	0x001ffff6
 8004ae8:	fff6fff6 	.word	0xfff6fff6
 8004aec:	fff6fff6 	.word	0xfff6fff6
 8004af0:	0036009f 	.word	0x0036009f
 8004af4:	fff6007e 	.word	0xfff6007e
 8004af8:	00b0fff6 	.word	0x00b0fff6
 8004afc:	0036fff6 	.word	0x0036fff6
 8004b00:	fff6fff6 	.word	0xfff6fff6
 8004b04:	0082      	.short	0x0082
 8004b06:	0025      	movs	r5, r4
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	3542      	adds	r5, #66	@ 0x42
 8004b0c:	1d11      	adds	r1, r2, #4
 8004b0e:	6019      	str	r1, [r3, #0]
 8004b10:	6813      	ldr	r3, [r2, #0]
 8004b12:	702b      	strb	r3, [r5, #0]
 8004b14:	2301      	movs	r3, #1
 8004b16:	e09e      	b.n	8004c56 <_printf_i+0x1be>
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	6809      	ldr	r1, [r1, #0]
 8004b1c:	1d02      	adds	r2, r0, #4
 8004b1e:	060d      	lsls	r5, r1, #24
 8004b20:	d50b      	bpl.n	8004b3a <_printf_i+0xa2>
 8004b22:	6806      	ldr	r6, [r0, #0]
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	2e00      	cmp	r6, #0
 8004b28:	da03      	bge.n	8004b32 <_printf_i+0x9a>
 8004b2a:	232d      	movs	r3, #45	@ 0x2d
 8004b2c:	9a03      	ldr	r2, [sp, #12]
 8004b2e:	4276      	negs	r6, r6
 8004b30:	7013      	strb	r3, [r2, #0]
 8004b32:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca8 <_printf_i+0x210>)
 8004b34:	270a      	movs	r7, #10
 8004b36:	9304      	str	r3, [sp, #16]
 8004b38:	e018      	b.n	8004b6c <_printf_i+0xd4>
 8004b3a:	6806      	ldr	r6, [r0, #0]
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	0649      	lsls	r1, r1, #25
 8004b40:	d5f1      	bpl.n	8004b26 <_printf_i+0x8e>
 8004b42:	b236      	sxth	r6, r6
 8004b44:	e7ef      	b.n	8004b26 <_printf_i+0x8e>
 8004b46:	6808      	ldr	r0, [r1, #0]
 8004b48:	6819      	ldr	r1, [r3, #0]
 8004b4a:	c940      	ldmia	r1!, {r6}
 8004b4c:	0605      	lsls	r5, r0, #24
 8004b4e:	d402      	bmi.n	8004b56 <_printf_i+0xbe>
 8004b50:	0640      	lsls	r0, r0, #25
 8004b52:	d500      	bpl.n	8004b56 <_printf_i+0xbe>
 8004b54:	b2b6      	uxth	r6, r6
 8004b56:	6019      	str	r1, [r3, #0]
 8004b58:	4b53      	ldr	r3, [pc, #332]	@ (8004ca8 <_printf_i+0x210>)
 8004b5a:	270a      	movs	r7, #10
 8004b5c:	9304      	str	r3, [sp, #16]
 8004b5e:	2a6f      	cmp	r2, #111	@ 0x6f
 8004b60:	d100      	bne.n	8004b64 <_printf_i+0xcc>
 8004b62:	3f02      	subs	r7, #2
 8004b64:	0023      	movs	r3, r4
 8004b66:	2200      	movs	r2, #0
 8004b68:	3343      	adds	r3, #67	@ 0x43
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	6863      	ldr	r3, [r4, #4]
 8004b6e:	60a3      	str	r3, [r4, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	db06      	blt.n	8004b82 <_printf_i+0xea>
 8004b74:	2104      	movs	r1, #4
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	9d03      	ldr	r5, [sp, #12]
 8004b7a:	438a      	bics	r2, r1
 8004b7c:	6022      	str	r2, [r4, #0]
 8004b7e:	4333      	orrs	r3, r6
 8004b80:	d00c      	beq.n	8004b9c <_printf_i+0x104>
 8004b82:	9d03      	ldr	r5, [sp, #12]
 8004b84:	0030      	movs	r0, r6
 8004b86:	0039      	movs	r1, r7
 8004b88:	f7fb fb56 	bl	8000238 <__aeabi_uidivmod>
 8004b8c:	9b04      	ldr	r3, [sp, #16]
 8004b8e:	3d01      	subs	r5, #1
 8004b90:	5c5b      	ldrb	r3, [r3, r1]
 8004b92:	702b      	strb	r3, [r5, #0]
 8004b94:	0033      	movs	r3, r6
 8004b96:	0006      	movs	r6, r0
 8004b98:	429f      	cmp	r7, r3
 8004b9a:	d9f3      	bls.n	8004b84 <_printf_i+0xec>
 8004b9c:	2f08      	cmp	r7, #8
 8004b9e:	d109      	bne.n	8004bb4 <_printf_i+0x11c>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	07db      	lsls	r3, r3, #31
 8004ba4:	d506      	bpl.n	8004bb4 <_printf_i+0x11c>
 8004ba6:	6862      	ldr	r2, [r4, #4]
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	dc02      	bgt.n	8004bb4 <_printf_i+0x11c>
 8004bae:	2330      	movs	r3, #48	@ 0x30
 8004bb0:	3d01      	subs	r5, #1
 8004bb2:	702b      	strb	r3, [r5, #0]
 8004bb4:	9b03      	ldr	r3, [sp, #12]
 8004bb6:	1b5b      	subs	r3, r3, r5
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	9b07      	ldr	r3, [sp, #28]
 8004bbc:	0021      	movs	r1, r4
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	9805      	ldr	r0, [sp, #20]
 8004bc2:	9b06      	ldr	r3, [sp, #24]
 8004bc4:	aa09      	add	r2, sp, #36	@ 0x24
 8004bc6:	f7ff fef7 	bl	80049b8 <_printf_common>
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d148      	bne.n	8004c60 <_printf_i+0x1c8>
 8004bce:	2001      	movs	r0, #1
 8004bd0:	4240      	negs	r0, r0
 8004bd2:	b00b      	add	sp, #44	@ 0x2c
 8004bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	6809      	ldr	r1, [r1, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	6022      	str	r2, [r4, #0]
 8004bde:	2278      	movs	r2, #120	@ 0x78
 8004be0:	4932      	ldr	r1, [pc, #200]	@ (8004cac <_printf_i+0x214>)
 8004be2:	9104      	str	r1, [sp, #16]
 8004be4:	0021      	movs	r1, r4
 8004be6:	3145      	adds	r1, #69	@ 0x45
 8004be8:	700a      	strb	r2, [r1, #0]
 8004bea:	6819      	ldr	r1, [r3, #0]
 8004bec:	6822      	ldr	r2, [r4, #0]
 8004bee:	c940      	ldmia	r1!, {r6}
 8004bf0:	0610      	lsls	r0, r2, #24
 8004bf2:	d402      	bmi.n	8004bfa <_printf_i+0x162>
 8004bf4:	0650      	lsls	r0, r2, #25
 8004bf6:	d500      	bpl.n	8004bfa <_printf_i+0x162>
 8004bf8:	b2b6      	uxth	r6, r6
 8004bfa:	6019      	str	r1, [r3, #0]
 8004bfc:	07d3      	lsls	r3, r2, #31
 8004bfe:	d502      	bpl.n	8004c06 <_printf_i+0x16e>
 8004c00:	2320      	movs	r3, #32
 8004c02:	4313      	orrs	r3, r2
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	2e00      	cmp	r6, #0
 8004c08:	d001      	beq.n	8004c0e <_printf_i+0x176>
 8004c0a:	2710      	movs	r7, #16
 8004c0c:	e7aa      	b.n	8004b64 <_printf_i+0xcc>
 8004c0e:	2220      	movs	r2, #32
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	4393      	bics	r3, r2
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	e7f8      	b.n	8004c0a <_printf_i+0x172>
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	680d      	ldr	r5, [r1, #0]
 8004c1c:	1d10      	adds	r0, r2, #4
 8004c1e:	6949      	ldr	r1, [r1, #20]
 8004c20:	6018      	str	r0, [r3, #0]
 8004c22:	6813      	ldr	r3, [r2, #0]
 8004c24:	062e      	lsls	r6, r5, #24
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0x194>
 8004c28:	6019      	str	r1, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <_printf_i+0x19a>
 8004c2c:	066d      	lsls	r5, r5, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0x190>
 8004c30:	8019      	strh	r1, [r3, #0]
 8004c32:	2300      	movs	r3, #0
 8004c34:	9d03      	ldr	r5, [sp, #12]
 8004c36:	6123      	str	r3, [r4, #16]
 8004c38:	e7bf      	b.n	8004bba <_printf_i+0x122>
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	1d11      	adds	r1, r2, #4
 8004c3e:	6019      	str	r1, [r3, #0]
 8004c40:	6815      	ldr	r5, [r2, #0]
 8004c42:	2100      	movs	r1, #0
 8004c44:	0028      	movs	r0, r5
 8004c46:	6862      	ldr	r2, [r4, #4]
 8004c48:	f000 f856 	bl	8004cf8 <memchr>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d001      	beq.n	8004c54 <_printf_i+0x1bc>
 8004c50:	1b40      	subs	r0, r0, r5
 8004c52:	6060      	str	r0, [r4, #4]
 8004c54:	6863      	ldr	r3, [r4, #4]
 8004c56:	6123      	str	r3, [r4, #16]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9a03      	ldr	r2, [sp, #12]
 8004c5c:	7013      	strb	r3, [r2, #0]
 8004c5e:	e7ac      	b.n	8004bba <_printf_i+0x122>
 8004c60:	002a      	movs	r2, r5
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	9906      	ldr	r1, [sp, #24]
 8004c66:	9805      	ldr	r0, [sp, #20]
 8004c68:	9d07      	ldr	r5, [sp, #28]
 8004c6a:	47a8      	blx	r5
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d0ae      	beq.n	8004bce <_printf_i+0x136>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	079b      	lsls	r3, r3, #30
 8004c74:	d415      	bmi.n	8004ca2 <_printf_i+0x20a>
 8004c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c78:	68e0      	ldr	r0, [r4, #12]
 8004c7a:	4298      	cmp	r0, r3
 8004c7c:	daa9      	bge.n	8004bd2 <_printf_i+0x13a>
 8004c7e:	0018      	movs	r0, r3
 8004c80:	e7a7      	b.n	8004bd2 <_printf_i+0x13a>
 8004c82:	0022      	movs	r2, r4
 8004c84:	2301      	movs	r3, #1
 8004c86:	9906      	ldr	r1, [sp, #24]
 8004c88:	9805      	ldr	r0, [sp, #20]
 8004c8a:	9e07      	ldr	r6, [sp, #28]
 8004c8c:	3219      	adds	r2, #25
 8004c8e:	47b0      	blx	r6
 8004c90:	3001      	adds	r0, #1
 8004c92:	d09c      	beq.n	8004bce <_printf_i+0x136>
 8004c94:	3501      	adds	r5, #1
 8004c96:	68e3      	ldr	r3, [r4, #12]
 8004c98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	42ab      	cmp	r3, r5
 8004c9e:	dcf0      	bgt.n	8004c82 <_printf_i+0x1ea>
 8004ca0:	e7e9      	b.n	8004c76 <_printf_i+0x1de>
 8004ca2:	2500      	movs	r5, #0
 8004ca4:	e7f7      	b.n	8004c96 <_printf_i+0x1fe>
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	08004f0d 	.word	0x08004f0d
 8004cac:	08004f1e 	.word	0x08004f1e

08004cb0 <memmove>:
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	4288      	cmp	r0, r1
 8004cb4:	d902      	bls.n	8004cbc <memmove+0xc>
 8004cb6:	188b      	adds	r3, r1, r2
 8004cb8:	4298      	cmp	r0, r3
 8004cba:	d308      	bcc.n	8004cce <memmove+0x1e>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d007      	beq.n	8004cd2 <memmove+0x22>
 8004cc2:	5ccc      	ldrb	r4, [r1, r3]
 8004cc4:	54c4      	strb	r4, [r0, r3]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	e7f9      	b.n	8004cbe <memmove+0xe>
 8004cca:	5c8b      	ldrb	r3, [r1, r2]
 8004ccc:	5483      	strb	r3, [r0, r2]
 8004cce:	3a01      	subs	r2, #1
 8004cd0:	d2fb      	bcs.n	8004cca <memmove+0x1a>
 8004cd2:	bd10      	pop	{r4, pc}

08004cd4 <_sbrk_r>:
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	b570      	push	{r4, r5, r6, lr}
 8004cd8:	4d06      	ldr	r5, [pc, #24]	@ (8004cf4 <_sbrk_r+0x20>)
 8004cda:	0004      	movs	r4, r0
 8004cdc:	0008      	movs	r0, r1
 8004cde:	602b      	str	r3, [r5, #0]
 8004ce0:	f7fd fc76 	bl	80025d0 <_sbrk>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d103      	bne.n	8004cf0 <_sbrk_r+0x1c>
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d000      	beq.n	8004cf0 <_sbrk_r+0x1c>
 8004cee:	6023      	str	r3, [r4, #0]
 8004cf0:	bd70      	pop	{r4, r5, r6, pc}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	2000039c 	.word	0x2000039c

08004cf8 <memchr>:
 8004cf8:	b2c9      	uxtb	r1, r1
 8004cfa:	1882      	adds	r2, r0, r2
 8004cfc:	4290      	cmp	r0, r2
 8004cfe:	d101      	bne.n	8004d04 <memchr+0xc>
 8004d00:	2000      	movs	r0, #0
 8004d02:	4770      	bx	lr
 8004d04:	7803      	ldrb	r3, [r0, #0]
 8004d06:	428b      	cmp	r3, r1
 8004d08:	d0fb      	beq.n	8004d02 <memchr+0xa>
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	e7f6      	b.n	8004cfc <memchr+0x4>

08004d0e <memcpy>:
 8004d0e:	2300      	movs	r3, #0
 8004d10:	b510      	push	{r4, lr}
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d100      	bne.n	8004d18 <memcpy+0xa>
 8004d16:	bd10      	pop	{r4, pc}
 8004d18:	5ccc      	ldrb	r4, [r1, r3]
 8004d1a:	54c4      	strb	r4, [r0, r3]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	e7f8      	b.n	8004d12 <memcpy+0x4>

08004d20 <_realloc_r>:
 8004d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d22:	0006      	movs	r6, r0
 8004d24:	000c      	movs	r4, r1
 8004d26:	0015      	movs	r5, r2
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	d105      	bne.n	8004d38 <_realloc_r+0x18>
 8004d2c:	0011      	movs	r1, r2
 8004d2e:	f7ff fc55 	bl	80045dc <_malloc_r>
 8004d32:	0004      	movs	r4, r0
 8004d34:	0020      	movs	r0, r4
 8004d36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d38:	2a00      	cmp	r2, #0
 8004d3a:	d103      	bne.n	8004d44 <_realloc_r+0x24>
 8004d3c:	f7ff fbe2 	bl	8004504 <_free_r>
 8004d40:	002c      	movs	r4, r5
 8004d42:	e7f7      	b.n	8004d34 <_realloc_r+0x14>
 8004d44:	f000 f81c 	bl	8004d80 <_malloc_usable_size_r>
 8004d48:	0007      	movs	r7, r0
 8004d4a:	4285      	cmp	r5, r0
 8004d4c:	d802      	bhi.n	8004d54 <_realloc_r+0x34>
 8004d4e:	0843      	lsrs	r3, r0, #1
 8004d50:	42ab      	cmp	r3, r5
 8004d52:	d3ef      	bcc.n	8004d34 <_realloc_r+0x14>
 8004d54:	0029      	movs	r1, r5
 8004d56:	0030      	movs	r0, r6
 8004d58:	f7ff fc40 	bl	80045dc <_malloc_r>
 8004d5c:	9001      	str	r0, [sp, #4]
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d101      	bne.n	8004d66 <_realloc_r+0x46>
 8004d62:	9c01      	ldr	r4, [sp, #4]
 8004d64:	e7e6      	b.n	8004d34 <_realloc_r+0x14>
 8004d66:	002a      	movs	r2, r5
 8004d68:	42bd      	cmp	r5, r7
 8004d6a:	d900      	bls.n	8004d6e <_realloc_r+0x4e>
 8004d6c:	003a      	movs	r2, r7
 8004d6e:	0021      	movs	r1, r4
 8004d70:	9801      	ldr	r0, [sp, #4]
 8004d72:	f7ff ffcc 	bl	8004d0e <memcpy>
 8004d76:	0021      	movs	r1, r4
 8004d78:	0030      	movs	r0, r6
 8004d7a:	f7ff fbc3 	bl	8004504 <_free_r>
 8004d7e:	e7f0      	b.n	8004d62 <_realloc_r+0x42>

08004d80 <_malloc_usable_size_r>:
 8004d80:	1f0b      	subs	r3, r1, #4
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	1f18      	subs	r0, r3, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	da01      	bge.n	8004d8e <_malloc_usable_size_r+0xe>
 8004d8a:	580b      	ldr	r3, [r1, r0]
 8004d8c:	18c0      	adds	r0, r0, r3
 8004d8e:	4770      	bx	lr

08004d90 <_init>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr

08004d9c <_fini>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da2:	bc08      	pop	{r3}
 8004da4:	469e      	mov	lr, r3
 8004da6:	4770      	bx	lr
