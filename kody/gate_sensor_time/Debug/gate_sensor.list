
gate_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005c6c  08005c6c  00006c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d84  08005d84  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005d84  08005d84  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005d84  08005d84  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d84  08005d84  00006d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d88  08005d88  00006d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005d8c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000005c  08005de8  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08005de8  00007300  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141c4  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002932  00000000  00000000  0001b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001db80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3a  00000000  00000000  0001ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001593f  00000000  00000000  0001f97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168e3  00000000  00000000  000352b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085243  00000000  00000000  0004bb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0ddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000421c  00000000  00000000  000d0e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d5040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c54 	.word	0x08005c54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005c54 	.word	0x08005c54

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <bma400_init>:
/************************************************************************************/
/*********************** User function definitions **********************************/
/************************************************************************************/

int8_t bma400_init(struct bma400_dev *dev)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000420:	260e      	movs	r6, #14
 8000422:	19bb      	adds	r3, r7, r6
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000428:	250f      	movs	r5, #15
 800042a:	197c      	adds	r4, r7, r5
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	0018      	movs	r0, r3
 8000430:	f000 fb8a 	bl	8000b48 <null_ptr_check>
 8000434:	0003      	movs	r3, r0
 8000436:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8000438:	002c      	movs	r4, r5
 800043a:	193b      	adds	r3, r7, r4
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	b25b      	sxtb	r3, r3
 8000440:	2b00      	cmp	r3, #0
 8000442:	d13c      	bne.n	80004be <bma400_init+0xa6>
    {
        /* Initial power-up time */
        dev->delay_us(5000, dev->intf_ptr);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	4820      	ldr	r0, [pc, #128]	@ (80004d0 <bma400_init+0xb8>)
 800044e:	0019      	movs	r1, r3
 8000450:	4790      	blx	r2

        /* Assigning dummy byte value */
        if (dev->intf == BMA400_SPI_INTF)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	785b      	ldrb	r3, [r3, #1]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d10c      	bne.n	8000474 <bma400_init+0x5c>
        {
            /* Dummy Byte availability */
            dev->dummy_byte = 1;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2201      	movs	r2, #1
 800045e:	721a      	strb	r2, [r3, #8]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8000460:	193c      	adds	r4, r7, r4
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	19b9      	adds	r1, r7, r6
 8000466:	2201      	movs	r2, #1
 8000468:	2000      	movs	r0, #0
 800046a:	f000 f8b1 	bl	80005d0 <bma400_get_regs>
 800046e:	0003      	movs	r3, r0
 8000470:	7023      	strb	r3, [r4, #0]
 8000472:	e002      	b.n	800047a <bma400_init+0x62>
        }
        else
        {
            dev->dummy_byte = 0;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2200      	movs	r2, #0
 8000478:	721a      	strb	r2, [r3, #8]
        }

        if (rslt == BMA400_OK)
 800047a:	250f      	movs	r5, #15
 800047c:	197b      	adds	r3, r7, r5
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b25b      	sxtb	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d11b      	bne.n	80004be <bma400_init+0xa6>
        {
            /* Chip ID of the sensor is read */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8000486:	197c      	adds	r4, r7, r5
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	260e      	movs	r6, #14
 800048c:	19b9      	adds	r1, r7, r6
 800048e:	2201      	movs	r2, #1
 8000490:	2000      	movs	r0, #0
 8000492:	f000 f89d 	bl	80005d0 <bma400_get_regs>
 8000496:	0003      	movs	r3, r0
 8000498:	7023      	strb	r3, [r4, #0]

            /* Proceed if everything is fine until now */
            if (rslt == BMA400_OK)
 800049a:	197b      	adds	r3, r7, r5
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b25b      	sxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d10c      	bne.n	80004be <bma400_init+0xa6>
            {
                /* Check for chip id validity */
                if (chip_id == BMA400_CHIP_ID)
 80004a4:	19bb      	adds	r3, r7, r6
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b90      	cmp	r3, #144	@ 0x90
 80004aa:	d104      	bne.n	80004b6 <bma400_init+0x9e>
                {
                    /* Store the chip ID in dev structure */
                    dev->chip_id = chip_id;
 80004ac:	19bb      	adds	r3, r7, r6
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e003      	b.n	80004be <bma400_init+0xa6>
                }
                else
                {
                    rslt = BMA400_E_DEV_NOT_FOUND;
 80004b6:	230f      	movs	r3, #15
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	22fd      	movs	r2, #253	@ 0xfd
 80004bc:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    return rslt;
 80004be:	230f      	movs	r3, #15
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	b25b      	sxtb	r3, r3
}
 80004c6:	0018      	movs	r0, r3
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b005      	add	sp, #20
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	00001388 	.word	0x00001388

080004d4 <bma400_set_regs>:

int8_t bma400_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	b087      	sub	sp, #28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	230f      	movs	r3, #15
 80004e2:	18fb      	adds	r3, r7, r3
 80004e4:	1c02      	adds	r2, r0, #0
 80004e6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t count;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80004e8:	2617      	movs	r6, #23
 80004ea:	19bc      	adds	r4, r7, r6
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fb2a 	bl	8000b48 <null_ptr_check>
 80004f4:	0003      	movs	r3, r0
 80004f6:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 80004f8:	19bb      	adds	r3, r7, r6
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d158      	bne.n	80005b4 <bma400_set_regs+0xe0>
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d055      	beq.n	80005b4 <bma400_set_regs+0xe0>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        if (len == 1)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d116      	bne.n	800053c <bma400_set_regs+0x68>
        {
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	691c      	ldr	r4, [r3, #16]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685d      	ldr	r5, [r3, #4]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	68b9      	ldr	r1, [r7, #8]
 800051a:	230f      	movs	r3, #15
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	7818      	ldrb	r0, [r3, #0]
 8000520:	002b      	movs	r3, r5
 8000522:	47a0      	blx	r4
 8000524:	0003      	movs	r3, r0
 8000526:	001a      	movs	r2, r3
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	771a      	strb	r2, [r3, #28]
            if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	7f1b      	ldrb	r3, [r3, #28]
 8000530:	b25b      	sxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <bma400_set_regs+0x68>
            {
                /* Failure case */
                rslt = BMA400_E_COM_FAIL;
 8000536:	19bb      	adds	r3, r7, r6
 8000538:	22fe      	movs	r2, #254	@ 0xfe
 800053a:	701a      	strb	r2, [r3, #0]

        /* Burst write is not allowed thus we split burst case write
         * into single byte writes Thus user can write multiple bytes
         * with ease
         */
        if (len > 1)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d93d      	bls.n	80005be <bma400_set_regs+0xea>
        {
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8000542:	2316      	movs	r3, #22
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
 800054a:	e026      	b.n	800059a <bma400_set_regs+0xc6>
            {
                dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr);
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	691c      	ldr	r4, [r3, #16]
 8000550:	2316      	movs	r3, #22
 8000552:	18fb      	adds	r3, r7, r3
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	18d1      	adds	r1, r2, r3
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	685a      	ldr	r2, [r3, #4]
 800055e:	250f      	movs	r5, #15
 8000560:	197b      	adds	r3, r7, r5
 8000562:	7818      	ldrb	r0, [r3, #0]
 8000564:	0013      	movs	r3, r2
 8000566:	2201      	movs	r2, #1
 8000568:	47a0      	blx	r4
 800056a:	0003      	movs	r3, r0
 800056c:	001a      	movs	r2, r3
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	771a      	strb	r2, [r3, #28]
                reg_addr++;
 8000572:	197b      	adds	r3, r7, r5
 8000574:	781a      	ldrb	r2, [r3, #0]
 8000576:	197b      	adds	r3, r7, r5
 8000578:	3201      	adds	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
                if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	7f1b      	ldrb	r3, [r3, #28]
 8000580:	b25b      	sxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d003      	beq.n	800058e <bma400_set_regs+0xba>
                {
                    /* Failure case */
                    rslt = BMA400_E_COM_FAIL;
 8000586:	2317      	movs	r3, #23
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	22fe      	movs	r2, #254	@ 0xfe
 800058c:	701a      	strb	r2, [r3, #0]
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 800058e:	2116      	movs	r1, #22
 8000590:	187b      	adds	r3, r7, r1
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	187b      	adds	r3, r7, r1
 8000596:	3201      	adds	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	2316      	movs	r3, #22
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d90b      	bls.n	80005be <bma400_set_regs+0xea>
 80005a6:	2317      	movs	r3, #23
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0cc      	beq.n	800054c <bma400_set_regs+0x78>
        if (len > 1)
 80005b2:	e004      	b.n	80005be <bma400_set_regs+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 80005b4:	2317      	movs	r3, #23
 80005b6:	18fb      	adds	r3, r7, r3
 80005b8:	22ff      	movs	r2, #255	@ 0xff
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	e000      	b.n	80005c0 <bma400_set_regs+0xec>
        if (len > 1)
 80005be:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 80005c0:	2317      	movs	r3, #23
 80005c2:	18fb      	adds	r3, r7, r3
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b25b      	sxtb	r3, r3
}
 80005c8:	0018      	movs	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b007      	add	sp, #28
 80005ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005d0 <bma400_get_regs>:

int8_t bma400_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 80005d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d2:	b0a7      	sub	sp, #156	@ 0x9c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	250f      	movs	r5, #15
 80005de:	197b      	adds	r3, r7, r5
 80005e0:	1c02      	adds	r2, r0, #0
 80005e2:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t index;
    uint8_t temp_buff[BMA400_MAX_LEN];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80005e4:	2697      	movs	r6, #151	@ 0x97
 80005e6:	19bc      	adds	r4, r7, r6
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 faac 	bl	8000b48 <null_ptr_check>
 80005f0:	0003      	movs	r3, r0
 80005f2:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 80005f4:	19bb      	adds	r3, r7, r6
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d14a      	bne.n	8000694 <bma400_get_regs+0xc4>
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d047      	beq.n	8000694 <bma400_get_regs+0xc4>
    {
        if (dev->intf != BMA400_I2C_INTF)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d006      	beq.n	800061a <bma400_get_regs+0x4a>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 800060c:	197b      	adds	r3, r7, r5
 800060e:	197a      	adds	r2, r7, r5
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	2180      	movs	r1, #128	@ 0x80
 8000614:	4249      	negs	r1, r1
 8000616:	430a      	orrs	r2, r1
 8000618:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	68dc      	ldr	r4, [r3, #12]
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	7a1b      	ldrb	r3, [r3, #8]
 8000622:	001a      	movs	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	18d2      	adds	r2, r2, r3
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685d      	ldr	r5, [r3, #4]
 800062c:	2314      	movs	r3, #20
 800062e:	18f9      	adds	r1, r7, r3
 8000630:	230f      	movs	r3, #15
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	7818      	ldrb	r0, [r3, #0]
 8000636:	002b      	movs	r3, r5
 8000638:	47a0      	blx	r4
 800063a:	0003      	movs	r3, r0
 800063c:	001a      	movs	r2, r3
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	771a      	strb	r2, [r3, #28]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	7f1b      	ldrb	r3, [r3, #28]
 8000646:	b25b      	sxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d11e      	bne.n	800068a <bma400_get_regs+0xba>
        {
            for (index = 0; index < len; index++)
 800064c:	2394      	movs	r3, #148	@ 0x94
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	2200      	movs	r2, #0
 8000652:	801a      	strh	r2, [r3, #0]
 8000654:	e012      	b.n	800067c <bma400_get_regs+0xac>
            {
                /* Parse the data read and store in "reg_data"
                 * buffer so that the dummy byte is removed
                 * and user will get only valid data
                 */
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 8000656:	2094      	movs	r0, #148	@ 0x94
 8000658:	183b      	adds	r3, r7, r0
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	7a12      	ldrb	r2, [r2, #8]
 8000660:	189a      	adds	r2, r3, r2
 8000662:	183b      	adds	r3, r7, r0
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	68b9      	ldr	r1, [r7, #8]
 8000668:	18cb      	adds	r3, r1, r3
 800066a:	2114      	movs	r1, #20
 800066c:	1879      	adds	r1, r7, r1
 800066e:	5c8a      	ldrb	r2, [r1, r2]
 8000670:	701a      	strb	r2, [r3, #0]
            for (index = 0; index < len; index++)
 8000672:	183b      	adds	r3, r7, r0
 8000674:	881a      	ldrh	r2, [r3, #0]
 8000676:	183b      	adds	r3, r7, r0
 8000678:	3201      	adds	r2, #1
 800067a:	801a      	strh	r2, [r3, #0]
 800067c:	2394      	movs	r3, #148	@ 0x94
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	d8e6      	bhi.n	8000656 <bma400_get_regs+0x86>
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8000688:	e008      	b.n	800069c <bma400_get_regs+0xcc>
            }
        }
        else
        {
            /* Failure case */
            rslt = BMA400_E_COM_FAIL;
 800068a:	2397      	movs	r3, #151	@ 0x97
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	22fe      	movs	r2, #254	@ 0xfe
 8000690:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8000692:	e003      	b.n	800069c <bma400_get_regs+0xcc>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8000694:	2397      	movs	r3, #151	@ 0x97
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	22ff      	movs	r2, #255	@ 0xff
 800069a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800069c:	2397      	movs	r3, #151	@ 0x97
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b25b      	sxtb	r3, r3
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b027      	add	sp, #156	@ 0x9c
 80006aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006ac <bma400_set_power_mode>:

    return rslt;
}

int8_t bma400_set_power_mode(uint8_t power_mode, struct bma400_dev *dev)
{
 80006ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	0002      	movs	r2, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data = 0;
 80006ba:	260e      	movs	r6, #14
 80006bc:	19bb      	adds	r3, r7, r6
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]

    rslt = null_ptr_check(dev);
 80006c2:	250f      	movs	r5, #15
 80006c4:	197c      	adds	r4, r7, r5
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fa3d 	bl	8000b48 <null_ptr_check>
 80006ce:	0003      	movs	r3, r0
 80006d0:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 80006d2:	197b      	adds	r3, r7, r5
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d108      	bne.n	80006ee <bma400_set_power_mode+0x42>
    {
        rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	19b9      	adds	r1, r7, r6
 80006e2:	2201      	movs	r2, #1
 80006e4:	2019      	movs	r0, #25
 80006e6:	f7ff ff73 	bl	80005d0 <bma400_get_regs>
 80006ea:	0003      	movs	r3, r0
 80006ec:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BMA400_OK)
 80006ee:	240f      	movs	r4, #15
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d12d      	bne.n	8000756 <bma400_set_power_mode+0xaa>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 80006fa:	200e      	movs	r0, #14
 80006fc:	183b      	adds	r3, r7, r0
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b25b      	sxtb	r3, r3
 8000702:	2203      	movs	r2, #3
 8000704:	4393      	bics	r3, r2
 8000706:	b25a      	sxtb	r2, r3
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b25b      	sxtb	r3, r3
 800070e:	2103      	movs	r1, #3
 8000710:	400b      	ands	r3, r1
 8000712:	b25b      	sxtb	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	b25b      	sxtb	r3, r3
 8000718:	b2da      	uxtb	r2, r3
 800071a:	183b      	adds	r3, r7, r0
 800071c:	701a      	strb	r2, [r3, #0]

        /* Set the power mode of sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 800071e:	193c      	adds	r4, r7, r4
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	1839      	adds	r1, r7, r0
 8000724:	2201      	movs	r2, #1
 8000726:	2019      	movs	r0, #25
 8000728:	f7ff fed4 	bl	80004d4 <bma400_set_regs>
 800072c:	0003      	movs	r3, r0
 800072e:	7023      	strb	r3, [r4, #0]
        if (power_mode == BMA400_MODE_LOW_POWER)
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d107      	bne.n	8000748 <bma400_set_power_mode+0x9c>
        {
            /* A delay of 1/ODR is required to switch power modes
             * Low power mode has 25Hz frequency and hence it needs
             * 40ms delay to enter low power mode
             */
            dev->delay_us(40000, dev->intf_ptr);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	695a      	ldr	r2, [r3, #20]
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4809      	ldr	r0, [pc, #36]	@ (8000768 <bma400_set_power_mode+0xbc>)
 8000742:	0019      	movs	r1, r3
 8000744:	4790      	blx	r2
 8000746:	e006      	b.n	8000756 <bma400_set_power_mode+0xaa>
        }
        else
        {
            dev->delay_us(10000, dev->intf_ptr); /* TBC */
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	4806      	ldr	r0, [pc, #24]	@ (800076c <bma400_set_power_mode+0xc0>)
 8000752:	0019      	movs	r1, r3
 8000754:	4790      	blx	r2
        }
    }

    return rslt;
 8000756:	230f      	movs	r3, #15
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b25b      	sxtb	r3, r3
}
 800075e:	0018      	movs	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	b005      	add	sp, #20
 8000764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	00009c40 	.word	0x00009c40
 800076c:	00002710 	.word	0x00002710

08000770 <bma400_get_accel_data>:

    return rslt;
}

int8_t bma400_get_accel_data(uint8_t data_sel, struct bma400_sensor_data *accel, struct bma400_dev *dev)
{
 8000770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000772:	b087      	sub	sp, #28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	260f      	movs	r6, #15
 800077c:	19bb      	adds	r3, r7, r6
 800077e:	1c02      	adds	r2, r0, #0
 8000780:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000782:	2517      	movs	r5, #23
 8000784:	197c      	adds	r4, r7, r5
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	0018      	movs	r0, r3
 800078a:	f000 f9dd 	bl	8000b48 <null_ptr_check>
 800078e:	0003      	movs	r3, r0
 8000790:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (accel != NULL))
 8000792:	002a      	movs	r2, r5
 8000794:	18bb      	adds	r3, r7, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b25b      	sxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10d      	bne.n	80007ba <bma400_get_accel_data+0x4a>
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00a      	beq.n	80007ba <bma400_get_accel_data+0x4a>
    {
        /* Read and store the accel data */
        rslt = get_accel_data(data_sel, accel, dev);
 80007a4:	18bc      	adds	r4, r7, r2
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	19bb      	adds	r3, r7, r6
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fb50 	bl	8000e54 <get_accel_data>
 80007b4:	0003      	movs	r3, r0
 80007b6:	7023      	strb	r3, [r4, #0]
 80007b8:	e003      	b.n	80007c2 <bma400_get_accel_data+0x52>
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 80007ba:	2317      	movs	r3, #23
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	22ff      	movs	r2, #255	@ 0xff
 80007c0:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80007c2:	2317      	movs	r3, #23
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b25b      	sxtb	r3, r3
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b007      	add	sp, #28
 80007d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007d2 <bma400_set_sensor_conf>:

int8_t bma400_set_sensor_conf(const struct bma400_sensor_conf *conf, uint16_t n_sett, struct bma400_dev *dev)
{
 80007d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d4:	b087      	sub	sp, #28
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	60f8      	str	r0, [r7, #12]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	230a      	movs	r3, #10
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	1c0a      	adds	r2, r1, #0
 80007e2:	801a      	strh	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx = 0;
 80007e4:	2614      	movs	r6, #20
 80007e6:	19bb      	adds	r3, r7, r6
 80007e8:	2200      	movs	r2, #0
 80007ea:	801a      	strh	r2, [r3, #0]
    uint8_t data_array[3] = { 0 };
 80007ec:	2310      	movs	r3, #16
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	0018      	movs	r0, r3
 80007f2:	2303      	movs	r3, #3
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f004 fdb2 	bl	8005360 <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80007fc:	2517      	movs	r5, #23
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f9a0 	bl	8000b48 <null_ptr_check>
 8000808:	0003      	movs	r3, r0
 800080a:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (conf != NULL))
 800080c:	197b      	adds	r3, r7, r5
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b25b      	sxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14d      	bne.n	80008b2 <bma400_set_sensor_conf+0xe0>
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d04a      	beq.n	80008b2 <bma400_set_sensor_conf+0xe0>
    {
        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 800081c:	197c      	adds	r4, r7, r5
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2210      	movs	r2, #16
 8000822:	18b9      	adds	r1, r7, r2
 8000824:	2203      	movs	r2, #3
 8000826:	2021      	movs	r0, #33	@ 0x21
 8000828:	f7ff fed2 	bl	80005d0 <bma400_get_regs>
 800082c:	0003      	movs	r3, r0
 800082e:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8000830:	197b      	adds	r3, r7, r5
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b25b      	sxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d140      	bne.n	80008bc <bma400_set_sensor_conf+0xea>
        {
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 800083a:	19bb      	adds	r3, r7, r6
 800083c:	2200      	movs	r2, #0
 800083e:	801a      	strh	r2, [r3, #0]
 8000840:	e018      	b.n	8000874 <bma400_set_sensor_conf+0xa2>
            {
                rslt = set_sensor_conf(data_array, conf + idx, dev);
 8000842:	2514      	movs	r5, #20
 8000844:	197b      	adds	r3, r7, r5
 8000846:	881a      	ldrh	r2, [r3, #0]
 8000848:	0013      	movs	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	189b      	adds	r3, r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	001a      	movs	r2, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	1899      	adds	r1, r3, r2
 8000856:	2317      	movs	r3, #23
 8000858:	18fc      	adds	r4, r7, r3
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	2310      	movs	r3, #16
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	0018      	movs	r0, r3
 8000862:	f000 f995 	bl	8000b90 <set_sensor_conf>
 8000866:	0003      	movs	r3, r0
 8000868:	7023      	strb	r3, [r4, #0]
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 800086a:	197b      	adds	r3, r7, r5
 800086c:	881a      	ldrh	r2, [r3, #0]
 800086e:	197b      	adds	r3, r7, r5
 8000870:	3201      	adds	r2, #1
 8000872:	801a      	strh	r2, [r3, #0]
 8000874:	2314      	movs	r3, #20
 8000876:	18fa      	adds	r2, r7, r3
 8000878:	230a      	movs	r3, #10
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	8812      	ldrh	r2, [r2, #0]
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	d205      	bcs.n	8000890 <bma400_set_sensor_conf+0xbe>
 8000884:	2317      	movs	r3, #23
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0d8      	beq.n	8000842 <bma400_set_sensor_conf+0x70>
            }

            if (rslt == BMA400_OK)
 8000890:	2217      	movs	r2, #23
 8000892:	18bb      	adds	r3, r7, r2
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b25b      	sxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10f      	bne.n	80008bc <bma400_set_sensor_conf+0xea>
            {
                /* Set the interrupt pin mapping configurations */
                rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 800089c:	18bc      	adds	r4, r7, r2
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2210      	movs	r2, #16
 80008a2:	18b9      	adds	r1, r7, r2
 80008a4:	2203      	movs	r2, #3
 80008a6:	2021      	movs	r0, #33	@ 0x21
 80008a8:	f7ff fe14 	bl	80004d4 <bma400_set_regs>
 80008ac:	0003      	movs	r3, r0
 80008ae:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 80008b0:	e004      	b.n	80008bc <bma400_set_sensor_conf+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 80008b2:	2317      	movs	r3, #23
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	22ff      	movs	r2, #255	@ 0xff
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	e000      	b.n	80008be <bma400_set_sensor_conf+0xec>
        if (rslt == BMA400_OK)
 80008bc:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 80008be:	2317      	movs	r3, #23
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b25b      	sxtb	r3, r3
}
 80008c6:	0018      	movs	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b007      	add	sp, #28
 80008cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080008d0 <bma400_set_device_conf>:

    return rslt;
}

int8_t bma400_set_device_conf(const struct bma400_device_conf *conf, uint8_t n_sett, struct bma400_dev *dev)
{
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	230b      	movs	r3, #11
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	1c0a      	adds	r2, r1, #0
 80008e0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx;
    uint8_t data_array[3] = { 0 };
 80008e2:	2610      	movs	r6, #16
 80008e4:	19bb      	adds	r3, r7, r6
 80008e6:	0018      	movs	r0, r3
 80008e8:	2303      	movs	r3, #3
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f004 fd37 	bl	8005360 <memset>

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80008f2:	2517      	movs	r5, #23
 80008f4:	197c      	adds	r4, r7, r5
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 f925 	bl	8000b48 <null_ptr_check>
 80008fe:	0003      	movs	r3, r0
 8000900:	7023      	strb	r3, [r4, #0]

    if ((rslt == BMA400_OK) && (conf != NULL))
 8000902:	197b      	adds	r3, r7, r5
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b25b      	sxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d000      	beq.n	800090e <bma400_set_device_conf+0x3e>
 800090c:	e10e      	b.n	8000b2c <bma400_set_device_conf+0x25c>
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d100      	bne.n	8000916 <bma400_set_device_conf+0x46>
 8000914:	e10a      	b.n	8000b2c <bma400_set_device_conf+0x25c>
    {

        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8000916:	197c      	adds	r4, r7, r5
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	19b9      	adds	r1, r7, r6
 800091c:	2203      	movs	r2, #3
 800091e:	2021      	movs	r0, #33	@ 0x21
 8000920:	f7ff fe56 	bl	80005d0 <bma400_get_regs>
 8000924:	0003      	movs	r3, r0
 8000926:	7023      	strb	r3, [r4, #0]

        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8000928:	2314      	movs	r3, #20
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	2200      	movs	r2, #0
 800092e:	801a      	strh	r2, [r3, #0]
 8000930:	e0db      	b.n	8000aea <bma400_set_device_conf+0x21a>
        {
            switch (conf[idx].type)
 8000932:	2314      	movs	r3, #20
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	881a      	ldrh	r2, [r3, #0]
 8000938:	0013      	movs	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	189b      	adds	r3, r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	001a      	movs	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	189b      	adds	r3, r3, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b05      	cmp	r3, #5
 800094a:	d900      	bls.n	800094e <bma400_set_device_conf+0x7e>
 800094c:	e0bf      	b.n	8000ace <bma400_set_device_conf+0x1fe>
 800094e:	009a      	lsls	r2, r3, #2
 8000950:	4b7c      	ldr	r3, [pc, #496]	@ (8000b44 <bma400_set_device_conf+0x274>)
 8000952:	18d3      	adds	r3, r2, r3
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	469f      	mov	pc, r3
            {
                case BMA400_AUTOWAKEUP_TIMEOUT:
                    rslt = set_autowakeup_timeout(&conf[idx].param.auto_wakeup, dev);
 8000958:	2314      	movs	r3, #20
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	881a      	ldrh	r2, [r3, #0]
 800095e:	0013      	movs	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	189b      	adds	r3, r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	001a      	movs	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	189b      	adds	r3, r3, r2
 800096c:	3302      	adds	r3, #2
 800096e:	2217      	movs	r2, #23
 8000970:	18bc      	adds	r4, r7, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fb56 	bl	8001028 <set_autowakeup_timeout>
 800097c:	0003      	movs	r3, r0
 800097e:	7023      	strb	r3, [r4, #0]
                    break;
 8000980:	e0ad      	b.n	8000ade <bma400_set_device_conf+0x20e>
                case BMA400_AUTOWAKEUP_INT:
                    rslt = set_autowakeup_interrupt(&conf[idx].param.wakeup, dev);
 8000982:	2514      	movs	r5, #20
 8000984:	197b      	adds	r3, r7, r5
 8000986:	881a      	ldrh	r2, [r3, #0]
 8000988:	0013      	movs	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	189b      	adds	r3, r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	001a      	movs	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	189b      	adds	r3, r3, r2
 8000996:	3302      	adds	r3, #2
 8000998:	2617      	movs	r6, #23
 800099a:	19bc      	adds	r4, r7, r6
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fbdd 	bl	8001160 <set_autowakeup_interrupt>
 80009a6:	0003      	movs	r3, r0
 80009a8:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 80009aa:	19bb      	adds	r3, r7, r6
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d000      	beq.n	80009b6 <bma400_set_device_conf+0xe6>
 80009b4:	e090      	b.n	8000ad8 <bma400_set_device_conf+0x208>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_WAKEUP_INT_MAP, conf[idx].param.wakeup.int_chan);
 80009b6:	197b      	adds	r3, r7, r5
 80009b8:	881a      	ldrh	r2, [r3, #0]
 80009ba:	0013      	movs	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	189b      	adds	r3, r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	001a      	movs	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	189b      	adds	r3, r3, r2
 80009c8:	7a5a      	ldrb	r2, [r3, #9]
 80009ca:	2310      	movs	r3, #16
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2107      	movs	r1, #7
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 ffb7 	bl	8001944 <map_int_pin>
                    }

                    break;
 80009d6:	e07f      	b.n	8000ad8 <bma400_set_device_conf+0x208>
                case BMA400_AUTO_LOW_POWER:
                    rslt = set_auto_low_power(&conf[idx].param.auto_lp, dev);
 80009d8:	2314      	movs	r3, #20
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	881a      	ldrh	r2, [r3, #0]
 80009de:	0013      	movs	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	189b      	adds	r3, r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	001a      	movs	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	189b      	adds	r3, r3, r2
 80009ec:	3302      	adds	r3, #2
 80009ee:	2217      	movs	r2, #23
 80009f0:	18bc      	adds	r4, r7, r2
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fc16 	bl	8001228 <set_auto_low_power>
 80009fc:	0003      	movs	r3, r0
 80009fe:	7023      	strb	r3, [r4, #0]
                    break;
 8000a00:	e06d      	b.n	8000ade <bma400_set_device_conf+0x20e>
                case BMA400_INT_PIN_CONF:
                    rslt = set_int_pin_conf(conf[idx].param.int_conf, dev);
 8000a02:	2314      	movs	r3, #20
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	881a      	ldrh	r2, [r3, #0]
 8000a08:	0013      	movs	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	189b      	adds	r3, r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	001a      	movs	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	189b      	adds	r3, r3, r2
 8000a16:	2217      	movs	r2, #23
 8000a18:	18bc      	adds	r4, r7, r2
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	5a9a      	ldrh	r2, [r3, r2]
 8000a20:	2300      	movs	r3, #0
 8000a22:	0412      	lsls	r2, r2, #16
 8000a24:	0c12      	lsrs	r2, r2, #16
 8000a26:	0c1b      	lsrs	r3, r3, #16
 8000a28:	041b      	lsls	r3, r3, #16
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 faa9 	bl	8001f84 <set_int_pin_conf>
 8000a32:	0003      	movs	r3, r0
 8000a34:	7023      	strb	r3, [r4, #0]
                    break;
 8000a36:	e052      	b.n	8000ade <bma400_set_device_conf+0x20e>
                case BMA400_INT_OVERRUN_CONF:

                    /* Interrupt pin mapping */
                    map_int_pin(data_array, BMA400_INT_OVERRUN_MAP, conf[idx].param.overrun_int.int_chan);
 8000a38:	2314      	movs	r3, #20
 8000a3a:	18fb      	adds	r3, r7, r3
 8000a3c:	881a      	ldrh	r2, [r3, #0]
 8000a3e:	0013      	movs	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	189b      	adds	r3, r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	001a      	movs	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	189b      	adds	r3, r3, r2
 8000a4c:	789a      	ldrb	r2, [r3, #2]
 8000a4e:	2310      	movs	r3, #16
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	210b      	movs	r1, #11
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 ff75 	bl	8001944 <map_int_pin>
                    break;
 8000a5a:	e040      	b.n	8000ade <bma400_set_device_conf+0x20e>
                case BMA400_FIFO_CONF:
                    rslt = set_fifo_conf(&conf[idx].param.fifo_conf, dev);
 8000a5c:	2514      	movs	r5, #20
 8000a5e:	197b      	adds	r3, r7, r5
 8000a60:	881a      	ldrh	r2, [r3, #0]
 8000a62:	0013      	movs	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	189b      	adds	r3, r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	189b      	adds	r3, r3, r2
 8000a70:	3302      	adds	r3, #2
 8000a72:	2617      	movs	r6, #23
 8000a74:	19bc      	adds	r4, r7, r6
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 fadb 	bl	8002036 <set_fifo_conf>
 8000a80:	0003      	movs	r3, r0
 8000a82:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 8000a84:	19bb      	adds	r3, r7, r6
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d126      	bne.n	8000adc <bma400_set_device_conf+0x20c>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_FIFO_WM_INT_MAP, conf[idx].param.fifo_conf.fifo_wm_channel);
 8000a8e:	197b      	adds	r3, r7, r5
 8000a90:	881a      	ldrh	r2, [r3, #0]
 8000a92:	0013      	movs	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	189b      	adds	r3, r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	189b      	adds	r3, r3, r2
 8000aa0:	79da      	ldrb	r2, [r3, #7]
 8000aa2:	2410      	movs	r4, #16
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 ff4b 	bl	8001944 <map_int_pin>
                        map_int_pin(data_array, BMA400_FIFO_FULL_INT_MAP, conf[idx].param.fifo_conf.fifo_full_channel);
 8000aae:	197b      	adds	r3, r7, r5
 8000ab0:	881a      	ldrh	r2, [r3, #0]
 8000ab2:	0013      	movs	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	189b      	adds	r3, r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	001a      	movs	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	189b      	adds	r3, r3, r2
 8000ac0:	799a      	ldrb	r2, [r3, #6]
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 ff3c 	bl	8001944 <map_int_pin>
                    }

                    break;
 8000acc:	e006      	b.n	8000adc <bma400_set_device_conf+0x20c>
                default:
                    rslt = BMA400_E_INVALID_CONFIG;
 8000ace:	2317      	movs	r3, #23
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	22fc      	movs	r2, #252	@ 0xfc
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e002      	b.n	8000ade <bma400_set_device_conf+0x20e>
                    break;
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	e000      	b.n	8000ade <bma400_set_device_conf+0x20e>
                    break;
 8000adc:	46c0      	nop			@ (mov r8, r8)
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8000ade:	2114      	movs	r1, #20
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	881a      	ldrh	r2, [r3, #0]
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	3201      	adds	r2, #1
 8000ae8:	801a      	strh	r2, [r3, #0]
 8000aea:	230b      	movs	r3, #11
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	2214      	movs	r2, #20
 8000af4:	18ba      	adds	r2, r7, r2
 8000af6:	8812      	ldrh	r2, [r2, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d206      	bcs.n	8000b0a <bma400_set_device_conf+0x23a>
 8000afc:	2317      	movs	r3, #23
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d100      	bne.n	8000b0a <bma400_set_device_conf+0x23a>
 8000b08:	e713      	b.n	8000932 <bma400_set_device_conf+0x62>
            }
        }

        if (rslt == BMA400_OK)
 8000b0a:	2217      	movs	r2, #23
 8000b0c:	18bb      	adds	r3, r7, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10e      	bne.n	8000b34 <bma400_set_device_conf+0x264>
        {
            /* Set the interrupt pin mapping configurations */
            rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8000b16:	18bc      	adds	r4, r7, r2
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2210      	movs	r2, #16
 8000b1c:	18b9      	adds	r1, r7, r2
 8000b1e:	2203      	movs	r2, #3
 8000b20:	2021      	movs	r0, #33	@ 0x21
 8000b22:	f7ff fcd7 	bl	80004d4 <bma400_set_regs>
 8000b26:	0003      	movs	r3, r0
 8000b28:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8000b2a:	e003      	b.n	8000b34 <bma400_set_device_conf+0x264>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8000b2c:	2317      	movs	r3, #23
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	22ff      	movs	r2, #255	@ 0xff
 8000b32:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8000b34:	2317      	movs	r3, #23
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b25b      	sxtb	r3, r3
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b007      	add	sp, #28
 8000b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b44:	08005c80 	.word	0x08005c80

08000b48 <null_ptr_check>:
/************************************************************************************/
/*********************** Static function definitions **********************************/
/************************************************************************************/

static int8_t null_ptr_check(const struct bma400_dev *dev)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->intf_ptr == NULL))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00b      	beq.n	8000b6e <null_ptr_check+0x26>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d007      	beq.n	8000b6e <null_ptr_check+0x26>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <null_ptr_check+0x26>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d104      	bne.n	8000b78 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BMA400_E_NULL_PTR;
 8000b6e:	230f      	movs	r3, #15
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	22ff      	movs	r2, #255	@ 0xff
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	e003      	b.n	8000b80 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMA400_OK;
 8000b78:	230f      	movs	r3, #15
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8000b80:	230f      	movs	r3, #15
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b25b      	sxtb	r3, r3
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b004      	add	sp, #16
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <set_sensor_conf>:

static int8_t set_sensor_conf(uint8_t *data, const struct bma400_sensor_conf *conf, struct bma400_dev *dev)
{
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMA400_E_INVALID_CONFIG;
 8000b9c:	2117      	movs	r1, #23
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	22fc      	movs	r2, #252	@ 0xfc
 8000ba2:	701a      	strb	r2, [r3, #0]
    uint8_t int_enable = 0;
 8000ba4:	2516      	movs	r5, #22
 8000ba6:	197b      	adds	r3, r7, r5
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
    enum bma400_int_chan int_map = BMA400_UNMAP_INT_PIN;
 8000bac:	2615      	movs	r6, #21
 8000bae:	19bb      	adds	r3, r7, r6
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]

    if (BMA400_ACCEL == conf->type)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d110      	bne.n	8000bde <set_sensor_conf+0x4e>
    {
        /* Setting Accel configurations */
        rslt = set_accel_conf(&conf->param.accel, dev);
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	187c      	adds	r4, r7, r1
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f8aa 	bl	8000d20 <set_accel_conf>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_DATA_READY_INT_MAP;
 8000bd0:	197b      	adds	r3, r7, r5
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.accel.int_chan;
 8000bd6:	19bb      	adds	r3, r7, r6
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	7a12      	ldrb	r2, [r2, #8]
 8000bdc:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_TAP_INT == conf->type)
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d113      	bne.n	8000c0e <set_sensor_conf+0x7e>
    {
        /* Setting tap configurations */
        rslt = set_tap_conf(&conf->param.tap, dev);
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	3302      	adds	r3, #2
 8000bea:	2217      	movs	r2, #23
 8000bec:	18bc      	adds	r4, r7, r2
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	0011      	movs	r1, r2
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 fb96 	bl	8001324 <set_tap_conf>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_TAP_INT_MAP;
 8000bfc:	2316      	movs	r3, #22
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	2209      	movs	r2, #9
 8000c02:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.tap.int_chan;
 8000c04:	2315      	movs	r3, #21
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	79d2      	ldrb	r2, [r2, #7]
 8000c0c:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ACTIVITY_CHANGE_INT == conf->type)
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d113      	bne.n	8000c3e <set_sensor_conf+0xae>
    {
        /* Setting activity change configurations */
        rslt = set_activity_change_conf(&conf->param.act_ch, dev);
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3302      	adds	r3, #2
 8000c1a:	2217      	movs	r2, #23
 8000c1c:	18bc      	adds	r4, r7, r2
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	0011      	movs	r1, r2
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 fc04 	bl	8001430 <set_activity_change_conf>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ACT_CH_INT_MAP;
 8000c2c:	2316      	movs	r3, #22
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	2208      	movs	r2, #8
 8000c32:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.act_ch.int_chan;
 8000c34:	2315      	movs	r3, #21
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	7992      	ldrb	r2, [r2, #6]
 8000c3c:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN1_INT == conf->type)
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d113      	bne.n	8000c6e <set_sensor_conf+0xde>
    {
        /* Setting generic int 1 configurations */
        rslt = set_gen1_int(&conf->param.gen_int, dev);
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	2217      	movs	r2, #23
 8000c4c:	18bc      	adds	r4, r7, r2
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	0011      	movs	r1, r2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fc3e 	bl	80014d4 <set_gen1_int>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN1_INT_MAP;
 8000c5c:	2316      	movs	r3, #22
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	2205      	movs	r2, #5
 8000c62:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 8000c64:	2315      	movs	r3, #21
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	7c92      	ldrb	r2, [r2, #18]
 8000c6c:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN2_INT == conf->type)
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	d113      	bne.n	8000c9e <set_sensor_conf+0x10e>
    {
        /* Setting generic int 2 configurations */
        rslt = set_gen2_int(&conf->param.gen_int, dev);
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3302      	adds	r3, #2
 8000c7a:	2217      	movs	r2, #23
 8000c7c:	18bc      	adds	r4, r7, r2
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	0011      	movs	r1, r2
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 fcf6 	bl	8001674 <set_gen2_int>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN2_INT_MAP;
 8000c8c:	2316      	movs	r3, #22
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	2204      	movs	r2, #4
 8000c92:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 8000c94:	2315      	movs	r3, #21
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	7c92      	ldrb	r2, [r2, #18]
 8000c9c:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ORIENT_CHANGE_INT == conf->type)
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	d113      	bne.n	8000cce <set_sensor_conf+0x13e>
    {
        /* Setting orient int configurations */
        rslt = set_orient_int(&conf->param.orient, dev);
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	2217      	movs	r2, #23
 8000cac:	18bc      	adds	r4, r7, r2
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	0011      	movs	r1, r2
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 fdae 	bl	8001814 <set_orient_int>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ORIENT_CH_INT_MAP;
 8000cbc:	2316      	movs	r3, #22
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	2206      	movs	r2, #6
 8000cc2:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.orient.int_chan;
 8000cc4:	2315      	movs	r3, #21
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	7b92      	ldrb	r2, [r2, #14]
 8000ccc:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_STEP_COUNTER_INT == conf->type)
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d10c      	bne.n	8000cf0 <set_sensor_conf+0x160>
    {
        rslt = BMA400_OK;
 8000cd6:	2317      	movs	r3, #23
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
        int_enable = BMA400_STEP_INT_MAP;
 8000cde:	2316      	movs	r3, #22
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	220a      	movs	r2, #10
 8000ce4:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.step_cnt.int_chan;
 8000ce6:	2315      	movs	r3, #21
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	7892      	ldrb	r2, [r2, #2]
 8000cee:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BMA400_OK)
 8000cf0:	2317      	movs	r3, #23
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d109      	bne.n	8000d10 <set_sensor_conf+0x180>
    {
        /* Int pin mapping settings */
        map_int_pin(data, int_enable, int_map);
 8000cfc:	2315      	movs	r3, #21
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	2316      	movs	r3, #22
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	7819      	ldrb	r1, [r3, #0]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 fe1a 	bl	8001944 <map_int_pin>
    }

    return rslt;
 8000d10:	2317      	movs	r3, #23
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b25b      	sxtb	r3, r3
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b007      	add	sp, #28
 8000d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d20 <set_accel_conf>:

    return rslt;
}

static int8_t set_accel_conf(const struct bma400_acc_conf *accel_conf, struct bma400_dev *dev)
{
 8000d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 8000d2a:	250c      	movs	r5, #12
 8000d2c:	197b      	adds	r3, r7, r5
 8000d2e:	4a48      	ldr	r2, [pc, #288]	@ (8000e50 <set_accel_conf+0x130>)
 8000d30:	8811      	ldrh	r1, [r2, #0]
 8000d32:	8019      	strh	r1, [r3, #0]
 8000d34:	7892      	ldrb	r2, [r2, #2]
 8000d36:	709a      	strb	r2, [r3, #2]

    /* Update the accel configurations from the user structure
     * accel_conf
     */
    rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8000d38:	260f      	movs	r6, #15
 8000d3a:	19bc      	adds	r4, r7, r6
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	1979      	adds	r1, r7, r5
 8000d40:	2203      	movs	r2, #3
 8000d42:	2019      	movs	r0, #25
 8000d44:	f7ff fc44 	bl	80005d0 <bma400_get_regs>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8000d4c:	0034      	movs	r4, r6
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d173      	bne.n	8000e40 <set_accel_conf+0x120>
    {
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8000d58:	0028      	movs	r0, r5
 8000d5a:	183b      	adds	r3, r7, r0
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	227f      	movs	r2, #127	@ 0x7f
 8000d62:	4013      	ands	r3, r2
 8000d64:	b25a      	sxtb	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	795b      	ldrb	r3, [r3, #5]
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	01db      	lsls	r3, r3, #7
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	183b      	adds	r3, r7, r0
 8000d78:	701a      	strb	r2, [r3, #0]
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 8000d7a:	183b      	adds	r3, r7, r0
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	2260      	movs	r2, #96	@ 0x60
 8000d82:	4393      	bics	r3, r2
 8000d84:	b25a      	sxtb	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	791b      	ldrb	r3, [r3, #4]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	015b      	lsls	r3, r3, #5
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	2160      	movs	r1, #96	@ 0x60
 8000d92:	400b      	ands	r3, r1
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	183b      	adds	r3, r7, r0
 8000d9e:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 8000da0:	183b      	adds	r3, r7, r0
 8000da2:	785b      	ldrb	r3, [r3, #1]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	223f      	movs	r2, #63	@ 0x3f
 8000da8:	4013      	ands	r3, r2
 8000daa:	b25a      	sxtb	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	019b      	lsls	r3, r3, #6
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	183b      	adds	r3, r7, r0
 8000dbe:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 8000dc0:	183b      	adds	r3, r7, r0
 8000dc2:	785b      	ldrb	r3, [r3, #1]
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	2230      	movs	r2, #48	@ 0x30
 8000dc8:	4393      	bics	r3, r2
 8000dca:	b25a      	sxtb	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	78db      	ldrb	r3, [r3, #3]
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	2130      	movs	r1, #48	@ 0x30
 8000dd8:	400b      	ands	r3, r1
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	183b      	adds	r3, r7, r0
 8000de4:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 8000de6:	183b      	adds	r3, r7, r0
 8000de8:	785b      	ldrb	r3, [r3, #1]
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	220f      	movs	r2, #15
 8000dee:	4393      	bics	r3, r2
 8000df0:	b25a      	sxtb	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	210f      	movs	r1, #15
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	183b      	adds	r3, r7, r0
 8000e06:	705a      	strb	r2, [r3, #1]
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 8000e08:	183b      	adds	r3, r7, r0
 8000e0a:	789b      	ldrb	r3, [r3, #2]
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	220c      	movs	r2, #12
 8000e10:	4393      	bics	r3, r2
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	789b      	ldrb	r3, [r3, #2]
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	210c      	movs	r1, #12
 8000e20:	400b      	ands	r3, r1
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	183b      	adds	r3, r7, r0
 8000e2c:	709a      	strb	r2, [r3, #2]

        /* Set the accel configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8000e2e:	193c      	adds	r4, r7, r4
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	1839      	adds	r1, r7, r0
 8000e34:	2203      	movs	r2, #3
 8000e36:	2019      	movs	r0, #25
 8000e38:	f7ff fb4c 	bl	80004d4 <bma400_set_regs>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8000e40:	230f      	movs	r3, #15
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b25b      	sxtb	r3, r3
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b005      	add	sp, #20
 8000e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e50:	08005c6c 	.word	0x08005c6c

08000e54 <get_accel_data>:

    return rslt;
}

static int8_t get_accel_data(uint8_t data_sel, struct bma400_sensor_data *accel, struct bma400_dev *dev)
{
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	240f      	movs	r4, #15
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	1c02      	adds	r2, r0, #0
 8000e64:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t data_array[9] = { 0 };
 8000e66:	2510      	movs	r5, #16
 8000e68:	197b      	adds	r3, r7, r5
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	2309      	movs	r3, #9
 8000e6e:	001a      	movs	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	f004 fa75 	bl	8005360 <memset>
    uint8_t msb;
    uint8_t time_0;
    uint16_t time_1;
    uint32_t time_2;

    if (data_sel == BMA400_DATA_ONLY)
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10a      	bne.n	8000e94 <get_accel_data+0x40>
    {
        /* Read the sensor data registers only */
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 6, dev);
 8000e7e:	2327      	movs	r3, #39	@ 0x27
 8000e80:	18fc      	adds	r4, r7, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	1979      	adds	r1, r7, r5
 8000e86:	2206      	movs	r2, #6
 8000e88:	2004      	movs	r0, #4
 8000e8a:	f7ff fba1 	bl	80005d0 <bma400_get_regs>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	7023      	strb	r3, [r4, #0]
 8000e92:	e014      	b.n	8000ebe <get_accel_data+0x6a>
    }
    else if (data_sel == BMA400_DATA_SENSOR_TIME)
 8000e94:	230f      	movs	r3, #15
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d10b      	bne.n	8000eb6 <get_accel_data+0x62>
    {
        /* Read the sensor data along with sensor time */
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 9, dev);
 8000e9e:	2327      	movs	r3, #39	@ 0x27
 8000ea0:	18fc      	adds	r4, r7, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	18b9      	adds	r1, r7, r2
 8000ea8:	2209      	movs	r2, #9
 8000eaa:	2004      	movs	r0, #4
 8000eac:	f7ff fb90 	bl	80005d0 <bma400_get_regs>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	7023      	strb	r3, [r4, #0]
 8000eb4:	e003      	b.n	8000ebe <get_accel_data+0x6a>
    }
    else
    {
        /* Invalid use of "data_sel" */
        rslt = BMA400_E_INVALID_CONFIG;
 8000eb6:	2327      	movs	r3, #39	@ 0x27
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	22fc      	movs	r2, #252	@ 0xfc
 8000ebc:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BMA400_OK)
 8000ebe:	2327      	movs	r3, #39	@ 0x27
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d000      	beq.n	8000ecc <get_accel_data+0x78>
 8000eca:	e0a3      	b.n	8001014 <get_accel_data+0x1c0>
    {
        lsb = data_array[0];
 8000ecc:	2110      	movs	r1, #16
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	781a      	ldrb	r2, [r3, #0]
 8000ed2:	2024      	movs	r0, #36	@ 0x24
 8000ed4:	183b      	adds	r3, r7, r0
 8000ed6:	801a      	strh	r2, [r3, #0]
        msb = data_array[1];
 8000ed8:	2423      	movs	r4, #35	@ 0x23
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	187a      	adds	r2, r7, r1
 8000ede:	7852      	ldrb	r2, [r2, #1]
 8000ee0:	701a      	strb	r2, [r3, #0]

        /* accel X axis data */
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	183b      	adds	r3, r7, r0
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	18d3      	adds	r3, r2, r3
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	801a      	strh	r2, [r3, #0]
        if (accel->x > 2047)
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	2200      	movs	r2, #0
 8000efe:	5e9a      	ldrsh	r2, [r3, r2]
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	429a      	cmp	r2, r3
 8000f06:	db0a      	blt.n	8000f1e <get_accel_data+0xca>
        {
            /* Computing accel data negative value */
            accel->x = accel->x - 4096;
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	5e9b      	ldrsh	r3, [r3, r2]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4a44      	ldr	r2, [pc, #272]	@ (8001024 <get_accel_data+0x1d0>)
 8000f12:	4694      	mov	ip, r2
 8000f14:	4463      	add	r3, ip
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	801a      	strh	r2, [r3, #0]
        }

        lsb = data_array[2];
 8000f1e:	2110      	movs	r1, #16
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	789a      	ldrb	r2, [r3, #2]
 8000f24:	2024      	movs	r0, #36	@ 0x24
 8000f26:	183b      	adds	r3, r7, r0
 8000f28:	801a      	strh	r2, [r3, #0]
        msb = data_array[3];
 8000f2a:	2423      	movs	r4, #35	@ 0x23
 8000f2c:	193b      	adds	r3, r7, r4
 8000f2e:	187a      	adds	r2, r7, r1
 8000f30:	78d2      	ldrb	r2, [r2, #3]
 8000f32:	701a      	strb	r2, [r3, #0]

        /* accel Y axis data */
        accel->y = (int16_t)(((uint16_t)msb * 256) | lsb);
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	183b      	adds	r3, r7, r0
 8000f42:	2100      	movs	r1, #0
 8000f44:	5e5b      	ldrsh	r3, [r3, r1]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	805a      	strh	r2, [r3, #2]
        if (accel->y > 2047)
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	2202      	movs	r2, #2
 8000f52:	5e9a      	ldrsh	r2, [r3, r2]
 8000f54:	2380      	movs	r3, #128	@ 0x80
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	db0a      	blt.n	8000f72 <get_accel_data+0x11e>
        {
            /* Computing accel data negative value */
            accel->y = accel->y - 4096;
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	5e9b      	ldrsh	r3, [r3, r2]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4a2f      	ldr	r2, [pc, #188]	@ (8001024 <get_accel_data+0x1d0>)
 8000f66:	4694      	mov	ip, r2
 8000f68:	4463      	add	r3, ip
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	805a      	strh	r2, [r3, #2]
        }

        lsb = data_array[4];
 8000f72:	2110      	movs	r1, #16
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	791a      	ldrb	r2, [r3, #4]
 8000f78:	2024      	movs	r0, #36	@ 0x24
 8000f7a:	183b      	adds	r3, r7, r0
 8000f7c:	801a      	strh	r2, [r3, #0]
        msb = data_array[5];
 8000f7e:	2423      	movs	r4, #35	@ 0x23
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	187a      	adds	r2, r7, r1
 8000f84:	7952      	ldrb	r2, [r2, #5]
 8000f86:	701a      	strb	r2, [r3, #0]

        /* accel Z axis data */
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	b21a      	sxth	r2, r3
 8000f94:	183b      	adds	r3, r7, r0
 8000f96:	2100      	movs	r1, #0
 8000f98:	5e5b      	ldrsh	r3, [r3, r1]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	809a      	strh	r2, [r3, #4]
        if (accel->z > 2047)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	5e9a      	ldrsh	r2, [r3, r2]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	429a      	cmp	r2, r3
 8000fae:	db0a      	blt.n	8000fc6 <get_accel_data+0x172>
        {
            /* Computing accel data negative value */
            accel->z = accel->z - 4096;
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	5e9b      	ldrsh	r3, [r3, r2]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001024 <get_accel_data+0x1d0>)
 8000fba:	4694      	mov	ip, r2
 8000fbc:	4463      	add	r3, ip
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	809a      	strh	r2, [r3, #4]
        }

        if (data_sel == BMA400_DATA_ONLY)
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <get_accel_data+0x182>
        {
            /* Update sensortime as 0 */
            accel->sensortime = 0;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
        }

        if (data_sel == BMA400_DATA_SENSOR_TIME)
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d119      	bne.n	8001014 <get_accel_data+0x1c0>
        {
            /* Sensor-time data*/
            time_0 = data_array[6];
 8000fe0:	2022      	movs	r0, #34	@ 0x22
 8000fe2:	183b      	adds	r3, r7, r0
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	187a      	adds	r2, r7, r1
 8000fe8:	7992      	ldrb	r2, [r2, #6]
 8000fea:	701a      	strb	r2, [r3, #0]
            time_1 = ((uint16_t)data_array[7] << 8);
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	79db      	ldrb	r3, [r3, #7]
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	2420      	movs	r4, #32
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	0212      	lsls	r2, r2, #8
 8000ff8:	801a      	strh	r2, [r3, #0]
            time_2 = ((uint32_t)data_array[8] << 16);
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	7a1b      	ldrb	r3, [r3, #8]
 8000ffe:	041b      	lsls	r3, r3, #16
 8001000:	61fb      	str	r3, [r7, #28]
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 8001002:	193b      	adds	r3, r7, r4
 8001004:	881a      	ldrh	r2, [r3, #0]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	18d2      	adds	r2, r2, r3
 800100a:	183b      	adds	r3, r7, r0
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	18d2      	adds	r2, r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	609a      	str	r2, [r3, #8]
        }
    }

    return rslt;
 8001014:	2327      	movs	r3, #39	@ 0x27
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b25b      	sxtb	r3, r3
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b00a      	add	sp, #40	@ 0x28
 8001022:	bdb0      	pop	{r4, r5, r7, pc}
 8001024:	fffff000 	.word	0xfffff000

08001028 <set_autowakeup_timeout>:

static int8_t set_autowakeup_timeout(const struct bma400_auto_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2];
    uint8_t lsb;
    uint8_t msb;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &data_array[1], 1, dev);
 8001032:	260f      	movs	r6, #15
 8001034:	19bc      	adds	r4, r7, r6
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	2508      	movs	r5, #8
 800103a:	197b      	adds	r3, r7, r5
 800103c:	1c59      	adds	r1, r3, #1
 800103e:	0013      	movs	r3, r2
 8001040:	2201      	movs	r2, #1
 8001042:	202d      	movs	r0, #45	@ 0x2d
 8001044:	f7ff fac4 	bl	80005d0 <bma400_get_regs>
 8001048:	0003      	movs	r3, r0
 800104a:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800104c:	0034      	movs	r4, r6
 800104e:	193b      	adds	r3, r7, r4
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b25b      	sxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d13e      	bne.n	80010d6 <set_autowakeup_timeout+0xae>
    {
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 8001058:	0028      	movs	r0, r5
 800105a:	183b      	adds	r3, r7, r0
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	b25b      	sxtb	r3, r3
 8001060:	2204      	movs	r2, #4
 8001062:	4393      	bics	r3, r2
 8001064:	b25a      	sxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	b25b      	sxtb	r3, r3
 8001070:	2104      	movs	r1, #4
 8001072:	400b      	ands	r3, r1
 8001074:	b25b      	sxtb	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b25b      	sxtb	r3, r3
 800107a:	b2da      	uxtb	r2, r3
 800107c:	183b      	adds	r3, r7, r0
 800107e:	705a      	strb	r2, [r3, #1]

        /* LSB of timeout threshold */
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	885b      	ldrh	r3, [r3, #2]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	250e      	movs	r5, #14
 8001088:	197b      	adds	r3, r7, r5
 800108a:	210f      	movs	r1, #15
 800108c:	400a      	ands	r2, r1
 800108e:	701a      	strb	r2, [r3, #0]

        /* MSB of timeout threshold */
        msb = BMA400_GET_BITS(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_MSB);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	885b      	ldrh	r3, [r3, #2]
 8001094:	111a      	asrs	r2, r3, #4
 8001096:	210d      	movs	r1, #13
 8001098:	187b      	adds	r3, r7, r1
 800109a:	701a      	strb	r2, [r3, #0]

        /* Set the value in the data_array */
        data_array[0] = msb;
 800109c:	183b      	adds	r3, r7, r0
 800109e:	187a      	adds	r2, r7, r1
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT_THRES, lsb);
 80010a4:	183b      	adds	r3, r7, r0
 80010a6:	785b      	ldrb	r3, [r3, #1]
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	220f      	movs	r2, #15
 80010ac:	4013      	ands	r3, r2
 80010ae:	b25a      	sxtb	r2, r3
 80010b0:	197b      	adds	r3, r7, r5
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	183b      	adds	r3, r7, r0
 80010c2:	705a      	strb	r2, [r3, #1]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_0, data_array, 2, dev);
 80010c4:	193c      	adds	r4, r7, r4
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	1839      	adds	r1, r7, r0
 80010ca:	2202      	movs	r2, #2
 80010cc:	202c      	movs	r0, #44	@ 0x2c
 80010ce:	f7ff fa01 	bl	80004d4 <bma400_set_regs>
 80010d2:	0003      	movs	r3, r0
 80010d4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80010d6:	230f      	movs	r3, #15
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b25b      	sxtb	r3, r3
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b005      	add	sp, #20
 80010e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010e6 <set_auto_wakeup>:

    return rslt;
}

int8_t set_auto_wakeup(uint8_t conf, struct bma400_dev *dev)
{
 80010e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e8:	b085      	sub	sp, #20
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	0002      	movs	r2, r0
 80010ee:	6039      	str	r1, [r7, #0]
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 80010f4:	260f      	movs	r6, #15
 80010f6:	19bc      	adds	r4, r7, r6
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	250e      	movs	r5, #14
 80010fc:	1979      	adds	r1, r7, r5
 80010fe:	2201      	movs	r2, #1
 8001100:	202d      	movs	r0, #45	@ 0x2d
 8001102:	f7ff fa65 	bl	80005d0 <bma400_get_regs>
 8001106:	0003      	movs	r3, r0
 8001108:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800110a:	0034      	movs	r4, r6
 800110c:	193b      	adds	r3, r7, r4
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b25b      	sxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d11c      	bne.n	8001150 <set_auto_wakeup+0x6a>
    {
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 8001116:	0028      	movs	r0, r5
 8001118:	183b      	adds	r3, r7, r0
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b25b      	sxtb	r3, r3
 800111e:	2202      	movs	r2, #2
 8001120:	4393      	bics	r3, r2
 8001122:	b25a      	sxtb	r2, r3
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b25b      	sxtb	r3, r3
 800112a:	18db      	adds	r3, r3, r3
 800112c:	b25b      	sxtb	r3, r3
 800112e:	2102      	movs	r1, #2
 8001130:	400b      	ands	r3, r1
 8001132:	b25b      	sxtb	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b25b      	sxtb	r3, r3
 8001138:	b2da      	uxtb	r2, r3
 800113a:	183b      	adds	r3, r7, r0
 800113c:	701a      	strb	r2, [r3, #0]

        /* Enabling the Auto wakeup interrupt */
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 800113e:	193c      	adds	r4, r7, r4
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	1839      	adds	r1, r7, r0
 8001144:	2201      	movs	r2, #1
 8001146:	202d      	movs	r0, #45	@ 0x2d
 8001148:	f7ff f9c4 	bl	80004d4 <bma400_set_regs>
 800114c:	0003      	movs	r3, r0
 800114e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001150:	230f      	movs	r3, #15
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b25b      	sxtb	r3, r3
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b005      	add	sp, #20
 800115e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001160 <set_autowakeup_interrupt>:

static int8_t set_autowakeup_interrupt(const struct bma400_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[5] = { 0 };
 800116a:	2408      	movs	r4, #8
 800116c:	193b      	adds	r3, r7, r4
 800116e:	0018      	movs	r0, r3
 8001170:	2305      	movs	r3, #5
 8001172:	001a      	movs	r2, r3
 8001174:	2100      	movs	r1, #0
 8001176:	f004 f8f3 	bl	8005360 <memset>

    /* Set the wakeup reference update */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 800117a:	0020      	movs	r0, r4
 800117c:	183b      	adds	r3, r7, r0
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b25b      	sxtb	r3, r3
 8001182:	2203      	movs	r2, #3
 8001184:	4393      	bics	r3, r2
 8001186:	b25a      	sxtb	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25b      	sxtb	r3, r3
 800118e:	2103      	movs	r1, #3
 8001190:	400b      	ands	r3, r1
 8001192:	b25b      	sxtb	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b25b      	sxtb	r3, r3
 8001198:	b2da      	uxtb	r2, r3
 800119a:	183b      	adds	r3, r7, r0
 800119c:	701a      	strb	r2, [r3, #0]

    /* Set the number of samples for interrupt condition evaluation */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 800119e:	183b      	adds	r3, r7, r0
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	221c      	movs	r2, #28
 80011a6:	4393      	bics	r3, r2
 80011a8:	b25a      	sxtb	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	211c      	movs	r1, #28
 80011b6:	400b      	ands	r3, r1
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	183b      	adds	r3, r7, r0
 80011c2:	701a      	strb	r2, [r3, #0]

    /* Enable low power wake-up interrupt for X,Y,Z axes*/
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 80011c4:	183b      	adds	r3, r7, r0
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	221f      	movs	r2, #31
 80011cc:	4013      	ands	r3, r2
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	789b      	ldrb	r3, [r3, #2]
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	015b      	lsls	r3, r3, #5
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	0001      	movs	r1, r0
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	701a      	strb	r2, [r3, #0]

    /* Set interrupt threshold configuration  */
    data_array[1] = wakeup_conf->int_wkup_threshold;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	78da      	ldrb	r2, [r3, #3]
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	705a      	strb	r2, [r3, #1]

    /* Set the reference acceleration x-axis for the wake-up interrupt */
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	791a      	ldrb	r2, [r3, #4]
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	709a      	strb	r2, [r3, #2]

    /* Set the reference acceleration y-axis for the wake-up interrupt */
    data_array[3] = wakeup_conf->int_wkup_ref_y;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	795a      	ldrb	r2, [r3, #5]
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	70da      	strb	r2, [r3, #3]

    /* Set the reference acceleration z-axis for the wake-up interrupt */
    data_array[4] = wakeup_conf->int_wkup_ref_z;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	799a      	ldrb	r2, [r3, #6]
 8001202:	187b      	adds	r3, r7, r1
 8001204:	711a      	strb	r2, [r3, #4]

    /* Set the wakeup interrupt configurations in the sensor */
    rslt = bma400_set_regs(BMA400_REG_WAKEUP_INT_CONF_0, data_array, 5, dev);
 8001206:	250f      	movs	r5, #15
 8001208:	197c      	adds	r4, r7, r5
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	1879      	adds	r1, r7, r1
 800120e:	2205      	movs	r2, #5
 8001210:	202f      	movs	r0, #47	@ 0x2f
 8001212:	f7ff f95f 	bl	80004d4 <bma400_set_regs>
 8001216:	0003      	movs	r3, r0
 8001218:	7023      	strb	r3, [r4, #0]

    return rslt;
 800121a:	197b      	adds	r3, r7, r5
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b25b      	sxtb	r3, r3
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b004      	add	sp, #16
 8001226:	bdb0      	pop	{r4, r5, r7, pc}

08001228 <set_auto_low_power>:

    return rslt;
}

static int8_t set_auto_low_power(const struct bma400_auto_lp_conf *auto_lp_conf, struct bma400_dev *dev)
{
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t timeout_msb;
    uint8_t timeout_lsb;

    rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8001232:	250f      	movs	r5, #15
 8001234:	197c      	adds	r4, r7, r5
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	260d      	movs	r6, #13
 800123a:	19b9      	adds	r1, r7, r6
 800123c:	2201      	movs	r2, #1
 800123e:	202b      	movs	r0, #43	@ 0x2b
 8001240:	f7ff f9c6 	bl	80005d0 <bma400_get_regs>
 8001244:	0003      	movs	r3, r0
 8001246:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8001248:	0028      	movs	r0, r5
 800124a:	183b      	adds	r3, r7, r0
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b25b      	sxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d15f      	bne.n	8001314 <set_auto_low_power+0xec>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_AUTO_LOW_POW, auto_lp_conf->auto_low_power_trigger);
 8001254:	19bb      	adds	r3, r7, r6
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	220f      	movs	r2, #15
 800125c:	4393      	bics	r3, r2
 800125e:	b25a      	sxtb	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	210f      	movs	r1, #15
 8001268:	400b      	ands	r3, r1
 800126a:	b25b      	sxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b25b      	sxtb	r3, r3
 8001270:	b2da      	uxtb	r2, r3
 8001272:	19bb      	adds	r3, r7, r6
 8001274:	701a      	strb	r2, [r3, #0]

        /* If auto Low power timeout threshold is enabled */
        if (auto_lp_conf->auto_low_power_trigger & 0x0C)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	001a      	movs	r2, r3
 800127c:	230c      	movs	r3, #12
 800127e:	4013      	ands	r3, r2
 8001280:	d038      	beq.n	80012f4 <set_auto_low_power+0xcc>
        {
            rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8001282:	0005      	movs	r5, r0
 8001284:	183c      	adds	r4, r7, r0
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	220c      	movs	r2, #12
 800128a:	18b9      	adds	r1, r7, r2
 800128c:	2201      	movs	r2, #1
 800128e:	202a      	movs	r0, #42	@ 0x2a
 8001290:	f7ff f99e 	bl	80005d0 <bma400_get_regs>
 8001294:	0003      	movs	r3, r0
 8001296:	7023      	strb	r3, [r4, #0]
            if (rslt == BMA400_OK)
 8001298:	0028      	movs	r0, r5
 800129a:	183b      	adds	r3, r7, r0
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d127      	bne.n	80012f4 <set_auto_low_power+0xcc>
            {
                /* Compute the timeout threshold MSB value */
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	885b      	ldrh	r3, [r3, #2]
 80012a8:	111b      	asrs	r3, r3, #4
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	250c      	movs	r5, #12
 80012ae:	197b      	adds	r3, r7, r5
 80012b0:	701a      	strb	r2, [r3, #0]

                /* Compute the timeout threshold LSB value */
                timeout_lsb = BMA400_GET_BITS_POS_0(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES_LSB);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	885b      	ldrh	r3, [r3, #2]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	240e      	movs	r4, #14
 80012ba:	193b      	adds	r3, r7, r4
 80012bc:	210f      	movs	r1, #15
 80012be:	400a      	ands	r2, r1
 80012c0:	701a      	strb	r2, [r3, #0]
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 80012c2:	19bb      	adds	r3, r7, r6
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	220f      	movs	r2, #15
 80012ca:	4013      	ands	r3, r2
 80012cc:	b25a      	sxtb	r2, r3
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	19bb      	adds	r3, r7, r6
 80012e0:	701a      	strb	r2, [r3, #0]

                /* Set the timeout threshold MSB value */
                rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 80012e2:	183c      	adds	r4, r7, r0
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	1979      	adds	r1, r7, r5
 80012e8:	2201      	movs	r2, #1
 80012ea:	202a      	movs	r0, #42	@ 0x2a
 80012ec:	f7ff f8f2 	bl	80004d4 <bma400_set_regs>
 80012f0:	0003      	movs	r3, r0
 80012f2:	7023      	strb	r3, [r4, #0]
            }
        }

        if (rslt == BMA400_OK)
 80012f4:	220f      	movs	r2, #15
 80012f6:	18bb      	adds	r3, r7, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d109      	bne.n	8001314 <set_auto_low_power+0xec>
        {
            /* Set the Auto low power configurations */
            rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8001300:	18bc      	adds	r4, r7, r2
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	220d      	movs	r2, #13
 8001306:	18b9      	adds	r1, r7, r2
 8001308:	2201      	movs	r2, #1
 800130a:	202b      	movs	r0, #43	@ 0x2b
 800130c:	f7ff f8e2 	bl	80004d4 <bma400_set_regs>
 8001310:	0003      	movs	r3, r0
 8001312:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8001314:	230f      	movs	r3, #15
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b25b      	sxtb	r3, r3
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b005      	add	sp, #20
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001324 <set_tap_conf>:

    return rslt;
}

static int8_t set_tap_conf(const struct bma400_tap_conf *tap_set, struct bma400_dev *dev)
{
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[2] = { 0, 0 };
 800132e:	250c      	movs	r5, #12
 8001330:	197b      	adds	r3, r7, r5
 8001332:	2200      	movs	r2, #0
 8001334:	801a      	strh	r2, [r3, #0]

    rslt = bma400_get_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8001336:	260f      	movs	r6, #15
 8001338:	19bc      	adds	r4, r7, r6
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	1979      	adds	r1, r7, r5
 800133e:	2202      	movs	r2, #2
 8001340:	2057      	movs	r0, #87	@ 0x57
 8001342:	f7ff f945 	bl	80005d0 <bma400_get_regs>
 8001346:	0003      	movs	r3, r0
 8001348:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800134a:	0034      	movs	r4, r6
 800134c:	193b      	adds	r3, r7, r4
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b25b      	sxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d164      	bne.n	8001420 <set_tap_conf+0xfc>
    {
        /* Set the axis to sense for tap */
        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_TAP_AXES_EN, tap_set->axes_sel);
 8001356:	0028      	movs	r0, r5
 8001358:	183b      	adds	r3, r7, r0
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	2218      	movs	r2, #24
 8001360:	4393      	bics	r3, r2
 8001362:	b25a      	sxtb	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	b25b      	sxtb	r3, r3
 800136e:	2118      	movs	r1, #24
 8001370:	400b      	ands	r3, r1
 8001372:	b25b      	sxtb	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b25b      	sxtb	r3, r3
 8001378:	b2da      	uxtb	r2, r3
 800137a:	183b      	adds	r3, r7, r0
 800137c:	701a      	strb	r2, [r3, #0]

        /* Set the threshold for tap sensing */
        reg_data[0] = BMA400_SET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY, tap_set->sensitivity);
 800137e:	183b      	adds	r3, r7, r0
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25b      	sxtb	r3, r3
 8001384:	2207      	movs	r2, #7
 8001386:	4393      	bics	r3, r2
 8001388:	b25a      	sxtb	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	2107      	movs	r1, #7
 8001392:	400b      	ands	r3, r1
 8001394:	b25b      	sxtb	r3, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	b25b      	sxtb	r3, r3
 800139a:	b2da      	uxtb	r2, r3
 800139c:	183b      	adds	r3, r7, r0
 800139e:	701a      	strb	r2, [r3, #0]

        /* Set the Quiet_dt setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET_DT, tap_set->quiet_dt);
 80013a0:	183b      	adds	r3, r7, r0
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	2230      	movs	r2, #48	@ 0x30
 80013a8:	4393      	bics	r3, r2
 80013aa:	b25a      	sxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	791b      	ldrb	r3, [r3, #4]
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	2130      	movs	r1, #48	@ 0x30
 80013b8:	400b      	ands	r3, r1
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	183b      	adds	r3, r7, r0
 80013c4:	705a      	strb	r2, [r3, #1]

        /* Set the Quiet setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET, tap_set->quiet);
 80013c6:	183b      	adds	r3, r7, r0
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	220c      	movs	r2, #12
 80013ce:	4393      	bics	r3, r2
 80013d0:	b25a      	sxtb	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	78db      	ldrb	r3, [r3, #3]
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	210c      	movs	r1, #12
 80013de:	400b      	ands	r3, r1
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	183b      	adds	r3, r7, r0
 80013ea:	705a      	strb	r2, [r3, #1]

        /* Set the tics_th setting */
        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH, tap_set->tics_th);
 80013ec:	183b      	adds	r3, r7, r0
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	2203      	movs	r2, #3
 80013f4:	4393      	bics	r3, r2
 80013f6:	b25a      	sxtb	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	789b      	ldrb	r3, [r3, #2]
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	2103      	movs	r1, #3
 8001400:	400b      	ands	r3, r1
 8001402:	b25b      	sxtb	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b25b      	sxtb	r3, r3
 8001408:	b2da      	uxtb	r2, r3
 800140a:	183b      	adds	r3, r7, r0
 800140c:	705a      	strb	r2, [r3, #1]

        /* Set the TAP configuration in the sensor*/
        rslt = bma400_set_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 800140e:	193c      	adds	r4, r7, r4
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	1839      	adds	r1, r7, r0
 8001414:	2202      	movs	r2, #2
 8001416:	2057      	movs	r0, #87	@ 0x57
 8001418:	f7ff f85c 	bl	80004d4 <bma400_set_regs>
 800141c:	0003      	movs	r3, r0
 800141e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001420:	230f      	movs	r3, #15
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b25b      	sxtb	r3, r3
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b005      	add	sp, #20
 800142e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001430 <set_activity_change_conf>:

    return rslt;
}

static int8_t set_activity_change_conf(const struct bma400_act_ch_conf *act_ch_set, struct bma400_dev *dev)
{
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2] = { 0 };
 800143a:	200c      	movs	r0, #12
 800143c:	183b      	adds	r3, r7, r0
 800143e:	2200      	movs	r2, #0
 8001440:	801a      	strh	r2, [r3, #0]

    /* Set the activity change threshold */
    data_array[0] = act_ch_set->act_ch_thres;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	183b      	adds	r3, r7, r0
 8001448:	701a      	strb	r2, [r3, #0]

    /* Set the axis to sense for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN, act_ch_set->axes_sel);
 800144a:	183b      	adds	r3, r7, r0
 800144c:	785b      	ldrb	r3, [r3, #1]
 800144e:	b25b      	sxtb	r3, r3
 8001450:	221f      	movs	r2, #31
 8001452:	4013      	ands	r3, r2
 8001454:	b25a      	sxtb	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	b25b      	sxtb	r3, r3
 800145c:	015b      	lsls	r3, r3, #5
 800145e:	b25b      	sxtb	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b25b      	sxtb	r3, r3
 8001464:	b2da      	uxtb	r2, r3
 8001466:	183b      	adds	r3, r7, r0
 8001468:	705a      	strb	r2, [r3, #1]

    /* Set the data source for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC, act_ch_set->data_source);
 800146a:	183b      	adds	r3, r7, r0
 800146c:	785b      	ldrb	r3, [r3, #1]
 800146e:	b25b      	sxtb	r3, r3
 8001470:	2210      	movs	r2, #16
 8001472:	4393      	bics	r3, r2
 8001474:	b25a      	sxtb	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	789b      	ldrb	r3, [r3, #2]
 800147a:	b25b      	sxtb	r3, r3
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	b25b      	sxtb	r3, r3
 8001480:	2110      	movs	r1, #16
 8001482:	400b      	ands	r3, r1
 8001484:	b25b      	sxtb	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b25b      	sxtb	r3, r3
 800148a:	b2da      	uxtb	r2, r3
 800148c:	183b      	adds	r3, r7, r0
 800148e:	705a      	strb	r2, [r3, #1]

    /* Set the Number of sample points(NPTS)
     * for sensing activity change
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 8001490:	183b      	adds	r3, r7, r0
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	b25b      	sxtb	r3, r3
 8001496:	220f      	movs	r2, #15
 8001498:	4393      	bics	r3, r2
 800149a:	b25a      	sxtb	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	78db      	ldrb	r3, [r3, #3]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	210f      	movs	r1, #15
 80014a4:	400b      	ands	r3, r1
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	183b      	adds	r3, r7, r0
 80014b0:	705a      	strb	r2, [r3, #1]

    /* Set the Activity change configuration in the sensor*/
    rslt = bma400_set_regs(BMA400_REG_ACT_CH_CONFIG_0, data_array, 2, dev);
 80014b2:	250f      	movs	r5, #15
 80014b4:	197c      	adds	r4, r7, r5
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	1839      	adds	r1, r7, r0
 80014ba:	2202      	movs	r2, #2
 80014bc:	2055      	movs	r0, #85	@ 0x55
 80014be:	f7ff f809 	bl	80004d4 <bma400_set_regs>
 80014c2:	0003      	movs	r3, r0
 80014c4:	7023      	strb	r3, [r4, #0]

    return rslt;
 80014c6:	197b      	adds	r3, r7, r5
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b25b      	sxtb	r3, r3
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b004      	add	sp, #16
 80014d2:	bdb0      	pop	{r4, r5, r7, pc}

080014d4 <set_gen1_int>:

    return rslt;
}

static int8_t set_gen1_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 80014de:	240c      	movs	r4, #12
 80014e0:	193b      	adds	r3, r7, r4
 80014e2:	0018      	movs	r0, r3
 80014e4:	230b      	movs	r3, #11
 80014e6:	001a      	movs	r2, r3
 80014e8:	2100      	movs	r1, #0
 80014ea:	f003 ff39 	bl	8005360 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 80014ee:	0020      	movs	r0, r4
 80014f0:	183b      	adds	r3, r7, r0
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	221f      	movs	r2, #31
 80014f8:	4013      	ands	r3, r2
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	791b      	ldrb	r3, [r3, #4]
 8001500:	b25b      	sxtb	r3, r3
 8001502:	015b      	lsls	r3, r3, #5
 8001504:	b25b      	sxtb	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b25b      	sxtb	r3, r3
 800150a:	b2da      	uxtb	r2, r3
 800150c:	183b      	adds	r3, r7, r0
 800150e:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8001510:	183b      	adds	r3, r7, r0
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b25b      	sxtb	r3, r3
 8001516:	2210      	movs	r2, #16
 8001518:	4393      	bics	r3, r2
 800151a:	b25a      	sxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	795b      	ldrb	r3, [r3, #5]
 8001520:	b25b      	sxtb	r3, r3
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	b25b      	sxtb	r3, r3
 8001526:	2110      	movs	r1, #16
 8001528:	400b      	ands	r3, r1
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b25b      	sxtb	r3, r3
 8001530:	b2da      	uxtb	r2, r3
 8001532:	183b      	adds	r3, r7, r0
 8001534:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8001536:	183b      	adds	r3, r7, r0
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b25b      	sxtb	r3, r3
 800153c:	220c      	movs	r2, #12
 800153e:	4393      	bics	r3, r2
 8001540:	b25a      	sxtb	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7a1b      	ldrb	r3, [r3, #8]
 8001546:	b25b      	sxtb	r3, r3
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	b25b      	sxtb	r3, r3
 800154c:	210c      	movs	r1, #12
 800154e:	400b      	ands	r3, r1
 8001550:	b25b      	sxtb	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b25b      	sxtb	r3, r3
 8001556:	b2da      	uxtb	r2, r3
 8001558:	183b      	adds	r3, r7, r0
 800155a:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 800155c:	183b      	adds	r3, r7, r0
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	2203      	movs	r2, #3
 8001564:	4393      	bics	r3, r2
 8001566:	b25a      	sxtb	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7a5b      	ldrb	r3, [r3, #9]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	2103      	movs	r1, #3
 8001570:	400b      	ands	r3, r1
 8001572:	b25b      	sxtb	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b25b      	sxtb	r3, r3
 8001578:	b2da      	uxtb	r2, r3
 800157a:	183b      	adds	r3, r7, r0
 800157c:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800157e:	183b      	adds	r3, r7, r0
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	b25b      	sxtb	r3, r3
 8001584:	2202      	movs	r2, #2
 8001586:	4393      	bics	r3, r2
 8001588:	b25a      	sxtb	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	799b      	ldrb	r3, [r3, #6]
 800158e:	b25b      	sxtb	r3, r3
 8001590:	18db      	adds	r3, r3, r3
 8001592:	b25b      	sxtb	r3, r3
 8001594:	2102      	movs	r1, #2
 8001596:	400b      	ands	r3, r1
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b25b      	sxtb	r3, r3
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	183b      	adds	r3, r7, r0
 80015a2:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 80015a4:	183b      	adds	r3, r7, r0
 80015a6:	785b      	ldrb	r3, [r3, #1]
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	2201      	movs	r2, #1
 80015ac:	4393      	bics	r3, r2
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	79db      	ldrb	r3, [r3, #7]
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	2101      	movs	r1, #1
 80015b8:	400b      	ands	r3, r1
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	0001      	movs	r1, r0
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	885b      	ldrh	r3, [r3, #2]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	885b      	ldrh	r3, [r3, #2]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7a1b      	ldrb	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d12e      	bne.n	800164e <set_gen1_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	895b      	ldrh	r3, [r3, #10]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	895b      	ldrh	r3, [r3, #10]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	b29b      	uxth	r3, r3
 8001602:	b2da      	uxtb	r2, r3
 8001604:	187b      	adds	r3, r7, r1
 8001606:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	899b      	ldrh	r3, [r3, #12]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	187b      	adds	r3, r7, r1
 8001610:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	899b      	ldrh	r3, [r3, #12]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	b29b      	uxth	r3, r3
 800161a:	b2da      	uxtb	r2, r3
 800161c:	187b      	adds	r3, r7, r1
 800161e:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	89db      	ldrh	r3, [r3, #14]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	187b      	adds	r3, r7, r1
 8001628:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	89db      	ldrh	r3, [r3, #14]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	b29b      	uxth	r3, r3
 8001632:	b2da      	uxtb	r2, r3
 8001634:	187b      	adds	r3, r7, r1
 8001636:	729a      	strb	r2, [r3, #10]

        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 11, dev);
 8001638:	2317      	movs	r3, #23
 800163a:	18fc      	adds	r4, r7, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	1879      	adds	r1, r7, r1
 8001640:	220b      	movs	r2, #11
 8001642:	203f      	movs	r0, #63	@ 0x3f
 8001644:	f7fe ff46 	bl	80004d4 <bma400_set_regs>
 8001648:	0003      	movs	r3, r0
 800164a:	7023      	strb	r3, [r4, #0]
 800164c:	e00a      	b.n	8001664 <set_gen1_int+0x190>
    }
    else
    {
        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 5, dev);
 800164e:	2317      	movs	r3, #23
 8001650:	18fc      	adds	r4, r7, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	220c      	movs	r2, #12
 8001656:	18b9      	adds	r1, r7, r2
 8001658:	2205      	movs	r2, #5
 800165a:	203f      	movs	r0, #63	@ 0x3f
 800165c:	f7fe ff3a 	bl	80004d4 <bma400_set_regs>
 8001660:	0003      	movs	r3, r0
 8001662:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001664:	2317      	movs	r3, #23
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b25b      	sxtb	r3, r3
}
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	b007      	add	sp, #28
 8001672:	bd90      	pop	{r4, r7, pc}

08001674 <set_gen2_int>:

    return rslt;
}

static int8_t set_gen2_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 800167e:	240c      	movs	r4, #12
 8001680:	193b      	adds	r3, r7, r4
 8001682:	0018      	movs	r0, r3
 8001684:	230b      	movs	r3, #11
 8001686:	001a      	movs	r2, r3
 8001688:	2100      	movs	r1, #0
 800168a:	f003 fe69 	bl	8005360 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 800168e:	0020      	movs	r0, r4
 8001690:	183b      	adds	r3, r7, r0
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b25b      	sxtb	r3, r3
 8001696:	221f      	movs	r2, #31
 8001698:	4013      	ands	r3, r2
 800169a:	b25a      	sxtb	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	791b      	ldrb	r3, [r3, #4]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	015b      	lsls	r3, r3, #5
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	183b      	adds	r3, r7, r0
 80016ae:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 80016b0:	183b      	adds	r3, r7, r0
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	2210      	movs	r2, #16
 80016b8:	4393      	bics	r3, r2
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	795b      	ldrb	r3, [r3, #5]
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	2110      	movs	r1, #16
 80016c8:	400b      	ands	r3, r1
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	183b      	adds	r3, r7, r0
 80016d4:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 80016d6:	183b      	adds	r3, r7, r0
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	220c      	movs	r2, #12
 80016de:	4393      	bics	r3, r2
 80016e0:	b25a      	sxtb	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7a1b      	ldrb	r3, [r3, #8]
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	210c      	movs	r1, #12
 80016ee:	400b      	ands	r3, r1
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	183b      	adds	r3, r7, r0
 80016fa:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80016fc:	183b      	adds	r3, r7, r0
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b25b      	sxtb	r3, r3
 8001702:	2203      	movs	r2, #3
 8001704:	4393      	bics	r3, r2
 8001706:	b25a      	sxtb	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7a5b      	ldrb	r3, [r3, #9]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	2103      	movs	r1, #3
 8001710:	400b      	ands	r3, r1
 8001712:	b25b      	sxtb	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b25b      	sxtb	r3, r3
 8001718:	b2da      	uxtb	r2, r3
 800171a:	183b      	adds	r3, r7, r0
 800171c:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800171e:	183b      	adds	r3, r7, r0
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	b25b      	sxtb	r3, r3
 8001724:	2202      	movs	r2, #2
 8001726:	4393      	bics	r3, r2
 8001728:	b25a      	sxtb	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	799b      	ldrb	r3, [r3, #6]
 800172e:	b25b      	sxtb	r3, r3
 8001730:	18db      	adds	r3, r3, r3
 8001732:	b25b      	sxtb	r3, r3
 8001734:	2102      	movs	r1, #2
 8001736:	400b      	ands	r3, r1
 8001738:	b25b      	sxtb	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	b25b      	sxtb	r3, r3
 800173e:	b2da      	uxtb	r2, r3
 8001740:	183b      	adds	r3, r7, r0
 8001742:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8001744:	183b      	adds	r3, r7, r0
 8001746:	785b      	ldrb	r3, [r3, #1]
 8001748:	b25b      	sxtb	r3, r3
 800174a:	2201      	movs	r2, #1
 800174c:	4393      	bics	r3, r2
 800174e:	b25a      	sxtb	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	79db      	ldrb	r3, [r3, #7]
 8001754:	b25b      	sxtb	r3, r3
 8001756:	2101      	movs	r1, #1
 8001758:	400b      	ands	r3, r1
 800175a:	b25b      	sxtb	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b25b      	sxtb	r3, r3
 8001760:	b2da      	uxtb	r2, r3
 8001762:	0001      	movs	r1, r0
 8001764:	187b      	adds	r3, r7, r1
 8001766:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	187b      	adds	r3, r7, r1
 800176e:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	885b      	ldrh	r3, [r3, #2]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	b29b      	uxth	r3, r3
 8001778:	b2da      	uxtb	r2, r3
 800177a:	187b      	adds	r3, r7, r1
 800177c:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	885b      	ldrh	r3, [r3, #2]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	187b      	adds	r3, r7, r1
 8001786:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7a1b      	ldrb	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d12e      	bne.n	80017ee <set_gen2_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	895b      	ldrh	r3, [r3, #10]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	187b      	adds	r3, r7, r1
 8001798:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	895b      	ldrh	r3, [r3, #10]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	899b      	ldrh	r3, [r3, #12]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	899b      	ldrh	r3, [r3, #12]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	89db      	ldrh	r3, [r3, #14]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	89db      	ldrh	r3, [r3, #14]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	729a      	strb	r2, [r3, #10]

        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 11, dev);
 80017d8:	2317      	movs	r3, #23
 80017da:	18fc      	adds	r4, r7, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	1879      	adds	r1, r7, r1
 80017e0:	220b      	movs	r2, #11
 80017e2:	204a      	movs	r0, #74	@ 0x4a
 80017e4:	f7fe fe76 	bl	80004d4 <bma400_set_regs>
 80017e8:	0003      	movs	r3, r0
 80017ea:	7023      	strb	r3, [r4, #0]
 80017ec:	e00a      	b.n	8001804 <set_gen2_int+0x190>
    }
    else
    {
        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 5, dev);
 80017ee:	2317      	movs	r3, #23
 80017f0:	18fc      	adds	r4, r7, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	220c      	movs	r2, #12
 80017f6:	18b9      	adds	r1, r7, r2
 80017f8:	2205      	movs	r2, #5
 80017fa:	204a      	movs	r0, #74	@ 0x4a
 80017fc:	f7fe fe6a 	bl	80004d4 <bma400_set_regs>
 8001800:	0003      	movs	r3, r0
 8001802:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001804:	2317      	movs	r3, #23
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b25b      	sxtb	r3, r3
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b007      	add	sp, #28
 8001812:	bd90      	pop	{r4, r7, pc}

08001814 <set_orient_int>:

    return rslt;
}

static int8_t set_orient_int(const struct bma400_orient_int_conf *orient_conf, struct bma400_dev *dev)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[10] = { 0 };
 800181e:	240c      	movs	r4, #12
 8001820:	193b      	adds	r3, r7, r4
 8001822:	0018      	movs	r0, r3
 8001824:	230a      	movs	r3, #10
 8001826:	001a      	movs	r2, r3
 8001828:	2100      	movs	r1, #0
 800182a:	f003 fd99 	bl	8005360 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 800182e:	0020      	movs	r0, r4
 8001830:	183b      	adds	r3, r7, r0
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b25b      	sxtb	r3, r3
 8001836:	221f      	movs	r2, #31
 8001838:	4013      	ands	r3, r2
 800183a:	b25a      	sxtb	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b25b      	sxtb	r3, r3
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	b25b      	sxtb	r3, r3
 8001846:	4313      	orrs	r3, r2
 8001848:	b25b      	sxtb	r3, r3
 800184a:	b2da      	uxtb	r2, r3
 800184c:	183b      	adds	r3, r7, r0
 800184e:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 8001850:	183b      	adds	r3, r7, r0
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	2210      	movs	r2, #16
 8001858:	4393      	bics	r3, r2
 800185a:	b25a      	sxtb	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	b25b      	sxtb	r3, r3
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	b25b      	sxtb	r3, r3
 8001866:	2110      	movs	r1, #16
 8001868:	400b      	ands	r3, r1
 800186a:	b25b      	sxtb	r3, r3
 800186c:	4313      	orrs	r3, r2
 800186e:	b25b      	sxtb	r3, r3
 8001870:	b2da      	uxtb	r2, r3
 8001872:	183b      	adds	r3, r7, r0
 8001874:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 8001876:	183b      	adds	r3, r7, r0
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b25b      	sxtb	r3, r3
 800187c:	220c      	movs	r2, #12
 800187e:	4393      	bics	r3, r2
 8001880:	b25a      	sxtb	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	789b      	ldrb	r3, [r3, #2]
 8001886:	b25b      	sxtb	r3, r3
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	b25b      	sxtb	r3, r3
 800188c:	210c      	movs	r1, #12
 800188e:	400b      	ands	r3, r1
 8001890:	b25b      	sxtb	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b25b      	sxtb	r3, r3
 8001896:	b2da      	uxtb	r2, r3
 8001898:	0001      	movs	r1, r0
 800189a:	187b      	adds	r3, r7, r1
 800189c:	701a      	strb	r2, [r3, #0]

    /* Set the threshold for interrupt calculation */
    data_array[1] = orient_conf->orient_thres;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	78da      	ldrb	r2, [r3, #3]
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	705a      	strb	r2, [r3, #1]

    /* Set the stability threshold */
    data_array[2] = orient_conf->stability_thres;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	791a      	ldrb	r2, [r3, #4]
 80018aa:	187b      	adds	r3, r7, r1
 80018ac:	709a      	strb	r2, [r3, #2]

    /* Set the interrupt duration */
    data_array[3] = orient_conf->orient_int_dur;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	795a      	ldrb	r2, [r3, #5]
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	70da      	strb	r2, [r3, #3]

    /* Handling case of manual reference update */
    if (orient_conf->ref_update == BMA400_UPDATE_MANUAL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	789b      	ldrb	r3, [r3, #2]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d12e      	bne.n	800191c <set_orient_int+0x108>
    {
        /* Set the LSB of reference x threshold */
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	88db      	ldrh	r3, [r3, #6]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	711a      	strb	r2, [r3, #4]

        /* Set the MSB of reference x threshold */
        data_array[5] = BMA400_GET_MSB(orient_conf->orient_ref_x);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	88db      	ldrh	r3, [r3, #6]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	891b      	ldrh	r3, [r3, #8]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_MSB(orient_conf->orient_ref_y);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	891b      	ldrh	r3, [r3, #8]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	895b      	ldrh	r3, [r3, #10]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_MSB(orient_conf->orient_ref_z);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	895b      	ldrh	r3, [r3, #10]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	b29b      	uxth	r3, r3
 8001900:	b2da      	uxtb	r2, r3
 8001902:	187b      	adds	r3, r7, r1
 8001904:	725a      	strb	r2, [r3, #9]

        /* Set the orient configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 10, dev);
 8001906:	2317      	movs	r3, #23
 8001908:	18fc      	adds	r4, r7, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	1879      	adds	r1, r7, r1
 800190e:	220a      	movs	r2, #10
 8001910:	2035      	movs	r0, #53	@ 0x35
 8001912:	f7fe fddf 	bl	80004d4 <bma400_set_regs>
 8001916:	0003      	movs	r3, r0
 8001918:	7023      	strb	r3, [r4, #0]
 800191a:	e00a      	b.n	8001932 <set_orient_int+0x11e>
    else
    {
        /* Set the orient configurations in the sensor excluding
         * reference values of x,y,z
         */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 4, dev);
 800191c:	2317      	movs	r3, #23
 800191e:	18fc      	adds	r4, r7, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	220c      	movs	r2, #12
 8001924:	18b9      	adds	r1, r7, r2
 8001926:	2204      	movs	r2, #4
 8001928:	2035      	movs	r0, #53	@ 0x35
 800192a:	f7fe fdd3 	bl	80004d4 <bma400_set_regs>
 800192e:	0003      	movs	r3, r0
 8001930:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001932:	2317      	movs	r3, #23
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b25b      	sxtb	r3, r3
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b007      	add	sp, #28
 8001940:	bd90      	pop	{r4, r7, pc}
	...

08001944 <map_int_pin>:

    return rslt;
}

static void map_int_pin(uint8_t *data_array, uint8_t int_enable, enum bma400_int_chan int_map)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	0008      	movs	r0, r1
 800194e:	0011      	movs	r1, r2
 8001950:	1cfb      	adds	r3, r7, #3
 8001952:	1c02      	adds	r2, r0, #0
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	1cbb      	adds	r3, r7, #2
 8001958:	1c0a      	adds	r2, r1, #0
 800195a:	701a      	strb	r2, [r3, #0]
    switch (int_enable)
 800195c:	1cfb      	adds	r3, r7, #3
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b0b      	cmp	r3, #11
 8001962:	d900      	bls.n	8001966 <map_int_pin+0x22>
 8001964:	e2f3      	b.n	8001f4e <map_int_pin+0x60a>
 8001966:	009a      	lsls	r2, r3, #2
 8001968:	4bc9      	ldr	r3, [pc, #804]	@ (8001c90 <map_int_pin+0x34c>)
 800196a:	18d3      	adds	r3, r2, r3
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	469f      	mov	pc, r3
    {
        case BMA400_DATA_READY_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001970:	1cbb      	adds	r3, r7, #2
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d107      	bne.n	8001988 <map_int_pin+0x44>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2280      	movs	r2, #128	@ 0x80
 800197e:	4252      	negs	r2, r2
 8001980:	4313      	orrs	r3, r2
 8001982:	b2da      	uxtb	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001988:	1cbb      	adds	r3, r7, #2
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d109      	bne.n	80019a4 <map_int_pin+0x60>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3301      	adds	r3, #1
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3301      	adds	r3, #1
 800199a:	2180      	movs	r1, #128	@ 0x80
 800199c:	4249      	negs	r1, r1
 800199e:	430a      	orrs	r2, r1
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80019a4:	1cbb      	adds	r3, r7, #2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10f      	bne.n	80019cc <map_int_pin+0x88>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_DRDY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	227f      	movs	r2, #127	@ 0x7f
 80019b2:	4013      	ands	r3, r2
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_DRDY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3301      	adds	r3, #1
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3301      	adds	r3, #1
 80019c4:	217f      	movs	r1, #127	@ 0x7f
 80019c6:	400a      	ands	r2, r1
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80019cc:	1cbb      	adds	r3, r7, #2
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d000      	beq.n	80019d6 <map_int_pin+0x92>
 80019d4:	e2bd      	b.n	8001f52 <map_int_pin+0x60e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2280      	movs	r2, #128	@ 0x80
 80019dc:	4252      	negs	r2, r2
 80019de:	4313      	orrs	r3, r2
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3301      	adds	r3, #1
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3301      	adds	r3, #1
 80019f0:	2180      	movs	r1, #128	@ 0x80
 80019f2:	4249      	negs	r1, r1
 80019f4:	430a      	orrs	r2, r1
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
            }

            break;
 80019fa:	e2aa      	b.n	8001f52 <map_int_pin+0x60e>
        case BMA400_FIFO_WM_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80019fc:	1cbb      	adds	r3, r7, #2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <map_int_pin+0xce>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2240      	movs	r2, #64	@ 0x40
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001a12:	1cbb      	adds	r3, r7, #2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d108      	bne.n	8001a2c <map_int_pin+0xe8>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3301      	adds	r3, #1
 8001a24:	2140      	movs	r1, #64	@ 0x40
 8001a26:	430a      	orrs	r2, r1
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001a2c:	1cbb      	adds	r3, r7, #2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10f      	bne.n	8001a54 <map_int_pin+0x110>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_WM);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2240      	movs	r2, #64	@ 0x40
 8001a3a:	4393      	bics	r3, r2
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_WM);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3301      	adds	r3, #1
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	2140      	movs	r1, #64	@ 0x40
 8001a4e:	438a      	bics	r2, r1
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001a54:	1cbb      	adds	r3, r7, #2
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d000      	beq.n	8001a5e <map_int_pin+0x11a>
 8001a5c:	e27b      	b.n	8001f56 <map_int_pin+0x612>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2240      	movs	r2, #64	@ 0x40
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3301      	adds	r3, #1
 8001a76:	2140      	movs	r1, #64	@ 0x40
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001a7e:	e26a      	b.n	8001f56 <map_int_pin+0x612>
        case BMA400_FIFO_FULL_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001a80:	1cbb      	adds	r3, r7, #2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <map_int_pin+0x152>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001a96:	1cbb      	adds	r3, r7, #2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d108      	bne.n	8001ab0 <map_int_pin+0x16c>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2120      	movs	r1, #32
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001ab0:	1cbb      	adds	r3, r7, #2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10f      	bne.n	8001ad8 <map_int_pin+0x194>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2220      	movs	r2, #32
 8001abe:	4393      	bics	r3, r2
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_FULL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	438a      	bics	r2, r1
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001ad8:	1cbb      	adds	r3, r7, #2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d000      	beq.n	8001ae2 <map_int_pin+0x19e>
 8001ae0:	e23b      	b.n	8001f5a <map_int_pin+0x616>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3301      	adds	r3, #1
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3301      	adds	r3, #1
 8001afa:	2120      	movs	r1, #32
 8001afc:	430a      	orrs	r2, r1
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001b02:	e22a      	b.n	8001f5a <map_int_pin+0x616>
        case BMA400_INT_OVERRUN_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001b04:	1cbb      	adds	r3, r7, #2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <map_int_pin+0x1d6>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2210      	movs	r2, #16
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001b1a:	1cbb      	adds	r3, r7, #2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d108      	bne.n	8001b34 <map_int_pin+0x1f0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3301      	adds	r3, #1
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	2110      	movs	r1, #16
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001b34:	1cbb      	adds	r3, r7, #2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10f      	bne.n	8001b5c <map_int_pin+0x218>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_INT_OVERRUN);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2210      	movs	r2, #16
 8001b42:	4393      	bics	r3, r2
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_INT_OVERRUN);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3301      	adds	r3, #1
 8001b54:	2110      	movs	r1, #16
 8001b56:	438a      	bics	r2, r1
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001b5c:	1cbb      	adds	r3, r7, #2
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d000      	beq.n	8001b66 <map_int_pin+0x222>
 8001b64:	e1fb      	b.n	8001f5e <map_int_pin+0x61a>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3301      	adds	r3, #1
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	2110      	movs	r1, #16
 8001b80:	430a      	orrs	r2, r1
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001b86:	e1ea      	b.n	8001f5e <map_int_pin+0x61a>
        case BMA400_GEN2_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001b88:	1cbb      	adds	r3, r7, #2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <map_int_pin+0x25a>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2208      	movs	r2, #8
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001b9e:	1cbb      	adds	r3, r7, #2
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d108      	bne.n	8001bb8 <map_int_pin+0x274>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	781a      	ldrb	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001bb8:	1cbb      	adds	r3, r7, #2
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10f      	bne.n	8001be0 <map_int_pin+0x29c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN2);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	4393      	bics	r3, r2
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN2);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	2108      	movs	r1, #8
 8001bda:	438a      	bics	r2, r1
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001be0:	1cbb      	adds	r3, r7, #2
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d000      	beq.n	8001bea <map_int_pin+0x2a6>
 8001be8:	e1bb      	b.n	8001f62 <map_int_pin+0x61e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2208      	movs	r2, #8
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3301      	adds	r3, #1
 8001c02:	2108      	movs	r1, #8
 8001c04:	430a      	orrs	r2, r1
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001c0a:	e1aa      	b.n	8001f62 <map_int_pin+0x61e>
        case BMA400_GEN1_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001c0c:	1cbb      	adds	r3, r7, #2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d106      	bne.n	8001c22 <map_int_pin+0x2de>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2204      	movs	r2, #4
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001c22:	1cbb      	adds	r3, r7, #2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d108      	bne.n	8001c3c <map_int_pin+0x2f8>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3301      	adds	r3, #1
 8001c34:	2104      	movs	r1, #4
 8001c36:	430a      	orrs	r2, r1
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001c3c:	1cbb      	adds	r3, r7, #2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10f      	bne.n	8001c64 <map_int_pin+0x320>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN1);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3301      	adds	r3, #1
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	438a      	bics	r2, r1
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001c64:	1cbb      	adds	r3, r7, #2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d000      	beq.n	8001c6e <map_int_pin+0x32a>
 8001c6c:	e17b      	b.n	8001f66 <map_int_pin+0x622>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2204      	movs	r2, #4
 8001c74:	4313      	orrs	r3, r2
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3301      	adds	r3, #1
 8001c86:	2104      	movs	r1, #4
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001c8e:	e16a      	b.n	8001f66 <map_int_pin+0x622>
 8001c90:	08005c98 	.word	0x08005c98
        case BMA400_ORIENT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001c94:	1cbb      	adds	r3, r7, #2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <map_int_pin+0x366>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001caa:	1cbb      	adds	r3, r7, #2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d108      	bne.n	8001cc4 <map_int_pin+0x380>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001cc4:	1cbb      	adds	r3, r7, #2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10f      	bne.n	8001cec <map_int_pin+0x3a8>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4393      	bics	r3, r2
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_ORIENT_CH);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	438a      	bics	r2, r1
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001cec:	1cbb      	adds	r3, r7, #2
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d000      	beq.n	8001cf6 <map_int_pin+0x3b2>
 8001cf4:	e139      	b.n	8001f6a <map_int_pin+0x626>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3301      	adds	r3, #1
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	2102      	movs	r1, #2
 8001d10:	430a      	orrs	r2, r1
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001d16:	e128      	b.n	8001f6a <map_int_pin+0x626>
        case BMA400_WAKEUP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001d18:	1cbb      	adds	r3, r7, #2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d106      	bne.n	8001d2e <map_int_pin+0x3ea>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2201      	movs	r2, #1
 8001d26:	4313      	orrs	r3, r2
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001d2e:	1cbb      	adds	r3, r7, #2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d108      	bne.n	8001d48 <map_int_pin+0x404>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	2101      	movs	r1, #1
 8001d42:	430a      	orrs	r2, r1
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001d48:	1cbb      	adds	r3, r7, #2
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10f      	bne.n	8001d70 <map_int_pin+0x42c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_WAKEUP_INT);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4393      	bics	r3, r2
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_WAKEUP_INT);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3301      	adds	r3, #1
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	2101      	movs	r1, #1
 8001d6a:	438a      	bics	r2, r1
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001d70:	1cbb      	adds	r3, r7, #2
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d000      	beq.n	8001d7a <map_int_pin+0x436>
 8001d78:	e0f9      	b.n	8001f6e <map_int_pin+0x62a>
            {
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4313      	orrs	r3, r2
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3301      	adds	r3, #1
 8001d92:	2101      	movs	r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001d9a:	e0e8      	b.n	8001f6e <map_int_pin+0x62a>
        case BMA400_ACT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001d9c:	1cbb      	adds	r3, r7, #2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <map_int_pin+0x472>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3302      	adds	r3, #2
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3302      	adds	r3, #2
 8001dae:	2108      	movs	r1, #8
 8001db0:	430a      	orrs	r2, r1
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001db6:	1cbb      	adds	r3, r7, #2
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d109      	bne.n	8001dd2 <map_int_pin+0x48e>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	781a      	ldrb	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	2180      	movs	r1, #128	@ 0x80
 8001dca:	4249      	negs	r1, r1
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001dd2:	1cbb      	adds	r3, r7, #2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d111      	bne.n	8001dfe <map_int_pin+0x4ba>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT1);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3302      	adds	r3, #2
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3302      	adds	r3, #2
 8001de4:	2108      	movs	r1, #8
 8001de6:	438a      	bics	r2, r1
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT2);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3302      	adds	r3, #2
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3302      	adds	r3, #2
 8001df6:	217f      	movs	r1, #127	@ 0x7f
 8001df8:	400a      	ands	r2, r1
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001dfe:	1cbb      	adds	r3, r7, #2
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d000      	beq.n	8001e08 <map_int_pin+0x4c4>
 8001e06:	e0b4      	b.n	8001f72 <map_int_pin+0x62e>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3302      	adds	r3, #2
 8001e12:	2108      	movs	r1, #8
 8001e14:	430a      	orrs	r2, r1
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3302      	adds	r3, #2
 8001e24:	2180      	movs	r1, #128	@ 0x80
 8001e26:	4249      	negs	r1, r1
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001e2e:	e0a0      	b.n	8001f72 <map_int_pin+0x62e>
        case BMA400_TAP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001e30:	1cbb      	adds	r3, r7, #2
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d108      	bne.n	8001e4a <map_int_pin+0x506>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3302      	adds	r3, #2
 8001e42:	2104      	movs	r1, #4
 8001e44:	430a      	orrs	r2, r1
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001e4a:	1cbb      	adds	r3, r7, #2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d108      	bne.n	8001e64 <map_int_pin+0x520>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3302      	adds	r3, #2
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	2140      	movs	r1, #64	@ 0x40
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001e64:	1cbb      	adds	r3, r7, #2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <map_int_pin+0x54c>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3302      	adds	r3, #2
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3302      	adds	r3, #2
 8001e76:	2104      	movs	r1, #4
 8001e78:	438a      	bics	r2, r1
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT2);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3302      	adds	r3, #2
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3302      	adds	r3, #2
 8001e88:	2140      	movs	r1, #64	@ 0x40
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001e90:	1cbb      	adds	r3, r7, #2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d000      	beq.n	8001e9a <map_int_pin+0x556>
 8001e98:	e06d      	b.n	8001f76 <map_int_pin+0x632>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3302      	adds	r3, #2
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	2140      	movs	r1, #64	@ 0x40
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001ebe:	e05a      	b.n	8001f76 <map_int_pin+0x632>
        case BMA400_STEP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001ec0:	1cbb      	adds	r3, r7, #2
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d108      	bne.n	8001eda <map_int_pin+0x596>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3302      	adds	r3, #2
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001eda:	1cbb      	adds	r3, r7, #2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d108      	bne.n	8001ef4 <map_int_pin+0x5b0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3302      	adds	r3, #2
 8001eec:	2110      	movs	r1, #16
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001ef4:	1cbb      	adds	r3, r7, #2
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d111      	bne.n	8001f20 <map_int_pin+0x5dc>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_EN_STEP_INT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3302      	adds	r3, #2
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3302      	adds	r3, #2
 8001f06:	2101      	movs	r1, #1
 8001f08:	438a      	bics	r2, r1
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3302      	adds	r3, #2
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3302      	adds	r3, #2
 8001f18:	2110      	movs	r1, #16
 8001f1a:	438a      	bics	r2, r1
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001f20:	1cbb      	adds	r3, r7, #2
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d128      	bne.n	8001f7a <map_int_pin+0x636>
            {
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3302      	adds	r3, #2
 8001f32:	2101      	movs	r1, #1
 8001f34:	430a      	orrs	r2, r1
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	781a      	ldrb	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3302      	adds	r3, #2
 8001f44:	2110      	movs	r1, #16
 8001f46:	430a      	orrs	r2, r1
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001f4c:	e015      	b.n	8001f7a <map_int_pin+0x636>
        default:
            break;
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	e014      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	e012      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	e010      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	e00e      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	e00c      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	e00a      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	e008      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	e006      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	e004      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	e002      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f76:	46c0      	nop			@ (mov r8, r8)
 8001f78:	e000      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f7a:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001f7c:	46c0      	nop			@ (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <set_int_pin_conf>:
            break;
    }
}

static int8_t set_int_pin_conf(struct bma400_int_pin_conf int_conf, struct bma400_dev *dev)
{
 8001f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	8018      	strh	r0, [r3, #0]
 8001f8e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8001f90:	260f      	movs	r6, #15
 8001f92:	19bc      	adds	r4, r7, r6
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	250e      	movs	r5, #14
 8001f98:	1979      	adds	r1, r7, r5
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2024      	movs	r0, #36	@ 0x24
 8001f9e:	f7fe fb17 	bl	80005d0 <bma400_get_regs>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8001fa6:	19bb      	adds	r3, r7, r6
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d13a      	bne.n	8002026 <set_int_pin_conf+0xa2>
    {
        if (int_conf.int_chan == BMA400_INT_CHANNEL_1)
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d113      	bne.n	8001fe0 <set_int_pin_conf+0x5c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
 8001fb8:	0028      	movs	r0, r5
 8001fba:	183b      	adds	r3, r7, r0
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	2206      	movs	r2, #6
 8001fc2:	4393      	bics	r3, r2
 8001fc4:	b25a      	sxtb	r2, r3
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	785b      	ldrb	r3, [r3, #1]
 8001fca:	b25b      	sxtb	r3, r3
 8001fcc:	18db      	adds	r3, r3, r3
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	2106      	movs	r1, #6
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b25b      	sxtb	r3, r3
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	183b      	adds	r3, r7, r0
 8001fde:	701a      	strb	r2, [r3, #0]
        }

        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d113      	bne.n	8002010 <set_int_pin_conf+0x8c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 8001fe8:	200e      	movs	r0, #14
 8001fea:	183b      	adds	r3, r7, r0
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	2260      	movs	r2, #96	@ 0x60
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	b25a      	sxtb	r2, r3
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	015b      	lsls	r3, r3, #5
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	2160      	movs	r1, #96	@ 0x60
 8002002:	400b      	ands	r3, r1
 8002004:	b25b      	sxtb	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b25b      	sxtb	r3, r3
 800200a:	b2da      	uxtb	r2, r3
 800200c:	183b      	adds	r3, r7, r0
 800200e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8002010:	230f      	movs	r3, #15
 8002012:	18fc      	adds	r4, r7, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	220e      	movs	r2, #14
 8002018:	18b9      	adds	r1, r7, r2
 800201a:	2201      	movs	r2, #1
 800201c:	2024      	movs	r0, #36	@ 0x24
 800201e:	f7fe fa59 	bl	80004d4 <bma400_set_regs>
 8002022:	0003      	movs	r3, r0
 8002024:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002026:	230f      	movs	r3, #15
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b25b      	sxtb	r3, r3
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b005      	add	sp, #20
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002036 <set_fifo_conf>:

    return rslt;
}

static int8_t set_fifo_conf(const struct bma400_fifo_conf *fifo_conf, struct bma400_dev *dev)
{
 8002036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3];
    uint8_t sens_data[3];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8002040:	250f      	movs	r5, #15
 8002042:	197c      	adds	r4, r7, r5
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	0018      	movs	r0, r3
 8002048:	f7fe fd7e 	bl	8000b48 <null_ptr_check>
 800204c:	0003      	movs	r3, r0
 800204e:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8002050:	197b      	adds	r3, r7, r5
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b25b      	sxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d15b      	bne.n	8002112 <set_fifo_conf+0xdc>
    {
        /* Get the FIFO configurations and water-mark
         * values from the sensor
         */
        rslt = bma400_get_regs(BMA400_REG_FIFO_CONFIG_0, sens_data, 3, dev);
 800205a:	197c      	adds	r4, r7, r5
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2608      	movs	r6, #8
 8002060:	19b9      	adds	r1, r7, r6
 8002062:	2203      	movs	r2, #3
 8002064:	2026      	movs	r0, #38	@ 0x26
 8002066:	f7fe fab3 	bl	80005d0 <bma400_get_regs>
 800206a:	0003      	movs	r3, r0
 800206c:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 800206e:	197b      	adds	r3, r7, r5
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b25b      	sxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d14c      	bne.n	8002112 <set_fifo_conf+0xdc>
        {
            /* FIFO configurations */
            data_array[0] = fifo_conf->conf_regs;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	781a      	ldrb	r2, [r3, #0]
 800207c:	210c      	movs	r1, #12
 800207e:	187b      	adds	r3, r7, r1
 8002080:	701a      	strb	r2, [r3, #0]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10c      	bne.n	80020a4 <set_fifo_conf+0x6e>
            {
                /* Disable the selected interrupt status */
                data_array[0] = sens_data[0] & (~data_array[0]);
 800208a:	19bb      	adds	r3, r7, r6
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b25b      	sxtb	r3, r3
 8002090:	187a      	adds	r2, r7, r1
 8002092:	7812      	ldrb	r2, [r2, #0]
 8002094:	b252      	sxtb	r2, r2
 8002096:	43d2      	mvns	r2, r2
 8002098:	b252      	sxtb	r2, r2
 800209a:	4013      	ands	r3, r2
 800209c:	b25b      	sxtb	r3, r3
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	701a      	strb	r2, [r3, #0]
            }

            /* FIFO water-mark values */
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	885b      	ldrh	r3, [r3, #2]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	210c      	movs	r1, #12
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	705a      	strb	r2, [r3, #1]
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	885b      	ldrh	r3, [r3, #2]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	187b      	adds	r3, r7, r1
 80020bc:	709a      	strb	r2, [r3, #2]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	789b      	ldrb	r3, [r3, #2]
 80020c2:	2207      	movs	r2, #7
 80020c4:	4013      	ands	r3, r2
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	709a      	strb	r2, [r3, #2]
            if ((data_array[1] == sens_data[1]) && (data_array[2] == sens_data[2]))
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	785a      	ldrb	r2, [r3, #1]
 80020d0:	2008      	movs	r0, #8
 80020d2:	183b      	adds	r3, r7, r0
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d110      	bne.n	80020fc <set_fifo_conf+0xc6>
 80020da:	187b      	adds	r3, r7, r1
 80020dc:	789a      	ldrb	r2, [r3, #2]
 80020de:	183b      	adds	r3, r7, r0
 80020e0:	789b      	ldrb	r3, [r3, #2]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d10a      	bne.n	80020fc <set_fifo_conf+0xc6>
            {
                /* Set the FIFO configurations in the
                 * sensor excluding the watermark value
                 */
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 1, dev);
 80020e6:	230f      	movs	r3, #15
 80020e8:	18fc      	adds	r4, r7, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	1879      	adds	r1, r7, r1
 80020ee:	2201      	movs	r2, #1
 80020f0:	2026      	movs	r0, #38	@ 0x26
 80020f2:	f7fe f9ef 	bl	80004d4 <bma400_set_regs>
 80020f6:	0003      	movs	r3, r0
 80020f8:	7023      	strb	r3, [r4, #0]
 80020fa:	e00a      	b.n	8002112 <set_fifo_conf+0xdc>
            }
            else
            {
                /* Set the FIFO configurations in the sensor*/
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 3, dev);
 80020fc:	230f      	movs	r3, #15
 80020fe:	18fc      	adds	r4, r7, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	220c      	movs	r2, #12
 8002104:	18b9      	adds	r1, r7, r2
 8002106:	2203      	movs	r2, #3
 8002108:	2026      	movs	r0, #38	@ 0x26
 800210a:	f7fe f9e3 	bl	80004d4 <bma400_set_regs>
 800210e:	0003      	movs	r3, r0
 8002110:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8002112:	230f      	movs	r3, #15
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b25b      	sxtb	r3, r3
}
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b005      	add	sp, #20
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002122 <user_i2c_read>:

    return rslt;
}

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b08a      	sub	sp, #40	@ 0x28
 8002126:	af04      	add	r7, sp, #16
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	210f      	movs	r1, #15
 8002130:	187b      	adds	r3, r7, r1
 8002132:	1c02      	adds	r2, r0, #0
 8002134:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Read(hi2c, BMA400_I2C_ADDR, reg_addr,
 800213a:	187b      	adds	r3, r7, r1
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b299      	uxth	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	b29b      	uxth	r3, r3
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	2201      	movs	r2, #1
 8002148:	4252      	negs	r2, r2
 800214a:	9202      	str	r2, [sp, #8]
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2301      	movs	r3, #1
 8002154:	000a      	movs	r2, r1
 8002156:	2128      	movs	r1, #40	@ 0x28
 8002158:	f001 f92c 	bl	80033b4 <HAL_I2C_Mem_Read>
 800215c:	1e03      	subs	r3, r0, #0
 800215e:	d101      	bne.n	8002164 <user_i2c_read+0x42>
                         I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e001      	b.n	8002168 <user_i2c_read+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 8002164:	2302      	movs	r3, #2
 8002166:	425b      	negs	r3, r3
    }
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b006      	add	sp, #24
 800216e:	bd80      	pop	{r7, pc}

08002170 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af04      	add	r7, sp, #16
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	210f      	movs	r1, #15
 800217e:	187b      	adds	r3, r7, r1
 8002180:	1c02      	adds	r2, r0, #0
 8002182:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Write(hi2c, BMA400_I2C_ADDR, reg_addr,
 8002188:	187b      	adds	r3, r7, r1
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b299      	uxth	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	b29b      	uxth	r3, r3
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	2201      	movs	r2, #1
 8002196:	4252      	negs	r2, r2
 8002198:	9202      	str	r2, [sp, #8]
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2301      	movs	r3, #1
 80021a2:	000a      	movs	r2, r1
 80021a4:	2128      	movs	r1, #40	@ 0x28
 80021a6:	f000 ffd7 	bl	8003158 <HAL_I2C_Mem_Write>
 80021aa:	1e03      	subs	r3, r0, #0
 80021ac:	d101      	bne.n	80021b2 <user_i2c_write+0x42>
                          I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e001      	b.n	80021b6 <user_i2c_write+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 80021b2:	2302      	movs	r3, #2
 80021b4:	425b      	negs	r3, r3
    }
}
 80021b6:	0018      	movs	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b006      	add	sp, #24
 80021bc:	bd80      	pop	{r7, pc}

080021be <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
    // Zakładamy, że potrzebne opóźnienia mają ≥ 1000us (1ms)
    HAL_Delay(period / 1000);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	22fa      	movs	r2, #250	@ 0xfa
 80021cc:	0091      	lsls	r1, r2, #2
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7fd ffac 	bl	800012c <__udivsi3>
 80021d4:	0003      	movs	r3, r0
 80021d6:	0018      	movs	r0, r3
 80021d8:	f000 fca8 	bl	8002b2c <HAL_Delay>

    // Jeśli potrzebujesz dokładniejszych opóźnień — patrz niżej
}
 80021dc:	46c0      	nop			@ (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b08b      	sub	sp, #44	@ 0x2c
 80021e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	2414      	movs	r4, #20
 80021ec:	193b      	adds	r3, r7, r4
 80021ee:	0018      	movs	r0, r3
 80021f0:	2314      	movs	r3, #20
 80021f2:	001a      	movs	r2, r3
 80021f4:	2100      	movs	r1, #0
 80021f6:	f003 f8b3 	bl	8005360 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	4b38      	ldr	r3, [pc, #224]	@ (80022dc <MX_GPIO_Init+0xf8>)
 80021fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021fe:	4b37      	ldr	r3, [pc, #220]	@ (80022dc <MX_GPIO_Init+0xf8>)
 8002200:	2104      	movs	r1, #4
 8002202:	430a      	orrs	r2, r1
 8002204:	635a      	str	r2, [r3, #52]	@ 0x34
 8002206:	4b35      	ldr	r3, [pc, #212]	@ (80022dc <MX_GPIO_Init+0xf8>)
 8002208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220a:	2204      	movs	r2, #4
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002212:	4b32      	ldr	r3, [pc, #200]	@ (80022dc <MX_GPIO_Init+0xf8>)
 8002214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002216:	4b31      	ldr	r3, [pc, #196]	@ (80022dc <MX_GPIO_Init+0xf8>)
 8002218:	2120      	movs	r1, #32
 800221a:	430a      	orrs	r2, r1
 800221c:	635a      	str	r2, [r3, #52]	@ 0x34
 800221e:	4b2f      	ldr	r3, [pc, #188]	@ (80022dc <MX_GPIO_Init+0xf8>)
 8002220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002222:	2220      	movs	r2, #32
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	4b2c      	ldr	r3, [pc, #176]	@ (80022dc <MX_GPIO_Init+0xf8>)
 800222c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800222e:	4b2b      	ldr	r3, [pc, #172]	@ (80022dc <MX_GPIO_Init+0xf8>)
 8002230:	2101      	movs	r1, #1
 8002232:	430a      	orrs	r2, r1
 8002234:	635a      	str	r2, [r3, #52]	@ 0x34
 8002236:	4b29      	ldr	r3, [pc, #164]	@ (80022dc <MX_GPIO_Init+0xf8>)
 8002238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800223a:	2201      	movs	r2, #1
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	4b26      	ldr	r3, [pc, #152]	@ (80022dc <MX_GPIO_Init+0xf8>)
 8002244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002246:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <MX_GPIO_Init+0xf8>)
 8002248:	2102      	movs	r1, #2
 800224a:	430a      	orrs	r2, r1
 800224c:	635a      	str	r2, [r3, #52]	@ 0x34
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <MX_GPIO_Init+0xf8>)
 8002250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_IO_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800225a:	23d0      	movs	r3, #208	@ 0xd0
 800225c:	0059      	lsls	r1, r3, #1
 800225e:	23a0      	movs	r3, #160	@ 0xa0
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	2200      	movs	r2, #0
 8002264:	0018      	movs	r0, r3
 8002266:	f000 feb3 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 800226a:	193b      	adds	r3, r7, r4
 800226c:	2204      	movs	r2, #4
 800226e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002270:	193b      	adds	r3, r7, r4
 8002272:	2200      	movs	r2, #0
 8002274:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	193b      	adds	r3, r7, r4
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 800227c:	193b      	adds	r3, r7, r4
 800227e:	4a18      	ldr	r2, [pc, #96]	@ (80022e0 <MX_GPIO_Init+0xfc>)
 8002280:	0019      	movs	r1, r3
 8002282:	0010      	movs	r0, r2
 8002284:	f000 fd3a 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_IO_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = EN_IO_Pin|LED1_Pin|LED2_Pin;
 8002288:	0021      	movs	r1, r4
 800228a:	187b      	adds	r3, r7, r1
 800228c:	22d0      	movs	r2, #208	@ 0xd0
 800228e:	0052      	lsls	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	000c      	movs	r4, r1
 8002294:	193b      	adds	r3, r7, r4
 8002296:	2201      	movs	r2, #1
 8002298:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	193b      	adds	r3, r7, r4
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	193b      	adds	r3, r7, r4
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	193a      	adds	r2, r7, r4
 80022a8:	23a0      	movs	r3, #160	@ 0xa0
 80022aa:	05db      	lsls	r3, r3, #23
 80022ac:	0011      	movs	r1, r2
 80022ae:	0018      	movs	r0, r3
 80022b0:	f000 fd24 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	2240      	movs	r2, #64	@ 0x40
 80022b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ba:	193b      	adds	r3, r7, r4
 80022bc:	2200      	movs	r2, #0
 80022be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	2201      	movs	r2, #1
 80022c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80022c6:	193a      	adds	r2, r7, r4
 80022c8:	23a0      	movs	r3, #160	@ 0xa0
 80022ca:	05db      	lsls	r3, r3, #23
 80022cc:	0011      	movs	r1, r2
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 fd14 	bl	8002cfc <HAL_GPIO_Init>

}
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b00b      	add	sp, #44	@ 0x2c
 80022da:	bd90      	pop	{r4, r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	50001400 	.word	0x50001400

080022e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <MX_I2C1_Init+0x74>)
 80022ea:	4a1c      	ldr	r2, [pc, #112]	@ (800235c <MX_I2C1_Init+0x78>)
 80022ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 80022ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <MX_I2C1_Init+0x74>)
 80022f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002360 <MX_I2C1_Init+0x7c>)
 80022f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022f4:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <MX_I2C1_Init+0x74>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022fa:	4b17      	ldr	r3, [pc, #92]	@ (8002358 <MX_I2C1_Init+0x74>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002300:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <MX_I2C1_Init+0x74>)
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002306:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <MX_I2C1_Init+0x74>)
 8002308:	2200      	movs	r2, #0
 800230a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800230c:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <MX_I2C1_Init+0x74>)
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002312:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <MX_I2C1_Init+0x74>)
 8002314:	2200      	movs	r2, #0
 8002316:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002318:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <MX_I2C1_Init+0x74>)
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800231e:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <MX_I2C1_Init+0x74>)
 8002320:	0018      	movs	r0, r3
 8002322:	f000 fe73 	bl	800300c <HAL_I2C_Init>
 8002326:	1e03      	subs	r3, r0, #0
 8002328:	d001      	beq.n	800232e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800232a:	f000 f9cf 	bl	80026cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <MX_I2C1_Init+0x74>)
 8002330:	2100      	movs	r1, #0
 8002332:	0018      	movs	r0, r3
 8002334:	f001 fc6e 	bl	8003c14 <HAL_I2CEx_ConfigAnalogFilter>
 8002338:	1e03      	subs	r3, r0, #0
 800233a:	d001      	beq.n	8002340 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800233c:	f000 f9c6 	bl	80026cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <MX_I2C1_Init+0x74>)
 8002342:	2100      	movs	r1, #0
 8002344:	0018      	movs	r0, r3
 8002346:	f001 fcb1 	bl	8003cac <HAL_I2CEx_ConfigDigitalFilter>
 800234a:	1e03      	subs	r3, r0, #0
 800234c:	d001      	beq.n	8002352 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800234e:	f000 f9bd 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000078 	.word	0x20000078
 800235c:	40005400 	.word	0x40005400
 8002360:	00402d41 	.word	0x00402d41

08002364 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b091      	sub	sp, #68	@ 0x44
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	232c      	movs	r3, #44	@ 0x2c
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	0018      	movs	r0, r3
 8002372:	2314      	movs	r3, #20
 8002374:	001a      	movs	r2, r3
 8002376:	2100      	movs	r1, #0
 8002378:	f002 fff2 	bl	8005360 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800237c:	2410      	movs	r4, #16
 800237e:	193b      	adds	r3, r7, r4
 8002380:	0018      	movs	r0, r3
 8002382:	231c      	movs	r3, #28
 8002384:	001a      	movs	r2, r3
 8002386:	2100      	movs	r1, #0
 8002388:	f002 ffea 	bl	8005360 <memset>
  if(i2cHandle->Instance==I2C1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a22      	ldr	r2, [pc, #136]	@ (800241c <HAL_I2C_MspInit+0xb8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d13d      	bne.n	8002412 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002396:	193b      	adds	r3, r7, r4
 8002398:	2202      	movs	r2, #2
 800239a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800239c:	193b      	adds	r3, r7, r4
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a2:	193b      	adds	r3, r7, r4
 80023a4:	0018      	movs	r0, r3
 80023a6:	f002 f829 	bl	80043fc <HAL_RCCEx_PeriphCLKConfig>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80023ae:	f000 f98d 	bl	80026cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <HAL_I2C_MspInit+0xbc>)
 80023b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <HAL_I2C_MspInit+0xbc>)
 80023b8:	2102      	movs	r1, #2
 80023ba:	430a      	orrs	r2, r1
 80023bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80023be:	4b18      	ldr	r3, [pc, #96]	@ (8002420 <HAL_I2C_MspInit+0xbc>)
 80023c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c2:	2202      	movs	r2, #2
 80023c4:	4013      	ands	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023ca:	212c      	movs	r1, #44	@ 0x2c
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	22c0      	movs	r2, #192	@ 0xc0
 80023d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2212      	movs	r2, #18
 80023d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	2201      	movs	r2, #1
 80023dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	2206      	movs	r2, #6
 80023e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002424 <HAL_I2C_MspInit+0xc0>)
 80023ee:	0019      	movs	r1, r3
 80023f0:	0010      	movs	r0, r2
 80023f2:	f000 fc83 	bl	8002cfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_I2C_MspInit+0xbc>)
 80023f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023fa:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <HAL_I2C_MspInit+0xbc>)
 80023fc:	2180      	movs	r1, #128	@ 0x80
 80023fe:	0389      	lsls	r1, r1, #14
 8002400:	430a      	orrs	r2, r1
 8002402:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_I2C_MspInit+0xbc>)
 8002406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	039b      	lsls	r3, r3, #14
 800240c:	4013      	ands	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b011      	add	sp, #68	@ 0x44
 8002418:	bd90      	pop	{r4, r7, pc}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	40005400 	.word	0x40005400
 8002420:	40021000 	.word	0x40021000
 8002424:	50000400 	.word	0x50000400

08002428 <configureBMA400>:
  	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
    HAL_PWR_EnterSTANDBYMode();
}

void configureBMA400(struct bma400_dev *dev)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b090      	sub	sp, #64	@ 0x40
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
    uint8_t rslt;
    struct bma400_device_conf dev_conf[3];
    struct bma400_sensor_conf sensor_conf;

    // Set initial power mode to low power
    rslt = bma400_set_power_mode(BMA400_MODE_LOW_POWER, dev);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	0019      	movs	r1, r3
 8002434:	2001      	movs	r0, #1
 8002436:	f7fe f939 	bl	80006ac <bma400_set_power_mode>
 800243a:	0003      	movs	r3, r0
 800243c:	001a      	movs	r2, r3
 800243e:	213f      	movs	r1, #63	@ 0x3f
 8002440:	187b      	adds	r3, r7, r1
 8002442:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 8002444:	187b      	adds	r3, r7, r1
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <configureBMA400+0x28>
    {
        Error_Handler();
 800244c:	f000 f93e 	bl	80026cc <Error_Handler>
    }

    // auto low power after movement stops (1 s)
    dev_conf[0].type = BMA400_AUTO_LOW_POWER;
 8002450:	2120      	movs	r1, #32
 8002452:	187b      	adds	r3, r7, r1
 8002454:	2202      	movs	r2, #2
 8002456:	701a      	strb	r2, [r3, #0]
    dev_conf[0].param.auto_lp.auto_low_power_trigger =
 8002458:	187b      	adds	r3, r7, r1
 800245a:	220e      	movs	r2, #14
 800245c:	709a      	strb	r2, [r3, #2]
        BMA400_AUTO_LP_GEN1_TRIGGER | BMA400_AUTO_LP_TIMEOUT_EN | BMA400_AUTO_LP_TIME_RESET_EN;
    dev_conf[0].param.auto_lp.auto_lp_timeout_threshold = 100; // 400 × 2.5 ms = 1 s
 800245e:	187b      	adds	r3, r7, r1
 8002460:	2264      	movs	r2, #100	@ 0x64
 8002462:	809a      	strh	r2, [r3, #4]

    // wake-up interrupt on motion detection on Z axe
    dev_conf[1].type = BMA400_AUTOWAKEUP_INT;
 8002464:	187b      	adds	r3, r7, r1
 8002466:	2201      	movs	r2, #1
 8002468:	729a      	strb	r2, [r3, #10]
    dev_conf[1].param.wakeup.wakeup_ref_update = BMA400_UPDATE_ONE_TIME;
 800246a:	187b      	adds	r3, r7, r1
 800246c:	2201      	movs	r2, #1
 800246e:	731a      	strb	r2, [r3, #12]
    dev_conf[1].param.wakeup.sample_count = BMA400_SAMPLE_COUNT_2;
 8002470:	187b      	adds	r3, r7, r1
 8002472:	2201      	movs	r2, #1
 8002474:	735a      	strb	r2, [r3, #13]
    dev_conf[1].param.wakeup.wakeup_axes_en = BMA400_AXIS_XYZ_EN;
 8002476:	187b      	adds	r3, r7, r1
 8002478:	2207      	movs	r2, #7
 800247a:	739a      	strb	r2, [r3, #14]
    dev_conf[1].param.wakeup.int_wkup_threshold = 1;	// mg threshold
 800247c:	187b      	adds	r3, r7, r1
 800247e:	2201      	movs	r2, #1
 8002480:	73da      	strb	r2, [r3, #15]
    dev_conf[1].param.wakeup.int_wkup_ref_z = 0;
 8002482:	187b      	adds	r3, r7, r1
 8002484:	2200      	movs	r2, #0
 8002486:	749a      	strb	r2, [r3, #18]
    dev_conf[1].param.wakeup.int_chan = BMA400_INT_CHANNEL_1;
 8002488:	187b      	adds	r3, r7, r1
 800248a:	2201      	movs	r2, #1
 800248c:	74da      	strb	r2, [r3, #19]

    dev_conf[2].type = BMA400_INT_PIN_CONF;
 800248e:	187b      	adds	r3, r7, r1
 8002490:	2203      	movs	r2, #3
 8002492:	751a      	strb	r2, [r3, #20]
    dev_conf[2].param.int_conf.int_chan = BMA400_INT_CHANNEL_1;
 8002494:	187b      	adds	r3, r7, r1
 8002496:	2201      	movs	r2, #1
 8002498:	759a      	strb	r2, [r3, #22]
    dev_conf[2].param.int_conf.pin_conf = BMA400_INT_OPEN_DRAIN_ACTIVE_0;
 800249a:	187b      	adds	r3, r7, r1
 800249c:	2202      	movs	r2, #2
 800249e:	75da      	strb	r2, [r3, #23]

    rslt = bma400_set_device_conf(dev_conf, 3, dev);
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	187b      	adds	r3, r7, r1
 80024a4:	2103      	movs	r1, #3
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7fe fa12 	bl	80008d0 <bma400_set_device_conf>
 80024ac:	0003      	movs	r3, r0
 80024ae:	001a      	movs	r2, r3
 80024b0:	213f      	movs	r1, #63	@ 0x3f
 80024b2:	187b      	adds	r3, r7, r1
 80024b4:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <configureBMA400+0x9a>
    {
        Error_Handler();
 80024be:	f000 f905 	bl	80026cc <Error_Handler>
    }

    // configure accelerometer
    sensor_conf.type = BMA400_ACCEL;
 80024c2:	210c      	movs	r1, #12
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
    sensor_conf.param.accel.odr = BMA400_ODR_800HZ;
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	220b      	movs	r2, #11
 80024ce:	709a      	strb	r2, [r3, #2]
    sensor_conf.param.accel.range = BMA400_RANGE_2G;
 80024d0:	187b      	adds	r3, r7, r1
 80024d2:	2200      	movs	r2, #0
 80024d4:	70da      	strb	r2, [r3, #3]
    sensor_conf.param.accel.data_src = BMA400_DATA_SRC_ACCEL_FILT_LP;
 80024d6:	187b      	adds	r3, r7, r1
 80024d8:	2202      	movs	r2, #2
 80024da:	711a      	strb	r2, [r3, #4]
    sensor_conf.param.accel.osr = BMA400_ACCEL_OSR_SETTING_3;
 80024dc:	187b      	adds	r3, r7, r1
 80024de:	2203      	movs	r2, #3
 80024e0:	715a      	strb	r2, [r3, #5]
    sensor_conf.param.accel.filt1_bw = BMA400_ACCEL_FILT1_BW_0;
 80024e2:	187b      	adds	r3, r7, r1
 80024e4:	2200      	movs	r2, #0
 80024e6:	71da      	strb	r2, [r3, #7]

    rslt = bma400_set_sensor_conf(&sensor_conf, 1, dev);
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2101      	movs	r1, #1
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7fe f96f 	bl	80007d2 <bma400_set_sensor_conf>
 80024f4:	0003      	movs	r3, r0
 80024f6:	001a      	movs	r2, r3
 80024f8:	213f      	movs	r1, #63	@ 0x3f
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK) Error_Handler();
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <configureBMA400+0xe2>
 8002506:	f000 f8e1 	bl	80026cc <Error_Handler>

    // enable auto wakeup
   rslt = set_auto_wakeup(BMA400_ENABLE, dev);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0019      	movs	r1, r3
 800250e:	2001      	movs	r0, #1
 8002510:	f7fe fde9 	bl	80010e6 <set_auto_wakeup>
 8002514:	0003      	movs	r3, r0
 8002516:	001a      	movs	r2, r3
 8002518:	213f      	movs	r1, #63	@ 0x3f
 800251a:	187b      	adds	r3, r7, r1
 800251c:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 800251e:	187b      	adds	r3, r7, r1
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <configureBMA400+0x102>
    {
        Error_Handler();
 8002526:	f000 f8d1 	bl	80026cc <Error_Handler>
    }
}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b010      	add	sp, #64	@ 0x40
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002534:	b5b0      	push	{r4, r5, r7, lr}
 8002536:	b09a      	sub	sp, #104	@ 0x68
 8002538:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	struct bma400_dev bma400;

	bma400.intf = BMA400_I2C_INTF;
 800253a:	2138      	movs	r1, #56	@ 0x38
 800253c:	187b      	adds	r3, r7, r1
 800253e:	2201      	movs	r2, #1
 8002540:	705a      	strb	r2, [r3, #1]
	bma400.intf_ptr = &hi2c1;
 8002542:	000c      	movs	r4, r1
 8002544:	193b      	adds	r3, r7, r4
 8002546:	4a33      	ldr	r2, [pc, #204]	@ (8002614 <main+0xe0>)
 8002548:	605a      	str	r2, [r3, #4]
	bma400.read = user_i2c_read;
 800254a:	193b      	adds	r3, r7, r4
 800254c:	4a32      	ldr	r2, [pc, #200]	@ (8002618 <main+0xe4>)
 800254e:	60da      	str	r2, [r3, #12]
	bma400.write = user_i2c_write;
 8002550:	193b      	adds	r3, r7, r4
 8002552:	4a32      	ldr	r2, [pc, #200]	@ (800261c <main+0xe8>)
 8002554:	611a      	str	r2, [r3, #16]
	bma400.delay_us = user_delay_us;
 8002556:	193b      	adds	r3, r7, r4
 8002558:	4a31      	ldr	r2, [pc, #196]	@ (8002620 <main+0xec>)
 800255a:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800255c:	f000 fa69 	bl	8002a32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002560:	f000 f868 	bl	8002634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002564:	f7ff fe3e 	bl	80021e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002568:	f7ff febc 	bl	80022e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800256c:	f000 f984 	bl	8002878 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8002570:	f000 f93e 	bl	80027f0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); // dbg - check power mode state
  bma400_init(&bma400);
 8002574:	193b      	adds	r3, r7, r4
 8002576:	0018      	movs	r0, r3
 8002578:	f7fd ff4e 	bl	8000418 <bma400_init>
  configureBMA400(&bma400);
 800257c:	193b      	adds	r3, r7, r4
 800257e:	0018      	movs	r0, r3
 8002580:	f7ff ff52 	bl	8002428 <configureBMA400>
  HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, SET);
 8002584:	23a0      	movs	r3, #160	@ 0xa0
 8002586:	05db      	lsls	r3, r3, #23
 8002588:	2201      	movs	r2, #1
 800258a:	2120      	movs	r1, #32
 800258c:	0018      	movs	r0, r3
 800258e:	f000 fd1f 	bl	8002fd0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (time < 10000)
 8002592:	e034      	b.n	80025fe <main+0xca>

  {
	  struct bma400_sensor_data data;	// structure for storing data
	  bma400_get_accel_data(BMA400_DATA_SENSOR_TIME, &data, &bma400);
 8002594:	2338      	movs	r3, #56	@ 0x38
 8002596:	18fa      	adds	r2, r7, r3
 8002598:	242c      	movs	r4, #44	@ 0x2c
 800259a:	193b      	adds	r3, r7, r4
 800259c:	0019      	movs	r1, r3
 800259e:	2001      	movs	r0, #1
 80025a0:	f7fe f8e6 	bl	8000770 <bma400_get_accel_data>

	  char msg[40];
	  snprintf(msg, sizeof(msg), "%d,%d,%d,%lu\n", data.x, data.y, data.z, data.sensortime);
 80025a4:	0022      	movs	r2, r4
 80025a6:	18bb      	adds	r3, r7, r2
 80025a8:	2100      	movs	r1, #0
 80025aa:	5e5b      	ldrsh	r3, [r3, r1]
 80025ac:	001d      	movs	r5, r3
 80025ae:	18bb      	adds	r3, r7, r2
 80025b0:	2102      	movs	r1, #2
 80025b2:	5e5b      	ldrsh	r3, [r3, r1]
 80025b4:	0019      	movs	r1, r3
 80025b6:	18bb      	adds	r3, r7, r2
 80025b8:	2004      	movs	r0, #4
 80025ba:	5e1b      	ldrsh	r3, [r3, r0]
 80025bc:	001c      	movs	r4, r3
 80025be:	18bb      	adds	r3, r7, r2
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4a18      	ldr	r2, [pc, #96]	@ (8002624 <main+0xf0>)
 80025c4:	1d38      	adds	r0, r7, #4
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	9401      	str	r4, [sp, #4]
 80025ca:	9100      	str	r1, [sp, #0]
 80025cc:	002b      	movs	r3, r5
 80025ce:	2128      	movs	r1, #40	@ 0x28
 80025d0:	f002 fe90 	bl	80052f4 <sniprintf>

	  //HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, SET);	// activate ESP826
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	0018      	movs	r0, r3
 80025d8:	f7fd fd96 	bl	8000108 <strlen>
 80025dc:	0003      	movs	r3, r0
 80025de:	b29a      	uxth	r2, r3
 80025e0:	2301      	movs	r3, #1
 80025e2:	425b      	negs	r3, r3
 80025e4:	1d39      	adds	r1, r7, #4
 80025e6:	4810      	ldr	r0, [pc, #64]	@ (8002628 <main+0xf4>)
 80025e8:	f002 f914 	bl	8004814 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80025ec:	2064      	movs	r0, #100	@ 0x64
 80025ee:	f000 fa9d 	bl	8002b2c <HAL_Delay>
	  time += 100;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	@ (800262c <main+0xf8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3364      	adds	r3, #100	@ 0x64
 80025f8:	001a      	movs	r2, r3
 80025fa:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <main+0xf8>)
 80025fc:	601a      	str	r2, [r3, #0]
  while (time < 10000)
 80025fe:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <main+0xf8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a0b      	ldr	r2, [pc, #44]	@ (8002630 <main+0xfc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d9c5      	bls.n	8002594 <main+0x60>
 8002608:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800260a:	0018      	movs	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	b016      	add	sp, #88	@ 0x58
 8002610:	bdb0      	pop	{r4, r5, r7, pc}
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	20000078 	.word	0x20000078
 8002618:	08002123 	.word	0x08002123
 800261c:	08002171 	.word	0x08002171
 8002620:	080021bf 	.word	0x080021bf
 8002624:	08005c70 	.word	0x08005c70
 8002628:	20000120 	.word	0x20000120
 800262c:	200000cc 	.word	0x200000cc
 8002630:	0000270f 	.word	0x0000270f

08002634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b08d      	sub	sp, #52	@ 0x34
 8002638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800263a:	2414      	movs	r4, #20
 800263c:	193b      	adds	r3, r7, r4
 800263e:	0018      	movs	r0, r3
 8002640:	231c      	movs	r3, #28
 8002642:	001a      	movs	r2, r3
 8002644:	2100      	movs	r1, #0
 8002646:	f002 fe8b 	bl	8005360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800264a:	003b      	movs	r3, r7
 800264c:	0018      	movs	r0, r3
 800264e:	2314      	movs	r3, #20
 8002650:	001a      	movs	r2, r3
 8002652:	2100      	movs	r1, #0
 8002654:	f002 fe84 	bl	8005360 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8002658:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <SystemClock_Config+0x94>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <SystemClock_Config+0x94>)
 800265e:	2107      	movs	r1, #7
 8002660:	438a      	bics	r2, r1
 8002662:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002664:	193b      	adds	r3, r7, r4
 8002666:	2202      	movs	r2, #2
 8002668:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800266a:	193b      	adds	r3, r7, r4
 800266c:	2280      	movs	r2, #128	@ 0x80
 800266e:	0052      	lsls	r2, r2, #1
 8002670:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8002672:	193b      	adds	r3, r7, r4
 8002674:	2280      	movs	r2, #128	@ 0x80
 8002676:	0152      	lsls	r2, r2, #5
 8002678:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800267a:	193b      	adds	r3, r7, r4
 800267c:	2240      	movs	r2, #64	@ 0x40
 800267e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002680:	193b      	adds	r3, r7, r4
 8002682:	0018      	movs	r0, r3
 8002684:	f001 fb5e 	bl	8003d44 <HAL_RCC_OscConfig>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d001      	beq.n	8002690 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800268c:	f000 f81e 	bl	80026cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002690:	003b      	movs	r3, r7
 8002692:	2207      	movs	r2, #7
 8002694:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002696:	003b      	movs	r3, r7
 8002698:	2200      	movs	r2, #0
 800269a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800269c:	003b      	movs	r3, r7
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80026a2:	003b      	movs	r3, r7
 80026a4:	2200      	movs	r2, #0
 80026a6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80026a8:	003b      	movs	r3, r7
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026ae:	003b      	movs	r3, r7
 80026b0:	2100      	movs	r1, #0
 80026b2:	0018      	movs	r0, r3
 80026b4:	f001 fd2a 	bl	800410c <HAL_RCC_ClockConfig>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d001      	beq.n	80026c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80026bc:	f000 f806 	bl	80026cc <Error_Handler>
  }
}
 80026c0:	46c0      	nop			@ (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b00d      	add	sp, #52	@ 0x34
 80026c6:	bd90      	pop	{r4, r7, pc}
 80026c8:	40022000 	.word	0x40022000

080026cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	0059      	lsls	r1, r3, #1
 80026d4:	23a0      	movs	r3, #160	@ 0xa0
 80026d6:	05db      	lsls	r3, r3, #23
 80026d8:	2201      	movs	r2, #1
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 fc78 	bl	8002fd0 <HAL_GPIO_WritePin>
  while (1)
 80026e0:	46c0      	nop			@ (mov r8, r8)
 80026e2:	e7fd      	b.n	80026e0 <Error_Handler+0x14>

080026e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	4b12      	ldr	r3, [pc, #72]	@ (8002734 <HAL_MspInit+0x50>)
 80026ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ee:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HAL_MspInit+0x50>)
 80026f0:	2101      	movs	r1, #1
 80026f2:	430a      	orrs	r2, r1
 80026f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80026f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002734 <HAL_MspInit+0x50>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	2201      	movs	r2, #1
 80026fc:	4013      	ands	r3, r2
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <HAL_MspInit+0x50>)
 8002704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002706:	4b0b      	ldr	r3, [pc, #44]	@ (8002734 <HAL_MspInit+0x50>)
 8002708:	2180      	movs	r1, #128	@ 0x80
 800270a:	0549      	lsls	r1, r1, #21
 800270c:	430a      	orrs	r2, r1
 800270e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002710:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <HAL_MspInit+0x50>)
 8002712:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002714:	2380      	movs	r3, #128	@ 0x80
 8002716:	055b      	lsls	r3, r3, #21
 8002718:	4013      	ands	r3, r2
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 800271e:	2008      	movs	r0, #8
 8002720:	f000 fa28 	bl	8002b74 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8002724:	2010      	movs	r0, #16
 8002726:	f000 fa25 	bl	8002b74 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	40021000 	.word	0x40021000

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800273c:	46c0      	nop			@ (mov r8, r8)
 800273e:	e7fd      	b.n	800273c <NMI_Handler+0x4>

08002740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002744:	46c0      	nop			@ (mov r8, r8)
 8002746:	e7fd      	b.n	8002744 <HardFault_Handler+0x4>

08002748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800274c:	46c0      	nop			@ (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002760:	f000 f9c8 	bl	8002af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002764:	46c0      	nop			@ (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002774:	4a14      	ldr	r2, [pc, #80]	@ (80027c8 <_sbrk+0x5c>)
 8002776:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <_sbrk+0x60>)
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002780:	4b13      	ldr	r3, [pc, #76]	@ (80027d0 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002788:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <_sbrk+0x64>)
 800278a:	4a12      	ldr	r2, [pc, #72]	@ (80027d4 <_sbrk+0x68>)
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <_sbrk+0x64>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	18d3      	adds	r3, r2, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	429a      	cmp	r2, r3
 800279a:	d207      	bcs.n	80027ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800279c:	f002 fde8 	bl	8005370 <__errno>
 80027a0:	0003      	movs	r3, r0
 80027a2:	220c      	movs	r2, #12
 80027a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	425b      	negs	r3, r3
 80027aa:	e009      	b.n	80027c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027ac:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b2:	4b07      	ldr	r3, [pc, #28]	@ (80027d0 <_sbrk+0x64>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	18d2      	adds	r2, r2, r3
 80027ba:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <_sbrk+0x64>)
 80027bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b006      	add	sp, #24
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20001800 	.word	0x20001800
 80027cc:	00000400 	.word	0x00000400
 80027d0:	200000d0 	.word	0x200000d0
 80027d4:	20000300 	.word	0x20000300

080027d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027dc:	4b03      	ldr	r3, [pc, #12]	@ (80027ec <SystemInit+0x14>)
 80027de:	2280      	movs	r2, #128	@ 0x80
 80027e0:	0512      	lsls	r2, r2, #20
 80027e2:	609a      	str	r2, [r3, #8]
#endif
}
 80027e4:	46c0      	nop			@ (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			@ (mov r8, r8)
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80027f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <MX_TIM14_Init+0x40>)
 80027f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002834 <MX_TIM14_Init+0x44>)
 80027f8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 80027fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <MX_TIM14_Init+0x40>)
 80027fc:	2263      	movs	r2, #99	@ 0x63
 80027fe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <MX_TIM14_Init+0x40>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 119;
 8002806:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <MX_TIM14_Init+0x40>)
 8002808:	2277      	movs	r2, #119	@ 0x77
 800280a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280c:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <MX_TIM14_Init+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002812:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <MX_TIM14_Init+0x40>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <MX_TIM14_Init+0x40>)
 800281a:	0018      	movs	r0, r3
 800281c:	f001 feda 	bl	80045d4 <HAL_TIM_Base_Init>
 8002820:	1e03      	subs	r3, r0, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002824:	f7ff ff52 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002828:	46c0      	nop			@ (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	200000d4 	.word	0x200000d4
 8002834:	40002000 	.word	0x40002000

08002838 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0a      	ldr	r2, [pc, #40]	@ (8002870 <HAL_TIM_Base_MspInit+0x38>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10d      	bne.n	8002866 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800284a:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <HAL_TIM_Base_MspInit+0x3c>)
 800284c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <HAL_TIM_Base_MspInit+0x3c>)
 8002850:	2180      	movs	r1, #128	@ 0x80
 8002852:	0209      	lsls	r1, r1, #8
 8002854:	430a      	orrs	r2, r1
 8002856:	641a      	str	r2, [r3, #64]	@ 0x40
 8002858:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <HAL_TIM_Base_MspInit+0x3c>)
 800285a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	4013      	ands	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b004      	add	sp, #16
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	40002000 	.word	0x40002000
 8002874:	40021000 	.word	0x40021000

08002878 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800287c:	4b25      	ldr	r3, [pc, #148]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 800287e:	4a26      	ldr	r2, [pc, #152]	@ (8002918 <MX_USART1_UART_Init+0xa0>)
 8002880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002882:	4b24      	ldr	r3, [pc, #144]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 8002884:	22e1      	movs	r2, #225	@ 0xe1
 8002886:	0252      	lsls	r2, r2, #9
 8002888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800288a:	4b22      	ldr	r3, [pc, #136]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002890:	4b20      	ldr	r3, [pc, #128]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002896:	4b1f      	ldr	r3, [pc, #124]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800289c:	4b1d      	ldr	r3, [pc, #116]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 800289e:	220c      	movs	r2, #12
 80028a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ae:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028b4:	4b17      	ldr	r3, [pc, #92]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80028ba:	4b16      	ldr	r3, [pc, #88]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 80028bc:	2208      	movs	r2, #8
 80028be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80028c0:	4b14      	ldr	r3, [pc, #80]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 80028c2:	2280      	movs	r2, #128	@ 0x80
 80028c4:	0212      	lsls	r2, r2, #8
 80028c6:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028c8:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 80028ca:	0018      	movs	r0, r3
 80028cc:	f001 ff4c 	bl	8004768 <HAL_UART_Init>
 80028d0:	1e03      	subs	r3, r0, #0
 80028d2:	d001      	beq.n	80028d8 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80028d4:	f7ff fefa 	bl	80026cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 80028da:	2100      	movs	r1, #0
 80028dc:	0018      	movs	r0, r3
 80028de:	f002 fc29 	bl	8005134 <HAL_UARTEx_SetTxFifoThreshold>
 80028e2:	1e03      	subs	r3, r0, #0
 80028e4:	d001      	beq.n	80028ea <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 80028e6:	f7ff fef1 	bl	80026cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 80028ec:	2100      	movs	r1, #0
 80028ee:	0018      	movs	r0, r3
 80028f0:	f002 fc60 	bl	80051b4 <HAL_UARTEx_SetRxFifoThreshold>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d001      	beq.n	80028fc <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 80028f8:	f7ff fee8 	bl	80026cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <MX_USART1_UART_Init+0x9c>)
 80028fe:	0018      	movs	r0, r3
 8002900:	f002 fbde 	bl	80050c0 <HAL_UARTEx_DisableFifoMode>
 8002904:	1e03      	subs	r3, r0, #0
 8002906:	d001      	beq.n	800290c <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8002908:	f7ff fee0 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800290c:	46c0      	nop			@ (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	20000120 	.word	0x20000120
 8002918:	40013800 	.word	0x40013800

0800291c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b091      	sub	sp, #68	@ 0x44
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	232c      	movs	r3, #44	@ 0x2c
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	0018      	movs	r0, r3
 800292a:	2314      	movs	r3, #20
 800292c:	001a      	movs	r2, r3
 800292e:	2100      	movs	r1, #0
 8002930:	f002 fd16 	bl	8005360 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002934:	2410      	movs	r4, #16
 8002936:	193b      	adds	r3, r7, r4
 8002938:	0018      	movs	r0, r3
 800293a:	231c      	movs	r3, #28
 800293c:	001a      	movs	r2, r3
 800293e:	2100      	movs	r1, #0
 8002940:	f002 fd0e 	bl	8005360 <memset>
  if(uartHandle->Instance==USART1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a23      	ldr	r2, [pc, #140]	@ (80029d8 <HAL_UART_MspInit+0xbc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d13f      	bne.n	80029ce <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800294e:	193b      	adds	r3, r7, r4
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002954:	193b      	adds	r3, r7, r4
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800295a:	193b      	adds	r3, r7, r4
 800295c:	0018      	movs	r0, r3
 800295e:	f001 fd4d 	bl	80043fc <HAL_RCCEx_PeriphCLKConfig>
 8002962:	1e03      	subs	r3, r0, #0
 8002964:	d001      	beq.n	800296a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002966:	f7ff feb1 	bl	80026cc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800296a:	4b1c      	ldr	r3, [pc, #112]	@ (80029dc <HAL_UART_MspInit+0xc0>)
 800296c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800296e:	4b1b      	ldr	r3, [pc, #108]	@ (80029dc <HAL_UART_MspInit+0xc0>)
 8002970:	2180      	movs	r1, #128	@ 0x80
 8002972:	01c9      	lsls	r1, r1, #7
 8002974:	430a      	orrs	r2, r1
 8002976:	641a      	str	r2, [r3, #64]	@ 0x40
 8002978:	4b18      	ldr	r3, [pc, #96]	@ (80029dc <HAL_UART_MspInit+0xc0>)
 800297a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800297c:	2380      	movs	r3, #128	@ 0x80
 800297e:	01db      	lsls	r3, r3, #7
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_UART_MspInit+0xc0>)
 8002988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800298a:	4b14      	ldr	r3, [pc, #80]	@ (80029dc <HAL_UART_MspInit+0xc0>)
 800298c:	2101      	movs	r1, #1
 800298e:	430a      	orrs	r2, r1
 8002990:	635a      	str	r2, [r3, #52]	@ 0x34
 8002992:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <HAL_UART_MspInit+0xc0>)
 8002994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002996:	2201      	movs	r2, #1
 8002998:	4013      	ands	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800299e:	212c      	movs	r1, #44	@ 0x2c
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	22c0      	movs	r2, #192	@ 0xc0
 80029a4:	00d2      	lsls	r2, r2, #3
 80029a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	2202      	movs	r2, #2
 80029ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	2201      	movs	r2, #1
 80029be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	187a      	adds	r2, r7, r1
 80029c2:	23a0      	movs	r3, #160	@ 0xa0
 80029c4:	05db      	lsls	r3, r3, #23
 80029c6:	0011      	movs	r1, r2
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 f997 	bl	8002cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b011      	add	sp, #68	@ 0x44
 80029d4:	bd90      	pop	{r4, r7, pc}
 80029d6:	46c0      	nop			@ (mov r8, r8)
 80029d8:	40013800 	.word	0x40013800
 80029dc:	40021000 	.word	0x40021000

080029e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029e0:	480d      	ldr	r0, [pc, #52]	@ (8002a18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029e4:	f7ff fef8 	bl	80027d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029ea:	e003      	b.n	80029f4 <LoopCopyDataInit>

080029ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80029ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029f2:	3104      	adds	r1, #4

080029f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029f4:	480a      	ldr	r0, [pc, #40]	@ (8002a20 <LoopForever+0xa>)
  ldr r3, =_edata
 80029f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <LoopForever+0xe>)
  adds r2, r0, r1
 80029f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029fc:	d3f6      	bcc.n	80029ec <CopyDataInit>
  ldr r2, =_sbss
 80029fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <LoopForever+0x12>)
  b LoopFillZerobss
 8002a00:	e002      	b.n	8002a08 <LoopFillZerobss>

08002a02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  str  r3, [r2]
 8002a04:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a06:	3204      	adds	r2, #4

08002a08 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002a08:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <LoopForever+0x16>)
  cmp r2, r3
 8002a0a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a0c:	d3f9      	bcc.n	8002a02 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002a0e:	f002 fcb5 	bl	800537c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a12:	f7ff fd8f 	bl	8002534 <main>

08002a16 <LoopForever>:

LoopForever:
    b LoopForever
 8002a16:	e7fe      	b.n	8002a16 <LoopForever>
  ldr   r0, =_estack
 8002a18:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8002a1c:	08005d8c 	.word	0x08005d8c
  ldr r0, =_sdata
 8002a20:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a24:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8002a28:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8002a2c:	20000300 	.word	0x20000300

08002a30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <ADC1_IRQHandler>

08002a32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a38:	1dfb      	adds	r3, r7, #7
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a3e:	2003      	movs	r0, #3
 8002a40:	f000 f80e 	bl	8002a60 <HAL_InitTick>
 8002a44:	1e03      	subs	r3, r0, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002a48:	1dfb      	adds	r3, r7, #7
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e001      	b.n	8002a54 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a50:	f7ff fe48 	bl	80026e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a54:	1dfb      	adds	r3, r7, #7
 8002a56:	781b      	ldrb	r3, [r3, #0]
}
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a68:	230f      	movs	r3, #15
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8002a70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae8 <HAL_InitTick+0x88>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d02b      	beq.n	8002ad0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002a78:	4b1c      	ldr	r3, [pc, #112]	@ (8002aec <HAL_InitTick+0x8c>)
 8002a7a:	681c      	ldr	r4, [r3, #0]
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae8 <HAL_InitTick+0x88>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	0019      	movs	r1, r3
 8002a82:	23fa      	movs	r3, #250	@ 0xfa
 8002a84:	0098      	lsls	r0, r3, #2
 8002a86:	f7fd fb51 	bl	800012c <__udivsi3>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	0020      	movs	r0, r4
 8002a90:	f7fd fb4c 	bl	800012c <__udivsi3>
 8002a94:	0003      	movs	r3, r0
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 f923 	bl	8002ce2 <HAL_SYSTICK_Config>
 8002a9c:	1e03      	subs	r3, r0, #0
 8002a9e:	d112      	bne.n	8002ac6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d80a      	bhi.n	8002abc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	425b      	negs	r3, r3
 8002aac:	2200      	movs	r2, #0
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 f902 	bl	8002cb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <HAL_InitTick+0x90>)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e00d      	b.n	8002ad8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002abc:	230f      	movs	r3, #15
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e008      	b.n	8002ad8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ac6:	230f      	movs	r3, #15
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e003      	b.n	8002ad8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ad0:	230f      	movs	r3, #15
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002ad8:	230f      	movs	r3, #15
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	781b      	ldrb	r3, [r3, #0]
}
 8002ade:	0018      	movs	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b005      	add	sp, #20
 8002ae4:	bd90      	pop	{r4, r7, pc}
 8002ae6:	46c0      	nop			@ (mov r8, r8)
 8002ae8:	20000008 	.word	0x20000008
 8002aec:	20000000 	.word	0x20000000
 8002af0:	20000004 	.word	0x20000004

08002af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002af8:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <HAL_IncTick+0x1c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	001a      	movs	r2, r3
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_IncTick+0x20>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	18d2      	adds	r2, r2, r3
 8002b04:	4b03      	ldr	r3, [pc, #12]	@ (8002b14 <HAL_IncTick+0x20>)
 8002b06:	601a      	str	r2, [r3, #0]
}
 8002b08:	46c0      	nop			@ (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	20000008 	.word	0x20000008
 8002b14:	200001b4 	.word	0x200001b4

08002b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b1c:	4b02      	ldr	r3, [pc, #8]	@ (8002b28 <HAL_GetTick+0x10>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	200001b4 	.word	0x200001b4

08002b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff fff0 	bl	8002b18 <HAL_GetTick>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3301      	adds	r3, #1
 8002b44:	d005      	beq.n	8002b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b46:	4b0a      	ldr	r3, [pc, #40]	@ (8002b70 <HAL_Delay+0x44>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	189b      	adds	r3, r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	f7ff ffe0 	bl	8002b18 <HAL_GetTick>
 8002b58:	0002      	movs	r2, r0
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d8f7      	bhi.n	8002b54 <HAL_Delay+0x28>
  {
  }
}
 8002b64:	46c0      	nop			@ (mov r8, r8)
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b004      	add	sp, #16
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	20000008 	.word	0x20000008

08002b74 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8002b7c:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <HAL_SYSCFG_EnableRemap+0x1c>)
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	4b03      	ldr	r3, [pc, #12]	@ (8002b90 <HAL_SYSCFG_EnableRemap+0x1c>)
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]
}
 8002b88:	46c0      	nop			@ (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40010000 	.word	0x40010000

08002b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	1dfb      	adds	r3, r7, #7
 8002ba0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ba2:	1dfb      	adds	r3, r7, #7
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ba8:	d828      	bhi.n	8002bfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002baa:	4a2f      	ldr	r2, [pc, #188]	@ (8002c68 <__NVIC_SetPriority+0xd4>)
 8002bac:	1dfb      	adds	r3, r7, #7
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	33c0      	adds	r3, #192	@ 0xc0
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	589b      	ldr	r3, [r3, r2]
 8002bba:	1dfa      	adds	r2, r7, #7
 8002bbc:	7812      	ldrb	r2, [r2, #0]
 8002bbe:	0011      	movs	r1, r2
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	400a      	ands	r2, r1
 8002bc4:	00d2      	lsls	r2, r2, #3
 8002bc6:	21ff      	movs	r1, #255	@ 0xff
 8002bc8:	4091      	lsls	r1, r2
 8002bca:	000a      	movs	r2, r1
 8002bcc:	43d2      	mvns	r2, r2
 8002bce:	401a      	ands	r2, r3
 8002bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	019b      	lsls	r3, r3, #6
 8002bd6:	22ff      	movs	r2, #255	@ 0xff
 8002bd8:	401a      	ands	r2, r3
 8002bda:	1dfb      	adds	r3, r7, #7
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	0018      	movs	r0, r3
 8002be0:	2303      	movs	r3, #3
 8002be2:	4003      	ands	r3, r0
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002be8:	481f      	ldr	r0, [pc, #124]	@ (8002c68 <__NVIC_SetPriority+0xd4>)
 8002bea:	1dfb      	adds	r3, r7, #7
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	b25b      	sxtb	r3, r3
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	33c0      	adds	r3, #192	@ 0xc0
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002bfa:	e031      	b.n	8002c60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c6c <__NVIC_SetPriority+0xd8>)
 8002bfe:	1dfb      	adds	r3, r7, #7
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	0019      	movs	r1, r3
 8002c04:	230f      	movs	r3, #15
 8002c06:	400b      	ands	r3, r1
 8002c08:	3b08      	subs	r3, #8
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	3306      	adds	r3, #6
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	18d3      	adds	r3, r2, r3
 8002c12:	3304      	adds	r3, #4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	1dfa      	adds	r2, r7, #7
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	0011      	movs	r1, r2
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	400a      	ands	r2, r1
 8002c20:	00d2      	lsls	r2, r2, #3
 8002c22:	21ff      	movs	r1, #255	@ 0xff
 8002c24:	4091      	lsls	r1, r2
 8002c26:	000a      	movs	r2, r1
 8002c28:	43d2      	mvns	r2, r2
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	019b      	lsls	r3, r3, #6
 8002c32:	22ff      	movs	r2, #255	@ 0xff
 8002c34:	401a      	ands	r2, r3
 8002c36:	1dfb      	adds	r3, r7, #7
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	4003      	ands	r3, r0
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c44:	4809      	ldr	r0, [pc, #36]	@ (8002c6c <__NVIC_SetPriority+0xd8>)
 8002c46:	1dfb      	adds	r3, r7, #7
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	001c      	movs	r4, r3
 8002c4c:	230f      	movs	r3, #15
 8002c4e:	4023      	ands	r3, r4
 8002c50:	3b08      	subs	r3, #8
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	430a      	orrs	r2, r1
 8002c56:	3306      	adds	r3, #6
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	18c3      	adds	r3, r0, r3
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	601a      	str	r2, [r3, #0]
}
 8002c60:	46c0      	nop			@ (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b003      	add	sp, #12
 8002c66:	bd90      	pop	{r4, r7, pc}
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	1e5a      	subs	r2, r3, #1
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	045b      	lsls	r3, r3, #17
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d301      	bcc.n	8002c88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c84:	2301      	movs	r3, #1
 8002c86:	e010      	b.n	8002caa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c88:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <SysTick_Config+0x44>)
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	3a01      	subs	r2, #1
 8002c8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c90:	2301      	movs	r3, #1
 8002c92:	425b      	negs	r3, r3
 8002c94:	2103      	movs	r1, #3
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7ff ff7c 	bl	8002b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c9c:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <SysTick_Config+0x44>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ca2:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <SysTick_Config+0x44>)
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b002      	add	sp, #8
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	e000e010 	.word	0xe000e010

08002cb8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	210f      	movs	r1, #15
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	1c02      	adds	r2, r0, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	b25b      	sxtb	r3, r3
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7ff ff5d 	bl	8002b94 <__NVIC_SetPriority>
}
 8002cda:	46c0      	nop			@ (mov r8, r8)
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b004      	add	sp, #16
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	0018      	movs	r0, r3
 8002cee:	f7ff ffbf 	bl	8002c70 <SysTick_Config>
 8002cf2:	0003      	movs	r3, r0
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002d0a:	e14d      	b.n	8002fa8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2101      	movs	r1, #1
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4091      	lsls	r1, r2
 8002d16:	000a      	movs	r2, r1
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d100      	bne.n	8002d24 <HAL_GPIO_Init+0x28>
 8002d22:	e13e      	b.n	8002fa2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x38>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b12      	cmp	r3, #18
 8002d32:	d125      	bne.n	8002d80 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	08da      	lsrs	r2, r3, #3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3208      	adds	r2, #8
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	58d3      	ldr	r3, [r2, r3]
 8002d40:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2207      	movs	r2, #7
 8002d46:	4013      	ands	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	0013      	movs	r3, r2
 8002d50:	43da      	mvns	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	4013      	ands	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	401a      	ands	r2, r3
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2107      	movs	r1, #7
 8002d64:	400b      	ands	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	0013      	movs	r3, r2
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	08da      	lsrs	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3208      	adds	r2, #8
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	6979      	ldr	r1, [r7, #20]
 8002d7e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	0013      	movs	r3, r2
 8002d90:	43da      	mvns	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	4013      	ands	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	401a      	ands	r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	409a      	lsls	r2, r3
 8002da6:	0013      	movs	r3, r2
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d00b      	beq.n	8002dd4 <HAL_GPIO_Init+0xd8>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d007      	beq.n	8002dd4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dc8:	2b11      	cmp	r3, #17
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b12      	cmp	r3, #18
 8002dd2:	d130      	bne.n	8002e36 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	409a      	lsls	r2, r3
 8002de2:	0013      	movs	r3, r2
 8002de4:	43da      	mvns	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	4013      	ands	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	409a      	lsls	r2, r3
 8002df6:	0013      	movs	r3, r2
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	0013      	movs	r3, r2
 8002e12:	43da      	mvns	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	4013      	ands	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	2201      	movs	r2, #1
 8002e22:	401a      	ands	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	409a      	lsls	r2, r3
 8002e28:	0013      	movs	r3, r2
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d017      	beq.n	8002e6e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	2203      	movs	r2, #3
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	4013      	ands	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	0013      	movs	r3, r2
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	2380      	movs	r3, #128	@ 0x80
 8002e74:	055b      	lsls	r3, r3, #21
 8002e76:	4013      	ands	r3, r2
 8002e78:	d100      	bne.n	8002e7c <HAL_GPIO_Init+0x180>
 8002e7a:	e092      	b.n	8002fa2 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002e7c:	4a50      	ldr	r2, [pc, #320]	@ (8002fc0 <HAL_GPIO_Init+0x2c4>)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3318      	adds	r3, #24
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	589b      	ldr	r3, [r3, r2]
 8002e88:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	4013      	ands	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	220f      	movs	r2, #15
 8002e94:	409a      	lsls	r2, r3
 8002e96:	0013      	movs	r3, r2
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	23a0      	movs	r3, #160	@ 0xa0
 8002ea4:	05db      	lsls	r3, r3, #23
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d013      	beq.n	8002ed2 <HAL_GPIO_Init+0x1d6>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a45      	ldr	r2, [pc, #276]	@ (8002fc4 <HAL_GPIO_Init+0x2c8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00d      	beq.n	8002ece <HAL_GPIO_Init+0x1d2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a44      	ldr	r2, [pc, #272]	@ (8002fc8 <HAL_GPIO_Init+0x2cc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <HAL_GPIO_Init+0x1ce>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a43      	ldr	r2, [pc, #268]	@ (8002fcc <HAL_GPIO_Init+0x2d0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_GPIO_Init+0x1ca>
 8002ec2:	2305      	movs	r3, #5
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x1d8>
 8002ec6:	2306      	movs	r3, #6
 8002ec8:	e004      	b.n	8002ed4 <HAL_GPIO_Init+0x1d8>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e002      	b.n	8002ed4 <HAL_GPIO_Init+0x1d8>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_GPIO_Init+0x1d8>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	2103      	movs	r1, #3
 8002ed8:	400a      	ands	r2, r1
 8002eda:	00d2      	lsls	r2, r2, #3
 8002edc:	4093      	lsls	r3, r2
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002ee4:	4936      	ldr	r1, [pc, #216]	@ (8002fc0 <HAL_GPIO_Init+0x2c4>)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	3318      	adds	r3, #24
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002ef2:	4a33      	ldr	r2, [pc, #204]	@ (8002fc0 <HAL_GPIO_Init+0x2c4>)
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	58d3      	ldr	r3, [r2, r3]
 8002ef8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	43da      	mvns	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	4013      	ands	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	2380      	movs	r3, #128	@ 0x80
 8002f0a:	025b      	lsls	r3, r3, #9
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002f18:	4929      	ldr	r1, [pc, #164]	@ (8002fc0 <HAL_GPIO_Init+0x2c4>)
 8002f1a:	2280      	movs	r2, #128	@ 0x80
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002f20:	4a27      	ldr	r2, [pc, #156]	@ (8002fc0 <HAL_GPIO_Init+0x2c4>)
 8002f22:	2384      	movs	r3, #132	@ 0x84
 8002f24:	58d3      	ldr	r3, [r2, r3]
 8002f26:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	2380      	movs	r3, #128	@ 0x80
 8002f38:	029b      	lsls	r3, r3, #10
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002f46:	491e      	ldr	r1, [pc, #120]	@ (8002fc0 <HAL_GPIO_Init+0x2c4>)
 8002f48:	2284      	movs	r2, #132	@ 0x84
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc0 <HAL_GPIO_Init+0x2c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	2380      	movs	r3, #128	@ 0x80
 8002f64:	035b      	lsls	r3, r3, #13
 8002f66:	4013      	ands	r3, r2
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002f72:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <HAL_GPIO_Init+0x2c4>)
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002f78:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <HAL_GPIO_Init+0x2c4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	4013      	ands	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	2380      	movs	r3, #128	@ 0x80
 8002f8e:	039b      	lsls	r3, r3, #14
 8002f90:	4013      	ands	r3, r2
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002f9c:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <HAL_GPIO_Init+0x2c4>)
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	40da      	lsrs	r2, r3
 8002fb0:	1e13      	subs	r3, r2, #0
 8002fb2:	d000      	beq.n	8002fb6 <HAL_GPIO_Init+0x2ba>
 8002fb4:	e6aa      	b.n	8002d0c <HAL_GPIO_Init+0x10>
  }
}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
 8002fb8:	46c0      	nop			@ (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b006      	add	sp, #24
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021800 	.word	0x40021800
 8002fc4:	50000400 	.word	0x50000400
 8002fc8:	50000800 	.word	0x50000800
 8002fcc:	50001400 	.word	0x50001400

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	0008      	movs	r0, r1
 8002fda:	0011      	movs	r1, r2
 8002fdc:	1cbb      	adds	r3, r7, #2
 8002fde:	1c02      	adds	r2, r0, #0
 8002fe0:	801a      	strh	r2, [r3, #0]
 8002fe2:	1c7b      	adds	r3, r7, #1
 8002fe4:	1c0a      	adds	r2, r1, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe8:	1c7b      	adds	r3, r7, #1
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ff0:	1cbb      	adds	r3, r7, #2
 8002ff2:	881a      	ldrh	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ff8:	e003      	b.n	8003002 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ffa:	1cbb      	adds	r3, r7, #2
 8002ffc:	881a      	ldrh	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	46bd      	mov	sp, r7
 8003006:	b002      	add	sp, #8
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e08f      	b.n	800313e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2241      	movs	r2, #65	@ 0x41
 8003022:	5c9b      	ldrb	r3, [r3, r2]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d107      	bne.n	800303a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2240      	movs	r2, #64	@ 0x40
 800302e:	2100      	movs	r1, #0
 8003030:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff f995 	bl	8002364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2241      	movs	r2, #65	@ 0x41
 800303e:	2124      	movs	r1, #36	@ 0x24
 8003040:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2101      	movs	r1, #1
 800304e:	438a      	bics	r2, r1
 8003050:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	493b      	ldr	r1, [pc, #236]	@ (8003148 <HAL_I2C_Init+0x13c>)
 800305c:	400a      	ands	r2, r1
 800305e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4938      	ldr	r1, [pc, #224]	@ (800314c <HAL_I2C_Init+0x140>)
 800306c:	400a      	ands	r2, r1
 800306e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d108      	bne.n	800308a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2180      	movs	r1, #128	@ 0x80
 8003082:	0209      	lsls	r1, r1, #8
 8003084:	430a      	orrs	r2, r1
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	e007      	b.n	800309a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2184      	movs	r1, #132	@ 0x84
 8003094:	0209      	lsls	r1, r1, #8
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d109      	bne.n	80030b6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2180      	movs	r1, #128	@ 0x80
 80030ae:	0109      	lsls	r1, r1, #4
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	e007      	b.n	80030c6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4923      	ldr	r1, [pc, #140]	@ (8003150 <HAL_I2C_Init+0x144>)
 80030c2:	400a      	ands	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4920      	ldr	r1, [pc, #128]	@ (8003154 <HAL_I2C_Init+0x148>)
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	491a      	ldr	r1, [pc, #104]	@ (800314c <HAL_I2C_Init+0x140>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69d9      	ldr	r1, [r3, #28]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2101      	movs	r1, #1
 800311c:	430a      	orrs	r2, r1
 800311e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2241      	movs	r2, #65	@ 0x41
 800312a:	2120      	movs	r1, #32
 800312c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2242      	movs	r2, #66	@ 0x42
 8003138:	2100      	movs	r1, #0
 800313a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	0018      	movs	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	b002      	add	sp, #8
 8003144:	bd80      	pop	{r7, pc}
 8003146:	46c0      	nop			@ (mov r8, r8)
 8003148:	f0ffffff 	.word	0xf0ffffff
 800314c:	ffff7fff 	.word	0xffff7fff
 8003150:	fffff7ff 	.word	0xfffff7ff
 8003154:	02008000 	.word	0x02008000

08003158 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b089      	sub	sp, #36	@ 0x24
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	000c      	movs	r4, r1
 8003162:	0010      	movs	r0, r2
 8003164:	0019      	movs	r1, r3
 8003166:	230a      	movs	r3, #10
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	1c22      	adds	r2, r4, #0
 800316c:	801a      	strh	r2, [r3, #0]
 800316e:	2308      	movs	r3, #8
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	1c02      	adds	r2, r0, #0
 8003174:	801a      	strh	r2, [r3, #0]
 8003176:	1dbb      	adds	r3, r7, #6
 8003178:	1c0a      	adds	r2, r1, #0
 800317a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2241      	movs	r2, #65	@ 0x41
 8003180:	5c9b      	ldrb	r3, [r3, r2]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b20      	cmp	r3, #32
 8003186:	d000      	beq.n	800318a <HAL_I2C_Mem_Write+0x32>
 8003188:	e10c      	b.n	80033a4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800318a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <HAL_I2C_Mem_Write+0x42>
 8003190:	232c      	movs	r3, #44	@ 0x2c
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d105      	bne.n	80031a6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2280      	movs	r2, #128	@ 0x80
 800319e:	0092      	lsls	r2, r2, #2
 80031a0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0ff      	b.n	80033a6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2240      	movs	r2, #64	@ 0x40
 80031aa:	5c9b      	ldrb	r3, [r3, r2]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_I2C_Mem_Write+0x5c>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e0f8      	b.n	80033a6 <HAL_I2C_Mem_Write+0x24e>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2240      	movs	r2, #64	@ 0x40
 80031b8:	2101      	movs	r1, #1
 80031ba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031bc:	f7ff fcac 	bl	8002b18 <HAL_GetTick>
 80031c0:	0003      	movs	r3, r0
 80031c2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031c4:	2380      	movs	r3, #128	@ 0x80
 80031c6:	0219      	lsls	r1, r3, #8
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2319      	movs	r3, #25
 80031d0:	2201      	movs	r2, #1
 80031d2:	f000 fb0b 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0e3      	b.n	80033a6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2241      	movs	r2, #65	@ 0x41
 80031e2:	2121      	movs	r1, #33	@ 0x21
 80031e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2242      	movs	r2, #66	@ 0x42
 80031ea:	2140      	movs	r1, #64	@ 0x40
 80031ec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	222c      	movs	r2, #44	@ 0x2c
 80031fe:	18ba      	adds	r2, r7, r2
 8003200:	8812      	ldrh	r2, [r2, #0]
 8003202:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800320a:	1dbb      	adds	r3, r7, #6
 800320c:	881c      	ldrh	r4, [r3, #0]
 800320e:	2308      	movs	r3, #8
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	230a      	movs	r3, #10
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	8819      	ldrh	r1, [r3, #0]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	0023      	movs	r3, r4
 8003226:	f000 f9f9 	bl	800361c <I2C_RequestMemoryWrite>
 800322a:	1e03      	subs	r3, r0, #0
 800322c:	d005      	beq.n	800323a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2240      	movs	r2, #64	@ 0x40
 8003232:	2100      	movs	r1, #0
 8003234:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0b5      	b.n	80033a6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	2bff      	cmp	r3, #255	@ 0xff
 8003242:	d911      	bls.n	8003268 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	22ff      	movs	r2, #255	@ 0xff
 8003248:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324e:	b2da      	uxtb	r2, r3
 8003250:	2380      	movs	r3, #128	@ 0x80
 8003252:	045c      	lsls	r4, r3, #17
 8003254:	230a      	movs	r3, #10
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	8819      	ldrh	r1, [r3, #0]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	2300      	movs	r3, #0
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	0023      	movs	r3, r4
 8003262:	f000 fc9d 	bl	8003ba0 <I2C_TransferConfig>
 8003266:	e012      	b.n	800328e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003276:	b2da      	uxtb	r2, r3
 8003278:	2380      	movs	r3, #128	@ 0x80
 800327a:	049c      	lsls	r4, r3, #18
 800327c:	230a      	movs	r3, #10
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	8819      	ldrh	r1, [r3, #0]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	2300      	movs	r3, #0
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	0023      	movs	r3, r4
 800328a:	f000 fc89 	bl	8003ba0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	0018      	movs	r0, r3
 8003296:	f000 fb01 	bl	800389c <I2C_WaitOnTXISFlagUntilTimeout>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e081      	b.n	80033a6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d03a      	beq.n	8003352 <HAL_I2C_Mem_Write+0x1fa>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d136      	bne.n	8003352 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	0013      	movs	r3, r2
 80032ee:	2200      	movs	r2, #0
 80032f0:	2180      	movs	r1, #128	@ 0x80
 80032f2:	f000 fa7b 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 80032f6:	1e03      	subs	r3, r0, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e053      	b.n	80033a6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	2bff      	cmp	r3, #255	@ 0xff
 8003306:	d911      	bls.n	800332c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	22ff      	movs	r2, #255	@ 0xff
 800330c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003312:	b2da      	uxtb	r2, r3
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	045c      	lsls	r4, r3, #17
 8003318:	230a      	movs	r3, #10
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	8819      	ldrh	r1, [r3, #0]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	2300      	movs	r3, #0
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	0023      	movs	r3, r4
 8003326:	f000 fc3b 	bl	8003ba0 <I2C_TransferConfig>
 800332a:	e012      	b.n	8003352 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333a:	b2da      	uxtb	r2, r3
 800333c:	2380      	movs	r3, #128	@ 0x80
 800333e:	049c      	lsls	r4, r3, #18
 8003340:	230a      	movs	r3, #10
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	8819      	ldrh	r1, [r3, #0]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	2300      	movs	r3, #0
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	0023      	movs	r3, r4
 800334e:	f000 fc27 	bl	8003ba0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d198      	bne.n	800328e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	0018      	movs	r0, r3
 8003364:	f000 fae0 	bl	8003928 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003368:	1e03      	subs	r3, r0, #0
 800336a:	d001      	beq.n	8003370 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e01a      	b.n	80033a6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2220      	movs	r2, #32
 8003376:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	490b      	ldr	r1, [pc, #44]	@ (80033b0 <HAL_I2C_Mem_Write+0x258>)
 8003384:	400a      	ands	r2, r1
 8003386:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2241      	movs	r2, #65	@ 0x41
 800338c:	2120      	movs	r1, #32
 800338e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2242      	movs	r2, #66	@ 0x42
 8003394:	2100      	movs	r1, #0
 8003396:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2240      	movs	r2, #64	@ 0x40
 800339c:	2100      	movs	r1, #0
 800339e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e000      	b.n	80033a6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
  }
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b007      	add	sp, #28
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	fe00e800 	.word	0xfe00e800

080033b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b089      	sub	sp, #36	@ 0x24
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	000c      	movs	r4, r1
 80033be:	0010      	movs	r0, r2
 80033c0:	0019      	movs	r1, r3
 80033c2:	230a      	movs	r3, #10
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	1c22      	adds	r2, r4, #0
 80033c8:	801a      	strh	r2, [r3, #0]
 80033ca:	2308      	movs	r3, #8
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	1c02      	adds	r2, r0, #0
 80033d0:	801a      	strh	r2, [r3, #0]
 80033d2:	1dbb      	adds	r3, r7, #6
 80033d4:	1c0a      	adds	r2, r1, #0
 80033d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2241      	movs	r2, #65	@ 0x41
 80033dc:	5c9b      	ldrb	r3, [r3, r2]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d000      	beq.n	80033e6 <HAL_I2C_Mem_Read+0x32>
 80033e4:	e110      	b.n	8003608 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <HAL_I2C_Mem_Read+0x42>
 80033ec:	232c      	movs	r3, #44	@ 0x2c
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d105      	bne.n	8003402 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2280      	movs	r2, #128	@ 0x80
 80033fa:	0092      	lsls	r2, r2, #2
 80033fc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e103      	b.n	800360a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2240      	movs	r2, #64	@ 0x40
 8003406:	5c9b      	ldrb	r3, [r3, r2]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_I2C_Mem_Read+0x5c>
 800340c:	2302      	movs	r3, #2
 800340e:	e0fc      	b.n	800360a <HAL_I2C_Mem_Read+0x256>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2240      	movs	r2, #64	@ 0x40
 8003414:	2101      	movs	r1, #1
 8003416:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003418:	f7ff fb7e 	bl	8002b18 <HAL_GetTick>
 800341c:	0003      	movs	r3, r0
 800341e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003420:	2380      	movs	r3, #128	@ 0x80
 8003422:	0219      	lsls	r1, r3, #8
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	2319      	movs	r3, #25
 800342c:	2201      	movs	r2, #1
 800342e:	f000 f9dd 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 8003432:	1e03      	subs	r3, r0, #0
 8003434:	d001      	beq.n	800343a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e0e7      	b.n	800360a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2241      	movs	r2, #65	@ 0x41
 800343e:	2122      	movs	r1, #34	@ 0x22
 8003440:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2242      	movs	r2, #66	@ 0x42
 8003446:	2140      	movs	r1, #64	@ 0x40
 8003448:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003454:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	222c      	movs	r2, #44	@ 0x2c
 800345a:	18ba      	adds	r2, r7, r2
 800345c:	8812      	ldrh	r2, [r2, #0]
 800345e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003466:	1dbb      	adds	r3, r7, #6
 8003468:	881c      	ldrh	r4, [r3, #0]
 800346a:	2308      	movs	r3, #8
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	881a      	ldrh	r2, [r3, #0]
 8003470:	230a      	movs	r3, #10
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	8819      	ldrh	r1, [r3, #0]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	0023      	movs	r3, r4
 8003482:	f000 f92f 	bl	80036e4 <I2C_RequestMemoryRead>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d005      	beq.n	8003496 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2240      	movs	r2, #64	@ 0x40
 800348e:	2100      	movs	r1, #0
 8003490:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0b9      	b.n	800360a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	2bff      	cmp	r3, #255	@ 0xff
 800349e:	d911      	bls.n	80034c4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	22ff      	movs	r2, #255	@ 0xff
 80034a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	2380      	movs	r3, #128	@ 0x80
 80034ae:	045c      	lsls	r4, r3, #17
 80034b0:	230a      	movs	r3, #10
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	8819      	ldrh	r1, [r3, #0]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	4b56      	ldr	r3, [pc, #344]	@ (8003614 <HAL_I2C_Mem_Read+0x260>)
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	0023      	movs	r3, r4
 80034be:	f000 fb6f 	bl	8003ba0 <I2C_TransferConfig>
 80034c2:	e012      	b.n	80034ea <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	2380      	movs	r3, #128	@ 0x80
 80034d6:	049c      	lsls	r4, r3, #18
 80034d8:	230a      	movs	r3, #10
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	8819      	ldrh	r1, [r3, #0]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003614 <HAL_I2C_Mem_Read+0x260>)
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	0023      	movs	r3, r4
 80034e6:	f000 fb5b 	bl	8003ba0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	0013      	movs	r3, r2
 80034f4:	2200      	movs	r2, #0
 80034f6:	2104      	movs	r1, #4
 80034f8:	f000 f978 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 80034fc:	1e03      	subs	r3, r0, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e082      	b.n	800360a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d03a      	beq.n	80035b6 <HAL_I2C_Mem_Read+0x202>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	d136      	bne.n	80035b6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	0013      	movs	r3, r2
 8003552:	2200      	movs	r2, #0
 8003554:	2180      	movs	r1, #128	@ 0x80
 8003556:	f000 f949 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 800355a:	1e03      	subs	r3, r0, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e053      	b.n	800360a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	2bff      	cmp	r3, #255	@ 0xff
 800356a:	d911      	bls.n	8003590 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	22ff      	movs	r2, #255	@ 0xff
 8003570:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003576:	b2da      	uxtb	r2, r3
 8003578:	2380      	movs	r3, #128	@ 0x80
 800357a:	045c      	lsls	r4, r3, #17
 800357c:	230a      	movs	r3, #10
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	8819      	ldrh	r1, [r3, #0]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	2300      	movs	r3, #0
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	0023      	movs	r3, r4
 800358a:	f000 fb09 	bl	8003ba0 <I2C_TransferConfig>
 800358e:	e012      	b.n	80035b6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	049c      	lsls	r4, r3, #18
 80035a4:	230a      	movs	r3, #10
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	8819      	ldrh	r1, [r3, #0]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	2300      	movs	r3, #0
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	0023      	movs	r3, r4
 80035b2:	f000 faf5 	bl	8003ba0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d194      	bne.n	80034ea <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 f9ae 	bl	8003928 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035cc:	1e03      	subs	r3, r0, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e01a      	b.n	800360a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2220      	movs	r2, #32
 80035da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	490c      	ldr	r1, [pc, #48]	@ (8003618 <HAL_I2C_Mem_Read+0x264>)
 80035e8:	400a      	ands	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2241      	movs	r2, #65	@ 0x41
 80035f0:	2120      	movs	r1, #32
 80035f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2242      	movs	r2, #66	@ 0x42
 80035f8:	2100      	movs	r1, #0
 80035fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2240      	movs	r2, #64	@ 0x40
 8003600:	2100      	movs	r1, #0
 8003602:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	b007      	add	sp, #28
 8003610:	bd90      	pop	{r4, r7, pc}
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	80002400 	.word	0x80002400
 8003618:	fe00e800 	.word	0xfe00e800

0800361c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800361c:	b5b0      	push	{r4, r5, r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	000c      	movs	r4, r1
 8003626:	0010      	movs	r0, r2
 8003628:	0019      	movs	r1, r3
 800362a:	250a      	movs	r5, #10
 800362c:	197b      	adds	r3, r7, r5
 800362e:	1c22      	adds	r2, r4, #0
 8003630:	801a      	strh	r2, [r3, #0]
 8003632:	2308      	movs	r3, #8
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	1c02      	adds	r2, r0, #0
 8003638:	801a      	strh	r2, [r3, #0]
 800363a:	1dbb      	adds	r3, r7, #6
 800363c:	1c0a      	adds	r2, r1, #0
 800363e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003640:	1dbb      	adds	r3, r7, #6
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	2380      	movs	r3, #128	@ 0x80
 8003648:	045c      	lsls	r4, r3, #17
 800364a:	197b      	adds	r3, r7, r5
 800364c:	8819      	ldrh	r1, [r3, #0]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	4b23      	ldr	r3, [pc, #140]	@ (80036e0 <I2C_RequestMemoryWrite+0xc4>)
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	0023      	movs	r3, r4
 8003656:	f000 faa3 	bl	8003ba0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365c:	6a39      	ldr	r1, [r7, #32]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	0018      	movs	r0, r3
 8003662:	f000 f91b 	bl	800389c <I2C_WaitOnTXISFlagUntilTimeout>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d001      	beq.n	800366e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e033      	b.n	80036d6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800366e:	1dbb      	adds	r3, r7, #6
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d107      	bne.n	8003686 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003676:	2308      	movs	r3, #8
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	629a      	str	r2, [r3, #40]	@ 0x28
 8003684:	e019      	b.n	80036ba <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003686:	2308      	movs	r3, #8
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	b29b      	uxth	r3, r3
 8003690:	b2da      	uxtb	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369a:	6a39      	ldr	r1, [r7, #32]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 f8fc 	bl	800389c <I2C_WaitOnTXISFlagUntilTimeout>
 80036a4:	1e03      	subs	r3, r0, #0
 80036a6:	d001      	beq.n	80036ac <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e014      	b.n	80036d6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036ac:	2308      	movs	r3, #8
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036ba:	6a3a      	ldr	r2, [r7, #32]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	0013      	movs	r3, r2
 80036c4:	2200      	movs	r2, #0
 80036c6:	2180      	movs	r1, #128	@ 0x80
 80036c8:	f000 f890 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d001      	beq.n	80036d4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b004      	add	sp, #16
 80036dc:	bdb0      	pop	{r4, r5, r7, pc}
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	80002000 	.word	0x80002000

080036e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036e4:	b5b0      	push	{r4, r5, r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	000c      	movs	r4, r1
 80036ee:	0010      	movs	r0, r2
 80036f0:	0019      	movs	r1, r3
 80036f2:	250a      	movs	r5, #10
 80036f4:	197b      	adds	r3, r7, r5
 80036f6:	1c22      	adds	r2, r4, #0
 80036f8:	801a      	strh	r2, [r3, #0]
 80036fa:	2308      	movs	r3, #8
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	1c02      	adds	r2, r0, #0
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	1c0a      	adds	r2, r1, #0
 8003706:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003708:	1dbb      	adds	r3, r7, #6
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	197b      	adds	r3, r7, r5
 8003710:	8819      	ldrh	r1, [r3, #0]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	4b23      	ldr	r3, [pc, #140]	@ (80037a4 <I2C_RequestMemoryRead+0xc0>)
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2300      	movs	r3, #0
 800371a:	f000 fa41 	bl	8003ba0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800371e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003720:	6a39      	ldr	r1, [r7, #32]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	0018      	movs	r0, r3
 8003726:	f000 f8b9 	bl	800389c <I2C_WaitOnTXISFlagUntilTimeout>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d001      	beq.n	8003732 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e033      	b.n	800379a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003732:	1dbb      	adds	r3, r7, #6
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800373a:	2308      	movs	r3, #8
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	629a      	str	r2, [r3, #40]	@ 0x28
 8003748:	e019      	b.n	800377e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800374a:	2308      	movs	r3, #8
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	b29b      	uxth	r3, r3
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800375c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800375e:	6a39      	ldr	r1, [r7, #32]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	0018      	movs	r0, r3
 8003764:	f000 f89a 	bl	800389c <I2C_WaitOnTXISFlagUntilTimeout>
 8003768:	1e03      	subs	r3, r0, #0
 800376a:	d001      	beq.n	8003770 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e014      	b.n	800379a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003770:	2308      	movs	r3, #8
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800377e:	6a3a      	ldr	r2, [r7, #32]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	0013      	movs	r3, r2
 8003788:	2200      	movs	r2, #0
 800378a:	2140      	movs	r1, #64	@ 0x40
 800378c:	f000 f82e 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 8003790:	1e03      	subs	r3, r0, #0
 8003792:	d001      	beq.n	8003798 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	0018      	movs	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	b004      	add	sp, #16
 80037a0:	bdb0      	pop	{r4, r5, r7, pc}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	80002000 	.word	0x80002000

080037a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2202      	movs	r2, #2
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d103      	bne.n	80037c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2200      	movs	r2, #0
 80037c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2201      	movs	r2, #1
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d007      	beq.n	80037e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2101      	movs	r1, #1
 80037e0:	430a      	orrs	r2, r1
 80037e2:	619a      	str	r2, [r3, #24]
  }
}
 80037e4:	46c0      	nop			@ (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b002      	add	sp, #8
 80037ea:	bd80      	pop	{r7, pc}

080037ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	1dfb      	adds	r3, r7, #7
 80037fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037fc:	e03a      	b.n	8003874 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	6839      	ldr	r1, [r7, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	0018      	movs	r0, r3
 8003806:	f000 f8d3 	bl	80039b0 <I2C_IsErrorOccurred>
 800380a:	1e03      	subs	r3, r0, #0
 800380c:	d001      	beq.n	8003812 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e040      	b.n	8003894 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	d02d      	beq.n	8003874 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003818:	f7ff f97e 	bl	8002b18 <HAL_GetTick>
 800381c:	0002      	movs	r2, r0
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <I2C_WaitOnFlagUntilTimeout+0x42>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d122      	bne.n	8003874 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	4013      	ands	r3, r2
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	425a      	negs	r2, r3
 800383e:	4153      	adcs	r3, r2
 8003840:	b2db      	uxtb	r3, r3
 8003842:	001a      	movs	r2, r3
 8003844:	1dfb      	adds	r3, r7, #7
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d113      	bne.n	8003874 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	2220      	movs	r2, #32
 8003852:	431a      	orrs	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2241      	movs	r2, #65	@ 0x41
 800385c:	2120      	movs	r1, #32
 800385e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2242      	movs	r2, #66	@ 0x42
 8003864:	2100      	movs	r1, #0
 8003866:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2240      	movs	r2, #64	@ 0x40
 800386c:	2100      	movs	r1, #0
 800386e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e00f      	b.n	8003894 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	4013      	ands	r3, r2
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	425a      	negs	r2, r3
 8003884:	4153      	adcs	r3, r2
 8003886:	b2db      	uxtb	r3, r3
 8003888:	001a      	movs	r2, r3
 800388a:	1dfb      	adds	r3, r7, #7
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d0b5      	beq.n	80037fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	b004      	add	sp, #16
 800389a:	bd80      	pop	{r7, pc}

0800389c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038a8:	e032      	b.n	8003910 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f000 f87d 	bl	80039b0 <I2C_IsErrorOccurred>
 80038b6:	1e03      	subs	r3, r0, #0
 80038b8:	d001      	beq.n	80038be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e030      	b.n	8003920 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	3301      	adds	r3, #1
 80038c2:	d025      	beq.n	8003910 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c4:	f7ff f928 	bl	8002b18 <HAL_GetTick>
 80038c8:	0002      	movs	r2, r0
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d302      	bcc.n	80038da <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d11a      	bne.n	8003910 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2202      	movs	r2, #2
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d013      	beq.n	8003910 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ec:	2220      	movs	r2, #32
 80038ee:	431a      	orrs	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2241      	movs	r2, #65	@ 0x41
 80038f8:	2120      	movs	r1, #32
 80038fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2242      	movs	r2, #66	@ 0x42
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2240      	movs	r2, #64	@ 0x40
 8003908:	2100      	movs	r1, #0
 800390a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e007      	b.n	8003920 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2202      	movs	r2, #2
 8003918:	4013      	ands	r3, r2
 800391a:	2b02      	cmp	r3, #2
 800391c:	d1c5      	bne.n	80038aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b004      	add	sp, #16
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003934:	e02f      	b.n	8003996 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	0018      	movs	r0, r3
 800393e:	f000 f837 	bl	80039b0 <I2C_IsErrorOccurred>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d001      	beq.n	800394a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e02d      	b.n	80039a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7ff f8e5 	bl	8002b18 <HAL_GetTick>
 800394e:	0002      	movs	r2, r0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d11a      	bne.n	8003996 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2220      	movs	r2, #32
 8003968:	4013      	ands	r3, r2
 800396a:	2b20      	cmp	r3, #32
 800396c:	d013      	beq.n	8003996 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	2220      	movs	r2, #32
 8003974:	431a      	orrs	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2241      	movs	r2, #65	@ 0x41
 800397e:	2120      	movs	r1, #32
 8003980:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2242      	movs	r2, #66	@ 0x42
 8003986:	2100      	movs	r1, #0
 8003988:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2240      	movs	r2, #64	@ 0x40
 800398e:	2100      	movs	r1, #0
 8003990:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e007      	b.n	80039a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2220      	movs	r2, #32
 800399e:	4013      	ands	r3, r2
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d1c8      	bne.n	8003936 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b004      	add	sp, #16
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	@ 0x28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039bc:	2327      	movs	r3, #39	@ 0x27
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2210      	movs	r2, #16
 80039d8:	4013      	ands	r3, r2
 80039da:	d100      	bne.n	80039de <I2C_IsErrorOccurred+0x2e>
 80039dc:	e079      	b.n	8003ad2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2210      	movs	r2, #16
 80039e4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039e6:	e057      	b.n	8003a98 <I2C_IsErrorOccurred+0xe8>
 80039e8:	2227      	movs	r2, #39	@ 0x27
 80039ea:	18bb      	adds	r3, r7, r2
 80039ec:	18ba      	adds	r2, r7, r2
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	3301      	adds	r3, #1
 80039f6:	d04f      	beq.n	8003a98 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039f8:	f7ff f88e 	bl	8002b18 <HAL_GetTick>
 80039fc:	0002      	movs	r2, r0
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d302      	bcc.n	8003a0e <I2C_IsErrorOccurred+0x5e>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d144      	bne.n	8003a98 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	2380      	movs	r3, #128	@ 0x80
 8003a16:	01db      	lsls	r3, r3, #7
 8003a18:	4013      	ands	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a1c:	2013      	movs	r0, #19
 8003a1e:	183b      	adds	r3, r7, r0
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	2142      	movs	r1, #66	@ 0x42
 8003a24:	5c52      	ldrb	r2, [r2, r1]
 8003a26:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	2380      	movs	r3, #128	@ 0x80
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	401a      	ands	r2, r3
 8003a34:	2380      	movs	r3, #128	@ 0x80
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d126      	bne.n	8003a8a <I2C_IsErrorOccurred+0xda>
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	2380      	movs	r3, #128	@ 0x80
 8003a40:	01db      	lsls	r3, r3, #7
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d021      	beq.n	8003a8a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003a46:	183b      	adds	r3, r7, r0
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d01d      	beq.n	8003a8a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2180      	movs	r1, #128	@ 0x80
 8003a5a:	01c9      	lsls	r1, r1, #7
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a60:	f7ff f85a 	bl	8002b18 <HAL_GetTick>
 8003a64:	0003      	movs	r3, r0
 8003a66:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a68:	e00f      	b.n	8003a8a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a6a:	f7ff f855 	bl	8002b18 <HAL_GetTick>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b19      	cmp	r3, #25
 8003a76:	d908      	bls.n	8003a8a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a80:	2327      	movs	r3, #39	@ 0x27
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	2201      	movs	r2, #1
 8003a86:	701a      	strb	r2, [r3, #0]

              break;
 8003a88:	e006      	b.n	8003a98 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	2220      	movs	r2, #32
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d1e8      	bne.n	8003a6a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d004      	beq.n	8003ab0 <I2C_IsErrorOccurred+0x100>
 8003aa6:	2327      	movs	r3, #39	@ 0x27
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d09b      	beq.n	80039e8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ab0:	2327      	movs	r3, #39	@ 0x27
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003aca:	2327      	movs	r3, #39	@ 0x27
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	2201      	movs	r2, #1
 8003ad0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	2380      	movs	r3, #128	@ 0x80
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d00c      	beq.n	8003afe <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2280      	movs	r2, #128	@ 0x80
 8003af2:	0052      	lsls	r2, r2, #1
 8003af4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003af6:	2327      	movs	r3, #39	@ 0x27
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	2380      	movs	r3, #128	@ 0x80
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4013      	ands	r3, r2
 8003b06:	d00c      	beq.n	8003b22 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2280      	movs	r2, #128	@ 0x80
 8003b16:	00d2      	lsls	r2, r2, #3
 8003b18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b1a:	2327      	movs	r3, #39	@ 0x27
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	2201      	movs	r2, #1
 8003b20:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d00c      	beq.n	8003b46 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	4313      	orrs	r3, r2
 8003b32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2280      	movs	r2, #128	@ 0x80
 8003b3a:	0092      	lsls	r2, r2, #2
 8003b3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b3e:	2327      	movs	r3, #39	@ 0x27
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	2201      	movs	r2, #1
 8003b44:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003b46:	2327      	movs	r3, #39	@ 0x27
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01d      	beq.n	8003b8c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	0018      	movs	r0, r3
 8003b54:	f7ff fe28 	bl	80037a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	490e      	ldr	r1, [pc, #56]	@ (8003b9c <I2C_IsErrorOccurred+0x1ec>)
 8003b64:	400a      	ands	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2241      	movs	r2, #65	@ 0x41
 8003b78:	2120      	movs	r1, #32
 8003b7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2242      	movs	r2, #66	@ 0x42
 8003b80:	2100      	movs	r1, #0
 8003b82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2240      	movs	r2, #64	@ 0x40
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003b8c:	2327      	movs	r3, #39	@ 0x27
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	781b      	ldrb	r3, [r3, #0]
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b00a      	add	sp, #40	@ 0x28
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			@ (mov r8, r8)
 8003b9c:	fe00e800 	.word	0xfe00e800

08003ba0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	0008      	movs	r0, r1
 8003baa:	0011      	movs	r1, r2
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	240a      	movs	r4, #10
 8003bb0:	193b      	adds	r3, r7, r4
 8003bb2:	1c02      	adds	r2, r0, #0
 8003bb4:	801a      	strh	r2, [r3, #0]
 8003bb6:	2009      	movs	r0, #9
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	1c0a      	adds	r2, r1, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bbe:	193b      	adds	r3, r7, r4
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	059b      	lsls	r3, r3, #22
 8003bc4:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bc6:	183b      	adds	r3, r7, r0
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	0419      	lsls	r1, r3, #16
 8003bcc:	23ff      	movs	r3, #255	@ 0xff
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bd2:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bea:	0d51      	lsrs	r1, r2, #21
 8003bec:	2280      	movs	r2, #128	@ 0x80
 8003bee:	00d2      	lsls	r2, r2, #3
 8003bf0:	400a      	ands	r2, r1
 8003bf2:	4907      	ldr	r1, [pc, #28]	@ (8003c10 <I2C_TransferConfig+0x70>)
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	43d2      	mvns	r2, r2
 8003bf8:	401a      	ands	r2, r3
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b007      	add	sp, #28
 8003c0c:	bd90      	pop	{r4, r7, pc}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	03ff63ff 	.word	0x03ff63ff

08003c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2241      	movs	r2, #65	@ 0x41
 8003c22:	5c9b      	ldrb	r3, [r3, r2]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d138      	bne.n	8003c9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2240      	movs	r2, #64	@ 0x40
 8003c2e:	5c9b      	ldrb	r3, [r3, r2]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e032      	b.n	8003c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2240      	movs	r2, #64	@ 0x40
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2241      	movs	r2, #65	@ 0x41
 8003c44:	2124      	movs	r1, #36	@ 0x24
 8003c46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2101      	movs	r1, #1
 8003c54:	438a      	bics	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4911      	ldr	r1, [pc, #68]	@ (8003ca8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c64:	400a      	ands	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6819      	ldr	r1, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2101      	movs	r1, #1
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2241      	movs	r2, #65	@ 0x41
 8003c8c:	2120      	movs	r1, #32
 8003c8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2240      	movs	r2, #64	@ 0x40
 8003c94:	2100      	movs	r1, #0
 8003c96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b002      	add	sp, #8
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	ffffefff 	.word	0xffffefff

08003cac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2241      	movs	r2, #65	@ 0x41
 8003cba:	5c9b      	ldrb	r3, [r3, r2]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d139      	bne.n	8003d36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2240      	movs	r2, #64	@ 0x40
 8003cc6:	5c9b      	ldrb	r3, [r3, r2]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e033      	b.n	8003d38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2240      	movs	r2, #64	@ 0x40
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2241      	movs	r2, #65	@ 0x41
 8003cdc:	2124      	movs	r1, #36	@ 0x24
 8003cde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2101      	movs	r1, #1
 8003cec:	438a      	bics	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a11      	ldr	r2, [pc, #68]	@ (8003d40 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2241      	movs	r2, #65	@ 0x41
 8003d26:	2120      	movs	r1, #32
 8003d28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2240      	movs	r2, #64	@ 0x40
 8003d2e:	2100      	movs	r1, #0
 8003d30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e000      	b.n	8003d38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
  }
}
 8003d38:	0018      	movs	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b004      	add	sp, #16
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	fffff0ff 	.word	0xfffff0ff

08003d44 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e1d0      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d100      	bne.n	8003d62 <HAL_RCC_OscConfig+0x1e>
 8003d60:	e069      	b.n	8003e36 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d62:	4bc8      	ldr	r3, [pc, #800]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2238      	movs	r2, #56	@ 0x38
 8003d68:	4013      	ands	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d105      	bne.n	8003d7e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d15d      	bne.n	8003e36 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e1bc      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	2380      	movs	r3, #128	@ 0x80
 8003d84:	025b      	lsls	r3, r3, #9
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_OscConfig+0x56>
 8003d8a:	4bbe      	ldr	r3, [pc, #760]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4bbd      	ldr	r3, [pc, #756]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003d90:	2180      	movs	r1, #128	@ 0x80
 8003d92:	0249      	lsls	r1, r1, #9
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e020      	b.n	8003ddc <HAL_RCC_OscConfig+0x98>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	23a0      	movs	r3, #160	@ 0xa0
 8003da0:	02db      	lsls	r3, r3, #11
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d10e      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x80>
 8003da6:	4bb7      	ldr	r3, [pc, #732]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4bb6      	ldr	r3, [pc, #728]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003dac:	2180      	movs	r1, #128	@ 0x80
 8003dae:	02c9      	lsls	r1, r1, #11
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	4bb3      	ldr	r3, [pc, #716]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4bb2      	ldr	r3, [pc, #712]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003dba:	2180      	movs	r1, #128	@ 0x80
 8003dbc:	0249      	lsls	r1, r1, #9
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0x98>
 8003dc4:	4baf      	ldr	r3, [pc, #700]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4bae      	ldr	r3, [pc, #696]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003dca:	49af      	ldr	r1, [pc, #700]	@ (8004088 <HAL_RCC_OscConfig+0x344>)
 8003dcc:	400a      	ands	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	4bac      	ldr	r3, [pc, #688]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4bab      	ldr	r3, [pc, #684]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003dd6:	49ad      	ldr	r1, [pc, #692]	@ (800408c <HAL_RCC_OscConfig+0x348>)
 8003dd8:	400a      	ands	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d014      	beq.n	8003e0e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe fe98 	bl	8002b18 <HAL_GetTick>
 8003de8:	0003      	movs	r3, r0
 8003dea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003dee:	f7fe fe93 	bl	8002b18 <HAL_GetTick>
 8003df2:	0002      	movs	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b64      	cmp	r3, #100	@ 0x64
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e17b      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e00:	4ba0      	ldr	r3, [pc, #640]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2380      	movs	r3, #128	@ 0x80
 8003e06:	029b      	lsls	r3, r3, #10
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0xaa>
 8003e0c:	e013      	b.n	8003e36 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fe fe83 	bl	8002b18 <HAL_GetTick>
 8003e12:	0003      	movs	r3, r0
 8003e14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003e18:	f7fe fe7e 	bl	8002b18 <HAL_GetTick>
 8003e1c:	0002      	movs	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	@ 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e166      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e2a:	4b96      	ldr	r3, [pc, #600]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	2380      	movs	r3, #128	@ 0x80
 8003e30:	029b      	lsls	r3, r3, #10
 8003e32:	4013      	ands	r3, r2
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d100      	bne.n	8003e42 <HAL_RCC_OscConfig+0xfe>
 8003e40:	e086      	b.n	8003f50 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e42:	4b90      	ldr	r3, [pc, #576]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2238      	movs	r2, #56	@ 0x38
 8003e48:	4013      	ands	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d12f      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e14c      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b89      	ldr	r3, [pc, #548]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4a8b      	ldr	r2, [pc, #556]	@ (8004090 <HAL_RCC_OscConfig+0x34c>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	0019      	movs	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	021a      	lsls	r2, r3, #8
 8003e6e:	4b85      	ldr	r3, [pc, #532]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003e70:	430a      	orrs	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d112      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e7a:	4b82      	ldr	r3, [pc, #520]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a85      	ldr	r2, [pc, #532]	@ (8004094 <HAL_RCC_OscConfig+0x350>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	0019      	movs	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	4b7e      	ldr	r3, [pc, #504]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e8e:	4b7d      	ldr	r3, [pc, #500]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	0adb      	lsrs	r3, r3, #11
 8003e94:	2207      	movs	r2, #7
 8003e96:	4013      	ands	r3, r2
 8003e98:	4a7f      	ldr	r2, [pc, #508]	@ (8004098 <HAL_RCC_OscConfig+0x354>)
 8003e9a:	40da      	lsrs	r2, r3
 8003e9c:	4b7f      	ldr	r3, [pc, #508]	@ (800409c <HAL_RCC_OscConfig+0x358>)
 8003e9e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ea0:	4b7f      	ldr	r3, [pc, #508]	@ (80040a0 <HAL_RCC_OscConfig+0x35c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7fe fddb 	bl	8002a60 <HAL_InitTick>
 8003eaa:	1e03      	subs	r3, r0, #0
 8003eac:	d050      	beq.n	8003f50 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e122      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d030      	beq.n	8003f1c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003eba:	4b72      	ldr	r3, [pc, #456]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a75      	ldr	r2, [pc, #468]	@ (8004094 <HAL_RCC_OscConfig+0x350>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	4b6e      	ldr	r3, [pc, #440]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8003ece:	4b6d      	ldr	r3, [pc, #436]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b6c      	ldr	r3, [pc, #432]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003ed4:	2180      	movs	r1, #128	@ 0x80
 8003ed6:	0049      	lsls	r1, r1, #1
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe fe1c 	bl	8002b18 <HAL_GetTick>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003ee6:	f7fe fe17 	bl	8002b18 <HAL_GetTick>
 8003eea:	0002      	movs	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0ff      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ef8:	4b62      	ldr	r3, [pc, #392]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	2380      	movs	r3, #128	@ 0x80
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4013      	ands	r3, r2
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f04:	4b5f      	ldr	r3, [pc, #380]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4a61      	ldr	r2, [pc, #388]	@ (8004090 <HAL_RCC_OscConfig+0x34c>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	021a      	lsls	r2, r3, #8
 8003f14:	4b5b      	ldr	r3, [pc, #364]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	e019      	b.n	8003f50 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003f1c:	4b59      	ldr	r3, [pc, #356]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4b58      	ldr	r3, [pc, #352]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003f22:	4960      	ldr	r1, [pc, #384]	@ (80040a4 <HAL_RCC_OscConfig+0x360>)
 8003f24:	400a      	ands	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fe fdf6 	bl	8002b18 <HAL_GetTick>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f32:	f7fe fdf1 	bl	8002b18 <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0d9      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f44:	4b4f      	ldr	r3, [pc, #316]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	2380      	movs	r3, #128	@ 0x80
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d1f0      	bne.n	8003f32 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2208      	movs	r2, #8
 8003f56:	4013      	ands	r3, r2
 8003f58:	d042      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2238      	movs	r2, #56	@ 0x38
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b18      	cmp	r3, #24
 8003f64:	d105      	bne.n	8003f72 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d138      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0c2      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d019      	beq.n	8003fae <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f7a:	4b42      	ldr	r3, [pc, #264]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003f7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f7e:	4b41      	ldr	r3, [pc, #260]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003f80:	2101      	movs	r1, #1
 8003f82:	430a      	orrs	r2, r1
 8003f84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7fe fdc7 	bl	8002b18 <HAL_GetTick>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003f90:	f7fe fdc2 	bl	8002b18 <HAL_GetTick>
 8003f94:	0002      	movs	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e0aa      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003fa2:	4b38      	ldr	r3, [pc, #224]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d0f1      	beq.n	8003f90 <HAL_RCC_OscConfig+0x24c>
 8003fac:	e018      	b.n	8003fe0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003fae:	4b35      	ldr	r3, [pc, #212]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003fb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fb2:	4b34      	ldr	r3, [pc, #208]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	438a      	bics	r2, r1
 8003fb8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7fe fdad 	bl	8002b18 <HAL_GetTick>
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003fc4:	f7fe fda8 	bl	8002b18 <HAL_GetTick>
 8003fc8:	0002      	movs	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e090      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fda:	2202      	movs	r2, #2
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d1f1      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d100      	bne.n	8003fec <HAL_RCC_OscConfig+0x2a8>
 8003fea:	e084      	b.n	80040f6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fec:	230f      	movs	r3, #15
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003ff4:	4b23      	ldr	r3, [pc, #140]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2238      	movs	r2, #56	@ 0x38
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d106      	bne.n	800400e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d000      	beq.n	800400a <HAL_RCC_OscConfig+0x2c6>
 8004008:	e075      	b.n	80040f6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e074      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d106      	bne.n	8004024 <HAL_RCC_OscConfig+0x2e0>
 8004016:	4b1b      	ldr	r3, [pc, #108]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8004018:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800401a:	4b1a      	ldr	r3, [pc, #104]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 800401c:	2101      	movs	r1, #1
 800401e:	430a      	orrs	r2, r1
 8004020:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004022:	e01c      	b.n	800405e <HAL_RCC_OscConfig+0x31a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b05      	cmp	r3, #5
 800402a:	d10c      	bne.n	8004046 <HAL_RCC_OscConfig+0x302>
 800402c:	4b15      	ldr	r3, [pc, #84]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 800402e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004030:	4b14      	ldr	r3, [pc, #80]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8004032:	2104      	movs	r1, #4
 8004034:	430a      	orrs	r2, r1
 8004036:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004038:	4b12      	ldr	r3, [pc, #72]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 800403a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800403c:	4b11      	ldr	r3, [pc, #68]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 800403e:	2101      	movs	r1, #1
 8004040:	430a      	orrs	r2, r1
 8004042:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004044:	e00b      	b.n	800405e <HAL_RCC_OscConfig+0x31a>
 8004046:	4b0f      	ldr	r3, [pc, #60]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8004048:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800404a:	4b0e      	ldr	r3, [pc, #56]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 800404c:	2101      	movs	r1, #1
 800404e:	438a      	bics	r2, r1
 8004050:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004052:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8004054:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004056:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <HAL_RCC_OscConfig+0x340>)
 8004058:	2104      	movs	r1, #4
 800405a:	438a      	bics	r2, r1
 800405c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d028      	beq.n	80040b8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7fe fd57 	bl	8002b18 <HAL_GetTick>
 800406a:	0003      	movs	r3, r0
 800406c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800406e:	e01d      	b.n	80040ac <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fe fd52 	bl	8002b18 <HAL_GetTick>
 8004074:	0002      	movs	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	4a0b      	ldr	r2, [pc, #44]	@ (80040a8 <HAL_RCC_OscConfig+0x364>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d915      	bls.n	80040ac <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e039      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
 8004084:	40021000 	.word	0x40021000
 8004088:	fffeffff 	.word	0xfffeffff
 800408c:	fffbffff 	.word	0xfffbffff
 8004090:	ffff80ff 	.word	0xffff80ff
 8004094:	ffffc7ff 	.word	0xffffc7ff
 8004098:	02dc6c00 	.word	0x02dc6c00
 800409c:	20000000 	.word	0x20000000
 80040a0:	20000004 	.word	0x20000004
 80040a4:	fffffeff 	.word	0xfffffeff
 80040a8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80040ac:	4b14      	ldr	r3, [pc, #80]	@ (8004100 <HAL_RCC_OscConfig+0x3bc>)
 80040ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b0:	2202      	movs	r2, #2
 80040b2:	4013      	ands	r3, r2
 80040b4:	d0dc      	beq.n	8004070 <HAL_RCC_OscConfig+0x32c>
 80040b6:	e013      	b.n	80040e0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fe fd2e 	bl	8002b18 <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80040c0:	e009      	b.n	80040d6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fe fd29 	bl	8002b18 <HAL_GetTick>
 80040c6:	0002      	movs	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004104 <HAL_RCC_OscConfig+0x3c0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e010      	b.n	80040f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80040d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004100 <HAL_RCC_OscConfig+0x3bc>)
 80040d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040da:	2202      	movs	r2, #2
 80040dc:	4013      	ands	r3, r2
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80040e0:	230f      	movs	r3, #15
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80040ea:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <HAL_RCC_OscConfig+0x3bc>)
 80040ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040ee:	4b04      	ldr	r3, [pc, #16]	@ (8004100 <HAL_RCC_OscConfig+0x3bc>)
 80040f0:	4905      	ldr	r1, [pc, #20]	@ (8004108 <HAL_RCC_OscConfig+0x3c4>)
 80040f2:	400a      	ands	r2, r1
 80040f4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b006      	add	sp, #24
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	00001388 	.word	0x00001388
 8004108:	efffffff 	.word	0xefffffff

0800410c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0df      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004120:	4b71      	ldr	r3, [pc, #452]	@ (80042e8 <HAL_RCC_ClockConfig+0x1dc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2207      	movs	r2, #7
 8004126:	4013      	ands	r3, r2
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d91e      	bls.n	800416c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b6e      	ldr	r3, [pc, #440]	@ (80042e8 <HAL_RCC_ClockConfig+0x1dc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2207      	movs	r2, #7
 8004134:	4393      	bics	r3, r2
 8004136:	0019      	movs	r1, r3
 8004138:	4b6b      	ldr	r3, [pc, #428]	@ (80042e8 <HAL_RCC_ClockConfig+0x1dc>)
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004140:	f7fe fcea 	bl	8002b18 <HAL_GetTick>
 8004144:	0003      	movs	r3, r0
 8004146:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004148:	e009      	b.n	800415e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800414a:	f7fe fce5 	bl	8002b18 <HAL_GetTick>
 800414e:	0002      	movs	r2, r0
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	4a65      	ldr	r2, [pc, #404]	@ (80042ec <HAL_RCC_ClockConfig+0x1e0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e0c0      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800415e:	4b62      	ldr	r3, [pc, #392]	@ (80042e8 <HAL_RCC_ClockConfig+0x1dc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2207      	movs	r2, #7
 8004164:	4013      	ands	r3, r2
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d1ee      	bne.n	800414a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2202      	movs	r2, #2
 8004172:	4013      	ands	r3, r2
 8004174:	d017      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2204      	movs	r2, #4
 800417c:	4013      	ands	r3, r2
 800417e:	d008      	beq.n	8004192 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004180:	4b5b      	ldr	r3, [pc, #364]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4a5b      	ldr	r2, [pc, #364]	@ (80042f4 <HAL_RCC_ClockConfig+0x1e8>)
 8004186:	401a      	ands	r2, r3
 8004188:	4b59      	ldr	r3, [pc, #356]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 800418a:	21b0      	movs	r1, #176	@ 0xb0
 800418c:	0109      	lsls	r1, r1, #4
 800418e:	430a      	orrs	r2, r1
 8004190:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004192:	4b57      	ldr	r3, [pc, #348]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	4a58      	ldr	r2, [pc, #352]	@ (80042f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004198:	4013      	ands	r3, r2
 800419a:	0019      	movs	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	4b53      	ldr	r3, [pc, #332]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 80041a2:	430a      	orrs	r2, r1
 80041a4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2201      	movs	r2, #1
 80041ac:	4013      	ands	r3, r2
 80041ae:	d04b      	beq.n	8004248 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b8:	4b4d      	ldr	r3, [pc, #308]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	2380      	movs	r3, #128	@ 0x80
 80041be:	029b      	lsls	r3, r3, #10
 80041c0:	4013      	ands	r3, r2
 80041c2:	d11f      	bne.n	8004204 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e08b      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d0:	4b47      	ldr	r3, [pc, #284]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	2380      	movs	r3, #128	@ 0x80
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4013      	ands	r3, r2
 80041da:	d113      	bne.n	8004204 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e07f      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d106      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80041e8:	4b41      	ldr	r3, [pc, #260]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 80041ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ec:	2202      	movs	r2, #2
 80041ee:	4013      	ands	r3, r2
 80041f0:	d108      	bne.n	8004204 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e074      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80041f6:	4b3e      	ldr	r3, [pc, #248]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 80041f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fa:	2202      	movs	r2, #2
 80041fc:	4013      	ands	r3, r2
 80041fe:	d101      	bne.n	8004204 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e06d      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004204:	4b3a      	ldr	r3, [pc, #232]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2207      	movs	r2, #7
 800420a:	4393      	bics	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	4b37      	ldr	r3, [pc, #220]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 8004214:	430a      	orrs	r2, r1
 8004216:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004218:	f7fe fc7e 	bl	8002b18 <HAL_GetTick>
 800421c:	0003      	movs	r3, r0
 800421e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004220:	e009      	b.n	8004236 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004222:	f7fe fc79 	bl	8002b18 <HAL_GetTick>
 8004226:	0002      	movs	r2, r0
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	4a2f      	ldr	r2, [pc, #188]	@ (80042ec <HAL_RCC_ClockConfig+0x1e0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e054      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	4b2e      	ldr	r3, [pc, #184]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2238      	movs	r2, #56	@ 0x38
 800423c:	401a      	ands	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	429a      	cmp	r2, r3
 8004246:	d1ec      	bne.n	8004222 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004248:	4b27      	ldr	r3, [pc, #156]	@ (80042e8 <HAL_RCC_ClockConfig+0x1dc>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2207      	movs	r2, #7
 800424e:	4013      	ands	r3, r2
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d21e      	bcs.n	8004294 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b24      	ldr	r3, [pc, #144]	@ (80042e8 <HAL_RCC_ClockConfig+0x1dc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2207      	movs	r2, #7
 800425c:	4393      	bics	r3, r2
 800425e:	0019      	movs	r1, r3
 8004260:	4b21      	ldr	r3, [pc, #132]	@ (80042e8 <HAL_RCC_ClockConfig+0x1dc>)
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004268:	f7fe fc56 	bl	8002b18 <HAL_GetTick>
 800426c:	0003      	movs	r3, r0
 800426e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004270:	e009      	b.n	8004286 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004272:	f7fe fc51 	bl	8002b18 <HAL_GetTick>
 8004276:	0002      	movs	r2, r0
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <HAL_RCC_ClockConfig+0x1e0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e02c      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004286:	4b18      	ldr	r3, [pc, #96]	@ (80042e8 <HAL_RCC_ClockConfig+0x1dc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2207      	movs	r2, #7
 800428c:	4013      	ands	r3, r2
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d1ee      	bne.n	8004272 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2204      	movs	r2, #4
 800429a:	4013      	ands	r3, r2
 800429c:	d009      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800429e:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	4a16      	ldr	r2, [pc, #88]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	0019      	movs	r1, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 80042ae:	430a      	orrs	r2, r1
 80042b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80042b2:	f000 f82b 	bl	800430c <HAL_RCC_GetSysClockFreq>
 80042b6:	0001      	movs	r1, r0
 80042b8:	4b0d      	ldr	r3, [pc, #52]	@ (80042f0 <HAL_RCC_ClockConfig+0x1e4>)
 80042ba:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	220f      	movs	r2, #15
 80042c0:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80042c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004300 <HAL_RCC_ClockConfig+0x1f4>)
 80042c4:	0092      	lsls	r2, r2, #2
 80042c6:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80042c8:	221f      	movs	r2, #31
 80042ca:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80042cc:	000a      	movs	r2, r1
 80042ce:	40da      	lsrs	r2, r3
 80042d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004304 <HAL_RCC_ClockConfig+0x1f8>)
 80042d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <HAL_RCC_ClockConfig+0x1fc>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	0018      	movs	r0, r3
 80042da:	f7fe fbc1 	bl	8002a60 <HAL_InitTick>
 80042de:	0003      	movs	r3, r0
}
 80042e0:	0018      	movs	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b004      	add	sp, #16
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40022000 	.word	0x40022000
 80042ec:	00001388 	.word	0x00001388
 80042f0:	40021000 	.word	0x40021000
 80042f4:	ffff84ff 	.word	0xffff84ff
 80042f8:	fffff0ff 	.word	0xfffff0ff
 80042fc:	ffff8fff 	.word	0xffff8fff
 8004300:	08005cc8 	.word	0x08005cc8
 8004304:	20000000 	.word	0x20000000
 8004308:	20000004 	.word	0x20000004

0800430c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004312:	4b1c      	ldr	r3, [pc, #112]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x78>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2238      	movs	r2, #56	@ 0x38
 8004318:	4013      	ands	r3, r2
 800431a:	d10f      	bne.n	800433c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800431c:	4b19      	ldr	r3, [pc, #100]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x78>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	0adb      	lsrs	r3, r3, #11
 8004322:	2207      	movs	r2, #7
 8004324:	4013      	ands	r3, r2
 8004326:	2201      	movs	r2, #1
 8004328:	409a      	lsls	r2, r3
 800432a:	0013      	movs	r3, r2
 800432c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800432e:	6839      	ldr	r1, [r7, #0]
 8004330:	4815      	ldr	r0, [pc, #84]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004332:	f7fb fefb 	bl	800012c <__udivsi3>
 8004336:	0003      	movs	r3, r0
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	e01e      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800433c:	4b11      	ldr	r3, [pc, #68]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x78>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2238      	movs	r2, #56	@ 0x38
 8004342:	4013      	ands	r3, r2
 8004344:	2b08      	cmp	r3, #8
 8004346:	d102      	bne.n	800434e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004348:	4b10      	ldr	r3, [pc, #64]	@ (800438c <HAL_RCC_GetSysClockFreq+0x80>)
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	e015      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x78>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2238      	movs	r2, #56	@ 0x38
 8004354:	4013      	ands	r3, r2
 8004356:	2b20      	cmp	r3, #32
 8004358:	d103      	bne.n	8004362 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	607b      	str	r3, [r7, #4]
 8004360:	e00b      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004362:	4b08      	ldr	r3, [pc, #32]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x78>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2238      	movs	r2, #56	@ 0x38
 8004368:	4013      	ands	r3, r2
 800436a:	2b18      	cmp	r3, #24
 800436c:	d103      	bne.n	8004376 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800436e:	23fa      	movs	r3, #250	@ 0xfa
 8004370:	01db      	lsls	r3, r3, #7
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	e001      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800437a:	687b      	ldr	r3, [r7, #4]
}
 800437c:	0018      	movs	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	b002      	add	sp, #8
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40021000 	.word	0x40021000
 8004388:	02dc6c00 	.word	0x02dc6c00
 800438c:	007a1200 	.word	0x007a1200

08004390 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004394:	f7ff ffba 	bl	800430c <HAL_RCC_GetSysClockFreq>
 8004398:	0001      	movs	r1, r0
 800439a:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <HAL_RCC_GetHCLKFreq+0x30>)
 800439c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	220f      	movs	r2, #15
 80043a2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80043a4:	4b07      	ldr	r3, [pc, #28]	@ (80043c4 <HAL_RCC_GetHCLKFreq+0x34>)
 80043a6:	0092      	lsls	r2, r2, #2
 80043a8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80043aa:	221f      	movs	r2, #31
 80043ac:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80043ae:	000a      	movs	r2, r1
 80043b0:	40da      	lsrs	r2, r3
 80043b2:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <HAL_RCC_GetHCLKFreq+0x38>)
 80043b4:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80043b6:	4b04      	ldr	r3, [pc, #16]	@ (80043c8 <HAL_RCC_GetHCLKFreq+0x38>)
 80043b8:	681b      	ldr	r3, [r3, #0]
}
 80043ba:	0018      	movs	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40021000 	.word	0x40021000
 80043c4:	08005cc8 	.word	0x08005cc8
 80043c8:	20000000 	.word	0x20000000

080043cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80043d0:	f7ff ffde 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 80043d4:	0001      	movs	r1, r0
 80043d6:	4b07      	ldr	r3, [pc, #28]	@ (80043f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	0b1b      	lsrs	r3, r3, #12
 80043dc:	2207      	movs	r2, #7
 80043de:	401a      	ands	r2, r3
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80043e2:	0092      	lsls	r2, r2, #2
 80043e4:	58d3      	ldr	r3, [r2, r3]
 80043e6:	221f      	movs	r2, #31
 80043e8:	4013      	ands	r3, r2
 80043ea:	40d9      	lsrs	r1, r3
 80043ec:	000b      	movs	r3, r1
}
 80043ee:	0018      	movs	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000
 80043f8:	08005d08 	.word	0x08005d08

080043fc <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004404:	2313      	movs	r3, #19
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800440c:	2312      	movs	r3, #18
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2240      	movs	r2, #64	@ 0x40
 800441a:	4013      	ands	r3, r2
 800441c:	d100      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800441e:	e079      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004420:	2011      	movs	r0, #17
 8004422:	183b      	adds	r3, r7, r0
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004428:	4b63      	ldr	r3, [pc, #396]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800442a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800442c:	2380      	movs	r3, #128	@ 0x80
 800442e:	055b      	lsls	r3, r3, #21
 8004430:	4013      	ands	r3, r2
 8004432:	d110      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004434:	4b60      	ldr	r3, [pc, #384]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004436:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004438:	4b5f      	ldr	r3, [pc, #380]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800443a:	2180      	movs	r1, #128	@ 0x80
 800443c:	0549      	lsls	r1, r1, #21
 800443e:	430a      	orrs	r2, r1
 8004440:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004442:	4b5d      	ldr	r3, [pc, #372]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004446:	2380      	movs	r3, #128	@ 0x80
 8004448:	055b      	lsls	r3, r3, #21
 800444a:	4013      	ands	r3, r2
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004450:	183b      	adds	r3, r7, r0
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004456:	4b58      	ldr	r3, [pc, #352]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004458:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800445a:	23c0      	movs	r3, #192	@ 0xc0
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4013      	ands	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d019      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	429a      	cmp	r2, r3
 8004470:	d014      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004472:	4b51      	ldr	r3, [pc, #324]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004476:	4a51      	ldr	r2, [pc, #324]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004478:	4013      	ands	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800447c:	4b4e      	ldr	r3, [pc, #312]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800447e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004480:	4b4d      	ldr	r3, [pc, #308]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004482:	2180      	movs	r1, #128	@ 0x80
 8004484:	0249      	lsls	r1, r1, #9
 8004486:	430a      	orrs	r2, r1
 8004488:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800448a:	4b4b      	ldr	r3, [pc, #300]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800448c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800448e:	4b4a      	ldr	r3, [pc, #296]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004490:	494b      	ldr	r1, [pc, #300]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004492:	400a      	ands	r2, r1
 8004494:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004496:	4b48      	ldr	r3, [pc, #288]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2201      	movs	r2, #1
 80044a0:	4013      	ands	r3, r2
 80044a2:	d016      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a4:	f7fe fb38 	bl	8002b18 <HAL_GetTick>
 80044a8:	0003      	movs	r3, r0
 80044aa:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80044ac:	e00c      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7fe fb33 	bl	8002b18 <HAL_GetTick>
 80044b2:	0002      	movs	r2, r0
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	4a42      	ldr	r2, [pc, #264]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d904      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80044be:	2313      	movs	r3, #19
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	2203      	movs	r2, #3
 80044c4:	701a      	strb	r2, [r3, #0]
          break;
 80044c6:	e004      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80044c8:	4b3b      	ldr	r3, [pc, #236]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044cc:	2202      	movs	r2, #2
 80044ce:	4013      	ands	r3, r2
 80044d0:	d0ed      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80044d2:	2313      	movs	r3, #19
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044dc:	4b36      	ldr	r3, [pc, #216]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e0:	4a36      	ldr	r2, [pc, #216]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	0019      	movs	r1, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	4b33      	ldr	r3, [pc, #204]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ec:	430a      	orrs	r2, r1
 80044ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044f0:	e005      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f2:	2312      	movs	r3, #18
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	2213      	movs	r2, #19
 80044f8:	18ba      	adds	r2, r7, r2
 80044fa:	7812      	ldrb	r2, [r2, #0]
 80044fc:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044fe:	2311      	movs	r3, #17
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d105      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004508:	4b2b      	ldr	r3, [pc, #172]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800450a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800450c:	4b2a      	ldr	r3, [pc, #168]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800450e:	492e      	ldr	r1, [pc, #184]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004510:	400a      	ands	r2, r1
 8004512:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2201      	movs	r2, #1
 800451a:	4013      	ands	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800451e:	4b26      	ldr	r3, [pc, #152]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004522:	2203      	movs	r2, #3
 8004524:	4393      	bics	r3, r2
 8004526:	0019      	movs	r1, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	4b22      	ldr	r3, [pc, #136]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800452e:	430a      	orrs	r2, r1
 8004530:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2202      	movs	r2, #2
 8004538:	4013      	ands	r3, r2
 800453a:	d009      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800453c:	4b1e      	ldr	r3, [pc, #120]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800453e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004540:	4a22      	ldr	r2, [pc, #136]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	4013      	ands	r3, r2
 8004544:	0019      	movs	r1, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	4b1b      	ldr	r3, [pc, #108]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800454c:	430a      	orrs	r2, r1
 800454e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2220      	movs	r2, #32
 8004556:	4013      	ands	r3, r2
 8004558:	d008      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800455a:	4b17      	ldr	r3, [pc, #92]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800455c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	0899      	lsrs	r1, r3, #2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	4b14      	ldr	r3, [pc, #80]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004568:	430a      	orrs	r2, r1
 800456a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2204      	movs	r2, #4
 8004572:	4013      	ands	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004576:	4b10      	ldr	r3, [pc, #64]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457a:	4a15      	ldr	r2, [pc, #84]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800457c:	4013      	ands	r3, r2
 800457e:	0019      	movs	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004586:	430a      	orrs	r2, r1
 8004588:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2280      	movs	r2, #128	@ 0x80
 8004590:	4013      	ands	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004594:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	22e0      	movs	r2, #224	@ 0xe0
 800459a:	4393      	bics	r3, r2
 800459c:	0019      	movs	r1, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045a4:	430a      	orrs	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]
  }
  return status;
 80045a8:	2312      	movs	r3, #18
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	781b      	ldrb	r3, [r3, #0]
}
 80045ae:	0018      	movs	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b006      	add	sp, #24
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	40021000 	.word	0x40021000
 80045bc:	fffffcff 	.word	0xfffffcff
 80045c0:	fffeffff 	.word	0xfffeffff
 80045c4:	00001388 	.word	0x00001388
 80045c8:	efffffff 	.word	0xefffffff
 80045cc:	ffffcfff 	.word	0xffffcfff
 80045d0:	ffff3fff 	.word	0xffff3fff

080045d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e04a      	b.n	800467c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	223d      	movs	r2, #61	@ 0x3d
 80045ea:	5c9b      	ldrb	r3, [r3, r2]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d107      	bne.n	8004602 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	223c      	movs	r2, #60	@ 0x3c
 80045f6:	2100      	movs	r1, #0
 80045f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7fe f91b 	bl	8002838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	223d      	movs	r2, #61	@ 0x3d
 8004606:	2102      	movs	r1, #2
 8004608:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	0019      	movs	r1, r3
 8004614:	0010      	movs	r0, r2
 8004616:	f000 f835 	bl	8004684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2248      	movs	r2, #72	@ 0x48
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	223e      	movs	r2, #62	@ 0x3e
 8004626:	2101      	movs	r1, #1
 8004628:	5499      	strb	r1, [r3, r2]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	223f      	movs	r2, #63	@ 0x3f
 800462e:	2101      	movs	r1, #1
 8004630:	5499      	strb	r1, [r3, r2]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2240      	movs	r2, #64	@ 0x40
 8004636:	2101      	movs	r1, #1
 8004638:	5499      	strb	r1, [r3, r2]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2241      	movs	r2, #65	@ 0x41
 800463e:	2101      	movs	r1, #1
 8004640:	5499      	strb	r1, [r3, r2]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2242      	movs	r2, #66	@ 0x42
 8004646:	2101      	movs	r1, #1
 8004648:	5499      	strb	r1, [r3, r2]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2243      	movs	r2, #67	@ 0x43
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2244      	movs	r2, #68	@ 0x44
 8004656:	2101      	movs	r1, #1
 8004658:	5499      	strb	r1, [r3, r2]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2245      	movs	r2, #69	@ 0x45
 800465e:	2101      	movs	r1, #1
 8004660:	5499      	strb	r1, [r3, r2]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2246      	movs	r2, #70	@ 0x46
 8004666:	2101      	movs	r1, #1
 8004668:	5499      	strb	r1, [r3, r2]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2247      	movs	r2, #71	@ 0x47
 800466e:	2101      	movs	r1, #1
 8004670:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	223d      	movs	r2, #61	@ 0x3d
 8004676:	2101      	movs	r1, #1
 8004678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	0018      	movs	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	b002      	add	sp, #8
 8004682:	bd80      	pop	{r7, pc}

08004684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a2e      	ldr	r2, [pc, #184]	@ (8004750 <TIM_Base_SetConfig+0xcc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_Base_SetConfig+0x20>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a2d      	ldr	r2, [pc, #180]	@ (8004754 <TIM_Base_SetConfig+0xd0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d108      	bne.n	80046b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2270      	movs	r2, #112	@ 0x70
 80046a8:	4393      	bics	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a25      	ldr	r2, [pc, #148]	@ (8004750 <TIM_Base_SetConfig+0xcc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00f      	beq.n	80046de <TIM_Base_SetConfig+0x5a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a24      	ldr	r2, [pc, #144]	@ (8004754 <TIM_Base_SetConfig+0xd0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <TIM_Base_SetConfig+0x5a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a23      	ldr	r2, [pc, #140]	@ (8004758 <TIM_Base_SetConfig+0xd4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_Base_SetConfig+0x5a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a22      	ldr	r2, [pc, #136]	@ (800475c <TIM_Base_SetConfig+0xd8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_Base_SetConfig+0x5a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a21      	ldr	r2, [pc, #132]	@ (8004760 <TIM_Base_SetConfig+0xdc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d108      	bne.n	80046f0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a20      	ldr	r2, [pc, #128]	@ (8004764 <TIM_Base_SetConfig+0xe0>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2280      	movs	r2, #128	@ 0x80
 80046f4:	4393      	bics	r3, r2
 80046f6:	001a      	movs	r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a0f      	ldr	r2, [pc, #60]	@ (8004750 <TIM_Base_SetConfig+0xcc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d007      	beq.n	8004728 <TIM_Base_SetConfig+0xa4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a10      	ldr	r2, [pc, #64]	@ (800475c <TIM_Base_SetConfig+0xd8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d003      	beq.n	8004728 <TIM_Base_SetConfig+0xa4>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a0f      	ldr	r2, [pc, #60]	@ (8004760 <TIM_Base_SetConfig+0xdc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d103      	bne.n	8004730 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2204      	movs	r2, #4
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	601a      	str	r2, [r3, #0]
}
 8004748:	46c0      	nop			@ (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	b004      	add	sp, #16
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40000400 	.word	0x40000400
 8004758:	40002000 	.word	0x40002000
 800475c:	40014400 	.word	0x40014400
 8004760:	40014800 	.word	0x40014800
 8004764:	fffffcff 	.word	0xfffffcff

08004768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e046      	b.n	8004808 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2288      	movs	r2, #136	@ 0x88
 800477e:	589b      	ldr	r3, [r3, r2]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2284      	movs	r2, #132	@ 0x84
 8004788:	2100      	movs	r1, #0
 800478a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	0018      	movs	r0, r3
 8004790:	f7fe f8c4 	bl	800291c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2288      	movs	r2, #136	@ 0x88
 8004798:	2124      	movs	r1, #36	@ 0x24
 800479a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2101      	movs	r1, #1
 80047a8:	438a      	bics	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 fa4e 	bl	8004c58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 f8cc 	bl	800495c <UART_SetConfig>
 80047c4:	0003      	movs	r3, r0
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e01c      	b.n	8004808 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	490d      	ldr	r1, [pc, #52]	@ (8004810 <HAL_UART_Init+0xa8>)
 80047da:	400a      	ands	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	212a      	movs	r1, #42	@ 0x2a
 80047ea:	438a      	bics	r2, r1
 80047ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2101      	movs	r1, #1
 80047fa:	430a      	orrs	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0018      	movs	r0, r3
 8004802:	f000 fadd 	bl	8004dc0 <UART_CheckIdleState>
 8004806:	0003      	movs	r3, r0
}
 8004808:	0018      	movs	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	b002      	add	sp, #8
 800480e:	bd80      	pop	{r7, pc}
 8004810:	ffffb7ff 	.word	0xffffb7ff

08004814 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08a      	sub	sp, #40	@ 0x28
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	1dbb      	adds	r3, r7, #6
 8004822:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2288      	movs	r2, #136	@ 0x88
 8004828:	589b      	ldr	r3, [r3, r2]
 800482a:	2b20      	cmp	r3, #32
 800482c:	d000      	beq.n	8004830 <HAL_UART_Transmit+0x1c>
 800482e:	e090      	b.n	8004952 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_UART_Transmit+0x2a>
 8004836:	1dbb      	adds	r3, r7, #6
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e088      	b.n	8004954 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	2380      	movs	r3, #128	@ 0x80
 8004848:	015b      	lsls	r3, r3, #5
 800484a:	429a      	cmp	r2, r3
 800484c:	d109      	bne.n	8004862 <HAL_UART_Transmit+0x4e>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d105      	bne.n	8004862 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2201      	movs	r2, #1
 800485a:	4013      	ands	r3, r2
 800485c:	d001      	beq.n	8004862 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e078      	b.n	8004954 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2290      	movs	r2, #144	@ 0x90
 8004866:	2100      	movs	r1, #0
 8004868:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2288      	movs	r2, #136	@ 0x88
 800486e:	2121      	movs	r1, #33	@ 0x21
 8004870:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004872:	f7fe f951 	bl	8002b18 <HAL_GetTick>
 8004876:	0003      	movs	r3, r0
 8004878:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1dba      	adds	r2, r7, #6
 800487e:	2154      	movs	r1, #84	@ 0x54
 8004880:	8812      	ldrh	r2, [r2, #0]
 8004882:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1dba      	adds	r2, r7, #6
 8004888:	2156      	movs	r1, #86	@ 0x56
 800488a:	8812      	ldrh	r2, [r2, #0]
 800488c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	2380      	movs	r3, #128	@ 0x80
 8004894:	015b      	lsls	r3, r3, #5
 8004896:	429a      	cmp	r2, r3
 8004898:	d108      	bne.n	80048ac <HAL_UART_Transmit+0x98>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	e003      	b.n	80048b4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048b4:	e030      	b.n	8004918 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	0013      	movs	r3, r2
 80048c0:	2200      	movs	r2, #0
 80048c2:	2180      	movs	r1, #128	@ 0x80
 80048c4:	f000 fb26 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 80048c8:	1e03      	subs	r3, r0, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2288      	movs	r2, #136	@ 0x88
 80048d0:	2120      	movs	r1, #32
 80048d2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e03d      	b.n	8004954 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10b      	bne.n	80048f6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	001a      	movs	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	05d2      	lsls	r2, r2, #23
 80048ea:	0dd2      	lsrs	r2, r2, #23
 80048ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	3302      	adds	r3, #2
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	e007      	b.n	8004906 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	781a      	ldrb	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	3301      	adds	r3, #1
 8004904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2256      	movs	r2, #86	@ 0x56
 800490a:	5a9b      	ldrh	r3, [r3, r2]
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b299      	uxth	r1, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2256      	movs	r2, #86	@ 0x56
 8004916:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2256      	movs	r2, #86	@ 0x56
 800491c:	5a9b      	ldrh	r3, [r3, r2]
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1c8      	bne.n	80048b6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	0013      	movs	r3, r2
 800492e:	2200      	movs	r2, #0
 8004930:	2140      	movs	r1, #64	@ 0x40
 8004932:	f000 faef 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004936:	1e03      	subs	r3, r0, #0
 8004938:	d005      	beq.n	8004946 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2288      	movs	r2, #136	@ 0x88
 800493e:	2120      	movs	r1, #32
 8004940:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e006      	b.n	8004954 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2288      	movs	r2, #136	@ 0x88
 800494a:	2120      	movs	r1, #32
 800494c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e000      	b.n	8004954 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004952:	2302      	movs	r3, #2
  }
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b008      	add	sp, #32
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004964:	231e      	movs	r3, #30
 8004966:	18fb      	adds	r3, r7, r3
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4aab      	ldr	r2, [pc, #684]	@ (8004c38 <UART_SetConfig+0x2dc>)
 800498c:	4013      	ands	r3, r2
 800498e:	0019      	movs	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	4aa6      	ldr	r2, [pc, #664]	@ (8004c3c <UART_SetConfig+0x2e0>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	0019      	movs	r1, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a9d      	ldr	r2, [pc, #628]	@ (8004c40 <UART_SetConfig+0x2e4>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	0019      	movs	r1, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	220f      	movs	r2, #15
 80049e0:	4393      	bics	r3, r2
 80049e2:	0019      	movs	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a93      	ldr	r2, [pc, #588]	@ (8004c44 <UART_SetConfig+0x2e8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d127      	bne.n	8004a4a <UART_SetConfig+0xee>
 80049fa:	4b93      	ldr	r3, [pc, #588]	@ (8004c48 <UART_SetConfig+0x2ec>)
 80049fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fe:	2203      	movs	r2, #3
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d017      	beq.n	8004a36 <UART_SetConfig+0xda>
 8004a06:	d81b      	bhi.n	8004a40 <UART_SetConfig+0xe4>
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d00a      	beq.n	8004a22 <UART_SetConfig+0xc6>
 8004a0c:	d818      	bhi.n	8004a40 <UART_SetConfig+0xe4>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <UART_SetConfig+0xbc>
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d00a      	beq.n	8004a2c <UART_SetConfig+0xd0>
 8004a16:	e013      	b.n	8004a40 <UART_SetConfig+0xe4>
 8004a18:	231f      	movs	r3, #31
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	e021      	b.n	8004a66 <UART_SetConfig+0x10a>
 8004a22:	231f      	movs	r3, #31
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	2202      	movs	r2, #2
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e01c      	b.n	8004a66 <UART_SetConfig+0x10a>
 8004a2c:	231f      	movs	r3, #31
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	2204      	movs	r2, #4
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e017      	b.n	8004a66 <UART_SetConfig+0x10a>
 8004a36:	231f      	movs	r3, #31
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e012      	b.n	8004a66 <UART_SetConfig+0x10a>
 8004a40:	231f      	movs	r3, #31
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	2210      	movs	r2, #16
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	e00d      	b.n	8004a66 <UART_SetConfig+0x10a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a7f      	ldr	r2, [pc, #508]	@ (8004c4c <UART_SetConfig+0x2f0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d104      	bne.n	8004a5e <UART_SetConfig+0x102>
 8004a54:	231f      	movs	r3, #31
 8004a56:	18fb      	adds	r3, r7, r3
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	e003      	b.n	8004a66 <UART_SetConfig+0x10a>
 8004a5e:	231f      	movs	r3, #31
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	2210      	movs	r2, #16
 8004a64:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	2380      	movs	r3, #128	@ 0x80
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d000      	beq.n	8004a74 <UART_SetConfig+0x118>
 8004a72:	e06f      	b.n	8004b54 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004a74:	231f      	movs	r3, #31
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d01f      	beq.n	8004abe <UART_SetConfig+0x162>
 8004a7e:	dc22      	bgt.n	8004ac6 <UART_SetConfig+0x16a>
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d017      	beq.n	8004ab4 <UART_SetConfig+0x158>
 8004a84:	dc1f      	bgt.n	8004ac6 <UART_SetConfig+0x16a>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <UART_SetConfig+0x134>
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d005      	beq.n	8004a9a <UART_SetConfig+0x13e>
 8004a8e:	e01a      	b.n	8004ac6 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a90:	f7ff fc9c 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 8004a94:	0003      	movs	r3, r0
 8004a96:	61bb      	str	r3, [r7, #24]
        break;
 8004a98:	e01c      	b.n	8004ad4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004a9a:	4b6b      	ldr	r3, [pc, #428]	@ (8004c48 <UART_SetConfig+0x2ec>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	4869      	ldr	r0, [pc, #420]	@ (8004c50 <UART_SetConfig+0x2f4>)
 8004aaa:	f7fb fb3f 	bl	800012c <__udivsi3>
 8004aae:	0003      	movs	r3, r0
 8004ab0:	61bb      	str	r3, [r7, #24]
        break;
 8004ab2:	e00f      	b.n	8004ad4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab4:	f7ff fc2a 	bl	800430c <HAL_RCC_GetSysClockFreq>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	61bb      	str	r3, [r7, #24]
        break;
 8004abc:	e00a      	b.n	8004ad4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004abe:	2380      	movs	r3, #128	@ 0x80
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	61bb      	str	r3, [r7, #24]
        break;
 8004ac4:	e006      	b.n	8004ad4 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aca:	231e      	movs	r3, #30
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	2201      	movs	r2, #1
 8004ad0:	701a      	strb	r2, [r3, #0]
        break;
 8004ad2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d100      	bne.n	8004adc <UART_SetConfig+0x180>
 8004ada:	e097      	b.n	8004c0c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ae0:	4b5c      	ldr	r3, [pc, #368]	@ (8004c54 <UART_SetConfig+0x2f8>)
 8004ae2:	0052      	lsls	r2, r2, #1
 8004ae4:	5ad3      	ldrh	r3, [r2, r3]
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	69b8      	ldr	r0, [r7, #24]
 8004aea:	f7fb fb1f 	bl	800012c <__udivsi3>
 8004aee:	0003      	movs	r3, r0
 8004af0:	005a      	lsls	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	18d2      	adds	r2, r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	0019      	movs	r1, r3
 8004b00:	0010      	movs	r0, r2
 8004b02:	f7fb fb13 	bl	800012c <__udivsi3>
 8004b06:	0003      	movs	r3, r0
 8004b08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b0f      	cmp	r3, #15
 8004b0e:	d91c      	bls.n	8004b4a <UART_SetConfig+0x1ee>
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	2380      	movs	r3, #128	@ 0x80
 8004b14:	025b      	lsls	r3, r3, #9
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d217      	bcs.n	8004b4a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	200e      	movs	r0, #14
 8004b20:	183b      	adds	r3, r7, r0
 8004b22:	210f      	movs	r1, #15
 8004b24:	438a      	bics	r2, r1
 8004b26:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2207      	movs	r2, #7
 8004b30:	4013      	ands	r3, r2
 8004b32:	b299      	uxth	r1, r3
 8004b34:	183b      	adds	r3, r7, r0
 8004b36:	183a      	adds	r2, r7, r0
 8004b38:	8812      	ldrh	r2, [r2, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	183a      	adds	r2, r7, r0
 8004b44:	8812      	ldrh	r2, [r2, #0]
 8004b46:	60da      	str	r2, [r3, #12]
 8004b48:	e060      	b.n	8004c0c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b4a:	231e      	movs	r3, #30
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e05b      	b.n	8004c0c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b54:	231f      	movs	r3, #31
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d01f      	beq.n	8004b9e <UART_SetConfig+0x242>
 8004b5e:	dc22      	bgt.n	8004ba6 <UART_SetConfig+0x24a>
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d017      	beq.n	8004b94 <UART_SetConfig+0x238>
 8004b64:	dc1f      	bgt.n	8004ba6 <UART_SetConfig+0x24a>
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <UART_SetConfig+0x214>
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d005      	beq.n	8004b7a <UART_SetConfig+0x21e>
 8004b6e:	e01a      	b.n	8004ba6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b70:	f7ff fc2c 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 8004b74:	0003      	movs	r3, r0
 8004b76:	61bb      	str	r3, [r7, #24]
        break;
 8004b78:	e01c      	b.n	8004bb4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004b7a:	4b33      	ldr	r3, [pc, #204]	@ (8004c48 <UART_SetConfig+0x2ec>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	2207      	movs	r2, #7
 8004b82:	4013      	ands	r3, r2
 8004b84:	3301      	adds	r3, #1
 8004b86:	0019      	movs	r1, r3
 8004b88:	4831      	ldr	r0, [pc, #196]	@ (8004c50 <UART_SetConfig+0x2f4>)
 8004b8a:	f7fb facf 	bl	800012c <__udivsi3>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	61bb      	str	r3, [r7, #24]
        break;
 8004b92:	e00f      	b.n	8004bb4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b94:	f7ff fbba 	bl	800430c <HAL_RCC_GetSysClockFreq>
 8004b98:	0003      	movs	r3, r0
 8004b9a:	61bb      	str	r3, [r7, #24]
        break;
 8004b9c:	e00a      	b.n	8004bb4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b9e:	2380      	movs	r3, #128	@ 0x80
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	61bb      	str	r3, [r7, #24]
        break;
 8004ba4:	e006      	b.n	8004bb4 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004baa:	231e      	movs	r3, #30
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	2201      	movs	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
        break;
 8004bb2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d028      	beq.n	8004c0c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bbe:	4b25      	ldr	r3, [pc, #148]	@ (8004c54 <UART_SetConfig+0x2f8>)
 8004bc0:	0052      	lsls	r2, r2, #1
 8004bc2:	5ad3      	ldrh	r3, [r2, r3]
 8004bc4:	0019      	movs	r1, r3
 8004bc6:	69b8      	ldr	r0, [r7, #24]
 8004bc8:	f7fb fab0 	bl	800012c <__udivsi3>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	001a      	movs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	085b      	lsrs	r3, r3, #1
 8004bd6:	18d2      	adds	r2, r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	0019      	movs	r1, r3
 8004bde:	0010      	movs	r0, r2
 8004be0:	f7fb faa4 	bl	800012c <__udivsi3>
 8004be4:	0003      	movs	r3, r0
 8004be6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b0f      	cmp	r3, #15
 8004bec:	d90a      	bls.n	8004c04 <UART_SetConfig+0x2a8>
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	2380      	movs	r3, #128	@ 0x80
 8004bf2:	025b      	lsls	r3, r3, #9
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d205      	bcs.n	8004c04 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	e003      	b.n	8004c0c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c04:	231e      	movs	r3, #30
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	226a      	movs	r2, #106	@ 0x6a
 8004c10:	2101      	movs	r1, #1
 8004c12:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2268      	movs	r2, #104	@ 0x68
 8004c18:	2101      	movs	r1, #1
 8004c1a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c28:	231e      	movs	r3, #30
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	781b      	ldrb	r3, [r3, #0]
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b008      	add	sp, #32
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	cfff69f3 	.word	0xcfff69f3
 8004c3c:	ffffcfff 	.word	0xffffcfff
 8004c40:	11fff4ff 	.word	0x11fff4ff
 8004c44:	40013800 	.word	0x40013800
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40004400 	.word	0x40004400
 8004c50:	02dc6c00 	.word	0x02dc6c00
 8004c54:	08005d28 	.word	0x08005d28

08004c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c64:	2208      	movs	r2, #8
 8004c66:	4013      	ands	r3, r2
 8004c68:	d00b      	beq.n	8004c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	4a4a      	ldr	r2, [pc, #296]	@ (8004d9c <UART_AdvFeatureConfig+0x144>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	0019      	movs	r1, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c86:	2201      	movs	r2, #1
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d00b      	beq.n	8004ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4a43      	ldr	r2, [pc, #268]	@ (8004da0 <UART_AdvFeatureConfig+0x148>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	2202      	movs	r2, #2
 8004caa:	4013      	ands	r3, r2
 8004cac:	d00b      	beq.n	8004cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8004da4 <UART_AdvFeatureConfig+0x14c>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	0019      	movs	r1, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cca:	2204      	movs	r2, #4
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d00b      	beq.n	8004ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4a34      	ldr	r2, [pc, #208]	@ (8004da8 <UART_AdvFeatureConfig+0x150>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	0019      	movs	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	2210      	movs	r2, #16
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d00b      	beq.n	8004d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8004dac <UART_AdvFeatureConfig+0x154>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	0019      	movs	r1, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0e:	2220      	movs	r2, #32
 8004d10:	4013      	ands	r3, r2
 8004d12:	d00b      	beq.n	8004d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	4a25      	ldr	r2, [pc, #148]	@ (8004db0 <UART_AdvFeatureConfig+0x158>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	0019      	movs	r1, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	2240      	movs	r2, #64	@ 0x40
 8004d32:	4013      	ands	r3, r2
 8004d34:	d01d      	beq.n	8004d72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004db4 <UART_AdvFeatureConfig+0x15c>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	0019      	movs	r1, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d52:	2380      	movs	r3, #128	@ 0x80
 8004d54:	035b      	lsls	r3, r3, #13
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d10b      	bne.n	8004d72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	4a15      	ldr	r2, [pc, #84]	@ (8004db8 <UART_AdvFeatureConfig+0x160>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	0019      	movs	r1, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	2280      	movs	r2, #128	@ 0x80
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	4a0e      	ldr	r2, [pc, #56]	@ (8004dbc <UART_AdvFeatureConfig+0x164>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	0019      	movs	r1, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }
}
 8004d94:	46c0      	nop			@ (mov r8, r8)
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b002      	add	sp, #8
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	ffff7fff 	.word	0xffff7fff
 8004da0:	fffdffff 	.word	0xfffdffff
 8004da4:	fffeffff 	.word	0xfffeffff
 8004da8:	fffbffff 	.word	0xfffbffff
 8004dac:	ffffefff 	.word	0xffffefff
 8004db0:	ffffdfff 	.word	0xffffdfff
 8004db4:	ffefffff 	.word	0xffefffff
 8004db8:	ff9fffff 	.word	0xff9fffff
 8004dbc:	fff7ffff 	.word	0xfff7ffff

08004dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b092      	sub	sp, #72	@ 0x48
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2290      	movs	r2, #144	@ 0x90
 8004dcc:	2100      	movs	r1, #0
 8004dce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dd0:	f7fd fea2 	bl	8002b18 <HAL_GetTick>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2208      	movs	r2, #8
 8004de0:	4013      	ands	r3, r2
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d12d      	bne.n	8004e42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de8:	2280      	movs	r2, #128	@ 0x80
 8004dea:	0391      	lsls	r1, r2, #14
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	4a47      	ldr	r2, [pc, #284]	@ (8004f0c <UART_CheckIdleState+0x14c>)
 8004df0:	9200      	str	r2, [sp, #0]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f000 f88e 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004df8:	1e03      	subs	r3, r0, #0
 8004dfa:	d022      	beq.n	8004e42 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e06:	2301      	movs	r3, #1
 8004e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0c:	f383 8810 	msr	PRIMASK, r3
}
 8004e10:	46c0      	nop			@ (mov r8, r8)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2180      	movs	r1, #128	@ 0x80
 8004e1e:	438a      	bics	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e28:	f383 8810 	msr	PRIMASK, r3
}
 8004e2c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2288      	movs	r2, #136	@ 0x88
 8004e32:	2120      	movs	r1, #32
 8004e34:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2284      	movs	r2, #132	@ 0x84
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e060      	b.n	8004f04 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2204      	movs	r2, #4
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d146      	bne.n	8004ede <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e52:	2280      	movs	r2, #128	@ 0x80
 8004e54:	03d1      	lsls	r1, r2, #15
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	4a2c      	ldr	r2, [pc, #176]	@ (8004f0c <UART_CheckIdleState+0x14c>)
 8004e5a:	9200      	str	r2, [sp, #0]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f000 f859 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004e62:	1e03      	subs	r3, r0, #0
 8004e64:	d03b      	beq.n	8004ede <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e66:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e70:	2301      	movs	r3, #1
 8004e72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f383 8810 	msr	PRIMASK, r3
}
 8004e7a:	46c0      	nop			@ (mov r8, r8)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4922      	ldr	r1, [pc, #136]	@ (8004f10 <UART_CheckIdleState+0x150>)
 8004e88:	400a      	ands	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f383 8810 	msr	PRIMASK, r3
}
 8004e96:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e98:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e9e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f383 8810 	msr	PRIMASK, r3
}
 8004eac:	46c0      	nop			@ (mov r8, r8)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2101      	movs	r1, #1
 8004eba:	438a      	bics	r2, r1
 8004ebc:	609a      	str	r2, [r3, #8]
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	f383 8810 	msr	PRIMASK, r3
}
 8004ec8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	228c      	movs	r2, #140	@ 0x8c
 8004ece:	2120      	movs	r1, #32
 8004ed0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2284      	movs	r2, #132	@ 0x84
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e012      	b.n	8004f04 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2288      	movs	r2, #136	@ 0x88
 8004ee2:	2120      	movs	r1, #32
 8004ee4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	228c      	movs	r2, #140	@ 0x8c
 8004eea:	2120      	movs	r1, #32
 8004eec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2284      	movs	r2, #132	@ 0x84
 8004efe:	2100      	movs	r1, #0
 8004f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b010      	add	sp, #64	@ 0x40
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	01ffffff 	.word	0x01ffffff
 8004f10:	fffffedf 	.word	0xfffffedf

08004f14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	1dfb      	adds	r3, r7, #7
 8004f22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f24:	e051      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	d04e      	beq.n	8004fca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2c:	f7fd fdf4 	bl	8002b18 <HAL_GetTick>
 8004f30:	0002      	movs	r2, r0
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e051      	b.n	8004fea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d03b      	beq.n	8004fca <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b80      	cmp	r3, #128	@ 0x80
 8004f56:	d038      	beq.n	8004fca <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b40      	cmp	r3, #64	@ 0x40
 8004f5c:	d035      	beq.n	8004fca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	2208      	movs	r2, #8
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d111      	bne.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2208      	movs	r2, #8
 8004f72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	0018      	movs	r0, r3
 8004f78:	f000 f83c 	bl	8004ff4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2290      	movs	r2, #144	@ 0x90
 8004f80:	2108      	movs	r1, #8
 8004f82:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2284      	movs	r2, #132	@ 0x84
 8004f88:	2100      	movs	r1, #0
 8004f8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e02c      	b.n	8004fea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69da      	ldr	r2, [r3, #28]
 8004f96:	2380      	movs	r3, #128	@ 0x80
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	2380      	movs	r3, #128	@ 0x80
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d112      	bne.n	8004fca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2280      	movs	r2, #128	@ 0x80
 8004faa:	0112      	lsls	r2, r2, #4
 8004fac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f000 f81f 	bl	8004ff4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2290      	movs	r2, #144	@ 0x90
 8004fba:	2120      	movs	r1, #32
 8004fbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2284      	movs	r2, #132	@ 0x84
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e00f      	b.n	8004fea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	425a      	negs	r2, r3
 8004fda:	4153      	adcs	r3, r2
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	001a      	movs	r2, r3
 8004fe0:	1dfb      	adds	r3, r7, #7
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d09e      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	0018      	movs	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b004      	add	sp, #16
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08e      	sub	sp, #56	@ 0x38
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8005000:	617b      	str	r3, [r7, #20]
  return(result);
 8005002:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005004:	637b      	str	r3, [r7, #52]	@ 0x34
 8005006:	2301      	movs	r3, #1
 8005008:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f383 8810 	msr	PRIMASK, r3
}
 8005010:	46c0      	nop			@ (mov r8, r8)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4926      	ldr	r1, [pc, #152]	@ (80050b8 <UART_EndRxTransfer+0xc4>)
 800501e:	400a      	ands	r2, r1
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	f383 8810 	msr	PRIMASK, r3
}
 800502c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800502e:	f3ef 8310 	mrs	r3, PRIMASK
 8005032:	623b      	str	r3, [r7, #32]
  return(result);
 8005034:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005036:	633b      	str	r3, [r7, #48]	@ 0x30
 8005038:	2301      	movs	r3, #1
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	f383 8810 	msr	PRIMASK, r3
}
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	491b      	ldr	r1, [pc, #108]	@ (80050bc <UART_EndRxTransfer+0xc8>)
 8005050:	400a      	ands	r2, r1
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005056:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505a:	f383 8810 	msr	PRIMASK, r3
}
 800505e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d118      	bne.n	800509a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005068:	f3ef 8310 	mrs	r3, PRIMASK
 800506c:	60bb      	str	r3, [r7, #8]
  return(result);
 800506e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005072:	2301      	movs	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f383 8810 	msr	PRIMASK, r3
}
 800507c:	46c0      	nop			@ (mov r8, r8)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2110      	movs	r1, #16
 800508a:	438a      	bics	r2, r1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005090:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f383 8810 	msr	PRIMASK, r3
}
 8005098:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	228c      	movs	r2, #140	@ 0x8c
 800509e:	2120      	movs	r1, #32
 80050a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80050ae:	46c0      	nop			@ (mov r8, r8)
 80050b0:	46bd      	mov	sp, r7
 80050b2:	b00e      	add	sp, #56	@ 0x38
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	46c0      	nop			@ (mov r8, r8)
 80050b8:	fffffedf 	.word	0xfffffedf
 80050bc:	effffffe 	.word	0xeffffffe

080050c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2284      	movs	r2, #132	@ 0x84
 80050cc:	5c9b      	ldrb	r3, [r3, r2]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e027      	b.n	8005126 <HAL_UARTEx_DisableFifoMode+0x66>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2284      	movs	r2, #132	@ 0x84
 80050da:	2101      	movs	r1, #1
 80050dc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2288      	movs	r2, #136	@ 0x88
 80050e2:	2124      	movs	r1, #36	@ 0x24
 80050e4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2101      	movs	r1, #1
 80050fa:	438a      	bics	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a0b      	ldr	r2, [pc, #44]	@ (8005130 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005102:	4013      	ands	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2288      	movs	r2, #136	@ 0x88
 8005118:	2120      	movs	r1, #32
 800511a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2284      	movs	r2, #132	@ 0x84
 8005120:	2100      	movs	r1, #0
 8005122:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	0018      	movs	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	b004      	add	sp, #16
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	dfffffff 	.word	0xdfffffff

08005134 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2284      	movs	r2, #132	@ 0x84
 8005142:	5c9b      	ldrb	r3, [r3, r2]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005148:	2302      	movs	r3, #2
 800514a:	e02e      	b.n	80051aa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2284      	movs	r2, #132	@ 0x84
 8005150:	2101      	movs	r1, #1
 8005152:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2288      	movs	r2, #136	@ 0x88
 8005158:	2124      	movs	r1, #36	@ 0x24
 800515a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2101      	movs	r1, #1
 8005170:	438a      	bics	r2, r1
 8005172:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	08d9      	lsrs	r1, r3, #3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	0018      	movs	r0, r3
 800518c:	f000 f854 	bl	8005238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2288      	movs	r2, #136	@ 0x88
 800519c:	2120      	movs	r1, #32
 800519e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2284      	movs	r2, #132	@ 0x84
 80051a4:	2100      	movs	r1, #0
 80051a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b004      	add	sp, #16
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2284      	movs	r2, #132	@ 0x84
 80051c2:	5c9b      	ldrb	r3, [r3, r2]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e02f      	b.n	800522c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2284      	movs	r2, #132	@ 0x84
 80051d0:	2101      	movs	r1, #1
 80051d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2288      	movs	r2, #136	@ 0x88
 80051d8:	2124      	movs	r1, #36	@ 0x24
 80051da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2101      	movs	r1, #1
 80051f0:	438a      	bics	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005234 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	0019      	movs	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	0018      	movs	r0, r3
 800520e:	f000 f813 	bl	8005238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2288      	movs	r2, #136	@ 0x88
 800521e:	2120      	movs	r1, #32
 8005220:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2284      	movs	r2, #132	@ 0x84
 8005226:	2100      	movs	r1, #0
 8005228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	0018      	movs	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	b004      	add	sp, #16
 8005232:	bd80      	pop	{r7, pc}
 8005234:	f1ffffff 	.word	0xf1ffffff

08005238 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005244:	2b00      	cmp	r3, #0
 8005246:	d108      	bne.n	800525a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	226a      	movs	r2, #106	@ 0x6a
 800524c:	2101      	movs	r1, #1
 800524e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2268      	movs	r2, #104	@ 0x68
 8005254:	2101      	movs	r1, #1
 8005256:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005258:	e043      	b.n	80052e2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800525a:	260f      	movs	r6, #15
 800525c:	19bb      	adds	r3, r7, r6
 800525e:	2208      	movs	r2, #8
 8005260:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005262:	200e      	movs	r0, #14
 8005264:	183b      	adds	r3, r7, r0
 8005266:	2208      	movs	r2, #8
 8005268:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	0e5b      	lsrs	r3, r3, #25
 8005272:	b2da      	uxtb	r2, r3
 8005274:	240d      	movs	r4, #13
 8005276:	193b      	adds	r3, r7, r4
 8005278:	2107      	movs	r1, #7
 800527a:	400a      	ands	r2, r1
 800527c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	0f5b      	lsrs	r3, r3, #29
 8005286:	b2da      	uxtb	r2, r3
 8005288:	250c      	movs	r5, #12
 800528a:	197b      	adds	r3, r7, r5
 800528c:	2107      	movs	r1, #7
 800528e:	400a      	ands	r2, r1
 8005290:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005292:	183b      	adds	r3, r7, r0
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	197a      	adds	r2, r7, r5
 8005298:	7812      	ldrb	r2, [r2, #0]
 800529a:	4914      	ldr	r1, [pc, #80]	@ (80052ec <UARTEx_SetNbDataToProcess+0xb4>)
 800529c:	5c8a      	ldrb	r2, [r1, r2]
 800529e:	435a      	muls	r2, r3
 80052a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80052a2:	197b      	adds	r3, r7, r5
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	4a12      	ldr	r2, [pc, #72]	@ (80052f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80052a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052aa:	0019      	movs	r1, r3
 80052ac:	f7fa ffc8 	bl	8000240 <__divsi3>
 80052b0:	0003      	movs	r3, r0
 80052b2:	b299      	uxth	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	226a      	movs	r2, #106	@ 0x6a
 80052b8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ba:	19bb      	adds	r3, r7, r6
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	193a      	adds	r2, r7, r4
 80052c0:	7812      	ldrb	r2, [r2, #0]
 80052c2:	490a      	ldr	r1, [pc, #40]	@ (80052ec <UARTEx_SetNbDataToProcess+0xb4>)
 80052c4:	5c8a      	ldrb	r2, [r1, r2]
 80052c6:	435a      	muls	r2, r3
 80052c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80052ca:	193b      	adds	r3, r7, r4
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	4a08      	ldr	r2, [pc, #32]	@ (80052f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80052d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052d2:	0019      	movs	r1, r3
 80052d4:	f7fa ffb4 	bl	8000240 <__divsi3>
 80052d8:	0003      	movs	r3, r0
 80052da:	b299      	uxth	r1, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2268      	movs	r2, #104	@ 0x68
 80052e0:	5299      	strh	r1, [r3, r2]
}
 80052e2:	46c0      	nop			@ (mov r8, r8)
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b005      	add	sp, #20
 80052e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	08005d40 	.word	0x08005d40
 80052f0:	08005d48 	.word	0x08005d48

080052f4 <sniprintf>:
 80052f4:	b40c      	push	{r2, r3}
 80052f6:	b530      	push	{r4, r5, lr}
 80052f8:	4b18      	ldr	r3, [pc, #96]	@ (800535c <sniprintf+0x68>)
 80052fa:	000c      	movs	r4, r1
 80052fc:	681d      	ldr	r5, [r3, #0]
 80052fe:	b09d      	sub	sp, #116	@ 0x74
 8005300:	2900      	cmp	r1, #0
 8005302:	da08      	bge.n	8005316 <sniprintf+0x22>
 8005304:	238b      	movs	r3, #139	@ 0x8b
 8005306:	2001      	movs	r0, #1
 8005308:	602b      	str	r3, [r5, #0]
 800530a:	4240      	negs	r0, r0
 800530c:	b01d      	add	sp, #116	@ 0x74
 800530e:	bc30      	pop	{r4, r5}
 8005310:	bc08      	pop	{r3}
 8005312:	b002      	add	sp, #8
 8005314:	4718      	bx	r3
 8005316:	2382      	movs	r3, #130	@ 0x82
 8005318:	466a      	mov	r2, sp
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	8293      	strh	r3, [r2, #20]
 800531e:	2300      	movs	r3, #0
 8005320:	9002      	str	r0, [sp, #8]
 8005322:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005324:	9006      	str	r0, [sp, #24]
 8005326:	4299      	cmp	r1, r3
 8005328:	d000      	beq.n	800532c <sniprintf+0x38>
 800532a:	1e4b      	subs	r3, r1, #1
 800532c:	9304      	str	r3, [sp, #16]
 800532e:	9307      	str	r3, [sp, #28]
 8005330:	2301      	movs	r3, #1
 8005332:	466a      	mov	r2, sp
 8005334:	425b      	negs	r3, r3
 8005336:	82d3      	strh	r3, [r2, #22]
 8005338:	0028      	movs	r0, r5
 800533a:	ab21      	add	r3, sp, #132	@ 0x84
 800533c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800533e:	a902      	add	r1, sp, #8
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	f000 f99d 	bl	8005680 <_svfiprintf_r>
 8005346:	1c43      	adds	r3, r0, #1
 8005348:	da01      	bge.n	800534e <sniprintf+0x5a>
 800534a:	238b      	movs	r3, #139	@ 0x8b
 800534c:	602b      	str	r3, [r5, #0]
 800534e:	2c00      	cmp	r4, #0
 8005350:	d0dc      	beq.n	800530c <sniprintf+0x18>
 8005352:	2200      	movs	r2, #0
 8005354:	9b02      	ldr	r3, [sp, #8]
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e7d8      	b.n	800530c <sniprintf+0x18>
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	2000000c 	.word	0x2000000c

08005360 <memset>:
 8005360:	0003      	movs	r3, r0
 8005362:	1882      	adds	r2, r0, r2
 8005364:	4293      	cmp	r3, r2
 8005366:	d100      	bne.n	800536a <memset+0xa>
 8005368:	4770      	bx	lr
 800536a:	7019      	strb	r1, [r3, #0]
 800536c:	3301      	adds	r3, #1
 800536e:	e7f9      	b.n	8005364 <memset+0x4>

08005370 <__errno>:
 8005370:	4b01      	ldr	r3, [pc, #4]	@ (8005378 <__errno+0x8>)
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	4770      	bx	lr
 8005376:	46c0      	nop			@ (mov r8, r8)
 8005378:	2000000c 	.word	0x2000000c

0800537c <__libc_init_array>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	2600      	movs	r6, #0
 8005380:	4c0c      	ldr	r4, [pc, #48]	@ (80053b4 <__libc_init_array+0x38>)
 8005382:	4d0d      	ldr	r5, [pc, #52]	@ (80053b8 <__libc_init_array+0x3c>)
 8005384:	1b64      	subs	r4, r4, r5
 8005386:	10a4      	asrs	r4, r4, #2
 8005388:	42a6      	cmp	r6, r4
 800538a:	d109      	bne.n	80053a0 <__libc_init_array+0x24>
 800538c:	2600      	movs	r6, #0
 800538e:	f000 fc61 	bl	8005c54 <_init>
 8005392:	4c0a      	ldr	r4, [pc, #40]	@ (80053bc <__libc_init_array+0x40>)
 8005394:	4d0a      	ldr	r5, [pc, #40]	@ (80053c0 <__libc_init_array+0x44>)
 8005396:	1b64      	subs	r4, r4, r5
 8005398:	10a4      	asrs	r4, r4, #2
 800539a:	42a6      	cmp	r6, r4
 800539c:	d105      	bne.n	80053aa <__libc_init_array+0x2e>
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	00b3      	lsls	r3, r6, #2
 80053a2:	58eb      	ldr	r3, [r5, r3]
 80053a4:	4798      	blx	r3
 80053a6:	3601      	adds	r6, #1
 80053a8:	e7ee      	b.n	8005388 <__libc_init_array+0xc>
 80053aa:	00b3      	lsls	r3, r6, #2
 80053ac:	58eb      	ldr	r3, [r5, r3]
 80053ae:	4798      	blx	r3
 80053b0:	3601      	adds	r6, #1
 80053b2:	e7f2      	b.n	800539a <__libc_init_array+0x1e>
 80053b4:	08005d84 	.word	0x08005d84
 80053b8:	08005d84 	.word	0x08005d84
 80053bc:	08005d88 	.word	0x08005d88
 80053c0:	08005d84 	.word	0x08005d84

080053c4 <__retarget_lock_acquire_recursive>:
 80053c4:	4770      	bx	lr

080053c6 <__retarget_lock_release_recursive>:
 80053c6:	4770      	bx	lr

080053c8 <_free_r>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	0005      	movs	r5, r0
 80053cc:	1e0c      	subs	r4, r1, #0
 80053ce:	d010      	beq.n	80053f2 <_free_r+0x2a>
 80053d0:	3c04      	subs	r4, #4
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	da00      	bge.n	80053da <_free_r+0x12>
 80053d8:	18e4      	adds	r4, r4, r3
 80053da:	0028      	movs	r0, r5
 80053dc:	f000 f8e0 	bl	80055a0 <__malloc_lock>
 80053e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005458 <_free_r+0x90>)
 80053e2:	6813      	ldr	r3, [r2, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <_free_r+0x2c>
 80053e8:	6063      	str	r3, [r4, #4]
 80053ea:	6014      	str	r4, [r2, #0]
 80053ec:	0028      	movs	r0, r5
 80053ee:	f000 f8df 	bl	80055b0 <__malloc_unlock>
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	d908      	bls.n	800540a <_free_r+0x42>
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	1821      	adds	r1, r4, r0
 80053fc:	428b      	cmp	r3, r1
 80053fe:	d1f3      	bne.n	80053e8 <_free_r+0x20>
 8005400:	6819      	ldr	r1, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	1809      	adds	r1, r1, r0
 8005406:	6021      	str	r1, [r4, #0]
 8005408:	e7ee      	b.n	80053e8 <_free_r+0x20>
 800540a:	001a      	movs	r2, r3
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <_free_r+0x4e>
 8005412:	42a3      	cmp	r3, r4
 8005414:	d9f9      	bls.n	800540a <_free_r+0x42>
 8005416:	6811      	ldr	r1, [r2, #0]
 8005418:	1850      	adds	r0, r2, r1
 800541a:	42a0      	cmp	r0, r4
 800541c:	d10b      	bne.n	8005436 <_free_r+0x6e>
 800541e:	6820      	ldr	r0, [r4, #0]
 8005420:	1809      	adds	r1, r1, r0
 8005422:	1850      	adds	r0, r2, r1
 8005424:	6011      	str	r1, [r2, #0]
 8005426:	4283      	cmp	r3, r0
 8005428:	d1e0      	bne.n	80053ec <_free_r+0x24>
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	1841      	adds	r1, r0, r1
 8005430:	6011      	str	r1, [r2, #0]
 8005432:	6053      	str	r3, [r2, #4]
 8005434:	e7da      	b.n	80053ec <_free_r+0x24>
 8005436:	42a0      	cmp	r0, r4
 8005438:	d902      	bls.n	8005440 <_free_r+0x78>
 800543a:	230c      	movs	r3, #12
 800543c:	602b      	str	r3, [r5, #0]
 800543e:	e7d5      	b.n	80053ec <_free_r+0x24>
 8005440:	6820      	ldr	r0, [r4, #0]
 8005442:	1821      	adds	r1, r4, r0
 8005444:	428b      	cmp	r3, r1
 8005446:	d103      	bne.n	8005450 <_free_r+0x88>
 8005448:	6819      	ldr	r1, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	1809      	adds	r1, r1, r0
 800544e:	6021      	str	r1, [r4, #0]
 8005450:	6063      	str	r3, [r4, #4]
 8005452:	6054      	str	r4, [r2, #4]
 8005454:	e7ca      	b.n	80053ec <_free_r+0x24>
 8005456:	46c0      	nop			@ (mov r8, r8)
 8005458:	200002fc 	.word	0x200002fc

0800545c <sbrk_aligned>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	4e0f      	ldr	r6, [pc, #60]	@ (800549c <sbrk_aligned+0x40>)
 8005460:	000d      	movs	r5, r1
 8005462:	6831      	ldr	r1, [r6, #0]
 8005464:	0004      	movs	r4, r0
 8005466:	2900      	cmp	r1, #0
 8005468:	d102      	bne.n	8005470 <sbrk_aligned+0x14>
 800546a:	f000 fb95 	bl	8005b98 <_sbrk_r>
 800546e:	6030      	str	r0, [r6, #0]
 8005470:	0029      	movs	r1, r5
 8005472:	0020      	movs	r0, r4
 8005474:	f000 fb90 	bl	8005b98 <_sbrk_r>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d103      	bne.n	8005484 <sbrk_aligned+0x28>
 800547c:	2501      	movs	r5, #1
 800547e:	426d      	negs	r5, r5
 8005480:	0028      	movs	r0, r5
 8005482:	bd70      	pop	{r4, r5, r6, pc}
 8005484:	2303      	movs	r3, #3
 8005486:	1cc5      	adds	r5, r0, #3
 8005488:	439d      	bics	r5, r3
 800548a:	42a8      	cmp	r0, r5
 800548c:	d0f8      	beq.n	8005480 <sbrk_aligned+0x24>
 800548e:	1a29      	subs	r1, r5, r0
 8005490:	0020      	movs	r0, r4
 8005492:	f000 fb81 	bl	8005b98 <_sbrk_r>
 8005496:	3001      	adds	r0, #1
 8005498:	d1f2      	bne.n	8005480 <sbrk_aligned+0x24>
 800549a:	e7ef      	b.n	800547c <sbrk_aligned+0x20>
 800549c:	200002f8 	.word	0x200002f8

080054a0 <_malloc_r>:
 80054a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054a2:	2203      	movs	r2, #3
 80054a4:	1ccb      	adds	r3, r1, #3
 80054a6:	4393      	bics	r3, r2
 80054a8:	3308      	adds	r3, #8
 80054aa:	0005      	movs	r5, r0
 80054ac:	001f      	movs	r7, r3
 80054ae:	2b0c      	cmp	r3, #12
 80054b0:	d234      	bcs.n	800551c <_malloc_r+0x7c>
 80054b2:	270c      	movs	r7, #12
 80054b4:	42b9      	cmp	r1, r7
 80054b6:	d833      	bhi.n	8005520 <_malloc_r+0x80>
 80054b8:	0028      	movs	r0, r5
 80054ba:	f000 f871 	bl	80055a0 <__malloc_lock>
 80054be:	4e37      	ldr	r6, [pc, #220]	@ (800559c <_malloc_r+0xfc>)
 80054c0:	6833      	ldr	r3, [r6, #0]
 80054c2:	001c      	movs	r4, r3
 80054c4:	2c00      	cmp	r4, #0
 80054c6:	d12f      	bne.n	8005528 <_malloc_r+0x88>
 80054c8:	0039      	movs	r1, r7
 80054ca:	0028      	movs	r0, r5
 80054cc:	f7ff ffc6 	bl	800545c <sbrk_aligned>
 80054d0:	0004      	movs	r4, r0
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	d15f      	bne.n	8005596 <_malloc_r+0xf6>
 80054d6:	6834      	ldr	r4, [r6, #0]
 80054d8:	9400      	str	r4, [sp, #0]
 80054da:	9b00      	ldr	r3, [sp, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d14a      	bne.n	8005576 <_malloc_r+0xd6>
 80054e0:	2c00      	cmp	r4, #0
 80054e2:	d052      	beq.n	800558a <_malloc_r+0xea>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	0028      	movs	r0, r5
 80054e8:	18e3      	adds	r3, r4, r3
 80054ea:	9900      	ldr	r1, [sp, #0]
 80054ec:	9301      	str	r3, [sp, #4]
 80054ee:	f000 fb53 	bl	8005b98 <_sbrk_r>
 80054f2:	9b01      	ldr	r3, [sp, #4]
 80054f4:	4283      	cmp	r3, r0
 80054f6:	d148      	bne.n	800558a <_malloc_r+0xea>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	0028      	movs	r0, r5
 80054fc:	1aff      	subs	r7, r7, r3
 80054fe:	0039      	movs	r1, r7
 8005500:	f7ff ffac 	bl	800545c <sbrk_aligned>
 8005504:	3001      	adds	r0, #1
 8005506:	d040      	beq.n	800558a <_malloc_r+0xea>
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	19db      	adds	r3, r3, r7
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	6833      	ldr	r3, [r6, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	2a00      	cmp	r2, #0
 8005514:	d133      	bne.n	800557e <_malloc_r+0xde>
 8005516:	9b00      	ldr	r3, [sp, #0]
 8005518:	6033      	str	r3, [r6, #0]
 800551a:	e019      	b.n	8005550 <_malloc_r+0xb0>
 800551c:	2b00      	cmp	r3, #0
 800551e:	dac9      	bge.n	80054b4 <_malloc_r+0x14>
 8005520:	230c      	movs	r3, #12
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	2000      	movs	r0, #0
 8005526:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005528:	6821      	ldr	r1, [r4, #0]
 800552a:	1bc9      	subs	r1, r1, r7
 800552c:	d420      	bmi.n	8005570 <_malloc_r+0xd0>
 800552e:	290b      	cmp	r1, #11
 8005530:	d90a      	bls.n	8005548 <_malloc_r+0xa8>
 8005532:	19e2      	adds	r2, r4, r7
 8005534:	6027      	str	r7, [r4, #0]
 8005536:	42a3      	cmp	r3, r4
 8005538:	d104      	bne.n	8005544 <_malloc_r+0xa4>
 800553a:	6032      	str	r2, [r6, #0]
 800553c:	6863      	ldr	r3, [r4, #4]
 800553e:	6011      	str	r1, [r2, #0]
 8005540:	6053      	str	r3, [r2, #4]
 8005542:	e005      	b.n	8005550 <_malloc_r+0xb0>
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	e7f9      	b.n	800553c <_malloc_r+0x9c>
 8005548:	6862      	ldr	r2, [r4, #4]
 800554a:	42a3      	cmp	r3, r4
 800554c:	d10e      	bne.n	800556c <_malloc_r+0xcc>
 800554e:	6032      	str	r2, [r6, #0]
 8005550:	0028      	movs	r0, r5
 8005552:	f000 f82d 	bl	80055b0 <__malloc_unlock>
 8005556:	0020      	movs	r0, r4
 8005558:	2207      	movs	r2, #7
 800555a:	300b      	adds	r0, #11
 800555c:	1d23      	adds	r3, r4, #4
 800555e:	4390      	bics	r0, r2
 8005560:	1ac2      	subs	r2, r0, r3
 8005562:	4298      	cmp	r0, r3
 8005564:	d0df      	beq.n	8005526 <_malloc_r+0x86>
 8005566:	1a1b      	subs	r3, r3, r0
 8005568:	50a3      	str	r3, [r4, r2]
 800556a:	e7dc      	b.n	8005526 <_malloc_r+0x86>
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	e7ef      	b.n	8005550 <_malloc_r+0xb0>
 8005570:	0023      	movs	r3, r4
 8005572:	6864      	ldr	r4, [r4, #4]
 8005574:	e7a6      	b.n	80054c4 <_malloc_r+0x24>
 8005576:	9c00      	ldr	r4, [sp, #0]
 8005578:	6863      	ldr	r3, [r4, #4]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	e7ad      	b.n	80054da <_malloc_r+0x3a>
 800557e:	001a      	movs	r2, r3
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	42a3      	cmp	r3, r4
 8005584:	d1fb      	bne.n	800557e <_malloc_r+0xde>
 8005586:	2300      	movs	r3, #0
 8005588:	e7da      	b.n	8005540 <_malloc_r+0xa0>
 800558a:	230c      	movs	r3, #12
 800558c:	0028      	movs	r0, r5
 800558e:	602b      	str	r3, [r5, #0]
 8005590:	f000 f80e 	bl	80055b0 <__malloc_unlock>
 8005594:	e7c6      	b.n	8005524 <_malloc_r+0x84>
 8005596:	6007      	str	r7, [r0, #0]
 8005598:	e7da      	b.n	8005550 <_malloc_r+0xb0>
 800559a:	46c0      	nop			@ (mov r8, r8)
 800559c:	200002fc 	.word	0x200002fc

080055a0 <__malloc_lock>:
 80055a0:	b510      	push	{r4, lr}
 80055a2:	4802      	ldr	r0, [pc, #8]	@ (80055ac <__malloc_lock+0xc>)
 80055a4:	f7ff ff0e 	bl	80053c4 <__retarget_lock_acquire_recursive>
 80055a8:	bd10      	pop	{r4, pc}
 80055aa:	46c0      	nop			@ (mov r8, r8)
 80055ac:	200002f4 	.word	0x200002f4

080055b0 <__malloc_unlock>:
 80055b0:	b510      	push	{r4, lr}
 80055b2:	4802      	ldr	r0, [pc, #8]	@ (80055bc <__malloc_unlock+0xc>)
 80055b4:	f7ff ff07 	bl	80053c6 <__retarget_lock_release_recursive>
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	46c0      	nop			@ (mov r8, r8)
 80055bc:	200002f4 	.word	0x200002f4

080055c0 <__ssputs_r>:
 80055c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c2:	688e      	ldr	r6, [r1, #8]
 80055c4:	b085      	sub	sp, #20
 80055c6:	001f      	movs	r7, r3
 80055c8:	000c      	movs	r4, r1
 80055ca:	680b      	ldr	r3, [r1, #0]
 80055cc:	9002      	str	r0, [sp, #8]
 80055ce:	9203      	str	r2, [sp, #12]
 80055d0:	42be      	cmp	r6, r7
 80055d2:	d830      	bhi.n	8005636 <__ssputs_r+0x76>
 80055d4:	210c      	movs	r1, #12
 80055d6:	5e62      	ldrsh	r2, [r4, r1]
 80055d8:	2190      	movs	r1, #144	@ 0x90
 80055da:	00c9      	lsls	r1, r1, #3
 80055dc:	420a      	tst	r2, r1
 80055de:	d028      	beq.n	8005632 <__ssputs_r+0x72>
 80055e0:	2003      	movs	r0, #3
 80055e2:	6921      	ldr	r1, [r4, #16]
 80055e4:	1a5b      	subs	r3, r3, r1
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	6963      	ldr	r3, [r4, #20]
 80055ea:	4343      	muls	r3, r0
 80055ec:	9801      	ldr	r0, [sp, #4]
 80055ee:	0fdd      	lsrs	r5, r3, #31
 80055f0:	18ed      	adds	r5, r5, r3
 80055f2:	1c7b      	adds	r3, r7, #1
 80055f4:	181b      	adds	r3, r3, r0
 80055f6:	106d      	asrs	r5, r5, #1
 80055f8:	42ab      	cmp	r3, r5
 80055fa:	d900      	bls.n	80055fe <__ssputs_r+0x3e>
 80055fc:	001d      	movs	r5, r3
 80055fe:	0552      	lsls	r2, r2, #21
 8005600:	d528      	bpl.n	8005654 <__ssputs_r+0x94>
 8005602:	0029      	movs	r1, r5
 8005604:	9802      	ldr	r0, [sp, #8]
 8005606:	f7ff ff4b 	bl	80054a0 <_malloc_r>
 800560a:	1e06      	subs	r6, r0, #0
 800560c:	d02c      	beq.n	8005668 <__ssputs_r+0xa8>
 800560e:	9a01      	ldr	r2, [sp, #4]
 8005610:	6921      	ldr	r1, [r4, #16]
 8005612:	f000 fade 	bl	8005bd2 <memcpy>
 8005616:	89a2      	ldrh	r2, [r4, #12]
 8005618:	4b18      	ldr	r3, [pc, #96]	@ (800567c <__ssputs_r+0xbc>)
 800561a:	401a      	ands	r2, r3
 800561c:	2380      	movs	r3, #128	@ 0x80
 800561e:	4313      	orrs	r3, r2
 8005620:	81a3      	strh	r3, [r4, #12]
 8005622:	9b01      	ldr	r3, [sp, #4]
 8005624:	6126      	str	r6, [r4, #16]
 8005626:	18f6      	adds	r6, r6, r3
 8005628:	6026      	str	r6, [r4, #0]
 800562a:	003e      	movs	r6, r7
 800562c:	6165      	str	r5, [r4, #20]
 800562e:	1aed      	subs	r5, r5, r3
 8005630:	60a5      	str	r5, [r4, #8]
 8005632:	42be      	cmp	r6, r7
 8005634:	d900      	bls.n	8005638 <__ssputs_r+0x78>
 8005636:	003e      	movs	r6, r7
 8005638:	0032      	movs	r2, r6
 800563a:	9903      	ldr	r1, [sp, #12]
 800563c:	6820      	ldr	r0, [r4, #0]
 800563e:	f000 fa99 	bl	8005b74 <memmove>
 8005642:	2000      	movs	r0, #0
 8005644:	68a3      	ldr	r3, [r4, #8]
 8005646:	1b9b      	subs	r3, r3, r6
 8005648:	60a3      	str	r3, [r4, #8]
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	199b      	adds	r3, r3, r6
 800564e:	6023      	str	r3, [r4, #0]
 8005650:	b005      	add	sp, #20
 8005652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005654:	002a      	movs	r2, r5
 8005656:	9802      	ldr	r0, [sp, #8]
 8005658:	f000 fac4 	bl	8005be4 <_realloc_r>
 800565c:	1e06      	subs	r6, r0, #0
 800565e:	d1e0      	bne.n	8005622 <__ssputs_r+0x62>
 8005660:	6921      	ldr	r1, [r4, #16]
 8005662:	9802      	ldr	r0, [sp, #8]
 8005664:	f7ff feb0 	bl	80053c8 <_free_r>
 8005668:	230c      	movs	r3, #12
 800566a:	2001      	movs	r0, #1
 800566c:	9a02      	ldr	r2, [sp, #8]
 800566e:	4240      	negs	r0, r0
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	89a2      	ldrh	r2, [r4, #12]
 8005674:	3334      	adds	r3, #52	@ 0x34
 8005676:	4313      	orrs	r3, r2
 8005678:	81a3      	strh	r3, [r4, #12]
 800567a:	e7e9      	b.n	8005650 <__ssputs_r+0x90>
 800567c:	fffffb7f 	.word	0xfffffb7f

08005680 <_svfiprintf_r>:
 8005680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005682:	b0a1      	sub	sp, #132	@ 0x84
 8005684:	9003      	str	r0, [sp, #12]
 8005686:	001d      	movs	r5, r3
 8005688:	898b      	ldrh	r3, [r1, #12]
 800568a:	000f      	movs	r7, r1
 800568c:	0016      	movs	r6, r2
 800568e:	061b      	lsls	r3, r3, #24
 8005690:	d511      	bpl.n	80056b6 <_svfiprintf_r+0x36>
 8005692:	690b      	ldr	r3, [r1, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10e      	bne.n	80056b6 <_svfiprintf_r+0x36>
 8005698:	2140      	movs	r1, #64	@ 0x40
 800569a:	f7ff ff01 	bl	80054a0 <_malloc_r>
 800569e:	6038      	str	r0, [r7, #0]
 80056a0:	6138      	str	r0, [r7, #16]
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d105      	bne.n	80056b2 <_svfiprintf_r+0x32>
 80056a6:	230c      	movs	r3, #12
 80056a8:	9a03      	ldr	r2, [sp, #12]
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	2001      	movs	r0, #1
 80056ae:	4240      	negs	r0, r0
 80056b0:	e0cf      	b.n	8005852 <_svfiprintf_r+0x1d2>
 80056b2:	2340      	movs	r3, #64	@ 0x40
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	2300      	movs	r3, #0
 80056b8:	ac08      	add	r4, sp, #32
 80056ba:	6163      	str	r3, [r4, #20]
 80056bc:	3320      	adds	r3, #32
 80056be:	7663      	strb	r3, [r4, #25]
 80056c0:	3310      	adds	r3, #16
 80056c2:	76a3      	strb	r3, [r4, #26]
 80056c4:	9507      	str	r5, [sp, #28]
 80056c6:	0035      	movs	r5, r6
 80056c8:	782b      	ldrb	r3, [r5, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <_svfiprintf_r+0x52>
 80056ce:	2b25      	cmp	r3, #37	@ 0x25
 80056d0:	d148      	bne.n	8005764 <_svfiprintf_r+0xe4>
 80056d2:	1bab      	subs	r3, r5, r6
 80056d4:	9305      	str	r3, [sp, #20]
 80056d6:	42b5      	cmp	r5, r6
 80056d8:	d00b      	beq.n	80056f2 <_svfiprintf_r+0x72>
 80056da:	0032      	movs	r2, r6
 80056dc:	0039      	movs	r1, r7
 80056de:	9803      	ldr	r0, [sp, #12]
 80056e0:	f7ff ff6e 	bl	80055c0 <__ssputs_r>
 80056e4:	3001      	adds	r0, #1
 80056e6:	d100      	bne.n	80056ea <_svfiprintf_r+0x6a>
 80056e8:	e0ae      	b.n	8005848 <_svfiprintf_r+0x1c8>
 80056ea:	6963      	ldr	r3, [r4, #20]
 80056ec:	9a05      	ldr	r2, [sp, #20]
 80056ee:	189b      	adds	r3, r3, r2
 80056f0:	6163      	str	r3, [r4, #20]
 80056f2:	782b      	ldrb	r3, [r5, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d100      	bne.n	80056fa <_svfiprintf_r+0x7a>
 80056f8:	e0a6      	b.n	8005848 <_svfiprintf_r+0x1c8>
 80056fa:	2201      	movs	r2, #1
 80056fc:	2300      	movs	r3, #0
 80056fe:	4252      	negs	r2, r2
 8005700:	6062      	str	r2, [r4, #4]
 8005702:	a904      	add	r1, sp, #16
 8005704:	3254      	adds	r2, #84	@ 0x54
 8005706:	1852      	adds	r2, r2, r1
 8005708:	1c6e      	adds	r6, r5, #1
 800570a:	6023      	str	r3, [r4, #0]
 800570c:	60e3      	str	r3, [r4, #12]
 800570e:	60a3      	str	r3, [r4, #8]
 8005710:	7013      	strb	r3, [r2, #0]
 8005712:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005714:	4b54      	ldr	r3, [pc, #336]	@ (8005868 <_svfiprintf_r+0x1e8>)
 8005716:	2205      	movs	r2, #5
 8005718:	0018      	movs	r0, r3
 800571a:	7831      	ldrb	r1, [r6, #0]
 800571c:	9305      	str	r3, [sp, #20]
 800571e:	f000 fa4d 	bl	8005bbc <memchr>
 8005722:	1c75      	adds	r5, r6, #1
 8005724:	2800      	cmp	r0, #0
 8005726:	d11f      	bne.n	8005768 <_svfiprintf_r+0xe8>
 8005728:	6822      	ldr	r2, [r4, #0]
 800572a:	06d3      	lsls	r3, r2, #27
 800572c:	d504      	bpl.n	8005738 <_svfiprintf_r+0xb8>
 800572e:	2353      	movs	r3, #83	@ 0x53
 8005730:	a904      	add	r1, sp, #16
 8005732:	185b      	adds	r3, r3, r1
 8005734:	2120      	movs	r1, #32
 8005736:	7019      	strb	r1, [r3, #0]
 8005738:	0713      	lsls	r3, r2, #28
 800573a:	d504      	bpl.n	8005746 <_svfiprintf_r+0xc6>
 800573c:	2353      	movs	r3, #83	@ 0x53
 800573e:	a904      	add	r1, sp, #16
 8005740:	185b      	adds	r3, r3, r1
 8005742:	212b      	movs	r1, #43	@ 0x2b
 8005744:	7019      	strb	r1, [r3, #0]
 8005746:	7833      	ldrb	r3, [r6, #0]
 8005748:	2b2a      	cmp	r3, #42	@ 0x2a
 800574a:	d016      	beq.n	800577a <_svfiprintf_r+0xfa>
 800574c:	0035      	movs	r5, r6
 800574e:	2100      	movs	r1, #0
 8005750:	200a      	movs	r0, #10
 8005752:	68e3      	ldr	r3, [r4, #12]
 8005754:	782a      	ldrb	r2, [r5, #0]
 8005756:	1c6e      	adds	r6, r5, #1
 8005758:	3a30      	subs	r2, #48	@ 0x30
 800575a:	2a09      	cmp	r2, #9
 800575c:	d950      	bls.n	8005800 <_svfiprintf_r+0x180>
 800575e:	2900      	cmp	r1, #0
 8005760:	d111      	bne.n	8005786 <_svfiprintf_r+0x106>
 8005762:	e017      	b.n	8005794 <_svfiprintf_r+0x114>
 8005764:	3501      	adds	r5, #1
 8005766:	e7af      	b.n	80056c8 <_svfiprintf_r+0x48>
 8005768:	9b05      	ldr	r3, [sp, #20]
 800576a:	6822      	ldr	r2, [r4, #0]
 800576c:	1ac0      	subs	r0, r0, r3
 800576e:	2301      	movs	r3, #1
 8005770:	4083      	lsls	r3, r0
 8005772:	4313      	orrs	r3, r2
 8005774:	002e      	movs	r6, r5
 8005776:	6023      	str	r3, [r4, #0]
 8005778:	e7cc      	b.n	8005714 <_svfiprintf_r+0x94>
 800577a:	9b07      	ldr	r3, [sp, #28]
 800577c:	1d19      	adds	r1, r3, #4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	9107      	str	r1, [sp, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	db01      	blt.n	800578a <_svfiprintf_r+0x10a>
 8005786:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005788:	e004      	b.n	8005794 <_svfiprintf_r+0x114>
 800578a:	425b      	negs	r3, r3
 800578c:	60e3      	str	r3, [r4, #12]
 800578e:	2302      	movs	r3, #2
 8005790:	4313      	orrs	r3, r2
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	782b      	ldrb	r3, [r5, #0]
 8005796:	2b2e      	cmp	r3, #46	@ 0x2e
 8005798:	d10c      	bne.n	80057b4 <_svfiprintf_r+0x134>
 800579a:	786b      	ldrb	r3, [r5, #1]
 800579c:	2b2a      	cmp	r3, #42	@ 0x2a
 800579e:	d134      	bne.n	800580a <_svfiprintf_r+0x18a>
 80057a0:	9b07      	ldr	r3, [sp, #28]
 80057a2:	3502      	adds	r5, #2
 80057a4:	1d1a      	adds	r2, r3, #4
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	9207      	str	r2, [sp, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	da01      	bge.n	80057b2 <_svfiprintf_r+0x132>
 80057ae:	2301      	movs	r3, #1
 80057b0:	425b      	negs	r3, r3
 80057b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80057b4:	4e2d      	ldr	r6, [pc, #180]	@ (800586c <_svfiprintf_r+0x1ec>)
 80057b6:	2203      	movs	r2, #3
 80057b8:	0030      	movs	r0, r6
 80057ba:	7829      	ldrb	r1, [r5, #0]
 80057bc:	f000 f9fe 	bl	8005bbc <memchr>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d006      	beq.n	80057d2 <_svfiprintf_r+0x152>
 80057c4:	2340      	movs	r3, #64	@ 0x40
 80057c6:	1b80      	subs	r0, r0, r6
 80057c8:	4083      	lsls	r3, r0
 80057ca:	6822      	ldr	r2, [r4, #0]
 80057cc:	3501      	adds	r5, #1
 80057ce:	4313      	orrs	r3, r2
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	7829      	ldrb	r1, [r5, #0]
 80057d4:	2206      	movs	r2, #6
 80057d6:	4826      	ldr	r0, [pc, #152]	@ (8005870 <_svfiprintf_r+0x1f0>)
 80057d8:	1c6e      	adds	r6, r5, #1
 80057da:	7621      	strb	r1, [r4, #24]
 80057dc:	f000 f9ee 	bl	8005bbc <memchr>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d038      	beq.n	8005856 <_svfiprintf_r+0x1d6>
 80057e4:	4b23      	ldr	r3, [pc, #140]	@ (8005874 <_svfiprintf_r+0x1f4>)
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d122      	bne.n	8005830 <_svfiprintf_r+0x1b0>
 80057ea:	2207      	movs	r2, #7
 80057ec:	9b07      	ldr	r3, [sp, #28]
 80057ee:	3307      	adds	r3, #7
 80057f0:	4393      	bics	r3, r2
 80057f2:	3308      	adds	r3, #8
 80057f4:	9307      	str	r3, [sp, #28]
 80057f6:	6963      	ldr	r3, [r4, #20]
 80057f8:	9a04      	ldr	r2, [sp, #16]
 80057fa:	189b      	adds	r3, r3, r2
 80057fc:	6163      	str	r3, [r4, #20]
 80057fe:	e762      	b.n	80056c6 <_svfiprintf_r+0x46>
 8005800:	4343      	muls	r3, r0
 8005802:	0035      	movs	r5, r6
 8005804:	2101      	movs	r1, #1
 8005806:	189b      	adds	r3, r3, r2
 8005808:	e7a4      	b.n	8005754 <_svfiprintf_r+0xd4>
 800580a:	2300      	movs	r3, #0
 800580c:	200a      	movs	r0, #10
 800580e:	0019      	movs	r1, r3
 8005810:	3501      	adds	r5, #1
 8005812:	6063      	str	r3, [r4, #4]
 8005814:	782a      	ldrb	r2, [r5, #0]
 8005816:	1c6e      	adds	r6, r5, #1
 8005818:	3a30      	subs	r2, #48	@ 0x30
 800581a:	2a09      	cmp	r2, #9
 800581c:	d903      	bls.n	8005826 <_svfiprintf_r+0x1a6>
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0c8      	beq.n	80057b4 <_svfiprintf_r+0x134>
 8005822:	9109      	str	r1, [sp, #36]	@ 0x24
 8005824:	e7c6      	b.n	80057b4 <_svfiprintf_r+0x134>
 8005826:	4341      	muls	r1, r0
 8005828:	0035      	movs	r5, r6
 800582a:	2301      	movs	r3, #1
 800582c:	1889      	adds	r1, r1, r2
 800582e:	e7f1      	b.n	8005814 <_svfiprintf_r+0x194>
 8005830:	aa07      	add	r2, sp, #28
 8005832:	9200      	str	r2, [sp, #0]
 8005834:	0021      	movs	r1, r4
 8005836:	003a      	movs	r2, r7
 8005838:	4b0f      	ldr	r3, [pc, #60]	@ (8005878 <_svfiprintf_r+0x1f8>)
 800583a:	9803      	ldr	r0, [sp, #12]
 800583c:	e000      	b.n	8005840 <_svfiprintf_r+0x1c0>
 800583e:	bf00      	nop
 8005840:	9004      	str	r0, [sp, #16]
 8005842:	9b04      	ldr	r3, [sp, #16]
 8005844:	3301      	adds	r3, #1
 8005846:	d1d6      	bne.n	80057f6 <_svfiprintf_r+0x176>
 8005848:	89bb      	ldrh	r3, [r7, #12]
 800584a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800584c:	065b      	lsls	r3, r3, #25
 800584e:	d500      	bpl.n	8005852 <_svfiprintf_r+0x1d2>
 8005850:	e72c      	b.n	80056ac <_svfiprintf_r+0x2c>
 8005852:	b021      	add	sp, #132	@ 0x84
 8005854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005856:	aa07      	add	r2, sp, #28
 8005858:	9200      	str	r2, [sp, #0]
 800585a:	0021      	movs	r1, r4
 800585c:	003a      	movs	r2, r7
 800585e:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <_svfiprintf_r+0x1f8>)
 8005860:	9803      	ldr	r0, [sp, #12]
 8005862:	f000 f87b 	bl	800595c <_printf_i>
 8005866:	e7eb      	b.n	8005840 <_svfiprintf_r+0x1c0>
 8005868:	08005d50 	.word	0x08005d50
 800586c:	08005d56 	.word	0x08005d56
 8005870:	08005d5a 	.word	0x08005d5a
 8005874:	00000000 	.word	0x00000000
 8005878:	080055c1 	.word	0x080055c1

0800587c <_printf_common>:
 800587c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800587e:	0016      	movs	r6, r2
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	688a      	ldr	r2, [r1, #8]
 8005884:	690b      	ldr	r3, [r1, #16]
 8005886:	000c      	movs	r4, r1
 8005888:	9000      	str	r0, [sp, #0]
 800588a:	4293      	cmp	r3, r2
 800588c:	da00      	bge.n	8005890 <_printf_common+0x14>
 800588e:	0013      	movs	r3, r2
 8005890:	0022      	movs	r2, r4
 8005892:	6033      	str	r3, [r6, #0]
 8005894:	3243      	adds	r2, #67	@ 0x43
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	2a00      	cmp	r2, #0
 800589a:	d001      	beq.n	80058a0 <_printf_common+0x24>
 800589c:	3301      	adds	r3, #1
 800589e:	6033      	str	r3, [r6, #0]
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	069b      	lsls	r3, r3, #26
 80058a4:	d502      	bpl.n	80058ac <_printf_common+0x30>
 80058a6:	6833      	ldr	r3, [r6, #0]
 80058a8:	3302      	adds	r3, #2
 80058aa:	6033      	str	r3, [r6, #0]
 80058ac:	6822      	ldr	r2, [r4, #0]
 80058ae:	2306      	movs	r3, #6
 80058b0:	0015      	movs	r5, r2
 80058b2:	401d      	ands	r5, r3
 80058b4:	421a      	tst	r2, r3
 80058b6:	d027      	beq.n	8005908 <_printf_common+0x8c>
 80058b8:	0023      	movs	r3, r4
 80058ba:	3343      	adds	r3, #67	@ 0x43
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	1e5a      	subs	r2, r3, #1
 80058c0:	4193      	sbcs	r3, r2
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	0692      	lsls	r2, r2, #26
 80058c6:	d430      	bmi.n	800592a <_printf_common+0xae>
 80058c8:	0022      	movs	r2, r4
 80058ca:	9901      	ldr	r1, [sp, #4]
 80058cc:	9800      	ldr	r0, [sp, #0]
 80058ce:	9d08      	ldr	r5, [sp, #32]
 80058d0:	3243      	adds	r2, #67	@ 0x43
 80058d2:	47a8      	blx	r5
 80058d4:	3001      	adds	r0, #1
 80058d6:	d025      	beq.n	8005924 <_printf_common+0xa8>
 80058d8:	2206      	movs	r2, #6
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	2500      	movs	r5, #0
 80058de:	4013      	ands	r3, r2
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d105      	bne.n	80058f0 <_printf_common+0x74>
 80058e4:	6833      	ldr	r3, [r6, #0]
 80058e6:	68e5      	ldr	r5, [r4, #12]
 80058e8:	1aed      	subs	r5, r5, r3
 80058ea:	43eb      	mvns	r3, r5
 80058ec:	17db      	asrs	r3, r3, #31
 80058ee:	401d      	ands	r5, r3
 80058f0:	68a3      	ldr	r3, [r4, #8]
 80058f2:	6922      	ldr	r2, [r4, #16]
 80058f4:	4293      	cmp	r3, r2
 80058f6:	dd01      	ble.n	80058fc <_printf_common+0x80>
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	18ed      	adds	r5, r5, r3
 80058fc:	2600      	movs	r6, #0
 80058fe:	42b5      	cmp	r5, r6
 8005900:	d120      	bne.n	8005944 <_printf_common+0xc8>
 8005902:	2000      	movs	r0, #0
 8005904:	e010      	b.n	8005928 <_printf_common+0xac>
 8005906:	3501      	adds	r5, #1
 8005908:	68e3      	ldr	r3, [r4, #12]
 800590a:	6832      	ldr	r2, [r6, #0]
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	42ab      	cmp	r3, r5
 8005910:	ddd2      	ble.n	80058b8 <_printf_common+0x3c>
 8005912:	0022      	movs	r2, r4
 8005914:	2301      	movs	r3, #1
 8005916:	9901      	ldr	r1, [sp, #4]
 8005918:	9800      	ldr	r0, [sp, #0]
 800591a:	9f08      	ldr	r7, [sp, #32]
 800591c:	3219      	adds	r2, #25
 800591e:	47b8      	blx	r7
 8005920:	3001      	adds	r0, #1
 8005922:	d1f0      	bne.n	8005906 <_printf_common+0x8a>
 8005924:	2001      	movs	r0, #1
 8005926:	4240      	negs	r0, r0
 8005928:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800592a:	2030      	movs	r0, #48	@ 0x30
 800592c:	18e1      	adds	r1, r4, r3
 800592e:	3143      	adds	r1, #67	@ 0x43
 8005930:	7008      	strb	r0, [r1, #0]
 8005932:	0021      	movs	r1, r4
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	3145      	adds	r1, #69	@ 0x45
 8005938:	7809      	ldrb	r1, [r1, #0]
 800593a:	18a2      	adds	r2, r4, r2
 800593c:	3243      	adds	r2, #67	@ 0x43
 800593e:	3302      	adds	r3, #2
 8005940:	7011      	strb	r1, [r2, #0]
 8005942:	e7c1      	b.n	80058c8 <_printf_common+0x4c>
 8005944:	0022      	movs	r2, r4
 8005946:	2301      	movs	r3, #1
 8005948:	9901      	ldr	r1, [sp, #4]
 800594a:	9800      	ldr	r0, [sp, #0]
 800594c:	9f08      	ldr	r7, [sp, #32]
 800594e:	321a      	adds	r2, #26
 8005950:	47b8      	blx	r7
 8005952:	3001      	adds	r0, #1
 8005954:	d0e6      	beq.n	8005924 <_printf_common+0xa8>
 8005956:	3601      	adds	r6, #1
 8005958:	e7d1      	b.n	80058fe <_printf_common+0x82>
	...

0800595c <_printf_i>:
 800595c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595e:	b08b      	sub	sp, #44	@ 0x2c
 8005960:	9206      	str	r2, [sp, #24]
 8005962:	000a      	movs	r2, r1
 8005964:	3243      	adds	r2, #67	@ 0x43
 8005966:	9307      	str	r3, [sp, #28]
 8005968:	9005      	str	r0, [sp, #20]
 800596a:	9203      	str	r2, [sp, #12]
 800596c:	7e0a      	ldrb	r2, [r1, #24]
 800596e:	000c      	movs	r4, r1
 8005970:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005972:	2a78      	cmp	r2, #120	@ 0x78
 8005974:	d809      	bhi.n	800598a <_printf_i+0x2e>
 8005976:	2a62      	cmp	r2, #98	@ 0x62
 8005978:	d80b      	bhi.n	8005992 <_printf_i+0x36>
 800597a:	2a00      	cmp	r2, #0
 800597c:	d100      	bne.n	8005980 <_printf_i+0x24>
 800597e:	e0ba      	b.n	8005af6 <_printf_i+0x19a>
 8005980:	497a      	ldr	r1, [pc, #488]	@ (8005b6c <_printf_i+0x210>)
 8005982:	9104      	str	r1, [sp, #16]
 8005984:	2a58      	cmp	r2, #88	@ 0x58
 8005986:	d100      	bne.n	800598a <_printf_i+0x2e>
 8005988:	e08e      	b.n	8005aa8 <_printf_i+0x14c>
 800598a:	0025      	movs	r5, r4
 800598c:	3542      	adds	r5, #66	@ 0x42
 800598e:	702a      	strb	r2, [r5, #0]
 8005990:	e022      	b.n	80059d8 <_printf_i+0x7c>
 8005992:	0010      	movs	r0, r2
 8005994:	3863      	subs	r0, #99	@ 0x63
 8005996:	2815      	cmp	r0, #21
 8005998:	d8f7      	bhi.n	800598a <_printf_i+0x2e>
 800599a:	f7fa fbbd 	bl	8000118 <__gnu_thumb1_case_shi>
 800599e:	0016      	.short	0x0016
 80059a0:	fff6001f 	.word	0xfff6001f
 80059a4:	fff6fff6 	.word	0xfff6fff6
 80059a8:	001ffff6 	.word	0x001ffff6
 80059ac:	fff6fff6 	.word	0xfff6fff6
 80059b0:	fff6fff6 	.word	0xfff6fff6
 80059b4:	0036009f 	.word	0x0036009f
 80059b8:	fff6007e 	.word	0xfff6007e
 80059bc:	00b0fff6 	.word	0x00b0fff6
 80059c0:	0036fff6 	.word	0x0036fff6
 80059c4:	fff6fff6 	.word	0xfff6fff6
 80059c8:	0082      	.short	0x0082
 80059ca:	0025      	movs	r5, r4
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	3542      	adds	r5, #66	@ 0x42
 80059d0:	1d11      	adds	r1, r2, #4
 80059d2:	6019      	str	r1, [r3, #0]
 80059d4:	6813      	ldr	r3, [r2, #0]
 80059d6:	702b      	strb	r3, [r5, #0]
 80059d8:	2301      	movs	r3, #1
 80059da:	e09e      	b.n	8005b1a <_printf_i+0x1be>
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	6809      	ldr	r1, [r1, #0]
 80059e0:	1d02      	adds	r2, r0, #4
 80059e2:	060d      	lsls	r5, r1, #24
 80059e4:	d50b      	bpl.n	80059fe <_printf_i+0xa2>
 80059e6:	6806      	ldr	r6, [r0, #0]
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	2e00      	cmp	r6, #0
 80059ec:	da03      	bge.n	80059f6 <_printf_i+0x9a>
 80059ee:	232d      	movs	r3, #45	@ 0x2d
 80059f0:	9a03      	ldr	r2, [sp, #12]
 80059f2:	4276      	negs	r6, r6
 80059f4:	7013      	strb	r3, [r2, #0]
 80059f6:	4b5d      	ldr	r3, [pc, #372]	@ (8005b6c <_printf_i+0x210>)
 80059f8:	270a      	movs	r7, #10
 80059fa:	9304      	str	r3, [sp, #16]
 80059fc:	e018      	b.n	8005a30 <_printf_i+0xd4>
 80059fe:	6806      	ldr	r6, [r0, #0]
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	0649      	lsls	r1, r1, #25
 8005a04:	d5f1      	bpl.n	80059ea <_printf_i+0x8e>
 8005a06:	b236      	sxth	r6, r6
 8005a08:	e7ef      	b.n	80059ea <_printf_i+0x8e>
 8005a0a:	6808      	ldr	r0, [r1, #0]
 8005a0c:	6819      	ldr	r1, [r3, #0]
 8005a0e:	c940      	ldmia	r1!, {r6}
 8005a10:	0605      	lsls	r5, r0, #24
 8005a12:	d402      	bmi.n	8005a1a <_printf_i+0xbe>
 8005a14:	0640      	lsls	r0, r0, #25
 8005a16:	d500      	bpl.n	8005a1a <_printf_i+0xbe>
 8005a18:	b2b6      	uxth	r6, r6
 8005a1a:	6019      	str	r1, [r3, #0]
 8005a1c:	4b53      	ldr	r3, [pc, #332]	@ (8005b6c <_printf_i+0x210>)
 8005a1e:	270a      	movs	r7, #10
 8005a20:	9304      	str	r3, [sp, #16]
 8005a22:	2a6f      	cmp	r2, #111	@ 0x6f
 8005a24:	d100      	bne.n	8005a28 <_printf_i+0xcc>
 8005a26:	3f02      	subs	r7, #2
 8005a28:	0023      	movs	r3, r4
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	3343      	adds	r3, #67	@ 0x43
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	6863      	ldr	r3, [r4, #4]
 8005a32:	60a3      	str	r3, [r4, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	db06      	blt.n	8005a46 <_printf_i+0xea>
 8005a38:	2104      	movs	r1, #4
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	9d03      	ldr	r5, [sp, #12]
 8005a3e:	438a      	bics	r2, r1
 8005a40:	6022      	str	r2, [r4, #0]
 8005a42:	4333      	orrs	r3, r6
 8005a44:	d00c      	beq.n	8005a60 <_printf_i+0x104>
 8005a46:	9d03      	ldr	r5, [sp, #12]
 8005a48:	0030      	movs	r0, r6
 8005a4a:	0039      	movs	r1, r7
 8005a4c:	f7fa fbf4 	bl	8000238 <__aeabi_uidivmod>
 8005a50:	9b04      	ldr	r3, [sp, #16]
 8005a52:	3d01      	subs	r5, #1
 8005a54:	5c5b      	ldrb	r3, [r3, r1]
 8005a56:	702b      	strb	r3, [r5, #0]
 8005a58:	0033      	movs	r3, r6
 8005a5a:	0006      	movs	r6, r0
 8005a5c:	429f      	cmp	r7, r3
 8005a5e:	d9f3      	bls.n	8005a48 <_printf_i+0xec>
 8005a60:	2f08      	cmp	r7, #8
 8005a62:	d109      	bne.n	8005a78 <_printf_i+0x11c>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	07db      	lsls	r3, r3, #31
 8005a68:	d506      	bpl.n	8005a78 <_printf_i+0x11c>
 8005a6a:	6862      	ldr	r2, [r4, #4]
 8005a6c:	6923      	ldr	r3, [r4, #16]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	dc02      	bgt.n	8005a78 <_printf_i+0x11c>
 8005a72:	2330      	movs	r3, #48	@ 0x30
 8005a74:	3d01      	subs	r5, #1
 8005a76:	702b      	strb	r3, [r5, #0]
 8005a78:	9b03      	ldr	r3, [sp, #12]
 8005a7a:	1b5b      	subs	r3, r3, r5
 8005a7c:	6123      	str	r3, [r4, #16]
 8005a7e:	9b07      	ldr	r3, [sp, #28]
 8005a80:	0021      	movs	r1, r4
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	9805      	ldr	r0, [sp, #20]
 8005a86:	9b06      	ldr	r3, [sp, #24]
 8005a88:	aa09      	add	r2, sp, #36	@ 0x24
 8005a8a:	f7ff fef7 	bl	800587c <_printf_common>
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d148      	bne.n	8005b24 <_printf_i+0x1c8>
 8005a92:	2001      	movs	r0, #1
 8005a94:	4240      	negs	r0, r0
 8005a96:	b00b      	add	sp, #44	@ 0x2c
 8005a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	6809      	ldr	r1, [r1, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	6022      	str	r2, [r4, #0]
 8005aa2:	2278      	movs	r2, #120	@ 0x78
 8005aa4:	4932      	ldr	r1, [pc, #200]	@ (8005b70 <_printf_i+0x214>)
 8005aa6:	9104      	str	r1, [sp, #16]
 8005aa8:	0021      	movs	r1, r4
 8005aaa:	3145      	adds	r1, #69	@ 0x45
 8005aac:	700a      	strb	r2, [r1, #0]
 8005aae:	6819      	ldr	r1, [r3, #0]
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	c940      	ldmia	r1!, {r6}
 8005ab4:	0610      	lsls	r0, r2, #24
 8005ab6:	d402      	bmi.n	8005abe <_printf_i+0x162>
 8005ab8:	0650      	lsls	r0, r2, #25
 8005aba:	d500      	bpl.n	8005abe <_printf_i+0x162>
 8005abc:	b2b6      	uxth	r6, r6
 8005abe:	6019      	str	r1, [r3, #0]
 8005ac0:	07d3      	lsls	r3, r2, #31
 8005ac2:	d502      	bpl.n	8005aca <_printf_i+0x16e>
 8005ac4:	2320      	movs	r3, #32
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	2e00      	cmp	r6, #0
 8005acc:	d001      	beq.n	8005ad2 <_printf_i+0x176>
 8005ace:	2710      	movs	r7, #16
 8005ad0:	e7aa      	b.n	8005a28 <_printf_i+0xcc>
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	4393      	bics	r3, r2
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	e7f8      	b.n	8005ace <_printf_i+0x172>
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	680d      	ldr	r5, [r1, #0]
 8005ae0:	1d10      	adds	r0, r2, #4
 8005ae2:	6949      	ldr	r1, [r1, #20]
 8005ae4:	6018      	str	r0, [r3, #0]
 8005ae6:	6813      	ldr	r3, [r2, #0]
 8005ae8:	062e      	lsls	r6, r5, #24
 8005aea:	d501      	bpl.n	8005af0 <_printf_i+0x194>
 8005aec:	6019      	str	r1, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <_printf_i+0x19a>
 8005af0:	066d      	lsls	r5, r5, #25
 8005af2:	d5fb      	bpl.n	8005aec <_printf_i+0x190>
 8005af4:	8019      	strh	r1, [r3, #0]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9d03      	ldr	r5, [sp, #12]
 8005afa:	6123      	str	r3, [r4, #16]
 8005afc:	e7bf      	b.n	8005a7e <_printf_i+0x122>
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	1d11      	adds	r1, r2, #4
 8005b02:	6019      	str	r1, [r3, #0]
 8005b04:	6815      	ldr	r5, [r2, #0]
 8005b06:	2100      	movs	r1, #0
 8005b08:	0028      	movs	r0, r5
 8005b0a:	6862      	ldr	r2, [r4, #4]
 8005b0c:	f000 f856 	bl	8005bbc <memchr>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d001      	beq.n	8005b18 <_printf_i+0x1bc>
 8005b14:	1b40      	subs	r0, r0, r5
 8005b16:	6060      	str	r0, [r4, #4]
 8005b18:	6863      	ldr	r3, [r4, #4]
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	9a03      	ldr	r2, [sp, #12]
 8005b20:	7013      	strb	r3, [r2, #0]
 8005b22:	e7ac      	b.n	8005a7e <_printf_i+0x122>
 8005b24:	002a      	movs	r2, r5
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	9906      	ldr	r1, [sp, #24]
 8005b2a:	9805      	ldr	r0, [sp, #20]
 8005b2c:	9d07      	ldr	r5, [sp, #28]
 8005b2e:	47a8      	blx	r5
 8005b30:	3001      	adds	r0, #1
 8005b32:	d0ae      	beq.n	8005a92 <_printf_i+0x136>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	079b      	lsls	r3, r3, #30
 8005b38:	d415      	bmi.n	8005b66 <_printf_i+0x20a>
 8005b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b3c:	68e0      	ldr	r0, [r4, #12]
 8005b3e:	4298      	cmp	r0, r3
 8005b40:	daa9      	bge.n	8005a96 <_printf_i+0x13a>
 8005b42:	0018      	movs	r0, r3
 8005b44:	e7a7      	b.n	8005a96 <_printf_i+0x13a>
 8005b46:	0022      	movs	r2, r4
 8005b48:	2301      	movs	r3, #1
 8005b4a:	9906      	ldr	r1, [sp, #24]
 8005b4c:	9805      	ldr	r0, [sp, #20]
 8005b4e:	9e07      	ldr	r6, [sp, #28]
 8005b50:	3219      	adds	r2, #25
 8005b52:	47b0      	blx	r6
 8005b54:	3001      	adds	r0, #1
 8005b56:	d09c      	beq.n	8005a92 <_printf_i+0x136>
 8005b58:	3501      	adds	r5, #1
 8005b5a:	68e3      	ldr	r3, [r4, #12]
 8005b5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	42ab      	cmp	r3, r5
 8005b62:	dcf0      	bgt.n	8005b46 <_printf_i+0x1ea>
 8005b64:	e7e9      	b.n	8005b3a <_printf_i+0x1de>
 8005b66:	2500      	movs	r5, #0
 8005b68:	e7f7      	b.n	8005b5a <_printf_i+0x1fe>
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	08005d61 	.word	0x08005d61
 8005b70:	08005d72 	.word	0x08005d72

08005b74 <memmove>:
 8005b74:	b510      	push	{r4, lr}
 8005b76:	4288      	cmp	r0, r1
 8005b78:	d902      	bls.n	8005b80 <memmove+0xc>
 8005b7a:	188b      	adds	r3, r1, r2
 8005b7c:	4298      	cmp	r0, r3
 8005b7e:	d308      	bcc.n	8005b92 <memmove+0x1e>
 8005b80:	2300      	movs	r3, #0
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d007      	beq.n	8005b96 <memmove+0x22>
 8005b86:	5ccc      	ldrb	r4, [r1, r3]
 8005b88:	54c4      	strb	r4, [r0, r3]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	e7f9      	b.n	8005b82 <memmove+0xe>
 8005b8e:	5c8b      	ldrb	r3, [r1, r2]
 8005b90:	5483      	strb	r3, [r0, r2]
 8005b92:	3a01      	subs	r2, #1
 8005b94:	d2fb      	bcs.n	8005b8e <memmove+0x1a>
 8005b96:	bd10      	pop	{r4, pc}

08005b98 <_sbrk_r>:
 8005b98:	2300      	movs	r3, #0
 8005b9a:	b570      	push	{r4, r5, r6, lr}
 8005b9c:	4d06      	ldr	r5, [pc, #24]	@ (8005bb8 <_sbrk_r+0x20>)
 8005b9e:	0004      	movs	r4, r0
 8005ba0:	0008      	movs	r0, r1
 8005ba2:	602b      	str	r3, [r5, #0]
 8005ba4:	f7fc fde2 	bl	800276c <_sbrk>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d103      	bne.n	8005bb4 <_sbrk_r+0x1c>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d000      	beq.n	8005bb4 <_sbrk_r+0x1c>
 8005bb2:	6023      	str	r3, [r4, #0]
 8005bb4:	bd70      	pop	{r4, r5, r6, pc}
 8005bb6:	46c0      	nop			@ (mov r8, r8)
 8005bb8:	200002f0 	.word	0x200002f0

08005bbc <memchr>:
 8005bbc:	b2c9      	uxtb	r1, r1
 8005bbe:	1882      	adds	r2, r0, r2
 8005bc0:	4290      	cmp	r0, r2
 8005bc2:	d101      	bne.n	8005bc8 <memchr+0xc>
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	4770      	bx	lr
 8005bc8:	7803      	ldrb	r3, [r0, #0]
 8005bca:	428b      	cmp	r3, r1
 8005bcc:	d0fb      	beq.n	8005bc6 <memchr+0xa>
 8005bce:	3001      	adds	r0, #1
 8005bd0:	e7f6      	b.n	8005bc0 <memchr+0x4>

08005bd2 <memcpy>:
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d100      	bne.n	8005bdc <memcpy+0xa>
 8005bda:	bd10      	pop	{r4, pc}
 8005bdc:	5ccc      	ldrb	r4, [r1, r3]
 8005bde:	54c4      	strb	r4, [r0, r3]
 8005be0:	3301      	adds	r3, #1
 8005be2:	e7f8      	b.n	8005bd6 <memcpy+0x4>

08005be4 <_realloc_r>:
 8005be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005be6:	0006      	movs	r6, r0
 8005be8:	000c      	movs	r4, r1
 8005bea:	0015      	movs	r5, r2
 8005bec:	2900      	cmp	r1, #0
 8005bee:	d105      	bne.n	8005bfc <_realloc_r+0x18>
 8005bf0:	0011      	movs	r1, r2
 8005bf2:	f7ff fc55 	bl	80054a0 <_malloc_r>
 8005bf6:	0004      	movs	r4, r0
 8005bf8:	0020      	movs	r0, r4
 8005bfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	d103      	bne.n	8005c08 <_realloc_r+0x24>
 8005c00:	f7ff fbe2 	bl	80053c8 <_free_r>
 8005c04:	002c      	movs	r4, r5
 8005c06:	e7f7      	b.n	8005bf8 <_realloc_r+0x14>
 8005c08:	f000 f81c 	bl	8005c44 <_malloc_usable_size_r>
 8005c0c:	0007      	movs	r7, r0
 8005c0e:	4285      	cmp	r5, r0
 8005c10:	d802      	bhi.n	8005c18 <_realloc_r+0x34>
 8005c12:	0843      	lsrs	r3, r0, #1
 8005c14:	42ab      	cmp	r3, r5
 8005c16:	d3ef      	bcc.n	8005bf8 <_realloc_r+0x14>
 8005c18:	0029      	movs	r1, r5
 8005c1a:	0030      	movs	r0, r6
 8005c1c:	f7ff fc40 	bl	80054a0 <_malloc_r>
 8005c20:	9001      	str	r0, [sp, #4]
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d101      	bne.n	8005c2a <_realloc_r+0x46>
 8005c26:	9c01      	ldr	r4, [sp, #4]
 8005c28:	e7e6      	b.n	8005bf8 <_realloc_r+0x14>
 8005c2a:	002a      	movs	r2, r5
 8005c2c:	42bd      	cmp	r5, r7
 8005c2e:	d900      	bls.n	8005c32 <_realloc_r+0x4e>
 8005c30:	003a      	movs	r2, r7
 8005c32:	0021      	movs	r1, r4
 8005c34:	9801      	ldr	r0, [sp, #4]
 8005c36:	f7ff ffcc 	bl	8005bd2 <memcpy>
 8005c3a:	0021      	movs	r1, r4
 8005c3c:	0030      	movs	r0, r6
 8005c3e:	f7ff fbc3 	bl	80053c8 <_free_r>
 8005c42:	e7f0      	b.n	8005c26 <_realloc_r+0x42>

08005c44 <_malloc_usable_size_r>:
 8005c44:	1f0b      	subs	r3, r1, #4
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	1f18      	subs	r0, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	da01      	bge.n	8005c52 <_malloc_usable_size_r+0xe>
 8005c4e:	580b      	ldr	r3, [r1, r0]
 8005c50:	18c0      	adds	r0, r0, r3
 8005c52:	4770      	bx	lr

08005c54 <_init>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	46c0      	nop			@ (mov r8, r8)
 8005c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5a:	bc08      	pop	{r3}
 8005c5c:	469e      	mov	lr, r3
 8005c5e:	4770      	bx	lr

08005c60 <_fini>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	46c0      	nop			@ (mov r8, r8)
 8005c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c66:	bc08      	pop	{r3}
 8005c68:	469e      	mov	lr, r3
 8005c6a:	4770      	bx	lr
