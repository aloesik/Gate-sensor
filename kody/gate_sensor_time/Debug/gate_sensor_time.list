
gate_sensor_time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006078  08006078  00007078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006184  08006184  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006184  08006184  0000805c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006184  08006184  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006184  08006184  00007184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006188  08006188  00007188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800618c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000005c  080061e8  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080061e8  00008320  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165f6  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d53  00000000  00000000  0001e67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  000213d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e94  00000000  00000000  00022638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b2e  00000000  00000000  000234cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184a1  00000000  00000000  00038ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008591a  00000000  00000000  0005149b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6db5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004870  00000000  00000000  000d6df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000db668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006060 	.word	0x08006060

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006060 	.word	0x08006060

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <bma400_init>:
/************************************************************************************/
/*********************** User function definitions **********************************/
/************************************************************************************/

int8_t bma400_init(struct bma400_dev *dev)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000420:	260e      	movs	r6, #14
 8000422:	19bb      	adds	r3, r7, r6
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000428:	250f      	movs	r5, #15
 800042a:	197c      	adds	r4, r7, r5
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	0018      	movs	r0, r3
 8000430:	f000 fb8a 	bl	8000b48 <null_ptr_check>
 8000434:	0003      	movs	r3, r0
 8000436:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8000438:	002c      	movs	r4, r5
 800043a:	193b      	adds	r3, r7, r4
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	b25b      	sxtb	r3, r3
 8000440:	2b00      	cmp	r3, #0
 8000442:	d13c      	bne.n	80004be <bma400_init+0xa6>
    {
        /* Initial power-up time */
        dev->delay_us(5000, dev->intf_ptr);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	4820      	ldr	r0, [pc, #128]	@ (80004d0 <bma400_init+0xb8>)
 800044e:	0019      	movs	r1, r3
 8000450:	4790      	blx	r2

        /* Assigning dummy byte value */
        if (dev->intf == BMA400_SPI_INTF)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	785b      	ldrb	r3, [r3, #1]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d10c      	bne.n	8000474 <bma400_init+0x5c>
        {
            /* Dummy Byte availability */
            dev->dummy_byte = 1;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2201      	movs	r2, #1
 800045e:	721a      	strb	r2, [r3, #8]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8000460:	193c      	adds	r4, r7, r4
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	19b9      	adds	r1, r7, r6
 8000466:	2201      	movs	r2, #1
 8000468:	2000      	movs	r0, #0
 800046a:	f000 f8b1 	bl	80005d0 <bma400_get_regs>
 800046e:	0003      	movs	r3, r0
 8000470:	7023      	strb	r3, [r4, #0]
 8000472:	e002      	b.n	800047a <bma400_init+0x62>
        }
        else
        {
            dev->dummy_byte = 0;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2200      	movs	r2, #0
 8000478:	721a      	strb	r2, [r3, #8]
        }

        if (rslt == BMA400_OK)
 800047a:	250f      	movs	r5, #15
 800047c:	197b      	adds	r3, r7, r5
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b25b      	sxtb	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d11b      	bne.n	80004be <bma400_init+0xa6>
        {
            /* Chip ID of the sensor is read */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8000486:	197c      	adds	r4, r7, r5
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	260e      	movs	r6, #14
 800048c:	19b9      	adds	r1, r7, r6
 800048e:	2201      	movs	r2, #1
 8000490:	2000      	movs	r0, #0
 8000492:	f000 f89d 	bl	80005d0 <bma400_get_regs>
 8000496:	0003      	movs	r3, r0
 8000498:	7023      	strb	r3, [r4, #0]

            /* Proceed if everything is fine until now */
            if (rslt == BMA400_OK)
 800049a:	197b      	adds	r3, r7, r5
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b25b      	sxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d10c      	bne.n	80004be <bma400_init+0xa6>
            {
                /* Check for chip id validity */
                if (chip_id == BMA400_CHIP_ID)
 80004a4:	19bb      	adds	r3, r7, r6
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b90      	cmp	r3, #144	@ 0x90
 80004aa:	d104      	bne.n	80004b6 <bma400_init+0x9e>
                {
                    /* Store the chip ID in dev structure */
                    dev->chip_id = chip_id;
 80004ac:	19bb      	adds	r3, r7, r6
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e003      	b.n	80004be <bma400_init+0xa6>
                }
                else
                {
                    rslt = BMA400_E_DEV_NOT_FOUND;
 80004b6:	230f      	movs	r3, #15
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	22fd      	movs	r2, #253	@ 0xfd
 80004bc:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    return rslt;
 80004be:	230f      	movs	r3, #15
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	b25b      	sxtb	r3, r3
}
 80004c6:	0018      	movs	r0, r3
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b005      	add	sp, #20
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	00001388 	.word	0x00001388

080004d4 <bma400_set_regs>:

int8_t bma400_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	b087      	sub	sp, #28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	230f      	movs	r3, #15
 80004e2:	18fb      	adds	r3, r7, r3
 80004e4:	1c02      	adds	r2, r0, #0
 80004e6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t count;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80004e8:	2617      	movs	r6, #23
 80004ea:	19bc      	adds	r4, r7, r6
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fb2a 	bl	8000b48 <null_ptr_check>
 80004f4:	0003      	movs	r3, r0
 80004f6:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 80004f8:	19bb      	adds	r3, r7, r6
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d158      	bne.n	80005b4 <bma400_set_regs+0xe0>
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d055      	beq.n	80005b4 <bma400_set_regs+0xe0>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        if (len == 1)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d116      	bne.n	800053c <bma400_set_regs+0x68>
        {
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	691c      	ldr	r4, [r3, #16]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685d      	ldr	r5, [r3, #4]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	68b9      	ldr	r1, [r7, #8]
 800051a:	230f      	movs	r3, #15
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	7818      	ldrb	r0, [r3, #0]
 8000520:	002b      	movs	r3, r5
 8000522:	47a0      	blx	r4
 8000524:	0003      	movs	r3, r0
 8000526:	001a      	movs	r2, r3
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	771a      	strb	r2, [r3, #28]
            if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	7f1b      	ldrb	r3, [r3, #28]
 8000530:	b25b      	sxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <bma400_set_regs+0x68>
            {
                /* Failure case */
                rslt = BMA400_E_COM_FAIL;
 8000536:	19bb      	adds	r3, r7, r6
 8000538:	22fe      	movs	r2, #254	@ 0xfe
 800053a:	701a      	strb	r2, [r3, #0]

        /* Burst write is not allowed thus we split burst case write
         * into single byte writes Thus user can write multiple bytes
         * with ease
         */
        if (len > 1)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d93d      	bls.n	80005be <bma400_set_regs+0xea>
        {
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8000542:	2316      	movs	r3, #22
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
 800054a:	e026      	b.n	800059a <bma400_set_regs+0xc6>
            {
                dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr);
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	691c      	ldr	r4, [r3, #16]
 8000550:	2316      	movs	r3, #22
 8000552:	18fb      	adds	r3, r7, r3
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	18d1      	adds	r1, r2, r3
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	685a      	ldr	r2, [r3, #4]
 800055e:	250f      	movs	r5, #15
 8000560:	197b      	adds	r3, r7, r5
 8000562:	7818      	ldrb	r0, [r3, #0]
 8000564:	0013      	movs	r3, r2
 8000566:	2201      	movs	r2, #1
 8000568:	47a0      	blx	r4
 800056a:	0003      	movs	r3, r0
 800056c:	001a      	movs	r2, r3
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	771a      	strb	r2, [r3, #28]
                reg_addr++;
 8000572:	197b      	adds	r3, r7, r5
 8000574:	781a      	ldrb	r2, [r3, #0]
 8000576:	197b      	adds	r3, r7, r5
 8000578:	3201      	adds	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
                if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	7f1b      	ldrb	r3, [r3, #28]
 8000580:	b25b      	sxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d003      	beq.n	800058e <bma400_set_regs+0xba>
                {
                    /* Failure case */
                    rslt = BMA400_E_COM_FAIL;
 8000586:	2317      	movs	r3, #23
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	22fe      	movs	r2, #254	@ 0xfe
 800058c:	701a      	strb	r2, [r3, #0]
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 800058e:	2116      	movs	r1, #22
 8000590:	187b      	adds	r3, r7, r1
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	187b      	adds	r3, r7, r1
 8000596:	3201      	adds	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	2316      	movs	r3, #22
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d90b      	bls.n	80005be <bma400_set_regs+0xea>
 80005a6:	2317      	movs	r3, #23
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0cc      	beq.n	800054c <bma400_set_regs+0x78>
        if (len > 1)
 80005b2:	e004      	b.n	80005be <bma400_set_regs+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 80005b4:	2317      	movs	r3, #23
 80005b6:	18fb      	adds	r3, r7, r3
 80005b8:	22ff      	movs	r2, #255	@ 0xff
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	e000      	b.n	80005c0 <bma400_set_regs+0xec>
        if (len > 1)
 80005be:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 80005c0:	2317      	movs	r3, #23
 80005c2:	18fb      	adds	r3, r7, r3
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b25b      	sxtb	r3, r3
}
 80005c8:	0018      	movs	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b007      	add	sp, #28
 80005ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005d0 <bma400_get_regs>:

int8_t bma400_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 80005d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d2:	b0a7      	sub	sp, #156	@ 0x9c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	250f      	movs	r5, #15
 80005de:	197b      	adds	r3, r7, r5
 80005e0:	1c02      	adds	r2, r0, #0
 80005e2:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t index;
    uint8_t temp_buff[BMA400_MAX_LEN];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80005e4:	2697      	movs	r6, #151	@ 0x97
 80005e6:	19bc      	adds	r4, r7, r6
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 faac 	bl	8000b48 <null_ptr_check>
 80005f0:	0003      	movs	r3, r0
 80005f2:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 80005f4:	19bb      	adds	r3, r7, r6
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d14a      	bne.n	8000694 <bma400_get_regs+0xc4>
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d047      	beq.n	8000694 <bma400_get_regs+0xc4>
    {
        if (dev->intf != BMA400_I2C_INTF)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d006      	beq.n	800061a <bma400_get_regs+0x4a>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 800060c:	197b      	adds	r3, r7, r5
 800060e:	197a      	adds	r2, r7, r5
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	2180      	movs	r1, #128	@ 0x80
 8000614:	4249      	negs	r1, r1
 8000616:	430a      	orrs	r2, r1
 8000618:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	68dc      	ldr	r4, [r3, #12]
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	7a1b      	ldrb	r3, [r3, #8]
 8000622:	001a      	movs	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	18d2      	adds	r2, r2, r3
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685d      	ldr	r5, [r3, #4]
 800062c:	2314      	movs	r3, #20
 800062e:	18f9      	adds	r1, r7, r3
 8000630:	230f      	movs	r3, #15
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	7818      	ldrb	r0, [r3, #0]
 8000636:	002b      	movs	r3, r5
 8000638:	47a0      	blx	r4
 800063a:	0003      	movs	r3, r0
 800063c:	001a      	movs	r2, r3
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	771a      	strb	r2, [r3, #28]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	7f1b      	ldrb	r3, [r3, #28]
 8000646:	b25b      	sxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d11e      	bne.n	800068a <bma400_get_regs+0xba>
        {
            for (index = 0; index < len; index++)
 800064c:	2394      	movs	r3, #148	@ 0x94
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	2200      	movs	r2, #0
 8000652:	801a      	strh	r2, [r3, #0]
 8000654:	e012      	b.n	800067c <bma400_get_regs+0xac>
            {
                /* Parse the data read and store in "reg_data"
                 * buffer so that the dummy byte is removed
                 * and user will get only valid data
                 */
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 8000656:	2094      	movs	r0, #148	@ 0x94
 8000658:	183b      	adds	r3, r7, r0
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	7a12      	ldrb	r2, [r2, #8]
 8000660:	189a      	adds	r2, r3, r2
 8000662:	183b      	adds	r3, r7, r0
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	68b9      	ldr	r1, [r7, #8]
 8000668:	18cb      	adds	r3, r1, r3
 800066a:	2114      	movs	r1, #20
 800066c:	1879      	adds	r1, r7, r1
 800066e:	5c8a      	ldrb	r2, [r1, r2]
 8000670:	701a      	strb	r2, [r3, #0]
            for (index = 0; index < len; index++)
 8000672:	183b      	adds	r3, r7, r0
 8000674:	881a      	ldrh	r2, [r3, #0]
 8000676:	183b      	adds	r3, r7, r0
 8000678:	3201      	adds	r2, #1
 800067a:	801a      	strh	r2, [r3, #0]
 800067c:	2394      	movs	r3, #148	@ 0x94
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	d8e6      	bhi.n	8000656 <bma400_get_regs+0x86>
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8000688:	e008      	b.n	800069c <bma400_get_regs+0xcc>
            }
        }
        else
        {
            /* Failure case */
            rslt = BMA400_E_COM_FAIL;
 800068a:	2397      	movs	r3, #151	@ 0x97
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	22fe      	movs	r2, #254	@ 0xfe
 8000690:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8000692:	e003      	b.n	800069c <bma400_get_regs+0xcc>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8000694:	2397      	movs	r3, #151	@ 0x97
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	22ff      	movs	r2, #255	@ 0xff
 800069a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800069c:	2397      	movs	r3, #151	@ 0x97
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b25b      	sxtb	r3, r3
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b027      	add	sp, #156	@ 0x9c
 80006aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006ac <bma400_set_power_mode>:

    return rslt;
}

int8_t bma400_set_power_mode(uint8_t power_mode, struct bma400_dev *dev)
{
 80006ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	0002      	movs	r2, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data = 0;
 80006ba:	260e      	movs	r6, #14
 80006bc:	19bb      	adds	r3, r7, r6
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]

    rslt = null_ptr_check(dev);
 80006c2:	250f      	movs	r5, #15
 80006c4:	197c      	adds	r4, r7, r5
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fa3d 	bl	8000b48 <null_ptr_check>
 80006ce:	0003      	movs	r3, r0
 80006d0:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 80006d2:	197b      	adds	r3, r7, r5
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d108      	bne.n	80006ee <bma400_set_power_mode+0x42>
    {
        rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	19b9      	adds	r1, r7, r6
 80006e2:	2201      	movs	r2, #1
 80006e4:	2019      	movs	r0, #25
 80006e6:	f7ff ff73 	bl	80005d0 <bma400_get_regs>
 80006ea:	0003      	movs	r3, r0
 80006ec:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BMA400_OK)
 80006ee:	240f      	movs	r4, #15
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d12d      	bne.n	8000756 <bma400_set_power_mode+0xaa>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 80006fa:	200e      	movs	r0, #14
 80006fc:	183b      	adds	r3, r7, r0
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b25b      	sxtb	r3, r3
 8000702:	2203      	movs	r2, #3
 8000704:	4393      	bics	r3, r2
 8000706:	b25a      	sxtb	r2, r3
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b25b      	sxtb	r3, r3
 800070e:	2103      	movs	r1, #3
 8000710:	400b      	ands	r3, r1
 8000712:	b25b      	sxtb	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	b25b      	sxtb	r3, r3
 8000718:	b2da      	uxtb	r2, r3
 800071a:	183b      	adds	r3, r7, r0
 800071c:	701a      	strb	r2, [r3, #0]

        /* Set the power mode of sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 800071e:	193c      	adds	r4, r7, r4
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	1839      	adds	r1, r7, r0
 8000724:	2201      	movs	r2, #1
 8000726:	2019      	movs	r0, #25
 8000728:	f7ff fed4 	bl	80004d4 <bma400_set_regs>
 800072c:	0003      	movs	r3, r0
 800072e:	7023      	strb	r3, [r4, #0]
        if (power_mode == BMA400_MODE_LOW_POWER)
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d107      	bne.n	8000748 <bma400_set_power_mode+0x9c>
        {
            /* A delay of 1/ODR is required to switch power modes
             * Low power mode has 25Hz frequency and hence it needs
             * 40ms delay to enter low power mode
             */
            dev->delay_us(40000, dev->intf_ptr);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	695a      	ldr	r2, [r3, #20]
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4809      	ldr	r0, [pc, #36]	@ (8000768 <bma400_set_power_mode+0xbc>)
 8000742:	0019      	movs	r1, r3
 8000744:	4790      	blx	r2
 8000746:	e006      	b.n	8000756 <bma400_set_power_mode+0xaa>
        }
        else
        {
            dev->delay_us(10000, dev->intf_ptr); /* TBC */
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	4806      	ldr	r0, [pc, #24]	@ (800076c <bma400_set_power_mode+0xc0>)
 8000752:	0019      	movs	r1, r3
 8000754:	4790      	blx	r2
        }
    }

    return rslt;
 8000756:	230f      	movs	r3, #15
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b25b      	sxtb	r3, r3
}
 800075e:	0018      	movs	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	b005      	add	sp, #20
 8000764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	00009c40 	.word	0x00009c40
 800076c:	00002710 	.word	0x00002710

08000770 <bma400_get_accel_data>:

    return rslt;
}

int8_t bma400_get_accel_data(uint8_t data_sel, struct bma400_sensor_data *accel, struct bma400_dev *dev)
{
 8000770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000772:	b087      	sub	sp, #28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	260f      	movs	r6, #15
 800077c:	19bb      	adds	r3, r7, r6
 800077e:	1c02      	adds	r2, r0, #0
 8000780:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000782:	2517      	movs	r5, #23
 8000784:	197c      	adds	r4, r7, r5
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	0018      	movs	r0, r3
 800078a:	f000 f9dd 	bl	8000b48 <null_ptr_check>
 800078e:	0003      	movs	r3, r0
 8000790:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (accel != NULL))
 8000792:	002a      	movs	r2, r5
 8000794:	18bb      	adds	r3, r7, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b25b      	sxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10d      	bne.n	80007ba <bma400_get_accel_data+0x4a>
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00a      	beq.n	80007ba <bma400_get_accel_data+0x4a>
    {
        /* Read and store the accel data */
        rslt = get_accel_data(data_sel, accel, dev);
 80007a4:	18bc      	adds	r4, r7, r2
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	19bb      	adds	r3, r7, r6
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fb50 	bl	8000e54 <get_accel_data>
 80007b4:	0003      	movs	r3, r0
 80007b6:	7023      	strb	r3, [r4, #0]
 80007b8:	e003      	b.n	80007c2 <bma400_get_accel_data+0x52>
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 80007ba:	2317      	movs	r3, #23
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	22ff      	movs	r2, #255	@ 0xff
 80007c0:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80007c2:	2317      	movs	r3, #23
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b25b      	sxtb	r3, r3
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b007      	add	sp, #28
 80007d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007d2 <bma400_set_sensor_conf>:

int8_t bma400_set_sensor_conf(const struct bma400_sensor_conf *conf, uint16_t n_sett, struct bma400_dev *dev)
{
 80007d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d4:	b087      	sub	sp, #28
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	60f8      	str	r0, [r7, #12]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	230a      	movs	r3, #10
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	1c0a      	adds	r2, r1, #0
 80007e2:	801a      	strh	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx = 0;
 80007e4:	2614      	movs	r6, #20
 80007e6:	19bb      	adds	r3, r7, r6
 80007e8:	2200      	movs	r2, #0
 80007ea:	801a      	strh	r2, [r3, #0]
    uint8_t data_array[3] = { 0 };
 80007ec:	2310      	movs	r3, #16
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	0018      	movs	r0, r3
 80007f2:	2303      	movs	r3, #3
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f004 ffb8 	bl	800576c <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80007fc:	2517      	movs	r5, #23
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f9a0 	bl	8000b48 <null_ptr_check>
 8000808:	0003      	movs	r3, r0
 800080a:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (conf != NULL))
 800080c:	197b      	adds	r3, r7, r5
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b25b      	sxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14d      	bne.n	80008b2 <bma400_set_sensor_conf+0xe0>
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d04a      	beq.n	80008b2 <bma400_set_sensor_conf+0xe0>
    {
        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 800081c:	197c      	adds	r4, r7, r5
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2210      	movs	r2, #16
 8000822:	18b9      	adds	r1, r7, r2
 8000824:	2203      	movs	r2, #3
 8000826:	2021      	movs	r0, #33	@ 0x21
 8000828:	f7ff fed2 	bl	80005d0 <bma400_get_regs>
 800082c:	0003      	movs	r3, r0
 800082e:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8000830:	197b      	adds	r3, r7, r5
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b25b      	sxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d140      	bne.n	80008bc <bma400_set_sensor_conf+0xea>
        {
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 800083a:	19bb      	adds	r3, r7, r6
 800083c:	2200      	movs	r2, #0
 800083e:	801a      	strh	r2, [r3, #0]
 8000840:	e018      	b.n	8000874 <bma400_set_sensor_conf+0xa2>
            {
                rslt = set_sensor_conf(data_array, conf + idx, dev);
 8000842:	2514      	movs	r5, #20
 8000844:	197b      	adds	r3, r7, r5
 8000846:	881a      	ldrh	r2, [r3, #0]
 8000848:	0013      	movs	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	189b      	adds	r3, r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	001a      	movs	r2, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	1899      	adds	r1, r3, r2
 8000856:	2317      	movs	r3, #23
 8000858:	18fc      	adds	r4, r7, r3
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	2310      	movs	r3, #16
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	0018      	movs	r0, r3
 8000862:	f000 f995 	bl	8000b90 <set_sensor_conf>
 8000866:	0003      	movs	r3, r0
 8000868:	7023      	strb	r3, [r4, #0]
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 800086a:	197b      	adds	r3, r7, r5
 800086c:	881a      	ldrh	r2, [r3, #0]
 800086e:	197b      	adds	r3, r7, r5
 8000870:	3201      	adds	r2, #1
 8000872:	801a      	strh	r2, [r3, #0]
 8000874:	2314      	movs	r3, #20
 8000876:	18fa      	adds	r2, r7, r3
 8000878:	230a      	movs	r3, #10
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	8812      	ldrh	r2, [r2, #0]
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	d205      	bcs.n	8000890 <bma400_set_sensor_conf+0xbe>
 8000884:	2317      	movs	r3, #23
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0d8      	beq.n	8000842 <bma400_set_sensor_conf+0x70>
            }

            if (rslt == BMA400_OK)
 8000890:	2217      	movs	r2, #23
 8000892:	18bb      	adds	r3, r7, r2
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b25b      	sxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10f      	bne.n	80008bc <bma400_set_sensor_conf+0xea>
            {
                /* Set the interrupt pin mapping configurations */
                rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 800089c:	18bc      	adds	r4, r7, r2
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2210      	movs	r2, #16
 80008a2:	18b9      	adds	r1, r7, r2
 80008a4:	2203      	movs	r2, #3
 80008a6:	2021      	movs	r0, #33	@ 0x21
 80008a8:	f7ff fe14 	bl	80004d4 <bma400_set_regs>
 80008ac:	0003      	movs	r3, r0
 80008ae:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 80008b0:	e004      	b.n	80008bc <bma400_set_sensor_conf+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 80008b2:	2317      	movs	r3, #23
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	22ff      	movs	r2, #255	@ 0xff
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	e000      	b.n	80008be <bma400_set_sensor_conf+0xec>
        if (rslt == BMA400_OK)
 80008bc:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 80008be:	2317      	movs	r3, #23
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b25b      	sxtb	r3, r3
}
 80008c6:	0018      	movs	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b007      	add	sp, #28
 80008cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080008d0 <bma400_set_device_conf>:

    return rslt;
}

int8_t bma400_set_device_conf(const struct bma400_device_conf *conf, uint8_t n_sett, struct bma400_dev *dev)
{
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	230b      	movs	r3, #11
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	1c0a      	adds	r2, r1, #0
 80008e0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx;
    uint8_t data_array[3] = { 0 };
 80008e2:	2610      	movs	r6, #16
 80008e4:	19bb      	adds	r3, r7, r6
 80008e6:	0018      	movs	r0, r3
 80008e8:	2303      	movs	r3, #3
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f004 ff3d 	bl	800576c <memset>

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80008f2:	2517      	movs	r5, #23
 80008f4:	197c      	adds	r4, r7, r5
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 f925 	bl	8000b48 <null_ptr_check>
 80008fe:	0003      	movs	r3, r0
 8000900:	7023      	strb	r3, [r4, #0]

    if ((rslt == BMA400_OK) && (conf != NULL))
 8000902:	197b      	adds	r3, r7, r5
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b25b      	sxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d000      	beq.n	800090e <bma400_set_device_conf+0x3e>
 800090c:	e10e      	b.n	8000b2c <bma400_set_device_conf+0x25c>
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d100      	bne.n	8000916 <bma400_set_device_conf+0x46>
 8000914:	e10a      	b.n	8000b2c <bma400_set_device_conf+0x25c>
    {

        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8000916:	197c      	adds	r4, r7, r5
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	19b9      	adds	r1, r7, r6
 800091c:	2203      	movs	r2, #3
 800091e:	2021      	movs	r0, #33	@ 0x21
 8000920:	f7ff fe56 	bl	80005d0 <bma400_get_regs>
 8000924:	0003      	movs	r3, r0
 8000926:	7023      	strb	r3, [r4, #0]

        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8000928:	2314      	movs	r3, #20
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	2200      	movs	r2, #0
 800092e:	801a      	strh	r2, [r3, #0]
 8000930:	e0db      	b.n	8000aea <bma400_set_device_conf+0x21a>
        {
            switch (conf[idx].type)
 8000932:	2314      	movs	r3, #20
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	881a      	ldrh	r2, [r3, #0]
 8000938:	0013      	movs	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	189b      	adds	r3, r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	001a      	movs	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	189b      	adds	r3, r3, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b05      	cmp	r3, #5
 800094a:	d900      	bls.n	800094e <bma400_set_device_conf+0x7e>
 800094c:	e0bf      	b.n	8000ace <bma400_set_device_conf+0x1fe>
 800094e:	009a      	lsls	r2, r3, #2
 8000950:	4b7c      	ldr	r3, [pc, #496]	@ (8000b44 <bma400_set_device_conf+0x274>)
 8000952:	18d3      	adds	r3, r2, r3
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	469f      	mov	pc, r3
            {
                case BMA400_AUTOWAKEUP_TIMEOUT:
                    rslt = set_autowakeup_timeout(&conf[idx].param.auto_wakeup, dev);
 8000958:	2314      	movs	r3, #20
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	881a      	ldrh	r2, [r3, #0]
 800095e:	0013      	movs	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	189b      	adds	r3, r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	001a      	movs	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	189b      	adds	r3, r3, r2
 800096c:	3302      	adds	r3, #2
 800096e:	2217      	movs	r2, #23
 8000970:	18bc      	adds	r4, r7, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fb56 	bl	8001028 <set_autowakeup_timeout>
 800097c:	0003      	movs	r3, r0
 800097e:	7023      	strb	r3, [r4, #0]
                    break;
 8000980:	e0ad      	b.n	8000ade <bma400_set_device_conf+0x20e>
                case BMA400_AUTOWAKEUP_INT:
                    rslt = set_autowakeup_interrupt(&conf[idx].param.wakeup, dev);
 8000982:	2514      	movs	r5, #20
 8000984:	197b      	adds	r3, r7, r5
 8000986:	881a      	ldrh	r2, [r3, #0]
 8000988:	0013      	movs	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	189b      	adds	r3, r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	001a      	movs	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	189b      	adds	r3, r3, r2
 8000996:	3302      	adds	r3, #2
 8000998:	2617      	movs	r6, #23
 800099a:	19bc      	adds	r4, r7, r6
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fbdd 	bl	8001160 <set_autowakeup_interrupt>
 80009a6:	0003      	movs	r3, r0
 80009a8:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 80009aa:	19bb      	adds	r3, r7, r6
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d000      	beq.n	80009b6 <bma400_set_device_conf+0xe6>
 80009b4:	e090      	b.n	8000ad8 <bma400_set_device_conf+0x208>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_WAKEUP_INT_MAP, conf[idx].param.wakeup.int_chan);
 80009b6:	197b      	adds	r3, r7, r5
 80009b8:	881a      	ldrh	r2, [r3, #0]
 80009ba:	0013      	movs	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	189b      	adds	r3, r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	001a      	movs	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	189b      	adds	r3, r3, r2
 80009c8:	7a5a      	ldrb	r2, [r3, #9]
 80009ca:	2310      	movs	r3, #16
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2107      	movs	r1, #7
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 ffb7 	bl	8001944 <map_int_pin>
                    }

                    break;
 80009d6:	e07f      	b.n	8000ad8 <bma400_set_device_conf+0x208>
                case BMA400_AUTO_LOW_POWER:
                    rslt = set_auto_low_power(&conf[idx].param.auto_lp, dev);
 80009d8:	2314      	movs	r3, #20
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	881a      	ldrh	r2, [r3, #0]
 80009de:	0013      	movs	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	189b      	adds	r3, r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	001a      	movs	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	189b      	adds	r3, r3, r2
 80009ec:	3302      	adds	r3, #2
 80009ee:	2217      	movs	r2, #23
 80009f0:	18bc      	adds	r4, r7, r2
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fc16 	bl	8001228 <set_auto_low_power>
 80009fc:	0003      	movs	r3, r0
 80009fe:	7023      	strb	r3, [r4, #0]
                    break;
 8000a00:	e06d      	b.n	8000ade <bma400_set_device_conf+0x20e>
                case BMA400_INT_PIN_CONF:
                    rslt = set_int_pin_conf(conf[idx].param.int_conf, dev);
 8000a02:	2314      	movs	r3, #20
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	881a      	ldrh	r2, [r3, #0]
 8000a08:	0013      	movs	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	189b      	adds	r3, r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	001a      	movs	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	189b      	adds	r3, r3, r2
 8000a16:	2217      	movs	r2, #23
 8000a18:	18bc      	adds	r4, r7, r2
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	5a9a      	ldrh	r2, [r3, r2]
 8000a20:	2300      	movs	r3, #0
 8000a22:	0412      	lsls	r2, r2, #16
 8000a24:	0c12      	lsrs	r2, r2, #16
 8000a26:	0c1b      	lsrs	r3, r3, #16
 8000a28:	041b      	lsls	r3, r3, #16
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 faa9 	bl	8001f84 <set_int_pin_conf>
 8000a32:	0003      	movs	r3, r0
 8000a34:	7023      	strb	r3, [r4, #0]
                    break;
 8000a36:	e052      	b.n	8000ade <bma400_set_device_conf+0x20e>
                case BMA400_INT_OVERRUN_CONF:

                    /* Interrupt pin mapping */
                    map_int_pin(data_array, BMA400_INT_OVERRUN_MAP, conf[idx].param.overrun_int.int_chan);
 8000a38:	2314      	movs	r3, #20
 8000a3a:	18fb      	adds	r3, r7, r3
 8000a3c:	881a      	ldrh	r2, [r3, #0]
 8000a3e:	0013      	movs	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	189b      	adds	r3, r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	001a      	movs	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	189b      	adds	r3, r3, r2
 8000a4c:	789a      	ldrb	r2, [r3, #2]
 8000a4e:	2310      	movs	r3, #16
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	210b      	movs	r1, #11
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 ff75 	bl	8001944 <map_int_pin>
                    break;
 8000a5a:	e040      	b.n	8000ade <bma400_set_device_conf+0x20e>
                case BMA400_FIFO_CONF:
                    rslt = set_fifo_conf(&conf[idx].param.fifo_conf, dev);
 8000a5c:	2514      	movs	r5, #20
 8000a5e:	197b      	adds	r3, r7, r5
 8000a60:	881a      	ldrh	r2, [r3, #0]
 8000a62:	0013      	movs	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	189b      	adds	r3, r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	189b      	adds	r3, r3, r2
 8000a70:	3302      	adds	r3, #2
 8000a72:	2617      	movs	r6, #23
 8000a74:	19bc      	adds	r4, r7, r6
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 fadb 	bl	8002036 <set_fifo_conf>
 8000a80:	0003      	movs	r3, r0
 8000a82:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 8000a84:	19bb      	adds	r3, r7, r6
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d126      	bne.n	8000adc <bma400_set_device_conf+0x20c>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_FIFO_WM_INT_MAP, conf[idx].param.fifo_conf.fifo_wm_channel);
 8000a8e:	197b      	adds	r3, r7, r5
 8000a90:	881a      	ldrh	r2, [r3, #0]
 8000a92:	0013      	movs	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	189b      	adds	r3, r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	189b      	adds	r3, r3, r2
 8000aa0:	79da      	ldrb	r2, [r3, #7]
 8000aa2:	2410      	movs	r4, #16
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 ff4b 	bl	8001944 <map_int_pin>
                        map_int_pin(data_array, BMA400_FIFO_FULL_INT_MAP, conf[idx].param.fifo_conf.fifo_full_channel);
 8000aae:	197b      	adds	r3, r7, r5
 8000ab0:	881a      	ldrh	r2, [r3, #0]
 8000ab2:	0013      	movs	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	189b      	adds	r3, r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	001a      	movs	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	189b      	adds	r3, r3, r2
 8000ac0:	799a      	ldrb	r2, [r3, #6]
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 ff3c 	bl	8001944 <map_int_pin>
                    }

                    break;
 8000acc:	e006      	b.n	8000adc <bma400_set_device_conf+0x20c>
                default:
                    rslt = BMA400_E_INVALID_CONFIG;
 8000ace:	2317      	movs	r3, #23
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	22fc      	movs	r2, #252	@ 0xfc
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e002      	b.n	8000ade <bma400_set_device_conf+0x20e>
                    break;
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	e000      	b.n	8000ade <bma400_set_device_conf+0x20e>
                    break;
 8000adc:	46c0      	nop			@ (mov r8, r8)
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8000ade:	2114      	movs	r1, #20
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	881a      	ldrh	r2, [r3, #0]
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	3201      	adds	r2, #1
 8000ae8:	801a      	strh	r2, [r3, #0]
 8000aea:	230b      	movs	r3, #11
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	2214      	movs	r2, #20
 8000af4:	18ba      	adds	r2, r7, r2
 8000af6:	8812      	ldrh	r2, [r2, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d206      	bcs.n	8000b0a <bma400_set_device_conf+0x23a>
 8000afc:	2317      	movs	r3, #23
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d100      	bne.n	8000b0a <bma400_set_device_conf+0x23a>
 8000b08:	e713      	b.n	8000932 <bma400_set_device_conf+0x62>
            }
        }

        if (rslt == BMA400_OK)
 8000b0a:	2217      	movs	r2, #23
 8000b0c:	18bb      	adds	r3, r7, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10e      	bne.n	8000b34 <bma400_set_device_conf+0x264>
        {
            /* Set the interrupt pin mapping configurations */
            rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8000b16:	18bc      	adds	r4, r7, r2
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2210      	movs	r2, #16
 8000b1c:	18b9      	adds	r1, r7, r2
 8000b1e:	2203      	movs	r2, #3
 8000b20:	2021      	movs	r0, #33	@ 0x21
 8000b22:	f7ff fcd7 	bl	80004d4 <bma400_set_regs>
 8000b26:	0003      	movs	r3, r0
 8000b28:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8000b2a:	e003      	b.n	8000b34 <bma400_set_device_conf+0x264>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8000b2c:	2317      	movs	r3, #23
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	22ff      	movs	r2, #255	@ 0xff
 8000b32:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8000b34:	2317      	movs	r3, #23
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b25b      	sxtb	r3, r3
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b007      	add	sp, #28
 8000b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b44:	08006080 	.word	0x08006080

08000b48 <null_ptr_check>:
/************************************************************************************/
/*********************** Static function definitions **********************************/
/************************************************************************************/

static int8_t null_ptr_check(const struct bma400_dev *dev)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->intf_ptr == NULL))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00b      	beq.n	8000b6e <null_ptr_check+0x26>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d007      	beq.n	8000b6e <null_ptr_check+0x26>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <null_ptr_check+0x26>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d104      	bne.n	8000b78 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BMA400_E_NULL_PTR;
 8000b6e:	230f      	movs	r3, #15
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	22ff      	movs	r2, #255	@ 0xff
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	e003      	b.n	8000b80 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMA400_OK;
 8000b78:	230f      	movs	r3, #15
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8000b80:	230f      	movs	r3, #15
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b25b      	sxtb	r3, r3
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b004      	add	sp, #16
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <set_sensor_conf>:

static int8_t set_sensor_conf(uint8_t *data, const struct bma400_sensor_conf *conf, struct bma400_dev *dev)
{
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMA400_E_INVALID_CONFIG;
 8000b9c:	2117      	movs	r1, #23
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	22fc      	movs	r2, #252	@ 0xfc
 8000ba2:	701a      	strb	r2, [r3, #0]
    uint8_t int_enable = 0;
 8000ba4:	2516      	movs	r5, #22
 8000ba6:	197b      	adds	r3, r7, r5
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
    enum bma400_int_chan int_map = BMA400_UNMAP_INT_PIN;
 8000bac:	2615      	movs	r6, #21
 8000bae:	19bb      	adds	r3, r7, r6
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]

    if (BMA400_ACCEL == conf->type)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d110      	bne.n	8000bde <set_sensor_conf+0x4e>
    {
        /* Setting Accel configurations */
        rslt = set_accel_conf(&conf->param.accel, dev);
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	187c      	adds	r4, r7, r1
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f8aa 	bl	8000d20 <set_accel_conf>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_DATA_READY_INT_MAP;
 8000bd0:	197b      	adds	r3, r7, r5
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.accel.int_chan;
 8000bd6:	19bb      	adds	r3, r7, r6
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	7a12      	ldrb	r2, [r2, #8]
 8000bdc:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_TAP_INT == conf->type)
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d113      	bne.n	8000c0e <set_sensor_conf+0x7e>
    {
        /* Setting tap configurations */
        rslt = set_tap_conf(&conf->param.tap, dev);
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	3302      	adds	r3, #2
 8000bea:	2217      	movs	r2, #23
 8000bec:	18bc      	adds	r4, r7, r2
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	0011      	movs	r1, r2
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 fb96 	bl	8001324 <set_tap_conf>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_TAP_INT_MAP;
 8000bfc:	2316      	movs	r3, #22
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	2209      	movs	r2, #9
 8000c02:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.tap.int_chan;
 8000c04:	2315      	movs	r3, #21
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	79d2      	ldrb	r2, [r2, #7]
 8000c0c:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ACTIVITY_CHANGE_INT == conf->type)
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d113      	bne.n	8000c3e <set_sensor_conf+0xae>
    {
        /* Setting activity change configurations */
        rslt = set_activity_change_conf(&conf->param.act_ch, dev);
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3302      	adds	r3, #2
 8000c1a:	2217      	movs	r2, #23
 8000c1c:	18bc      	adds	r4, r7, r2
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	0011      	movs	r1, r2
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 fc04 	bl	8001430 <set_activity_change_conf>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ACT_CH_INT_MAP;
 8000c2c:	2316      	movs	r3, #22
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	2208      	movs	r2, #8
 8000c32:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.act_ch.int_chan;
 8000c34:	2315      	movs	r3, #21
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	7992      	ldrb	r2, [r2, #6]
 8000c3c:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN1_INT == conf->type)
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d113      	bne.n	8000c6e <set_sensor_conf+0xde>
    {
        /* Setting generic int 1 configurations */
        rslt = set_gen1_int(&conf->param.gen_int, dev);
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	2217      	movs	r2, #23
 8000c4c:	18bc      	adds	r4, r7, r2
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	0011      	movs	r1, r2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fc3e 	bl	80014d4 <set_gen1_int>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN1_INT_MAP;
 8000c5c:	2316      	movs	r3, #22
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	2205      	movs	r2, #5
 8000c62:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 8000c64:	2315      	movs	r3, #21
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	7c92      	ldrb	r2, [r2, #18]
 8000c6c:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN2_INT == conf->type)
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	d113      	bne.n	8000c9e <set_sensor_conf+0x10e>
    {
        /* Setting generic int 2 configurations */
        rslt = set_gen2_int(&conf->param.gen_int, dev);
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3302      	adds	r3, #2
 8000c7a:	2217      	movs	r2, #23
 8000c7c:	18bc      	adds	r4, r7, r2
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	0011      	movs	r1, r2
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 fcf6 	bl	8001674 <set_gen2_int>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN2_INT_MAP;
 8000c8c:	2316      	movs	r3, #22
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	2204      	movs	r2, #4
 8000c92:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 8000c94:	2315      	movs	r3, #21
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	7c92      	ldrb	r2, [r2, #18]
 8000c9c:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ORIENT_CHANGE_INT == conf->type)
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	d113      	bne.n	8000cce <set_sensor_conf+0x13e>
    {
        /* Setting orient int configurations */
        rslt = set_orient_int(&conf->param.orient, dev);
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	2217      	movs	r2, #23
 8000cac:	18bc      	adds	r4, r7, r2
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	0011      	movs	r1, r2
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 fdae 	bl	8001814 <set_orient_int>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ORIENT_CH_INT_MAP;
 8000cbc:	2316      	movs	r3, #22
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	2206      	movs	r2, #6
 8000cc2:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.orient.int_chan;
 8000cc4:	2315      	movs	r3, #21
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	7b92      	ldrb	r2, [r2, #14]
 8000ccc:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_STEP_COUNTER_INT == conf->type)
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d10c      	bne.n	8000cf0 <set_sensor_conf+0x160>
    {
        rslt = BMA400_OK;
 8000cd6:	2317      	movs	r3, #23
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
        int_enable = BMA400_STEP_INT_MAP;
 8000cde:	2316      	movs	r3, #22
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	220a      	movs	r2, #10
 8000ce4:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.step_cnt.int_chan;
 8000ce6:	2315      	movs	r3, #21
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	7892      	ldrb	r2, [r2, #2]
 8000cee:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BMA400_OK)
 8000cf0:	2317      	movs	r3, #23
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d109      	bne.n	8000d10 <set_sensor_conf+0x180>
    {
        /* Int pin mapping settings */
        map_int_pin(data, int_enable, int_map);
 8000cfc:	2315      	movs	r3, #21
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	2316      	movs	r3, #22
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	7819      	ldrb	r1, [r3, #0]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 fe1a 	bl	8001944 <map_int_pin>
    }

    return rslt;
 8000d10:	2317      	movs	r3, #23
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b25b      	sxtb	r3, r3
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b007      	add	sp, #28
 8000d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d20 <set_accel_conf>:

    return rslt;
}

static int8_t set_accel_conf(const struct bma400_acc_conf *accel_conf, struct bma400_dev *dev)
{
 8000d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 8000d2a:	250c      	movs	r5, #12
 8000d2c:	197b      	adds	r3, r7, r5
 8000d2e:	4a48      	ldr	r2, [pc, #288]	@ (8000e50 <set_accel_conf+0x130>)
 8000d30:	8811      	ldrh	r1, [r2, #0]
 8000d32:	8019      	strh	r1, [r3, #0]
 8000d34:	7892      	ldrb	r2, [r2, #2]
 8000d36:	709a      	strb	r2, [r3, #2]

    /* Update the accel configurations from the user structure
     * accel_conf
     */
    rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8000d38:	260f      	movs	r6, #15
 8000d3a:	19bc      	adds	r4, r7, r6
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	1979      	adds	r1, r7, r5
 8000d40:	2203      	movs	r2, #3
 8000d42:	2019      	movs	r0, #25
 8000d44:	f7ff fc44 	bl	80005d0 <bma400_get_regs>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8000d4c:	0034      	movs	r4, r6
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d173      	bne.n	8000e40 <set_accel_conf+0x120>
    {
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8000d58:	0028      	movs	r0, r5
 8000d5a:	183b      	adds	r3, r7, r0
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	227f      	movs	r2, #127	@ 0x7f
 8000d62:	4013      	ands	r3, r2
 8000d64:	b25a      	sxtb	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	795b      	ldrb	r3, [r3, #5]
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	01db      	lsls	r3, r3, #7
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	183b      	adds	r3, r7, r0
 8000d78:	701a      	strb	r2, [r3, #0]
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 8000d7a:	183b      	adds	r3, r7, r0
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	2260      	movs	r2, #96	@ 0x60
 8000d82:	4393      	bics	r3, r2
 8000d84:	b25a      	sxtb	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	791b      	ldrb	r3, [r3, #4]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	015b      	lsls	r3, r3, #5
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	2160      	movs	r1, #96	@ 0x60
 8000d92:	400b      	ands	r3, r1
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	183b      	adds	r3, r7, r0
 8000d9e:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 8000da0:	183b      	adds	r3, r7, r0
 8000da2:	785b      	ldrb	r3, [r3, #1]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	223f      	movs	r2, #63	@ 0x3f
 8000da8:	4013      	ands	r3, r2
 8000daa:	b25a      	sxtb	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	019b      	lsls	r3, r3, #6
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	183b      	adds	r3, r7, r0
 8000dbe:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 8000dc0:	183b      	adds	r3, r7, r0
 8000dc2:	785b      	ldrb	r3, [r3, #1]
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	2230      	movs	r2, #48	@ 0x30
 8000dc8:	4393      	bics	r3, r2
 8000dca:	b25a      	sxtb	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	78db      	ldrb	r3, [r3, #3]
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	2130      	movs	r1, #48	@ 0x30
 8000dd8:	400b      	ands	r3, r1
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	183b      	adds	r3, r7, r0
 8000de4:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 8000de6:	183b      	adds	r3, r7, r0
 8000de8:	785b      	ldrb	r3, [r3, #1]
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	220f      	movs	r2, #15
 8000dee:	4393      	bics	r3, r2
 8000df0:	b25a      	sxtb	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	210f      	movs	r1, #15
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	183b      	adds	r3, r7, r0
 8000e06:	705a      	strb	r2, [r3, #1]
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 8000e08:	183b      	adds	r3, r7, r0
 8000e0a:	789b      	ldrb	r3, [r3, #2]
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	220c      	movs	r2, #12
 8000e10:	4393      	bics	r3, r2
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	789b      	ldrb	r3, [r3, #2]
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	210c      	movs	r1, #12
 8000e20:	400b      	ands	r3, r1
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	183b      	adds	r3, r7, r0
 8000e2c:	709a      	strb	r2, [r3, #2]

        /* Set the accel configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8000e2e:	193c      	adds	r4, r7, r4
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	1839      	adds	r1, r7, r0
 8000e34:	2203      	movs	r2, #3
 8000e36:	2019      	movs	r0, #25
 8000e38:	f7ff fb4c 	bl	80004d4 <bma400_set_regs>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8000e40:	230f      	movs	r3, #15
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b25b      	sxtb	r3, r3
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b005      	add	sp, #20
 8000e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e50:	08006078 	.word	0x08006078

08000e54 <get_accel_data>:

    return rslt;
}

static int8_t get_accel_data(uint8_t data_sel, struct bma400_sensor_data *accel, struct bma400_dev *dev)
{
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	240f      	movs	r4, #15
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	1c02      	adds	r2, r0, #0
 8000e64:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t data_array[9] = { 0 };
 8000e66:	2510      	movs	r5, #16
 8000e68:	197b      	adds	r3, r7, r5
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	2309      	movs	r3, #9
 8000e6e:	001a      	movs	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	f004 fc7b 	bl	800576c <memset>
    uint8_t msb;
    uint8_t time_0;
    uint16_t time_1;
    uint32_t time_2;

    if (data_sel == BMA400_DATA_ONLY)
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10a      	bne.n	8000e94 <get_accel_data+0x40>
    {
        /* Read the sensor data registers only */
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 6, dev);
 8000e7e:	2327      	movs	r3, #39	@ 0x27
 8000e80:	18fc      	adds	r4, r7, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	1979      	adds	r1, r7, r5
 8000e86:	2206      	movs	r2, #6
 8000e88:	2004      	movs	r0, #4
 8000e8a:	f7ff fba1 	bl	80005d0 <bma400_get_regs>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	7023      	strb	r3, [r4, #0]
 8000e92:	e014      	b.n	8000ebe <get_accel_data+0x6a>
    }
    else if (data_sel == BMA400_DATA_SENSOR_TIME)
 8000e94:	230f      	movs	r3, #15
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d10b      	bne.n	8000eb6 <get_accel_data+0x62>
    {
        /* Read the sensor data along with sensor time */
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 9, dev);
 8000e9e:	2327      	movs	r3, #39	@ 0x27
 8000ea0:	18fc      	adds	r4, r7, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	18b9      	adds	r1, r7, r2
 8000ea8:	2209      	movs	r2, #9
 8000eaa:	2004      	movs	r0, #4
 8000eac:	f7ff fb90 	bl	80005d0 <bma400_get_regs>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	7023      	strb	r3, [r4, #0]
 8000eb4:	e003      	b.n	8000ebe <get_accel_data+0x6a>
    }
    else
    {
        /* Invalid use of "data_sel" */
        rslt = BMA400_E_INVALID_CONFIG;
 8000eb6:	2327      	movs	r3, #39	@ 0x27
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	22fc      	movs	r2, #252	@ 0xfc
 8000ebc:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BMA400_OK)
 8000ebe:	2327      	movs	r3, #39	@ 0x27
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d000      	beq.n	8000ecc <get_accel_data+0x78>
 8000eca:	e0a3      	b.n	8001014 <get_accel_data+0x1c0>
    {
        lsb = data_array[0];
 8000ecc:	2110      	movs	r1, #16
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	781a      	ldrb	r2, [r3, #0]
 8000ed2:	2024      	movs	r0, #36	@ 0x24
 8000ed4:	183b      	adds	r3, r7, r0
 8000ed6:	801a      	strh	r2, [r3, #0]
        msb = data_array[1];
 8000ed8:	2423      	movs	r4, #35	@ 0x23
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	187a      	adds	r2, r7, r1
 8000ede:	7852      	ldrb	r2, [r2, #1]
 8000ee0:	701a      	strb	r2, [r3, #0]

        /* accel X axis data */
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	183b      	adds	r3, r7, r0
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	18d3      	adds	r3, r2, r3
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	801a      	strh	r2, [r3, #0]
        if (accel->x > 2047)
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	2200      	movs	r2, #0
 8000efe:	5e9a      	ldrsh	r2, [r3, r2]
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	429a      	cmp	r2, r3
 8000f06:	db0a      	blt.n	8000f1e <get_accel_data+0xca>
        {
            /* Computing accel data negative value */
            accel->x = accel->x - 4096;
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	5e9b      	ldrsh	r3, [r3, r2]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4a44      	ldr	r2, [pc, #272]	@ (8001024 <get_accel_data+0x1d0>)
 8000f12:	4694      	mov	ip, r2
 8000f14:	4463      	add	r3, ip
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	801a      	strh	r2, [r3, #0]
        }

        lsb = data_array[2];
 8000f1e:	2110      	movs	r1, #16
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	789a      	ldrb	r2, [r3, #2]
 8000f24:	2024      	movs	r0, #36	@ 0x24
 8000f26:	183b      	adds	r3, r7, r0
 8000f28:	801a      	strh	r2, [r3, #0]
        msb = data_array[3];
 8000f2a:	2423      	movs	r4, #35	@ 0x23
 8000f2c:	193b      	adds	r3, r7, r4
 8000f2e:	187a      	adds	r2, r7, r1
 8000f30:	78d2      	ldrb	r2, [r2, #3]
 8000f32:	701a      	strb	r2, [r3, #0]

        /* accel Y axis data */
        accel->y = (int16_t)(((uint16_t)msb * 256) | lsb);
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	183b      	adds	r3, r7, r0
 8000f42:	2100      	movs	r1, #0
 8000f44:	5e5b      	ldrsh	r3, [r3, r1]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	805a      	strh	r2, [r3, #2]
        if (accel->y > 2047)
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	2202      	movs	r2, #2
 8000f52:	5e9a      	ldrsh	r2, [r3, r2]
 8000f54:	2380      	movs	r3, #128	@ 0x80
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	db0a      	blt.n	8000f72 <get_accel_data+0x11e>
        {
            /* Computing accel data negative value */
            accel->y = accel->y - 4096;
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	5e9b      	ldrsh	r3, [r3, r2]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4a2f      	ldr	r2, [pc, #188]	@ (8001024 <get_accel_data+0x1d0>)
 8000f66:	4694      	mov	ip, r2
 8000f68:	4463      	add	r3, ip
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	805a      	strh	r2, [r3, #2]
        }

        lsb = data_array[4];
 8000f72:	2110      	movs	r1, #16
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	791a      	ldrb	r2, [r3, #4]
 8000f78:	2024      	movs	r0, #36	@ 0x24
 8000f7a:	183b      	adds	r3, r7, r0
 8000f7c:	801a      	strh	r2, [r3, #0]
        msb = data_array[5];
 8000f7e:	2423      	movs	r4, #35	@ 0x23
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	187a      	adds	r2, r7, r1
 8000f84:	7952      	ldrb	r2, [r2, #5]
 8000f86:	701a      	strb	r2, [r3, #0]

        /* accel Z axis data */
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	b21a      	sxth	r2, r3
 8000f94:	183b      	adds	r3, r7, r0
 8000f96:	2100      	movs	r1, #0
 8000f98:	5e5b      	ldrsh	r3, [r3, r1]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	809a      	strh	r2, [r3, #4]
        if (accel->z > 2047)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	5e9a      	ldrsh	r2, [r3, r2]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	429a      	cmp	r2, r3
 8000fae:	db0a      	blt.n	8000fc6 <get_accel_data+0x172>
        {
            /* Computing accel data negative value */
            accel->z = accel->z - 4096;
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	5e9b      	ldrsh	r3, [r3, r2]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001024 <get_accel_data+0x1d0>)
 8000fba:	4694      	mov	ip, r2
 8000fbc:	4463      	add	r3, ip
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	809a      	strh	r2, [r3, #4]
        }

        if (data_sel == BMA400_DATA_ONLY)
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <get_accel_data+0x182>
        {
            /* Update sensortime as 0 */
            accel->sensortime = 0;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
        }

        if (data_sel == BMA400_DATA_SENSOR_TIME)
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d119      	bne.n	8001014 <get_accel_data+0x1c0>
        {
            /* Sensor-time data*/
            time_0 = data_array[6];
 8000fe0:	2022      	movs	r0, #34	@ 0x22
 8000fe2:	183b      	adds	r3, r7, r0
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	187a      	adds	r2, r7, r1
 8000fe8:	7992      	ldrb	r2, [r2, #6]
 8000fea:	701a      	strb	r2, [r3, #0]
            time_1 = ((uint16_t)data_array[7] << 8);
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	79db      	ldrb	r3, [r3, #7]
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	2420      	movs	r4, #32
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	0212      	lsls	r2, r2, #8
 8000ff8:	801a      	strh	r2, [r3, #0]
            time_2 = ((uint32_t)data_array[8] << 16);
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	7a1b      	ldrb	r3, [r3, #8]
 8000ffe:	041b      	lsls	r3, r3, #16
 8001000:	61fb      	str	r3, [r7, #28]
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 8001002:	193b      	adds	r3, r7, r4
 8001004:	881a      	ldrh	r2, [r3, #0]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	18d2      	adds	r2, r2, r3
 800100a:	183b      	adds	r3, r7, r0
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	18d2      	adds	r2, r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	609a      	str	r2, [r3, #8]
        }
    }

    return rslt;
 8001014:	2327      	movs	r3, #39	@ 0x27
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b25b      	sxtb	r3, r3
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b00a      	add	sp, #40	@ 0x28
 8001022:	bdb0      	pop	{r4, r5, r7, pc}
 8001024:	fffff000 	.word	0xfffff000

08001028 <set_autowakeup_timeout>:

static int8_t set_autowakeup_timeout(const struct bma400_auto_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2];
    uint8_t lsb;
    uint8_t msb;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &data_array[1], 1, dev);
 8001032:	260f      	movs	r6, #15
 8001034:	19bc      	adds	r4, r7, r6
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	2508      	movs	r5, #8
 800103a:	197b      	adds	r3, r7, r5
 800103c:	1c59      	adds	r1, r3, #1
 800103e:	0013      	movs	r3, r2
 8001040:	2201      	movs	r2, #1
 8001042:	202d      	movs	r0, #45	@ 0x2d
 8001044:	f7ff fac4 	bl	80005d0 <bma400_get_regs>
 8001048:	0003      	movs	r3, r0
 800104a:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800104c:	0034      	movs	r4, r6
 800104e:	193b      	adds	r3, r7, r4
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b25b      	sxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d13e      	bne.n	80010d6 <set_autowakeup_timeout+0xae>
    {
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 8001058:	0028      	movs	r0, r5
 800105a:	183b      	adds	r3, r7, r0
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	b25b      	sxtb	r3, r3
 8001060:	2204      	movs	r2, #4
 8001062:	4393      	bics	r3, r2
 8001064:	b25a      	sxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	b25b      	sxtb	r3, r3
 8001070:	2104      	movs	r1, #4
 8001072:	400b      	ands	r3, r1
 8001074:	b25b      	sxtb	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b25b      	sxtb	r3, r3
 800107a:	b2da      	uxtb	r2, r3
 800107c:	183b      	adds	r3, r7, r0
 800107e:	705a      	strb	r2, [r3, #1]

        /* LSB of timeout threshold */
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	885b      	ldrh	r3, [r3, #2]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	250e      	movs	r5, #14
 8001088:	197b      	adds	r3, r7, r5
 800108a:	210f      	movs	r1, #15
 800108c:	400a      	ands	r2, r1
 800108e:	701a      	strb	r2, [r3, #0]

        /* MSB of timeout threshold */
        msb = BMA400_GET_BITS(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_MSB);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	885b      	ldrh	r3, [r3, #2]
 8001094:	111a      	asrs	r2, r3, #4
 8001096:	210d      	movs	r1, #13
 8001098:	187b      	adds	r3, r7, r1
 800109a:	701a      	strb	r2, [r3, #0]

        /* Set the value in the data_array */
        data_array[0] = msb;
 800109c:	183b      	adds	r3, r7, r0
 800109e:	187a      	adds	r2, r7, r1
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT_THRES, lsb);
 80010a4:	183b      	adds	r3, r7, r0
 80010a6:	785b      	ldrb	r3, [r3, #1]
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	220f      	movs	r2, #15
 80010ac:	4013      	ands	r3, r2
 80010ae:	b25a      	sxtb	r2, r3
 80010b0:	197b      	adds	r3, r7, r5
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	183b      	adds	r3, r7, r0
 80010c2:	705a      	strb	r2, [r3, #1]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_0, data_array, 2, dev);
 80010c4:	193c      	adds	r4, r7, r4
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	1839      	adds	r1, r7, r0
 80010ca:	2202      	movs	r2, #2
 80010cc:	202c      	movs	r0, #44	@ 0x2c
 80010ce:	f7ff fa01 	bl	80004d4 <bma400_set_regs>
 80010d2:	0003      	movs	r3, r0
 80010d4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80010d6:	230f      	movs	r3, #15
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b25b      	sxtb	r3, r3
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b005      	add	sp, #20
 80010e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010e6 <set_auto_wakeup>:

    return rslt;
}

int8_t set_auto_wakeup(uint8_t conf, struct bma400_dev *dev)
{
 80010e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e8:	b085      	sub	sp, #20
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	0002      	movs	r2, r0
 80010ee:	6039      	str	r1, [r7, #0]
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 80010f4:	260f      	movs	r6, #15
 80010f6:	19bc      	adds	r4, r7, r6
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	250e      	movs	r5, #14
 80010fc:	1979      	adds	r1, r7, r5
 80010fe:	2201      	movs	r2, #1
 8001100:	202d      	movs	r0, #45	@ 0x2d
 8001102:	f7ff fa65 	bl	80005d0 <bma400_get_regs>
 8001106:	0003      	movs	r3, r0
 8001108:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800110a:	0034      	movs	r4, r6
 800110c:	193b      	adds	r3, r7, r4
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b25b      	sxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d11c      	bne.n	8001150 <set_auto_wakeup+0x6a>
    {
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 8001116:	0028      	movs	r0, r5
 8001118:	183b      	adds	r3, r7, r0
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b25b      	sxtb	r3, r3
 800111e:	2202      	movs	r2, #2
 8001120:	4393      	bics	r3, r2
 8001122:	b25a      	sxtb	r2, r3
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b25b      	sxtb	r3, r3
 800112a:	18db      	adds	r3, r3, r3
 800112c:	b25b      	sxtb	r3, r3
 800112e:	2102      	movs	r1, #2
 8001130:	400b      	ands	r3, r1
 8001132:	b25b      	sxtb	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b25b      	sxtb	r3, r3
 8001138:	b2da      	uxtb	r2, r3
 800113a:	183b      	adds	r3, r7, r0
 800113c:	701a      	strb	r2, [r3, #0]

        /* Enabling the Auto wakeup interrupt */
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 800113e:	193c      	adds	r4, r7, r4
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	1839      	adds	r1, r7, r0
 8001144:	2201      	movs	r2, #1
 8001146:	202d      	movs	r0, #45	@ 0x2d
 8001148:	f7ff f9c4 	bl	80004d4 <bma400_set_regs>
 800114c:	0003      	movs	r3, r0
 800114e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001150:	230f      	movs	r3, #15
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b25b      	sxtb	r3, r3
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b005      	add	sp, #20
 800115e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001160 <set_autowakeup_interrupt>:

static int8_t set_autowakeup_interrupt(const struct bma400_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[5] = { 0 };
 800116a:	2408      	movs	r4, #8
 800116c:	193b      	adds	r3, r7, r4
 800116e:	0018      	movs	r0, r3
 8001170:	2305      	movs	r3, #5
 8001172:	001a      	movs	r2, r3
 8001174:	2100      	movs	r1, #0
 8001176:	f004 faf9 	bl	800576c <memset>

    /* Set the wakeup reference update */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 800117a:	0020      	movs	r0, r4
 800117c:	183b      	adds	r3, r7, r0
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b25b      	sxtb	r3, r3
 8001182:	2203      	movs	r2, #3
 8001184:	4393      	bics	r3, r2
 8001186:	b25a      	sxtb	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25b      	sxtb	r3, r3
 800118e:	2103      	movs	r1, #3
 8001190:	400b      	ands	r3, r1
 8001192:	b25b      	sxtb	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b25b      	sxtb	r3, r3
 8001198:	b2da      	uxtb	r2, r3
 800119a:	183b      	adds	r3, r7, r0
 800119c:	701a      	strb	r2, [r3, #0]

    /* Set the number of samples for interrupt condition evaluation */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 800119e:	183b      	adds	r3, r7, r0
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	221c      	movs	r2, #28
 80011a6:	4393      	bics	r3, r2
 80011a8:	b25a      	sxtb	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	211c      	movs	r1, #28
 80011b6:	400b      	ands	r3, r1
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	183b      	adds	r3, r7, r0
 80011c2:	701a      	strb	r2, [r3, #0]

    /* Enable low power wake-up interrupt for X,Y,Z axes*/
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 80011c4:	183b      	adds	r3, r7, r0
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	221f      	movs	r2, #31
 80011cc:	4013      	ands	r3, r2
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	789b      	ldrb	r3, [r3, #2]
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	015b      	lsls	r3, r3, #5
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	0001      	movs	r1, r0
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	701a      	strb	r2, [r3, #0]

    /* Set interrupt threshold configuration  */
    data_array[1] = wakeup_conf->int_wkup_threshold;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	78da      	ldrb	r2, [r3, #3]
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	705a      	strb	r2, [r3, #1]

    /* Set the reference acceleration x-axis for the wake-up interrupt */
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	791a      	ldrb	r2, [r3, #4]
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	709a      	strb	r2, [r3, #2]

    /* Set the reference acceleration y-axis for the wake-up interrupt */
    data_array[3] = wakeup_conf->int_wkup_ref_y;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	795a      	ldrb	r2, [r3, #5]
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	70da      	strb	r2, [r3, #3]

    /* Set the reference acceleration z-axis for the wake-up interrupt */
    data_array[4] = wakeup_conf->int_wkup_ref_z;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	799a      	ldrb	r2, [r3, #6]
 8001202:	187b      	adds	r3, r7, r1
 8001204:	711a      	strb	r2, [r3, #4]

    /* Set the wakeup interrupt configurations in the sensor */
    rslt = bma400_set_regs(BMA400_REG_WAKEUP_INT_CONF_0, data_array, 5, dev);
 8001206:	250f      	movs	r5, #15
 8001208:	197c      	adds	r4, r7, r5
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	1879      	adds	r1, r7, r1
 800120e:	2205      	movs	r2, #5
 8001210:	202f      	movs	r0, #47	@ 0x2f
 8001212:	f7ff f95f 	bl	80004d4 <bma400_set_regs>
 8001216:	0003      	movs	r3, r0
 8001218:	7023      	strb	r3, [r4, #0]

    return rslt;
 800121a:	197b      	adds	r3, r7, r5
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b25b      	sxtb	r3, r3
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b004      	add	sp, #16
 8001226:	bdb0      	pop	{r4, r5, r7, pc}

08001228 <set_auto_low_power>:

    return rslt;
}

static int8_t set_auto_low_power(const struct bma400_auto_lp_conf *auto_lp_conf, struct bma400_dev *dev)
{
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t timeout_msb;
    uint8_t timeout_lsb;

    rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8001232:	250f      	movs	r5, #15
 8001234:	197c      	adds	r4, r7, r5
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	260d      	movs	r6, #13
 800123a:	19b9      	adds	r1, r7, r6
 800123c:	2201      	movs	r2, #1
 800123e:	202b      	movs	r0, #43	@ 0x2b
 8001240:	f7ff f9c6 	bl	80005d0 <bma400_get_regs>
 8001244:	0003      	movs	r3, r0
 8001246:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8001248:	0028      	movs	r0, r5
 800124a:	183b      	adds	r3, r7, r0
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b25b      	sxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d15f      	bne.n	8001314 <set_auto_low_power+0xec>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_AUTO_LOW_POW, auto_lp_conf->auto_low_power_trigger);
 8001254:	19bb      	adds	r3, r7, r6
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	220f      	movs	r2, #15
 800125c:	4393      	bics	r3, r2
 800125e:	b25a      	sxtb	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	210f      	movs	r1, #15
 8001268:	400b      	ands	r3, r1
 800126a:	b25b      	sxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b25b      	sxtb	r3, r3
 8001270:	b2da      	uxtb	r2, r3
 8001272:	19bb      	adds	r3, r7, r6
 8001274:	701a      	strb	r2, [r3, #0]

        /* If auto Low power timeout threshold is enabled */
        if (auto_lp_conf->auto_low_power_trigger & 0x0C)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	001a      	movs	r2, r3
 800127c:	230c      	movs	r3, #12
 800127e:	4013      	ands	r3, r2
 8001280:	d038      	beq.n	80012f4 <set_auto_low_power+0xcc>
        {
            rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8001282:	0005      	movs	r5, r0
 8001284:	183c      	adds	r4, r7, r0
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	220c      	movs	r2, #12
 800128a:	18b9      	adds	r1, r7, r2
 800128c:	2201      	movs	r2, #1
 800128e:	202a      	movs	r0, #42	@ 0x2a
 8001290:	f7ff f99e 	bl	80005d0 <bma400_get_regs>
 8001294:	0003      	movs	r3, r0
 8001296:	7023      	strb	r3, [r4, #0]
            if (rslt == BMA400_OK)
 8001298:	0028      	movs	r0, r5
 800129a:	183b      	adds	r3, r7, r0
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d127      	bne.n	80012f4 <set_auto_low_power+0xcc>
            {
                /* Compute the timeout threshold MSB value */
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	885b      	ldrh	r3, [r3, #2]
 80012a8:	111b      	asrs	r3, r3, #4
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	250c      	movs	r5, #12
 80012ae:	197b      	adds	r3, r7, r5
 80012b0:	701a      	strb	r2, [r3, #0]

                /* Compute the timeout threshold LSB value */
                timeout_lsb = BMA400_GET_BITS_POS_0(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES_LSB);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	885b      	ldrh	r3, [r3, #2]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	240e      	movs	r4, #14
 80012ba:	193b      	adds	r3, r7, r4
 80012bc:	210f      	movs	r1, #15
 80012be:	400a      	ands	r2, r1
 80012c0:	701a      	strb	r2, [r3, #0]
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 80012c2:	19bb      	adds	r3, r7, r6
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	220f      	movs	r2, #15
 80012ca:	4013      	ands	r3, r2
 80012cc:	b25a      	sxtb	r2, r3
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	19bb      	adds	r3, r7, r6
 80012e0:	701a      	strb	r2, [r3, #0]

                /* Set the timeout threshold MSB value */
                rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 80012e2:	183c      	adds	r4, r7, r0
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	1979      	adds	r1, r7, r5
 80012e8:	2201      	movs	r2, #1
 80012ea:	202a      	movs	r0, #42	@ 0x2a
 80012ec:	f7ff f8f2 	bl	80004d4 <bma400_set_regs>
 80012f0:	0003      	movs	r3, r0
 80012f2:	7023      	strb	r3, [r4, #0]
            }
        }

        if (rslt == BMA400_OK)
 80012f4:	220f      	movs	r2, #15
 80012f6:	18bb      	adds	r3, r7, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d109      	bne.n	8001314 <set_auto_low_power+0xec>
        {
            /* Set the Auto low power configurations */
            rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8001300:	18bc      	adds	r4, r7, r2
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	220d      	movs	r2, #13
 8001306:	18b9      	adds	r1, r7, r2
 8001308:	2201      	movs	r2, #1
 800130a:	202b      	movs	r0, #43	@ 0x2b
 800130c:	f7ff f8e2 	bl	80004d4 <bma400_set_regs>
 8001310:	0003      	movs	r3, r0
 8001312:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8001314:	230f      	movs	r3, #15
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b25b      	sxtb	r3, r3
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b005      	add	sp, #20
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001324 <set_tap_conf>:

    return rslt;
}

static int8_t set_tap_conf(const struct bma400_tap_conf *tap_set, struct bma400_dev *dev)
{
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[2] = { 0, 0 };
 800132e:	250c      	movs	r5, #12
 8001330:	197b      	adds	r3, r7, r5
 8001332:	2200      	movs	r2, #0
 8001334:	801a      	strh	r2, [r3, #0]

    rslt = bma400_get_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8001336:	260f      	movs	r6, #15
 8001338:	19bc      	adds	r4, r7, r6
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	1979      	adds	r1, r7, r5
 800133e:	2202      	movs	r2, #2
 8001340:	2057      	movs	r0, #87	@ 0x57
 8001342:	f7ff f945 	bl	80005d0 <bma400_get_regs>
 8001346:	0003      	movs	r3, r0
 8001348:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800134a:	0034      	movs	r4, r6
 800134c:	193b      	adds	r3, r7, r4
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b25b      	sxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d164      	bne.n	8001420 <set_tap_conf+0xfc>
    {
        /* Set the axis to sense for tap */
        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_TAP_AXES_EN, tap_set->axes_sel);
 8001356:	0028      	movs	r0, r5
 8001358:	183b      	adds	r3, r7, r0
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	2218      	movs	r2, #24
 8001360:	4393      	bics	r3, r2
 8001362:	b25a      	sxtb	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	b25b      	sxtb	r3, r3
 800136e:	2118      	movs	r1, #24
 8001370:	400b      	ands	r3, r1
 8001372:	b25b      	sxtb	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b25b      	sxtb	r3, r3
 8001378:	b2da      	uxtb	r2, r3
 800137a:	183b      	adds	r3, r7, r0
 800137c:	701a      	strb	r2, [r3, #0]

        /* Set the threshold for tap sensing */
        reg_data[0] = BMA400_SET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY, tap_set->sensitivity);
 800137e:	183b      	adds	r3, r7, r0
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25b      	sxtb	r3, r3
 8001384:	2207      	movs	r2, #7
 8001386:	4393      	bics	r3, r2
 8001388:	b25a      	sxtb	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	2107      	movs	r1, #7
 8001392:	400b      	ands	r3, r1
 8001394:	b25b      	sxtb	r3, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	b25b      	sxtb	r3, r3
 800139a:	b2da      	uxtb	r2, r3
 800139c:	183b      	adds	r3, r7, r0
 800139e:	701a      	strb	r2, [r3, #0]

        /* Set the Quiet_dt setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET_DT, tap_set->quiet_dt);
 80013a0:	183b      	adds	r3, r7, r0
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	2230      	movs	r2, #48	@ 0x30
 80013a8:	4393      	bics	r3, r2
 80013aa:	b25a      	sxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	791b      	ldrb	r3, [r3, #4]
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	2130      	movs	r1, #48	@ 0x30
 80013b8:	400b      	ands	r3, r1
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	183b      	adds	r3, r7, r0
 80013c4:	705a      	strb	r2, [r3, #1]

        /* Set the Quiet setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET, tap_set->quiet);
 80013c6:	183b      	adds	r3, r7, r0
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	220c      	movs	r2, #12
 80013ce:	4393      	bics	r3, r2
 80013d0:	b25a      	sxtb	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	78db      	ldrb	r3, [r3, #3]
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	210c      	movs	r1, #12
 80013de:	400b      	ands	r3, r1
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	183b      	adds	r3, r7, r0
 80013ea:	705a      	strb	r2, [r3, #1]

        /* Set the tics_th setting */
        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH, tap_set->tics_th);
 80013ec:	183b      	adds	r3, r7, r0
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	2203      	movs	r2, #3
 80013f4:	4393      	bics	r3, r2
 80013f6:	b25a      	sxtb	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	789b      	ldrb	r3, [r3, #2]
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	2103      	movs	r1, #3
 8001400:	400b      	ands	r3, r1
 8001402:	b25b      	sxtb	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b25b      	sxtb	r3, r3
 8001408:	b2da      	uxtb	r2, r3
 800140a:	183b      	adds	r3, r7, r0
 800140c:	705a      	strb	r2, [r3, #1]

        /* Set the TAP configuration in the sensor*/
        rslt = bma400_set_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 800140e:	193c      	adds	r4, r7, r4
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	1839      	adds	r1, r7, r0
 8001414:	2202      	movs	r2, #2
 8001416:	2057      	movs	r0, #87	@ 0x57
 8001418:	f7ff f85c 	bl	80004d4 <bma400_set_regs>
 800141c:	0003      	movs	r3, r0
 800141e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001420:	230f      	movs	r3, #15
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b25b      	sxtb	r3, r3
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b005      	add	sp, #20
 800142e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001430 <set_activity_change_conf>:

    return rslt;
}

static int8_t set_activity_change_conf(const struct bma400_act_ch_conf *act_ch_set, struct bma400_dev *dev)
{
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2] = { 0 };
 800143a:	200c      	movs	r0, #12
 800143c:	183b      	adds	r3, r7, r0
 800143e:	2200      	movs	r2, #0
 8001440:	801a      	strh	r2, [r3, #0]

    /* Set the activity change threshold */
    data_array[0] = act_ch_set->act_ch_thres;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	183b      	adds	r3, r7, r0
 8001448:	701a      	strb	r2, [r3, #0]

    /* Set the axis to sense for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN, act_ch_set->axes_sel);
 800144a:	183b      	adds	r3, r7, r0
 800144c:	785b      	ldrb	r3, [r3, #1]
 800144e:	b25b      	sxtb	r3, r3
 8001450:	221f      	movs	r2, #31
 8001452:	4013      	ands	r3, r2
 8001454:	b25a      	sxtb	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	b25b      	sxtb	r3, r3
 800145c:	015b      	lsls	r3, r3, #5
 800145e:	b25b      	sxtb	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b25b      	sxtb	r3, r3
 8001464:	b2da      	uxtb	r2, r3
 8001466:	183b      	adds	r3, r7, r0
 8001468:	705a      	strb	r2, [r3, #1]

    /* Set the data source for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC, act_ch_set->data_source);
 800146a:	183b      	adds	r3, r7, r0
 800146c:	785b      	ldrb	r3, [r3, #1]
 800146e:	b25b      	sxtb	r3, r3
 8001470:	2210      	movs	r2, #16
 8001472:	4393      	bics	r3, r2
 8001474:	b25a      	sxtb	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	789b      	ldrb	r3, [r3, #2]
 800147a:	b25b      	sxtb	r3, r3
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	b25b      	sxtb	r3, r3
 8001480:	2110      	movs	r1, #16
 8001482:	400b      	ands	r3, r1
 8001484:	b25b      	sxtb	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b25b      	sxtb	r3, r3
 800148a:	b2da      	uxtb	r2, r3
 800148c:	183b      	adds	r3, r7, r0
 800148e:	705a      	strb	r2, [r3, #1]

    /* Set the Number of sample points(NPTS)
     * for sensing activity change
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 8001490:	183b      	adds	r3, r7, r0
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	b25b      	sxtb	r3, r3
 8001496:	220f      	movs	r2, #15
 8001498:	4393      	bics	r3, r2
 800149a:	b25a      	sxtb	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	78db      	ldrb	r3, [r3, #3]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	210f      	movs	r1, #15
 80014a4:	400b      	ands	r3, r1
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	183b      	adds	r3, r7, r0
 80014b0:	705a      	strb	r2, [r3, #1]

    /* Set the Activity change configuration in the sensor*/
    rslt = bma400_set_regs(BMA400_REG_ACT_CH_CONFIG_0, data_array, 2, dev);
 80014b2:	250f      	movs	r5, #15
 80014b4:	197c      	adds	r4, r7, r5
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	1839      	adds	r1, r7, r0
 80014ba:	2202      	movs	r2, #2
 80014bc:	2055      	movs	r0, #85	@ 0x55
 80014be:	f7ff f809 	bl	80004d4 <bma400_set_regs>
 80014c2:	0003      	movs	r3, r0
 80014c4:	7023      	strb	r3, [r4, #0]

    return rslt;
 80014c6:	197b      	adds	r3, r7, r5
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b25b      	sxtb	r3, r3
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b004      	add	sp, #16
 80014d2:	bdb0      	pop	{r4, r5, r7, pc}

080014d4 <set_gen1_int>:

    return rslt;
}

static int8_t set_gen1_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 80014de:	240c      	movs	r4, #12
 80014e0:	193b      	adds	r3, r7, r4
 80014e2:	0018      	movs	r0, r3
 80014e4:	230b      	movs	r3, #11
 80014e6:	001a      	movs	r2, r3
 80014e8:	2100      	movs	r1, #0
 80014ea:	f004 f93f 	bl	800576c <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 80014ee:	0020      	movs	r0, r4
 80014f0:	183b      	adds	r3, r7, r0
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	221f      	movs	r2, #31
 80014f8:	4013      	ands	r3, r2
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	791b      	ldrb	r3, [r3, #4]
 8001500:	b25b      	sxtb	r3, r3
 8001502:	015b      	lsls	r3, r3, #5
 8001504:	b25b      	sxtb	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b25b      	sxtb	r3, r3
 800150a:	b2da      	uxtb	r2, r3
 800150c:	183b      	adds	r3, r7, r0
 800150e:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8001510:	183b      	adds	r3, r7, r0
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b25b      	sxtb	r3, r3
 8001516:	2210      	movs	r2, #16
 8001518:	4393      	bics	r3, r2
 800151a:	b25a      	sxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	795b      	ldrb	r3, [r3, #5]
 8001520:	b25b      	sxtb	r3, r3
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	b25b      	sxtb	r3, r3
 8001526:	2110      	movs	r1, #16
 8001528:	400b      	ands	r3, r1
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b25b      	sxtb	r3, r3
 8001530:	b2da      	uxtb	r2, r3
 8001532:	183b      	adds	r3, r7, r0
 8001534:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8001536:	183b      	adds	r3, r7, r0
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b25b      	sxtb	r3, r3
 800153c:	220c      	movs	r2, #12
 800153e:	4393      	bics	r3, r2
 8001540:	b25a      	sxtb	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7a1b      	ldrb	r3, [r3, #8]
 8001546:	b25b      	sxtb	r3, r3
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	b25b      	sxtb	r3, r3
 800154c:	210c      	movs	r1, #12
 800154e:	400b      	ands	r3, r1
 8001550:	b25b      	sxtb	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b25b      	sxtb	r3, r3
 8001556:	b2da      	uxtb	r2, r3
 8001558:	183b      	adds	r3, r7, r0
 800155a:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 800155c:	183b      	adds	r3, r7, r0
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	2203      	movs	r2, #3
 8001564:	4393      	bics	r3, r2
 8001566:	b25a      	sxtb	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7a5b      	ldrb	r3, [r3, #9]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	2103      	movs	r1, #3
 8001570:	400b      	ands	r3, r1
 8001572:	b25b      	sxtb	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b25b      	sxtb	r3, r3
 8001578:	b2da      	uxtb	r2, r3
 800157a:	183b      	adds	r3, r7, r0
 800157c:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800157e:	183b      	adds	r3, r7, r0
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	b25b      	sxtb	r3, r3
 8001584:	2202      	movs	r2, #2
 8001586:	4393      	bics	r3, r2
 8001588:	b25a      	sxtb	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	799b      	ldrb	r3, [r3, #6]
 800158e:	b25b      	sxtb	r3, r3
 8001590:	18db      	adds	r3, r3, r3
 8001592:	b25b      	sxtb	r3, r3
 8001594:	2102      	movs	r1, #2
 8001596:	400b      	ands	r3, r1
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b25b      	sxtb	r3, r3
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	183b      	adds	r3, r7, r0
 80015a2:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 80015a4:	183b      	adds	r3, r7, r0
 80015a6:	785b      	ldrb	r3, [r3, #1]
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	2201      	movs	r2, #1
 80015ac:	4393      	bics	r3, r2
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	79db      	ldrb	r3, [r3, #7]
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	2101      	movs	r1, #1
 80015b8:	400b      	ands	r3, r1
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	0001      	movs	r1, r0
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	885b      	ldrh	r3, [r3, #2]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	885b      	ldrh	r3, [r3, #2]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7a1b      	ldrb	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d12e      	bne.n	800164e <set_gen1_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	895b      	ldrh	r3, [r3, #10]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	895b      	ldrh	r3, [r3, #10]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	b29b      	uxth	r3, r3
 8001602:	b2da      	uxtb	r2, r3
 8001604:	187b      	adds	r3, r7, r1
 8001606:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	899b      	ldrh	r3, [r3, #12]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	187b      	adds	r3, r7, r1
 8001610:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	899b      	ldrh	r3, [r3, #12]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	b29b      	uxth	r3, r3
 800161a:	b2da      	uxtb	r2, r3
 800161c:	187b      	adds	r3, r7, r1
 800161e:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	89db      	ldrh	r3, [r3, #14]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	187b      	adds	r3, r7, r1
 8001628:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	89db      	ldrh	r3, [r3, #14]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	b29b      	uxth	r3, r3
 8001632:	b2da      	uxtb	r2, r3
 8001634:	187b      	adds	r3, r7, r1
 8001636:	729a      	strb	r2, [r3, #10]

        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 11, dev);
 8001638:	2317      	movs	r3, #23
 800163a:	18fc      	adds	r4, r7, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	1879      	adds	r1, r7, r1
 8001640:	220b      	movs	r2, #11
 8001642:	203f      	movs	r0, #63	@ 0x3f
 8001644:	f7fe ff46 	bl	80004d4 <bma400_set_regs>
 8001648:	0003      	movs	r3, r0
 800164a:	7023      	strb	r3, [r4, #0]
 800164c:	e00a      	b.n	8001664 <set_gen1_int+0x190>
    }
    else
    {
        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 5, dev);
 800164e:	2317      	movs	r3, #23
 8001650:	18fc      	adds	r4, r7, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	220c      	movs	r2, #12
 8001656:	18b9      	adds	r1, r7, r2
 8001658:	2205      	movs	r2, #5
 800165a:	203f      	movs	r0, #63	@ 0x3f
 800165c:	f7fe ff3a 	bl	80004d4 <bma400_set_regs>
 8001660:	0003      	movs	r3, r0
 8001662:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001664:	2317      	movs	r3, #23
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b25b      	sxtb	r3, r3
}
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	b007      	add	sp, #28
 8001672:	bd90      	pop	{r4, r7, pc}

08001674 <set_gen2_int>:

    return rslt;
}

static int8_t set_gen2_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 800167e:	240c      	movs	r4, #12
 8001680:	193b      	adds	r3, r7, r4
 8001682:	0018      	movs	r0, r3
 8001684:	230b      	movs	r3, #11
 8001686:	001a      	movs	r2, r3
 8001688:	2100      	movs	r1, #0
 800168a:	f004 f86f 	bl	800576c <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 800168e:	0020      	movs	r0, r4
 8001690:	183b      	adds	r3, r7, r0
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b25b      	sxtb	r3, r3
 8001696:	221f      	movs	r2, #31
 8001698:	4013      	ands	r3, r2
 800169a:	b25a      	sxtb	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	791b      	ldrb	r3, [r3, #4]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	015b      	lsls	r3, r3, #5
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	183b      	adds	r3, r7, r0
 80016ae:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 80016b0:	183b      	adds	r3, r7, r0
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	2210      	movs	r2, #16
 80016b8:	4393      	bics	r3, r2
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	795b      	ldrb	r3, [r3, #5]
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	2110      	movs	r1, #16
 80016c8:	400b      	ands	r3, r1
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	183b      	adds	r3, r7, r0
 80016d4:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 80016d6:	183b      	adds	r3, r7, r0
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	220c      	movs	r2, #12
 80016de:	4393      	bics	r3, r2
 80016e0:	b25a      	sxtb	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7a1b      	ldrb	r3, [r3, #8]
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	210c      	movs	r1, #12
 80016ee:	400b      	ands	r3, r1
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	183b      	adds	r3, r7, r0
 80016fa:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80016fc:	183b      	adds	r3, r7, r0
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b25b      	sxtb	r3, r3
 8001702:	2203      	movs	r2, #3
 8001704:	4393      	bics	r3, r2
 8001706:	b25a      	sxtb	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7a5b      	ldrb	r3, [r3, #9]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	2103      	movs	r1, #3
 8001710:	400b      	ands	r3, r1
 8001712:	b25b      	sxtb	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b25b      	sxtb	r3, r3
 8001718:	b2da      	uxtb	r2, r3
 800171a:	183b      	adds	r3, r7, r0
 800171c:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800171e:	183b      	adds	r3, r7, r0
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	b25b      	sxtb	r3, r3
 8001724:	2202      	movs	r2, #2
 8001726:	4393      	bics	r3, r2
 8001728:	b25a      	sxtb	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	799b      	ldrb	r3, [r3, #6]
 800172e:	b25b      	sxtb	r3, r3
 8001730:	18db      	adds	r3, r3, r3
 8001732:	b25b      	sxtb	r3, r3
 8001734:	2102      	movs	r1, #2
 8001736:	400b      	ands	r3, r1
 8001738:	b25b      	sxtb	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	b25b      	sxtb	r3, r3
 800173e:	b2da      	uxtb	r2, r3
 8001740:	183b      	adds	r3, r7, r0
 8001742:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8001744:	183b      	adds	r3, r7, r0
 8001746:	785b      	ldrb	r3, [r3, #1]
 8001748:	b25b      	sxtb	r3, r3
 800174a:	2201      	movs	r2, #1
 800174c:	4393      	bics	r3, r2
 800174e:	b25a      	sxtb	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	79db      	ldrb	r3, [r3, #7]
 8001754:	b25b      	sxtb	r3, r3
 8001756:	2101      	movs	r1, #1
 8001758:	400b      	ands	r3, r1
 800175a:	b25b      	sxtb	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b25b      	sxtb	r3, r3
 8001760:	b2da      	uxtb	r2, r3
 8001762:	0001      	movs	r1, r0
 8001764:	187b      	adds	r3, r7, r1
 8001766:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	187b      	adds	r3, r7, r1
 800176e:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	885b      	ldrh	r3, [r3, #2]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	b29b      	uxth	r3, r3
 8001778:	b2da      	uxtb	r2, r3
 800177a:	187b      	adds	r3, r7, r1
 800177c:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	885b      	ldrh	r3, [r3, #2]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	187b      	adds	r3, r7, r1
 8001786:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7a1b      	ldrb	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d12e      	bne.n	80017ee <set_gen2_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	895b      	ldrh	r3, [r3, #10]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	187b      	adds	r3, r7, r1
 8001798:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	895b      	ldrh	r3, [r3, #10]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	899b      	ldrh	r3, [r3, #12]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	899b      	ldrh	r3, [r3, #12]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	89db      	ldrh	r3, [r3, #14]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	89db      	ldrh	r3, [r3, #14]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	729a      	strb	r2, [r3, #10]

        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 11, dev);
 80017d8:	2317      	movs	r3, #23
 80017da:	18fc      	adds	r4, r7, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	1879      	adds	r1, r7, r1
 80017e0:	220b      	movs	r2, #11
 80017e2:	204a      	movs	r0, #74	@ 0x4a
 80017e4:	f7fe fe76 	bl	80004d4 <bma400_set_regs>
 80017e8:	0003      	movs	r3, r0
 80017ea:	7023      	strb	r3, [r4, #0]
 80017ec:	e00a      	b.n	8001804 <set_gen2_int+0x190>
    }
    else
    {
        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 5, dev);
 80017ee:	2317      	movs	r3, #23
 80017f0:	18fc      	adds	r4, r7, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	220c      	movs	r2, #12
 80017f6:	18b9      	adds	r1, r7, r2
 80017f8:	2205      	movs	r2, #5
 80017fa:	204a      	movs	r0, #74	@ 0x4a
 80017fc:	f7fe fe6a 	bl	80004d4 <bma400_set_regs>
 8001800:	0003      	movs	r3, r0
 8001802:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001804:	2317      	movs	r3, #23
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b25b      	sxtb	r3, r3
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b007      	add	sp, #28
 8001812:	bd90      	pop	{r4, r7, pc}

08001814 <set_orient_int>:

    return rslt;
}

static int8_t set_orient_int(const struct bma400_orient_int_conf *orient_conf, struct bma400_dev *dev)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[10] = { 0 };
 800181e:	240c      	movs	r4, #12
 8001820:	193b      	adds	r3, r7, r4
 8001822:	0018      	movs	r0, r3
 8001824:	230a      	movs	r3, #10
 8001826:	001a      	movs	r2, r3
 8001828:	2100      	movs	r1, #0
 800182a:	f003 ff9f 	bl	800576c <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 800182e:	0020      	movs	r0, r4
 8001830:	183b      	adds	r3, r7, r0
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b25b      	sxtb	r3, r3
 8001836:	221f      	movs	r2, #31
 8001838:	4013      	ands	r3, r2
 800183a:	b25a      	sxtb	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b25b      	sxtb	r3, r3
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	b25b      	sxtb	r3, r3
 8001846:	4313      	orrs	r3, r2
 8001848:	b25b      	sxtb	r3, r3
 800184a:	b2da      	uxtb	r2, r3
 800184c:	183b      	adds	r3, r7, r0
 800184e:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 8001850:	183b      	adds	r3, r7, r0
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	2210      	movs	r2, #16
 8001858:	4393      	bics	r3, r2
 800185a:	b25a      	sxtb	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	b25b      	sxtb	r3, r3
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	b25b      	sxtb	r3, r3
 8001866:	2110      	movs	r1, #16
 8001868:	400b      	ands	r3, r1
 800186a:	b25b      	sxtb	r3, r3
 800186c:	4313      	orrs	r3, r2
 800186e:	b25b      	sxtb	r3, r3
 8001870:	b2da      	uxtb	r2, r3
 8001872:	183b      	adds	r3, r7, r0
 8001874:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 8001876:	183b      	adds	r3, r7, r0
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b25b      	sxtb	r3, r3
 800187c:	220c      	movs	r2, #12
 800187e:	4393      	bics	r3, r2
 8001880:	b25a      	sxtb	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	789b      	ldrb	r3, [r3, #2]
 8001886:	b25b      	sxtb	r3, r3
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	b25b      	sxtb	r3, r3
 800188c:	210c      	movs	r1, #12
 800188e:	400b      	ands	r3, r1
 8001890:	b25b      	sxtb	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b25b      	sxtb	r3, r3
 8001896:	b2da      	uxtb	r2, r3
 8001898:	0001      	movs	r1, r0
 800189a:	187b      	adds	r3, r7, r1
 800189c:	701a      	strb	r2, [r3, #0]

    /* Set the threshold for interrupt calculation */
    data_array[1] = orient_conf->orient_thres;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	78da      	ldrb	r2, [r3, #3]
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	705a      	strb	r2, [r3, #1]

    /* Set the stability threshold */
    data_array[2] = orient_conf->stability_thres;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	791a      	ldrb	r2, [r3, #4]
 80018aa:	187b      	adds	r3, r7, r1
 80018ac:	709a      	strb	r2, [r3, #2]

    /* Set the interrupt duration */
    data_array[3] = orient_conf->orient_int_dur;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	795a      	ldrb	r2, [r3, #5]
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	70da      	strb	r2, [r3, #3]

    /* Handling case of manual reference update */
    if (orient_conf->ref_update == BMA400_UPDATE_MANUAL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	789b      	ldrb	r3, [r3, #2]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d12e      	bne.n	800191c <set_orient_int+0x108>
    {
        /* Set the LSB of reference x threshold */
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	88db      	ldrh	r3, [r3, #6]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	711a      	strb	r2, [r3, #4]

        /* Set the MSB of reference x threshold */
        data_array[5] = BMA400_GET_MSB(orient_conf->orient_ref_x);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	88db      	ldrh	r3, [r3, #6]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	891b      	ldrh	r3, [r3, #8]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_MSB(orient_conf->orient_ref_y);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	891b      	ldrh	r3, [r3, #8]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	895b      	ldrh	r3, [r3, #10]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_MSB(orient_conf->orient_ref_z);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	895b      	ldrh	r3, [r3, #10]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	b29b      	uxth	r3, r3
 8001900:	b2da      	uxtb	r2, r3
 8001902:	187b      	adds	r3, r7, r1
 8001904:	725a      	strb	r2, [r3, #9]

        /* Set the orient configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 10, dev);
 8001906:	2317      	movs	r3, #23
 8001908:	18fc      	adds	r4, r7, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	1879      	adds	r1, r7, r1
 800190e:	220a      	movs	r2, #10
 8001910:	2035      	movs	r0, #53	@ 0x35
 8001912:	f7fe fddf 	bl	80004d4 <bma400_set_regs>
 8001916:	0003      	movs	r3, r0
 8001918:	7023      	strb	r3, [r4, #0]
 800191a:	e00a      	b.n	8001932 <set_orient_int+0x11e>
    else
    {
        /* Set the orient configurations in the sensor excluding
         * reference values of x,y,z
         */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 4, dev);
 800191c:	2317      	movs	r3, #23
 800191e:	18fc      	adds	r4, r7, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	220c      	movs	r2, #12
 8001924:	18b9      	adds	r1, r7, r2
 8001926:	2204      	movs	r2, #4
 8001928:	2035      	movs	r0, #53	@ 0x35
 800192a:	f7fe fdd3 	bl	80004d4 <bma400_set_regs>
 800192e:	0003      	movs	r3, r0
 8001930:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001932:	2317      	movs	r3, #23
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b25b      	sxtb	r3, r3
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b007      	add	sp, #28
 8001940:	bd90      	pop	{r4, r7, pc}
	...

08001944 <map_int_pin>:

    return rslt;
}

static void map_int_pin(uint8_t *data_array, uint8_t int_enable, enum bma400_int_chan int_map)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	0008      	movs	r0, r1
 800194e:	0011      	movs	r1, r2
 8001950:	1cfb      	adds	r3, r7, #3
 8001952:	1c02      	adds	r2, r0, #0
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	1cbb      	adds	r3, r7, #2
 8001958:	1c0a      	adds	r2, r1, #0
 800195a:	701a      	strb	r2, [r3, #0]
    switch (int_enable)
 800195c:	1cfb      	adds	r3, r7, #3
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b0b      	cmp	r3, #11
 8001962:	d900      	bls.n	8001966 <map_int_pin+0x22>
 8001964:	e2f3      	b.n	8001f4e <map_int_pin+0x60a>
 8001966:	009a      	lsls	r2, r3, #2
 8001968:	4bc9      	ldr	r3, [pc, #804]	@ (8001c90 <map_int_pin+0x34c>)
 800196a:	18d3      	adds	r3, r2, r3
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	469f      	mov	pc, r3
    {
        case BMA400_DATA_READY_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001970:	1cbb      	adds	r3, r7, #2
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d107      	bne.n	8001988 <map_int_pin+0x44>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2280      	movs	r2, #128	@ 0x80
 800197e:	4252      	negs	r2, r2
 8001980:	4313      	orrs	r3, r2
 8001982:	b2da      	uxtb	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001988:	1cbb      	adds	r3, r7, #2
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d109      	bne.n	80019a4 <map_int_pin+0x60>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3301      	adds	r3, #1
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3301      	adds	r3, #1
 800199a:	2180      	movs	r1, #128	@ 0x80
 800199c:	4249      	negs	r1, r1
 800199e:	430a      	orrs	r2, r1
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80019a4:	1cbb      	adds	r3, r7, #2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10f      	bne.n	80019cc <map_int_pin+0x88>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_DRDY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	227f      	movs	r2, #127	@ 0x7f
 80019b2:	4013      	ands	r3, r2
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_DRDY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3301      	adds	r3, #1
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3301      	adds	r3, #1
 80019c4:	217f      	movs	r1, #127	@ 0x7f
 80019c6:	400a      	ands	r2, r1
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80019cc:	1cbb      	adds	r3, r7, #2
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d000      	beq.n	80019d6 <map_int_pin+0x92>
 80019d4:	e2bd      	b.n	8001f52 <map_int_pin+0x60e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2280      	movs	r2, #128	@ 0x80
 80019dc:	4252      	negs	r2, r2
 80019de:	4313      	orrs	r3, r2
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3301      	adds	r3, #1
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3301      	adds	r3, #1
 80019f0:	2180      	movs	r1, #128	@ 0x80
 80019f2:	4249      	negs	r1, r1
 80019f4:	430a      	orrs	r2, r1
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
            }

            break;
 80019fa:	e2aa      	b.n	8001f52 <map_int_pin+0x60e>
        case BMA400_FIFO_WM_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80019fc:	1cbb      	adds	r3, r7, #2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <map_int_pin+0xce>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2240      	movs	r2, #64	@ 0x40
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001a12:	1cbb      	adds	r3, r7, #2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d108      	bne.n	8001a2c <map_int_pin+0xe8>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3301      	adds	r3, #1
 8001a24:	2140      	movs	r1, #64	@ 0x40
 8001a26:	430a      	orrs	r2, r1
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001a2c:	1cbb      	adds	r3, r7, #2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10f      	bne.n	8001a54 <map_int_pin+0x110>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_WM);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2240      	movs	r2, #64	@ 0x40
 8001a3a:	4393      	bics	r3, r2
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_WM);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3301      	adds	r3, #1
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	2140      	movs	r1, #64	@ 0x40
 8001a4e:	438a      	bics	r2, r1
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001a54:	1cbb      	adds	r3, r7, #2
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d000      	beq.n	8001a5e <map_int_pin+0x11a>
 8001a5c:	e27b      	b.n	8001f56 <map_int_pin+0x612>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2240      	movs	r2, #64	@ 0x40
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3301      	adds	r3, #1
 8001a76:	2140      	movs	r1, #64	@ 0x40
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001a7e:	e26a      	b.n	8001f56 <map_int_pin+0x612>
        case BMA400_FIFO_FULL_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001a80:	1cbb      	adds	r3, r7, #2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <map_int_pin+0x152>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001a96:	1cbb      	adds	r3, r7, #2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d108      	bne.n	8001ab0 <map_int_pin+0x16c>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2120      	movs	r1, #32
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001ab0:	1cbb      	adds	r3, r7, #2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10f      	bne.n	8001ad8 <map_int_pin+0x194>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2220      	movs	r2, #32
 8001abe:	4393      	bics	r3, r2
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_FULL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	438a      	bics	r2, r1
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001ad8:	1cbb      	adds	r3, r7, #2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d000      	beq.n	8001ae2 <map_int_pin+0x19e>
 8001ae0:	e23b      	b.n	8001f5a <map_int_pin+0x616>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3301      	adds	r3, #1
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3301      	adds	r3, #1
 8001afa:	2120      	movs	r1, #32
 8001afc:	430a      	orrs	r2, r1
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001b02:	e22a      	b.n	8001f5a <map_int_pin+0x616>
        case BMA400_INT_OVERRUN_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001b04:	1cbb      	adds	r3, r7, #2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <map_int_pin+0x1d6>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2210      	movs	r2, #16
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001b1a:	1cbb      	adds	r3, r7, #2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d108      	bne.n	8001b34 <map_int_pin+0x1f0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3301      	adds	r3, #1
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	2110      	movs	r1, #16
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001b34:	1cbb      	adds	r3, r7, #2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10f      	bne.n	8001b5c <map_int_pin+0x218>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_INT_OVERRUN);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2210      	movs	r2, #16
 8001b42:	4393      	bics	r3, r2
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_INT_OVERRUN);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3301      	adds	r3, #1
 8001b54:	2110      	movs	r1, #16
 8001b56:	438a      	bics	r2, r1
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001b5c:	1cbb      	adds	r3, r7, #2
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d000      	beq.n	8001b66 <map_int_pin+0x222>
 8001b64:	e1fb      	b.n	8001f5e <map_int_pin+0x61a>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3301      	adds	r3, #1
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	2110      	movs	r1, #16
 8001b80:	430a      	orrs	r2, r1
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001b86:	e1ea      	b.n	8001f5e <map_int_pin+0x61a>
        case BMA400_GEN2_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001b88:	1cbb      	adds	r3, r7, #2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <map_int_pin+0x25a>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2208      	movs	r2, #8
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001b9e:	1cbb      	adds	r3, r7, #2
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d108      	bne.n	8001bb8 <map_int_pin+0x274>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	781a      	ldrb	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001bb8:	1cbb      	adds	r3, r7, #2
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10f      	bne.n	8001be0 <map_int_pin+0x29c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN2);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	4393      	bics	r3, r2
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN2);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	2108      	movs	r1, #8
 8001bda:	438a      	bics	r2, r1
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001be0:	1cbb      	adds	r3, r7, #2
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d000      	beq.n	8001bea <map_int_pin+0x2a6>
 8001be8:	e1bb      	b.n	8001f62 <map_int_pin+0x61e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2208      	movs	r2, #8
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3301      	adds	r3, #1
 8001c02:	2108      	movs	r1, #8
 8001c04:	430a      	orrs	r2, r1
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001c0a:	e1aa      	b.n	8001f62 <map_int_pin+0x61e>
        case BMA400_GEN1_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001c0c:	1cbb      	adds	r3, r7, #2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d106      	bne.n	8001c22 <map_int_pin+0x2de>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2204      	movs	r2, #4
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001c22:	1cbb      	adds	r3, r7, #2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d108      	bne.n	8001c3c <map_int_pin+0x2f8>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3301      	adds	r3, #1
 8001c34:	2104      	movs	r1, #4
 8001c36:	430a      	orrs	r2, r1
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001c3c:	1cbb      	adds	r3, r7, #2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10f      	bne.n	8001c64 <map_int_pin+0x320>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN1);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3301      	adds	r3, #1
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	438a      	bics	r2, r1
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001c64:	1cbb      	adds	r3, r7, #2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d000      	beq.n	8001c6e <map_int_pin+0x32a>
 8001c6c:	e17b      	b.n	8001f66 <map_int_pin+0x622>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2204      	movs	r2, #4
 8001c74:	4313      	orrs	r3, r2
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3301      	adds	r3, #1
 8001c86:	2104      	movs	r1, #4
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001c8e:	e16a      	b.n	8001f66 <map_int_pin+0x622>
 8001c90:	08006098 	.word	0x08006098
        case BMA400_ORIENT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001c94:	1cbb      	adds	r3, r7, #2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <map_int_pin+0x366>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001caa:	1cbb      	adds	r3, r7, #2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d108      	bne.n	8001cc4 <map_int_pin+0x380>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001cc4:	1cbb      	adds	r3, r7, #2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10f      	bne.n	8001cec <map_int_pin+0x3a8>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4393      	bics	r3, r2
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_ORIENT_CH);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	438a      	bics	r2, r1
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001cec:	1cbb      	adds	r3, r7, #2
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d000      	beq.n	8001cf6 <map_int_pin+0x3b2>
 8001cf4:	e139      	b.n	8001f6a <map_int_pin+0x626>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3301      	adds	r3, #1
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	2102      	movs	r1, #2
 8001d10:	430a      	orrs	r2, r1
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001d16:	e128      	b.n	8001f6a <map_int_pin+0x626>
        case BMA400_WAKEUP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001d18:	1cbb      	adds	r3, r7, #2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d106      	bne.n	8001d2e <map_int_pin+0x3ea>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2201      	movs	r2, #1
 8001d26:	4313      	orrs	r3, r2
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001d2e:	1cbb      	adds	r3, r7, #2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d108      	bne.n	8001d48 <map_int_pin+0x404>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	2101      	movs	r1, #1
 8001d42:	430a      	orrs	r2, r1
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001d48:	1cbb      	adds	r3, r7, #2
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10f      	bne.n	8001d70 <map_int_pin+0x42c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_WAKEUP_INT);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4393      	bics	r3, r2
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_WAKEUP_INT);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3301      	adds	r3, #1
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	2101      	movs	r1, #1
 8001d6a:	438a      	bics	r2, r1
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001d70:	1cbb      	adds	r3, r7, #2
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d000      	beq.n	8001d7a <map_int_pin+0x436>
 8001d78:	e0f9      	b.n	8001f6e <map_int_pin+0x62a>
            {
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4313      	orrs	r3, r2
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3301      	adds	r3, #1
 8001d92:	2101      	movs	r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001d9a:	e0e8      	b.n	8001f6e <map_int_pin+0x62a>
        case BMA400_ACT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001d9c:	1cbb      	adds	r3, r7, #2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <map_int_pin+0x472>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3302      	adds	r3, #2
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3302      	adds	r3, #2
 8001dae:	2108      	movs	r1, #8
 8001db0:	430a      	orrs	r2, r1
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001db6:	1cbb      	adds	r3, r7, #2
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d109      	bne.n	8001dd2 <map_int_pin+0x48e>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	781a      	ldrb	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	2180      	movs	r1, #128	@ 0x80
 8001dca:	4249      	negs	r1, r1
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001dd2:	1cbb      	adds	r3, r7, #2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d111      	bne.n	8001dfe <map_int_pin+0x4ba>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT1);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3302      	adds	r3, #2
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3302      	adds	r3, #2
 8001de4:	2108      	movs	r1, #8
 8001de6:	438a      	bics	r2, r1
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT2);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3302      	adds	r3, #2
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3302      	adds	r3, #2
 8001df6:	217f      	movs	r1, #127	@ 0x7f
 8001df8:	400a      	ands	r2, r1
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001dfe:	1cbb      	adds	r3, r7, #2
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d000      	beq.n	8001e08 <map_int_pin+0x4c4>
 8001e06:	e0b4      	b.n	8001f72 <map_int_pin+0x62e>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3302      	adds	r3, #2
 8001e12:	2108      	movs	r1, #8
 8001e14:	430a      	orrs	r2, r1
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3302      	adds	r3, #2
 8001e24:	2180      	movs	r1, #128	@ 0x80
 8001e26:	4249      	negs	r1, r1
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001e2e:	e0a0      	b.n	8001f72 <map_int_pin+0x62e>
        case BMA400_TAP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001e30:	1cbb      	adds	r3, r7, #2
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d108      	bne.n	8001e4a <map_int_pin+0x506>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3302      	adds	r3, #2
 8001e42:	2104      	movs	r1, #4
 8001e44:	430a      	orrs	r2, r1
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001e4a:	1cbb      	adds	r3, r7, #2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d108      	bne.n	8001e64 <map_int_pin+0x520>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3302      	adds	r3, #2
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	2140      	movs	r1, #64	@ 0x40
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001e64:	1cbb      	adds	r3, r7, #2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <map_int_pin+0x54c>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3302      	adds	r3, #2
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3302      	adds	r3, #2
 8001e76:	2104      	movs	r1, #4
 8001e78:	438a      	bics	r2, r1
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT2);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3302      	adds	r3, #2
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3302      	adds	r3, #2
 8001e88:	2140      	movs	r1, #64	@ 0x40
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001e90:	1cbb      	adds	r3, r7, #2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d000      	beq.n	8001e9a <map_int_pin+0x556>
 8001e98:	e06d      	b.n	8001f76 <map_int_pin+0x632>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3302      	adds	r3, #2
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	2140      	movs	r1, #64	@ 0x40
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001ebe:	e05a      	b.n	8001f76 <map_int_pin+0x632>
        case BMA400_STEP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001ec0:	1cbb      	adds	r3, r7, #2
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d108      	bne.n	8001eda <map_int_pin+0x596>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3302      	adds	r3, #2
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001eda:	1cbb      	adds	r3, r7, #2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d108      	bne.n	8001ef4 <map_int_pin+0x5b0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3302      	adds	r3, #2
 8001eec:	2110      	movs	r1, #16
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001ef4:	1cbb      	adds	r3, r7, #2
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d111      	bne.n	8001f20 <map_int_pin+0x5dc>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_EN_STEP_INT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3302      	adds	r3, #2
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3302      	adds	r3, #2
 8001f06:	2101      	movs	r1, #1
 8001f08:	438a      	bics	r2, r1
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3302      	adds	r3, #2
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3302      	adds	r3, #2
 8001f18:	2110      	movs	r1, #16
 8001f1a:	438a      	bics	r2, r1
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001f20:	1cbb      	adds	r3, r7, #2
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d128      	bne.n	8001f7a <map_int_pin+0x636>
            {
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3302      	adds	r3, #2
 8001f32:	2101      	movs	r1, #1
 8001f34:	430a      	orrs	r2, r1
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	781a      	ldrb	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3302      	adds	r3, #2
 8001f44:	2110      	movs	r1, #16
 8001f46:	430a      	orrs	r2, r1
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001f4c:	e015      	b.n	8001f7a <map_int_pin+0x636>
        default:
            break;
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	e014      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	e012      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	e010      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	e00e      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	e00c      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	e00a      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	e008      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	e006      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	e004      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	e002      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f76:	46c0      	nop			@ (mov r8, r8)
 8001f78:	e000      	b.n	8001f7c <map_int_pin+0x638>
            break;
 8001f7a:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001f7c:	46c0      	nop			@ (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <set_int_pin_conf>:
            break;
    }
}

static int8_t set_int_pin_conf(struct bma400_int_pin_conf int_conf, struct bma400_dev *dev)
{
 8001f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	8018      	strh	r0, [r3, #0]
 8001f8e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8001f90:	260f      	movs	r6, #15
 8001f92:	19bc      	adds	r4, r7, r6
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	250e      	movs	r5, #14
 8001f98:	1979      	adds	r1, r7, r5
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2024      	movs	r0, #36	@ 0x24
 8001f9e:	f7fe fb17 	bl	80005d0 <bma400_get_regs>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8001fa6:	19bb      	adds	r3, r7, r6
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d13a      	bne.n	8002026 <set_int_pin_conf+0xa2>
    {
        if (int_conf.int_chan == BMA400_INT_CHANNEL_1)
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d113      	bne.n	8001fe0 <set_int_pin_conf+0x5c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
 8001fb8:	0028      	movs	r0, r5
 8001fba:	183b      	adds	r3, r7, r0
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	2206      	movs	r2, #6
 8001fc2:	4393      	bics	r3, r2
 8001fc4:	b25a      	sxtb	r2, r3
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	785b      	ldrb	r3, [r3, #1]
 8001fca:	b25b      	sxtb	r3, r3
 8001fcc:	18db      	adds	r3, r3, r3
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	2106      	movs	r1, #6
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b25b      	sxtb	r3, r3
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	183b      	adds	r3, r7, r0
 8001fde:	701a      	strb	r2, [r3, #0]
        }

        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d113      	bne.n	8002010 <set_int_pin_conf+0x8c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 8001fe8:	200e      	movs	r0, #14
 8001fea:	183b      	adds	r3, r7, r0
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	2260      	movs	r2, #96	@ 0x60
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	b25a      	sxtb	r2, r3
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	015b      	lsls	r3, r3, #5
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	2160      	movs	r1, #96	@ 0x60
 8002002:	400b      	ands	r3, r1
 8002004:	b25b      	sxtb	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b25b      	sxtb	r3, r3
 800200a:	b2da      	uxtb	r2, r3
 800200c:	183b      	adds	r3, r7, r0
 800200e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8002010:	230f      	movs	r3, #15
 8002012:	18fc      	adds	r4, r7, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	220e      	movs	r2, #14
 8002018:	18b9      	adds	r1, r7, r2
 800201a:	2201      	movs	r2, #1
 800201c:	2024      	movs	r0, #36	@ 0x24
 800201e:	f7fe fa59 	bl	80004d4 <bma400_set_regs>
 8002022:	0003      	movs	r3, r0
 8002024:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002026:	230f      	movs	r3, #15
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b25b      	sxtb	r3, r3
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b005      	add	sp, #20
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002036 <set_fifo_conf>:

    return rslt;
}

static int8_t set_fifo_conf(const struct bma400_fifo_conf *fifo_conf, struct bma400_dev *dev)
{
 8002036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3];
    uint8_t sens_data[3];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8002040:	250f      	movs	r5, #15
 8002042:	197c      	adds	r4, r7, r5
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	0018      	movs	r0, r3
 8002048:	f7fe fd7e 	bl	8000b48 <null_ptr_check>
 800204c:	0003      	movs	r3, r0
 800204e:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8002050:	197b      	adds	r3, r7, r5
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b25b      	sxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d15b      	bne.n	8002112 <set_fifo_conf+0xdc>
    {
        /* Get the FIFO configurations and water-mark
         * values from the sensor
         */
        rslt = bma400_get_regs(BMA400_REG_FIFO_CONFIG_0, sens_data, 3, dev);
 800205a:	197c      	adds	r4, r7, r5
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2608      	movs	r6, #8
 8002060:	19b9      	adds	r1, r7, r6
 8002062:	2203      	movs	r2, #3
 8002064:	2026      	movs	r0, #38	@ 0x26
 8002066:	f7fe fab3 	bl	80005d0 <bma400_get_regs>
 800206a:	0003      	movs	r3, r0
 800206c:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 800206e:	197b      	adds	r3, r7, r5
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b25b      	sxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d14c      	bne.n	8002112 <set_fifo_conf+0xdc>
        {
            /* FIFO configurations */
            data_array[0] = fifo_conf->conf_regs;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	781a      	ldrb	r2, [r3, #0]
 800207c:	210c      	movs	r1, #12
 800207e:	187b      	adds	r3, r7, r1
 8002080:	701a      	strb	r2, [r3, #0]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10c      	bne.n	80020a4 <set_fifo_conf+0x6e>
            {
                /* Disable the selected interrupt status */
                data_array[0] = sens_data[0] & (~data_array[0]);
 800208a:	19bb      	adds	r3, r7, r6
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b25b      	sxtb	r3, r3
 8002090:	187a      	adds	r2, r7, r1
 8002092:	7812      	ldrb	r2, [r2, #0]
 8002094:	b252      	sxtb	r2, r2
 8002096:	43d2      	mvns	r2, r2
 8002098:	b252      	sxtb	r2, r2
 800209a:	4013      	ands	r3, r2
 800209c:	b25b      	sxtb	r3, r3
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	701a      	strb	r2, [r3, #0]
            }

            /* FIFO water-mark values */
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	885b      	ldrh	r3, [r3, #2]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	210c      	movs	r1, #12
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	705a      	strb	r2, [r3, #1]
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	885b      	ldrh	r3, [r3, #2]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	187b      	adds	r3, r7, r1
 80020bc:	709a      	strb	r2, [r3, #2]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	789b      	ldrb	r3, [r3, #2]
 80020c2:	2207      	movs	r2, #7
 80020c4:	4013      	ands	r3, r2
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	709a      	strb	r2, [r3, #2]
            if ((data_array[1] == sens_data[1]) && (data_array[2] == sens_data[2]))
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	785a      	ldrb	r2, [r3, #1]
 80020d0:	2008      	movs	r0, #8
 80020d2:	183b      	adds	r3, r7, r0
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d110      	bne.n	80020fc <set_fifo_conf+0xc6>
 80020da:	187b      	adds	r3, r7, r1
 80020dc:	789a      	ldrb	r2, [r3, #2]
 80020de:	183b      	adds	r3, r7, r0
 80020e0:	789b      	ldrb	r3, [r3, #2]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d10a      	bne.n	80020fc <set_fifo_conf+0xc6>
            {
                /* Set the FIFO configurations in the
                 * sensor excluding the watermark value
                 */
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 1, dev);
 80020e6:	230f      	movs	r3, #15
 80020e8:	18fc      	adds	r4, r7, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	1879      	adds	r1, r7, r1
 80020ee:	2201      	movs	r2, #1
 80020f0:	2026      	movs	r0, #38	@ 0x26
 80020f2:	f7fe f9ef 	bl	80004d4 <bma400_set_regs>
 80020f6:	0003      	movs	r3, r0
 80020f8:	7023      	strb	r3, [r4, #0]
 80020fa:	e00a      	b.n	8002112 <set_fifo_conf+0xdc>
            }
            else
            {
                /* Set the FIFO configurations in the sensor*/
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 3, dev);
 80020fc:	230f      	movs	r3, #15
 80020fe:	18fc      	adds	r4, r7, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	220c      	movs	r2, #12
 8002104:	18b9      	adds	r1, r7, r2
 8002106:	2203      	movs	r2, #3
 8002108:	2026      	movs	r0, #38	@ 0x26
 800210a:	f7fe f9e3 	bl	80004d4 <bma400_set_regs>
 800210e:	0003      	movs	r3, r0
 8002110:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8002112:	230f      	movs	r3, #15
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b25b      	sxtb	r3, r3
}
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b005      	add	sp, #20
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002122 <user_i2c_read>:

    return rslt;
}

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b08a      	sub	sp, #40	@ 0x28
 8002126:	af04      	add	r7, sp, #16
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	210f      	movs	r1, #15
 8002130:	187b      	adds	r3, r7, r1
 8002132:	1c02      	adds	r2, r0, #0
 8002134:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Read(hi2c, BMA400_I2C_ADDR, reg_addr,
 800213a:	187b      	adds	r3, r7, r1
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b299      	uxth	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	b29b      	uxth	r3, r3
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	2201      	movs	r2, #1
 8002148:	4252      	negs	r2, r2
 800214a:	9202      	str	r2, [sp, #8]
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2301      	movs	r3, #1
 8002154:	000a      	movs	r2, r1
 8002156:	2128      	movs	r1, #40	@ 0x28
 8002158:	f001 f976 	bl	8003448 <HAL_I2C_Mem_Read>
 800215c:	1e03      	subs	r3, r0, #0
 800215e:	d101      	bne.n	8002164 <user_i2c_read+0x42>
                         I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e001      	b.n	8002168 <user_i2c_read+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 8002164:	2302      	movs	r3, #2
 8002166:	425b      	negs	r3, r3
    }
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b006      	add	sp, #24
 800216e:	bd80      	pop	{r7, pc}

08002170 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af04      	add	r7, sp, #16
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	210f      	movs	r1, #15
 800217e:	187b      	adds	r3, r7, r1
 8002180:	1c02      	adds	r2, r0, #0
 8002182:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Write(hi2c, BMA400_I2C_ADDR, reg_addr,
 8002188:	187b      	adds	r3, r7, r1
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b299      	uxth	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	b29b      	uxth	r3, r3
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	2201      	movs	r2, #1
 8002196:	4252      	negs	r2, r2
 8002198:	9202      	str	r2, [sp, #8]
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2301      	movs	r3, #1
 80021a2:	000a      	movs	r2, r1
 80021a4:	2128      	movs	r1, #40	@ 0x28
 80021a6:	f001 f821 	bl	80031ec <HAL_I2C_Mem_Write>
 80021aa:	1e03      	subs	r3, r0, #0
 80021ac:	d101      	bne.n	80021b2 <user_i2c_write+0x42>
                          I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e001      	b.n	80021b6 <user_i2c_write+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 80021b2:	2302      	movs	r3, #2
 80021b4:	425b      	negs	r3, r3
    }
}
 80021b6:	0018      	movs	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b006      	add	sp, #24
 80021bc:	bd80      	pop	{r7, pc}

080021be <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
    // Zakładamy, że potrzebne opóźnienia mają ≥ 1000us (1ms)
    HAL_Delay(period / 1000);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	22fa      	movs	r2, #250	@ 0xfa
 80021cc:	0091      	lsls	r1, r2, #2
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7fd ffac 	bl	800012c <__udivsi3>
 80021d4:	0003      	movs	r3, r0
 80021d6:	0018      	movs	r0, r3
 80021d8:	f000 fcc8 	bl	8002b6c <HAL_Delay>

    // Jeśli potrzebujesz dokładniejszych opóźnień — patrz niżej
}
 80021dc:	46c0      	nop			@ (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b08b      	sub	sp, #44	@ 0x2c
 80021e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	2414      	movs	r4, #20
 80021ec:	193b      	adds	r3, r7, r4
 80021ee:	0018      	movs	r0, r3
 80021f0:	2314      	movs	r3, #20
 80021f2:	001a      	movs	r2, r3
 80021f4:	2100      	movs	r1, #0
 80021f6:	f003 fab9 	bl	800576c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	4b40      	ldr	r3, [pc, #256]	@ (80022fc <MX_GPIO_Init+0x118>)
 80021fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021fe:	4b3f      	ldr	r3, [pc, #252]	@ (80022fc <MX_GPIO_Init+0x118>)
 8002200:	2104      	movs	r1, #4
 8002202:	430a      	orrs	r2, r1
 8002204:	635a      	str	r2, [r3, #52]	@ 0x34
 8002206:	4b3d      	ldr	r3, [pc, #244]	@ (80022fc <MX_GPIO_Init+0x118>)
 8002208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220a:	2204      	movs	r2, #4
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002212:	4b3a      	ldr	r3, [pc, #232]	@ (80022fc <MX_GPIO_Init+0x118>)
 8002214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002216:	4b39      	ldr	r3, [pc, #228]	@ (80022fc <MX_GPIO_Init+0x118>)
 8002218:	2120      	movs	r1, #32
 800221a:	430a      	orrs	r2, r1
 800221c:	635a      	str	r2, [r3, #52]	@ 0x34
 800221e:	4b37      	ldr	r3, [pc, #220]	@ (80022fc <MX_GPIO_Init+0x118>)
 8002220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002222:	2220      	movs	r2, #32
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	4b34      	ldr	r3, [pc, #208]	@ (80022fc <MX_GPIO_Init+0x118>)
 800222c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800222e:	4b33      	ldr	r3, [pc, #204]	@ (80022fc <MX_GPIO_Init+0x118>)
 8002230:	2101      	movs	r1, #1
 8002232:	430a      	orrs	r2, r1
 8002234:	635a      	str	r2, [r3, #52]	@ 0x34
 8002236:	4b31      	ldr	r3, [pc, #196]	@ (80022fc <MX_GPIO_Init+0x118>)
 8002238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800223a:	2201      	movs	r2, #1
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	4b2e      	ldr	r3, [pc, #184]	@ (80022fc <MX_GPIO_Init+0x118>)
 8002244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002246:	4b2d      	ldr	r3, [pc, #180]	@ (80022fc <MX_GPIO_Init+0x118>)
 8002248:	2102      	movs	r1, #2
 800224a:	430a      	orrs	r2, r1
 800224c:	635a      	str	r2, [r3, #52]	@ 0x34
 800224e:	4b2b      	ldr	r3, [pc, #172]	@ (80022fc <MX_GPIO_Init+0x118>)
 8002250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_IO_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800225a:	23d0      	movs	r3, #208	@ 0xd0
 800225c:	0059      	lsls	r1, r3, #1
 800225e:	23a0      	movs	r3, #160	@ 0xa0
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	2200      	movs	r2, #0
 8002264:	0018      	movs	r0, r3
 8002266:	f000 fefd 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 800226a:	193b      	adds	r3, r7, r4
 800226c:	2204      	movs	r2, #4
 800226e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002270:	193b      	adds	r3, r7, r4
 8002272:	2200      	movs	r2, #0
 8002274:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	193b      	adds	r3, r7, r4
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 800227c:	193b      	adds	r3, r7, r4
 800227e:	4a20      	ldr	r2, [pc, #128]	@ (8002300 <MX_GPIO_Init+0x11c>)
 8002280:	0019      	movs	r1, r3
 8002282:	0010      	movs	r0, r2
 8002284:	f000 fd84 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002288:	193b      	adds	r3, r7, r4
 800228a:	221e      	movs	r2, #30
 800228c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800228e:	193b      	adds	r3, r7, r4
 8002290:	2203      	movs	r2, #3
 8002292:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	193b      	adds	r3, r7, r4
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229a:	193a      	adds	r2, r7, r4
 800229c:	23a0      	movs	r3, #160	@ 0xa0
 800229e:	05db      	lsls	r3, r3, #23
 80022a0:	0011      	movs	r1, r2
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 fd74 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_IO_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = EN_IO_Pin|LED1_Pin|LED2_Pin;
 80022a8:	0021      	movs	r1, r4
 80022aa:	187b      	adds	r3, r7, r1
 80022ac:	22d0      	movs	r2, #208	@ 0xd0
 80022ae:	0052      	lsls	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b2:	000c      	movs	r4, r1
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	2201      	movs	r2, #1
 80022b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	193b      	adds	r3, r7, r4
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c6:	193a      	adds	r2, r7, r4
 80022c8:	23a0      	movs	r3, #160	@ 0xa0
 80022ca:	05db      	lsls	r3, r3, #23
 80022cc:	0011      	movs	r1, r2
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 fd5e 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80022d4:	193b      	adds	r3, r7, r4
 80022d6:	2240      	movs	r2, #64	@ 0x40
 80022d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022da:	193b      	adds	r3, r7, r4
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022e0:	193b      	adds	r3, r7, r4
 80022e2:	2201      	movs	r2, #1
 80022e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80022e6:	193a      	adds	r2, r7, r4
 80022e8:	23a0      	movs	r3, #160	@ 0xa0
 80022ea:	05db      	lsls	r3, r3, #23
 80022ec:	0011      	movs	r1, r2
 80022ee:	0018      	movs	r0, r3
 80022f0:	f000 fd4e 	bl	8002d90 <HAL_GPIO_Init>

}
 80022f4:	46c0      	nop			@ (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b00b      	add	sp, #44	@ 0x2c
 80022fa:	bd90      	pop	{r4, r7, pc}
 80022fc:	40021000 	.word	0x40021000
 8002300:	50001400 	.word	0x50001400

08002304 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <MX_I2C1_Init+0x74>)
 800230a:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <MX_I2C1_Init+0x78>)
 800230c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010092C;
 800230e:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002310:	4a1b      	ldr	r2, [pc, #108]	@ (8002380 <MX_I2C1_Init+0x7c>)
 8002312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800231a:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <MX_I2C1_Init+0x74>)
 800231c:	2201      	movs	r2, #1
 800231e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002326:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002328:	2200      	movs	r2, #0
 800232a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800232c:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <MX_I2C1_Init+0x74>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002332:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002334:	2200      	movs	r2, #0
 8002336:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002338:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <MX_I2C1_Init+0x74>)
 800233a:	2200      	movs	r2, #0
 800233c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800233e:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002340:	0018      	movs	r0, r3
 8002342:	f000 fead 	bl	80030a0 <HAL_I2C_Init>
 8002346:	1e03      	subs	r3, r0, #0
 8002348:	d001      	beq.n	800234e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800234a:	f000 f9cd 	bl	80026e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800234e:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002350:	2100      	movs	r1, #0
 8002352:	0018      	movs	r0, r3
 8002354:	f001 fca8 	bl	8003ca8 <HAL_I2CEx_ConfigAnalogFilter>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d001      	beq.n	8002360 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800235c:	f000 f9c4 	bl	80026e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <MX_I2C1_Init+0x74>)
 8002362:	2100      	movs	r1, #0
 8002364:	0018      	movs	r0, r3
 8002366:	f001 fceb 	bl	8003d40 <HAL_I2CEx_ConfigDigitalFilter>
 800236a:	1e03      	subs	r3, r0, #0
 800236c:	d001      	beq.n	8002372 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800236e:	f000 f9bb 	bl	80026e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002372:	46c0      	nop			@ (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000078 	.word	0x20000078
 800237c:	40005400 	.word	0x40005400
 8002380:	0010092c 	.word	0x0010092c

08002384 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b091      	sub	sp, #68	@ 0x44
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	232c      	movs	r3, #44	@ 0x2c
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	0018      	movs	r0, r3
 8002392:	2314      	movs	r3, #20
 8002394:	001a      	movs	r2, r3
 8002396:	2100      	movs	r1, #0
 8002398:	f003 f9e8 	bl	800576c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800239c:	2410      	movs	r4, #16
 800239e:	193b      	adds	r3, r7, r4
 80023a0:	0018      	movs	r0, r3
 80023a2:	231c      	movs	r3, #28
 80023a4:	001a      	movs	r2, r3
 80023a6:	2100      	movs	r1, #0
 80023a8:	f003 f9e0 	bl	800576c <memset>
  if(i2cHandle->Instance==I2C1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a22      	ldr	r2, [pc, #136]	@ (800243c <HAL_I2C_MspInit+0xb8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d13d      	bne.n	8002432 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023b6:	193b      	adds	r3, r7, r4
 80023b8:	2202      	movs	r2, #2
 80023ba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023bc:	193b      	adds	r3, r7, r4
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c2:	193b      	adds	r3, r7, r4
 80023c4:	0018      	movs	r0, r3
 80023c6:	f002 f863 	bl	8004490 <HAL_RCCEx_PeriphCLKConfig>
 80023ca:	1e03      	subs	r3, r0, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80023ce:	f000 f98b 	bl	80026e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_I2C_MspInit+0xbc>)
 80023d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <HAL_I2C_MspInit+0xbc>)
 80023d8:	2102      	movs	r1, #2
 80023da:	430a      	orrs	r2, r1
 80023dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80023de:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <HAL_I2C_MspInit+0xbc>)
 80023e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e2:	2202      	movs	r2, #2
 80023e4:	4013      	ands	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023ea:	212c      	movs	r1, #44	@ 0x2c
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	22c0      	movs	r2, #192	@ 0xc0
 80023f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023f2:	187b      	adds	r3, r7, r1
 80023f4:	2212      	movs	r2, #18
 80023f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	2201      	movs	r2, #1
 80023fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	2200      	movs	r2, #0
 8002402:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002404:	187b      	adds	r3, r7, r1
 8002406:	2206      	movs	r2, #6
 8002408:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240a:	187b      	adds	r3, r7, r1
 800240c:	4a0d      	ldr	r2, [pc, #52]	@ (8002444 <HAL_I2C_MspInit+0xc0>)
 800240e:	0019      	movs	r1, r3
 8002410:	0010      	movs	r0, r2
 8002412:	f000 fcbd 	bl	8002d90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <HAL_I2C_MspInit+0xbc>)
 8002418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800241a:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <HAL_I2C_MspInit+0xbc>)
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	0389      	lsls	r1, r1, #14
 8002420:	430a      	orrs	r2, r1
 8002422:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_I2C_MspInit+0xbc>)
 8002426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	039b      	lsls	r3, r3, #14
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b011      	add	sp, #68	@ 0x44
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	40005400 	.word	0x40005400
 8002440:	40021000 	.word	0x40021000
 8002444:	50000400 	.word	0x50000400

08002448 <configureBMA400>:
  	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
    HAL_PWR_EnterSTANDBYMode();
}

void configureBMA400(struct bma400_dev *dev)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b090      	sub	sp, #64	@ 0x40
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
    uint8_t rslt;
    struct bma400_device_conf dev_conf[3];
    struct bma400_sensor_conf sensor_conf;

    // Set initial power mode to low power
    rslt = bma400_set_power_mode(BMA400_MODE_NORMAL, dev);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	0019      	movs	r1, r3
 8002454:	2002      	movs	r0, #2
 8002456:	f7fe f929 	bl	80006ac <bma400_set_power_mode>
 800245a:	0003      	movs	r3, r0
 800245c:	001a      	movs	r2, r3
 800245e:	213f      	movs	r1, #63	@ 0x3f
 8002460:	187b      	adds	r3, r7, r1
 8002462:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 8002464:	187b      	adds	r3, r7, r1
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <configureBMA400+0x28>
    {
        Error_Handler();
 800246c:	f000 f93c 	bl	80026e8 <Error_Handler>
    }

    // auto low power after movement stops (1 s)
    dev_conf[0].type = BMA400_AUTO_LOW_POWER;
 8002470:	2120      	movs	r1, #32
 8002472:	187b      	adds	r3, r7, r1
 8002474:	2202      	movs	r2, #2
 8002476:	701a      	strb	r2, [r3, #0]
    dev_conf[0].param.auto_lp.auto_low_power_trigger =
 8002478:	187b      	adds	r3, r7, r1
 800247a:	220e      	movs	r2, #14
 800247c:	709a      	strb	r2, [r3, #2]
        BMA400_AUTO_LP_GEN1_TRIGGER | BMA400_AUTO_LP_TIMEOUT_EN | BMA400_AUTO_LP_TIME_RESET_EN;
    dev_conf[0].param.auto_lp.auto_lp_timeout_threshold = 400; // 400 × 2.5 ms = 1 s
 800247e:	187b      	adds	r3, r7, r1
 8002480:	22c8      	movs	r2, #200	@ 0xc8
 8002482:	0052      	lsls	r2, r2, #1
 8002484:	809a      	strh	r2, [r3, #4]

    // wake-up interrupt on motion detection on Y axis
    dev_conf[1].type = BMA400_AUTOWAKEUP_INT;
 8002486:	187b      	adds	r3, r7, r1
 8002488:	2201      	movs	r2, #1
 800248a:	729a      	strb	r2, [r3, #10]
    dev_conf[1].param.wakeup.wakeup_ref_update = BMA400_UPDATE_ONE_TIME;
 800248c:	187b      	adds	r3, r7, r1
 800248e:	2201      	movs	r2, #1
 8002490:	731a      	strb	r2, [r3, #12]
    dev_conf[1].param.wakeup.sample_count = BMA400_SAMPLE_COUNT_2;
 8002492:	187b      	adds	r3, r7, r1
 8002494:	2201      	movs	r2, #1
 8002496:	735a      	strb	r2, [r3, #13]
    dev_conf[1].param.wakeup.wakeup_axes_en = BMA400_AXIS_Y_EN;
 8002498:	187b      	adds	r3, r7, r1
 800249a:	2202      	movs	r2, #2
 800249c:	739a      	strb	r2, [r3, #14]
    dev_conf[1].param.wakeup.int_wkup_threshold = 1;	// mg threshold
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	2201      	movs	r2, #1
 80024a2:	73da      	strb	r2, [r3, #15]
    dev_conf[1].param.wakeup.int_wkup_ref_z = 0;
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	2200      	movs	r2, #0
 80024a8:	749a      	strb	r2, [r3, #18]
    dev_conf[1].param.wakeup.int_chan = BMA400_INT_CHANNEL_1;
 80024aa:	187b      	adds	r3, r7, r1
 80024ac:	2201      	movs	r2, #1
 80024ae:	74da      	strb	r2, [r3, #19]

    dev_conf[2].type = BMA400_INT_PIN_CONF;
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2203      	movs	r2, #3
 80024b4:	751a      	strb	r2, [r3, #20]
    dev_conf[2].param.int_conf.int_chan = BMA400_INT_CHANNEL_1;
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2201      	movs	r2, #1
 80024ba:	759a      	strb	r2, [r3, #22]
    dev_conf[2].param.int_conf.pin_conf = BMA400_INT_OPEN_DRAIN_ACTIVE_0;
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	2202      	movs	r2, #2
 80024c0:	75da      	strb	r2, [r3, #23]

    rslt = bma400_set_device_conf(dev_conf, 3, dev);
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	2103      	movs	r1, #3
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fe fa01 	bl	80008d0 <bma400_set_device_conf>
 80024ce:	0003      	movs	r3, r0
 80024d0:	001a      	movs	r2, r3
 80024d2:	213f      	movs	r1, #63	@ 0x3f
 80024d4:	187b      	adds	r3, r7, r1
 80024d6:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <configureBMA400+0x9c>
    {
        Error_Handler();
 80024e0:	f000 f902 	bl	80026e8 <Error_Handler>
    }

    // configure accelerometer
    sensor_conf.type = BMA400_ACCEL;
 80024e4:	210c      	movs	r1, #12
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
    sensor_conf.param.accel.odr = BMA400_ODR_25HZ;
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	2206      	movs	r2, #6
 80024f0:	709a      	strb	r2, [r3, #2]
    sensor_conf.param.accel.range = BMA400_RANGE_2G;
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2200      	movs	r2, #0
 80024f6:	70da      	strb	r2, [r3, #3]
    sensor_conf.param.accel.data_src = BMA400_DATA_SRC_ACCEL_FILT_1;
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2200      	movs	r2, #0
 80024fc:	711a      	strb	r2, [r3, #4]
    sensor_conf.param.accel.osr = BMA400_ACCEL_OSR_SETTING_0;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2200      	movs	r2, #0
 8002502:	715a      	strb	r2, [r3, #5]

    rslt = bma400_set_sensor_conf(&sensor_conf, 1, dev);
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	187b      	adds	r3, r7, r1
 8002508:	2101      	movs	r1, #1
 800250a:	0018      	movs	r0, r3
 800250c:	f7fe f961 	bl	80007d2 <bma400_set_sensor_conf>
 8002510:	0003      	movs	r3, r0
 8002512:	001a      	movs	r2, r3
 8002514:	213f      	movs	r1, #63	@ 0x3f
 8002516:	187b      	adds	r3, r7, r1
 8002518:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK) Error_Handler();
 800251a:	187b      	adds	r3, r7, r1
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <configureBMA400+0xde>
 8002522:	f000 f8e1 	bl	80026e8 <Error_Handler>

    // enable auto wakeup
    rslt = set_auto_wakeup(BMA400_ENABLE, dev);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	0019      	movs	r1, r3
 800252a:	2001      	movs	r0, #1
 800252c:	f7fe fddb 	bl	80010e6 <set_auto_wakeup>
 8002530:	0003      	movs	r3, r0
 8002532:	001a      	movs	r2, r3
 8002534:	213f      	movs	r1, #63	@ 0x3f
 8002536:	187b      	adds	r3, r7, r1
 8002538:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 800253a:	187b      	adds	r3, r7, r1
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <configureBMA400+0xfe>
    {
        Error_Handler();
 8002542:	f000 f8d1 	bl	80026e8 <Error_Handler>
    }
}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b010      	add	sp, #64	@ 0x40
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	bma400.intf = BMA400_I2C_INTF;
 8002554:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <main+0x5c>)
 8002556:	2201      	movs	r2, #1
 8002558:	705a      	strb	r2, [r3, #1]
	bma400.intf_ptr = &hi2c1;
 800255a:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <main+0x5c>)
 800255c:	4a14      	ldr	r2, [pc, #80]	@ (80025b0 <main+0x60>)
 800255e:	605a      	str	r2, [r3, #4]
	bma400.read = user_i2c_read;
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <main+0x5c>)
 8002562:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <main+0x64>)
 8002564:	60da      	str	r2, [r3, #12]
	bma400.write = user_i2c_write;
 8002566:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <main+0x5c>)
 8002568:	4a13      	ldr	r2, [pc, #76]	@ (80025b8 <main+0x68>)
 800256a:	611a      	str	r2, [r3, #16]
	bma400.delay_us = user_delay_us;
 800256c:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <main+0x5c>)
 800256e:	4a13      	ldr	r2, [pc, #76]	@ (80025bc <main+0x6c>)
 8002570:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002572:	f000 fa7e 	bl	8002a72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002576:	f000 f825 	bl	80025c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800257a:	f7ff fe33 	bl	80021e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800257e:	f7ff fec1 	bl	8002304 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002582:	f000 f99d 	bl	80028c0 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8002586:	f000 f94d 	bl	8002824 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); // dbg - check power mode state
  bma400_init(&bma400);
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <main+0x5c>)
 800258c:	0018      	movs	r0, r3
 800258e:	f7fd ff43 	bl	8000418 <bma400_init>
  configureBMA400(&bma400);
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <main+0x5c>)
 8002594:	0018      	movs	r0, r3
 8002596:	f7ff ff57 	bl	8002448 <configureBMA400>
  //HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, SET);
  HAL_Delay(10);
 800259a:	200a      	movs	r0, #10
 800259c:	f000 fae6 	bl	8002b6c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim14);
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <main+0x70>)
 80025a2:	0018      	movs	r0, r3
 80025a4:	f002 f8b8 	bl	8004718 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025a8:	46c0      	nop			@ (mov r8, r8)
 80025aa:	e7fd      	b.n	80025a8 <main+0x58>
 80025ac:	200000d0 	.word	0x200000d0
 80025b0:	20000078 	.word	0x20000078
 80025b4:	08002123 	.word	0x08002123
 80025b8:	08002171 	.word	0x08002171
 80025bc:	080021bf 	.word	0x080021bf
 80025c0:	200000f4 	.word	0x200000f4

080025c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b08d      	sub	sp, #52	@ 0x34
 80025c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ca:	2414      	movs	r4, #20
 80025cc:	193b      	adds	r3, r7, r4
 80025ce:	0018      	movs	r0, r3
 80025d0:	231c      	movs	r3, #28
 80025d2:	001a      	movs	r2, r3
 80025d4:	2100      	movs	r1, #0
 80025d6:	f003 f8c9 	bl	800576c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025da:	003b      	movs	r3, r7
 80025dc:	0018      	movs	r0, r3
 80025de:	2314      	movs	r3, #20
 80025e0:	001a      	movs	r2, r3
 80025e2:	2100      	movs	r1, #0
 80025e4:	f003 f8c2 	bl	800576c <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80025e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <SystemClock_Config+0x94>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <SystemClock_Config+0x94>)
 80025ee:	2107      	movs	r1, #7
 80025f0:	438a      	bics	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025f4:	193b      	adds	r3, r7, r4
 80025f6:	2202      	movs	r2, #2
 80025f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025fa:	193b      	adds	r3, r7, r4
 80025fc:	2280      	movs	r2, #128	@ 0x80
 80025fe:	0052      	lsls	r2, r2, #1
 8002600:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV16;
 8002602:	193b      	adds	r3, r7, r4
 8002604:	2280      	movs	r2, #128	@ 0x80
 8002606:	0192      	lsls	r2, r2, #6
 8002608:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800260a:	193b      	adds	r3, r7, r4
 800260c:	2240      	movs	r2, #64	@ 0x40
 800260e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002610:	193b      	adds	r3, r7, r4
 8002612:	0018      	movs	r0, r3
 8002614:	f001 fbe0 	bl	8003dd8 <HAL_RCC_OscConfig>
 8002618:	1e03      	subs	r3, r0, #0
 800261a:	d001      	beq.n	8002620 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800261c:	f000 f864 	bl	80026e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002620:	003b      	movs	r3, r7
 8002622:	2207      	movs	r2, #7
 8002624:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002626:	003b      	movs	r3, r7
 8002628:	2200      	movs	r2, #0
 800262a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800262c:	003b      	movs	r3, r7
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002632:	003b      	movs	r3, r7
 8002634:	2200      	movs	r2, #0
 8002636:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002638:	003b      	movs	r3, r7
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800263e:	003b      	movs	r3, r7
 8002640:	2100      	movs	r1, #0
 8002642:	0018      	movs	r0, r3
 8002644:	f001 fdac 	bl	80041a0 <HAL_RCC_ClockConfig>
 8002648:	1e03      	subs	r3, r0, #0
 800264a:	d001      	beq.n	8002650 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800264c:	f000 f84c 	bl	80026e8 <Error_Handler>
  }
}
 8002650:	46c0      	nop			@ (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b00d      	add	sp, #52	@ 0x34
 8002656:	bd90      	pop	{r4, r7, pc}
 8002658:	40022000 	.word	0x40022000

0800265c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b091      	sub	sp, #68	@ 0x44
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a18      	ldr	r2, [pc, #96]	@ (80026cc <HAL_TIM_PeriodElapsedCallback+0x70>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d12a      	bne.n	80026c4 <HAL_TIM_PeriodElapsedCallback+0x68>
	{
		  struct bma400_sensor_data data;	// structure for storing data
		  bma400_get_accel_data(BMA400_DATA_ONLY, &data, &bma400);
 800266e:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002670:	2434      	movs	r4, #52	@ 0x34
 8002672:	193b      	adds	r3, r7, r4
 8002674:	0019      	movs	r1, r3
 8002676:	2000      	movs	r0, #0
 8002678:	f7fe f87a 	bl	8000770 <bma400_get_accel_data>

		  char msg[40];
		  snprintf(msg, sizeof(msg), "%d\n", data.y);
 800267c:	193b      	adds	r3, r7, r4
 800267e:	2202      	movs	r2, #2
 8002680:	5e9b      	ldrsh	r3, [r3, r2]
 8002682:	4a14      	ldr	r2, [pc, #80]	@ (80026d4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002684:	240c      	movs	r4, #12
 8002686:	1938      	adds	r0, r7, r4
 8002688:	2128      	movs	r1, #40	@ 0x28
 800268a:	f003 f839 	bl	8005700 <sniprintf>

		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800268e:	193b      	adds	r3, r7, r4
 8002690:	0018      	movs	r0, r3
 8002692:	f7fd fd39 	bl	8000108 <strlen>
 8002696:	0003      	movs	r3, r0
 8002698:	b29a      	uxth	r2, r3
 800269a:	2301      	movs	r3, #1
 800269c:	425b      	negs	r3, r3
 800269e:	1939      	adds	r1, r7, r4
 80026a0:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80026a2:	f002 fabd 	bl	8004c20 <HAL_UART_Transmit>
		  time += 40;
 80026a6:	4b0d      	ldr	r3, [pc, #52]	@ (80026dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3328      	adds	r3, #40	@ 0x28
 80026ac:	001a      	movs	r2, r3
 80026ae:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80026b0:	601a      	str	r2, [r3, #0]

		  if (time >= 30000)
 80026b2:	4b0a      	ldr	r3, [pc, #40]	@ (80026dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d903      	bls.n	80026c4 <HAL_TIM_PeriodElapsedCallback+0x68>
		  {
			  HAL_TIM_Base_Stop_IT(&htim14);
 80026bc:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80026be:	0018      	movs	r0, r3
 80026c0:	f002 f878 	bl	80047b4 <HAL_TIM_Base_Stop_IT>
		  }
	}
}
 80026c4:	46c0      	nop			@ (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b011      	add	sp, #68	@ 0x44
 80026ca:	bd90      	pop	{r4, r7, pc}
 80026cc:	40002000 	.word	0x40002000
 80026d0:	200000d0 	.word	0x200000d0
 80026d4:	0800607c 	.word	0x0800607c
 80026d8:	20000140 	.word	0x20000140
 80026dc:	200000cc 	.word	0x200000cc
 80026e0:	0000752f 	.word	0x0000752f
 80026e4:	200000f4 	.word	0x200000f4

080026e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	0059      	lsls	r1, r3, #1
 80026f0:	23a0      	movs	r3, #160	@ 0xa0
 80026f2:	05db      	lsls	r3, r3, #23
 80026f4:	2201      	movs	r2, #1
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fcb4 	bl	8003064 <HAL_GPIO_WritePin>
  while (1)
 80026fc:	46c0      	nop			@ (mov r8, r8)
 80026fe:	e7fd      	b.n	80026fc <Error_Handler+0x14>

08002700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <HAL_MspInit+0x50>)
 8002708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800270a:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <HAL_MspInit+0x50>)
 800270c:	2101      	movs	r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	641a      	str	r2, [r3, #64]	@ 0x40
 8002712:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <HAL_MspInit+0x50>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	2201      	movs	r2, #1
 8002718:	4013      	ands	r3, r2
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <HAL_MspInit+0x50>)
 8002720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002722:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <HAL_MspInit+0x50>)
 8002724:	2180      	movs	r1, #128	@ 0x80
 8002726:	0549      	lsls	r1, r1, #21
 8002728:	430a      	orrs	r2, r1
 800272a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800272c:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <HAL_MspInit+0x50>)
 800272e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	055b      	lsls	r3, r3, #21
 8002734:	4013      	ands	r3, r2
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 800273a:	2008      	movs	r0, #8
 800273c:	f000 fa3a 	bl	8002bb4 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8002740:	2010      	movs	r0, #16
 8002742:	f000 fa37 	bl	8002bb4 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	b002      	add	sp, #8
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	40021000 	.word	0x40021000

08002754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002758:	46c0      	nop			@ (mov r8, r8)
 800275a:	e7fd      	b.n	8002758 <NMI_Handler+0x4>

0800275c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002760:	46c0      	nop			@ (mov r8, r8)
 8002762:	e7fd      	b.n	8002760 <HardFault_Handler+0x4>

08002764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800277c:	f000 f9da 	bl	8002b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002780:	46c0      	nop			@ (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800278c:	4b03      	ldr	r3, [pc, #12]	@ (800279c <TIM14_IRQHandler+0x14>)
 800278e:	0018      	movs	r0, r3
 8002790:	f002 f83e 	bl	8004810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002794:	46c0      	nop			@ (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			@ (mov r8, r8)
 800279c:	200000f4 	.word	0x200000f4

080027a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a8:	4a14      	ldr	r2, [pc, #80]	@ (80027fc <_sbrk+0x5c>)
 80027aa:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <_sbrk+0x60>)
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027b4:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <_sbrk+0x64>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d102      	bne.n	80027c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027bc:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <_sbrk+0x64>)
 80027be:	4a12      	ldr	r2, [pc, #72]	@ (8002808 <_sbrk+0x68>)
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <_sbrk+0x64>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	18d3      	adds	r3, r2, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d207      	bcs.n	80027e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d0:	f002 ffd4 	bl	800577c <__errno>
 80027d4:	0003      	movs	r3, r0
 80027d6:	220c      	movs	r2, #12
 80027d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027da:	2301      	movs	r3, #1
 80027dc:	425b      	negs	r3, r3
 80027de:	e009      	b.n	80027f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e0:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <_sbrk+0x64>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027e6:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <_sbrk+0x64>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	18d2      	adds	r2, r2, r3
 80027ee:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <_sbrk+0x64>)
 80027f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80027f2:	68fb      	ldr	r3, [r7, #12]
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b006      	add	sp, #24
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20001800 	.word	0x20001800
 8002800:	00000400 	.word	0x00000400
 8002804:	200000f0 	.word	0x200000f0
 8002808:	20000320 	.word	0x20000320

0800280c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002810:	4b03      	ldr	r3, [pc, #12]	@ (8002820 <SystemInit+0x14>)
 8002812:	2280      	movs	r2, #128	@ 0x80
 8002814:	0512      	lsls	r2, r2, #20
 8002816:	609a      	str	r2, [r3, #8]
#endif
}
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002828:	4b0f      	ldr	r3, [pc, #60]	@ (8002868 <MX_TIM14_Init+0x44>)
 800282a:	4a10      	ldr	r2, [pc, #64]	@ (800286c <MX_TIM14_Init+0x48>)
 800282c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 299;
 800282e:	4b0e      	ldr	r3, [pc, #56]	@ (8002868 <MX_TIM14_Init+0x44>)
 8002830:	222c      	movs	r2, #44	@ 0x2c
 8002832:	32ff      	adds	r2, #255	@ 0xff
 8002834:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002836:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <MX_TIM14_Init+0x44>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 399;
 800283c:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <MX_TIM14_Init+0x44>)
 800283e:	2290      	movs	r2, #144	@ 0x90
 8002840:	32ff      	adds	r2, #255	@ 0xff
 8002842:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002844:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <MX_TIM14_Init+0x44>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284a:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <MX_TIM14_Init+0x44>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <MX_TIM14_Init+0x44>)
 8002852:	0018      	movs	r0, r3
 8002854:	f001 ff08 	bl	8004668 <HAL_TIM_Base_Init>
 8002858:	1e03      	subs	r3, r0, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800285c:	f7ff ff44 	bl	80026e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002860:	46c0      	nop			@ (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	200000f4 	.word	0x200000f4
 800286c:	40002000 	.word	0x40002000

08002870 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0e      	ldr	r2, [pc, #56]	@ (80028b8 <HAL_TIM_Base_MspInit+0x48>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d115      	bne.n	80028ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002882:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <HAL_TIM_Base_MspInit+0x4c>)
 8002884:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002886:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <HAL_TIM_Base_MspInit+0x4c>)
 8002888:	2180      	movs	r1, #128	@ 0x80
 800288a:	0209      	lsls	r1, r1, #8
 800288c:	430a      	orrs	r2, r1
 800288e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002890:	4b0a      	ldr	r3, [pc, #40]	@ (80028bc <HAL_TIM_Base_MspInit+0x4c>)
 8002892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002894:	2380      	movs	r3, #128	@ 0x80
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2100      	movs	r1, #0
 80028a2:	2013      	movs	r0, #19
 80028a4:	f000 fa42 	bl	8002d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80028a8:	2013      	movs	r0, #19
 80028aa:	f000 fa54 	bl	8002d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b004      	add	sp, #16
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	40002000 	.word	0x40002000
 80028bc:	40021000 	.word	0x40021000

080028c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028c4:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 80028c6:	4a24      	ldr	r2, [pc, #144]	@ (8002958 <MX_USART1_UART_Init+0x98>)
 80028c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028ca:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 80028cc:	22e1      	movs	r2, #225	@ 0xe1
 80028ce:	0252      	lsls	r2, r2, #9
 80028d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028d2:	4b20      	ldr	r3, [pc, #128]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028de:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 80028e6:	220c      	movs	r2, #12
 80028e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f0:	4b18      	ldr	r3, [pc, #96]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028f6:	4b17      	ldr	r3, [pc, #92]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028fc:	4b15      	ldr	r3, [pc, #84]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 80028fe:	2200      	movs	r2, #0
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002902:	4b14      	ldr	r3, [pc, #80]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 8002904:	2200      	movs	r2, #0
 8002906:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002908:	4b12      	ldr	r3, [pc, #72]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 800290a:	0018      	movs	r0, r3
 800290c:	f002 f932 	bl	8004b74 <HAL_UART_Init>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d001      	beq.n	8002918 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002914:	f7ff fee8 	bl	80026e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002918:	4b0e      	ldr	r3, [pc, #56]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 800291a:	2100      	movs	r1, #0
 800291c:	0018      	movs	r0, r3
 800291e:	f002 fe0f 	bl	8005540 <HAL_UARTEx_SetTxFifoThreshold>
 8002922:	1e03      	subs	r3, r0, #0
 8002924:	d001      	beq.n	800292a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002926:	f7ff fedf 	bl	80026e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 800292c:	2100      	movs	r1, #0
 800292e:	0018      	movs	r0, r3
 8002930:	f002 fe46 	bl	80055c0 <HAL_UARTEx_SetRxFifoThreshold>
 8002934:	1e03      	subs	r3, r0, #0
 8002936:	d001      	beq.n	800293c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002938:	f7ff fed6 	bl	80026e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <MX_USART1_UART_Init+0x94>)
 800293e:	0018      	movs	r0, r3
 8002940:	f002 fdc4 	bl	80054cc <HAL_UARTEx_DisableFifoMode>
 8002944:	1e03      	subs	r3, r0, #0
 8002946:	d001      	beq.n	800294c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002948:	f7ff fece 	bl	80026e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800294c:	46c0      	nop			@ (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	20000140 	.word	0x20000140
 8002958:	40013800 	.word	0x40013800

0800295c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b091      	sub	sp, #68	@ 0x44
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	232c      	movs	r3, #44	@ 0x2c
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	0018      	movs	r0, r3
 800296a:	2314      	movs	r3, #20
 800296c:	001a      	movs	r2, r3
 800296e:	2100      	movs	r1, #0
 8002970:	f002 fefc 	bl	800576c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002974:	2410      	movs	r4, #16
 8002976:	193b      	adds	r3, r7, r4
 8002978:	0018      	movs	r0, r3
 800297a:	231c      	movs	r3, #28
 800297c:	001a      	movs	r2, r3
 800297e:	2100      	movs	r1, #0
 8002980:	f002 fef4 	bl	800576c <memset>
  if(uartHandle->Instance==USART1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a23      	ldr	r2, [pc, #140]	@ (8002a18 <HAL_UART_MspInit+0xbc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d13f      	bne.n	8002a0e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800298e:	193b      	adds	r3, r7, r4
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002994:	193b      	adds	r3, r7, r4
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800299a:	193b      	adds	r3, r7, r4
 800299c:	0018      	movs	r0, r3
 800299e:	f001 fd77 	bl	8004490 <HAL_RCCEx_PeriphCLKConfig>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d001      	beq.n	80029aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80029a6:	f7ff fe9f 	bl	80026e8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029aa:	4b1c      	ldr	r3, [pc, #112]	@ (8002a1c <HAL_UART_MspInit+0xc0>)
 80029ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ae:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <HAL_UART_MspInit+0xc0>)
 80029b0:	2180      	movs	r1, #128	@ 0x80
 80029b2:	01c9      	lsls	r1, r1, #7
 80029b4:	430a      	orrs	r2, r1
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80029b8:	4b18      	ldr	r3, [pc, #96]	@ (8002a1c <HAL_UART_MspInit+0xc0>)
 80029ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	01db      	lsls	r3, r3, #7
 80029c0:	4013      	ands	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	4b15      	ldr	r3, [pc, #84]	@ (8002a1c <HAL_UART_MspInit+0xc0>)
 80029c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ca:	4b14      	ldr	r3, [pc, #80]	@ (8002a1c <HAL_UART_MspInit+0xc0>)
 80029cc:	2101      	movs	r1, #1
 80029ce:	430a      	orrs	r2, r1
 80029d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80029d2:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <HAL_UART_MspInit+0xc0>)
 80029d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d6:	2201      	movs	r2, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029de:	212c      	movs	r1, #44	@ 0x2c
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	22c0      	movs	r2, #192	@ 0xc0
 80029e4:	00d2      	lsls	r2, r2, #3
 80029e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	2202      	movs	r2, #2
 80029ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	2201      	movs	r2, #1
 80029fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a00:	187a      	adds	r2, r7, r1
 8002a02:	23a0      	movs	r3, #160	@ 0xa0
 8002a04:	05db      	lsls	r3, r3, #23
 8002a06:	0011      	movs	r1, r2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 f9c1 	bl	8002d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b011      	add	sp, #68	@ 0x44
 8002a14:	bd90      	pop	{r4, r7, pc}
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	40021000 	.word	0x40021000

08002a20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a20:	480d      	ldr	r0, [pc, #52]	@ (8002a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a24:	f7ff fef2 	bl	800280c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a2a:	e003      	b.n	8002a34 <LoopCopyDataInit>

08002a2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002a2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a32:	3104      	adds	r1, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a34:	480a      	ldr	r0, [pc, #40]	@ (8002a60 <LoopForever+0xa>)
  ldr r3, =_edata
 8002a36:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <LoopForever+0xe>)
  adds r2, r0, r1
 8002a38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a3c:	d3f6      	bcc.n	8002a2c <CopyDataInit>
  ldr r2, =_sbss
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <LoopForever+0x12>)
  b LoopFillZerobss
 8002a40:	e002      	b.n	8002a48 <LoopFillZerobss>

08002a42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  str  r3, [r2]
 8002a44:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a46:	3204      	adds	r2, #4

08002a48 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002a48:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <LoopForever+0x16>)
  cmp r2, r3
 8002a4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a4c:	d3f9      	bcc.n	8002a42 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002a4e:	f002 fe9b 	bl	8005788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a52:	f7ff fd7d 	bl	8002550 <main>

08002a56 <LoopForever>:

LoopForever:
    b LoopForever
 8002a56:	e7fe      	b.n	8002a56 <LoopForever>
  ldr   r0, =_estack
 8002a58:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8002a5c:	0800618c 	.word	0x0800618c
  ldr r0, =_sdata
 8002a60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a64:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8002a68:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8002a6c:	20000320 	.word	0x20000320

08002a70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <ADC1_IRQHandler>

08002a72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a78:	1dfb      	adds	r3, r7, #7
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a7e:	2003      	movs	r0, #3
 8002a80:	f000 f80e 	bl	8002aa0 <HAL_InitTick>
 8002a84:	1e03      	subs	r3, r0, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002a88:	1dfb      	adds	r3, r7, #7
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e001      	b.n	8002a94 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a90:	f7ff fe36 	bl	8002700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a94:	1dfb      	adds	r3, r7, #7
 8002a96:	781b      	ldrb	r3, [r3, #0]
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002aa8:	230f      	movs	r3, #15
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <HAL_InitTick+0x88>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d02b      	beq.n	8002b10 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b2c <HAL_InitTick+0x8c>)
 8002aba:	681c      	ldr	r4, [r3, #0]
 8002abc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <HAL_InitTick+0x88>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	0019      	movs	r1, r3
 8002ac2:	23fa      	movs	r3, #250	@ 0xfa
 8002ac4:	0098      	lsls	r0, r3, #2
 8002ac6:	f7fd fb31 	bl	800012c <__udivsi3>
 8002aca:	0003      	movs	r3, r0
 8002acc:	0019      	movs	r1, r3
 8002ace:	0020      	movs	r0, r4
 8002ad0:	f7fd fb2c 	bl	800012c <__udivsi3>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f000 f94d 	bl	8002d76 <HAL_SYSTICK_Config>
 8002adc:	1e03      	subs	r3, r0, #0
 8002ade:	d112      	bne.n	8002b06 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d80a      	bhi.n	8002afc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	2301      	movs	r3, #1
 8002aea:	425b      	negs	r3, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 f91c 	bl	8002d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002af4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <HAL_InitTick+0x90>)
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e00d      	b.n	8002b18 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002afc:	230f      	movs	r3, #15
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e008      	b.n	8002b18 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b06:	230f      	movs	r3, #15
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e003      	b.n	8002b18 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b10:	230f      	movs	r3, #15
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b18:	230f      	movs	r3, #15
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	781b      	ldrb	r3, [r3, #0]
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b005      	add	sp, #20
 8002b24:	bd90      	pop	{r4, r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	20000008 	.word	0x20000008
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	20000004 	.word	0x20000004

08002b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b38:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <HAL_IncTick+0x1c>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_IncTick+0x20>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	18d2      	adds	r2, r2, r3
 8002b44:	4b03      	ldr	r3, [pc, #12]	@ (8002b54 <HAL_IncTick+0x20>)
 8002b46:	601a      	str	r2, [r3, #0]
}
 8002b48:	46c0      	nop			@ (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	20000008 	.word	0x20000008
 8002b54:	200001d4 	.word	0x200001d4

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b02      	ldr	r3, [pc, #8]	@ (8002b68 <HAL_GetTick+0x10>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	200001d4 	.word	0x200001d4

08002b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b74:	f7ff fff0 	bl	8002b58 <HAL_GetTick>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3301      	adds	r3, #1
 8002b84:	d005      	beq.n	8002b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b86:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <HAL_Delay+0x44>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	189b      	adds	r3, r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b92:	46c0      	nop			@ (mov r8, r8)
 8002b94:	f7ff ffe0 	bl	8002b58 <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d8f7      	bhi.n	8002b94 <HAL_Delay+0x28>
  {
  }
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b004      	add	sp, #16
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	20000008 	.word	0x20000008

08002bb4 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8002bbc:	4b04      	ldr	r3, [pc, #16]	@ (8002bd0 <HAL_SYSCFG_EnableRemap+0x1c>)
 8002bbe:	6819      	ldr	r1, [r3, #0]
 8002bc0:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <HAL_SYSCFG_EnableRemap+0x1c>)
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]
}
 8002bc8:	46c0      	nop			@ (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40010000 	.word	0x40010000

08002bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	0002      	movs	r2, r0
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002be0:	1dfb      	adds	r3, r7, #7
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002be6:	d809      	bhi.n	8002bfc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be8:	1dfb      	adds	r3, r7, #7
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	001a      	movs	r2, r3
 8002bee:	231f      	movs	r3, #31
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <__NVIC_EnableIRQ+0x30>)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4091      	lsls	r1, r2
 8002bf8:	000a      	movs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002bfc:	46c0      	nop			@ (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	e000e100 	.word	0xe000e100

08002c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	0002      	movs	r2, r0
 8002c10:	6039      	str	r1, [r7, #0]
 8002c12:	1dfb      	adds	r3, r7, #7
 8002c14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c16:	1dfb      	adds	r3, r7, #7
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c1c:	d828      	bhi.n	8002c70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8002cdc <__NVIC_SetPriority+0xd4>)
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b25b      	sxtb	r3, r3
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	33c0      	adds	r3, #192	@ 0xc0
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	589b      	ldr	r3, [r3, r2]
 8002c2e:	1dfa      	adds	r2, r7, #7
 8002c30:	7812      	ldrb	r2, [r2, #0]
 8002c32:	0011      	movs	r1, r2
 8002c34:	2203      	movs	r2, #3
 8002c36:	400a      	ands	r2, r1
 8002c38:	00d2      	lsls	r2, r2, #3
 8002c3a:	21ff      	movs	r1, #255	@ 0xff
 8002c3c:	4091      	lsls	r1, r2
 8002c3e:	000a      	movs	r2, r1
 8002c40:	43d2      	mvns	r2, r2
 8002c42:	401a      	ands	r2, r3
 8002c44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	22ff      	movs	r2, #255	@ 0xff
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	1dfb      	adds	r3, r7, #7
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	0018      	movs	r0, r3
 8002c54:	2303      	movs	r3, #3
 8002c56:	4003      	ands	r3, r0
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c5c:	481f      	ldr	r0, [pc, #124]	@ (8002cdc <__NVIC_SetPriority+0xd4>)
 8002c5e:	1dfb      	adds	r3, r7, #7
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b25b      	sxtb	r3, r3
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	430a      	orrs	r2, r1
 8002c68:	33c0      	adds	r3, #192	@ 0xc0
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c6e:	e031      	b.n	8002cd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce0 <__NVIC_SetPriority+0xd8>)
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	0019      	movs	r1, r3
 8002c78:	230f      	movs	r3, #15
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	3b08      	subs	r3, #8
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3306      	adds	r3, #6
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	18d3      	adds	r3, r2, r3
 8002c86:	3304      	adds	r3, #4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1dfa      	adds	r2, r7, #7
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	0011      	movs	r1, r2
 8002c90:	2203      	movs	r2, #3
 8002c92:	400a      	ands	r2, r1
 8002c94:	00d2      	lsls	r2, r2, #3
 8002c96:	21ff      	movs	r1, #255	@ 0xff
 8002c98:	4091      	lsls	r1, r2
 8002c9a:	000a      	movs	r2, r1
 8002c9c:	43d2      	mvns	r2, r2
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	019b      	lsls	r3, r3, #6
 8002ca6:	22ff      	movs	r2, #255	@ 0xff
 8002ca8:	401a      	ands	r2, r3
 8002caa:	1dfb      	adds	r3, r7, #7
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	4003      	ands	r3, r0
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cb8:	4809      	ldr	r0, [pc, #36]	@ (8002ce0 <__NVIC_SetPriority+0xd8>)
 8002cba:	1dfb      	adds	r3, r7, #7
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	001c      	movs	r4, r3
 8002cc0:	230f      	movs	r3, #15
 8002cc2:	4023      	ands	r3, r4
 8002cc4:	3b08      	subs	r3, #8
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	3306      	adds	r3, #6
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	18c3      	adds	r3, r0, r3
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	601a      	str	r2, [r3, #0]
}
 8002cd4:	46c0      	nop			@ (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b003      	add	sp, #12
 8002cda:	bd90      	pop	{r4, r7, pc}
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1e5a      	subs	r2, r3, #1
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	045b      	lsls	r3, r3, #17
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d301      	bcc.n	8002cfc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e010      	b.n	8002d1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <SysTick_Config+0x44>)
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	3a01      	subs	r2, #1
 8002d02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d04:	2301      	movs	r3, #1
 8002d06:	425b      	negs	r3, r3
 8002d08:	2103      	movs	r1, #3
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7ff ff7c 	bl	8002c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d10:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <SysTick_Config+0x44>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d16:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <SysTick_Config+0x44>)
 8002d18:	2207      	movs	r2, #7
 8002d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b002      	add	sp, #8
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	e000e010 	.word	0xe000e010

08002d2c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	210f      	movs	r1, #15
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	1c02      	adds	r2, r0, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	187b      	adds	r3, r7, r1
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	0011      	movs	r1, r2
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7ff ff5d 	bl	8002c08 <__NVIC_SetPriority>
}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b004      	add	sp, #16
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	0002      	movs	r2, r0
 8002d5e:	1dfb      	adds	r3, r7, #7
 8002d60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff ff33 	bl	8002bd4 <__NVIC_EnableIRQ>
}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b002      	add	sp, #8
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff ffaf 	bl	8002ce4 <SysTick_Config>
 8002d86:	0003      	movs	r3, r0
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002d9e:	e14d      	b.n	800303c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2101      	movs	r1, #1
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4091      	lsls	r1, r2
 8002daa:	000a      	movs	r2, r1
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d100      	bne.n	8002db8 <HAL_GPIO_Init+0x28>
 8002db6:	e13e      	b.n	8003036 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x38>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b12      	cmp	r3, #18
 8002dc6:	d125      	bne.n	8002e14 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	08da      	lsrs	r2, r3, #3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3208      	adds	r2, #8
 8002dd0:	0092      	lsls	r2, r2, #2
 8002dd2:	58d3      	ldr	r3, [r2, r3]
 8002dd4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2207      	movs	r2, #7
 8002dda:	4013      	ands	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	220f      	movs	r2, #15
 8002de0:	409a      	lsls	r2, r3
 8002de2:	0013      	movs	r3, r2
 8002de4:	43da      	mvns	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	4013      	ands	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	220f      	movs	r2, #15
 8002df2:	401a      	ands	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2107      	movs	r1, #7
 8002df8:	400b      	ands	r3, r1
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	0013      	movs	r3, r2
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	08da      	lsrs	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3208      	adds	r2, #8
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	6979      	ldr	r1, [r7, #20]
 8002e12:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	409a      	lsls	r2, r3
 8002e22:	0013      	movs	r3, r2
 8002e24:	43da      	mvns	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2203      	movs	r2, #3
 8002e32:	401a      	ands	r2, r3
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	0013      	movs	r3, r2
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d00b      	beq.n	8002e68 <HAL_GPIO_Init+0xd8>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d007      	beq.n	8002e68 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e5c:	2b11      	cmp	r3, #17
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b12      	cmp	r3, #18
 8002e66:	d130      	bne.n	8002eca <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	409a      	lsls	r2, r3
 8002e76:	0013      	movs	r3, r2
 8002e78:	43da      	mvns	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	0013      	movs	r3, r2
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	0013      	movs	r3, r2
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	0013      	movs	r3, r2
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d017      	beq.n	8002f02 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	2203      	movs	r2, #3
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	0013      	movs	r3, r2
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	0013      	movs	r3, r2
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	2380      	movs	r3, #128	@ 0x80
 8002f08:	055b      	lsls	r3, r3, #21
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d100      	bne.n	8002f10 <HAL_GPIO_Init+0x180>
 8002f0e:	e092      	b.n	8003036 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002f10:	4a50      	ldr	r2, [pc, #320]	@ (8003054 <HAL_GPIO_Init+0x2c4>)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	089b      	lsrs	r3, r3, #2
 8002f16:	3318      	adds	r3, #24
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	589b      	ldr	r3, [r3, r2]
 8002f1c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2203      	movs	r2, #3
 8002f22:	4013      	ands	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	220f      	movs	r2, #15
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	0013      	movs	r3, r2
 8002f2c:	43da      	mvns	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	4013      	ands	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	23a0      	movs	r3, #160	@ 0xa0
 8002f38:	05db      	lsls	r3, r3, #23
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d013      	beq.n	8002f66 <HAL_GPIO_Init+0x1d6>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a45      	ldr	r2, [pc, #276]	@ (8003058 <HAL_GPIO_Init+0x2c8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00d      	beq.n	8002f62 <HAL_GPIO_Init+0x1d2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a44      	ldr	r2, [pc, #272]	@ (800305c <HAL_GPIO_Init+0x2cc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <HAL_GPIO_Init+0x1ce>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a43      	ldr	r2, [pc, #268]	@ (8003060 <HAL_GPIO_Init+0x2d0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <HAL_GPIO_Init+0x1ca>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e006      	b.n	8002f68 <HAL_GPIO_Init+0x1d8>
 8002f5a:	2306      	movs	r3, #6
 8002f5c:	e004      	b.n	8002f68 <HAL_GPIO_Init+0x1d8>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e002      	b.n	8002f68 <HAL_GPIO_Init+0x1d8>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_GPIO_Init+0x1d8>
 8002f66:	2300      	movs	r3, #0
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	2103      	movs	r1, #3
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	00d2      	lsls	r2, r2, #3
 8002f70:	4093      	lsls	r3, r2
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002f78:	4936      	ldr	r1, [pc, #216]	@ (8003054 <HAL_GPIO_Init+0x2c4>)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	089b      	lsrs	r3, r3, #2
 8002f7e:	3318      	adds	r3, #24
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002f86:	4a33      	ldr	r2, [pc, #204]	@ (8003054 <HAL_GPIO_Init+0x2c4>)
 8002f88:	2380      	movs	r3, #128	@ 0x80
 8002f8a:	58d3      	ldr	r3, [r2, r3]
 8002f8c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	43da      	mvns	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	4013      	ands	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	2380      	movs	r3, #128	@ 0x80
 8002f9e:	025b      	lsls	r3, r3, #9
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002fac:	4929      	ldr	r1, [pc, #164]	@ (8003054 <HAL_GPIO_Init+0x2c4>)
 8002fae:	2280      	movs	r2, #128	@ 0x80
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002fb4:	4a27      	ldr	r2, [pc, #156]	@ (8003054 <HAL_GPIO_Init+0x2c4>)
 8002fb6:	2384      	movs	r3, #132	@ 0x84
 8002fb8:	58d3      	ldr	r3, [r2, r3]
 8002fba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	2380      	movs	r3, #128	@ 0x80
 8002fcc:	029b      	lsls	r3, r3, #10
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002fda:	491e      	ldr	r1, [pc, #120]	@ (8003054 <HAL_GPIO_Init+0x2c4>)
 8002fdc:	2284      	movs	r2, #132	@ 0x84
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8003054 <HAL_GPIO_Init+0x2c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	43da      	mvns	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	2380      	movs	r3, #128	@ 0x80
 8002ff8:	035b      	lsls	r3, r3, #13
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003006:	4b13      	ldr	r3, [pc, #76]	@ (8003054 <HAL_GPIO_Init+0x2c4>)
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800300c:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <HAL_GPIO_Init+0x2c4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	43da      	mvns	r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	4013      	ands	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	039b      	lsls	r3, r3, #14
 8003024:	4013      	ands	r3, r2
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003030:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <HAL_GPIO_Init+0x2c4>)
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	3301      	adds	r3, #1
 800303a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	40da      	lsrs	r2, r3
 8003044:	1e13      	subs	r3, r2, #0
 8003046:	d000      	beq.n	800304a <HAL_GPIO_Init+0x2ba>
 8003048:	e6aa      	b.n	8002da0 <HAL_GPIO_Init+0x10>
  }
}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	46c0      	nop			@ (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b006      	add	sp, #24
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021800 	.word	0x40021800
 8003058:	50000400 	.word	0x50000400
 800305c:	50000800 	.word	0x50000800
 8003060:	50001400 	.word	0x50001400

08003064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	0008      	movs	r0, r1
 800306e:	0011      	movs	r1, r2
 8003070:	1cbb      	adds	r3, r7, #2
 8003072:	1c02      	adds	r2, r0, #0
 8003074:	801a      	strh	r2, [r3, #0]
 8003076:	1c7b      	adds	r3, r7, #1
 8003078:	1c0a      	adds	r2, r1, #0
 800307a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800307c:	1c7b      	adds	r3, r7, #1
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d004      	beq.n	800308e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003084:	1cbb      	adds	r3, r7, #2
 8003086:	881a      	ldrh	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800308c:	e003      	b.n	8003096 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800308e:	1cbb      	adds	r3, r7, #2
 8003090:	881a      	ldrh	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b002      	add	sp, #8
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e08f      	b.n	80031d2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2241      	movs	r2, #65	@ 0x41
 80030b6:	5c9b      	ldrb	r3, [r3, r2]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d107      	bne.n	80030ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2240      	movs	r2, #64	@ 0x40
 80030c2:	2100      	movs	r1, #0
 80030c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7ff f95b 	bl	8002384 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2241      	movs	r2, #65	@ 0x41
 80030d2:	2124      	movs	r1, #36	@ 0x24
 80030d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2101      	movs	r1, #1
 80030e2:	438a      	bics	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	493b      	ldr	r1, [pc, #236]	@ (80031dc <HAL_I2C_Init+0x13c>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4938      	ldr	r1, [pc, #224]	@ (80031e0 <HAL_I2C_Init+0x140>)
 8003100:	400a      	ands	r2, r1
 8003102:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d108      	bne.n	800311e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2180      	movs	r1, #128	@ 0x80
 8003116:	0209      	lsls	r1, r1, #8
 8003118:	430a      	orrs	r2, r1
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	e007      	b.n	800312e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2184      	movs	r1, #132	@ 0x84
 8003128:	0209      	lsls	r1, r1, #8
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d109      	bne.n	800314a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2180      	movs	r1, #128	@ 0x80
 8003142:	0109      	lsls	r1, r1, #4
 8003144:	430a      	orrs	r2, r1
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	e007      	b.n	800315a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4923      	ldr	r1, [pc, #140]	@ (80031e4 <HAL_I2C_Init+0x144>)
 8003156:	400a      	ands	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4920      	ldr	r1, [pc, #128]	@ (80031e8 <HAL_I2C_Init+0x148>)
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	491a      	ldr	r1, [pc, #104]	@ (80031e0 <HAL_I2C_Init+0x140>)
 8003176:	400a      	ands	r2, r1
 8003178:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	431a      	orrs	r2, r3
 8003184:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69d9      	ldr	r1, [r3, #28]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1a      	ldr	r2, [r3, #32]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2101      	movs	r1, #1
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2241      	movs	r2, #65	@ 0x41
 80031be:	2120      	movs	r1, #32
 80031c0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2242      	movs	r2, #66	@ 0x42
 80031cc:	2100      	movs	r1, #0
 80031ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b002      	add	sp, #8
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	f0ffffff 	.word	0xf0ffffff
 80031e0:	ffff7fff 	.word	0xffff7fff
 80031e4:	fffff7ff 	.word	0xfffff7ff
 80031e8:	02008000 	.word	0x02008000

080031ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b089      	sub	sp, #36	@ 0x24
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	000c      	movs	r4, r1
 80031f6:	0010      	movs	r0, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	230a      	movs	r3, #10
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	1c22      	adds	r2, r4, #0
 8003200:	801a      	strh	r2, [r3, #0]
 8003202:	2308      	movs	r3, #8
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	1c02      	adds	r2, r0, #0
 8003208:	801a      	strh	r2, [r3, #0]
 800320a:	1dbb      	adds	r3, r7, #6
 800320c:	1c0a      	adds	r2, r1, #0
 800320e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2241      	movs	r2, #65	@ 0x41
 8003214:	5c9b      	ldrb	r3, [r3, r2]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b20      	cmp	r3, #32
 800321a:	d000      	beq.n	800321e <HAL_I2C_Mem_Write+0x32>
 800321c:	e10c      	b.n	8003438 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800321e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <HAL_I2C_Mem_Write+0x42>
 8003224:	232c      	movs	r3, #44	@ 0x2c
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2280      	movs	r2, #128	@ 0x80
 8003232:	0092      	lsls	r2, r2, #2
 8003234:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0ff      	b.n	800343a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2240      	movs	r2, #64	@ 0x40
 800323e:	5c9b      	ldrb	r3, [r3, r2]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_I2C_Mem_Write+0x5c>
 8003244:	2302      	movs	r3, #2
 8003246:	e0f8      	b.n	800343a <HAL_I2C_Mem_Write+0x24e>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2240      	movs	r2, #64	@ 0x40
 800324c:	2101      	movs	r1, #1
 800324e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003250:	f7ff fc82 	bl	8002b58 <HAL_GetTick>
 8003254:	0003      	movs	r3, r0
 8003256:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003258:	2380      	movs	r3, #128	@ 0x80
 800325a:	0219      	lsls	r1, r3, #8
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2319      	movs	r3, #25
 8003264:	2201      	movs	r2, #1
 8003266:	f000 fb0b 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 800326a:	1e03      	subs	r3, r0, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0e3      	b.n	800343a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2241      	movs	r2, #65	@ 0x41
 8003276:	2121      	movs	r1, #33	@ 0x21
 8003278:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2242      	movs	r2, #66	@ 0x42
 800327e:	2140      	movs	r1, #64	@ 0x40
 8003280:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800328c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	222c      	movs	r2, #44	@ 0x2c
 8003292:	18ba      	adds	r2, r7, r2
 8003294:	8812      	ldrh	r2, [r2, #0]
 8003296:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800329e:	1dbb      	adds	r3, r7, #6
 80032a0:	881c      	ldrh	r4, [r3, #0]
 80032a2:	2308      	movs	r3, #8
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	230a      	movs	r3, #10
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	8819      	ldrh	r1, [r3, #0]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	0023      	movs	r3, r4
 80032ba:	f000 f9f9 	bl	80036b0 <I2C_RequestMemoryWrite>
 80032be:	1e03      	subs	r3, r0, #0
 80032c0:	d005      	beq.n	80032ce <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2240      	movs	r2, #64	@ 0x40
 80032c6:	2100      	movs	r1, #0
 80032c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0b5      	b.n	800343a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2bff      	cmp	r3, #255	@ 0xff
 80032d6:	d911      	bls.n	80032fc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	22ff      	movs	r2, #255	@ 0xff
 80032dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	2380      	movs	r3, #128	@ 0x80
 80032e6:	045c      	lsls	r4, r3, #17
 80032e8:	230a      	movs	r3, #10
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	8819      	ldrh	r1, [r3, #0]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	2300      	movs	r3, #0
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	0023      	movs	r3, r4
 80032f6:	f000 fc9d 	bl	8003c34 <I2C_TransferConfig>
 80032fa:	e012      	b.n	8003322 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	2380      	movs	r3, #128	@ 0x80
 800330e:	049c      	lsls	r4, r3, #18
 8003310:	230a      	movs	r3, #10
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	8819      	ldrh	r1, [r3, #0]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	2300      	movs	r3, #0
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	0023      	movs	r3, r4
 800331e:	f000 fc89 	bl	8003c34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	0018      	movs	r0, r3
 800332a:	f000 fb01 	bl	8003930 <I2C_WaitOnTXISFlagUntilTimeout>
 800332e:	1e03      	subs	r3, r0, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e081      	b.n	800343a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d03a      	beq.n	80033e6 <HAL_I2C_Mem_Write+0x1fa>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	d136      	bne.n	80033e6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	0013      	movs	r3, r2
 8003382:	2200      	movs	r2, #0
 8003384:	2180      	movs	r1, #128	@ 0x80
 8003386:	f000 fa7b 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 800338a:	1e03      	subs	r3, r0, #0
 800338c:	d001      	beq.n	8003392 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e053      	b.n	800343a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	2bff      	cmp	r3, #255	@ 0xff
 800339a:	d911      	bls.n	80033c0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	22ff      	movs	r2, #255	@ 0xff
 80033a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	045c      	lsls	r4, r3, #17
 80033ac:	230a      	movs	r3, #10
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	8819      	ldrh	r1, [r3, #0]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	2300      	movs	r3, #0
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	0023      	movs	r3, r4
 80033ba:	f000 fc3b 	bl	8003c34 <I2C_TransferConfig>
 80033be:	e012      	b.n	80033e6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	2380      	movs	r3, #128	@ 0x80
 80033d2:	049c      	lsls	r4, r3, #18
 80033d4:	230a      	movs	r3, #10
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	8819      	ldrh	r1, [r3, #0]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	2300      	movs	r3, #0
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	0023      	movs	r3, r4
 80033e2:	f000 fc27 	bl	8003c34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d198      	bne.n	8003322 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 fae0 	bl	80039bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80033fc:	1e03      	subs	r3, r0, #0
 80033fe:	d001      	beq.n	8003404 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e01a      	b.n	800343a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2220      	movs	r2, #32
 800340a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	490b      	ldr	r1, [pc, #44]	@ (8003444 <HAL_I2C_Mem_Write+0x258>)
 8003418:	400a      	ands	r2, r1
 800341a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2241      	movs	r2, #65	@ 0x41
 8003420:	2120      	movs	r1, #32
 8003422:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2242      	movs	r2, #66	@ 0x42
 8003428:	2100      	movs	r1, #0
 800342a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2240      	movs	r2, #64	@ 0x40
 8003430:	2100      	movs	r1, #0
 8003432:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	0018      	movs	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	b007      	add	sp, #28
 8003440:	bd90      	pop	{r4, r7, pc}
 8003442:	46c0      	nop			@ (mov r8, r8)
 8003444:	fe00e800 	.word	0xfe00e800

08003448 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b089      	sub	sp, #36	@ 0x24
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	000c      	movs	r4, r1
 8003452:	0010      	movs	r0, r2
 8003454:	0019      	movs	r1, r3
 8003456:	230a      	movs	r3, #10
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	1c22      	adds	r2, r4, #0
 800345c:	801a      	strh	r2, [r3, #0]
 800345e:	2308      	movs	r3, #8
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	1c02      	adds	r2, r0, #0
 8003464:	801a      	strh	r2, [r3, #0]
 8003466:	1dbb      	adds	r3, r7, #6
 8003468:	1c0a      	adds	r2, r1, #0
 800346a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2241      	movs	r2, #65	@ 0x41
 8003470:	5c9b      	ldrb	r3, [r3, r2]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b20      	cmp	r3, #32
 8003476:	d000      	beq.n	800347a <HAL_I2C_Mem_Read+0x32>
 8003478:	e110      	b.n	800369c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800347a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <HAL_I2C_Mem_Read+0x42>
 8003480:	232c      	movs	r3, #44	@ 0x2c
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d105      	bne.n	8003496 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2280      	movs	r2, #128	@ 0x80
 800348e:	0092      	lsls	r2, r2, #2
 8003490:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e103      	b.n	800369e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2240      	movs	r2, #64	@ 0x40
 800349a:	5c9b      	ldrb	r3, [r3, r2]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_I2C_Mem_Read+0x5c>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e0fc      	b.n	800369e <HAL_I2C_Mem_Read+0x256>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2240      	movs	r2, #64	@ 0x40
 80034a8:	2101      	movs	r1, #1
 80034aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034ac:	f7ff fb54 	bl	8002b58 <HAL_GetTick>
 80034b0:	0003      	movs	r3, r0
 80034b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034b4:	2380      	movs	r3, #128	@ 0x80
 80034b6:	0219      	lsls	r1, r3, #8
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2319      	movs	r3, #25
 80034c0:	2201      	movs	r2, #1
 80034c2:	f000 f9dd 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 80034c6:	1e03      	subs	r3, r0, #0
 80034c8:	d001      	beq.n	80034ce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0e7      	b.n	800369e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2241      	movs	r2, #65	@ 0x41
 80034d2:	2122      	movs	r1, #34	@ 0x22
 80034d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2242      	movs	r2, #66	@ 0x42
 80034da:	2140      	movs	r1, #64	@ 0x40
 80034dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	222c      	movs	r2, #44	@ 0x2c
 80034ee:	18ba      	adds	r2, r7, r2
 80034f0:	8812      	ldrh	r2, [r2, #0]
 80034f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034fa:	1dbb      	adds	r3, r7, #6
 80034fc:	881c      	ldrh	r4, [r3, #0]
 80034fe:	2308      	movs	r3, #8
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	881a      	ldrh	r2, [r3, #0]
 8003504:	230a      	movs	r3, #10
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	8819      	ldrh	r1, [r3, #0]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	0023      	movs	r3, r4
 8003516:	f000 f92f 	bl	8003778 <I2C_RequestMemoryRead>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d005      	beq.n	800352a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2240      	movs	r2, #64	@ 0x40
 8003522:	2100      	movs	r1, #0
 8003524:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0b9      	b.n	800369e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	2bff      	cmp	r3, #255	@ 0xff
 8003532:	d911      	bls.n	8003558 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	22ff      	movs	r2, #255	@ 0xff
 8003538:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353e:	b2da      	uxtb	r2, r3
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	045c      	lsls	r4, r3, #17
 8003544:	230a      	movs	r3, #10
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	8819      	ldrh	r1, [r3, #0]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	4b56      	ldr	r3, [pc, #344]	@ (80036a8 <HAL_I2C_Mem_Read+0x260>)
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	0023      	movs	r3, r4
 8003552:	f000 fb6f 	bl	8003c34 <I2C_TransferConfig>
 8003556:	e012      	b.n	800357e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003566:	b2da      	uxtb	r2, r3
 8003568:	2380      	movs	r3, #128	@ 0x80
 800356a:	049c      	lsls	r4, r3, #18
 800356c:	230a      	movs	r3, #10
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	8819      	ldrh	r1, [r3, #0]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	4b4c      	ldr	r3, [pc, #304]	@ (80036a8 <HAL_I2C_Mem_Read+0x260>)
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	0023      	movs	r3, r4
 800357a:	f000 fb5b 	bl	8003c34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800357e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	0013      	movs	r3, r2
 8003588:	2200      	movs	r2, #0
 800358a:	2104      	movs	r1, #4
 800358c:	f000 f978 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 8003590:	1e03      	subs	r3, r0, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e082      	b.n	800369e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d03a      	beq.n	800364a <HAL_I2C_Mem_Read+0x202>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d136      	bne.n	800364a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	0013      	movs	r3, r2
 80035e6:	2200      	movs	r2, #0
 80035e8:	2180      	movs	r1, #128	@ 0x80
 80035ea:	f000 f949 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 80035ee:	1e03      	subs	r3, r0, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e053      	b.n	800369e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2bff      	cmp	r3, #255	@ 0xff
 80035fe:	d911      	bls.n	8003624 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	22ff      	movs	r2, #255	@ 0xff
 8003604:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360a:	b2da      	uxtb	r2, r3
 800360c:	2380      	movs	r3, #128	@ 0x80
 800360e:	045c      	lsls	r4, r3, #17
 8003610:	230a      	movs	r3, #10
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	8819      	ldrh	r1, [r3, #0]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	2300      	movs	r3, #0
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	0023      	movs	r3, r4
 800361e:	f000 fb09 	bl	8003c34 <I2C_TransferConfig>
 8003622:	e012      	b.n	800364a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003632:	b2da      	uxtb	r2, r3
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	049c      	lsls	r4, r3, #18
 8003638:	230a      	movs	r3, #10
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	8819      	ldrh	r1, [r3, #0]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	2300      	movs	r3, #0
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	0023      	movs	r3, r4
 8003646:	f000 faf5 	bl	8003c34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d194      	bne.n	800357e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	0018      	movs	r0, r3
 800365c:	f000 f9ae 	bl	80039bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003660:	1e03      	subs	r3, r0, #0
 8003662:	d001      	beq.n	8003668 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e01a      	b.n	800369e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2220      	movs	r2, #32
 800366e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	490c      	ldr	r1, [pc, #48]	@ (80036ac <HAL_I2C_Mem_Read+0x264>)
 800367c:	400a      	ands	r2, r1
 800367e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2241      	movs	r2, #65	@ 0x41
 8003684:	2120      	movs	r1, #32
 8003686:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2242      	movs	r2, #66	@ 0x42
 800368c:	2100      	movs	r1, #0
 800368e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2240      	movs	r2, #64	@ 0x40
 8003694:	2100      	movs	r1, #0
 8003696:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	e000      	b.n	800369e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800369c:	2302      	movs	r3, #2
  }
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b007      	add	sp, #28
 80036a4:	bd90      	pop	{r4, r7, pc}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	80002400 	.word	0x80002400
 80036ac:	fe00e800 	.word	0xfe00e800

080036b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	000c      	movs	r4, r1
 80036ba:	0010      	movs	r0, r2
 80036bc:	0019      	movs	r1, r3
 80036be:	250a      	movs	r5, #10
 80036c0:	197b      	adds	r3, r7, r5
 80036c2:	1c22      	adds	r2, r4, #0
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	2308      	movs	r3, #8
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	1c02      	adds	r2, r0, #0
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	1c0a      	adds	r2, r1, #0
 80036d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036d4:	1dbb      	adds	r3, r7, #6
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	2380      	movs	r3, #128	@ 0x80
 80036dc:	045c      	lsls	r4, r3, #17
 80036de:	197b      	adds	r3, r7, r5
 80036e0:	8819      	ldrh	r1, [r3, #0]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	4b23      	ldr	r3, [pc, #140]	@ (8003774 <I2C_RequestMemoryWrite+0xc4>)
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	0023      	movs	r3, r4
 80036ea:	f000 faa3 	bl	8003c34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f0:	6a39      	ldr	r1, [r7, #32]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f000 f91b 	bl	8003930 <I2C_WaitOnTXISFlagUntilTimeout>
 80036fa:	1e03      	subs	r3, r0, #0
 80036fc:	d001      	beq.n	8003702 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e033      	b.n	800376a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800370a:	2308      	movs	r3, #8
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	629a      	str	r2, [r3, #40]	@ 0x28
 8003718:	e019      	b.n	800374e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800371a:	2308      	movs	r3, #8
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	b29b      	uxth	r3, r3
 8003724:	b2da      	uxtb	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372e:	6a39      	ldr	r1, [r7, #32]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	0018      	movs	r0, r3
 8003734:	f000 f8fc 	bl	8003930 <I2C_WaitOnTXISFlagUntilTimeout>
 8003738:	1e03      	subs	r3, r0, #0
 800373a:	d001      	beq.n	8003740 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e014      	b.n	800376a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003740:	2308      	movs	r3, #8
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b2da      	uxtb	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800374e:	6a3a      	ldr	r2, [r7, #32]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	0013      	movs	r3, r2
 8003758:	2200      	movs	r2, #0
 800375a:	2180      	movs	r1, #128	@ 0x80
 800375c:	f000 f890 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 8003760:	1e03      	subs	r3, r0, #0
 8003762:	d001      	beq.n	8003768 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bdb0      	pop	{r4, r5, r7, pc}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	80002000 	.word	0x80002000

08003778 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003778:	b5b0      	push	{r4, r5, r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	000c      	movs	r4, r1
 8003782:	0010      	movs	r0, r2
 8003784:	0019      	movs	r1, r3
 8003786:	250a      	movs	r5, #10
 8003788:	197b      	adds	r3, r7, r5
 800378a:	1c22      	adds	r2, r4, #0
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	2308      	movs	r3, #8
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	1c02      	adds	r2, r0, #0
 8003794:	801a      	strh	r2, [r3, #0]
 8003796:	1dbb      	adds	r3, r7, #6
 8003798:	1c0a      	adds	r2, r1, #0
 800379a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800379c:	1dbb      	adds	r3, r7, #6
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	197b      	adds	r3, r7, r5
 80037a4:	8819      	ldrh	r1, [r3, #0]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	4b23      	ldr	r3, [pc, #140]	@ (8003838 <I2C_RequestMemoryRead+0xc0>)
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2300      	movs	r3, #0
 80037ae:	f000 fa41 	bl	8003c34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b4:	6a39      	ldr	r1, [r7, #32]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f000 f8b9 	bl	8003930 <I2C_WaitOnTXISFlagUntilTimeout>
 80037be:	1e03      	subs	r3, r0, #0
 80037c0:	d001      	beq.n	80037c6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e033      	b.n	800382e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037c6:	1dbb      	adds	r3, r7, #6
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d107      	bne.n	80037de <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037ce:	2308      	movs	r3, #8
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	629a      	str	r2, [r3, #40]	@ 0x28
 80037dc:	e019      	b.n	8003812 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037de:	2308      	movs	r3, #8
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f2:	6a39      	ldr	r1, [r7, #32]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	0018      	movs	r0, r3
 80037f8:	f000 f89a 	bl	8003930 <I2C_WaitOnTXISFlagUntilTimeout>
 80037fc:	1e03      	subs	r3, r0, #0
 80037fe:	d001      	beq.n	8003804 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e014      	b.n	800382e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003804:	2308      	movs	r3, #8
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003812:	6a3a      	ldr	r2, [r7, #32]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	0013      	movs	r3, r2
 800381c:	2200      	movs	r2, #0
 800381e:	2140      	movs	r1, #64	@ 0x40
 8003820:	f000 f82e 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 8003824:	1e03      	subs	r3, r0, #0
 8003826:	d001      	beq.n	800382c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b004      	add	sp, #16
 8003834:	bdb0      	pop	{r4, r5, r7, pc}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	80002000 	.word	0x80002000

0800383c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2202      	movs	r2, #2
 800384c:	4013      	ands	r3, r2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d103      	bne.n	800385a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2201      	movs	r2, #1
 8003862:	4013      	ands	r3, r2
 8003864:	2b01      	cmp	r3, #1
 8003866:	d007      	beq.n	8003878 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	430a      	orrs	r2, r1
 8003876:	619a      	str	r2, [r3, #24]
  }
}
 8003878:	46c0      	nop			@ (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}

08003880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	1dfb      	adds	r3, r7, #7
 800388e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003890:	e03a      	b.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	6839      	ldr	r1, [r7, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	0018      	movs	r0, r3
 800389a:	f000 f8d3 	bl	8003a44 <I2C_IsErrorOccurred>
 800389e:	1e03      	subs	r3, r0, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e040      	b.n	8003928 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	d02d      	beq.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ac:	f7ff f954 	bl	8002b58 <HAL_GetTick>
 80038b0:	0002      	movs	r2, r0
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d302      	bcc.n	80038c2 <I2C_WaitOnFlagUntilTimeout+0x42>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d122      	bne.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	425a      	negs	r2, r3
 80038d2:	4153      	adcs	r3, r2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	001a      	movs	r2, r3
 80038d8:	1dfb      	adds	r3, r7, #7
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d113      	bne.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e4:	2220      	movs	r2, #32
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2241      	movs	r2, #65	@ 0x41
 80038f0:	2120      	movs	r1, #32
 80038f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2242      	movs	r2, #66	@ 0x42
 80038f8:	2100      	movs	r1, #0
 80038fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2240      	movs	r2, #64	@ 0x40
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e00f      	b.n	8003928 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4013      	ands	r3, r2
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	425a      	negs	r2, r3
 8003918:	4153      	adcs	r3, r2
 800391a:	b2db      	uxtb	r3, r3
 800391c:	001a      	movs	r2, r3
 800391e:	1dfb      	adds	r3, r7, #7
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d0b5      	beq.n	8003892 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b004      	add	sp, #16
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800393c:	e032      	b.n	80039a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	0018      	movs	r0, r3
 8003946:	f000 f87d 	bl	8003a44 <I2C_IsErrorOccurred>
 800394a:	1e03      	subs	r3, r0, #0
 800394c:	d001      	beq.n	8003952 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e030      	b.n	80039b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3301      	adds	r3, #1
 8003956:	d025      	beq.n	80039a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003958:	f7ff f8fe 	bl	8002b58 <HAL_GetTick>
 800395c:	0002      	movs	r2, r0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	429a      	cmp	r2, r3
 8003966:	d302      	bcc.n	800396e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d11a      	bne.n	80039a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2202      	movs	r2, #2
 8003976:	4013      	ands	r3, r2
 8003978:	2b02      	cmp	r3, #2
 800397a:	d013      	beq.n	80039a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003980:	2220      	movs	r2, #32
 8003982:	431a      	orrs	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2241      	movs	r2, #65	@ 0x41
 800398c:	2120      	movs	r1, #32
 800398e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2242      	movs	r2, #66	@ 0x42
 8003994:	2100      	movs	r1, #0
 8003996:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2240      	movs	r2, #64	@ 0x40
 800399c:	2100      	movs	r1, #0
 800399e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e007      	b.n	80039b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2202      	movs	r2, #2
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d1c5      	bne.n	800393e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b004      	add	sp, #16
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039c8:	e02f      	b.n	8003a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f000 f837 	bl	8003a44 <I2C_IsErrorOccurred>
 80039d6:	1e03      	subs	r3, r0, #0
 80039d8:	d001      	beq.n	80039de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e02d      	b.n	8003a3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039de:	f7ff f8bb 	bl	8002b58 <HAL_GetTick>
 80039e2:	0002      	movs	r2, r0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d302      	bcc.n	80039f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11a      	bne.n	8003a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2220      	movs	r2, #32
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d013      	beq.n	8003a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	2220      	movs	r2, #32
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2241      	movs	r2, #65	@ 0x41
 8003a12:	2120      	movs	r1, #32
 8003a14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2242      	movs	r2, #66	@ 0x42
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2240      	movs	r2, #64	@ 0x40
 8003a22:	2100      	movs	r1, #0
 8003a24:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e007      	b.n	8003a3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2220      	movs	r2, #32
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d1c8      	bne.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b004      	add	sp, #16
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	@ 0x28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a50:	2327      	movs	r3, #39	@ 0x27
 8003a52:	18fb      	adds	r3, r7, r3
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d100      	bne.n	8003a72 <I2C_IsErrorOccurred+0x2e>
 8003a70:	e079      	b.n	8003b66 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2210      	movs	r2, #16
 8003a78:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a7a:	e057      	b.n	8003b2c <I2C_IsErrorOccurred+0xe8>
 8003a7c:	2227      	movs	r2, #39	@ 0x27
 8003a7e:	18bb      	adds	r3, r7, r2
 8003a80:	18ba      	adds	r2, r7, r2
 8003a82:	7812      	ldrb	r2, [r2, #0]
 8003a84:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	d04f      	beq.n	8003b2c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a8c:	f7ff f864 	bl	8002b58 <HAL_GetTick>
 8003a90:	0002      	movs	r2, r0
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <I2C_IsErrorOccurred+0x5e>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d144      	bne.n	8003b2c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	2380      	movs	r3, #128	@ 0x80
 8003aaa:	01db      	lsls	r3, r3, #7
 8003aac:	4013      	ands	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ab0:	2013      	movs	r0, #19
 8003ab2:	183b      	adds	r3, r7, r0
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	2142      	movs	r1, #66	@ 0x42
 8003ab8:	5c52      	ldrb	r2, [r2, r1]
 8003aba:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	2380      	movs	r3, #128	@ 0x80
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d126      	bne.n	8003b1e <I2C_IsErrorOccurred+0xda>
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	2380      	movs	r3, #128	@ 0x80
 8003ad4:	01db      	lsls	r3, r3, #7
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d021      	beq.n	8003b1e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d01d      	beq.n	8003b1e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2180      	movs	r1, #128	@ 0x80
 8003aee:	01c9      	lsls	r1, r1, #7
 8003af0:	430a      	orrs	r2, r1
 8003af2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003af4:	f7ff f830 	bl	8002b58 <HAL_GetTick>
 8003af8:	0003      	movs	r3, r0
 8003afa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003afc:	e00f      	b.n	8003b1e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003afe:	f7ff f82b 	bl	8002b58 <HAL_GetTick>
 8003b02:	0002      	movs	r2, r0
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b19      	cmp	r3, #25
 8003b0a:	d908      	bls.n	8003b1e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	4313      	orrs	r3, r2
 8003b12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b14:	2327      	movs	r3, #39	@ 0x27
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	2201      	movs	r2, #1
 8003b1a:	701a      	strb	r2, [r3, #0]

              break;
 8003b1c:	e006      	b.n	8003b2c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2220      	movs	r2, #32
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d1e8      	bne.n	8003afe <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	2220      	movs	r2, #32
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d004      	beq.n	8003b44 <I2C_IsErrorOccurred+0x100>
 8003b3a:	2327      	movs	r3, #39	@ 0x27
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d09b      	beq.n	8003a7c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b44:	2327      	movs	r3, #39	@ 0x27
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d103      	bne.n	8003b56 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2220      	movs	r2, #32
 8003b54:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b5e:	2327      	movs	r3, #39	@ 0x27
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	2380      	movs	r3, #128	@ 0x80
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4013      	ands	r3, r2
 8003b76:	d00c      	beq.n	8003b92 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2280      	movs	r2, #128	@ 0x80
 8003b86:	0052      	lsls	r2, r2, #1
 8003b88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b8a:	2327      	movs	r3, #39	@ 0x27
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	2201      	movs	r2, #1
 8003b90:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	2380      	movs	r3, #128	@ 0x80
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d00c      	beq.n	8003bb6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2280      	movs	r2, #128	@ 0x80
 8003baa:	00d2      	lsls	r2, r2, #3
 8003bac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bae:	2327      	movs	r3, #39	@ 0x27
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	2380      	movs	r3, #128	@ 0x80
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d00c      	beq.n	8003bda <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2280      	movs	r2, #128	@ 0x80
 8003bce:	0092      	lsls	r2, r2, #2
 8003bd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bd2:	2327      	movs	r3, #39	@ 0x27
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003bda:	2327      	movs	r3, #39	@ 0x27
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01d      	beq.n	8003c20 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f7ff fe28 	bl	800383c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	490e      	ldr	r1, [pc, #56]	@ (8003c30 <I2C_IsErrorOccurred+0x1ec>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2241      	movs	r2, #65	@ 0x41
 8003c0c:	2120      	movs	r1, #32
 8003c0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2242      	movs	r2, #66	@ 0x42
 8003c14:	2100      	movs	r1, #0
 8003c16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2240      	movs	r2, #64	@ 0x40
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003c20:	2327      	movs	r3, #39	@ 0x27
 8003c22:	18fb      	adds	r3, r7, r3
 8003c24:	781b      	ldrb	r3, [r3, #0]
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b00a      	add	sp, #40	@ 0x28
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			@ (mov r8, r8)
 8003c30:	fe00e800 	.word	0xfe00e800

08003c34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	0008      	movs	r0, r1
 8003c3e:	0011      	movs	r1, r2
 8003c40:	607b      	str	r3, [r7, #4]
 8003c42:	240a      	movs	r4, #10
 8003c44:	193b      	adds	r3, r7, r4
 8003c46:	1c02      	adds	r2, r0, #0
 8003c48:	801a      	strh	r2, [r3, #0]
 8003c4a:	2009      	movs	r0, #9
 8003c4c:	183b      	adds	r3, r7, r0
 8003c4e:	1c0a      	adds	r2, r1, #0
 8003c50:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c52:	193b      	adds	r3, r7, r4
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	059b      	lsls	r3, r3, #22
 8003c58:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c5a:	183b      	adds	r3, r7, r0
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	0419      	lsls	r1, r3, #16
 8003c60:	23ff      	movs	r3, #255	@ 0xff
 8003c62:	041b      	lsls	r3, r3, #16
 8003c64:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c66:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c7e:	0d51      	lsrs	r1, r2, #21
 8003c80:	2280      	movs	r2, #128	@ 0x80
 8003c82:	00d2      	lsls	r2, r2, #3
 8003c84:	400a      	ands	r2, r1
 8003c86:	4907      	ldr	r1, [pc, #28]	@ (8003ca4 <I2C_TransferConfig+0x70>)
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	43d2      	mvns	r2, r2
 8003c8c:	401a      	ands	r2, r3
 8003c8e:	0011      	movs	r1, r2
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b007      	add	sp, #28
 8003ca0:	bd90      	pop	{r4, r7, pc}
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	03ff63ff 	.word	0x03ff63ff

08003ca8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2241      	movs	r2, #65	@ 0x41
 8003cb6:	5c9b      	ldrb	r3, [r3, r2]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d138      	bne.n	8003d30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2240      	movs	r2, #64	@ 0x40
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e032      	b.n	8003d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2240      	movs	r2, #64	@ 0x40
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2241      	movs	r2, #65	@ 0x41
 8003cd8:	2124      	movs	r1, #36	@ 0x24
 8003cda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	438a      	bics	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4911      	ldr	r1, [pc, #68]	@ (8003d3c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6819      	ldr	r1, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2101      	movs	r1, #1
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2241      	movs	r2, #65	@ 0x41
 8003d20:	2120      	movs	r1, #32
 8003d22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2240      	movs	r2, #64	@ 0x40
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b002      	add	sp, #8
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	ffffefff 	.word	0xffffefff

08003d40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2241      	movs	r2, #65	@ 0x41
 8003d4e:	5c9b      	ldrb	r3, [r3, r2]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d139      	bne.n	8003dca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2240      	movs	r2, #64	@ 0x40
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e033      	b.n	8003dcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2240      	movs	r2, #64	@ 0x40
 8003d68:	2101      	movs	r1, #1
 8003d6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2241      	movs	r2, #65	@ 0x41
 8003d70:	2124      	movs	r1, #36	@ 0x24
 8003d72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2101      	movs	r1, #1
 8003d80:	438a      	bics	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a11      	ldr	r2, [pc, #68]	@ (8003dd4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2241      	movs	r2, #65	@ 0x41
 8003dba:	2120      	movs	r1, #32
 8003dbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2240      	movs	r2, #64	@ 0x40
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e000      	b.n	8003dcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
  }
}
 8003dcc:	0018      	movs	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b004      	add	sp, #16
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	fffff0ff 	.word	0xfffff0ff

08003dd8 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e1d0      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2201      	movs	r2, #1
 8003df0:	4013      	ands	r3, r2
 8003df2:	d100      	bne.n	8003df6 <HAL_RCC_OscConfig+0x1e>
 8003df4:	e069      	b.n	8003eca <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df6:	4bc8      	ldr	r3, [pc, #800]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2238      	movs	r2, #56	@ 0x38
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d105      	bne.n	8003e12 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d15d      	bne.n	8003eca <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e1bc      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	2380      	movs	r3, #128	@ 0x80
 8003e18:	025b      	lsls	r3, r3, #9
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_OscConfig+0x56>
 8003e1e:	4bbe      	ldr	r3, [pc, #760]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4bbd      	ldr	r3, [pc, #756]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e24:	2180      	movs	r1, #128	@ 0x80
 8003e26:	0249      	lsls	r1, r1, #9
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e020      	b.n	8003e70 <HAL_RCC_OscConfig+0x98>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	23a0      	movs	r3, #160	@ 0xa0
 8003e34:	02db      	lsls	r3, r3, #11
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d10e      	bne.n	8003e58 <HAL_RCC_OscConfig+0x80>
 8003e3a:	4bb7      	ldr	r3, [pc, #732]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4bb6      	ldr	r3, [pc, #728]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e40:	2180      	movs	r1, #128	@ 0x80
 8003e42:	02c9      	lsls	r1, r1, #11
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	4bb3      	ldr	r3, [pc, #716]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4bb2      	ldr	r3, [pc, #712]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e4e:	2180      	movs	r1, #128	@ 0x80
 8003e50:	0249      	lsls	r1, r1, #9
 8003e52:	430a      	orrs	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0x98>
 8003e58:	4baf      	ldr	r3, [pc, #700]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4bae      	ldr	r3, [pc, #696]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e5e:	49af      	ldr	r1, [pc, #700]	@ (800411c <HAL_RCC_OscConfig+0x344>)
 8003e60:	400a      	ands	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	4bac      	ldr	r3, [pc, #688]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4bab      	ldr	r3, [pc, #684]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e6a:	49ad      	ldr	r1, [pc, #692]	@ (8004120 <HAL_RCC_OscConfig+0x348>)
 8003e6c:	400a      	ands	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d014      	beq.n	8003ea2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe fe6e 	bl	8002b58 <HAL_GetTick>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003e82:	f7fe fe69 	bl	8002b58 <HAL_GetTick>
 8003e86:	0002      	movs	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b64      	cmp	r3, #100	@ 0x64
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e17b      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e94:	4ba0      	ldr	r3, [pc, #640]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2380      	movs	r3, #128	@ 0x80
 8003e9a:	029b      	lsls	r3, r3, #10
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0xaa>
 8003ea0:	e013      	b.n	8003eca <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea2:	f7fe fe59 	bl	8002b58 <HAL_GetTick>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003eac:	f7fe fe54 	bl	8002b58 <HAL_GetTick>
 8003eb0:	0002      	movs	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	@ 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e166      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ebe:	4b96      	ldr	r3, [pc, #600]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	@ 0x80
 8003ec4:	029b      	lsls	r3, r3, #10
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d100      	bne.n	8003ed6 <HAL_RCC_OscConfig+0xfe>
 8003ed4:	e086      	b.n	8003fe4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ed6:	4b90      	ldr	r3, [pc, #576]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2238      	movs	r2, #56	@ 0x38
 8003edc:	4013      	ands	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d12f      	bne.n	8003f46 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e14c      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef2:	4b89      	ldr	r3, [pc, #548]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4a8b      	ldr	r2, [pc, #556]	@ (8004124 <HAL_RCC_OscConfig+0x34c>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	0019      	movs	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	021a      	lsls	r2, r3, #8
 8003f02:	4b85      	ldr	r3, [pc, #532]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003f04:	430a      	orrs	r2, r1
 8003f06:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d112      	bne.n	8003f34 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f0e:	4b82      	ldr	r3, [pc, #520]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a85      	ldr	r2, [pc, #532]	@ (8004128 <HAL_RCC_OscConfig+0x350>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	0019      	movs	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	4b7e      	ldr	r3, [pc, #504]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003f22:	4b7d      	ldr	r3, [pc, #500]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	0adb      	lsrs	r3, r3, #11
 8003f28:	2207      	movs	r2, #7
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	4a7f      	ldr	r2, [pc, #508]	@ (800412c <HAL_RCC_OscConfig+0x354>)
 8003f2e:	40da      	lsrs	r2, r3
 8003f30:	4b7f      	ldr	r3, [pc, #508]	@ (8004130 <HAL_RCC_OscConfig+0x358>)
 8003f32:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f34:	4b7f      	ldr	r3, [pc, #508]	@ (8004134 <HAL_RCC_OscConfig+0x35c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7fe fdb1 	bl	8002aa0 <HAL_InitTick>
 8003f3e:	1e03      	subs	r3, r0, #0
 8003f40:	d050      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e122      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d030      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f4e:	4b72      	ldr	r3, [pc, #456]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a75      	ldr	r2, [pc, #468]	@ (8004128 <HAL_RCC_OscConfig+0x350>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	0019      	movs	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	4b6e      	ldr	r3, [pc, #440]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8003f62:	4b6d      	ldr	r3, [pc, #436]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4b6c      	ldr	r3, [pc, #432]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003f68:	2180      	movs	r1, #128	@ 0x80
 8003f6a:	0049      	lsls	r1, r1, #1
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fe fdf2 	bl	8002b58 <HAL_GetTick>
 8003f74:	0003      	movs	r3, r0
 8003f76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f7a:	f7fe fded 	bl	8002b58 <HAL_GetTick>
 8003f7e:	0002      	movs	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e0ff      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f8c:	4b62      	ldr	r3, [pc, #392]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	2380      	movs	r3, #128	@ 0x80
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4013      	ands	r3, r2
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f98:	4b5f      	ldr	r3, [pc, #380]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a61      	ldr	r2, [pc, #388]	@ (8004124 <HAL_RCC_OscConfig+0x34c>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	021a      	lsls	r2, r3, #8
 8003fa8:	4b5b      	ldr	r3, [pc, #364]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	e019      	b.n	8003fe4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003fb0:	4b59      	ldr	r3, [pc, #356]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b58      	ldr	r3, [pc, #352]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003fb6:	4960      	ldr	r1, [pc, #384]	@ (8004138 <HAL_RCC_OscConfig+0x360>)
 8003fb8:	400a      	ands	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fdcc 	bl	8002b58 <HAL_GetTick>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003fc6:	f7fe fdc7 	bl	8002b58 <HAL_GetTick>
 8003fca:	0002      	movs	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e0d9      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	2380      	movs	r3, #128	@ 0x80
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d1f0      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2208      	movs	r2, #8
 8003fea:	4013      	ands	r3, r2
 8003fec:	d042      	beq.n	8004074 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003fee:	4b4a      	ldr	r3, [pc, #296]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2238      	movs	r2, #56	@ 0x38
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b18      	cmp	r3, #24
 8003ff8:	d105      	bne.n	8004006 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d138      	bne.n	8004074 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e0c2      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d019      	beq.n	8004042 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800400e:	4b42      	ldr	r3, [pc, #264]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8004010:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004012:	4b41      	ldr	r3, [pc, #260]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8004014:	2101      	movs	r1, #1
 8004016:	430a      	orrs	r2, r1
 8004018:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7fe fd9d 	bl	8002b58 <HAL_GetTick>
 800401e:	0003      	movs	r3, r0
 8004020:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004024:	f7fe fd98 	bl	8002b58 <HAL_GetTick>
 8004028:	0002      	movs	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e0aa      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004036:	4b38      	ldr	r3, [pc, #224]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8004038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403a:	2202      	movs	r2, #2
 800403c:	4013      	ands	r3, r2
 800403e:	d0f1      	beq.n	8004024 <HAL_RCC_OscConfig+0x24c>
 8004040:	e018      	b.n	8004074 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004042:	4b35      	ldr	r3, [pc, #212]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8004044:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004046:	4b34      	ldr	r3, [pc, #208]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 8004048:	2101      	movs	r1, #1
 800404a:	438a      	bics	r2, r1
 800404c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fe fd83 	bl	8002b58 <HAL_GetTick>
 8004052:	0003      	movs	r3, r0
 8004054:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004058:	f7fe fd7e 	bl	8002b58 <HAL_GetTick>
 800405c:	0002      	movs	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e090      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800406a:	4b2b      	ldr	r3, [pc, #172]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 800406c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406e:	2202      	movs	r2, #2
 8004070:	4013      	ands	r3, r2
 8004072:	d1f1      	bne.n	8004058 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2204      	movs	r2, #4
 800407a:	4013      	ands	r3, r2
 800407c:	d100      	bne.n	8004080 <HAL_RCC_OscConfig+0x2a8>
 800407e:	e084      	b.n	800418a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004080:	230f      	movs	r3, #15
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004088:	4b23      	ldr	r3, [pc, #140]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2238      	movs	r2, #56	@ 0x38
 800408e:	4013      	ands	r3, r2
 8004090:	2b20      	cmp	r3, #32
 8004092:	d106      	bne.n	80040a2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d000      	beq.n	800409e <HAL_RCC_OscConfig+0x2c6>
 800409c:	e075      	b.n	800418a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e074      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d106      	bne.n	80040b8 <HAL_RCC_OscConfig+0x2e0>
 80040aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 80040ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 80040b0:	2101      	movs	r1, #1
 80040b2:	430a      	orrs	r2, r1
 80040b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040b6:	e01c      	b.n	80040f2 <HAL_RCC_OscConfig+0x31a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b05      	cmp	r3, #5
 80040be:	d10c      	bne.n	80040da <HAL_RCC_OscConfig+0x302>
 80040c0:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 80040c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040c4:	4b14      	ldr	r3, [pc, #80]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 80040c6:	2104      	movs	r1, #4
 80040c8:	430a      	orrs	r2, r1
 80040ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040cc:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 80040ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 80040d2:	2101      	movs	r1, #1
 80040d4:	430a      	orrs	r2, r1
 80040d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040d8:	e00b      	b.n	80040f2 <HAL_RCC_OscConfig+0x31a>
 80040da:	4b0f      	ldr	r3, [pc, #60]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 80040dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040de:	4b0e      	ldr	r3, [pc, #56]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 80040e0:	2101      	movs	r1, #1
 80040e2:	438a      	bics	r2, r1
 80040e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 80040e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCC_OscConfig+0x340>)
 80040ec:	2104      	movs	r1, #4
 80040ee:	438a      	bics	r2, r1
 80040f0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d028      	beq.n	800414c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fe fd2d 	bl	8002b58 <HAL_GetTick>
 80040fe:	0003      	movs	r3, r0
 8004100:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004102:	e01d      	b.n	8004140 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004104:	f7fe fd28 	bl	8002b58 <HAL_GetTick>
 8004108:	0002      	movs	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	4a0b      	ldr	r2, [pc, #44]	@ (800413c <HAL_RCC_OscConfig+0x364>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d915      	bls.n	8004140 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e039      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
 8004118:	40021000 	.word	0x40021000
 800411c:	fffeffff 	.word	0xfffeffff
 8004120:	fffbffff 	.word	0xfffbffff
 8004124:	ffff80ff 	.word	0xffff80ff
 8004128:	ffffc7ff 	.word	0xffffc7ff
 800412c:	02dc6c00 	.word	0x02dc6c00
 8004130:	20000000 	.word	0x20000000
 8004134:	20000004 	.word	0x20000004
 8004138:	fffffeff 	.word	0xfffffeff
 800413c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004140:	4b14      	ldr	r3, [pc, #80]	@ (8004194 <HAL_RCC_OscConfig+0x3bc>)
 8004142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004144:	2202      	movs	r2, #2
 8004146:	4013      	ands	r3, r2
 8004148:	d0dc      	beq.n	8004104 <HAL_RCC_OscConfig+0x32c>
 800414a:	e013      	b.n	8004174 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fe fd04 	bl	8002b58 <HAL_GetTick>
 8004150:	0003      	movs	r3, r0
 8004152:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004154:	e009      	b.n	800416a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004156:	f7fe fcff 	bl	8002b58 <HAL_GetTick>
 800415a:	0002      	movs	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	4a0d      	ldr	r2, [pc, #52]	@ (8004198 <HAL_RCC_OscConfig+0x3c0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e010      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800416a:	4b0a      	ldr	r3, [pc, #40]	@ (8004194 <HAL_RCC_OscConfig+0x3bc>)
 800416c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416e:	2202      	movs	r2, #2
 8004170:	4013      	ands	r3, r2
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004174:	230f      	movs	r3, #15
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d105      	bne.n	800418a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800417e:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <HAL_RCC_OscConfig+0x3bc>)
 8004180:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004182:	4b04      	ldr	r3, [pc, #16]	@ (8004194 <HAL_RCC_OscConfig+0x3bc>)
 8004184:	4905      	ldr	r1, [pc, #20]	@ (800419c <HAL_RCC_OscConfig+0x3c4>)
 8004186:	400a      	ands	r2, r1
 8004188:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b006      	add	sp, #24
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	00001388 	.word	0x00001388
 800419c:	efffffff 	.word	0xefffffff

080041a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0df      	b.n	8004374 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041b4:	4b71      	ldr	r3, [pc, #452]	@ (800437c <HAL_RCC_ClockConfig+0x1dc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2207      	movs	r2, #7
 80041ba:	4013      	ands	r3, r2
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d91e      	bls.n	8004200 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b6e      	ldr	r3, [pc, #440]	@ (800437c <HAL_RCC_ClockConfig+0x1dc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2207      	movs	r2, #7
 80041c8:	4393      	bics	r3, r2
 80041ca:	0019      	movs	r1, r3
 80041cc:	4b6b      	ldr	r3, [pc, #428]	@ (800437c <HAL_RCC_ClockConfig+0x1dc>)
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041d4:	f7fe fcc0 	bl	8002b58 <HAL_GetTick>
 80041d8:	0003      	movs	r3, r0
 80041da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041dc:	e009      	b.n	80041f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80041de:	f7fe fcbb 	bl	8002b58 <HAL_GetTick>
 80041e2:	0002      	movs	r2, r0
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	4a65      	ldr	r2, [pc, #404]	@ (8004380 <HAL_RCC_ClockConfig+0x1e0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e0c0      	b.n	8004374 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041f2:	4b62      	ldr	r3, [pc, #392]	@ (800437c <HAL_RCC_ClockConfig+0x1dc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2207      	movs	r2, #7
 80041f8:	4013      	ands	r3, r2
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d1ee      	bne.n	80041de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2202      	movs	r2, #2
 8004206:	4013      	ands	r3, r2
 8004208:	d017      	beq.n	800423a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2204      	movs	r2, #4
 8004210:	4013      	ands	r3, r2
 8004212:	d008      	beq.n	8004226 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004214:	4b5b      	ldr	r3, [pc, #364]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4a5b      	ldr	r2, [pc, #364]	@ (8004388 <HAL_RCC_ClockConfig+0x1e8>)
 800421a:	401a      	ands	r2, r3
 800421c:	4b59      	ldr	r3, [pc, #356]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 800421e:	21b0      	movs	r1, #176	@ 0xb0
 8004220:	0109      	lsls	r1, r1, #4
 8004222:	430a      	orrs	r2, r1
 8004224:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004226:	4b57      	ldr	r3, [pc, #348]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	4a58      	ldr	r2, [pc, #352]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 800422c:	4013      	ands	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	4b53      	ldr	r3, [pc, #332]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2201      	movs	r2, #1
 8004240:	4013      	ands	r3, r2
 8004242:	d04b      	beq.n	80042dc <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800424c:	4b4d      	ldr	r3, [pc, #308]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	2380      	movs	r3, #128	@ 0x80
 8004252:	029b      	lsls	r3, r3, #10
 8004254:	4013      	ands	r3, r2
 8004256:	d11f      	bne.n	8004298 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e08b      	b.n	8004374 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d107      	bne.n	8004274 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004264:	4b47      	ldr	r3, [pc, #284]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	2380      	movs	r3, #128	@ 0x80
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4013      	ands	r3, r2
 800426e:	d113      	bne.n	8004298 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e07f      	b.n	8004374 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d106      	bne.n	800428a <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800427c:	4b41      	ldr	r3, [pc, #260]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 800427e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004280:	2202      	movs	r2, #2
 8004282:	4013      	ands	r3, r2
 8004284:	d108      	bne.n	8004298 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e074      	b.n	8004374 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800428a:	4b3e      	ldr	r3, [pc, #248]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 800428c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428e:	2202      	movs	r2, #2
 8004290:	4013      	ands	r3, r2
 8004292:	d101      	bne.n	8004298 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e06d      	b.n	8004374 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004298:	4b3a      	ldr	r3, [pc, #232]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2207      	movs	r2, #7
 800429e:	4393      	bics	r3, r2
 80042a0:	0019      	movs	r1, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	4b37      	ldr	r3, [pc, #220]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 80042a8:	430a      	orrs	r2, r1
 80042aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ac:	f7fe fc54 	bl	8002b58 <HAL_GetTick>
 80042b0:	0003      	movs	r3, r0
 80042b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b4:	e009      	b.n	80042ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80042b6:	f7fe fc4f 	bl	8002b58 <HAL_GetTick>
 80042ba:	0002      	movs	r2, r0
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004380 <HAL_RCC_ClockConfig+0x1e0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e054      	b.n	8004374 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2238      	movs	r2, #56	@ 0x38
 80042d0:	401a      	ands	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	429a      	cmp	r2, r3
 80042da:	d1ec      	bne.n	80042b6 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042dc:	4b27      	ldr	r3, [pc, #156]	@ (800437c <HAL_RCC_ClockConfig+0x1dc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2207      	movs	r2, #7
 80042e2:	4013      	ands	r3, r2
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d21e      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b24      	ldr	r3, [pc, #144]	@ (800437c <HAL_RCC_ClockConfig+0x1dc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2207      	movs	r2, #7
 80042f0:	4393      	bics	r3, r2
 80042f2:	0019      	movs	r1, r3
 80042f4:	4b21      	ldr	r3, [pc, #132]	@ (800437c <HAL_RCC_ClockConfig+0x1dc>)
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042fc:	f7fe fc2c 	bl	8002b58 <HAL_GetTick>
 8004300:	0003      	movs	r3, r0
 8004302:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004304:	e009      	b.n	800431a <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004306:	f7fe fc27 	bl	8002b58 <HAL_GetTick>
 800430a:	0002      	movs	r2, r0
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	4a1b      	ldr	r2, [pc, #108]	@ (8004380 <HAL_RCC_ClockConfig+0x1e0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e02c      	b.n	8004374 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800431a:	4b18      	ldr	r3, [pc, #96]	@ (800437c <HAL_RCC_ClockConfig+0x1dc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2207      	movs	r2, #7
 8004320:	4013      	ands	r3, r2
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d1ee      	bne.n	8004306 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2204      	movs	r2, #4
 800432e:	4013      	ands	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004332:	4b14      	ldr	r3, [pc, #80]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4a16      	ldr	r2, [pc, #88]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004338:	4013      	ands	r3, r2
 800433a:	0019      	movs	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 8004342:	430a      	orrs	r2, r1
 8004344:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004346:	f000 f82b 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800434a:	0001      	movs	r1, r0
 800434c:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <HAL_RCC_ClockConfig+0x1e4>)
 800434e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	220f      	movs	r2, #15
 8004354:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004356:	4b0f      	ldr	r3, [pc, #60]	@ (8004394 <HAL_RCC_ClockConfig+0x1f4>)
 8004358:	0092      	lsls	r2, r2, #2
 800435a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800435c:	221f      	movs	r2, #31
 800435e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004360:	000a      	movs	r2, r1
 8004362:	40da      	lsrs	r2, r3
 8004364:	4b0c      	ldr	r3, [pc, #48]	@ (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 8004366:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004368:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <HAL_RCC_ClockConfig+0x1fc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0018      	movs	r0, r3
 800436e:	f7fe fb97 	bl	8002aa0 <HAL_InitTick>
 8004372:	0003      	movs	r3, r0
}
 8004374:	0018      	movs	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	b004      	add	sp, #16
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40022000 	.word	0x40022000
 8004380:	00001388 	.word	0x00001388
 8004384:	40021000 	.word	0x40021000
 8004388:	ffff84ff 	.word	0xffff84ff
 800438c:	fffff0ff 	.word	0xfffff0ff
 8004390:	ffff8fff 	.word	0xffff8fff
 8004394:	080060c8 	.word	0x080060c8
 8004398:	20000000 	.word	0x20000000
 800439c:	20000004 	.word	0x20000004

080043a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x78>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2238      	movs	r2, #56	@ 0x38
 80043ac:	4013      	ands	r3, r2
 80043ae:	d10f      	bne.n	80043d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80043b0:	4b19      	ldr	r3, [pc, #100]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x78>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	0adb      	lsrs	r3, r3, #11
 80043b6:	2207      	movs	r2, #7
 80043b8:	4013      	ands	r3, r2
 80043ba:	2201      	movs	r2, #1
 80043bc:	409a      	lsls	r2, r3
 80043be:	0013      	movs	r3, r2
 80043c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80043c2:	6839      	ldr	r1, [r7, #0]
 80043c4:	4815      	ldr	r0, [pc, #84]	@ (800441c <HAL_RCC_GetSysClockFreq+0x7c>)
 80043c6:	f7fb feb1 	bl	800012c <__udivsi3>
 80043ca:	0003      	movs	r3, r0
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	e01e      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043d0:	4b11      	ldr	r3, [pc, #68]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x78>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2238      	movs	r2, #56	@ 0x38
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d102      	bne.n	80043e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043dc:	4b10      	ldr	r3, [pc, #64]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x80>)
 80043de:	607b      	str	r3, [r7, #4]
 80043e0:	e015      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80043e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x78>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2238      	movs	r2, #56	@ 0x38
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d103      	bne.n	80043f6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80043ee:	2380      	movs	r3, #128	@ 0x80
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	e00b      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80043f6:	4b08      	ldr	r3, [pc, #32]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x78>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2238      	movs	r2, #56	@ 0x38
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b18      	cmp	r3, #24
 8004400:	d103      	bne.n	800440a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004402:	23fa      	movs	r3, #250	@ 0xfa
 8004404:	01db      	lsls	r3, r3, #7
 8004406:	607b      	str	r3, [r7, #4]
 8004408:	e001      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800440e:	687b      	ldr	r3, [r7, #4]
}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b002      	add	sp, #8
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	02dc6c00 	.word	0x02dc6c00
 8004420:	007a1200 	.word	0x007a1200

08004424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004428:	f7ff ffba 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800442c:	0001      	movs	r1, r0
 800442e:	4b09      	ldr	r3, [pc, #36]	@ (8004454 <HAL_RCC_GetHCLKFreq+0x30>)
 8004430:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	220f      	movs	r2, #15
 8004436:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004438:	4b07      	ldr	r3, [pc, #28]	@ (8004458 <HAL_RCC_GetHCLKFreq+0x34>)
 800443a:	0092      	lsls	r2, r2, #2
 800443c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800443e:	221f      	movs	r2, #31
 8004440:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004442:	000a      	movs	r2, r1
 8004444:	40da      	lsrs	r2, r3
 8004446:	4b05      	ldr	r3, [pc, #20]	@ (800445c <HAL_RCC_GetHCLKFreq+0x38>)
 8004448:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800444a:	4b04      	ldr	r3, [pc, #16]	@ (800445c <HAL_RCC_GetHCLKFreq+0x38>)
 800444c:	681b      	ldr	r3, [r3, #0]
}
 800444e:	0018      	movs	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	080060c8 	.word	0x080060c8
 800445c:	20000000 	.word	0x20000000

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8004464:	f7ff ffde 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004468:	0001      	movs	r1, r0
 800446a:	4b07      	ldr	r3, [pc, #28]	@ (8004488 <HAL_RCC_GetPCLK1Freq+0x28>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	0b1b      	lsrs	r3, r3, #12
 8004470:	2207      	movs	r2, #7
 8004472:	401a      	ands	r2, r3
 8004474:	4b05      	ldr	r3, [pc, #20]	@ (800448c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004476:	0092      	lsls	r2, r2, #2
 8004478:	58d3      	ldr	r3, [r2, r3]
 800447a:	221f      	movs	r2, #31
 800447c:	4013      	ands	r3, r2
 800447e:	40d9      	lsrs	r1, r3
 8004480:	000b      	movs	r3, r1
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	08006108 	.word	0x08006108

08004490 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004498:	2313      	movs	r3, #19
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044a0:	2312      	movs	r3, #18
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2240      	movs	r2, #64	@ 0x40
 80044ae:	4013      	ands	r3, r2
 80044b0:	d100      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80044b2:	e079      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b4:	2011      	movs	r0, #17
 80044b6:	183b      	adds	r3, r7, r0
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044bc:	4b63      	ldr	r3, [pc, #396]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044c0:	2380      	movs	r3, #128	@ 0x80
 80044c2:	055b      	lsls	r3, r3, #21
 80044c4:	4013      	ands	r3, r2
 80044c6:	d110      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c8:	4b60      	ldr	r3, [pc, #384]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044cc:	4b5f      	ldr	r3, [pc, #380]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ce:	2180      	movs	r1, #128	@ 0x80
 80044d0:	0549      	lsls	r1, r1, #21
 80044d2:	430a      	orrs	r2, r1
 80044d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044d6:	4b5d      	ldr	r3, [pc, #372]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	055b      	lsls	r3, r3, #21
 80044de:	4013      	ands	r3, r2
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e4:	183b      	adds	r3, r7, r0
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80044ea:	4b58      	ldr	r3, [pc, #352]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044ee:	23c0      	movs	r3, #192	@ 0xc0
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4013      	ands	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d019      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	429a      	cmp	r2, r3
 8004504:	d014      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004506:	4b51      	ldr	r3, [pc, #324]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450a:	4a51      	ldr	r2, [pc, #324]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800450c:	4013      	ands	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004510:	4b4e      	ldr	r3, [pc, #312]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004512:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004514:	4b4d      	ldr	r3, [pc, #308]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004516:	2180      	movs	r1, #128	@ 0x80
 8004518:	0249      	lsls	r1, r1, #9
 800451a:	430a      	orrs	r2, r1
 800451c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800451e:	4b4b      	ldr	r3, [pc, #300]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004520:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004522:	4b4a      	ldr	r3, [pc, #296]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004524:	494b      	ldr	r1, [pc, #300]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004526:	400a      	ands	r2, r1
 8004528:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800452a:	4b48      	ldr	r3, [pc, #288]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2201      	movs	r2, #1
 8004534:	4013      	ands	r3, r2
 8004536:	d016      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fe fb0e 	bl	8002b58 <HAL_GetTick>
 800453c:	0003      	movs	r3, r0
 800453e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004540:	e00c      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004542:	f7fe fb09 	bl	8002b58 <HAL_GetTick>
 8004546:	0002      	movs	r2, r0
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	4a42      	ldr	r2, [pc, #264]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d904      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8004552:	2313      	movs	r3, #19
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	2203      	movs	r2, #3
 8004558:	701a      	strb	r2, [r3, #0]
          break;
 800455a:	e004      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800455c:	4b3b      	ldr	r3, [pc, #236]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800455e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004560:	2202      	movs	r2, #2
 8004562:	4013      	ands	r3, r2
 8004564:	d0ed      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8004566:	2313      	movs	r3, #19
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004570:	4b36      	ldr	r3, [pc, #216]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004574:	4a36      	ldr	r2, [pc, #216]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004576:	4013      	ands	r3, r2
 8004578:	0019      	movs	r1, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	4b33      	ldr	r3, [pc, #204]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004580:	430a      	orrs	r2, r1
 8004582:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004584:	e005      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004586:	2312      	movs	r3, #18
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	2213      	movs	r2, #19
 800458c:	18ba      	adds	r2, r7, r2
 800458e:	7812      	ldrb	r2, [r2, #0]
 8004590:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004592:	2311      	movs	r3, #17
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d105      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459c:	4b2b      	ldr	r3, [pc, #172]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800459e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045a0:	4b2a      	ldr	r3, [pc, #168]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045a2:	492e      	ldr	r1, [pc, #184]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045a4:	400a      	ands	r2, r1
 80045a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2201      	movs	r2, #1
 80045ae:	4013      	ands	r3, r2
 80045b0:	d009      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b2:	4b26      	ldr	r3, [pc, #152]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b6:	2203      	movs	r2, #3
 80045b8:	4393      	bics	r3, r2
 80045ba:	0019      	movs	r1, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	4b22      	ldr	r3, [pc, #136]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045c2:	430a      	orrs	r2, r1
 80045c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2202      	movs	r2, #2
 80045cc:	4013      	ands	r3, r2
 80045ce:	d009      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045d0:	4b1e      	ldr	r3, [pc, #120]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d4:	4a22      	ldr	r2, [pc, #136]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	0019      	movs	r1, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045e0:	430a      	orrs	r2, r1
 80045e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2220      	movs	r2, #32
 80045ea:	4013      	ands	r3, r2
 80045ec:	d008      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045ee:	4b17      	ldr	r3, [pc, #92]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	0899      	lsrs	r1, r3, #2
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	4b14      	ldr	r3, [pc, #80]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045fc:	430a      	orrs	r2, r1
 80045fe:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2204      	movs	r2, #4
 8004606:	4013      	ands	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800460a:	4b10      	ldr	r3, [pc, #64]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	4a15      	ldr	r2, [pc, #84]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004610:	4013      	ands	r3, r2
 8004612:	0019      	movs	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	4b0c      	ldr	r3, [pc, #48]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800461a:	430a      	orrs	r2, r1
 800461c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2280      	movs	r2, #128	@ 0x80
 8004624:	4013      	ands	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004628:	4b08      	ldr	r3, [pc, #32]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	22e0      	movs	r2, #224	@ 0xe0
 800462e:	4393      	bics	r3, r2
 8004630:	0019      	movs	r1, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	4b05      	ldr	r3, [pc, #20]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004638:	430a      	orrs	r2, r1
 800463a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800463c:	2312      	movs	r3, #18
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	781b      	ldrb	r3, [r3, #0]
}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b006      	add	sp, #24
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			@ (mov r8, r8)
 800464c:	40021000 	.word	0x40021000
 8004650:	fffffcff 	.word	0xfffffcff
 8004654:	fffeffff 	.word	0xfffeffff
 8004658:	00001388 	.word	0x00001388
 800465c:	efffffff 	.word	0xefffffff
 8004660:	ffffcfff 	.word	0xffffcfff
 8004664:	ffff3fff 	.word	0xffff3fff

08004668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e04a      	b.n	8004710 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	223d      	movs	r2, #61	@ 0x3d
 800467e:	5c9b      	ldrb	r3, [r3, r2]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d107      	bne.n	8004696 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	223c      	movs	r2, #60	@ 0x3c
 800468a:	2100      	movs	r1, #0
 800468c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f7fe f8ed 	bl	8002870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	223d      	movs	r2, #61	@ 0x3d
 800469a:	2102      	movs	r1, #2
 800469c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3304      	adds	r3, #4
 80046a6:	0019      	movs	r1, r3
 80046a8:	0010      	movs	r0, r2
 80046aa:	f000 f9d9 	bl	8004a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2248      	movs	r2, #72	@ 0x48
 80046b2:	2101      	movs	r1, #1
 80046b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	223e      	movs	r2, #62	@ 0x3e
 80046ba:	2101      	movs	r1, #1
 80046bc:	5499      	strb	r1, [r3, r2]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	223f      	movs	r2, #63	@ 0x3f
 80046c2:	2101      	movs	r1, #1
 80046c4:	5499      	strb	r1, [r3, r2]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2240      	movs	r2, #64	@ 0x40
 80046ca:	2101      	movs	r1, #1
 80046cc:	5499      	strb	r1, [r3, r2]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2241      	movs	r2, #65	@ 0x41
 80046d2:	2101      	movs	r1, #1
 80046d4:	5499      	strb	r1, [r3, r2]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2242      	movs	r2, #66	@ 0x42
 80046da:	2101      	movs	r1, #1
 80046dc:	5499      	strb	r1, [r3, r2]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2243      	movs	r2, #67	@ 0x43
 80046e2:	2101      	movs	r1, #1
 80046e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2244      	movs	r2, #68	@ 0x44
 80046ea:	2101      	movs	r1, #1
 80046ec:	5499      	strb	r1, [r3, r2]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2245      	movs	r2, #69	@ 0x45
 80046f2:	2101      	movs	r1, #1
 80046f4:	5499      	strb	r1, [r3, r2]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2246      	movs	r2, #70	@ 0x46
 80046fa:	2101      	movs	r1, #1
 80046fc:	5499      	strb	r1, [r3, r2]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2247      	movs	r2, #71	@ 0x47
 8004702:	2101      	movs	r1, #1
 8004704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	223d      	movs	r2, #61	@ 0x3d
 800470a:	2101      	movs	r1, #1
 800470c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	0018      	movs	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	b002      	add	sp, #8
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	223d      	movs	r2, #61	@ 0x3d
 8004724:	5c9b      	ldrb	r3, [r3, r2]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	d001      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e037      	b.n	80047a0 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	223d      	movs	r2, #61	@ 0x3d
 8004734:	2102      	movs	r1, #2
 8004736:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2101      	movs	r1, #1
 8004744:	430a      	orrs	r2, r1
 8004746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a16      	ldr	r2, [pc, #88]	@ (80047a8 <HAL_TIM_Base_Start_IT+0x90>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x44>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a15      	ldr	r2, [pc, #84]	@ (80047ac <HAL_TIM_Base_Start_IT+0x94>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d116      	bne.n	800478a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	4a13      	ldr	r2, [pc, #76]	@ (80047b0 <HAL_TIM_Base_Start_IT+0x98>)
 8004764:	4013      	ands	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b06      	cmp	r3, #6
 800476c:	d016      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x84>
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	2380      	movs	r3, #128	@ 0x80
 8004772:	025b      	lsls	r3, r3, #9
 8004774:	429a      	cmp	r2, r3
 8004776:	d011      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2101      	movs	r1, #1
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004788:	e008      	b.n	800479c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2101      	movs	r1, #1
 8004796:	430a      	orrs	r2, r1
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e000      	b.n	800479e <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	0018      	movs	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b004      	add	sp, #16
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40012c00 	.word	0x40012c00
 80047ac:	40000400 	.word	0x40000400
 80047b0:	00010007 	.word	0x00010007

080047b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2101      	movs	r1, #1
 80047c8:	438a      	bics	r2, r1
 80047ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004808 <HAL_TIM_Base_Stop_IT+0x54>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	d10d      	bne.n	80047f4 <HAL_TIM_Base_Stop_IT+0x40>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	4a0b      	ldr	r2, [pc, #44]	@ (800480c <HAL_TIM_Base_Stop_IT+0x58>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	d107      	bne.n	80047f4 <HAL_TIM_Base_Stop_IT+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2101      	movs	r1, #1
 80047f0:	438a      	bics	r2, r1
 80047f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	223d      	movs	r2, #61	@ 0x3d
 80047f8:	2101      	movs	r1, #1
 80047fa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b002      	add	sp, #8
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	00001111 	.word	0x00001111
 800480c:	00000444 	.word	0x00000444

08004810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2202      	movs	r2, #2
 800482c:	4013      	ands	r3, r2
 800482e:	d021      	beq.n	8004874 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2202      	movs	r2, #2
 8004834:	4013      	ands	r3, r2
 8004836:	d01d      	beq.n	8004874 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2203      	movs	r2, #3
 800483e:	4252      	negs	r2, r2
 8004840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2203      	movs	r2, #3
 8004850:	4013      	ands	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	0018      	movs	r0, r3
 8004858:	f000 f8ea 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 800485c:	e007      	b.n	800486e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0018      	movs	r0, r3
 8004862:	f000 f8dd 	bl	8004a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0018      	movs	r0, r3
 800486a:	f000 f8e9 	bl	8004a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2204      	movs	r2, #4
 8004878:	4013      	ands	r3, r2
 800487a:	d022      	beq.n	80048c2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2204      	movs	r2, #4
 8004880:	4013      	ands	r3, r2
 8004882:	d01e      	beq.n	80048c2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2205      	movs	r2, #5
 800488a:	4252      	negs	r2, r2
 800488c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	23c0      	movs	r3, #192	@ 0xc0
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4013      	ands	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f000 f8c3 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 80048aa:	e007      	b.n	80048bc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	0018      	movs	r0, r3
 80048b0:	f000 f8b6 	bl	8004a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	0018      	movs	r0, r3
 80048b8:	f000 f8c2 	bl	8004a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2208      	movs	r2, #8
 80048c6:	4013      	ands	r3, r2
 80048c8:	d021      	beq.n	800490e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2208      	movs	r2, #8
 80048ce:	4013      	ands	r3, r2
 80048d0:	d01d      	beq.n	800490e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2209      	movs	r2, #9
 80048d8:	4252      	negs	r2, r2
 80048da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2204      	movs	r2, #4
 80048e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	2203      	movs	r2, #3
 80048ea:	4013      	ands	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	0018      	movs	r0, r3
 80048f2:	f000 f89d 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 80048f6:	e007      	b.n	8004908 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	0018      	movs	r0, r3
 80048fc:	f000 f890 	bl	8004a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	0018      	movs	r0, r3
 8004904:	f000 f89c 	bl	8004a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2210      	movs	r2, #16
 8004912:	4013      	ands	r3, r2
 8004914:	d022      	beq.n	800495c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2210      	movs	r2, #16
 800491a:	4013      	ands	r3, r2
 800491c:	d01e      	beq.n	800495c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2211      	movs	r2, #17
 8004924:	4252      	negs	r2, r2
 8004926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2208      	movs	r2, #8
 800492c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	23c0      	movs	r3, #192	@ 0xc0
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4013      	ands	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	0018      	movs	r0, r3
 8004940:	f000 f876 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 8004944:	e007      	b.n	8004956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	0018      	movs	r0, r3
 800494a:	f000 f869 	bl	8004a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0018      	movs	r0, r3
 8004952:	f000 f875 	bl	8004a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2201      	movs	r2, #1
 8004960:	4013      	ands	r3, r2
 8004962:	d00c      	beq.n	800497e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	4013      	ands	r3, r2
 800496a:	d008      	beq.n	800497e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2202      	movs	r2, #2
 8004972:	4252      	negs	r2, r2
 8004974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f7fd fe6f 	bl	800265c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2280      	movs	r2, #128	@ 0x80
 8004982:	4013      	ands	r3, r2
 8004984:	d104      	bne.n	8004990 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	2380      	movs	r3, #128	@ 0x80
 800498a:	019b      	lsls	r3, r3, #6
 800498c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800498e:	d00b      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2280      	movs	r2, #128	@ 0x80
 8004994:	4013      	ands	r3, r2
 8004996:	d007      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1e      	ldr	r2, [pc, #120]	@ (8004a18 <HAL_TIM_IRQHandler+0x208>)
 800499e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	0018      	movs	r0, r3
 80049a4:	f000 f8d6 	bl	8004b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	2380      	movs	r3, #128	@ 0x80
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	4013      	ands	r3, r2
 80049b0:	d00b      	beq.n	80049ca <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2280      	movs	r2, #128	@ 0x80
 80049b6:	4013      	ands	r3, r2
 80049b8:	d007      	beq.n	80049ca <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a17      	ldr	r2, [pc, #92]	@ (8004a1c <HAL_TIM_IRQHandler+0x20c>)
 80049c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f000 f8cd 	bl	8004b64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2240      	movs	r2, #64	@ 0x40
 80049ce:	4013      	ands	r3, r2
 80049d0:	d00c      	beq.n	80049ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2240      	movs	r2, #64	@ 0x40
 80049d6:	4013      	ands	r3, r2
 80049d8:	d008      	beq.n	80049ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2241      	movs	r2, #65	@ 0x41
 80049e0:	4252      	negs	r2, r2
 80049e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	0018      	movs	r0, r3
 80049e8:	f000 f832 	bl	8004a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2220      	movs	r2, #32
 80049f0:	4013      	ands	r3, r2
 80049f2:	d00c      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	4013      	ands	r3, r2
 80049fa:	d008      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2221      	movs	r2, #33	@ 0x21
 8004a02:	4252      	negs	r2, r2
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 f89b 	bl	8004b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b004      	add	sp, #16
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	ffffdf7f 	.word	0xffffdf7f
 8004a1c:	fffffeff 	.word	0xfffffeff

08004a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a28:	46c0      	nop			@ (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b002      	add	sp, #8
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a48:	46c0      	nop			@ (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a58:	46c0      	nop			@ (mov r8, r8)
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b002      	add	sp, #8
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a2e      	ldr	r2, [pc, #184]	@ (8004b2c <TIM_Base_SetConfig+0xcc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0x20>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a2d      	ldr	r2, [pc, #180]	@ (8004b30 <TIM_Base_SetConfig+0xd0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d108      	bne.n	8004a92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2270      	movs	r2, #112	@ 0x70
 8004a84:	4393      	bics	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a25      	ldr	r2, [pc, #148]	@ (8004b2c <TIM_Base_SetConfig+0xcc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00f      	beq.n	8004aba <TIM_Base_SetConfig+0x5a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a24      	ldr	r2, [pc, #144]	@ (8004b30 <TIM_Base_SetConfig+0xd0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <TIM_Base_SetConfig+0x5a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	@ (8004b34 <TIM_Base_SetConfig+0xd4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <TIM_Base_SetConfig+0x5a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a22      	ldr	r2, [pc, #136]	@ (8004b38 <TIM_Base_SetConfig+0xd8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_Base_SetConfig+0x5a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a21      	ldr	r2, [pc, #132]	@ (8004b3c <TIM_Base_SetConfig+0xdc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d108      	bne.n	8004acc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4a20      	ldr	r2, [pc, #128]	@ (8004b40 <TIM_Base_SetConfig+0xe0>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2280      	movs	r2, #128	@ 0x80
 8004ad0:	4393      	bics	r3, r2
 8004ad2:	001a      	movs	r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a0f      	ldr	r2, [pc, #60]	@ (8004b2c <TIM_Base_SetConfig+0xcc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d007      	beq.n	8004b04 <TIM_Base_SetConfig+0xa4>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a10      	ldr	r2, [pc, #64]	@ (8004b38 <TIM_Base_SetConfig+0xd8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_Base_SetConfig+0xa4>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a0f      	ldr	r2, [pc, #60]	@ (8004b3c <TIM_Base_SetConfig+0xdc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d103      	bne.n	8004b0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2204      	movs	r2, #4
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	601a      	str	r2, [r3, #0]
}
 8004b24:	46c0      	nop			@ (mov r8, r8)
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b004      	add	sp, #16
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40002000 	.word	0x40002000
 8004b38:	40014400 	.word	0x40014400
 8004b3c:	40014800 	.word	0x40014800
 8004b40:	fffffcff 	.word	0xfffffcff

08004b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b4c:	46c0      	nop			@ (mov r8, r8)
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b5c:	46c0      	nop			@ (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b002      	add	sp, #8
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b6c:	46c0      	nop			@ (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b002      	add	sp, #8
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e046      	b.n	8004c14 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2288      	movs	r2, #136	@ 0x88
 8004b8a:	589b      	ldr	r3, [r3, r2]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2284      	movs	r2, #132	@ 0x84
 8004b94:	2100      	movs	r1, #0
 8004b96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f7fd fede 	bl	800295c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2288      	movs	r2, #136	@ 0x88
 8004ba4:	2124      	movs	r1, #36	@ 0x24
 8004ba6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	438a      	bics	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f000 fa4e 	bl	8005064 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f000 f8cc 	bl	8004d68 <UART_SetConfig>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e01c      	b.n	8004c14 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	490d      	ldr	r1, [pc, #52]	@ (8004c1c <HAL_UART_Init+0xa8>)
 8004be6:	400a      	ands	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	212a      	movs	r1, #42	@ 0x2a
 8004bf6:	438a      	bics	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2101      	movs	r1, #1
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f000 fadd 	bl	80051cc <UART_CheckIdleState>
 8004c12:	0003      	movs	r3, r0
}
 8004c14:	0018      	movs	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	ffffb7ff 	.word	0xffffb7ff

08004c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08a      	sub	sp, #40	@ 0x28
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	1dbb      	adds	r3, r7, #6
 8004c2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2288      	movs	r2, #136	@ 0x88
 8004c34:	589b      	ldr	r3, [r3, r2]
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d000      	beq.n	8004c3c <HAL_UART_Transmit+0x1c>
 8004c3a:	e090      	b.n	8004d5e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_UART_Transmit+0x2a>
 8004c42:	1dbb      	adds	r3, r7, #6
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e088      	b.n	8004d60 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	2380      	movs	r3, #128	@ 0x80
 8004c54:	015b      	lsls	r3, r3, #5
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d109      	bne.n	8004c6e <HAL_UART_Transmit+0x4e>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d105      	bne.n	8004c6e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2201      	movs	r2, #1
 8004c66:	4013      	ands	r3, r2
 8004c68:	d001      	beq.n	8004c6e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e078      	b.n	8004d60 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2290      	movs	r2, #144	@ 0x90
 8004c72:	2100      	movs	r1, #0
 8004c74:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2288      	movs	r2, #136	@ 0x88
 8004c7a:	2121      	movs	r1, #33	@ 0x21
 8004c7c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c7e:	f7fd ff6b 	bl	8002b58 <HAL_GetTick>
 8004c82:	0003      	movs	r3, r0
 8004c84:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1dba      	adds	r2, r7, #6
 8004c8a:	2154      	movs	r1, #84	@ 0x54
 8004c8c:	8812      	ldrh	r2, [r2, #0]
 8004c8e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1dba      	adds	r2, r7, #6
 8004c94:	2156      	movs	r1, #86	@ 0x56
 8004c96:	8812      	ldrh	r2, [r2, #0]
 8004c98:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	2380      	movs	r3, #128	@ 0x80
 8004ca0:	015b      	lsls	r3, r3, #5
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d108      	bne.n	8004cb8 <HAL_UART_Transmit+0x98>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d104      	bne.n	8004cb8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	e003      	b.n	8004cc0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cc0:	e030      	b.n	8004d24 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	0013      	movs	r3, r2
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2180      	movs	r1, #128	@ 0x80
 8004cd0:	f000 fb26 	bl	8005320 <UART_WaitOnFlagUntilTimeout>
 8004cd4:	1e03      	subs	r3, r0, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2288      	movs	r2, #136	@ 0x88
 8004cdc:	2120      	movs	r1, #32
 8004cde:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e03d      	b.n	8004d60 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10b      	bne.n	8004d02 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	001a      	movs	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	05d2      	lsls	r2, r2, #23
 8004cf6:	0dd2      	lsrs	r2, r2, #23
 8004cf8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	e007      	b.n	8004d12 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	781a      	ldrb	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2256      	movs	r2, #86	@ 0x56
 8004d16:	5a9b      	ldrh	r3, [r3, r2]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b299      	uxth	r1, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2256      	movs	r2, #86	@ 0x56
 8004d22:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2256      	movs	r2, #86	@ 0x56
 8004d28:	5a9b      	ldrh	r3, [r3, r2]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1c8      	bne.n	8004cc2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	0013      	movs	r3, r2
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2140      	movs	r1, #64	@ 0x40
 8004d3e:	f000 faef 	bl	8005320 <UART_WaitOnFlagUntilTimeout>
 8004d42:	1e03      	subs	r3, r0, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2288      	movs	r2, #136	@ 0x88
 8004d4a:	2120      	movs	r1, #32
 8004d4c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e006      	b.n	8004d60 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2288      	movs	r2, #136	@ 0x88
 8004d56:	2120      	movs	r1, #32
 8004d58:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e000      	b.n	8004d60 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004d5e:	2302      	movs	r3, #2
  }
}
 8004d60:	0018      	movs	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b008      	add	sp, #32
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d70:	231e      	movs	r3, #30
 8004d72:	18fb      	adds	r3, r7, r3
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4aab      	ldr	r2, [pc, #684]	@ (8005044 <UART_SetConfig+0x2dc>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	4aa6      	ldr	r2, [pc, #664]	@ (8005048 <UART_SetConfig+0x2e0>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	0019      	movs	r1, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4a9d      	ldr	r2, [pc, #628]	@ (800504c <UART_SetConfig+0x2e4>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	0019      	movs	r1, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dea:	220f      	movs	r2, #15
 8004dec:	4393      	bics	r3, r2
 8004dee:	0019      	movs	r1, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a93      	ldr	r2, [pc, #588]	@ (8005050 <UART_SetConfig+0x2e8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d127      	bne.n	8004e56 <UART_SetConfig+0xee>
 8004e06:	4b93      	ldr	r3, [pc, #588]	@ (8005054 <UART_SetConfig+0x2ec>)
 8004e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0a:	2203      	movs	r2, #3
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d017      	beq.n	8004e42 <UART_SetConfig+0xda>
 8004e12:	d81b      	bhi.n	8004e4c <UART_SetConfig+0xe4>
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d00a      	beq.n	8004e2e <UART_SetConfig+0xc6>
 8004e18:	d818      	bhi.n	8004e4c <UART_SetConfig+0xe4>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <UART_SetConfig+0xbc>
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d00a      	beq.n	8004e38 <UART_SetConfig+0xd0>
 8004e22:	e013      	b.n	8004e4c <UART_SetConfig+0xe4>
 8004e24:	231f      	movs	r3, #31
 8004e26:	18fb      	adds	r3, r7, r3
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	e021      	b.n	8004e72 <UART_SetConfig+0x10a>
 8004e2e:	231f      	movs	r3, #31
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	2202      	movs	r2, #2
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	e01c      	b.n	8004e72 <UART_SetConfig+0x10a>
 8004e38:	231f      	movs	r3, #31
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e017      	b.n	8004e72 <UART_SetConfig+0x10a>
 8004e42:	231f      	movs	r3, #31
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	2208      	movs	r2, #8
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e012      	b.n	8004e72 <UART_SetConfig+0x10a>
 8004e4c:	231f      	movs	r3, #31
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	2210      	movs	r2, #16
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e00d      	b.n	8004e72 <UART_SetConfig+0x10a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a7f      	ldr	r2, [pc, #508]	@ (8005058 <UART_SetConfig+0x2f0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d104      	bne.n	8004e6a <UART_SetConfig+0x102>
 8004e60:	231f      	movs	r3, #31
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	e003      	b.n	8004e72 <UART_SetConfig+0x10a>
 8004e6a:	231f      	movs	r3, #31
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	2210      	movs	r2, #16
 8004e70:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69da      	ldr	r2, [r3, #28]
 8004e76:	2380      	movs	r3, #128	@ 0x80
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d000      	beq.n	8004e80 <UART_SetConfig+0x118>
 8004e7e:	e06f      	b.n	8004f60 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004e80:	231f      	movs	r3, #31
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d01f      	beq.n	8004eca <UART_SetConfig+0x162>
 8004e8a:	dc22      	bgt.n	8004ed2 <UART_SetConfig+0x16a>
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d017      	beq.n	8004ec0 <UART_SetConfig+0x158>
 8004e90:	dc1f      	bgt.n	8004ed2 <UART_SetConfig+0x16a>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <UART_SetConfig+0x134>
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d005      	beq.n	8004ea6 <UART_SetConfig+0x13e>
 8004e9a:	e01a      	b.n	8004ed2 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e9c:	f7ff fae0 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	61bb      	str	r3, [r7, #24]
        break;
 8004ea4:	e01c      	b.n	8004ee0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004ea6:	4b6b      	ldr	r3, [pc, #428]	@ (8005054 <UART_SetConfig+0x2ec>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	2207      	movs	r2, #7
 8004eae:	4013      	ands	r3, r2
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	4869      	ldr	r0, [pc, #420]	@ (800505c <UART_SetConfig+0x2f4>)
 8004eb6:	f7fb f939 	bl	800012c <__udivsi3>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	61bb      	str	r3, [r7, #24]
        break;
 8004ebe:	e00f      	b.n	8004ee0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec0:	f7ff fa6e 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	61bb      	str	r3, [r7, #24]
        break;
 8004ec8:	e00a      	b.n	8004ee0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eca:	2380      	movs	r3, #128	@ 0x80
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	61bb      	str	r3, [r7, #24]
        break;
 8004ed0:	e006      	b.n	8004ee0 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ed6:	231e      	movs	r3, #30
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
        break;
 8004ede:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d100      	bne.n	8004ee8 <UART_SetConfig+0x180>
 8004ee6:	e097      	b.n	8005018 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004eec:	4b5c      	ldr	r3, [pc, #368]	@ (8005060 <UART_SetConfig+0x2f8>)
 8004eee:	0052      	lsls	r2, r2, #1
 8004ef0:	5ad3      	ldrh	r3, [r2, r3]
 8004ef2:	0019      	movs	r1, r3
 8004ef4:	69b8      	ldr	r0, [r7, #24]
 8004ef6:	f7fb f919 	bl	800012c <__udivsi3>
 8004efa:	0003      	movs	r3, r0
 8004efc:	005a      	lsls	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	18d2      	adds	r2, r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	0019      	movs	r1, r3
 8004f0c:	0010      	movs	r0, r2
 8004f0e:	f7fb f90d 	bl	800012c <__udivsi3>
 8004f12:	0003      	movs	r3, r0
 8004f14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b0f      	cmp	r3, #15
 8004f1a:	d91c      	bls.n	8004f56 <UART_SetConfig+0x1ee>
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	2380      	movs	r3, #128	@ 0x80
 8004f20:	025b      	lsls	r3, r3, #9
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d217      	bcs.n	8004f56 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	200e      	movs	r0, #14
 8004f2c:	183b      	adds	r3, r7, r0
 8004f2e:	210f      	movs	r1, #15
 8004f30:	438a      	bics	r2, r1
 8004f32:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2207      	movs	r2, #7
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	b299      	uxth	r1, r3
 8004f40:	183b      	adds	r3, r7, r0
 8004f42:	183a      	adds	r2, r7, r0
 8004f44:	8812      	ldrh	r2, [r2, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	183a      	adds	r2, r7, r0
 8004f50:	8812      	ldrh	r2, [r2, #0]
 8004f52:	60da      	str	r2, [r3, #12]
 8004f54:	e060      	b.n	8005018 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004f56:	231e      	movs	r3, #30
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	e05b      	b.n	8005018 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f60:	231f      	movs	r3, #31
 8004f62:	18fb      	adds	r3, r7, r3
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d01f      	beq.n	8004faa <UART_SetConfig+0x242>
 8004f6a:	dc22      	bgt.n	8004fb2 <UART_SetConfig+0x24a>
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d017      	beq.n	8004fa0 <UART_SetConfig+0x238>
 8004f70:	dc1f      	bgt.n	8004fb2 <UART_SetConfig+0x24a>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <UART_SetConfig+0x214>
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d005      	beq.n	8004f86 <UART_SetConfig+0x21e>
 8004f7a:	e01a      	b.n	8004fb2 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7ff fa70 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8004f80:	0003      	movs	r3, r0
 8004f82:	61bb      	str	r3, [r7, #24]
        break;
 8004f84:	e01c      	b.n	8004fc0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004f86:	4b33      	ldr	r3, [pc, #204]	@ (8005054 <UART_SetConfig+0x2ec>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	2207      	movs	r2, #7
 8004f8e:	4013      	ands	r3, r2
 8004f90:	3301      	adds	r3, #1
 8004f92:	0019      	movs	r1, r3
 8004f94:	4831      	ldr	r0, [pc, #196]	@ (800505c <UART_SetConfig+0x2f4>)
 8004f96:	f7fb f8c9 	bl	800012c <__udivsi3>
 8004f9a:	0003      	movs	r3, r0
 8004f9c:	61bb      	str	r3, [r7, #24]
        break;
 8004f9e:	e00f      	b.n	8004fc0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa0:	f7ff f9fe 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	61bb      	str	r3, [r7, #24]
        break;
 8004fa8:	e00a      	b.n	8004fc0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004faa:	2380      	movs	r3, #128	@ 0x80
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	61bb      	str	r3, [r7, #24]
        break;
 8004fb0:	e006      	b.n	8004fc0 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fb6:	231e      	movs	r3, #30
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]
        break;
 8004fbe:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d028      	beq.n	8005018 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fca:	4b25      	ldr	r3, [pc, #148]	@ (8005060 <UART_SetConfig+0x2f8>)
 8004fcc:	0052      	lsls	r2, r2, #1
 8004fce:	5ad3      	ldrh	r3, [r2, r3]
 8004fd0:	0019      	movs	r1, r3
 8004fd2:	69b8      	ldr	r0, [r7, #24]
 8004fd4:	f7fb f8aa 	bl	800012c <__udivsi3>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	001a      	movs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	18d2      	adds	r2, r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	0019      	movs	r1, r3
 8004fea:	0010      	movs	r0, r2
 8004fec:	f7fb f89e 	bl	800012c <__udivsi3>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	d90a      	bls.n	8005010 <UART_SetConfig+0x2a8>
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	2380      	movs	r3, #128	@ 0x80
 8004ffe:	025b      	lsls	r3, r3, #9
 8005000:	429a      	cmp	r2, r3
 8005002:	d205      	bcs.n	8005010 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	e003      	b.n	8005018 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005010:	231e      	movs	r3, #30
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	226a      	movs	r2, #106	@ 0x6a
 800501c:	2101      	movs	r1, #1
 800501e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2268      	movs	r2, #104	@ 0x68
 8005024:	2101      	movs	r1, #1
 8005026:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005034:	231e      	movs	r3, #30
 8005036:	18fb      	adds	r3, r7, r3
 8005038:	781b      	ldrb	r3, [r3, #0]
}
 800503a:	0018      	movs	r0, r3
 800503c:	46bd      	mov	sp, r7
 800503e:	b008      	add	sp, #32
 8005040:	bd80      	pop	{r7, pc}
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	cfff69f3 	.word	0xcfff69f3
 8005048:	ffffcfff 	.word	0xffffcfff
 800504c:	11fff4ff 	.word	0x11fff4ff
 8005050:	40013800 	.word	0x40013800
 8005054:	40021000 	.word	0x40021000
 8005058:	40004400 	.word	0x40004400
 800505c:	02dc6c00 	.word	0x02dc6c00
 8005060:	08006128 	.word	0x08006128

08005064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	2208      	movs	r2, #8
 8005072:	4013      	ands	r3, r2
 8005074:	d00b      	beq.n	800508e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4a4a      	ldr	r2, [pc, #296]	@ (80051a8 <UART_AdvFeatureConfig+0x144>)
 800507e:	4013      	ands	r3, r2
 8005080:	0019      	movs	r1, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005092:	2201      	movs	r2, #1
 8005094:	4013      	ands	r3, r2
 8005096:	d00b      	beq.n	80050b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4a43      	ldr	r2, [pc, #268]	@ (80051ac <UART_AdvFeatureConfig+0x148>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	0019      	movs	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b4:	2202      	movs	r2, #2
 80050b6:	4013      	ands	r3, r2
 80050b8:	d00b      	beq.n	80050d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a3b      	ldr	r2, [pc, #236]	@ (80051b0 <UART_AdvFeatureConfig+0x14c>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	0019      	movs	r1, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d6:	2204      	movs	r2, #4
 80050d8:	4013      	ands	r3, r2
 80050da:	d00b      	beq.n	80050f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4a34      	ldr	r2, [pc, #208]	@ (80051b4 <UART_AdvFeatureConfig+0x150>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	0019      	movs	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f8:	2210      	movs	r2, #16
 80050fa:	4013      	ands	r3, r2
 80050fc:	d00b      	beq.n	8005116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4a2c      	ldr	r2, [pc, #176]	@ (80051b8 <UART_AdvFeatureConfig+0x154>)
 8005106:	4013      	ands	r3, r2
 8005108:	0019      	movs	r1, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511a:	2220      	movs	r2, #32
 800511c:	4013      	ands	r3, r2
 800511e:	d00b      	beq.n	8005138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4a25      	ldr	r2, [pc, #148]	@ (80051bc <UART_AdvFeatureConfig+0x158>)
 8005128:	4013      	ands	r3, r2
 800512a:	0019      	movs	r1, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513c:	2240      	movs	r2, #64	@ 0x40
 800513e:	4013      	ands	r3, r2
 8005140:	d01d      	beq.n	800517e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4a1d      	ldr	r2, [pc, #116]	@ (80051c0 <UART_AdvFeatureConfig+0x15c>)
 800514a:	4013      	ands	r3, r2
 800514c:	0019      	movs	r1, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800515e:	2380      	movs	r3, #128	@ 0x80
 8005160:	035b      	lsls	r3, r3, #13
 8005162:	429a      	cmp	r2, r3
 8005164:	d10b      	bne.n	800517e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4a15      	ldr	r2, [pc, #84]	@ (80051c4 <UART_AdvFeatureConfig+0x160>)
 800516e:	4013      	ands	r3, r2
 8005170:	0019      	movs	r1, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	2280      	movs	r2, #128	@ 0x80
 8005184:	4013      	ands	r3, r2
 8005186:	d00b      	beq.n	80051a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4a0e      	ldr	r2, [pc, #56]	@ (80051c8 <UART_AdvFeatureConfig+0x164>)
 8005190:	4013      	ands	r3, r2
 8005192:	0019      	movs	r1, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
  }
}
 80051a0:	46c0      	nop			@ (mov r8, r8)
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b002      	add	sp, #8
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	ffff7fff 	.word	0xffff7fff
 80051ac:	fffdffff 	.word	0xfffdffff
 80051b0:	fffeffff 	.word	0xfffeffff
 80051b4:	fffbffff 	.word	0xfffbffff
 80051b8:	ffffefff 	.word	0xffffefff
 80051bc:	ffffdfff 	.word	0xffffdfff
 80051c0:	ffefffff 	.word	0xffefffff
 80051c4:	ff9fffff 	.word	0xff9fffff
 80051c8:	fff7ffff 	.word	0xfff7ffff

080051cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b092      	sub	sp, #72	@ 0x48
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2290      	movs	r2, #144	@ 0x90
 80051d8:	2100      	movs	r1, #0
 80051da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051dc:	f7fd fcbc 	bl	8002b58 <HAL_GetTick>
 80051e0:	0003      	movs	r3, r0
 80051e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2208      	movs	r2, #8
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d12d      	bne.n	800524e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f4:	2280      	movs	r2, #128	@ 0x80
 80051f6:	0391      	lsls	r1, r2, #14
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	4a47      	ldr	r2, [pc, #284]	@ (8005318 <UART_CheckIdleState+0x14c>)
 80051fc:	9200      	str	r2, [sp, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	f000 f88e 	bl	8005320 <UART_WaitOnFlagUntilTimeout>
 8005204:	1e03      	subs	r3, r0, #0
 8005206:	d022      	beq.n	800524e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005208:	f3ef 8310 	mrs	r3, PRIMASK
 800520c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005210:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005212:	2301      	movs	r3, #1
 8005214:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005218:	f383 8810 	msr	PRIMASK, r3
}
 800521c:	46c0      	nop			@ (mov r8, r8)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2180      	movs	r1, #128	@ 0x80
 800522a:	438a      	bics	r2, r1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005234:	f383 8810 	msr	PRIMASK, r3
}
 8005238:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2288      	movs	r2, #136	@ 0x88
 800523e:	2120      	movs	r1, #32
 8005240:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2284      	movs	r2, #132	@ 0x84
 8005246:	2100      	movs	r1, #0
 8005248:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e060      	b.n	8005310 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2204      	movs	r2, #4
 8005256:	4013      	ands	r3, r2
 8005258:	2b04      	cmp	r3, #4
 800525a:	d146      	bne.n	80052ea <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800525c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800525e:	2280      	movs	r2, #128	@ 0x80
 8005260:	03d1      	lsls	r1, r2, #15
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	4a2c      	ldr	r2, [pc, #176]	@ (8005318 <UART_CheckIdleState+0x14c>)
 8005266:	9200      	str	r2, [sp, #0]
 8005268:	2200      	movs	r2, #0
 800526a:	f000 f859 	bl	8005320 <UART_WaitOnFlagUntilTimeout>
 800526e:	1e03      	subs	r3, r0, #0
 8005270:	d03b      	beq.n	80052ea <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005272:	f3ef 8310 	mrs	r3, PRIMASK
 8005276:	60fb      	str	r3, [r7, #12]
  return(result);
 8005278:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800527a:	637b      	str	r3, [r7, #52]	@ 0x34
 800527c:	2301      	movs	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f383 8810 	msr	PRIMASK, r3
}
 8005286:	46c0      	nop			@ (mov r8, r8)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4922      	ldr	r1, [pc, #136]	@ (800531c <UART_CheckIdleState+0x150>)
 8005294:	400a      	ands	r2, r1
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800529a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f383 8810 	msr	PRIMASK, r3
}
 80052a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052a4:	f3ef 8310 	mrs	r3, PRIMASK
 80052a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80052aa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ae:	2301      	movs	r3, #1
 80052b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f383 8810 	msr	PRIMASK, r3
}
 80052b8:	46c0      	nop			@ (mov r8, r8)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2101      	movs	r1, #1
 80052c6:	438a      	bics	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	f383 8810 	msr	PRIMASK, r3
}
 80052d4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	228c      	movs	r2, #140	@ 0x8c
 80052da:	2120      	movs	r1, #32
 80052dc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2284      	movs	r2, #132	@ 0x84
 80052e2:	2100      	movs	r1, #0
 80052e4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e012      	b.n	8005310 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2288      	movs	r2, #136	@ 0x88
 80052ee:	2120      	movs	r1, #32
 80052f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	228c      	movs	r2, #140	@ 0x8c
 80052f6:	2120      	movs	r1, #32
 80052f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2284      	movs	r2, #132	@ 0x84
 800530a:	2100      	movs	r1, #0
 800530c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	0018      	movs	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	b010      	add	sp, #64	@ 0x40
 8005316:	bd80      	pop	{r7, pc}
 8005318:	01ffffff 	.word	0x01ffffff
 800531c:	fffffedf 	.word	0xfffffedf

08005320 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	1dfb      	adds	r3, r7, #7
 800532e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005330:	e051      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	3301      	adds	r3, #1
 8005336:	d04e      	beq.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005338:	f7fd fc0e 	bl	8002b58 <HAL_GetTick>
 800533c:	0002      	movs	r2, r0
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	429a      	cmp	r2, r3
 8005346:	d302      	bcc.n	800534e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e051      	b.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2204      	movs	r2, #4
 800535a:	4013      	ands	r3, r2
 800535c:	d03b      	beq.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b80      	cmp	r3, #128	@ 0x80
 8005362:	d038      	beq.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b40      	cmp	r3, #64	@ 0x40
 8005368:	d035      	beq.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	2208      	movs	r2, #8
 8005372:	4013      	ands	r3, r2
 8005374:	2b08      	cmp	r3, #8
 8005376:	d111      	bne.n	800539c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2208      	movs	r2, #8
 800537e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	0018      	movs	r0, r3
 8005384:	f000 f83c 	bl	8005400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2290      	movs	r2, #144	@ 0x90
 800538c:	2108      	movs	r1, #8
 800538e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2284      	movs	r2, #132	@ 0x84
 8005394:	2100      	movs	r1, #0
 8005396:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e02c      	b.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	69da      	ldr	r2, [r3, #28]
 80053a2:	2380      	movs	r3, #128	@ 0x80
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	401a      	ands	r2, r3
 80053a8:	2380      	movs	r3, #128	@ 0x80
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d112      	bne.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2280      	movs	r2, #128	@ 0x80
 80053b6:	0112      	lsls	r2, r2, #4
 80053b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	0018      	movs	r0, r3
 80053be:	f000 f81f 	bl	8005400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2290      	movs	r2, #144	@ 0x90
 80053c6:	2120      	movs	r1, #32
 80053c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2284      	movs	r2, #132	@ 0x84
 80053ce:	2100      	movs	r1, #0
 80053d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e00f      	b.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	425a      	negs	r2, r3
 80053e6:	4153      	adcs	r3, r2
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	001a      	movs	r2, r3
 80053ec:	1dfb      	adds	r3, r7, #7
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d09e      	beq.n	8005332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	0018      	movs	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b004      	add	sp, #16
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08e      	sub	sp, #56	@ 0x38
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005408:	f3ef 8310 	mrs	r3, PRIMASK
 800540c:	617b      	str	r3, [r7, #20]
  return(result);
 800540e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005410:	637b      	str	r3, [r7, #52]	@ 0x34
 8005412:	2301      	movs	r3, #1
 8005414:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f383 8810 	msr	PRIMASK, r3
}
 800541c:	46c0      	nop			@ (mov r8, r8)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4926      	ldr	r1, [pc, #152]	@ (80054c4 <UART_EndRxTransfer+0xc4>)
 800542a:	400a      	ands	r2, r1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005430:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f383 8810 	msr	PRIMASK, r3
}
 8005438:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800543a:	f3ef 8310 	mrs	r3, PRIMASK
 800543e:	623b      	str	r3, [r7, #32]
  return(result);
 8005440:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005442:	633b      	str	r3, [r7, #48]	@ 0x30
 8005444:	2301      	movs	r3, #1
 8005446:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	f383 8810 	msr	PRIMASK, r3
}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	491b      	ldr	r1, [pc, #108]	@ (80054c8 <UART_EndRxTransfer+0xc8>)
 800545c:	400a      	ands	r2, r1
 800545e:	609a      	str	r2, [r3, #8]
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	f383 8810 	msr	PRIMASK, r3
}
 800546a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d118      	bne.n	80054a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005474:	f3ef 8310 	mrs	r3, PRIMASK
 8005478:	60bb      	str	r3, [r7, #8]
  return(result);
 800547a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800547e:	2301      	movs	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f383 8810 	msr	PRIMASK, r3
}
 8005488:	46c0      	nop			@ (mov r8, r8)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2110      	movs	r1, #16
 8005496:	438a      	bics	r2, r1
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f383 8810 	msr	PRIMASK, r3
}
 80054a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	228c      	movs	r2, #140	@ 0x8c
 80054aa:	2120      	movs	r1, #32
 80054ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	46bd      	mov	sp, r7
 80054be:	b00e      	add	sp, #56	@ 0x38
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			@ (mov r8, r8)
 80054c4:	fffffedf 	.word	0xfffffedf
 80054c8:	effffffe 	.word	0xeffffffe

080054cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2284      	movs	r2, #132	@ 0x84
 80054d8:	5c9b      	ldrb	r3, [r3, r2]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80054de:	2302      	movs	r3, #2
 80054e0:	e027      	b.n	8005532 <HAL_UARTEx_DisableFifoMode+0x66>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2284      	movs	r2, #132	@ 0x84
 80054e6:	2101      	movs	r1, #1
 80054e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2288      	movs	r2, #136	@ 0x88
 80054ee:	2124      	movs	r1, #36	@ 0x24
 80054f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2101      	movs	r1, #1
 8005506:	438a      	bics	r2, r1
 8005508:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4a0b      	ldr	r2, [pc, #44]	@ (800553c <HAL_UARTEx_DisableFifoMode+0x70>)
 800550e:	4013      	ands	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2288      	movs	r2, #136	@ 0x88
 8005524:	2120      	movs	r1, #32
 8005526:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2284      	movs	r2, #132	@ 0x84
 800552c:	2100      	movs	r1, #0
 800552e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	0018      	movs	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	b004      	add	sp, #16
 8005538:	bd80      	pop	{r7, pc}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	dfffffff 	.word	0xdfffffff

08005540 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2284      	movs	r2, #132	@ 0x84
 800554e:	5c9b      	ldrb	r3, [r3, r2]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005554:	2302      	movs	r3, #2
 8005556:	e02e      	b.n	80055b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2284      	movs	r2, #132	@ 0x84
 800555c:	2101      	movs	r1, #1
 800555e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2288      	movs	r2, #136	@ 0x88
 8005564:	2124      	movs	r1, #36	@ 0x24
 8005566:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2101      	movs	r1, #1
 800557c:	438a      	bics	r2, r1
 800557e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	08d9      	lsrs	r1, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	0018      	movs	r0, r3
 8005598:	f000 f854 	bl	8005644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2288      	movs	r2, #136	@ 0x88
 80055a8:	2120      	movs	r1, #32
 80055aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2284      	movs	r2, #132	@ 0x84
 80055b0:	2100      	movs	r1, #0
 80055b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	0018      	movs	r0, r3
 80055b8:	46bd      	mov	sp, r7
 80055ba:	b004      	add	sp, #16
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2284      	movs	r2, #132	@ 0x84
 80055ce:	5c9b      	ldrb	r3, [r3, r2]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e02f      	b.n	8005638 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2284      	movs	r2, #132	@ 0x84
 80055dc:	2101      	movs	r1, #1
 80055de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2288      	movs	r2, #136	@ 0x88
 80055e4:	2124      	movs	r1, #36	@ 0x24
 80055e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2101      	movs	r1, #1
 80055fc:	438a      	bics	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	4a0e      	ldr	r2, [pc, #56]	@ (8005640 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005608:	4013      	ands	r3, r2
 800560a:	0019      	movs	r1, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	0018      	movs	r0, r3
 800561a:	f000 f813 	bl	8005644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2288      	movs	r2, #136	@ 0x88
 800562a:	2120      	movs	r1, #32
 800562c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2284      	movs	r2, #132	@ 0x84
 8005632:	2100      	movs	r1, #0
 8005634:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	0018      	movs	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	b004      	add	sp, #16
 800563e:	bd80      	pop	{r7, pc}
 8005640:	f1ffffff 	.word	0xf1ffffff

08005644 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005650:	2b00      	cmp	r3, #0
 8005652:	d108      	bne.n	8005666 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	226a      	movs	r2, #106	@ 0x6a
 8005658:	2101      	movs	r1, #1
 800565a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2268      	movs	r2, #104	@ 0x68
 8005660:	2101      	movs	r1, #1
 8005662:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005664:	e043      	b.n	80056ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005666:	260f      	movs	r6, #15
 8005668:	19bb      	adds	r3, r7, r6
 800566a:	2208      	movs	r2, #8
 800566c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800566e:	200e      	movs	r0, #14
 8005670:	183b      	adds	r3, r7, r0
 8005672:	2208      	movs	r2, #8
 8005674:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	0e5b      	lsrs	r3, r3, #25
 800567e:	b2da      	uxtb	r2, r3
 8005680:	240d      	movs	r4, #13
 8005682:	193b      	adds	r3, r7, r4
 8005684:	2107      	movs	r1, #7
 8005686:	400a      	ands	r2, r1
 8005688:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	0f5b      	lsrs	r3, r3, #29
 8005692:	b2da      	uxtb	r2, r3
 8005694:	250c      	movs	r5, #12
 8005696:	197b      	adds	r3, r7, r5
 8005698:	2107      	movs	r1, #7
 800569a:	400a      	ands	r2, r1
 800569c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800569e:	183b      	adds	r3, r7, r0
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	197a      	adds	r2, r7, r5
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	4914      	ldr	r1, [pc, #80]	@ (80056f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80056a8:	5c8a      	ldrb	r2, [r1, r2]
 80056aa:	435a      	muls	r2, r3
 80056ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80056ae:	197b      	adds	r3, r7, r5
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	4a12      	ldr	r2, [pc, #72]	@ (80056fc <UARTEx_SetNbDataToProcess+0xb8>)
 80056b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056b6:	0019      	movs	r1, r3
 80056b8:	f7fa fdc2 	bl	8000240 <__divsi3>
 80056bc:	0003      	movs	r3, r0
 80056be:	b299      	uxth	r1, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	226a      	movs	r2, #106	@ 0x6a
 80056c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056c6:	19bb      	adds	r3, r7, r6
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	193a      	adds	r2, r7, r4
 80056cc:	7812      	ldrb	r2, [r2, #0]
 80056ce:	490a      	ldr	r1, [pc, #40]	@ (80056f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80056d0:	5c8a      	ldrb	r2, [r1, r2]
 80056d2:	435a      	muls	r2, r3
 80056d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80056d6:	193b      	adds	r3, r7, r4
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	4a08      	ldr	r2, [pc, #32]	@ (80056fc <UARTEx_SetNbDataToProcess+0xb8>)
 80056dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056de:	0019      	movs	r1, r3
 80056e0:	f7fa fdae 	bl	8000240 <__divsi3>
 80056e4:	0003      	movs	r3, r0
 80056e6:	b299      	uxth	r1, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2268      	movs	r2, #104	@ 0x68
 80056ec:	5299      	strh	r1, [r3, r2]
}
 80056ee:	46c0      	nop			@ (mov r8, r8)
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b005      	add	sp, #20
 80056f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f6:	46c0      	nop			@ (mov r8, r8)
 80056f8:	08006140 	.word	0x08006140
 80056fc:	08006148 	.word	0x08006148

08005700 <sniprintf>:
 8005700:	b40c      	push	{r2, r3}
 8005702:	b530      	push	{r4, r5, lr}
 8005704:	4b18      	ldr	r3, [pc, #96]	@ (8005768 <sniprintf+0x68>)
 8005706:	000c      	movs	r4, r1
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	b09d      	sub	sp, #116	@ 0x74
 800570c:	2900      	cmp	r1, #0
 800570e:	da08      	bge.n	8005722 <sniprintf+0x22>
 8005710:	238b      	movs	r3, #139	@ 0x8b
 8005712:	2001      	movs	r0, #1
 8005714:	602b      	str	r3, [r5, #0]
 8005716:	4240      	negs	r0, r0
 8005718:	b01d      	add	sp, #116	@ 0x74
 800571a:	bc30      	pop	{r4, r5}
 800571c:	bc08      	pop	{r3}
 800571e:	b002      	add	sp, #8
 8005720:	4718      	bx	r3
 8005722:	2382      	movs	r3, #130	@ 0x82
 8005724:	466a      	mov	r2, sp
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	8293      	strh	r3, [r2, #20]
 800572a:	2300      	movs	r3, #0
 800572c:	9002      	str	r0, [sp, #8]
 800572e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005730:	9006      	str	r0, [sp, #24]
 8005732:	4299      	cmp	r1, r3
 8005734:	d000      	beq.n	8005738 <sniprintf+0x38>
 8005736:	1e4b      	subs	r3, r1, #1
 8005738:	9304      	str	r3, [sp, #16]
 800573a:	9307      	str	r3, [sp, #28]
 800573c:	2301      	movs	r3, #1
 800573e:	466a      	mov	r2, sp
 8005740:	425b      	negs	r3, r3
 8005742:	82d3      	strh	r3, [r2, #22]
 8005744:	0028      	movs	r0, r5
 8005746:	ab21      	add	r3, sp, #132	@ 0x84
 8005748:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800574a:	a902      	add	r1, sp, #8
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	f000 f99d 	bl	8005a8c <_svfiprintf_r>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	da01      	bge.n	800575a <sniprintf+0x5a>
 8005756:	238b      	movs	r3, #139	@ 0x8b
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	2c00      	cmp	r4, #0
 800575c:	d0dc      	beq.n	8005718 <sniprintf+0x18>
 800575e:	2200      	movs	r2, #0
 8005760:	9b02      	ldr	r3, [sp, #8]
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	e7d8      	b.n	8005718 <sniprintf+0x18>
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	2000000c 	.word	0x2000000c

0800576c <memset>:
 800576c:	0003      	movs	r3, r0
 800576e:	1882      	adds	r2, r0, r2
 8005770:	4293      	cmp	r3, r2
 8005772:	d100      	bne.n	8005776 <memset+0xa>
 8005774:	4770      	bx	lr
 8005776:	7019      	strb	r1, [r3, #0]
 8005778:	3301      	adds	r3, #1
 800577a:	e7f9      	b.n	8005770 <memset+0x4>

0800577c <__errno>:
 800577c:	4b01      	ldr	r3, [pc, #4]	@ (8005784 <__errno+0x8>)
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	4770      	bx	lr
 8005782:	46c0      	nop			@ (mov r8, r8)
 8005784:	2000000c 	.word	0x2000000c

08005788 <__libc_init_array>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	2600      	movs	r6, #0
 800578c:	4c0c      	ldr	r4, [pc, #48]	@ (80057c0 <__libc_init_array+0x38>)
 800578e:	4d0d      	ldr	r5, [pc, #52]	@ (80057c4 <__libc_init_array+0x3c>)
 8005790:	1b64      	subs	r4, r4, r5
 8005792:	10a4      	asrs	r4, r4, #2
 8005794:	42a6      	cmp	r6, r4
 8005796:	d109      	bne.n	80057ac <__libc_init_array+0x24>
 8005798:	2600      	movs	r6, #0
 800579a:	f000 fc61 	bl	8006060 <_init>
 800579e:	4c0a      	ldr	r4, [pc, #40]	@ (80057c8 <__libc_init_array+0x40>)
 80057a0:	4d0a      	ldr	r5, [pc, #40]	@ (80057cc <__libc_init_array+0x44>)
 80057a2:	1b64      	subs	r4, r4, r5
 80057a4:	10a4      	asrs	r4, r4, #2
 80057a6:	42a6      	cmp	r6, r4
 80057a8:	d105      	bne.n	80057b6 <__libc_init_array+0x2e>
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	00b3      	lsls	r3, r6, #2
 80057ae:	58eb      	ldr	r3, [r5, r3]
 80057b0:	4798      	blx	r3
 80057b2:	3601      	adds	r6, #1
 80057b4:	e7ee      	b.n	8005794 <__libc_init_array+0xc>
 80057b6:	00b3      	lsls	r3, r6, #2
 80057b8:	58eb      	ldr	r3, [r5, r3]
 80057ba:	4798      	blx	r3
 80057bc:	3601      	adds	r6, #1
 80057be:	e7f2      	b.n	80057a6 <__libc_init_array+0x1e>
 80057c0:	08006184 	.word	0x08006184
 80057c4:	08006184 	.word	0x08006184
 80057c8:	08006188 	.word	0x08006188
 80057cc:	08006184 	.word	0x08006184

080057d0 <__retarget_lock_acquire_recursive>:
 80057d0:	4770      	bx	lr

080057d2 <__retarget_lock_release_recursive>:
 80057d2:	4770      	bx	lr

080057d4 <_free_r>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	0005      	movs	r5, r0
 80057d8:	1e0c      	subs	r4, r1, #0
 80057da:	d010      	beq.n	80057fe <_free_r+0x2a>
 80057dc:	3c04      	subs	r4, #4
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	da00      	bge.n	80057e6 <_free_r+0x12>
 80057e4:	18e4      	adds	r4, r4, r3
 80057e6:	0028      	movs	r0, r5
 80057e8:	f000 f8e0 	bl	80059ac <__malloc_lock>
 80057ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005864 <_free_r+0x90>)
 80057ee:	6813      	ldr	r3, [r2, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d105      	bne.n	8005800 <_free_r+0x2c>
 80057f4:	6063      	str	r3, [r4, #4]
 80057f6:	6014      	str	r4, [r2, #0]
 80057f8:	0028      	movs	r0, r5
 80057fa:	f000 f8df 	bl	80059bc <__malloc_unlock>
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	42a3      	cmp	r3, r4
 8005802:	d908      	bls.n	8005816 <_free_r+0x42>
 8005804:	6820      	ldr	r0, [r4, #0]
 8005806:	1821      	adds	r1, r4, r0
 8005808:	428b      	cmp	r3, r1
 800580a:	d1f3      	bne.n	80057f4 <_free_r+0x20>
 800580c:	6819      	ldr	r1, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	1809      	adds	r1, r1, r0
 8005812:	6021      	str	r1, [r4, #0]
 8005814:	e7ee      	b.n	80057f4 <_free_r+0x20>
 8005816:	001a      	movs	r2, r3
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <_free_r+0x4e>
 800581e:	42a3      	cmp	r3, r4
 8005820:	d9f9      	bls.n	8005816 <_free_r+0x42>
 8005822:	6811      	ldr	r1, [r2, #0]
 8005824:	1850      	adds	r0, r2, r1
 8005826:	42a0      	cmp	r0, r4
 8005828:	d10b      	bne.n	8005842 <_free_r+0x6e>
 800582a:	6820      	ldr	r0, [r4, #0]
 800582c:	1809      	adds	r1, r1, r0
 800582e:	1850      	adds	r0, r2, r1
 8005830:	6011      	str	r1, [r2, #0]
 8005832:	4283      	cmp	r3, r0
 8005834:	d1e0      	bne.n	80057f8 <_free_r+0x24>
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	1841      	adds	r1, r0, r1
 800583c:	6011      	str	r1, [r2, #0]
 800583e:	6053      	str	r3, [r2, #4]
 8005840:	e7da      	b.n	80057f8 <_free_r+0x24>
 8005842:	42a0      	cmp	r0, r4
 8005844:	d902      	bls.n	800584c <_free_r+0x78>
 8005846:	230c      	movs	r3, #12
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	e7d5      	b.n	80057f8 <_free_r+0x24>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	1821      	adds	r1, r4, r0
 8005850:	428b      	cmp	r3, r1
 8005852:	d103      	bne.n	800585c <_free_r+0x88>
 8005854:	6819      	ldr	r1, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	1809      	adds	r1, r1, r0
 800585a:	6021      	str	r1, [r4, #0]
 800585c:	6063      	str	r3, [r4, #4]
 800585e:	6054      	str	r4, [r2, #4]
 8005860:	e7ca      	b.n	80057f8 <_free_r+0x24>
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	2000031c 	.word	0x2000031c

08005868 <sbrk_aligned>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	4e0f      	ldr	r6, [pc, #60]	@ (80058a8 <sbrk_aligned+0x40>)
 800586c:	000d      	movs	r5, r1
 800586e:	6831      	ldr	r1, [r6, #0]
 8005870:	0004      	movs	r4, r0
 8005872:	2900      	cmp	r1, #0
 8005874:	d102      	bne.n	800587c <sbrk_aligned+0x14>
 8005876:	f000 fb95 	bl	8005fa4 <_sbrk_r>
 800587a:	6030      	str	r0, [r6, #0]
 800587c:	0029      	movs	r1, r5
 800587e:	0020      	movs	r0, r4
 8005880:	f000 fb90 	bl	8005fa4 <_sbrk_r>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d103      	bne.n	8005890 <sbrk_aligned+0x28>
 8005888:	2501      	movs	r5, #1
 800588a:	426d      	negs	r5, r5
 800588c:	0028      	movs	r0, r5
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	2303      	movs	r3, #3
 8005892:	1cc5      	adds	r5, r0, #3
 8005894:	439d      	bics	r5, r3
 8005896:	42a8      	cmp	r0, r5
 8005898:	d0f8      	beq.n	800588c <sbrk_aligned+0x24>
 800589a:	1a29      	subs	r1, r5, r0
 800589c:	0020      	movs	r0, r4
 800589e:	f000 fb81 	bl	8005fa4 <_sbrk_r>
 80058a2:	3001      	adds	r0, #1
 80058a4:	d1f2      	bne.n	800588c <sbrk_aligned+0x24>
 80058a6:	e7ef      	b.n	8005888 <sbrk_aligned+0x20>
 80058a8:	20000318 	.word	0x20000318

080058ac <_malloc_r>:
 80058ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058ae:	2203      	movs	r2, #3
 80058b0:	1ccb      	adds	r3, r1, #3
 80058b2:	4393      	bics	r3, r2
 80058b4:	3308      	adds	r3, #8
 80058b6:	0005      	movs	r5, r0
 80058b8:	001f      	movs	r7, r3
 80058ba:	2b0c      	cmp	r3, #12
 80058bc:	d234      	bcs.n	8005928 <_malloc_r+0x7c>
 80058be:	270c      	movs	r7, #12
 80058c0:	42b9      	cmp	r1, r7
 80058c2:	d833      	bhi.n	800592c <_malloc_r+0x80>
 80058c4:	0028      	movs	r0, r5
 80058c6:	f000 f871 	bl	80059ac <__malloc_lock>
 80058ca:	4e37      	ldr	r6, [pc, #220]	@ (80059a8 <_malloc_r+0xfc>)
 80058cc:	6833      	ldr	r3, [r6, #0]
 80058ce:	001c      	movs	r4, r3
 80058d0:	2c00      	cmp	r4, #0
 80058d2:	d12f      	bne.n	8005934 <_malloc_r+0x88>
 80058d4:	0039      	movs	r1, r7
 80058d6:	0028      	movs	r0, r5
 80058d8:	f7ff ffc6 	bl	8005868 <sbrk_aligned>
 80058dc:	0004      	movs	r4, r0
 80058de:	1c43      	adds	r3, r0, #1
 80058e0:	d15f      	bne.n	80059a2 <_malloc_r+0xf6>
 80058e2:	6834      	ldr	r4, [r6, #0]
 80058e4:	9400      	str	r4, [sp, #0]
 80058e6:	9b00      	ldr	r3, [sp, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d14a      	bne.n	8005982 <_malloc_r+0xd6>
 80058ec:	2c00      	cmp	r4, #0
 80058ee:	d052      	beq.n	8005996 <_malloc_r+0xea>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	0028      	movs	r0, r5
 80058f4:	18e3      	adds	r3, r4, r3
 80058f6:	9900      	ldr	r1, [sp, #0]
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	f000 fb53 	bl	8005fa4 <_sbrk_r>
 80058fe:	9b01      	ldr	r3, [sp, #4]
 8005900:	4283      	cmp	r3, r0
 8005902:	d148      	bne.n	8005996 <_malloc_r+0xea>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	0028      	movs	r0, r5
 8005908:	1aff      	subs	r7, r7, r3
 800590a:	0039      	movs	r1, r7
 800590c:	f7ff ffac 	bl	8005868 <sbrk_aligned>
 8005910:	3001      	adds	r0, #1
 8005912:	d040      	beq.n	8005996 <_malloc_r+0xea>
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	19db      	adds	r3, r3, r7
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	6833      	ldr	r3, [r6, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	2a00      	cmp	r2, #0
 8005920:	d133      	bne.n	800598a <_malloc_r+0xde>
 8005922:	9b00      	ldr	r3, [sp, #0]
 8005924:	6033      	str	r3, [r6, #0]
 8005926:	e019      	b.n	800595c <_malloc_r+0xb0>
 8005928:	2b00      	cmp	r3, #0
 800592a:	dac9      	bge.n	80058c0 <_malloc_r+0x14>
 800592c:	230c      	movs	r3, #12
 800592e:	602b      	str	r3, [r5, #0]
 8005930:	2000      	movs	r0, #0
 8005932:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005934:	6821      	ldr	r1, [r4, #0]
 8005936:	1bc9      	subs	r1, r1, r7
 8005938:	d420      	bmi.n	800597c <_malloc_r+0xd0>
 800593a:	290b      	cmp	r1, #11
 800593c:	d90a      	bls.n	8005954 <_malloc_r+0xa8>
 800593e:	19e2      	adds	r2, r4, r7
 8005940:	6027      	str	r7, [r4, #0]
 8005942:	42a3      	cmp	r3, r4
 8005944:	d104      	bne.n	8005950 <_malloc_r+0xa4>
 8005946:	6032      	str	r2, [r6, #0]
 8005948:	6863      	ldr	r3, [r4, #4]
 800594a:	6011      	str	r1, [r2, #0]
 800594c:	6053      	str	r3, [r2, #4]
 800594e:	e005      	b.n	800595c <_malloc_r+0xb0>
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	e7f9      	b.n	8005948 <_malloc_r+0x9c>
 8005954:	6862      	ldr	r2, [r4, #4]
 8005956:	42a3      	cmp	r3, r4
 8005958:	d10e      	bne.n	8005978 <_malloc_r+0xcc>
 800595a:	6032      	str	r2, [r6, #0]
 800595c:	0028      	movs	r0, r5
 800595e:	f000 f82d 	bl	80059bc <__malloc_unlock>
 8005962:	0020      	movs	r0, r4
 8005964:	2207      	movs	r2, #7
 8005966:	300b      	adds	r0, #11
 8005968:	1d23      	adds	r3, r4, #4
 800596a:	4390      	bics	r0, r2
 800596c:	1ac2      	subs	r2, r0, r3
 800596e:	4298      	cmp	r0, r3
 8005970:	d0df      	beq.n	8005932 <_malloc_r+0x86>
 8005972:	1a1b      	subs	r3, r3, r0
 8005974:	50a3      	str	r3, [r4, r2]
 8005976:	e7dc      	b.n	8005932 <_malloc_r+0x86>
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	e7ef      	b.n	800595c <_malloc_r+0xb0>
 800597c:	0023      	movs	r3, r4
 800597e:	6864      	ldr	r4, [r4, #4]
 8005980:	e7a6      	b.n	80058d0 <_malloc_r+0x24>
 8005982:	9c00      	ldr	r4, [sp, #0]
 8005984:	6863      	ldr	r3, [r4, #4]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	e7ad      	b.n	80058e6 <_malloc_r+0x3a>
 800598a:	001a      	movs	r2, r3
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	42a3      	cmp	r3, r4
 8005990:	d1fb      	bne.n	800598a <_malloc_r+0xde>
 8005992:	2300      	movs	r3, #0
 8005994:	e7da      	b.n	800594c <_malloc_r+0xa0>
 8005996:	230c      	movs	r3, #12
 8005998:	0028      	movs	r0, r5
 800599a:	602b      	str	r3, [r5, #0]
 800599c:	f000 f80e 	bl	80059bc <__malloc_unlock>
 80059a0:	e7c6      	b.n	8005930 <_malloc_r+0x84>
 80059a2:	6007      	str	r7, [r0, #0]
 80059a4:	e7da      	b.n	800595c <_malloc_r+0xb0>
 80059a6:	46c0      	nop			@ (mov r8, r8)
 80059a8:	2000031c 	.word	0x2000031c

080059ac <__malloc_lock>:
 80059ac:	b510      	push	{r4, lr}
 80059ae:	4802      	ldr	r0, [pc, #8]	@ (80059b8 <__malloc_lock+0xc>)
 80059b0:	f7ff ff0e 	bl	80057d0 <__retarget_lock_acquire_recursive>
 80059b4:	bd10      	pop	{r4, pc}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	20000314 	.word	0x20000314

080059bc <__malloc_unlock>:
 80059bc:	b510      	push	{r4, lr}
 80059be:	4802      	ldr	r0, [pc, #8]	@ (80059c8 <__malloc_unlock+0xc>)
 80059c0:	f7ff ff07 	bl	80057d2 <__retarget_lock_release_recursive>
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	20000314 	.word	0x20000314

080059cc <__ssputs_r>:
 80059cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ce:	688e      	ldr	r6, [r1, #8]
 80059d0:	b085      	sub	sp, #20
 80059d2:	001f      	movs	r7, r3
 80059d4:	000c      	movs	r4, r1
 80059d6:	680b      	ldr	r3, [r1, #0]
 80059d8:	9002      	str	r0, [sp, #8]
 80059da:	9203      	str	r2, [sp, #12]
 80059dc:	42be      	cmp	r6, r7
 80059de:	d830      	bhi.n	8005a42 <__ssputs_r+0x76>
 80059e0:	210c      	movs	r1, #12
 80059e2:	5e62      	ldrsh	r2, [r4, r1]
 80059e4:	2190      	movs	r1, #144	@ 0x90
 80059e6:	00c9      	lsls	r1, r1, #3
 80059e8:	420a      	tst	r2, r1
 80059ea:	d028      	beq.n	8005a3e <__ssputs_r+0x72>
 80059ec:	2003      	movs	r0, #3
 80059ee:	6921      	ldr	r1, [r4, #16]
 80059f0:	1a5b      	subs	r3, r3, r1
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	6963      	ldr	r3, [r4, #20]
 80059f6:	4343      	muls	r3, r0
 80059f8:	9801      	ldr	r0, [sp, #4]
 80059fa:	0fdd      	lsrs	r5, r3, #31
 80059fc:	18ed      	adds	r5, r5, r3
 80059fe:	1c7b      	adds	r3, r7, #1
 8005a00:	181b      	adds	r3, r3, r0
 8005a02:	106d      	asrs	r5, r5, #1
 8005a04:	42ab      	cmp	r3, r5
 8005a06:	d900      	bls.n	8005a0a <__ssputs_r+0x3e>
 8005a08:	001d      	movs	r5, r3
 8005a0a:	0552      	lsls	r2, r2, #21
 8005a0c:	d528      	bpl.n	8005a60 <__ssputs_r+0x94>
 8005a0e:	0029      	movs	r1, r5
 8005a10:	9802      	ldr	r0, [sp, #8]
 8005a12:	f7ff ff4b 	bl	80058ac <_malloc_r>
 8005a16:	1e06      	subs	r6, r0, #0
 8005a18:	d02c      	beq.n	8005a74 <__ssputs_r+0xa8>
 8005a1a:	9a01      	ldr	r2, [sp, #4]
 8005a1c:	6921      	ldr	r1, [r4, #16]
 8005a1e:	f000 fade 	bl	8005fde <memcpy>
 8005a22:	89a2      	ldrh	r2, [r4, #12]
 8005a24:	4b18      	ldr	r3, [pc, #96]	@ (8005a88 <__ssputs_r+0xbc>)
 8005a26:	401a      	ands	r2, r3
 8005a28:	2380      	movs	r3, #128	@ 0x80
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	81a3      	strh	r3, [r4, #12]
 8005a2e:	9b01      	ldr	r3, [sp, #4]
 8005a30:	6126      	str	r6, [r4, #16]
 8005a32:	18f6      	adds	r6, r6, r3
 8005a34:	6026      	str	r6, [r4, #0]
 8005a36:	003e      	movs	r6, r7
 8005a38:	6165      	str	r5, [r4, #20]
 8005a3a:	1aed      	subs	r5, r5, r3
 8005a3c:	60a5      	str	r5, [r4, #8]
 8005a3e:	42be      	cmp	r6, r7
 8005a40:	d900      	bls.n	8005a44 <__ssputs_r+0x78>
 8005a42:	003e      	movs	r6, r7
 8005a44:	0032      	movs	r2, r6
 8005a46:	9903      	ldr	r1, [sp, #12]
 8005a48:	6820      	ldr	r0, [r4, #0]
 8005a4a:	f000 fa99 	bl	8005f80 <memmove>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	68a3      	ldr	r3, [r4, #8]
 8005a52:	1b9b      	subs	r3, r3, r6
 8005a54:	60a3      	str	r3, [r4, #8]
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	199b      	adds	r3, r3, r6
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	b005      	add	sp, #20
 8005a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a60:	002a      	movs	r2, r5
 8005a62:	9802      	ldr	r0, [sp, #8]
 8005a64:	f000 fac4 	bl	8005ff0 <_realloc_r>
 8005a68:	1e06      	subs	r6, r0, #0
 8005a6a:	d1e0      	bne.n	8005a2e <__ssputs_r+0x62>
 8005a6c:	6921      	ldr	r1, [r4, #16]
 8005a6e:	9802      	ldr	r0, [sp, #8]
 8005a70:	f7ff feb0 	bl	80057d4 <_free_r>
 8005a74:	230c      	movs	r3, #12
 8005a76:	2001      	movs	r0, #1
 8005a78:	9a02      	ldr	r2, [sp, #8]
 8005a7a:	4240      	negs	r0, r0
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	89a2      	ldrh	r2, [r4, #12]
 8005a80:	3334      	adds	r3, #52	@ 0x34
 8005a82:	4313      	orrs	r3, r2
 8005a84:	81a3      	strh	r3, [r4, #12]
 8005a86:	e7e9      	b.n	8005a5c <__ssputs_r+0x90>
 8005a88:	fffffb7f 	.word	0xfffffb7f

08005a8c <_svfiprintf_r>:
 8005a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8e:	b0a1      	sub	sp, #132	@ 0x84
 8005a90:	9003      	str	r0, [sp, #12]
 8005a92:	001d      	movs	r5, r3
 8005a94:	898b      	ldrh	r3, [r1, #12]
 8005a96:	000f      	movs	r7, r1
 8005a98:	0016      	movs	r6, r2
 8005a9a:	061b      	lsls	r3, r3, #24
 8005a9c:	d511      	bpl.n	8005ac2 <_svfiprintf_r+0x36>
 8005a9e:	690b      	ldr	r3, [r1, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10e      	bne.n	8005ac2 <_svfiprintf_r+0x36>
 8005aa4:	2140      	movs	r1, #64	@ 0x40
 8005aa6:	f7ff ff01 	bl	80058ac <_malloc_r>
 8005aaa:	6038      	str	r0, [r7, #0]
 8005aac:	6138      	str	r0, [r7, #16]
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d105      	bne.n	8005abe <_svfiprintf_r+0x32>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	9a03      	ldr	r2, [sp, #12]
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	2001      	movs	r0, #1
 8005aba:	4240      	negs	r0, r0
 8005abc:	e0cf      	b.n	8005c5e <_svfiprintf_r+0x1d2>
 8005abe:	2340      	movs	r3, #64	@ 0x40
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	ac08      	add	r4, sp, #32
 8005ac6:	6163      	str	r3, [r4, #20]
 8005ac8:	3320      	adds	r3, #32
 8005aca:	7663      	strb	r3, [r4, #25]
 8005acc:	3310      	adds	r3, #16
 8005ace:	76a3      	strb	r3, [r4, #26]
 8005ad0:	9507      	str	r5, [sp, #28]
 8005ad2:	0035      	movs	r5, r6
 8005ad4:	782b      	ldrb	r3, [r5, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <_svfiprintf_r+0x52>
 8005ada:	2b25      	cmp	r3, #37	@ 0x25
 8005adc:	d148      	bne.n	8005b70 <_svfiprintf_r+0xe4>
 8005ade:	1bab      	subs	r3, r5, r6
 8005ae0:	9305      	str	r3, [sp, #20]
 8005ae2:	42b5      	cmp	r5, r6
 8005ae4:	d00b      	beq.n	8005afe <_svfiprintf_r+0x72>
 8005ae6:	0032      	movs	r2, r6
 8005ae8:	0039      	movs	r1, r7
 8005aea:	9803      	ldr	r0, [sp, #12]
 8005aec:	f7ff ff6e 	bl	80059cc <__ssputs_r>
 8005af0:	3001      	adds	r0, #1
 8005af2:	d100      	bne.n	8005af6 <_svfiprintf_r+0x6a>
 8005af4:	e0ae      	b.n	8005c54 <_svfiprintf_r+0x1c8>
 8005af6:	6963      	ldr	r3, [r4, #20]
 8005af8:	9a05      	ldr	r2, [sp, #20]
 8005afa:	189b      	adds	r3, r3, r2
 8005afc:	6163      	str	r3, [r4, #20]
 8005afe:	782b      	ldrb	r3, [r5, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d100      	bne.n	8005b06 <_svfiprintf_r+0x7a>
 8005b04:	e0a6      	b.n	8005c54 <_svfiprintf_r+0x1c8>
 8005b06:	2201      	movs	r2, #1
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4252      	negs	r2, r2
 8005b0c:	6062      	str	r2, [r4, #4]
 8005b0e:	a904      	add	r1, sp, #16
 8005b10:	3254      	adds	r2, #84	@ 0x54
 8005b12:	1852      	adds	r2, r2, r1
 8005b14:	1c6e      	adds	r6, r5, #1
 8005b16:	6023      	str	r3, [r4, #0]
 8005b18:	60e3      	str	r3, [r4, #12]
 8005b1a:	60a3      	str	r3, [r4, #8]
 8005b1c:	7013      	strb	r3, [r2, #0]
 8005b1e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005b20:	4b54      	ldr	r3, [pc, #336]	@ (8005c74 <_svfiprintf_r+0x1e8>)
 8005b22:	2205      	movs	r2, #5
 8005b24:	0018      	movs	r0, r3
 8005b26:	7831      	ldrb	r1, [r6, #0]
 8005b28:	9305      	str	r3, [sp, #20]
 8005b2a:	f000 fa4d 	bl	8005fc8 <memchr>
 8005b2e:	1c75      	adds	r5, r6, #1
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d11f      	bne.n	8005b74 <_svfiprintf_r+0xe8>
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	06d3      	lsls	r3, r2, #27
 8005b38:	d504      	bpl.n	8005b44 <_svfiprintf_r+0xb8>
 8005b3a:	2353      	movs	r3, #83	@ 0x53
 8005b3c:	a904      	add	r1, sp, #16
 8005b3e:	185b      	adds	r3, r3, r1
 8005b40:	2120      	movs	r1, #32
 8005b42:	7019      	strb	r1, [r3, #0]
 8005b44:	0713      	lsls	r3, r2, #28
 8005b46:	d504      	bpl.n	8005b52 <_svfiprintf_r+0xc6>
 8005b48:	2353      	movs	r3, #83	@ 0x53
 8005b4a:	a904      	add	r1, sp, #16
 8005b4c:	185b      	adds	r3, r3, r1
 8005b4e:	212b      	movs	r1, #43	@ 0x2b
 8005b50:	7019      	strb	r1, [r3, #0]
 8005b52:	7833      	ldrb	r3, [r6, #0]
 8005b54:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b56:	d016      	beq.n	8005b86 <_svfiprintf_r+0xfa>
 8005b58:	0035      	movs	r5, r6
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	200a      	movs	r0, #10
 8005b5e:	68e3      	ldr	r3, [r4, #12]
 8005b60:	782a      	ldrb	r2, [r5, #0]
 8005b62:	1c6e      	adds	r6, r5, #1
 8005b64:	3a30      	subs	r2, #48	@ 0x30
 8005b66:	2a09      	cmp	r2, #9
 8005b68:	d950      	bls.n	8005c0c <_svfiprintf_r+0x180>
 8005b6a:	2900      	cmp	r1, #0
 8005b6c:	d111      	bne.n	8005b92 <_svfiprintf_r+0x106>
 8005b6e:	e017      	b.n	8005ba0 <_svfiprintf_r+0x114>
 8005b70:	3501      	adds	r5, #1
 8005b72:	e7af      	b.n	8005ad4 <_svfiprintf_r+0x48>
 8005b74:	9b05      	ldr	r3, [sp, #20]
 8005b76:	6822      	ldr	r2, [r4, #0]
 8005b78:	1ac0      	subs	r0, r0, r3
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4083      	lsls	r3, r0
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	002e      	movs	r6, r5
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	e7cc      	b.n	8005b20 <_svfiprintf_r+0x94>
 8005b86:	9b07      	ldr	r3, [sp, #28]
 8005b88:	1d19      	adds	r1, r3, #4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	9107      	str	r1, [sp, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	db01      	blt.n	8005b96 <_svfiprintf_r+0x10a>
 8005b92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b94:	e004      	b.n	8005ba0 <_svfiprintf_r+0x114>
 8005b96:	425b      	negs	r3, r3
 8005b98:	60e3      	str	r3, [r4, #12]
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	782b      	ldrb	r3, [r5, #0]
 8005ba2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ba4:	d10c      	bne.n	8005bc0 <_svfiprintf_r+0x134>
 8005ba6:	786b      	ldrb	r3, [r5, #1]
 8005ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005baa:	d134      	bne.n	8005c16 <_svfiprintf_r+0x18a>
 8005bac:	9b07      	ldr	r3, [sp, #28]
 8005bae:	3502      	adds	r5, #2
 8005bb0:	1d1a      	adds	r2, r3, #4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	9207      	str	r2, [sp, #28]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	da01      	bge.n	8005bbe <_svfiprintf_r+0x132>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	425b      	negs	r3, r3
 8005bbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bc0:	4e2d      	ldr	r6, [pc, #180]	@ (8005c78 <_svfiprintf_r+0x1ec>)
 8005bc2:	2203      	movs	r2, #3
 8005bc4:	0030      	movs	r0, r6
 8005bc6:	7829      	ldrb	r1, [r5, #0]
 8005bc8:	f000 f9fe 	bl	8005fc8 <memchr>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d006      	beq.n	8005bde <_svfiprintf_r+0x152>
 8005bd0:	2340      	movs	r3, #64	@ 0x40
 8005bd2:	1b80      	subs	r0, r0, r6
 8005bd4:	4083      	lsls	r3, r0
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	3501      	adds	r5, #1
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	7829      	ldrb	r1, [r5, #0]
 8005be0:	2206      	movs	r2, #6
 8005be2:	4826      	ldr	r0, [pc, #152]	@ (8005c7c <_svfiprintf_r+0x1f0>)
 8005be4:	1c6e      	adds	r6, r5, #1
 8005be6:	7621      	strb	r1, [r4, #24]
 8005be8:	f000 f9ee 	bl	8005fc8 <memchr>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d038      	beq.n	8005c62 <_svfiprintf_r+0x1d6>
 8005bf0:	4b23      	ldr	r3, [pc, #140]	@ (8005c80 <_svfiprintf_r+0x1f4>)
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d122      	bne.n	8005c3c <_svfiprintf_r+0x1b0>
 8005bf6:	2207      	movs	r2, #7
 8005bf8:	9b07      	ldr	r3, [sp, #28]
 8005bfa:	3307      	adds	r3, #7
 8005bfc:	4393      	bics	r3, r2
 8005bfe:	3308      	adds	r3, #8
 8005c00:	9307      	str	r3, [sp, #28]
 8005c02:	6963      	ldr	r3, [r4, #20]
 8005c04:	9a04      	ldr	r2, [sp, #16]
 8005c06:	189b      	adds	r3, r3, r2
 8005c08:	6163      	str	r3, [r4, #20]
 8005c0a:	e762      	b.n	8005ad2 <_svfiprintf_r+0x46>
 8005c0c:	4343      	muls	r3, r0
 8005c0e:	0035      	movs	r5, r6
 8005c10:	2101      	movs	r1, #1
 8005c12:	189b      	adds	r3, r3, r2
 8005c14:	e7a4      	b.n	8005b60 <_svfiprintf_r+0xd4>
 8005c16:	2300      	movs	r3, #0
 8005c18:	200a      	movs	r0, #10
 8005c1a:	0019      	movs	r1, r3
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	6063      	str	r3, [r4, #4]
 8005c20:	782a      	ldrb	r2, [r5, #0]
 8005c22:	1c6e      	adds	r6, r5, #1
 8005c24:	3a30      	subs	r2, #48	@ 0x30
 8005c26:	2a09      	cmp	r2, #9
 8005c28:	d903      	bls.n	8005c32 <_svfiprintf_r+0x1a6>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0c8      	beq.n	8005bc0 <_svfiprintf_r+0x134>
 8005c2e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c30:	e7c6      	b.n	8005bc0 <_svfiprintf_r+0x134>
 8005c32:	4341      	muls	r1, r0
 8005c34:	0035      	movs	r5, r6
 8005c36:	2301      	movs	r3, #1
 8005c38:	1889      	adds	r1, r1, r2
 8005c3a:	e7f1      	b.n	8005c20 <_svfiprintf_r+0x194>
 8005c3c:	aa07      	add	r2, sp, #28
 8005c3e:	9200      	str	r2, [sp, #0]
 8005c40:	0021      	movs	r1, r4
 8005c42:	003a      	movs	r2, r7
 8005c44:	4b0f      	ldr	r3, [pc, #60]	@ (8005c84 <_svfiprintf_r+0x1f8>)
 8005c46:	9803      	ldr	r0, [sp, #12]
 8005c48:	e000      	b.n	8005c4c <_svfiprintf_r+0x1c0>
 8005c4a:	bf00      	nop
 8005c4c:	9004      	str	r0, [sp, #16]
 8005c4e:	9b04      	ldr	r3, [sp, #16]
 8005c50:	3301      	adds	r3, #1
 8005c52:	d1d6      	bne.n	8005c02 <_svfiprintf_r+0x176>
 8005c54:	89bb      	ldrh	r3, [r7, #12]
 8005c56:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005c58:	065b      	lsls	r3, r3, #25
 8005c5a:	d500      	bpl.n	8005c5e <_svfiprintf_r+0x1d2>
 8005c5c:	e72c      	b.n	8005ab8 <_svfiprintf_r+0x2c>
 8005c5e:	b021      	add	sp, #132	@ 0x84
 8005c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c62:	aa07      	add	r2, sp, #28
 8005c64:	9200      	str	r2, [sp, #0]
 8005c66:	0021      	movs	r1, r4
 8005c68:	003a      	movs	r2, r7
 8005c6a:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <_svfiprintf_r+0x1f8>)
 8005c6c:	9803      	ldr	r0, [sp, #12]
 8005c6e:	f000 f87b 	bl	8005d68 <_printf_i>
 8005c72:	e7eb      	b.n	8005c4c <_svfiprintf_r+0x1c0>
 8005c74:	08006150 	.word	0x08006150
 8005c78:	08006156 	.word	0x08006156
 8005c7c:	0800615a 	.word	0x0800615a
 8005c80:	00000000 	.word	0x00000000
 8005c84:	080059cd 	.word	0x080059cd

08005c88 <_printf_common>:
 8005c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c8a:	0016      	movs	r6, r2
 8005c8c:	9301      	str	r3, [sp, #4]
 8005c8e:	688a      	ldr	r2, [r1, #8]
 8005c90:	690b      	ldr	r3, [r1, #16]
 8005c92:	000c      	movs	r4, r1
 8005c94:	9000      	str	r0, [sp, #0]
 8005c96:	4293      	cmp	r3, r2
 8005c98:	da00      	bge.n	8005c9c <_printf_common+0x14>
 8005c9a:	0013      	movs	r3, r2
 8005c9c:	0022      	movs	r2, r4
 8005c9e:	6033      	str	r3, [r6, #0]
 8005ca0:	3243      	adds	r2, #67	@ 0x43
 8005ca2:	7812      	ldrb	r2, [r2, #0]
 8005ca4:	2a00      	cmp	r2, #0
 8005ca6:	d001      	beq.n	8005cac <_printf_common+0x24>
 8005ca8:	3301      	adds	r3, #1
 8005caa:	6033      	str	r3, [r6, #0]
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	069b      	lsls	r3, r3, #26
 8005cb0:	d502      	bpl.n	8005cb8 <_printf_common+0x30>
 8005cb2:	6833      	ldr	r3, [r6, #0]
 8005cb4:	3302      	adds	r3, #2
 8005cb6:	6033      	str	r3, [r6, #0]
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	2306      	movs	r3, #6
 8005cbc:	0015      	movs	r5, r2
 8005cbe:	401d      	ands	r5, r3
 8005cc0:	421a      	tst	r2, r3
 8005cc2:	d027      	beq.n	8005d14 <_printf_common+0x8c>
 8005cc4:	0023      	movs	r3, r4
 8005cc6:	3343      	adds	r3, #67	@ 0x43
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	1e5a      	subs	r2, r3, #1
 8005ccc:	4193      	sbcs	r3, r2
 8005cce:	6822      	ldr	r2, [r4, #0]
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d430      	bmi.n	8005d36 <_printf_common+0xae>
 8005cd4:	0022      	movs	r2, r4
 8005cd6:	9901      	ldr	r1, [sp, #4]
 8005cd8:	9800      	ldr	r0, [sp, #0]
 8005cda:	9d08      	ldr	r5, [sp, #32]
 8005cdc:	3243      	adds	r2, #67	@ 0x43
 8005cde:	47a8      	blx	r5
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d025      	beq.n	8005d30 <_printf_common+0xa8>
 8005ce4:	2206      	movs	r2, #6
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	2500      	movs	r5, #0
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d105      	bne.n	8005cfc <_printf_common+0x74>
 8005cf0:	6833      	ldr	r3, [r6, #0]
 8005cf2:	68e5      	ldr	r5, [r4, #12]
 8005cf4:	1aed      	subs	r5, r5, r3
 8005cf6:	43eb      	mvns	r3, r5
 8005cf8:	17db      	asrs	r3, r3, #31
 8005cfa:	401d      	ands	r5, r3
 8005cfc:	68a3      	ldr	r3, [r4, #8]
 8005cfe:	6922      	ldr	r2, [r4, #16]
 8005d00:	4293      	cmp	r3, r2
 8005d02:	dd01      	ble.n	8005d08 <_printf_common+0x80>
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	18ed      	adds	r5, r5, r3
 8005d08:	2600      	movs	r6, #0
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d120      	bne.n	8005d50 <_printf_common+0xc8>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e010      	b.n	8005d34 <_printf_common+0xac>
 8005d12:	3501      	adds	r5, #1
 8005d14:	68e3      	ldr	r3, [r4, #12]
 8005d16:	6832      	ldr	r2, [r6, #0]
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	42ab      	cmp	r3, r5
 8005d1c:	ddd2      	ble.n	8005cc4 <_printf_common+0x3c>
 8005d1e:	0022      	movs	r2, r4
 8005d20:	2301      	movs	r3, #1
 8005d22:	9901      	ldr	r1, [sp, #4]
 8005d24:	9800      	ldr	r0, [sp, #0]
 8005d26:	9f08      	ldr	r7, [sp, #32]
 8005d28:	3219      	adds	r2, #25
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d1f0      	bne.n	8005d12 <_printf_common+0x8a>
 8005d30:	2001      	movs	r0, #1
 8005d32:	4240      	negs	r0, r0
 8005d34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d36:	2030      	movs	r0, #48	@ 0x30
 8005d38:	18e1      	adds	r1, r4, r3
 8005d3a:	3143      	adds	r1, #67	@ 0x43
 8005d3c:	7008      	strb	r0, [r1, #0]
 8005d3e:	0021      	movs	r1, r4
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	3145      	adds	r1, #69	@ 0x45
 8005d44:	7809      	ldrb	r1, [r1, #0]
 8005d46:	18a2      	adds	r2, r4, r2
 8005d48:	3243      	adds	r2, #67	@ 0x43
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	7011      	strb	r1, [r2, #0]
 8005d4e:	e7c1      	b.n	8005cd4 <_printf_common+0x4c>
 8005d50:	0022      	movs	r2, r4
 8005d52:	2301      	movs	r3, #1
 8005d54:	9901      	ldr	r1, [sp, #4]
 8005d56:	9800      	ldr	r0, [sp, #0]
 8005d58:	9f08      	ldr	r7, [sp, #32]
 8005d5a:	321a      	adds	r2, #26
 8005d5c:	47b8      	blx	r7
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d0e6      	beq.n	8005d30 <_printf_common+0xa8>
 8005d62:	3601      	adds	r6, #1
 8005d64:	e7d1      	b.n	8005d0a <_printf_common+0x82>
	...

08005d68 <_printf_i>:
 8005d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d6a:	b08b      	sub	sp, #44	@ 0x2c
 8005d6c:	9206      	str	r2, [sp, #24]
 8005d6e:	000a      	movs	r2, r1
 8005d70:	3243      	adds	r2, #67	@ 0x43
 8005d72:	9307      	str	r3, [sp, #28]
 8005d74:	9005      	str	r0, [sp, #20]
 8005d76:	9203      	str	r2, [sp, #12]
 8005d78:	7e0a      	ldrb	r2, [r1, #24]
 8005d7a:	000c      	movs	r4, r1
 8005d7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d7e:	2a78      	cmp	r2, #120	@ 0x78
 8005d80:	d809      	bhi.n	8005d96 <_printf_i+0x2e>
 8005d82:	2a62      	cmp	r2, #98	@ 0x62
 8005d84:	d80b      	bhi.n	8005d9e <_printf_i+0x36>
 8005d86:	2a00      	cmp	r2, #0
 8005d88:	d100      	bne.n	8005d8c <_printf_i+0x24>
 8005d8a:	e0ba      	b.n	8005f02 <_printf_i+0x19a>
 8005d8c:	497a      	ldr	r1, [pc, #488]	@ (8005f78 <_printf_i+0x210>)
 8005d8e:	9104      	str	r1, [sp, #16]
 8005d90:	2a58      	cmp	r2, #88	@ 0x58
 8005d92:	d100      	bne.n	8005d96 <_printf_i+0x2e>
 8005d94:	e08e      	b.n	8005eb4 <_printf_i+0x14c>
 8005d96:	0025      	movs	r5, r4
 8005d98:	3542      	adds	r5, #66	@ 0x42
 8005d9a:	702a      	strb	r2, [r5, #0]
 8005d9c:	e022      	b.n	8005de4 <_printf_i+0x7c>
 8005d9e:	0010      	movs	r0, r2
 8005da0:	3863      	subs	r0, #99	@ 0x63
 8005da2:	2815      	cmp	r0, #21
 8005da4:	d8f7      	bhi.n	8005d96 <_printf_i+0x2e>
 8005da6:	f7fa f9b7 	bl	8000118 <__gnu_thumb1_case_shi>
 8005daa:	0016      	.short	0x0016
 8005dac:	fff6001f 	.word	0xfff6001f
 8005db0:	fff6fff6 	.word	0xfff6fff6
 8005db4:	001ffff6 	.word	0x001ffff6
 8005db8:	fff6fff6 	.word	0xfff6fff6
 8005dbc:	fff6fff6 	.word	0xfff6fff6
 8005dc0:	0036009f 	.word	0x0036009f
 8005dc4:	fff6007e 	.word	0xfff6007e
 8005dc8:	00b0fff6 	.word	0x00b0fff6
 8005dcc:	0036fff6 	.word	0x0036fff6
 8005dd0:	fff6fff6 	.word	0xfff6fff6
 8005dd4:	0082      	.short	0x0082
 8005dd6:	0025      	movs	r5, r4
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	3542      	adds	r5, #66	@ 0x42
 8005ddc:	1d11      	adds	r1, r2, #4
 8005dde:	6019      	str	r1, [r3, #0]
 8005de0:	6813      	ldr	r3, [r2, #0]
 8005de2:	702b      	strb	r3, [r5, #0]
 8005de4:	2301      	movs	r3, #1
 8005de6:	e09e      	b.n	8005f26 <_printf_i+0x1be>
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	6809      	ldr	r1, [r1, #0]
 8005dec:	1d02      	adds	r2, r0, #4
 8005dee:	060d      	lsls	r5, r1, #24
 8005df0:	d50b      	bpl.n	8005e0a <_printf_i+0xa2>
 8005df2:	6806      	ldr	r6, [r0, #0]
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	2e00      	cmp	r6, #0
 8005df8:	da03      	bge.n	8005e02 <_printf_i+0x9a>
 8005dfa:	232d      	movs	r3, #45	@ 0x2d
 8005dfc:	9a03      	ldr	r2, [sp, #12]
 8005dfe:	4276      	negs	r6, r6
 8005e00:	7013      	strb	r3, [r2, #0]
 8005e02:	4b5d      	ldr	r3, [pc, #372]	@ (8005f78 <_printf_i+0x210>)
 8005e04:	270a      	movs	r7, #10
 8005e06:	9304      	str	r3, [sp, #16]
 8005e08:	e018      	b.n	8005e3c <_printf_i+0xd4>
 8005e0a:	6806      	ldr	r6, [r0, #0]
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	0649      	lsls	r1, r1, #25
 8005e10:	d5f1      	bpl.n	8005df6 <_printf_i+0x8e>
 8005e12:	b236      	sxth	r6, r6
 8005e14:	e7ef      	b.n	8005df6 <_printf_i+0x8e>
 8005e16:	6808      	ldr	r0, [r1, #0]
 8005e18:	6819      	ldr	r1, [r3, #0]
 8005e1a:	c940      	ldmia	r1!, {r6}
 8005e1c:	0605      	lsls	r5, r0, #24
 8005e1e:	d402      	bmi.n	8005e26 <_printf_i+0xbe>
 8005e20:	0640      	lsls	r0, r0, #25
 8005e22:	d500      	bpl.n	8005e26 <_printf_i+0xbe>
 8005e24:	b2b6      	uxth	r6, r6
 8005e26:	6019      	str	r1, [r3, #0]
 8005e28:	4b53      	ldr	r3, [pc, #332]	@ (8005f78 <_printf_i+0x210>)
 8005e2a:	270a      	movs	r7, #10
 8005e2c:	9304      	str	r3, [sp, #16]
 8005e2e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005e30:	d100      	bne.n	8005e34 <_printf_i+0xcc>
 8005e32:	3f02      	subs	r7, #2
 8005e34:	0023      	movs	r3, r4
 8005e36:	2200      	movs	r2, #0
 8005e38:	3343      	adds	r3, #67	@ 0x43
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	6863      	ldr	r3, [r4, #4]
 8005e3e:	60a3      	str	r3, [r4, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	db06      	blt.n	8005e52 <_printf_i+0xea>
 8005e44:	2104      	movs	r1, #4
 8005e46:	6822      	ldr	r2, [r4, #0]
 8005e48:	9d03      	ldr	r5, [sp, #12]
 8005e4a:	438a      	bics	r2, r1
 8005e4c:	6022      	str	r2, [r4, #0]
 8005e4e:	4333      	orrs	r3, r6
 8005e50:	d00c      	beq.n	8005e6c <_printf_i+0x104>
 8005e52:	9d03      	ldr	r5, [sp, #12]
 8005e54:	0030      	movs	r0, r6
 8005e56:	0039      	movs	r1, r7
 8005e58:	f7fa f9ee 	bl	8000238 <__aeabi_uidivmod>
 8005e5c:	9b04      	ldr	r3, [sp, #16]
 8005e5e:	3d01      	subs	r5, #1
 8005e60:	5c5b      	ldrb	r3, [r3, r1]
 8005e62:	702b      	strb	r3, [r5, #0]
 8005e64:	0033      	movs	r3, r6
 8005e66:	0006      	movs	r6, r0
 8005e68:	429f      	cmp	r7, r3
 8005e6a:	d9f3      	bls.n	8005e54 <_printf_i+0xec>
 8005e6c:	2f08      	cmp	r7, #8
 8005e6e:	d109      	bne.n	8005e84 <_printf_i+0x11c>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	07db      	lsls	r3, r3, #31
 8005e74:	d506      	bpl.n	8005e84 <_printf_i+0x11c>
 8005e76:	6862      	ldr	r2, [r4, #4]
 8005e78:	6923      	ldr	r3, [r4, #16]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	dc02      	bgt.n	8005e84 <_printf_i+0x11c>
 8005e7e:	2330      	movs	r3, #48	@ 0x30
 8005e80:	3d01      	subs	r5, #1
 8005e82:	702b      	strb	r3, [r5, #0]
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	1b5b      	subs	r3, r3, r5
 8005e88:	6123      	str	r3, [r4, #16]
 8005e8a:	9b07      	ldr	r3, [sp, #28]
 8005e8c:	0021      	movs	r1, r4
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	9805      	ldr	r0, [sp, #20]
 8005e92:	9b06      	ldr	r3, [sp, #24]
 8005e94:	aa09      	add	r2, sp, #36	@ 0x24
 8005e96:	f7ff fef7 	bl	8005c88 <_printf_common>
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	d148      	bne.n	8005f30 <_printf_i+0x1c8>
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	4240      	negs	r0, r0
 8005ea2:	b00b      	add	sp, #44	@ 0x2c
 8005ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	6809      	ldr	r1, [r1, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	6022      	str	r2, [r4, #0]
 8005eae:	2278      	movs	r2, #120	@ 0x78
 8005eb0:	4932      	ldr	r1, [pc, #200]	@ (8005f7c <_printf_i+0x214>)
 8005eb2:	9104      	str	r1, [sp, #16]
 8005eb4:	0021      	movs	r1, r4
 8005eb6:	3145      	adds	r1, #69	@ 0x45
 8005eb8:	700a      	strb	r2, [r1, #0]
 8005eba:	6819      	ldr	r1, [r3, #0]
 8005ebc:	6822      	ldr	r2, [r4, #0]
 8005ebe:	c940      	ldmia	r1!, {r6}
 8005ec0:	0610      	lsls	r0, r2, #24
 8005ec2:	d402      	bmi.n	8005eca <_printf_i+0x162>
 8005ec4:	0650      	lsls	r0, r2, #25
 8005ec6:	d500      	bpl.n	8005eca <_printf_i+0x162>
 8005ec8:	b2b6      	uxth	r6, r6
 8005eca:	6019      	str	r1, [r3, #0]
 8005ecc:	07d3      	lsls	r3, r2, #31
 8005ece:	d502      	bpl.n	8005ed6 <_printf_i+0x16e>
 8005ed0:	2320      	movs	r3, #32
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	2e00      	cmp	r6, #0
 8005ed8:	d001      	beq.n	8005ede <_printf_i+0x176>
 8005eda:	2710      	movs	r7, #16
 8005edc:	e7aa      	b.n	8005e34 <_printf_i+0xcc>
 8005ede:	2220      	movs	r2, #32
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	4393      	bics	r3, r2
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	e7f8      	b.n	8005eda <_printf_i+0x172>
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	680d      	ldr	r5, [r1, #0]
 8005eec:	1d10      	adds	r0, r2, #4
 8005eee:	6949      	ldr	r1, [r1, #20]
 8005ef0:	6018      	str	r0, [r3, #0]
 8005ef2:	6813      	ldr	r3, [r2, #0]
 8005ef4:	062e      	lsls	r6, r5, #24
 8005ef6:	d501      	bpl.n	8005efc <_printf_i+0x194>
 8005ef8:	6019      	str	r1, [r3, #0]
 8005efa:	e002      	b.n	8005f02 <_printf_i+0x19a>
 8005efc:	066d      	lsls	r5, r5, #25
 8005efe:	d5fb      	bpl.n	8005ef8 <_printf_i+0x190>
 8005f00:	8019      	strh	r1, [r3, #0]
 8005f02:	2300      	movs	r3, #0
 8005f04:	9d03      	ldr	r5, [sp, #12]
 8005f06:	6123      	str	r3, [r4, #16]
 8005f08:	e7bf      	b.n	8005e8a <_printf_i+0x122>
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	1d11      	adds	r1, r2, #4
 8005f0e:	6019      	str	r1, [r3, #0]
 8005f10:	6815      	ldr	r5, [r2, #0]
 8005f12:	2100      	movs	r1, #0
 8005f14:	0028      	movs	r0, r5
 8005f16:	6862      	ldr	r2, [r4, #4]
 8005f18:	f000 f856 	bl	8005fc8 <memchr>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d001      	beq.n	8005f24 <_printf_i+0x1bc>
 8005f20:	1b40      	subs	r0, r0, r5
 8005f22:	6060      	str	r0, [r4, #4]
 8005f24:	6863      	ldr	r3, [r4, #4]
 8005f26:	6123      	str	r3, [r4, #16]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9a03      	ldr	r2, [sp, #12]
 8005f2c:	7013      	strb	r3, [r2, #0]
 8005f2e:	e7ac      	b.n	8005e8a <_printf_i+0x122>
 8005f30:	002a      	movs	r2, r5
 8005f32:	6923      	ldr	r3, [r4, #16]
 8005f34:	9906      	ldr	r1, [sp, #24]
 8005f36:	9805      	ldr	r0, [sp, #20]
 8005f38:	9d07      	ldr	r5, [sp, #28]
 8005f3a:	47a8      	blx	r5
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d0ae      	beq.n	8005e9e <_printf_i+0x136>
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	079b      	lsls	r3, r3, #30
 8005f44:	d415      	bmi.n	8005f72 <_printf_i+0x20a>
 8005f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f48:	68e0      	ldr	r0, [r4, #12]
 8005f4a:	4298      	cmp	r0, r3
 8005f4c:	daa9      	bge.n	8005ea2 <_printf_i+0x13a>
 8005f4e:	0018      	movs	r0, r3
 8005f50:	e7a7      	b.n	8005ea2 <_printf_i+0x13a>
 8005f52:	0022      	movs	r2, r4
 8005f54:	2301      	movs	r3, #1
 8005f56:	9906      	ldr	r1, [sp, #24]
 8005f58:	9805      	ldr	r0, [sp, #20]
 8005f5a:	9e07      	ldr	r6, [sp, #28]
 8005f5c:	3219      	adds	r2, #25
 8005f5e:	47b0      	blx	r6
 8005f60:	3001      	adds	r0, #1
 8005f62:	d09c      	beq.n	8005e9e <_printf_i+0x136>
 8005f64:	3501      	adds	r5, #1
 8005f66:	68e3      	ldr	r3, [r4, #12]
 8005f68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	42ab      	cmp	r3, r5
 8005f6e:	dcf0      	bgt.n	8005f52 <_printf_i+0x1ea>
 8005f70:	e7e9      	b.n	8005f46 <_printf_i+0x1de>
 8005f72:	2500      	movs	r5, #0
 8005f74:	e7f7      	b.n	8005f66 <_printf_i+0x1fe>
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	08006161 	.word	0x08006161
 8005f7c:	08006172 	.word	0x08006172

08005f80 <memmove>:
 8005f80:	b510      	push	{r4, lr}
 8005f82:	4288      	cmp	r0, r1
 8005f84:	d902      	bls.n	8005f8c <memmove+0xc>
 8005f86:	188b      	adds	r3, r1, r2
 8005f88:	4298      	cmp	r0, r3
 8005f8a:	d308      	bcc.n	8005f9e <memmove+0x1e>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d007      	beq.n	8005fa2 <memmove+0x22>
 8005f92:	5ccc      	ldrb	r4, [r1, r3]
 8005f94:	54c4      	strb	r4, [r0, r3]
 8005f96:	3301      	adds	r3, #1
 8005f98:	e7f9      	b.n	8005f8e <memmove+0xe>
 8005f9a:	5c8b      	ldrb	r3, [r1, r2]
 8005f9c:	5483      	strb	r3, [r0, r2]
 8005f9e:	3a01      	subs	r2, #1
 8005fa0:	d2fb      	bcs.n	8005f9a <memmove+0x1a>
 8005fa2:	bd10      	pop	{r4, pc}

08005fa4 <_sbrk_r>:
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	b570      	push	{r4, r5, r6, lr}
 8005fa8:	4d06      	ldr	r5, [pc, #24]	@ (8005fc4 <_sbrk_r+0x20>)
 8005faa:	0004      	movs	r4, r0
 8005fac:	0008      	movs	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fc fbf6 	bl	80027a0 <_sbrk>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d103      	bne.n	8005fc0 <_sbrk_r+0x1c>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d000      	beq.n	8005fc0 <_sbrk_r+0x1c>
 8005fbe:	6023      	str	r3, [r4, #0]
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
 8005fc2:	46c0      	nop			@ (mov r8, r8)
 8005fc4:	20000310 	.word	0x20000310

08005fc8 <memchr>:
 8005fc8:	b2c9      	uxtb	r1, r1
 8005fca:	1882      	adds	r2, r0, r2
 8005fcc:	4290      	cmp	r0, r2
 8005fce:	d101      	bne.n	8005fd4 <memchr+0xc>
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	4770      	bx	lr
 8005fd4:	7803      	ldrb	r3, [r0, #0]
 8005fd6:	428b      	cmp	r3, r1
 8005fd8:	d0fb      	beq.n	8005fd2 <memchr+0xa>
 8005fda:	3001      	adds	r0, #1
 8005fdc:	e7f6      	b.n	8005fcc <memchr+0x4>

08005fde <memcpy>:
 8005fde:	2300      	movs	r3, #0
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d100      	bne.n	8005fe8 <memcpy+0xa>
 8005fe6:	bd10      	pop	{r4, pc}
 8005fe8:	5ccc      	ldrb	r4, [r1, r3]
 8005fea:	54c4      	strb	r4, [r0, r3]
 8005fec:	3301      	adds	r3, #1
 8005fee:	e7f8      	b.n	8005fe2 <memcpy+0x4>

08005ff0 <_realloc_r>:
 8005ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ff2:	0006      	movs	r6, r0
 8005ff4:	000c      	movs	r4, r1
 8005ff6:	0015      	movs	r5, r2
 8005ff8:	2900      	cmp	r1, #0
 8005ffa:	d105      	bne.n	8006008 <_realloc_r+0x18>
 8005ffc:	0011      	movs	r1, r2
 8005ffe:	f7ff fc55 	bl	80058ac <_malloc_r>
 8006002:	0004      	movs	r4, r0
 8006004:	0020      	movs	r0, r4
 8006006:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006008:	2a00      	cmp	r2, #0
 800600a:	d103      	bne.n	8006014 <_realloc_r+0x24>
 800600c:	f7ff fbe2 	bl	80057d4 <_free_r>
 8006010:	002c      	movs	r4, r5
 8006012:	e7f7      	b.n	8006004 <_realloc_r+0x14>
 8006014:	f000 f81c 	bl	8006050 <_malloc_usable_size_r>
 8006018:	0007      	movs	r7, r0
 800601a:	4285      	cmp	r5, r0
 800601c:	d802      	bhi.n	8006024 <_realloc_r+0x34>
 800601e:	0843      	lsrs	r3, r0, #1
 8006020:	42ab      	cmp	r3, r5
 8006022:	d3ef      	bcc.n	8006004 <_realloc_r+0x14>
 8006024:	0029      	movs	r1, r5
 8006026:	0030      	movs	r0, r6
 8006028:	f7ff fc40 	bl	80058ac <_malloc_r>
 800602c:	9001      	str	r0, [sp, #4]
 800602e:	2800      	cmp	r0, #0
 8006030:	d101      	bne.n	8006036 <_realloc_r+0x46>
 8006032:	9c01      	ldr	r4, [sp, #4]
 8006034:	e7e6      	b.n	8006004 <_realloc_r+0x14>
 8006036:	002a      	movs	r2, r5
 8006038:	42bd      	cmp	r5, r7
 800603a:	d900      	bls.n	800603e <_realloc_r+0x4e>
 800603c:	003a      	movs	r2, r7
 800603e:	0021      	movs	r1, r4
 8006040:	9801      	ldr	r0, [sp, #4]
 8006042:	f7ff ffcc 	bl	8005fde <memcpy>
 8006046:	0021      	movs	r1, r4
 8006048:	0030      	movs	r0, r6
 800604a:	f7ff fbc3 	bl	80057d4 <_free_r>
 800604e:	e7f0      	b.n	8006032 <_realloc_r+0x42>

08006050 <_malloc_usable_size_r>:
 8006050:	1f0b      	subs	r3, r1, #4
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	1f18      	subs	r0, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	da01      	bge.n	800605e <_malloc_usable_size_r+0xe>
 800605a:	580b      	ldr	r3, [r1, r0]
 800605c:	18c0      	adds	r0, r0, r3
 800605e:	4770      	bx	lr

08006060 <_init>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	46c0      	nop			@ (mov r8, r8)
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr

0800606c <_fini>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	46c0      	nop			@ (mov r8, r8)
 8006070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006072:	bc08      	pop	{r3}
 8006074:	469e      	mov	lr, r3
 8006076:	4770      	bx	lr
