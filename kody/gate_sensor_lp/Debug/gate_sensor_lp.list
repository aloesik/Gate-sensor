
gate_sensor_lp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000271c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080027dc  080027dc  000037dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002864  08002864  0000402c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002864  08002864  0000402c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002864  08002864  0000402c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002864  08002864  00003864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002868  08002868  00003868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  0800286c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000002c  08002898  0000402c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08002898  000041cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e759  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a5  00000000  00000000  000227ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00011c77  00000000  00000000  00025b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  000377d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001042  00000000  00000000  000388d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001595e  00000000  00000000  00039912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001faa0  00000000  00000000  0004f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000855b3  00000000  00000000  0006ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f42c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f48  00000000  00000000  000f4308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  000f7250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080027c4 	.word	0x080027c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	080027c4 	.word	0x080027c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <null_ptr_check>:

static int8_t null_ptr_check(const struct bma400_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->intf_ptr == NULL))
 80003f4:	2800      	cmp	r0, #0
 80003f6:	d00a      	beq.n	800040e <null_ptr_check+0x1a>
 80003f8:	68c3      	ldr	r3, [r0, #12]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d00a      	beq.n	8000414 <null_ptr_check+0x20>
 80003fe:	6903      	ldr	r3, [r0, #16]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d00a      	beq.n	800041a <null_ptr_check+0x26>
 8000404:	6840      	ldr	r0, [r0, #4]
 8000406:	4243      	negs	r3, r0
 8000408:	4158      	adcs	r0, r3
 800040a:	4240      	negs	r0, r0
        /* Device structure is fine */
        rslt = BMA400_OK;
    }

    return rslt;
}
 800040c:	4770      	bx	lr
        rslt = BMA400_E_NULL_PTR;
 800040e:	2001      	movs	r0, #1
 8000410:	4240      	negs	r0, r0
 8000412:	e7fb      	b.n	800040c <null_ptr_check+0x18>
 8000414:	2001      	movs	r0, #1
 8000416:	4240      	negs	r0, r0
 8000418:	e7f8      	b.n	800040c <null_ptr_check+0x18>
 800041a:	2001      	movs	r0, #1
 800041c:	4240      	negs	r0, r0
 800041e:	e7f5      	b.n	800040c <null_ptr_check+0x18>

08000420 <bma400_set_regs>:
{
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	46ce      	mov	lr, r9
 8000424:	4647      	mov	r7, r8
 8000426:	b580      	push	{r7, lr}
 8000428:	4680      	mov	r8, r0
 800042a:	000f      	movs	r7, r1
 800042c:	4691      	mov	r9, r2
 800042e:	001e      	movs	r6, r3
    rslt = null_ptr_check(dev);
 8000430:	0018      	movs	r0, r3
 8000432:	f7ff ffdf 	bl	80003f4 <null_ptr_check>
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8000436:	2800      	cmp	r0, #0
 8000438:	d124      	bne.n	8000484 <bma400_set_regs+0x64>
 800043a:	2f00      	cmp	r7, #0
 800043c:	d025      	beq.n	800048a <bma400_set_regs+0x6a>
        if (len == 1)
 800043e:	464b      	mov	r3, r9
 8000440:	2b01      	cmp	r3, #1
 8000442:	d013      	beq.n	800046c <bma400_set_regs+0x4c>
        if (len > 1)
 8000444:	d926      	bls.n	8000494 <bma400_set_regs+0x74>
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8000446:	2500      	movs	r5, #0
 8000448:	2100      	movs	r1, #0
                dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr);
 800044a:	6873      	ldr	r3, [r6, #4]
 800044c:	1879      	adds	r1, r7, r1
 800044e:	4642      	mov	r2, r8
 8000450:	1950      	adds	r0, r2, r5
 8000452:	b2c0      	uxtb	r0, r0
 8000454:	6934      	ldr	r4, [r6, #16]
 8000456:	2201      	movs	r2, #1
 8000458:	47a0      	blx	r4
 800045a:	7730      	strb	r0, [r6, #28]
                if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 800045c:	2800      	cmp	r0, #0
 800045e:	d117      	bne.n	8000490 <bma400_set_regs+0x70>
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8000460:	3501      	adds	r5, #1
 8000462:	b2ed      	uxtb	r5, r5
 8000464:	0029      	movs	r1, r5
 8000466:	454d      	cmp	r5, r9
 8000468:	d3ef      	bcc.n	800044a <bma400_set_regs+0x2a>
 800046a:	e013      	b.n	8000494 <bma400_set_regs+0x74>
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 800046c:	6873      	ldr	r3, [r6, #4]
 800046e:	6934      	ldr	r4, [r6, #16]
 8000470:	2201      	movs	r2, #1
 8000472:	0039      	movs	r1, r7
 8000474:	4640      	mov	r0, r8
 8000476:	47a0      	blx	r4
 8000478:	7730      	strb	r0, [r6, #28]
            if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 800047a:	2800      	cmp	r0, #0
 800047c:	d00a      	beq.n	8000494 <bma400_set_regs+0x74>
                rslt = BMA400_E_COM_FAIL;
 800047e:	2002      	movs	r0, #2
 8000480:	4240      	negs	r0, r0
    return rslt;
 8000482:	e007      	b.n	8000494 <bma400_set_regs+0x74>
        rslt = BMA400_E_NULL_PTR;
 8000484:	2001      	movs	r0, #1
 8000486:	4240      	negs	r0, r0
 8000488:	e004      	b.n	8000494 <bma400_set_regs+0x74>
 800048a:	2001      	movs	r0, #1
 800048c:	4240      	negs	r0, r0
 800048e:	e001      	b.n	8000494 <bma400_set_regs+0x74>
                    rslt = BMA400_E_COM_FAIL;
 8000490:	2002      	movs	r0, #2
 8000492:	4240      	negs	r0, r0
}
 8000494:	bcc0      	pop	{r6, r7}
 8000496:	46b9      	mov	r9, r7
 8000498:	46b0      	mov	r8, r6
 800049a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800049c <bma400_get_regs>:
{
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	46c6      	mov	lr, r8
 80004a0:	b500      	push	{lr}
 80004a2:	b0a0      	sub	sp, #128	@ 0x80
 80004a4:	0004      	movs	r4, r0
 80004a6:	4688      	mov	r8, r1
 80004a8:	0017      	movs	r7, r2
 80004aa:	001d      	movs	r5, r3
    rslt = null_ptr_check(dev);
 80004ac:	0018      	movs	r0, r3
 80004ae:	f7ff ffa1 	bl	80003f4 <null_ptr_check>
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d124      	bne.n	8000500 <bma400_get_regs+0x64>
 80004b6:	4643      	mov	r3, r8
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d024      	beq.n	8000506 <bma400_get_regs+0x6a>
        if (dev->intf != BMA400_I2C_INTF)
 80004bc:	786b      	ldrb	r3, [r5, #1]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d001      	beq.n	80004c6 <bma400_get_regs+0x2a>
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 80004c2:	2380      	movs	r3, #128	@ 0x80
 80004c4:	431c      	orrs	r4, r3
        dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr);
 80004c6:	686b      	ldr	r3, [r5, #4]
 80004c8:	7a2a      	ldrb	r2, [r5, #8]
 80004ca:	19d2      	adds	r2, r2, r7
 80004cc:	68ee      	ldr	r6, [r5, #12]
 80004ce:	4669      	mov	r1, sp
 80004d0:	0020      	movs	r0, r4
 80004d2:	47b0      	blx	r6
 80004d4:	7728      	strb	r0, [r5, #28]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 80004d6:	2800      	cmp	r0, #0
 80004d8:	d118      	bne.n	800050c <bma400_get_regs+0x70>
            for (index = 0; index < len; index++)
 80004da:	2f00      	cmp	r7, #0
 80004dc:	d00c      	beq.n	80004f8 <bma400_get_regs+0x5c>
 80004de:	2400      	movs	r4, #0
 80004e0:	2300      	movs	r3, #0
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 80004e2:	7a2e      	ldrb	r6, [r5, #8]
 80004e4:	0022      	movs	r2, r4
 80004e6:	446a      	add	r2, sp
 80004e8:	5d96      	ldrb	r6, [r2, r6]
 80004ea:	4642      	mov	r2, r8
 80004ec:	54d6      	strb	r6, [r2, r3]
            for (index = 0; index < len; index++)
 80004ee:	3401      	adds	r4, #1
 80004f0:	b2a4      	uxth	r4, r4
 80004f2:	0023      	movs	r3, r4
 80004f4:	42bc      	cmp	r4, r7
 80004f6:	d3f4      	bcc.n	80004e2 <bma400_get_regs+0x46>
}
 80004f8:	b020      	add	sp, #128	@ 0x80
 80004fa:	bc80      	pop	{r7}
 80004fc:	46b8      	mov	r8, r7
 80004fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMA400_E_NULL_PTR;
 8000500:	2001      	movs	r0, #1
 8000502:	4240      	negs	r0, r0
 8000504:	e7f8      	b.n	80004f8 <bma400_get_regs+0x5c>
 8000506:	2001      	movs	r0, #1
 8000508:	4240      	negs	r0, r0
 800050a:	e7f5      	b.n	80004f8 <bma400_get_regs+0x5c>
            rslt = BMA400_E_COM_FAIL;
 800050c:	2002      	movs	r0, #2
 800050e:	4240      	negs	r0, r0
 8000510:	e7f2      	b.n	80004f8 <bma400_get_regs+0x5c>
	...

08000514 <bma400_init>:
{
 8000514:	b510      	push	{r4, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	0004      	movs	r4, r0
    uint8_t chip_id = 0;
 800051a:	466b      	mov	r3, sp
 800051c:	2200      	movs	r2, #0
 800051e:	71da      	strb	r2, [r3, #7]
    rslt = null_ptr_check(dev);
 8000520:	f7ff ff68 	bl	80003f4 <null_ptr_check>
    if (rslt == BMA400_OK)
 8000524:	2800      	cmp	r0, #0
 8000526:	d123      	bne.n	8000570 <bma400_init+0x5c>
        dev->delay_us(5000, dev->intf_ptr);
 8000528:	6861      	ldr	r1, [r4, #4]
 800052a:	6963      	ldr	r3, [r4, #20]
 800052c:	4813      	ldr	r0, [pc, #76]	@ (800057c <bma400_init+0x68>)
 800052e:	4798      	blx	r3
        if (dev->intf == BMA400_SPI_INTF)
 8000530:	7863      	ldrb	r3, [r4, #1]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d011      	beq.n	800055a <bma400_init+0x46>
            dev->dummy_byte = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	7223      	strb	r3, [r4, #8]
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 800053a:	0023      	movs	r3, r4
 800053c:	2201      	movs	r2, #1
 800053e:	4669      	mov	r1, sp
 8000540:	3107      	adds	r1, #7
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffaa 	bl	800049c <bma400_get_regs>
            if (rslt == BMA400_OK)
 8000548:	2800      	cmp	r0, #0
 800054a:	d111      	bne.n	8000570 <bma400_init+0x5c>
                if (chip_id == BMA400_CHIP_ID)
 800054c:	466b      	mov	r3, sp
 800054e:	3307      	adds	r3, #7
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b90      	cmp	r3, #144	@ 0x90
 8000554:	d10e      	bne.n	8000574 <bma400_init+0x60>
                    dev->chip_id = chip_id;
 8000556:	7023      	strb	r3, [r4, #0]
 8000558:	e00a      	b.n	8000570 <bma400_init+0x5c>
            dev->dummy_byte = 1;
 800055a:	3301      	adds	r3, #1
 800055c:	7223      	strb	r3, [r4, #8]
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 800055e:	0023      	movs	r3, r4
 8000560:	2201      	movs	r2, #1
 8000562:	4669      	mov	r1, sp
 8000564:	3107      	adds	r1, #7
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ff98 	bl	800049c <bma400_get_regs>
        if (rslt == BMA400_OK)
 800056c:	2800      	cmp	r0, #0
 800056e:	d0e4      	beq.n	800053a <bma400_init+0x26>
}
 8000570:	b002      	add	sp, #8
 8000572:	bd10      	pop	{r4, pc}
                    rslt = BMA400_E_DEV_NOT_FOUND;
 8000574:	2003      	movs	r0, #3
 8000576:	4240      	negs	r0, r0
 8000578:	e7fa      	b.n	8000570 <bma400_init+0x5c>
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	00001388 	.word	0x00001388

08000580 <bma400_set_power_mode>:
{
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	0005      	movs	r5, r0
 8000586:	000e      	movs	r6, r1
    uint8_t reg_data = 0;
 8000588:	466b      	mov	r3, sp
 800058a:	2200      	movs	r2, #0
 800058c:	71da      	strb	r2, [r3, #7]
    rslt = null_ptr_check(dev);
 800058e:	0008      	movs	r0, r1
 8000590:	f7ff ff30 	bl	80003f4 <null_ptr_check>
 8000594:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8000596:	d002      	beq.n	800059e <bma400_set_power_mode+0x1e>
}
 8000598:	0020      	movs	r0, r4
 800059a:	b002      	add	sp, #8
 800059c:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 800059e:	0033      	movs	r3, r6
 80005a0:	2201      	movs	r2, #1
 80005a2:	4669      	mov	r1, sp
 80005a4:	3107      	adds	r1, #7
 80005a6:	2019      	movs	r0, #25
 80005a8:	f7ff ff78 	bl	800049c <bma400_get_regs>
 80005ac:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 80005ae:	d1f3      	bne.n	8000598 <bma400_set_power_mode+0x18>
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 80005b0:	466b      	mov	r3, sp
 80005b2:	79db      	ldrb	r3, [r3, #7]
 80005b4:	2203      	movs	r2, #3
 80005b6:	4393      	bics	r3, r2
 80005b8:	402a      	ands	r2, r5
 80005ba:	4313      	orrs	r3, r2
 80005bc:	466a      	mov	r2, sp
 80005be:	71d3      	strb	r3, [r2, #7]
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 80005c0:	0033      	movs	r3, r6
 80005c2:	2201      	movs	r2, #1
 80005c4:	4669      	mov	r1, sp
 80005c6:	3107      	adds	r1, #7
 80005c8:	2019      	movs	r0, #25
 80005ca:	f7ff ff29 	bl	8000420 <bma400_set_regs>
 80005ce:	0004      	movs	r4, r0
        if (power_mode == BMA400_MODE_LOW_POWER)
 80005d0:	2d01      	cmp	r5, #1
 80005d2:	d004      	beq.n	80005de <bma400_set_power_mode+0x5e>
            dev->delay_us(10000, dev->intf_ptr); /* TBC */
 80005d4:	6871      	ldr	r1, [r6, #4]
 80005d6:	6973      	ldr	r3, [r6, #20]
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <bma400_set_power_mode+0x68>)
 80005da:	4798      	blx	r3
 80005dc:	e7dc      	b.n	8000598 <bma400_set_power_mode+0x18>
            dev->delay_us(40000, dev->intf_ptr);
 80005de:	6871      	ldr	r1, [r6, #4]
 80005e0:	6973      	ldr	r3, [r6, #20]
 80005e2:	4802      	ldr	r0, [pc, #8]	@ (80005ec <bma400_set_power_mode+0x6c>)
 80005e4:	4798      	blx	r3
 80005e6:	e7d7      	b.n	8000598 <bma400_set_power_mode+0x18>
 80005e8:	00002710 	.word	0x00002710
 80005ec:	00009c40 	.word	0x00009c40

080005f0 <user_i2c_read>:

    return rslt;
}

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 80005f0:	b510      	push	{r4, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	0004      	movs	r4, r0
 80005f6:	0018      	movs	r0, r3
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;

    if (HAL_I2C_Mem_Read(hi2c, BMA400_I2C_ADDR, reg_addr,
 80005f8:	2301      	movs	r3, #1
 80005fa:	425b      	negs	r3, r3
 80005fc:	9302      	str	r3, [sp, #8]
 80005fe:	b292      	uxth	r2, r2
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	9100      	str	r1, [sp, #0]
 8000604:	3302      	adds	r3, #2
 8000606:	0022      	movs	r2, r4
 8000608:	2128      	movs	r1, #40	@ 0x28
 800060a:	f000 ff69 	bl	80014e0 <HAL_I2C_Mem_Read>
                         I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 800060e:	1e43      	subs	r3, r0, #1
 8000610:	4198      	sbcs	r0, r3
 8000612:	4240      	negs	r0, r0
 8000614:	2301      	movs	r3, #1
 8000616:	4398      	bics	r0, r3
    }
    else
    {
        return BMA400_E_COM_FAIL;
    }
}
 8000618:	b004      	add	sp, #16
 800061a:	bd10      	pop	{r4, pc}

0800061c <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 800061c:	b510      	push	{r4, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	0004      	movs	r4, r0
 8000622:	0018      	movs	r0, r3
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;

    if (HAL_I2C_Mem_Write(hi2c, BMA400_I2C_ADDR, reg_addr,
 8000624:	2301      	movs	r3, #1
 8000626:	425b      	negs	r3, r3
 8000628:	9302      	str	r3, [sp, #8]
 800062a:	b292      	uxth	r2, r2
 800062c:	9201      	str	r2, [sp, #4]
 800062e:	9100      	str	r1, [sp, #0]
 8000630:	3302      	adds	r3, #2
 8000632:	0022      	movs	r2, r4
 8000634:	2128      	movs	r1, #40	@ 0x28
 8000636:	f000 fe5d 	bl	80012f4 <HAL_I2C_Mem_Write>
                          I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 800063a:	1e43      	subs	r3, r0, #1
 800063c:	4198      	sbcs	r0, r3
 800063e:	4240      	negs	r0, r0
 8000640:	2301      	movs	r3, #1
 8000642:	4398      	bics	r0, r3
    }
    else
    {
        return BMA400_E_COM_FAIL;
    }
}
 8000644:	b004      	add	sp, #16
 8000646:	bd10      	pop	{r4, pc}

08000648 <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 8000648:	b510      	push	{r4, lr}
    // Zakładamy, że potrzebne opóźnienia mają ≥ 1000us (1ms)
    HAL_Delay(period / 1000);
 800064a:	21fa      	movs	r1, #250	@ 0xfa
 800064c:	0089      	lsls	r1, r1, #2
 800064e:	f7ff fd5b 	bl	8000108 <__udivsi3>
 8000652:	f000 fb25 	bl	8000ca0 <HAL_Delay>

    // Jeśli potrzebujesz dokładniejszych opóźnień — patrz niżej
}
 8000656:	bd10      	pop	{r4, pc}

08000658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065a:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2214      	movs	r2, #20
 800065e:	2100      	movs	r1, #0
 8000660:	a805      	add	r0, sp, #20
 8000662:	f002 f883 	bl	800276c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4b26      	ldr	r3, [pc, #152]	@ (8000700 <MX_GPIO_Init+0xa8>)
 8000668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800066a:	2404      	movs	r4, #4
 800066c:	4322      	orrs	r2, r4
 800066e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000672:	4022      	ands	r2, r4
 8000674:	9201      	str	r2, [sp, #4]
 8000676:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000678:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800067a:	2220      	movs	r2, #32
 800067c:	4311      	orrs	r1, r2
 800067e:	6359      	str	r1, [r3, #52]	@ 0x34
 8000680:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000682:	400a      	ands	r2, r1
 8000684:	9202      	str	r2, [sp, #8]
 8000686:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800068a:	2601      	movs	r6, #1
 800068c:	4332      	orrs	r2, r6
 800068e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000692:	4032      	ands	r2, r6
 8000694:	9203      	str	r2, [sp, #12]
 8000696:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000698:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800069a:	2202      	movs	r2, #2
 800069c:	4311      	orrs	r1, r2
 800069e:	6359      	str	r1, [r3, #52]	@ 0x34
 80006a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006a2:	401a      	ands	r2, r3
 80006a4:	9204      	str	r2, [sp, #16]
 80006a6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_IO_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80006a8:	27d0      	movs	r7, #208	@ 0xd0
 80006aa:	007f      	lsls	r7, r7, #1
 80006ac:	25a0      	movs	r5, #160	@ 0xa0
 80006ae:	05ed      	lsls	r5, r5, #23
 80006b0:	2200      	movs	r2, #0
 80006b2:	0039      	movs	r1, r7
 80006b4:	0028      	movs	r0, r5
 80006b6:	f000 fc45 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 80006ba:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2400      	movs	r4, #0
 80006be:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 80006c2:	a905      	add	r1, sp, #20
 80006c4:	480f      	ldr	r0, [pc, #60]	@ (8000704 <MX_GPIO_Init+0xac>)
 80006c6:	f000 fb67 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006ca:	231f      	movs	r3, #31
 80006cc:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ce:	3b1c      	subs	r3, #28
 80006d0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	a905      	add	r1, sp, #20
 80006d6:	0028      	movs	r0, r5
 80006d8:	f000 fb5e 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_IO_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = EN_IO_Pin|LED1_Pin|LED2_Pin;
 80006dc:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	a905      	add	r1, sp, #20
 80006e6:	0028      	movs	r0, r5
 80006e8:	f000 fb56 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80006ec:	2340      	movs	r3, #64	@ 0x40
 80006ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f2:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80006f4:	a905      	add	r1, sp, #20
 80006f6:	0028      	movs	r0, r5
 80006f8:	f000 fb4e 	bl	8000d98 <HAL_GPIO_Init>

}
 80006fc:	b00b      	add	sp, #44	@ 0x2c
 80006fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000700:	40021000 	.word	0x40021000
 8000704:	50001400 	.word	0x50001400

08000708 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000708:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800070a:	4814      	ldr	r0, [pc, #80]	@ (800075c <MX_I2C1_Init+0x54>)
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_I2C1_Init+0x58>)
 800070e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00100B0C;
 8000710:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <MX_I2C1_Init+0x5c>)
 8000712:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	2201      	movs	r2, #1
 800071a:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000720:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000722:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000724:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000726:	f000 fd77 	bl	8001218 <HAL_I2C_Init>
 800072a:	2800      	cmp	r0, #0
 800072c:	d10c      	bne.n	8000748 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072e:	480b      	ldr	r0, [pc, #44]	@ (800075c <MX_I2C1_Init+0x54>)
 8000730:	2100      	movs	r1, #0
 8000732:	f000 ffcf 	bl	80016d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000736:	2800      	cmp	r0, #0
 8000738:	d109      	bne.n	800074e <MX_I2C1_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800073a:	4808      	ldr	r0, [pc, #32]	@ (800075c <MX_I2C1_Init+0x54>)
 800073c:	2100      	movs	r1, #0
 800073e:	f000 fff5 	bl	800172c <HAL_I2CEx_ConfigDigitalFilter>
 8000742:	2800      	cmp	r0, #0
 8000744:	d106      	bne.n	8000754 <MX_I2C1_Init+0x4c>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000746:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000748:	f000 f8b8 	bl	80008bc <Error_Handler>
 800074c:	e7ef      	b.n	800072e <MX_I2C1_Init+0x26>
    Error_Handler();
 800074e:	f000 f8b5 	bl	80008bc <Error_Handler>
 8000752:	e7f2      	b.n	800073a <MX_I2C1_Init+0x32>
    Error_Handler();
 8000754:	f000 f8b2 	bl	80008bc <Error_Handler>
}
 8000758:	e7f5      	b.n	8000746 <MX_I2C1_Init+0x3e>
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	20000048 	.word	0x20000048
 8000760:	40005400 	.word	0x40005400
 8000764:	00100b0c 	.word	0x00100b0c

08000768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000768:	b510      	push	{r4, lr}
 800076a:	b08e      	sub	sp, #56	@ 0x38
 800076c:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	2214      	movs	r2, #20
 8000770:	2100      	movs	r1, #0
 8000772:	a809      	add	r0, sp, #36	@ 0x24
 8000774:	f001 fffa 	bl	800276c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000778:	221c      	movs	r2, #28
 800077a:	2100      	movs	r1, #0
 800077c:	a802      	add	r0, sp, #8
 800077e:	f001 fff5 	bl	800276c <memset>
  if(i2cHandle->Instance==I2C1)
 8000782:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <HAL_I2C_MspInit+0x7c>)
 8000784:	6822      	ldr	r2, [r4, #0]
 8000786:	429a      	cmp	r2, r3
 8000788:	d001      	beq.n	800078e <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078a:	b00e      	add	sp, #56	@ 0x38
 800078c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800078e:	2302      	movs	r3, #2
 8000790:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000792:	a802      	add	r0, sp, #8
 8000794:	f001 faf8 	bl	8001d88 <HAL_RCCEx_PeriphCLKConfig>
 8000798:	2800      	cmp	r0, #0
 800079a:	d11f      	bne.n	80007dc <HAL_I2C_MspInit+0x74>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079c:	4c12      	ldr	r4, [pc, #72]	@ (80007e8 <HAL_I2C_MspInit+0x80>)
 800079e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80007a0:	2302      	movs	r3, #2
 80007a2:	431a      	orrs	r2, r3
 80007a4:	6362      	str	r2, [r4, #52]	@ 0x34
 80007a6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80007a8:	4013      	ands	r3, r2
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ae:	23c0      	movs	r3, #192	@ 0xc0
 80007b0:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b2:	3bae      	subs	r3, #174	@ 0xae
 80007b4:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80007bc:	3306      	adds	r3, #6
 80007be:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	a909      	add	r1, sp, #36	@ 0x24
 80007c2:	480a      	ldr	r0, [pc, #40]	@ (80007ec <HAL_I2C_MspInit+0x84>)
 80007c4:	f000 fae8 	bl	8000d98 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80007ca:	2280      	movs	r2, #128	@ 0x80
 80007cc:	0392      	lsls	r2, r2, #14
 80007ce:	4313      	orrs	r3, r2
 80007d0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80007d2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80007d4:	4013      	ands	r3, r2
 80007d6:	9301      	str	r3, [sp, #4]
 80007d8:	9b01      	ldr	r3, [sp, #4]
}
 80007da:	e7d6      	b.n	800078a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80007dc:	f000 f86e 	bl	80008bc <Error_Handler>
 80007e0:	e7dc      	b.n	800079c <HAL_I2C_MspInit+0x34>
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	40005400 	.word	0x40005400
 80007e8:	40021000 	.word	0x40021000
 80007ec:	50000400 	.word	0x50000400

080007f0 <enterShutdown>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enterShutdown(void)
{
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	220c      	movs	r2, #12
 80007f6:	2100      	movs	r1, #0
 80007f8:	a803      	add	r0, sp, #12
 80007fa:	f001 ffb7 	bl	800276c <memset>

	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fe:	2603      	movs	r6, #3
 8000800:	9602      	str	r6, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Pin = GPIO_PIN_ALL;
 8000802:	4c25      	ldr	r4, [pc, #148]	@ (8000898 <enterShutdown+0xa8>)
 8000804:	9401      	str	r4, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	25a0      	movs	r5, #160	@ 0xa0
 8000808:	05ed      	lsls	r5, r5, #23
 800080a:	a901      	add	r1, sp, #4
 800080c:	0028      	movs	r0, r5
 800080e:	f000 fac3 	bl	8000d98 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	a901      	add	r1, sp, #4
 8000814:	4821      	ldr	r0, [pc, #132]	@ (800089c <enterShutdown+0xac>)
 8000816:	f000 fabf 	bl	8000d98 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	a901      	add	r1, sp, #4
 800081c:	4820      	ldr	r0, [pc, #128]	@ (80008a0 <enterShutdown+0xb0>)
 800081e:	f000 fabb 	bl	8000d98 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000822:	a901      	add	r1, sp, #4
 8000824:	481f      	ldr	r0, [pc, #124]	@ (80008a4 <enterShutdown+0xb4>)
 8000826:	f000 fab7 	bl	8000d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EN_IO_Pin;
 800082a:	2320      	movs	r3, #32
 800082c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(EN_IO_GPIO_Port, &GPIO_InitStruct);
 8000834:	a901      	add	r1, sp, #4
 8000836:	0028      	movs	r0, r5
 8000838:	f000 faae 	bl	8000d98 <HAL_GPIO_Init>

	HAL_PWREx_EnablePullUpPullDownConfig();
 800083c:	f000 ffe8 	bl	8001810 <HAL_PWREx_EnablePullUpPullDownConfig>
	HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, GPIO_PIN_ALL);
 8000840:	0021      	movs	r1, r4
 8000842:	2000      	movs	r0, #0
 8000844:	f000 ff9c 	bl	8001780 <HAL_PWREx_DisableGPIOPullUp>
	HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, GPIO_PIN_ALL);
 8000848:	0021      	movs	r1, r4
 800084a:	2000      	movs	r0, #0
 800084c:	f000 ffbc 	bl	80017c8 <HAL_PWREx_DisableGPIOPullDown>
	HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, GPIO_PIN_ALL);
 8000850:	0021      	movs	r1, r4
 8000852:	2001      	movs	r0, #1
 8000854:	f000 ff94 	bl	8001780 <HAL_PWREx_DisableGPIOPullUp>
	HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_B, GPIO_PIN_ALL);
 8000858:	0021      	movs	r1, r4
 800085a:	2001      	movs	r0, #1
 800085c:	f000 ffb4 	bl	80017c8 <HAL_PWREx_DisableGPIOPullDown>
	HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_C, GPIO_PIN_ALL);
 8000860:	0021      	movs	r1, r4
 8000862:	2002      	movs	r0, #2
 8000864:	f000 ff8c 	bl	8001780 <HAL_PWREx_DisableGPIOPullUp>
	HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_C, GPIO_PIN_ALL);
 8000868:	0021      	movs	r1, r4
 800086a:	2002      	movs	r0, #2
 800086c:	f000 ffac 	bl	80017c8 <HAL_PWREx_DisableGPIOPullDown>
	HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_F, GPIO_PIN_ALL);
 8000870:	0021      	movs	r1, r4
 8000872:	2005      	movs	r0, #5
 8000874:	f000 ff84 	bl	8001780 <HAL_PWREx_DisableGPIOPullUp>
	HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_F, GPIO_PIN_ALL);
 8000878:	0021      	movs	r1, r4
 800087a:	2005      	movs	r0, #5
 800087c:	f000 ffa4 	bl	80017c8 <HAL_PWREx_DisableGPIOPullDown>
	HAL_PWREx_DisablePullUpPullDownConfig();
 8000880:	f000 ffd0 	bl	8001824 <HAL_PWREx_DisablePullUpPullDownConfig>

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <enterShutdown+0xb8>)
 8000886:	4a09      	ldr	r2, [pc, #36]	@ (80008ac <enterShutdown+0xbc>)
 8000888:	619a      	str	r2, [r3, #24]
	HAL_SuspendTick();
 800088a:	f000 fa1b 	bl	8000cc4 <HAL_SuspendTick>
	HAL_PWREx_EnterSHUTDOWNMode();
 800088e:	f000 ffd3 	bl	8001838 <HAL_PWREx_EnterSHUTDOWNMode>
}
 8000892:	b006      	add	sp, #24
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	0000ffff 	.word	0x0000ffff
 800089c:	50000400 	.word	0x50000400
 80008a0:	50000800 	.word	0x50000800
 80008a4:	50001400 	.word	0x50001400
 80008a8:	40007000 	.word	0x40007000
 80008ac:	0001002f 	.word	0x0001002f

080008b0 <configureBMA400>:

// Configure BMA400 for low power + wake-up on Y-axis motion
void configureBMA400(struct bma400_dev *dev)
{
 80008b0:	b510      	push	{r4, lr}
 80008b2:	0001      	movs	r1, r0
    bma400_set_power_mode(BMA400_MODE_SLEEP, dev);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fe63 	bl	8000580 <bma400_set_power_mode>
}
 80008ba:	bd10      	pop	{r4, pc}

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 80008be:	2180      	movs	r1, #128	@ 0x80
 80008c0:	20a0      	movs	r0, #160	@ 0xa0
 80008c2:	2201      	movs	r2, #1
 80008c4:	0049      	lsls	r1, r1, #1
 80008c6:	05c0      	lsls	r0, r0, #23
 80008c8:	f000 fb3c 	bl	8000f44 <HAL_GPIO_WritePin>
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x10>
	...

080008d0 <SystemClock_Config>:
{
 80008d0:	b500      	push	{lr}
 80008d2:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d4:	221c      	movs	r2, #28
 80008d6:	2100      	movs	r1, #0
 80008d8:	a805      	add	r0, sp, #20
 80008da:	f001 ff47 	bl	800276c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008de:	2214      	movs	r2, #20
 80008e0:	2100      	movs	r1, #0
 80008e2:	4668      	mov	r0, sp
 80008e4:	f001 ff42 	bl	800276c <memset>
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80008e8:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <SystemClock_Config+0x64>)
 80008ea:	6813      	ldr	r3, [r2, #0]
 80008ec:	2107      	movs	r1, #7
 80008ee:	438b      	bics	r3, r1
 80008f0:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f2:	2302      	movs	r3, #2
 80008f4:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f6:	33fe      	adds	r3, #254	@ 0xfe
 80008f8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV16;
 80008fa:	2380      	movs	r3, #128	@ 0x80
 80008fc:	019b      	lsls	r3, r3, #6
 80008fe:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	2340      	movs	r3, #64	@ 0x40
 8000902:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	a805      	add	r0, sp, #20
 8000906:	f000 ffa9 	bl	800185c <HAL_RCC_OscConfig>
 800090a:	2800      	cmp	r0, #0
 800090c:	d10e      	bne.n	800092c <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090e:	2307      	movs	r3, #7
 8000910:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000912:	2300      	movs	r3, #0
 8000914:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000918:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800091a:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800091c:	2100      	movs	r1, #0
 800091e:	4668      	mov	r0, sp
 8000920:	f001 f93a 	bl	8001b98 <HAL_RCC_ClockConfig>
 8000924:	2800      	cmp	r0, #0
 8000926:	d103      	bne.n	8000930 <SystemClock_Config+0x60>
}
 8000928:	b00d      	add	sp, #52	@ 0x34
 800092a:	bd00      	pop	{pc}
    Error_Handler();
 800092c:	f7ff ffc6 	bl	80008bc <Error_Handler>
    Error_Handler();
 8000930:	f7ff ffc4 	bl	80008bc <Error_Handler>
 8000934:	40022000 	.word	0x40022000

08000938 <main>:
{
 8000938:	b510      	push	{r4, lr}
  HAL_Init();
 800093a:	f000 f993 	bl	8000c64 <HAL_Init>
  SystemClock_Config();
 800093e:	f7ff ffc7 	bl	80008d0 <SystemClock_Config>
  MX_GPIO_Init();
 8000942:	f7ff fe89 	bl	8000658 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000946:	f000 f8c1 	bl	8000acc <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800094a:	f000 f853 	bl	80009f4 <MX_TIM14_Init>
  MX_TIM16_Init();
 800094e:	f000 f86b 	bl	8000a28 <MX_TIM16_Init>
  MX_I2C1_Init();
 8000952:	f7ff fed9 	bl	8000708 <MX_I2C1_Init>
  bma400_init(&bma400);
 8000956:	4c07      	ldr	r4, [pc, #28]	@ (8000974 <main+0x3c>)
 8000958:	0020      	movs	r0, r4
 800095a:	f7ff fddb 	bl	8000514 <bma400_init>
  configureBMA400(&bma400);
 800095e:	0020      	movs	r0, r4
 8000960:	f7ff ffa6 	bl	80008b0 <configureBMA400>
  HAL_Delay(10);
 8000964:	200a      	movs	r0, #10
 8000966:	f000 f99b 	bl	8000ca0 <HAL_Delay>
  HAL_SuspendTick();
 800096a:	f000 f9ab 	bl	8000cc4 <HAL_SuspendTick>
  enterShutdown();
 800096e:	f7ff ff3f 	bl	80007f0 <enterShutdown>
  while (1)
 8000972:	e7fe      	b.n	8000972 <main+0x3a>
 8000974:	20000000 	.word	0x20000000

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b500      	push	{lr}
 800097a:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <HAL_MspInit+0x38>)
 800097e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000980:	2201      	movs	r2, #1
 8000982:	4311      	orrs	r1, r2
 8000984:	6419      	str	r1, [r3, #64]	@ 0x40
 8000986:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000988:	400a      	ands	r2, r1
 800098a:	9200      	str	r2, [sp, #0]
 800098c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	0549      	lsls	r1, r1, #21
 8000994:	430a      	orrs	r2, r1
 8000996:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800099a:	400b      	ands	r3, r1
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 80009a0:	2008      	movs	r0, #8
 80009a2:	f000 f997 	bl	8000cd4 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 80009a6:	2010      	movs	r0, #16
 80009a8:	f000 f994 	bl	8000cd4 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	b003      	add	sp, #12
 80009ae:	bd00      	pop	{pc}
 80009b0:	40021000 	.word	0x40021000

080009b4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler>

080009b6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler>

080009b8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	4770      	bx	lr

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009be:	f000 f95d 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c2:	bd10      	pop	{r4, pc}

080009c4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80009c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80009c6:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <TIM14_IRQHandler+0xc>)
 80009c8:	f001 fa82 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80009cc:	bd10      	pop	{r4, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	200000e8 	.word	0x200000e8

080009d4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80009d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80009d6:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <TIM16_IRQHandler+0xc>)
 80009d8:	f001 fa7a 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80009dc:	bd10      	pop	{r4, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	2000009c 	.word	0x2000009c

080009e4 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009e4:	4b02      	ldr	r3, [pc, #8]	@ (80009f0 <SystemInit+0xc>)
 80009e6:	2280      	movs	r2, #128	@ 0x80
 80009e8:	0512      	lsls	r2, r2, #20
 80009ea:	609a      	str	r2, [r3, #8]
#endif
}
 80009ec:	4770      	bx	lr
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <MX_TIM14_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80009f4:	b510      	push	{r4, lr}
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009f6:	480a      	ldr	r0, [pc, #40]	@ (8000a20 <MX_TIM14_Init+0x2c>)
 80009f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <MX_TIM14_Init+0x30>)
 80009fa:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 299;
 80009fc:	232c      	movs	r3, #44	@ 0x2c
 80009fe:	33ff      	adds	r3, #255	@ 0xff
 8000a00:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	2300      	movs	r3, #0
 8000a04:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 99;
 8000a06:	2263      	movs	r2, #99	@ 0x63
 8000a08:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a0e:	f001 fb7b 	bl	8002108 <HAL_TIM_Base_Init>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d100      	bne.n	8000a18 <MX_TIM14_Init+0x24>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a16:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a18:	f7ff ff50 	bl	80008bc <Error_Handler>
}
 8000a1c:	e7fb      	b.n	8000a16 <MX_TIM14_Init+0x22>
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	200000e8 	.word	0x200000e8
 8000a24:	40002000 	.word	0x40002000

08000a28 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000a28:	b510      	push	{r4, lr}
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a2a:	480a      	ldr	r0, [pc, #40]	@ (8000a54 <MX_TIM16_Init+0x2c>)
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <MX_TIM16_Init+0x30>)
 8000a2e:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 299;
 8000a30:	232c      	movs	r3, #44	@ 0x2c
 8000a32:	33ff      	adds	r3, #255	@ 0xff
 8000a34:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	2300      	movs	r3, #0
 8000a38:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 9;
 8000a3a:	2209      	movs	r2, #9
 8000a3c:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3e:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a40:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a44:	f001 fb60 	bl	8002108 <HAL_TIM_Base_Init>
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d100      	bne.n	8000a4e <MX_TIM16_Init+0x26>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a4c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a4e:	f7ff ff35 	bl	80008bc <Error_Handler>
}
 8000a52:	e7fb      	b.n	8000a4c <MX_TIM16_Init+0x24>
 8000a54:	2000009c 	.word	0x2000009c
 8000a58:	40014400 	.word	0x40014400

08000a5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a5c:	b500      	push	{lr}
 8000a5e:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM14)
 8000a60:	6803      	ldr	r3, [r0, #0]
 8000a62:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <HAL_TIM_Base_MspInit+0x64>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d004      	beq.n	8000a72 <HAL_TIM_Base_MspInit+0x16>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM16)
 8000a68:	4a16      	ldr	r2, [pc, #88]	@ (8000ac4 <HAL_TIM_Base_MspInit+0x68>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d014      	beq.n	8000a98 <HAL_TIM_Base_MspInit+0x3c>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000a6e:	b003      	add	sp, #12
 8000a70:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x6c>)
 8000a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a76:	2180      	movs	r1, #128	@ 0x80
 8000a78:	0209      	lsls	r1, r1, #8
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	400b      	ands	r3, r1
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2013      	movs	r0, #19
 8000a8c:	f000 f92a 	bl	8000ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000a90:	2013      	movs	r0, #19
 8000a92:	f000 f959 	bl	8000d48 <HAL_NVIC_EnableIRQ>
 8000a96:	e7ea      	b.n	8000a6e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x6c>)
 8000a9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	0289      	lsls	r1, r1, #10
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	400b      	ands	r3, r1
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2101      	movs	r1, #1
 8000ab0:	2015      	movs	r0, #21
 8000ab2:	f000 f917 	bl	8000ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000ab6:	2015      	movs	r0, #21
 8000ab8:	f000 f946 	bl	8000d48 <HAL_NVIC_EnableIRQ>
}
 8000abc:	e7d7      	b.n	8000a6e <HAL_TIM_Base_MspInit+0x12>
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	40002000 	.word	0x40002000
 8000ac4:	40014400 	.word	0x40014400
 8000ac8:	40021000 	.word	0x40021000

08000acc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000acc:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ace:	4819      	ldr	r0, [pc, #100]	@ (8000b34 <MX_USART1_UART_Init+0x68>)
 8000ad0:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_USART1_UART_Init+0x6c>)
 8000ad2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000ad4:	23e1      	movs	r3, #225	@ 0xe1
 8000ad6:	025b      	lsls	r3, r3, #9
 8000ad8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	2300      	movs	r3, #0
 8000adc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ade:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ae0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aec:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aee:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af0:	f001 fd70 	bl	80025d4 <HAL_UART_Init>
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d111      	bne.n	8000b1c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af8:	480e      	ldr	r0, [pc, #56]	@ (8000b34 <MX_USART1_UART_Init+0x68>)
 8000afa:	2100      	movs	r1, #0
 8000afc:	f001 fde8 	bl	80026d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d10e      	bne.n	8000b22 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	480b      	ldr	r0, [pc, #44]	@ (8000b34 <MX_USART1_UART_Init+0x68>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	f001 fe08 	bl	800271c <HAL_UARTEx_SetRxFifoThreshold>
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d10b      	bne.n	8000b28 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b10:	4808      	ldr	r0, [pc, #32]	@ (8000b34 <MX_USART1_UART_Init+0x68>)
 8000b12:	f001 fdbd 	bl	8002690 <HAL_UARTEx_DisableFifoMode>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	d109      	bne.n	8000b2e <MX_USART1_UART_Init+0x62>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b1a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b1c:	f7ff fece 	bl	80008bc <Error_Handler>
 8000b20:	e7ea      	b.n	8000af8 <MX_USART1_UART_Init+0x2c>
    Error_Handler();
 8000b22:	f7ff fecb 	bl	80008bc <Error_Handler>
 8000b26:	e7ed      	b.n	8000b04 <MX_USART1_UART_Init+0x38>
    Error_Handler();
 8000b28:	f7ff fec8 	bl	80008bc <Error_Handler>
 8000b2c:	e7f0      	b.n	8000b10 <MX_USART1_UART_Init+0x44>
    Error_Handler();
 8000b2e:	f7ff fec5 	bl	80008bc <Error_Handler>
}
 8000b32:	e7f2      	b.n	8000b1a <MX_USART1_UART_Init+0x4e>
 8000b34:	20000134 	.word	0x20000134
 8000b38:	40013800 	.word	0x40013800

08000b3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b3c:	b510      	push	{r4, lr}
 8000b3e:	b08e      	sub	sp, #56	@ 0x38
 8000b40:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	2214      	movs	r2, #20
 8000b44:	2100      	movs	r1, #0
 8000b46:	a809      	add	r0, sp, #36	@ 0x24
 8000b48:	f001 fe10 	bl	800276c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b4c:	221c      	movs	r2, #28
 8000b4e:	2100      	movs	r1, #0
 8000b50:	a802      	add	r0, sp, #8
 8000b52:	f001 fe0b 	bl	800276c <memset>
  if(uartHandle->Instance==USART1)
 8000b56:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <HAL_UART_MspInit+0x7c>)
 8000b58:	6822      	ldr	r2, [r4, #0]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d001      	beq.n	8000b62 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b5e:	b00e      	add	sp, #56	@ 0x38
 8000b60:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b66:	a802      	add	r0, sp, #8
 8000b68:	f001 f90e 	bl	8001d88 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d120      	bne.n	8000bb2 <HAL_UART_MspInit+0x76>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_UART_MspInit+0x80>)
 8000b72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	01c9      	lsls	r1, r1, #7
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b7e:	400a      	ands	r2, r1
 8000b80:	9200      	str	r2, [sp, #0]
 8000b82:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b86:	2201      	movs	r2, #1
 8000b88:	4311      	orrs	r1, r2
 8000b8a:	6359      	str	r1, [r3, #52]	@ 0x34
 8000b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b8e:	4013      	ands	r3, r2
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b94:	23c0      	movs	r3, #192	@ 0xc0
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ba4:	920d      	str	r2, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	20a0      	movs	r0, #160	@ 0xa0
 8000ba8:	a909      	add	r1, sp, #36	@ 0x24
 8000baa:	05c0      	lsls	r0, r0, #23
 8000bac:	f000 f8f4 	bl	8000d98 <HAL_GPIO_Init>
}
 8000bb0:	e7d5      	b.n	8000b5e <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000bb2:	f7ff fe83 	bl	80008bc <Error_Handler>
 8000bb6:	e7db      	b.n	8000b70 <HAL_UART_MspInit+0x34>
 8000bb8:	40013800 	.word	0x40013800
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc0:	480d      	ldr	r0, [pc, #52]	@ (8000bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc4:	f7ff ff0e 	bl	80009e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bca:	e003      	b.n	8000bd4 <LoopCopyDataInit>

08000bcc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000bce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bd2:	3104      	adds	r1, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bd4:	480a      	ldr	r0, [pc, #40]	@ (8000c00 <LoopForever+0xa>)
  ldr r3, =_edata
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <LoopForever+0xe>)
  adds r2, r0, r1
 8000bd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bdc:	d3f6      	bcc.n	8000bcc <CopyDataInit>
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <LoopForever+0x12>)
  b LoopFillZerobss
 8000be0:	e002      	b.n	8000be8 <LoopFillZerobss>

08000be2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000be4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be6:	3204      	adds	r2, #4

08000be8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <LoopForever+0x16>)
  cmp r2, r3
 8000bea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bec:	d3f9      	bcc.n	8000be2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000bee:	f001 fdc5 	bl	800277c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf2:	f7ff fea1 	bl	8000938 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   r0, =_estack
 8000bf8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000bfc:	0800286c 	.word	0x0800286c
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c04:	2000002c 	.word	0x2000002c
  ldr r2, =_sbss
 8000c08:	2000002c 	.word	0x2000002c
  ldr r3, = _ebss
 8000c0c:	200001cc 	.word	0x200001cc

08000c10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_IRQHandler>
	...

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8000c18:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <HAL_InitTick+0x44>)
 8000c1a:	7819      	ldrb	r1, [r3, #0]
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1c:	2001      	movs	r0, #1
  if ((uint32_t)uwTickFreq != 0UL)
 8000c1e:	2900      	cmp	r1, #0
 8000c20:	d100      	bne.n	8000c24 <HAL_InitTick+0x10>
  }

  /* Return function status */
  return status;
}
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000c24:	4d0d      	ldr	r5, [pc, #52]	@ (8000c5c <HAL_InitTick+0x48>)
 8000c26:	20fa      	movs	r0, #250	@ 0xfa
 8000c28:	0080      	lsls	r0, r0, #2
 8000c2a:	f7ff fa6d 	bl	8000108 <__udivsi3>
 8000c2e:	0001      	movs	r1, r0
 8000c30:	6828      	ldr	r0, [r5, #0]
 8000c32:	f7ff fa69 	bl	8000108 <__udivsi3>
 8000c36:	f000 f893 	bl	8000d60 <HAL_SYSTICK_Config>
 8000c3a:	0003      	movs	r3, r0
      status = HAL_ERROR;
 8000c3c:	2001      	movs	r0, #1
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1ef      	bne.n	8000c22 <HAL_InitTick+0xe>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	2c03      	cmp	r4, #3
 8000c44:	d8ed      	bhi.n	8000c22 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c46:	2200      	movs	r2, #0
 8000c48:	0021      	movs	r1, r4
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	f000 f84a 	bl	8000ce4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <HAL_InitTick+0x4c>)
 8000c52:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2000      	movs	r0, #0
 8000c56:	e7e4      	b.n	8000c22 <HAL_InitTick+0xe>
 8000c58:	20000024 	.word	0x20000024
 8000c5c:	20000020 	.word	0x20000020
 8000c60:	20000028 	.word	0x20000028

08000c64 <HAL_Init>:
{
 8000c64:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c66:	2003      	movs	r0, #3
 8000c68:	f7ff ffd4 	bl	8000c14 <HAL_InitTick>
 8000c6c:	1e04      	subs	r4, r0, #0
 8000c6e:	d002      	beq.n	8000c76 <HAL_Init+0x12>
    status = HAL_ERROR;
 8000c70:	2401      	movs	r4, #1
}
 8000c72:	0020      	movs	r0, r4
 8000c74:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000c76:	f7ff fe7f 	bl	8000978 <HAL_MspInit>
 8000c7a:	e7fa      	b.n	8000c72 <HAL_Init+0xe>

08000c7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000c7c:	4a03      	ldr	r2, [pc, #12]	@ (8000c8c <HAL_IncTick+0x10>)
 8000c7e:	6811      	ldr	r1, [r2, #0]
 8000c80:	4b03      	ldr	r3, [pc, #12]	@ (8000c90 <HAL_IncTick+0x14>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	185b      	adds	r3, r3, r1
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	4770      	bx	lr
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	200001c8 	.word	0x200001c8
 8000c90:	20000024 	.word	0x20000024

08000c94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c94:	4b01      	ldr	r3, [pc, #4]	@ (8000c9c <HAL_GetTick+0x8>)
 8000c96:	6818      	ldr	r0, [r3, #0]
}
 8000c98:	4770      	bx	lr
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	200001c8 	.word	0x200001c8

08000ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fff6 	bl	8000c94 <HAL_GetTick>
 8000ca8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000caa:	1c63      	adds	r3, r4, #1
 8000cac:	d002      	beq.n	8000cb4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <HAL_Delay+0x20>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb4:	f7ff ffee 	bl	8000c94 <HAL_GetTick>
 8000cb8:	1b40      	subs	r0, r0, r5
 8000cba:	42a0      	cmp	r0, r4
 8000cbc:	d3fa      	bcc.n	8000cb4 <HAL_Delay+0x14>
  {
  }
}
 8000cbe:	bd70      	pop	{r4, r5, r6, pc}
 8000cc0:	20000024 	.word	0x20000024

08000cc4 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000cc4:	4a02      	ldr	r2, [pc, #8]	@ (8000cd0 <HAL_SuspendTick+0xc>)
 8000cc6:	6813      	ldr	r3, [r2, #0]
 8000cc8:	2102      	movs	r1, #2
 8000cca:	438b      	bics	r3, r1
 8000ccc:	6013      	str	r3, [r2, #0]
}
 8000cce:	4770      	bx	lr
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_SYSCFG_EnableRemap>:
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000cd4:	4a02      	ldr	r2, [pc, #8]	@ (8000ce0 <HAL_SYSCFG_EnableRemap+0xc>)
 8000cd6:	6813      	ldr	r3, [r2, #0]
 8000cd8:	4303      	orrs	r3, r0
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	4770      	bx	lr
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	db14      	blt.n	8000d14 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cea:	0884      	lsrs	r4, r0, #2
 8000cec:	00a4      	lsls	r4, r4, #2
 8000cee:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <HAL_NVIC_SetPriority+0x5c>)
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	4464      	add	r4, ip
 8000cf4:	26c0      	movs	r6, #192	@ 0xc0
 8000cf6:	00b6      	lsls	r6, r6, #2
 8000cf8:	59a5      	ldr	r5, [r4, r6]
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	4002      	ands	r2, r0
 8000cfe:	00d2      	lsls	r2, r2, #3
 8000d00:	23ff      	movs	r3, #255	@ 0xff
 8000d02:	0018      	movs	r0, r3
 8000d04:	4090      	lsls	r0, r2
 8000d06:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d08:	0189      	lsls	r1, r1, #6
 8000d0a:	400b      	ands	r3, r1
 8000d0c:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0e:	432b      	orrs	r3, r5
 8000d10:	51a3      	str	r3, [r4, r6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d14:	230f      	movs	r3, #15
 8000d16:	4003      	ands	r3, r0
 8000d18:	3b08      	subs	r3, #8
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4a09      	ldr	r2, [pc, #36]	@ (8000d44 <HAL_NVIC_SetPriority+0x60>)
 8000d20:	4694      	mov	ip, r2
 8000d22:	4463      	add	r3, ip
 8000d24:	69dc      	ldr	r4, [r3, #28]
 8000d26:	2203      	movs	r2, #3
 8000d28:	4010      	ands	r0, r2
 8000d2a:	00c0      	lsls	r0, r0, #3
 8000d2c:	32fc      	adds	r2, #252	@ 0xfc
 8000d2e:	0015      	movs	r5, r2
 8000d30:	4085      	lsls	r5, r0
 8000d32:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d34:	0189      	lsls	r1, r1, #6
 8000d36:	400a      	ands	r2, r1
 8000d38:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d3a:	4322      	orrs	r2, r4
 8000d3c:	61da      	str	r2, [r3, #28]
 8000d3e:	e7e8      	b.n	8000d12 <HAL_NVIC_SetPriority+0x2e>
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	db05      	blt.n	8000d58 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	4002      	ands	r2, r0
 8000d50:	2301      	movs	r3, #1
 8000d52:	4093      	lsls	r3, r2
 8000d54:	4a01      	ldr	r2, [pc, #4]	@ (8000d5c <HAL_NVIC_EnableIRQ+0x14>)
 8000d56:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d58:	4770      	bx	lr
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	3801      	subs	r0, #1
 8000d62:	2380      	movs	r3, #128	@ 0x80
 8000d64:	045b      	lsls	r3, r3, #17
 8000d66:	4298      	cmp	r0, r3
 8000d68:	d20f      	bcs.n	8000d8a <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a09      	ldr	r2, [pc, #36]	@ (8000d90 <HAL_SYSTICK_Config+0x30>)
 8000d6c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6e:	4809      	ldr	r0, [pc, #36]	@ (8000d94 <HAL_SYSTICK_Config+0x34>)
 8000d70:	6a03      	ldr	r3, [r0, #32]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	21c0      	movs	r1, #192	@ 0xc0
 8000d78:	0609      	lsls	r1, r1, #24
 8000d7a:	430b      	orrs	r3, r1
 8000d7c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7e:	2300      	movs	r3, #0
 8000d80:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	3307      	adds	r3, #7
 8000d84:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d86:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000d88:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8000d8c:	e7fc      	b.n	8000d88 <HAL_SYSTICK_Config+0x28>
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	e000e010 	.word	0xe000e010
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9a:	46de      	mov	lr, fp
 8000d9c:	4657      	mov	r7, sl
 8000d9e:	464e      	mov	r6, r9
 8000da0:	4645      	mov	r5, r8
 8000da2:	b5e0      	push	{r5, r6, r7, lr}
 8000da4:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000da6:	680a      	ldr	r2, [r1, #0]
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	d100      	bne.n	8000dae <HAL_GPIO_Init+0x16>
 8000dac:	e0ba      	b.n	8000f24 <HAL_GPIO_Init+0x18c>
  uint32_t position = 0U;
 8000dae:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000db0:	2401      	movs	r4, #1
 8000db2:	46a0      	mov	r8, r4

    if (iocurrent != 0U)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db4:	340f      	adds	r4, #15
 8000db6:	46a3      	mov	fp, r4
        GPIOx->AFR[position >> 3U] = tmp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000db8:	3c0d      	subs	r4, #13
 8000dba:	46a1      	mov	r9, r4
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000dbc:	4e5d      	ldr	r6, [pc, #372]	@ (8000f34 <HAL_GPIO_Init+0x19c>)
 8000dbe:	e040      	b.n	8000e42 <HAL_GPIO_Init+0xaa>
        tmp = GPIOx->AFR[position >> 3U];
 8000dc0:	08dd      	lsrs	r5, r3, #3
 8000dc2:	00ad      	lsls	r5, r5, #2
 8000dc4:	1945      	adds	r5, r0, r5
 8000dc6:	6a2a      	ldr	r2, [r5, #32]
 8000dc8:	4694      	mov	ip, r2
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000dca:	2207      	movs	r2, #7
 8000dcc:	401a      	ands	r2, r3
 8000dce:	0092      	lsls	r2, r2, #2
 8000dd0:	4692      	mov	sl, r2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	4657      	mov	r7, sl
 8000dd6:	40ba      	lsls	r2, r7
 8000dd8:	4667      	mov	r7, ip
 8000dda:	4397      	bics	r7, r2
 8000ddc:	46bc      	mov	ip, r7
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000dde:	690a      	ldr	r2, [r1, #16]
 8000de0:	270f      	movs	r7, #15
 8000de2:	403a      	ands	r2, r7
 8000de4:	4657      	mov	r7, sl
 8000de6:	40ba      	lsls	r2, r7
 8000de8:	4667      	mov	r7, ip
 8000dea:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = tmp;
 8000dec:	622a      	str	r2, [r5, #32]
 8000dee:	e034      	b.n	8000e5a <HAL_GPIO_Init+0xc2>
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000df0:	2200      	movs	r2, #0
 8000df2:	4667      	mov	r7, ip
 8000df4:	40ba      	lsls	r2, r7
 8000df6:	432a      	orrs	r2, r5
        EXTI->EXTICR[position >> 2U] = tmp;
 8000df8:	6622      	str	r2, [r4, #96]	@ 0x60
        tmp = EXTI->IMR1;
 8000dfa:	2280      	movs	r2, #128	@ 0x80
 8000dfc:	58b2      	ldr	r2, [r6, r2]
        tmp &= ~((uint32_t)iocurrent);
 8000dfe:	9c01      	ldr	r4, [sp, #4]
 8000e00:	43e4      	mvns	r4, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e02:	684d      	ldr	r5, [r1, #4]
 8000e04:	03ed      	lsls	r5, r5, #15
 8000e06:	d500      	bpl.n	8000e0a <HAL_GPIO_Init+0x72>
 8000e08:	e080      	b.n	8000f0c <HAL_GPIO_Init+0x174>
        tmp &= ~((uint32_t)iocurrent);
 8000e0a:	4022      	ands	r2, r4
        {
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
 8000e0c:	2580      	movs	r5, #128	@ 0x80
 8000e0e:	5172      	str	r2, [r6, r5]

        tmp = EXTI->EMR1;
 8000e10:	2284      	movs	r2, #132	@ 0x84
 8000e12:	58b2      	ldr	r2, [r6, r2]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e14:	684d      	ldr	r5, [r1, #4]
 8000e16:	03ad      	lsls	r5, r5, #14
 8000e18:	d47b      	bmi.n	8000f12 <HAL_GPIO_Init+0x17a>
        tmp &= ~((uint32_t)iocurrent);
 8000e1a:	4022      	ands	r2, r4
        {
          tmp |= iocurrent;
        }
        EXTI->EMR1 = tmp;
 8000e1c:	2584      	movs	r5, #132	@ 0x84
 8000e1e:	5172      	str	r2, [r6, r5]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000e20:	6832      	ldr	r2, [r6, #0]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e22:	684d      	ldr	r5, [r1, #4]
 8000e24:	02ed      	lsls	r5, r5, #11
 8000e26:	d477      	bmi.n	8000f18 <HAL_GPIO_Init+0x180>
        tmp &= ~((uint32_t)iocurrent);
 8000e28:	4022      	ands	r2, r4
        {
          tmp |= iocurrent;
        }
        EXTI->RTSR1 = tmp;
 8000e2a:	6032      	str	r2, [r6, #0]

        tmp = EXTI->FTSR1;
 8000e2c:	6872      	ldr	r2, [r6, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e2e:	684d      	ldr	r5, [r1, #4]
 8000e30:	02ad      	lsls	r5, r5, #10
 8000e32:	d474      	bmi.n	8000f1e <HAL_GPIO_Init+0x186>
        tmp &= ~((uint32_t)iocurrent);
 8000e34:	4022      	ands	r2, r4
        {
          tmp |= iocurrent;
        }
        EXTI->FTSR1 = tmp;
 8000e36:	6072      	str	r2, [r6, #4]
      }
    }

    position++;
 8000e38:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e3a:	680a      	ldr	r2, [r1, #0]
 8000e3c:	0014      	movs	r4, r2
 8000e3e:	40dc      	lsrs	r4, r3
 8000e40:	d070      	beq.n	8000f24 <HAL_GPIO_Init+0x18c>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000e42:	4644      	mov	r4, r8
 8000e44:	409c      	lsls	r4, r3
 8000e46:	0017      	movs	r7, r2
 8000e48:	4027      	ands	r7, r4
 8000e4a:	9701      	str	r7, [sp, #4]
    if (iocurrent != 0U)
 8000e4c:	4222      	tst	r2, r4
 8000e4e:	d0f3      	beq.n	8000e38 <HAL_GPIO_Init+0xa0>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e50:	684a      	ldr	r2, [r1, #4]
 8000e52:	465d      	mov	r5, fp
 8000e54:	43aa      	bics	r2, r5
 8000e56:	2a02      	cmp	r2, #2
 8000e58:	d0b2      	beq.n	8000dc0 <HAL_GPIO_Init+0x28>
      tmp = GPIOx->MODER;
 8000e5a:	6802      	ldr	r2, [r0, #0]
 8000e5c:	4692      	mov	sl, r2
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000e5e:	005d      	lsls	r5, r3, #1
 8000e60:	464a      	mov	r2, r9
 8000e62:	40aa      	lsls	r2, r5
 8000e64:	43d7      	mvns	r7, r2
 8000e66:	46bc      	mov	ip, r7
 8000e68:	4657      	mov	r7, sl
 8000e6a:	4397      	bics	r7, r2
 8000e6c:	46ba      	mov	sl, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000e6e:	684a      	ldr	r2, [r1, #4]
 8000e70:	464f      	mov	r7, r9
 8000e72:	403a      	ands	r2, r7
 8000e74:	40aa      	lsls	r2, r5
 8000e76:	4657      	mov	r7, sl
 8000e78:	433a      	orrs	r2, r7
      GPIOx->MODER = tmp;
 8000e7a:	6002      	str	r2, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e7c:	684a      	ldr	r2, [r1, #4]
 8000e7e:	465f      	mov	r7, fp
 8000e80:	43ba      	bics	r2, r7
 8000e82:	3a01      	subs	r2, #1
 8000e84:	2a01      	cmp	r2, #1
 8000e86:	d810      	bhi.n	8000eaa <HAL_GPIO_Init+0x112>
        tmp = GPIOx->OSPEEDR;
 8000e88:	6882      	ldr	r2, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e8a:	4667      	mov	r7, ip
 8000e8c:	4017      	ands	r7, r2
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e8e:	68ca      	ldr	r2, [r1, #12]
 8000e90:	40aa      	lsls	r2, r5
 8000e92:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = tmp;
 8000e94:	6082      	str	r2, [r0, #8]
        tmp = GPIOx->OTYPER;
 8000e96:	6842      	ldr	r2, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e98:	43a2      	bics	r2, r4
 8000e9a:	0014      	movs	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e9c:	684a      	ldr	r2, [r1, #4]
 8000e9e:	0912      	lsrs	r2, r2, #4
 8000ea0:	4647      	mov	r7, r8
 8000ea2:	403a      	ands	r2, r7
 8000ea4:	409a      	lsls	r2, r3
 8000ea6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8000ea8:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000eaa:	684a      	ldr	r2, [r1, #4]
 8000eac:	2a03      	cmp	r2, #3
 8000eae:	d0c3      	beq.n	8000e38 <HAL_GPIO_Init+0xa0>
        tmp = GPIOx->PUPDR;
 8000eb0:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000eb2:	4662      	mov	r2, ip
 8000eb4:	4014      	ands	r4, r2
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000eb6:	688a      	ldr	r2, [r1, #8]
 8000eb8:	40aa      	lsls	r2, r5
 8000eba:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 8000ebc:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ebe:	684a      	ldr	r2, [r1, #4]
 8000ec0:	2480      	movs	r4, #128	@ 0x80
 8000ec2:	0564      	lsls	r4, r4, #21
 8000ec4:	4222      	tst	r2, r4
 8000ec6:	d0b7      	beq.n	8000e38 <HAL_GPIO_Init+0xa0>
        tmp = EXTI->EXTICR[position >> 2U];
 8000ec8:	089c      	lsrs	r4, r3, #2
 8000eca:	00a4      	lsls	r4, r4, #2
 8000ecc:	4a19      	ldr	r2, [pc, #100]	@ (8000f34 <HAL_GPIO_Init+0x19c>)
 8000ece:	4694      	mov	ip, r2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	6e25      	ldr	r5, [r4, #96]	@ 0x60
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000ed4:	464a      	mov	r2, r9
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	00d2      	lsls	r2, r2, #3
 8000eda:	4694      	mov	ip, r2
 8000edc:	220f      	movs	r2, #15
 8000ede:	4667      	mov	r7, ip
 8000ee0:	40ba      	lsls	r2, r7
 8000ee2:	4395      	bics	r5, r2
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000ee4:	22a0      	movs	r2, #160	@ 0xa0
 8000ee6:	05d2      	lsls	r2, r2, #23
 8000ee8:	4290      	cmp	r0, r2
 8000eea:	d081      	beq.n	8000df0 <HAL_GPIO_Init+0x58>
 8000eec:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <HAL_GPIO_Init+0x1a0>)
 8000eee:	4290      	cmp	r0, r2
 8000ef0:	d008      	beq.n	8000f04 <HAL_GPIO_Init+0x16c>
 8000ef2:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <HAL_GPIO_Init+0x1a4>)
 8000ef4:	4290      	cmp	r0, r2
 8000ef6:	d007      	beq.n	8000f08 <HAL_GPIO_Init+0x170>
 8000ef8:	4a11      	ldr	r2, [pc, #68]	@ (8000f40 <HAL_GPIO_Init+0x1a8>)
 8000efa:	1882      	adds	r2, r0, r2
 8000efc:	1e57      	subs	r7, r2, #1
 8000efe:	41ba      	sbcs	r2, r7
 8000f00:	3205      	adds	r2, #5
 8000f02:	e776      	b.n	8000df2 <HAL_GPIO_Init+0x5a>
 8000f04:	2201      	movs	r2, #1
 8000f06:	e774      	b.n	8000df2 <HAL_GPIO_Init+0x5a>
 8000f08:	2202      	movs	r2, #2
 8000f0a:	e772      	b.n	8000df2 <HAL_GPIO_Init+0x5a>
          tmp |= iocurrent;
 8000f0c:	9d01      	ldr	r5, [sp, #4]
 8000f0e:	432a      	orrs	r2, r5
 8000f10:	e77c      	b.n	8000e0c <HAL_GPIO_Init+0x74>
          tmp |= iocurrent;
 8000f12:	9d01      	ldr	r5, [sp, #4]
 8000f14:	432a      	orrs	r2, r5
 8000f16:	e781      	b.n	8000e1c <HAL_GPIO_Init+0x84>
          tmp |= iocurrent;
 8000f18:	9d01      	ldr	r5, [sp, #4]
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	e785      	b.n	8000e2a <HAL_GPIO_Init+0x92>
          tmp |= iocurrent;
 8000f1e:	9c01      	ldr	r4, [sp, #4]
 8000f20:	4322      	orrs	r2, r4
 8000f22:	e788      	b.n	8000e36 <HAL_GPIO_Init+0x9e>
  }
}
 8000f24:	b003      	add	sp, #12
 8000f26:	bcf0      	pop	{r4, r5, r6, r7}
 8000f28:	46bb      	mov	fp, r7
 8000f2a:	46b2      	mov	sl, r6
 8000f2c:	46a9      	mov	r9, r5
 8000f2e:	46a0      	mov	r8, r4
 8000f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	40021800 	.word	0x40021800
 8000f38:	50000400 	.word	0x50000400
 8000f3c:	50000800 	.word	0x50000800
 8000f40:	afffec00 	.word	0xafffec00

08000f44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f48:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f4a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4c:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000f4e:	e7fc      	b.n	8000f4a <HAL_GPIO_WritePin+0x6>

08000f50 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000f50:	6802      	ldr	r2, [r0, #0]
 8000f52:	6993      	ldr	r3, [r2, #24]
 8000f54:	079b      	lsls	r3, r3, #30
 8000f56:	d501      	bpl.n	8000f5c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f5c:	6803      	ldr	r3, [r0, #0]
 8000f5e:	699a      	ldr	r2, [r3, #24]
 8000f60:	07d2      	lsls	r2, r2, #31
 8000f62:	d403      	bmi.n	8000f6c <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	2101      	movs	r1, #1
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	619a      	str	r2, [r3, #24]
  }
}
 8000f6c:	4770      	bx	lr
	...

08000f70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8000f70:	b530      	push	{r4, r5, lr}
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8000f72:	6800      	ldr	r0, [r0, #0]
 8000f74:	6844      	ldr	r4, [r0, #4]
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000f76:	0412      	lsls	r2, r2, #16
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000f78:	9d03      	ldr	r5, [sp, #12]
 8000f7a:	432b      	orrs	r3, r5
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	0589      	lsls	r1, r1, #22
 8000f80:	0d89      	lsrs	r1, r1, #22
 8000f82:	430a      	orrs	r2, r1
 8000f84:	0052      	lsls	r2, r2, #1
 8000f86:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8000f88:	0d6b      	lsrs	r3, r5, #21
 8000f8a:	2180      	movs	r1, #128	@ 0x80
 8000f8c:	00c9      	lsls	r1, r1, #3
 8000f8e:	400b      	ands	r3, r1
 8000f90:	4902      	ldr	r1, [pc, #8]	@ (8000f9c <I2C_TransferConfig+0x2c>)
 8000f92:	430b      	orrs	r3, r1
 8000f94:	439c      	bics	r4, r3
 8000f96:	4322      	orrs	r2, r4
 8000f98:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8000f9a:	bd30      	pop	{r4, r5, pc}
 8000f9c:	03ff63ff 	.word	0x03ff63ff

08000fa0 <I2C_IsErrorOccurred>:
{
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	46d6      	mov	lr, sl
 8000fa4:	464f      	mov	r7, r9
 8000fa6:	4646      	mov	r6, r8
 8000fa8:	b5c0      	push	{r6, r7, lr}
 8000faa:	0004      	movs	r4, r0
 8000fac:	000d      	movs	r5, r1
 8000fae:	4690      	mov	r8, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8000fb0:	6801      	ldr	r1, [r0, #0]
 8000fb2:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000fb4:	2210      	movs	r2, #16
 8000fb6:	0016      	movs	r6, r2
 8000fb8:	401e      	ands	r6, r3
  HAL_StatusTypeDef status = HAL_OK;
 8000fba:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000fbc:	421a      	tst	r2, r3
 8000fbe:	d044      	beq.n	800104a <I2C_IsErrorOccurred+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	4699      	mov	r9, r3
  HAL_StatusTypeDef status = HAL_OK;
 8000fc8:	2600      	movs	r6, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000fca:	2720      	movs	r7, #32
 8000fcc:	6821      	ldr	r1, [r4, #0]
 8000fce:	698b      	ldr	r3, [r1, #24]
 8000fd0:	421f      	tst	r7, r3
 8000fd2:	d131      	bne.n	8001038 <I2C_IsErrorOccurred+0x98>
 8000fd4:	2e00      	cmp	r6, #0
 8000fd6:	d133      	bne.n	8001040 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8000fd8:	1c6b      	adds	r3, r5, #1
 8000fda:	d0f8      	beq.n	8000fce <I2C_IsErrorOccurred+0x2e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000fdc:	f7ff fe5a 	bl	8000c94 <HAL_GetTick>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	1ac0      	subs	r0, r0, r3
 8000fe4:	42a8      	cmp	r0, r5
 8000fe6:	d801      	bhi.n	8000fec <I2C_IsErrorOccurred+0x4c>
 8000fe8:	2d00      	cmp	r5, #0
 8000fea:	d1ef      	bne.n	8000fcc <I2C_IsErrorOccurred+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000fec:	6822      	ldr	r2, [r4, #0]
 8000fee:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 8000ff0:	2342      	movs	r3, #66	@ 0x42
 8000ff2:	5ce3      	ldrb	r3, [r4, r3]
 8000ff4:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8000ff6:	6991      	ldr	r1, [r2, #24]
 8000ff8:	0409      	lsls	r1, r1, #16
 8000ffa:	d503      	bpl.n	8001004 <I2C_IsErrorOccurred+0x64>
 8000ffc:	0440      	lsls	r0, r0, #17
 8000ffe:	d401      	bmi.n	8001004 <I2C_IsErrorOccurred+0x64>
              (tmp1 != I2C_CR2_STOP) && \
 8001000:	2b20      	cmp	r3, #32
 8001002:	d110      	bne.n	8001026 <I2C_IsErrorOccurred+0x86>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001004:	2320      	movs	r3, #32
 8001006:	469a      	mov	sl, r3
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4652      	mov	r2, sl
 800100e:	421a      	tst	r2, r3
 8001010:	d1dc      	bne.n	8000fcc <I2C_IsErrorOccurred+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001012:	f7ff fe3f 	bl	8000c94 <HAL_GetTick>
 8001016:	4643      	mov	r3, r8
 8001018:	1ac0      	subs	r0, r0, r3
 800101a:	2819      	cmp	r0, #25
 800101c:	d9f4      	bls.n	8001008 <I2C_IsErrorOccurred+0x68>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800101e:	2320      	movs	r3, #32
 8001020:	4699      	mov	r9, r3
              status = HAL_ERROR;
 8001022:	2601      	movs	r6, #1
 8001024:	e7d2      	b.n	8000fcc <I2C_IsErrorOccurred+0x2c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001026:	6851      	ldr	r1, [r2, #4]
 8001028:	2380      	movs	r3, #128	@ 0x80
 800102a:	01db      	lsls	r3, r3, #7
 800102c:	430b      	orrs	r3, r1
 800102e:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8001030:	f7ff fe30 	bl	8000c94 <HAL_GetTick>
 8001034:	4680      	mov	r8, r0
 8001036:	e7e5      	b.n	8001004 <I2C_IsErrorOccurred+0x64>
    if (status == HAL_OK)
 8001038:	2e00      	cmp	r6, #0
 800103a:	d101      	bne.n	8001040 <I2C_IsErrorOccurred+0xa0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800103c:	2320      	movs	r3, #32
 800103e:	61cb      	str	r3, [r1, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8001040:	2604      	movs	r6, #4
 8001042:	464b      	mov	r3, r9
 8001044:	4333      	orrs	r3, r6
 8001046:	001e      	movs	r6, r3
    status = HAL_ERROR;
 8001048:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800104a:	6822      	ldr	r2, [r4, #0]
 800104c:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800104e:	05d9      	lsls	r1, r3, #23
 8001050:	d504      	bpl.n	800105c <I2C_IsErrorOccurred+0xbc>
    error_code |= HAL_I2C_ERROR_BERR;
 8001052:	2101      	movs	r1, #1
 8001054:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001056:	31ff      	adds	r1, #255	@ 0xff
 8001058:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800105a:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800105c:	055a      	lsls	r2, r3, #21
 800105e:	d526      	bpl.n	80010ae <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_OVR;
 8001060:	2208      	movs	r2, #8
 8001062:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001064:	6822      	ldr	r2, [r4, #0]
 8001066:	2180      	movs	r1, #128	@ 0x80
 8001068:	00c9      	lsls	r1, r1, #3
 800106a:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800106c:	059b      	lsls	r3, r3, #22
 800106e:	d505      	bpl.n	800107c <I2C_IsErrorOccurred+0xdc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001070:	2302      	movs	r3, #2
 8001072:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	2280      	movs	r2, #128	@ 0x80
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800107c:	0020      	movs	r0, r4
 800107e:	f7ff ff67 	bl	8000f50 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001082:	6822      	ldr	r2, [r4, #0]
 8001084:	6853      	ldr	r3, [r2, #4]
 8001086:	490c      	ldr	r1, [pc, #48]	@ (80010b8 <I2C_IsErrorOccurred+0x118>)
 8001088:	400b      	ands	r3, r1
 800108a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800108c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800108e:	4333      	orrs	r3, r6
 8001090:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001092:	2341      	movs	r3, #65	@ 0x41
 8001094:	2220      	movs	r2, #32
 8001096:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001098:	2300      	movs	r3, #0
 800109a:	3222      	adds	r2, #34	@ 0x22
 800109c:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 800109e:	3a02      	subs	r2, #2
 80010a0:	54a3      	strb	r3, [r4, r2]
 80010a2:	2001      	movs	r0, #1
}
 80010a4:	bce0      	pop	{r5, r6, r7}
 80010a6:	46ba      	mov	sl, r7
 80010a8:	46b1      	mov	r9, r6
 80010aa:	46a8      	mov	r8, r5
 80010ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80010ae:	059b      	lsls	r3, r3, #22
 80010b0:	d4de      	bmi.n	8001070 <I2C_IsErrorOccurred+0xd0>
  if (status != HAL_OK)
 80010b2:	2800      	cmp	r0, #0
 80010b4:	d0f6      	beq.n	80010a4 <I2C_IsErrorOccurred+0x104>
 80010b6:	e7e1      	b.n	800107c <I2C_IsErrorOccurred+0xdc>
 80010b8:	fe00e800 	.word	0xfe00e800

080010bc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80010bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010be:	0004      	movs	r4, r0
 80010c0:	000d      	movs	r5, r1
 80010c2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80010c4:	2702      	movs	r7, #2
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	421f      	tst	r7, r3
 80010cc:	d120      	bne.n	8001110 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80010ce:	0032      	movs	r2, r6
 80010d0:	0029      	movs	r1, r5
 80010d2:	0020      	movs	r0, r4
 80010d4:	f7ff ff64 	bl	8000fa0 <I2C_IsErrorOccurred>
 80010d8:	2800      	cmp	r0, #0
 80010da:	d11b      	bne.n	8001114 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 80010dc:	1c6b      	adds	r3, r5, #1
 80010de:	d0f2      	beq.n	80010c6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010e0:	f7ff fdd8 	bl	8000c94 <HAL_GetTick>
 80010e4:	1b80      	subs	r0, r0, r6
 80010e6:	42a8      	cmp	r0, r5
 80010e8:	d801      	bhi.n	80010ee <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80010ea:	2d00      	cmp	r5, #0
 80010ec:	d1eb      	bne.n	80010c6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	079b      	lsls	r3, r3, #30
 80010f4:	d4e7      	bmi.n	80010c6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010f6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80010f8:	2220      	movs	r2, #32
 80010fa:	4313      	orrs	r3, r2
 80010fc:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80010fe:	2341      	movs	r3, #65	@ 0x41
 8001100:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001102:	2300      	movs	r3, #0
 8001104:	3222      	adds	r2, #34	@ 0x22
 8001106:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8001108:	3a02      	subs	r2, #2
 800110a:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 800110c:	2001      	movs	r0, #1
 800110e:	e000      	b.n	8001112 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
  return HAL_OK;
 8001110:	2000      	movs	r0, #0
}
 8001112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
 8001116:	e7fc      	b.n	8001112 <I2C_WaitOnTXISFlagUntilTimeout+0x56>

08001118 <I2C_WaitOnFlagUntilTimeout>:
{
 8001118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111a:	46d6      	mov	lr, sl
 800111c:	4647      	mov	r7, r8
 800111e:	b580      	push	{r7, lr}
 8001120:	b083      	sub	sp, #12
 8001122:	0007      	movs	r7, r0
 8001124:	000d      	movs	r5, r1
 8001126:	0016      	movs	r6, r2
 8001128:	4698      	mov	r8, r3
 800112a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800112c:	469a      	mov	sl, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800112e:	9201      	str	r2, [sp, #4]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	699c      	ldr	r4, [r3, #24]
 8001134:	402c      	ands	r4, r5
 8001136:	1b64      	subs	r4, r4, r5
 8001138:	4263      	negs	r3, r4
 800113a:	415c      	adcs	r4, r3
 800113c:	42b4      	cmp	r4, r6
 800113e:	d128      	bne.n	8001192 <I2C_WaitOnFlagUntilTimeout+0x7a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001140:	4652      	mov	r2, sl
 8001142:	4641      	mov	r1, r8
 8001144:	0038      	movs	r0, r7
 8001146:	f7ff ff2b 	bl	8000fa0 <I2C_IsErrorOccurred>
 800114a:	2800      	cmp	r0, #0
 800114c:	d127      	bne.n	800119e <I2C_WaitOnFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 800114e:	4643      	mov	r3, r8
 8001150:	3301      	adds	r3, #1
 8001152:	d0ed      	beq.n	8001130 <I2C_WaitOnFlagUntilTimeout+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001154:	f7ff fd9e 	bl	8000c94 <HAL_GetTick>
 8001158:	4653      	mov	r3, sl
 800115a:	1ac0      	subs	r0, r0, r3
 800115c:	4540      	cmp	r0, r8
 800115e:	d802      	bhi.n	8001166 <I2C_WaitOnFlagUntilTimeout+0x4e>
 8001160:	4643      	mov	r3, r8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1e4      	bne.n	8001130 <I2C_WaitOnFlagUntilTimeout+0x18>
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	402b      	ands	r3, r5
 800116c:	1b5b      	subs	r3, r3, r5
 800116e:	425a      	negs	r2, r3
 8001170:	4153      	adcs	r3, r2
 8001172:	9a01      	ldr	r2, [sp, #4]
 8001174:	4293      	cmp	r3, r2
 8001176:	d1db      	bne.n	8001130 <I2C_WaitOnFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800117a:	2220      	movs	r2, #32
 800117c:	4313      	orrs	r3, r2
 800117e:	647b      	str	r3, [r7, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001180:	2341      	movs	r3, #65	@ 0x41
 8001182:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001184:	2300      	movs	r3, #0
 8001186:	3222      	adds	r2, #34	@ 0x22
 8001188:	54bb      	strb	r3, [r7, r2]
          __HAL_UNLOCK(hi2c);
 800118a:	3a02      	subs	r2, #2
 800118c:	54bb      	strb	r3, [r7, r2]
          return HAL_ERROR;
 800118e:	2001      	movs	r0, #1
 8001190:	e000      	b.n	8001194 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8001192:	2000      	movs	r0, #0
}
 8001194:	b003      	add	sp, #12
 8001196:	bcc0      	pop	{r6, r7}
 8001198:	46ba      	mov	sl, r7
 800119a:	46b0      	mov	r8, r6
 800119c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800119e:	2001      	movs	r0, #1
 80011a0:	e7f8      	b.n	8001194 <I2C_WaitOnFlagUntilTimeout+0x7c>

080011a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80011a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a4:	46c6      	mov	lr, r8
 80011a6:	b500      	push	{lr}
 80011a8:	0005      	movs	r5, r0
 80011aa:	000e      	movs	r6, r1
 80011ac:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011ae:	6803      	ldr	r3, [r0, #0]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	069b      	lsls	r3, r3, #26
 80011b4:	d428      	bmi.n	8001208 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011b6:	2320      	movs	r3, #32
 80011b8:	4698      	mov	r8, r3
 80011ba:	e009      	b.n	80011d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4642      	mov	r2, r8
 80011c2:	421a      	tst	r2, r3
 80011c4:	d013      	beq.n	80011ee <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011c6:	682b      	ldr	r3, [r5, #0]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	4642      	mov	r2, r8
 80011cc:	421a      	tst	r2, r3
 80011ce:	d11e      	bne.n	800120e <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80011d0:	003a      	movs	r2, r7
 80011d2:	0031      	movs	r1, r6
 80011d4:	0028      	movs	r0, r5
 80011d6:	f7ff fee3 	bl	8000fa0 <I2C_IsErrorOccurred>
 80011da:	1e04      	subs	r4, r0, #0
 80011dc:	d116      	bne.n	800120c <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011de:	f7ff fd59 	bl	8000c94 <HAL_GetTick>
 80011e2:	1bc0      	subs	r0, r0, r7
 80011e4:	42b0      	cmp	r0, r6
 80011e6:	d8e9      	bhi.n	80011bc <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
 80011e8:	2e00      	cmp	r6, #0
 80011ea:	d1ec      	bne.n	80011c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
 80011ec:	e7e6      	b.n	80011bc <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011ee:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80011f0:	2220      	movs	r2, #32
 80011f2:	4313      	orrs	r3, r2
 80011f4:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80011f6:	2341      	movs	r3, #65	@ 0x41
 80011f8:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	3222      	adds	r2, #34	@ 0x22
 80011fe:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8001200:	3a02      	subs	r2, #2
 8001202:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8001204:	2401      	movs	r4, #1
 8001206:	e002      	b.n	800120e <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
  return HAL_OK;
 8001208:	2400      	movs	r4, #0
 800120a:	e000      	b.n	800120e <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
      return HAL_ERROR;
 800120c:	2401      	movs	r4, #1
}
 800120e:	0020      	movs	r0, r4
 8001210:	bc80      	pop	{r7}
 8001212:	46b8      	mov	r8, r7
 8001214:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001218 <HAL_I2C_Init>:
{
 8001218:	b510      	push	{r4, lr}
 800121a:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 800121c:	d060      	beq.n	80012e0 <HAL_I2C_Init+0xc8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800121e:	2341      	movs	r3, #65	@ 0x41
 8001220:	5cc3      	ldrb	r3, [r0, r3]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d048      	beq.n	80012b8 <HAL_I2C_Init+0xa0>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001226:	2341      	movs	r3, #65	@ 0x41
 8001228:	2224      	movs	r2, #36	@ 0x24
 800122a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 800122c:	6822      	ldr	r2, [r4, #0]
 800122e:	6813      	ldr	r3, [r2, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	438b      	bics	r3, r1
 8001234:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001236:	6822      	ldr	r2, [r4, #0]
 8001238:	6863      	ldr	r3, [r4, #4]
 800123a:	492a      	ldr	r1, [pc, #168]	@ (80012e4 <HAL_I2C_Init+0xcc>)
 800123c:	400b      	ands	r3, r1
 800123e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001240:	6822      	ldr	r2, [r4, #0]
 8001242:	6893      	ldr	r3, [r2, #8]
 8001244:	4928      	ldr	r1, [pc, #160]	@ (80012e8 <HAL_I2C_Init+0xd0>)
 8001246:	400b      	ands	r3, r1
 8001248:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800124a:	68e3      	ldr	r3, [r4, #12]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d039      	beq.n	80012c4 <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001250:	6822      	ldr	r2, [r4, #0]
 8001252:	68a1      	ldr	r1, [r4, #8]
 8001254:	2384      	movs	r3, #132	@ 0x84
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	430b      	orrs	r3, r1
 800125a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800125c:	68e3      	ldr	r3, [r4, #12]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d037      	beq.n	80012d2 <HAL_I2C_Init+0xba>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001262:	6822      	ldr	r2, [r4, #0]
 8001264:	6853      	ldr	r3, [r2, #4]
 8001266:	4921      	ldr	r1, [pc, #132]	@ (80012ec <HAL_I2C_Init+0xd4>)
 8001268:	400b      	ands	r3, r1
 800126a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800126c:	6822      	ldr	r2, [r4, #0]
 800126e:	6851      	ldr	r1, [r2, #4]
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <HAL_I2C_Init+0xd8>)
 8001272:	430b      	orrs	r3, r1
 8001274:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001276:	6822      	ldr	r2, [r4, #0]
 8001278:	68d3      	ldr	r3, [r2, #12]
 800127a:	491b      	ldr	r1, [pc, #108]	@ (80012e8 <HAL_I2C_Init+0xd0>)
 800127c:	400b      	ands	r3, r1
 800127e:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001280:	6821      	ldr	r1, [r4, #0]
 8001282:	6923      	ldr	r3, [r4, #16]
 8001284:	6962      	ldr	r2, [r4, #20]
 8001286:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001288:	69a2      	ldr	r2, [r4, #24]
 800128a:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800128c:	4313      	orrs	r3, r2
 800128e:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001290:	6822      	ldr	r2, [r4, #0]
 8001292:	69e3      	ldr	r3, [r4, #28]
 8001294:	6a21      	ldr	r1, [r4, #32]
 8001296:	430b      	orrs	r3, r1
 8001298:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800129a:	6822      	ldr	r2, [r4, #0]
 800129c:	6813      	ldr	r3, [r2, #0]
 800129e:	2101      	movs	r1, #1
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012a8:	2241      	movs	r2, #65	@ 0x41
 80012aa:	311f      	adds	r1, #31
 80012ac:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ae:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b0:	3201      	adds	r2, #1
 80012b2:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80012b4:	2000      	movs	r0, #0
}
 80012b6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80012b8:	3340      	adds	r3, #64	@ 0x40
 80012ba:	2200      	movs	r2, #0
 80012bc:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80012be:	f7ff fa53 	bl	8000768 <HAL_I2C_MspInit>
 80012c2:	e7b0      	b.n	8001226 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012c4:	6822      	ldr	r2, [r4, #0]
 80012c6:	68a1      	ldr	r1, [r4, #8]
 80012c8:	2380      	movs	r3, #128	@ 0x80
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6093      	str	r3, [r2, #8]
 80012d0:	e7c4      	b.n	800125c <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012d2:	6822      	ldr	r2, [r4, #0]
 80012d4:	6851      	ldr	r1, [r2, #4]
 80012d6:	2380      	movs	r3, #128	@ 0x80
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	430b      	orrs	r3, r1
 80012dc:	6053      	str	r3, [r2, #4]
 80012de:	e7c5      	b.n	800126c <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 80012e0:	2001      	movs	r0, #1
 80012e2:	e7e8      	b.n	80012b6 <HAL_I2C_Init+0x9e>
 80012e4:	f0ffffff 	.word	0xf0ffffff
 80012e8:	ffff7fff 	.word	0xffff7fff
 80012ec:	fffff7ff 	.word	0xfffff7ff
 80012f0:	02008000 	.word	0x02008000

080012f4 <HAL_I2C_Mem_Write>:
{
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	b087      	sub	sp, #28
 80012f8:	0004      	movs	r4, r0
 80012fa:	9103      	str	r1, [sp, #12]
 80012fc:	9205      	str	r2, [sp, #20]
 80012fe:	9304      	str	r3, [sp, #16]
 8001300:	ab0c      	add	r3, sp, #48	@ 0x30
 8001302:	cb20      	ldmia	r3!, {r5}
 8001304:	881e      	ldrh	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001306:	2341      	movs	r3, #65	@ 0x41
 8001308:	5cc3      	ldrb	r3, [r0, r3]
 800130a:	2b20      	cmp	r3, #32
 800130c:	d000      	beq.n	8001310 <HAL_I2C_Mem_Write+0x1c>
 800130e:	e0d8      	b.n	80014c2 <HAL_I2C_Mem_Write+0x1ce>
    if ((pData == NULL) || (Size == 0U))
 8001310:	2d00      	cmp	r5, #0
 8001312:	d054      	beq.n	80013be <HAL_I2C_Mem_Write+0xca>
 8001314:	2e00      	cmp	r6, #0
 8001316:	d052      	beq.n	80013be <HAL_I2C_Mem_Write+0xca>
    __HAL_LOCK(hi2c);
 8001318:	2340      	movs	r3, #64	@ 0x40
 800131a:	5cc3      	ldrb	r3, [r0, r3]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d100      	bne.n	8001322 <HAL_I2C_Mem_Write+0x2e>
 8001320:	e0d2      	b.n	80014c8 <HAL_I2C_Mem_Write+0x1d4>
 8001322:	2340      	movs	r3, #64	@ 0x40
 8001324:	2201      	movs	r2, #1
 8001326:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8001328:	f7ff fcb4 	bl	8000c94 <HAL_GetTick>
 800132c:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800132e:	2180      	movs	r1, #128	@ 0x80
 8001330:	9000      	str	r0, [sp, #0]
 8001332:	2319      	movs	r3, #25
 8001334:	2201      	movs	r2, #1
 8001336:	0209      	lsls	r1, r1, #8
 8001338:	0020      	movs	r0, r4
 800133a:	f7ff feed 	bl	8001118 <I2C_WaitOnFlagUntilTimeout>
 800133e:	0003      	movs	r3, r0
      return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001342:	2b00      	cmp	r3, #0
 8001344:	d000      	beq.n	8001348 <HAL_I2C_Mem_Write+0x54>
 8001346:	e0bd      	b.n	80014c4 <HAL_I2C_Mem_Write+0x1d0>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001348:	3341      	adds	r3, #65	@ 0x41
 800134a:	2221      	movs	r2, #33	@ 0x21
 800134c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800134e:	3301      	adds	r3, #1
 8001350:	321f      	adds	r2, #31
 8001352:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001354:	2300      	movs	r3, #0
 8001356:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001358:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800135a:	8566      	strh	r6, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800135c:	6363      	str	r3, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800135e:	3380      	adds	r3, #128	@ 0x80
 8001360:	9d04      	ldr	r5, [sp, #16]
 8001362:	b2ea      	uxtb	r2, r5
 8001364:	495c      	ldr	r1, [pc, #368]	@ (80014d8 <HAL_I2C_Mem_Write+0x1e4>)
 8001366:	9100      	str	r1, [sp, #0]
 8001368:	045b      	lsls	r3, r3, #17
 800136a:	9903      	ldr	r1, [sp, #12]
 800136c:	0020      	movs	r0, r4
 800136e:	f7ff fdff 	bl	8000f70 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001372:	003a      	movs	r2, r7
 8001374:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8001376:	0020      	movs	r0, r4
 8001378:	f7ff fea0 	bl	80010bc <I2C_WaitOnTXISFlagUntilTimeout>
 800137c:	2800      	cmp	r0, #0
 800137e:	d132      	bne.n	80013e6 <HAL_I2C_Mem_Write+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001380:	2d01      	cmp	r5, #1
 8001382:	d121      	bne.n	80013c8 <HAL_I2C_Mem_Write+0xd4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	466a      	mov	r2, sp
 8001388:	7d16      	ldrb	r6, [r2, #20]
 800138a:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800138c:	9700      	str	r7, [sp, #0]
 800138e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001390:	2200      	movs	r2, #0
 8001392:	2180      	movs	r1, #128	@ 0x80
 8001394:	0020      	movs	r0, r4
 8001396:	f7ff febf 	bl	8001118 <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800139a:	2800      	cmp	r0, #0
 800139c:	d123      	bne.n	80013e6 <HAL_I2C_Mem_Write+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800139e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	2bff      	cmp	r3, #255	@ 0xff
 80013a4:	d924      	bls.n	80013f0 <HAL_I2C_Mem_Write+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013a6:	23ff      	movs	r3, #255	@ 0xff
 80013a8:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013aa:	3b7f      	subs	r3, #127	@ 0x7f
 80013ac:	2200      	movs	r2, #0
 80013ae:	9200      	str	r2, [sp, #0]
 80013b0:	045b      	lsls	r3, r3, #17
 80013b2:	32ff      	adds	r2, #255	@ 0xff
 80013b4:	9903      	ldr	r1, [sp, #12]
 80013b6:	0020      	movs	r0, r4
 80013b8:	f7ff fdda 	bl	8000f70 <I2C_TransferConfig>
 80013bc:	e035      	b.n	800142a <HAL_I2C_Mem_Write+0x136>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013be:	2380      	movs	r3, #128	@ 0x80
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80013c4:	2001      	movs	r0, #1
 80013c6:	e07d      	b.n	80014c4 <HAL_I2C_Mem_Write+0x1d0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	9d05      	ldr	r5, [sp, #20]
 80013cc:	0a2a      	lsrs	r2, r5, #8
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013d0:	003a      	movs	r2, r7
 80013d2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80013d4:	0020      	movs	r0, r4
 80013d6:	f7ff fe71 	bl	80010bc <I2C_WaitOnTXISFlagUntilTimeout>
 80013da:	2800      	cmp	r0, #0
 80013dc:	d103      	bne.n	80013e6 <HAL_I2C_Mem_Write+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	b2ee      	uxtb	r6, r5
 80013e2:	629e      	str	r6, [r3, #40]	@ 0x28
 80013e4:	e7d2      	b.n	800138c <HAL_I2C_Mem_Write+0x98>
      __HAL_UNLOCK(hi2c);
 80013e6:	2340      	movs	r3, #64	@ 0x40
 80013e8:	2200      	movs	r2, #0
 80013ea:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80013ec:	2001      	movs	r0, #1
 80013ee:	e069      	b.n	80014c4 <HAL_I2C_Mem_Write+0x1d0>
      hi2c->XferSize = hi2c->XferCount;
 80013f0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80013f2:	b292      	uxth	r2, r2
 80013f4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013f6:	2380      	movs	r3, #128	@ 0x80
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	2100      	movs	r1, #0
 80013fc:	9100      	str	r1, [sp, #0]
 80013fe:	049b      	lsls	r3, r3, #18
 8001400:	9903      	ldr	r1, [sp, #12]
 8001402:	0020      	movs	r0, r4
 8001404:	f7ff fdb4 	bl	8000f70 <I2C_TransferConfig>
 8001408:	e00f      	b.n	800142a <HAL_I2C_Mem_Write+0x136>
          hi2c->XferSize = hi2c->XferCount;
 800140a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800140c:	b292      	uxth	r2, r2
 800140e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	2100      	movs	r1, #0
 8001416:	9100      	str	r1, [sp, #0]
 8001418:	049b      	lsls	r3, r3, #18
 800141a:	9903      	ldr	r1, [sp, #12]
 800141c:	0020      	movs	r0, r4
 800141e:	f7ff fda7 	bl	8000f70 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001422:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001424:	b29b      	uxth	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d034      	beq.n	8001494 <HAL_I2C_Mem_Write+0x1a0>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800142a:	003a      	movs	r2, r7
 800142c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800142e:	0020      	movs	r0, r4
 8001430:	f7ff fe44 	bl	80010bc <I2C_WaitOnTXISFlagUntilTimeout>
 8001434:	2800      	cmp	r0, #0
 8001436:	d149      	bne.n	80014cc <HAL_I2C_Mem_Write+0x1d8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8001440:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001442:	3301      	adds	r3, #1
 8001444:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001446:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001448:	3b01      	subs	r3, #1
 800144a:	b29b      	uxth	r3, r3
 800144c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800144e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001450:	3b01      	subs	r3, #1
 8001452:	b29b      	uxth	r3, r3
 8001454:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001456:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001458:	b292      	uxth	r2, r2
 800145a:	2a00      	cmp	r2, #0
 800145c:	d0e1      	beq.n	8001422 <HAL_I2C_Mem_Write+0x12e>
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1df      	bne.n	8001422 <HAL_I2C_Mem_Write+0x12e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001462:	9700      	str	r7, [sp, #0]
 8001464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001466:	2200      	movs	r2, #0
 8001468:	2180      	movs	r1, #128	@ 0x80
 800146a:	0020      	movs	r0, r4
 800146c:	f7ff fe54 	bl	8001118 <I2C_WaitOnFlagUntilTimeout>
 8001470:	2800      	cmp	r0, #0
 8001472:	d12d      	bne.n	80014d0 <HAL_I2C_Mem_Write+0x1dc>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001474:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001476:	b29b      	uxth	r3, r3
 8001478:	2bff      	cmp	r3, #255	@ 0xff
 800147a:	d9c6      	bls.n	800140a <HAL_I2C_Mem_Write+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800147c:	23ff      	movs	r3, #255	@ 0xff
 800147e:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001480:	3b7f      	subs	r3, #127	@ 0x7f
 8001482:	2200      	movs	r2, #0
 8001484:	9200      	str	r2, [sp, #0]
 8001486:	045b      	lsls	r3, r3, #17
 8001488:	32ff      	adds	r2, #255	@ 0xff
 800148a:	9903      	ldr	r1, [sp, #12]
 800148c:	0020      	movs	r0, r4
 800148e:	f7ff fd6f 	bl	8000f70 <I2C_TransferConfig>
 8001492:	e7c6      	b.n	8001422 <HAL_I2C_Mem_Write+0x12e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001494:	003a      	movs	r2, r7
 8001496:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8001498:	0020      	movs	r0, r4
 800149a:	f7ff fe82 	bl	80011a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800149e:	2800      	cmp	r0, #0
 80014a0:	d118      	bne.n	80014d4 <HAL_I2C_Mem_Write+0x1e0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	2220      	movs	r2, #32
 80014a6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80014a8:	6821      	ldr	r1, [r4, #0]
 80014aa:	684b      	ldr	r3, [r1, #4]
 80014ac:	4d0b      	ldr	r5, [pc, #44]	@ (80014dc <HAL_I2C_Mem_Write+0x1e8>)
 80014ae:	402b      	ands	r3, r5
 80014b0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80014b2:	2341      	movs	r3, #65	@ 0x41
 80014b4:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	3222      	adds	r2, #34	@ 0x22
 80014ba:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80014bc:	3a02      	subs	r2, #2
 80014be:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 80014c0:	e000      	b.n	80014c4 <HAL_I2C_Mem_Write+0x1d0>
    return HAL_BUSY;
 80014c2:	2002      	movs	r0, #2
}
 80014c4:	b007      	add	sp, #28
 80014c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80014c8:	2002      	movs	r0, #2
 80014ca:	e7fb      	b.n	80014c4 <HAL_I2C_Mem_Write+0x1d0>
        return HAL_ERROR;
 80014cc:	2001      	movs	r0, #1
 80014ce:	e7f9      	b.n	80014c4 <HAL_I2C_Mem_Write+0x1d0>
          return HAL_ERROR;
 80014d0:	2001      	movs	r0, #1
 80014d2:	e7f7      	b.n	80014c4 <HAL_I2C_Mem_Write+0x1d0>
      return HAL_ERROR;
 80014d4:	2001      	movs	r0, #1
 80014d6:	e7f5      	b.n	80014c4 <HAL_I2C_Mem_Write+0x1d0>
 80014d8:	80002000 	.word	0x80002000
 80014dc:	fe00e800 	.word	0xfe00e800

080014e0 <HAL_I2C_Mem_Read>:
{
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	b087      	sub	sp, #28
 80014e4:	0004      	movs	r4, r0
 80014e6:	9103      	str	r1, [sp, #12]
 80014e8:	9205      	str	r2, [sp, #20]
 80014ea:	9304      	str	r3, [sp, #16]
 80014ec:	ab0c      	add	r3, sp, #48	@ 0x30
 80014ee:	cb20      	ldmia	r3!, {r5}
 80014f0:	881e      	ldrh	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f2:	2341      	movs	r3, #65	@ 0x41
 80014f4:	5cc3      	ldrb	r3, [r0, r3]
 80014f6:	2b20      	cmp	r3, #32
 80014f8:	d000      	beq.n	80014fc <HAL_I2C_Mem_Read+0x1c>
 80014fa:	e0d9      	b.n	80016b0 <HAL_I2C_Mem_Read+0x1d0>
    if ((pData == NULL) || (Size == 0U))
 80014fc:	2d00      	cmp	r5, #0
 80014fe:	d053      	beq.n	80015a8 <HAL_I2C_Mem_Read+0xc8>
 8001500:	2e00      	cmp	r6, #0
 8001502:	d051      	beq.n	80015a8 <HAL_I2C_Mem_Read+0xc8>
    __HAL_LOCK(hi2c);
 8001504:	2340      	movs	r3, #64	@ 0x40
 8001506:	5cc3      	ldrb	r3, [r0, r3]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d100      	bne.n	800150e <HAL_I2C_Mem_Read+0x2e>
 800150c:	e0d3      	b.n	80016b6 <HAL_I2C_Mem_Read+0x1d6>
 800150e:	2340      	movs	r3, #64	@ 0x40
 8001510:	2201      	movs	r2, #1
 8001512:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8001514:	f7ff fbbe 	bl	8000c94 <HAL_GetTick>
 8001518:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800151a:	2180      	movs	r1, #128	@ 0x80
 800151c:	9000      	str	r0, [sp, #0]
 800151e:	2319      	movs	r3, #25
 8001520:	2201      	movs	r2, #1
 8001522:	0209      	lsls	r1, r1, #8
 8001524:	0020      	movs	r0, r4
 8001526:	f7ff fdf7 	bl	8001118 <I2C_WaitOnFlagUntilTimeout>
 800152a:	0003      	movs	r3, r0
      return HAL_ERROR;
 800152c:	2001      	movs	r0, #1
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800152e:	2b00      	cmp	r3, #0
 8001530:	d000      	beq.n	8001534 <HAL_I2C_Mem_Read+0x54>
 8001532:	e0be      	b.n	80016b2 <HAL_I2C_Mem_Read+0x1d2>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001534:	3341      	adds	r3, #65	@ 0x41
 8001536:	2222      	movs	r2, #34	@ 0x22
 8001538:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800153a:	3301      	adds	r3, #1
 800153c:	321e      	adds	r2, #30
 800153e:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001540:	2300      	movs	r3, #0
 8001542:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001544:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001546:	8566      	strh	r6, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001548:	6363      	str	r3, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800154a:	9d04      	ldr	r5, [sp, #16]
 800154c:	b2ea      	uxtb	r2, r5
 800154e:	4b5e      	ldr	r3, [pc, #376]	@ (80016c8 <HAL_I2C_Mem_Read+0x1e8>)
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	9903      	ldr	r1, [sp, #12]
 8001556:	0020      	movs	r0, r4
 8001558:	f7ff fd0a 	bl	8000f70 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800155c:	003a      	movs	r2, r7
 800155e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8001560:	0020      	movs	r0, r4
 8001562:	f7ff fdab 	bl	80010bc <I2C_WaitOnTXISFlagUntilTimeout>
 8001566:	2800      	cmp	r0, #0
 8001568:	d132      	bne.n	80015d0 <HAL_I2C_Mem_Read+0xf0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800156a:	2d01      	cmp	r5, #1
 800156c:	d121      	bne.n	80015b2 <HAL_I2C_Mem_Read+0xd2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	466a      	mov	r2, sp
 8001572:	7d16      	ldrb	r6, [r2, #20]
 8001574:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001576:	9700      	str	r7, [sp, #0]
 8001578:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800157a:	2200      	movs	r2, #0
 800157c:	2140      	movs	r1, #64	@ 0x40
 800157e:	0020      	movs	r0, r4
 8001580:	f7ff fdca 	bl	8001118 <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001584:	2800      	cmp	r0, #0
 8001586:	d123      	bne.n	80015d0 <HAL_I2C_Mem_Read+0xf0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001588:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800158a:	b29b      	uxth	r3, r3
 800158c:	2bff      	cmp	r3, #255	@ 0xff
 800158e:	d924      	bls.n	80015da <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001590:	23ff      	movs	r3, #255	@ 0xff
 8001592:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001594:	3b7f      	subs	r3, #127	@ 0x7f
 8001596:	4a4d      	ldr	r2, [pc, #308]	@ (80016cc <HAL_I2C_Mem_Read+0x1ec>)
 8001598:	9200      	str	r2, [sp, #0]
 800159a:	045b      	lsls	r3, r3, #17
 800159c:	22ff      	movs	r2, #255	@ 0xff
 800159e:	9903      	ldr	r1, [sp, #12]
 80015a0:	0020      	movs	r0, r4
 80015a2:	f7ff fce5 	bl	8000f70 <I2C_TransferConfig>
 80015a6:	e035      	b.n	8001614 <HAL_I2C_Mem_Read+0x134>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015a8:	2380      	movs	r3, #128	@ 0x80
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80015ae:	2001      	movs	r0, #1
 80015b0:	e07f      	b.n	80016b2 <HAL_I2C_Mem_Read+0x1d2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	9d05      	ldr	r5, [sp, #20]
 80015b6:	0a2a      	lsrs	r2, r5, #8
 80015b8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ba:	003a      	movs	r2, r7
 80015bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80015be:	0020      	movs	r0, r4
 80015c0:	f7ff fd7c 	bl	80010bc <I2C_WaitOnTXISFlagUntilTimeout>
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d103      	bne.n	80015d0 <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	b2ee      	uxtb	r6, r5
 80015cc:	629e      	str	r6, [r3, #40]	@ 0x28
 80015ce:	e7d2      	b.n	8001576 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 80015d0:	2340      	movs	r3, #64	@ 0x40
 80015d2:	2200      	movs	r2, #0
 80015d4:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80015d6:	2001      	movs	r0, #1
 80015d8:	e06b      	b.n	80016b2 <HAL_I2C_Mem_Read+0x1d2>
      hi2c->XferSize = hi2c->XferCount;
 80015da:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80015dc:	b292      	uxth	r2, r2
 80015de:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	4939      	ldr	r1, [pc, #228]	@ (80016cc <HAL_I2C_Mem_Read+0x1ec>)
 80015e6:	9100      	str	r1, [sp, #0]
 80015e8:	049b      	lsls	r3, r3, #18
 80015ea:	9903      	ldr	r1, [sp, #12]
 80015ec:	0020      	movs	r0, r4
 80015ee:	f7ff fcbf 	bl	8000f70 <I2C_TransferConfig>
 80015f2:	e00f      	b.n	8001614 <HAL_I2C_Mem_Read+0x134>
          hi2c->XferSize = hi2c->XferCount;
 80015f4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80015f6:	b292      	uxth	r2, r2
 80015f8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	2100      	movs	r1, #0
 8001600:	9100      	str	r1, [sp, #0]
 8001602:	049b      	lsls	r3, r3, #18
 8001604:	9903      	ldr	r1, [sp, #12]
 8001606:	0020      	movs	r0, r4
 8001608:	f7ff fcb2 	bl	8000f70 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800160c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800160e:	b29b      	uxth	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d036      	beq.n	8001682 <HAL_I2C_Mem_Read+0x1a2>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001614:	9700      	str	r7, [sp, #0]
 8001616:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001618:	2200      	movs	r2, #0
 800161a:	2104      	movs	r1, #4
 800161c:	0020      	movs	r0, r4
 800161e:	f7ff fd7b 	bl	8001118 <I2C_WaitOnFlagUntilTimeout>
 8001622:	2800      	cmp	r0, #0
 8001624:	d149      	bne.n	80016ba <HAL_I2C_Mem_Read+0x1da>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800162a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800162c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800162e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001630:	3301      	adds	r3, #1
 8001632:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8001634:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001636:	3b01      	subs	r3, #1
 8001638:	b29b      	uxth	r3, r3
 800163a:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800163c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800163e:	3a01      	subs	r2, #1
 8001640:	b292      	uxth	r2, r2
 8001642:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001644:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001646:	b292      	uxth	r2, r2
 8001648:	2a00      	cmp	r2, #0
 800164a:	d0df      	beq.n	800160c <HAL_I2C_Mem_Read+0x12c>
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1dd      	bne.n	800160c <HAL_I2C_Mem_Read+0x12c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001650:	9700      	str	r7, [sp, #0]
 8001652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001654:	2200      	movs	r2, #0
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	0020      	movs	r0, r4
 800165a:	f7ff fd5d 	bl	8001118 <I2C_WaitOnFlagUntilTimeout>
 800165e:	2800      	cmp	r0, #0
 8001660:	d12d      	bne.n	80016be <HAL_I2C_Mem_Read+0x1de>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001662:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001664:	b29b      	uxth	r3, r3
 8001666:	2bff      	cmp	r3, #255	@ 0xff
 8001668:	d9c4      	bls.n	80015f4 <HAL_I2C_Mem_Read+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800166a:	23ff      	movs	r3, #255	@ 0xff
 800166c:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800166e:	3b7f      	subs	r3, #127	@ 0x7f
 8001670:	2200      	movs	r2, #0
 8001672:	9200      	str	r2, [sp, #0]
 8001674:	045b      	lsls	r3, r3, #17
 8001676:	32ff      	adds	r2, #255	@ 0xff
 8001678:	9903      	ldr	r1, [sp, #12]
 800167a:	0020      	movs	r0, r4
 800167c:	f7ff fc78 	bl	8000f70 <I2C_TransferConfig>
 8001680:	e7c4      	b.n	800160c <HAL_I2C_Mem_Read+0x12c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001682:	003a      	movs	r2, r7
 8001684:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8001686:	0020      	movs	r0, r4
 8001688:	f7ff fd8b 	bl	80011a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800168c:	2800      	cmp	r0, #0
 800168e:	d118      	bne.n	80016c2 <HAL_I2C_Mem_Read+0x1e2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	2220      	movs	r2, #32
 8001694:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001696:	6821      	ldr	r1, [r4, #0]
 8001698:	684b      	ldr	r3, [r1, #4]
 800169a:	4d0d      	ldr	r5, [pc, #52]	@ (80016d0 <HAL_I2C_Mem_Read+0x1f0>)
 800169c:	402b      	ands	r3, r5
 800169e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80016a0:	2341      	movs	r3, #65	@ 0x41
 80016a2:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	3222      	adds	r2, #34	@ 0x22
 80016a8:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80016aa:	3a02      	subs	r2, #2
 80016ac:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 80016ae:	e000      	b.n	80016b2 <HAL_I2C_Mem_Read+0x1d2>
    return HAL_BUSY;
 80016b0:	2002      	movs	r0, #2
}
 80016b2:	b007      	add	sp, #28
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80016b6:	2002      	movs	r0, #2
 80016b8:	e7fb      	b.n	80016b2 <HAL_I2C_Mem_Read+0x1d2>
        return HAL_ERROR;
 80016ba:	2001      	movs	r0, #1
 80016bc:	e7f9      	b.n	80016b2 <HAL_I2C_Mem_Read+0x1d2>
          return HAL_ERROR;
 80016be:	2001      	movs	r0, #1
 80016c0:	e7f7      	b.n	80016b2 <HAL_I2C_Mem_Read+0x1d2>
      return HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
 80016c4:	e7f5      	b.n	80016b2 <HAL_I2C_Mem_Read+0x1d2>
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	80002000 	.word	0x80002000
 80016cc:	80002400 	.word	0x80002400
 80016d0:	fe00e800 	.word	0xfe00e800

080016d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d6:	2341      	movs	r3, #65	@ 0x41
 80016d8:	5cc3      	ldrb	r3, [r0, r3]
 80016da:	2b20      	cmp	r3, #32
 80016dc:	d120      	bne.n	8001720 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016de:	3320      	adds	r3, #32
 80016e0:	5cc3      	ldrb	r3, [r0, r3]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d01e      	beq.n	8001724 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80016e6:	2440      	movs	r4, #64	@ 0x40
 80016e8:	2201      	movs	r2, #1
 80016ea:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016ec:	2541      	movs	r5, #65	@ 0x41
 80016ee:	2324      	movs	r3, #36	@ 0x24
 80016f0:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016f2:	6806      	ldr	r6, [r0, #0]
 80016f4:	6833      	ldr	r3, [r6, #0]
 80016f6:	4393      	bics	r3, r2
 80016f8:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016fa:	6806      	ldr	r6, [r0, #0]
 80016fc:	6833      	ldr	r3, [r6, #0]
 80016fe:	4f0a      	ldr	r7, [pc, #40]	@ (8001728 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8001700:	403b      	ands	r3, r7
 8001702:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001704:	6806      	ldr	r6, [r0, #0]
 8001706:	6833      	ldr	r3, [r6, #0]
 8001708:	430b      	orrs	r3, r1
 800170a:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 800170c:	6801      	ldr	r1, [r0, #0]
 800170e:	680b      	ldr	r3, [r1, #0]
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001714:	2320      	movs	r3, #32
 8001716:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001718:	2300      	movs	r3, #0
 800171a:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 800171c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800171e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001720:	2002      	movs	r0, #2
 8001722:	e7fc      	b.n	800171e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8001724:	2002      	movs	r0, #2
 8001726:	e7fa      	b.n	800171e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8001728:	ffffefff 	.word	0xffffefff

0800172c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172e:	2341      	movs	r3, #65	@ 0x41
 8001730:	5cc3      	ldrb	r3, [r0, r3]
 8001732:	2b20      	cmp	r3, #32
 8001734:	d11e      	bne.n	8001774 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001736:	3320      	adds	r3, #32
 8001738:	5cc3      	ldrb	r3, [r0, r3]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d01c      	beq.n	8001778 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 800173e:	2440      	movs	r4, #64	@ 0x40
 8001740:	2201      	movs	r2, #1
 8001742:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001744:	2541      	movs	r5, #65	@ 0x41
 8001746:	2324      	movs	r3, #36	@ 0x24
 8001748:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800174a:	6806      	ldr	r6, [r0, #0]
 800174c:	6833      	ldr	r3, [r6, #0]
 800174e:	4393      	bics	r3, r2
 8001750:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001752:	6806      	ldr	r6, [r0, #0]
 8001754:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001756:	4f09      	ldr	r7, [pc, #36]	@ (800177c <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8001758:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800175a:	0209      	lsls	r1, r1, #8
 800175c:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800175e:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001760:	6801      	ldr	r1, [r0, #0]
 8001762:	680b      	ldr	r3, [r1, #0]
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001768:	2320      	movs	r3, #32
 800176a:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800176c:	2300      	movs	r3, #0
 800176e:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8001770:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001774:	2002      	movs	r0, #2
 8001776:	e7fc      	b.n	8001772 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8001778:	2002      	movs	r0, #2
 800177a:	e7fa      	b.n	8001772 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 800177c:	fffff0ff 	.word	0xfffff0ff

08001780 <HAL_PWREx_DisableGPIOPullUp>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8001780:	2802      	cmp	r0, #2
 8001782:	d018      	beq.n	80017b6 <HAL_PWREx_DisableGPIOPullUp+0x36>
 8001784:	d807      	bhi.n	8001796 <HAL_PWREx_DisableGPIOPullUp+0x16>
 8001786:	2800      	cmp	r0, #0
 8001788:	d00f      	beq.n	80017aa <HAL_PWREx_DisableGPIOPullUp+0x2a>
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
      break;

    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
 800178a:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <HAL_PWREx_DisableGPIOPullUp+0x44>)
 800178c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800178e:	438b      	bics	r3, r1
 8001790:	6293      	str	r3, [r2, #40]	@ 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8001792:	2000      	movs	r0, #0
      break;
 8001794:	e00e      	b.n	80017b4 <HAL_PWREx_DisableGPIOPullUp+0x34>
  switch (GPIO)
 8001796:	2805      	cmp	r0, #5
 8001798:	d105      	bne.n	80017a6 <HAL_PWREx_DisableGPIOPullUp+0x26>
    case PWR_GPIO_D:
      CLEAR_BIT(PWR->PUCRD, GPIONumber);
      break;
#endif /* GPIOD */
    case PWR_GPIO_F:
      CLEAR_BIT(PWR->PUCRF, GPIONumber);
 800179a:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <HAL_PWREx_DisableGPIOPullUp+0x44>)
 800179c:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 800179e:	438b      	bics	r3, r1
 80017a0:	6493      	str	r3, [r2, #72]	@ 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80017a2:	2000      	movs	r0, #0
      break;
 80017a4:	e006      	b.n	80017b4 <HAL_PWREx_DisableGPIOPullUp+0x34>
  switch (GPIO)
 80017a6:	2001      	movs	r0, #1
 80017a8:	e004      	b.n	80017b4 <HAL_PWREx_DisableGPIOPullUp+0x34>
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
 80017aa:	4a06      	ldr	r2, [pc, #24]	@ (80017c4 <HAL_PWREx_DisableGPIOPullUp+0x44>)
 80017ac:	6a13      	ldr	r3, [r2, #32]
 80017ae:	438b      	bics	r3, r1
 80017b0:	6213      	str	r3, [r2, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80017b2:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80017b4:	4770      	bx	lr
      CLEAR_BIT(PWR->PUCRC, GPIONumber);
 80017b6:	4a03      	ldr	r2, [pc, #12]	@ (80017c4 <HAL_PWREx_DisableGPIOPullUp+0x44>)
 80017b8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80017ba:	438b      	bics	r3, r1
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80017be:	2000      	movs	r0, #0
      break;
 80017c0:	e7f8      	b.n	80017b4 <HAL_PWREx_DisableGPIOPullUp+0x34>
 80017c2:	46c0      	nop			@ (mov r8, r8)
 80017c4:	40007000 	.word	0x40007000

080017c8 <HAL_PWREx_DisableGPIOPullDown>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 80017c8:	2802      	cmp	r0, #2
 80017ca:	d018      	beq.n	80017fe <HAL_PWREx_DisableGPIOPullDown+0x36>
 80017cc:	d807      	bhi.n	80017de <HAL_PWREx_DisableGPIOPullDown+0x16>
 80017ce:	2800      	cmp	r0, #0
 80017d0:	d00f      	beq.n	80017f2 <HAL_PWREx_DisableGPIOPullDown+0x2a>
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
      break;

    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
 80017d2:	4a0e      	ldr	r2, [pc, #56]	@ (800180c <HAL_PWREx_DisableGPIOPullDown+0x44>)
 80017d4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80017d6:	438b      	bics	r3, r1
 80017d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 80017da:	2000      	movs	r0, #0
      break;
 80017dc:	e00e      	b.n	80017fc <HAL_PWREx_DisableGPIOPullDown+0x34>
  switch (GPIO)
 80017de:	2805      	cmp	r0, #5
 80017e0:	d105      	bne.n	80017ee <HAL_PWREx_DisableGPIOPullDown+0x26>
    case PWR_GPIO_D:
      CLEAR_BIT(PWR->PDCRD, GPIONumber);
      break;
#endif /* GPIOD */
    case PWR_GPIO_F:
      CLEAR_BIT(PWR->PDCRF, GPIONumber);
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <HAL_PWREx_DisableGPIOPullDown+0x44>)
 80017e4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80017e6:	438b      	bics	r3, r1
 80017e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 80017ea:	2000      	movs	r0, #0
      break;
 80017ec:	e006      	b.n	80017fc <HAL_PWREx_DisableGPIOPullDown+0x34>
  switch (GPIO)
 80017ee:	2001      	movs	r0, #1
 80017f0:	e004      	b.n	80017fc <HAL_PWREx_DisableGPIOPullDown+0x34>
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
 80017f2:	4a06      	ldr	r2, [pc, #24]	@ (800180c <HAL_PWREx_DisableGPIOPullDown+0x44>)
 80017f4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80017f6:	438b      	bics	r3, r1
 80017f8:	6253      	str	r3, [r2, #36]	@ 0x24
  HAL_StatusTypeDef status = HAL_OK;
 80017fa:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80017fc:	4770      	bx	lr
      CLEAR_BIT(PWR->PDCRC, GPIONumber);
 80017fe:	4a03      	ldr	r2, [pc, #12]	@ (800180c <HAL_PWREx_DisableGPIOPullDown+0x44>)
 8001800:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001802:	438b      	bics	r3, r1
 8001804:	6353      	str	r3, [r2, #52]	@ 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8001806:	2000      	movs	r0, #0
      break;
 8001808:	e7f8      	b.n	80017fc <HAL_PWREx_DisableGPIOPullDown+0x34>
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	40007000 	.word	0x40007000

08001810 <HAL_PWREx_EnablePullUpPullDownConfig>:
  *         is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8001810:	4a03      	ldr	r2, [pc, #12]	@ (8001820 <HAL_PWREx_EnablePullUpPullDownConfig+0x10>)
 8001812:	6891      	ldr	r1, [r2, #8]
 8001814:	2380      	movs	r3, #128	@ 0x80
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	430b      	orrs	r3, r1
 800181a:	6093      	str	r3, [r2, #8]
}
 800181c:	4770      	bx	lr
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	40007000 	.word	0x40007000

08001824 <HAL_PWREx_DisablePullUpPullDownConfig>:
  *         PWR_PUCRx and PWR_PDCRx registers are not applied in Standby and Shutdown modes.
  * @retval None
  */
void HAL_PWREx_DisablePullUpPullDownConfig(void)
{
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 8001824:	4a02      	ldr	r2, [pc, #8]	@ (8001830 <HAL_PWREx_DisablePullUpPullDownConfig+0xc>)
 8001826:	6893      	ldr	r3, [r2, #8]
 8001828:	4902      	ldr	r1, [pc, #8]	@ (8001834 <HAL_PWREx_DisablePullUpPullDownConfig+0x10>)
 800182a:	400b      	ands	r3, r1
 800182c:	6093      	str	r3, [r2, #8]
}
 800182e:	4770      	bx	lr
 8001830:	40007000 	.word	0x40007000
 8001834:	fffffbff 	.word	0xfffffbff

08001838 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8001838:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <HAL_PWREx_EnterSHUTDOWNMode+0x1c>)
 800183a:	6813      	ldr	r3, [r2, #0]
 800183c:	2107      	movs	r1, #7
 800183e:	438b      	bics	r3, r1
 8001840:	3903      	subs	r1, #3
 8001842:	430b      	orrs	r3, r1
 8001844:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001846:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <HAL_PWREx_EnterSHUTDOWNMode+0x20>)
 8001848:	6913      	ldr	r3, [r2, #16]
 800184a:	430b      	orrs	r3, r1
 800184c:	6113      	str	r3, [r2, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 800184e:	bf30      	wfi
}
 8001850:	4770      	bx	lr
 8001852:	46c0      	nop			@ (mov r8, r8)
 8001854:	40007000 	.word	0x40007000
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001860:	d100      	bne.n	8001864 <HAL_RCC_OscConfig+0x8>
 8001862:	e148      	b.n	8001af6 <HAL_RCC_OscConfig+0x29a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001864:	6803      	ldr	r3, [r0, #0]
 8001866:	07db      	lsls	r3, r3, #31
 8001868:	d52e      	bpl.n	80018c8 <HAL_RCC_OscConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186a:	4ba7      	ldr	r3, [pc, #668]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	2338      	movs	r3, #56	@ 0x38
 8001870:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001872:	2b08      	cmp	r3, #8
 8001874:	d024      	beq.n	80018c0 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001876:	6843      	ldr	r3, [r0, #4]
 8001878:	2280      	movs	r2, #128	@ 0x80
 800187a:	0252      	lsls	r2, r2, #9
 800187c:	4293      	cmp	r3, r2
 800187e:	d06e      	beq.n	800195e <HAL_RCC_OscConfig+0x102>
 8001880:	22a0      	movs	r2, #160	@ 0xa0
 8001882:	02d2      	lsls	r2, r2, #11
 8001884:	4293      	cmp	r3, r2
 8001886:	d071      	beq.n	800196c <HAL_RCC_OscConfig+0x110>
 8001888:	4b9f      	ldr	r3, [pc, #636]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	499f      	ldr	r1, [pc, #636]	@ (8001b0c <HAL_RCC_OscConfig+0x2b0>)
 800188e:	400a      	ands	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	499e      	ldr	r1, [pc, #632]	@ (8001b10 <HAL_RCC_OscConfig+0x2b4>)
 8001896:	400a      	ands	r2, r1
 8001898:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800189a:	6863      	ldr	r3, [r4, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d071      	beq.n	8001984 <HAL_RCC_OscConfig+0x128>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff f9f8 	bl	8000c94 <HAL_GetTick>
 80018a4:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a6:	4f98      	ldr	r7, [pc, #608]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	2680      	movs	r6, #128	@ 0x80
 80018aa:	02b6      	lsls	r6, r6, #10
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4233      	tst	r3, r6
 80018b0:	d10a      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80018b2:	f7ff f9ef 	bl	8000c94 <HAL_GetTick>
 80018b6:	1b40      	subs	r0, r0, r5
 80018b8:	2864      	cmp	r0, #100	@ 0x64
 80018ba:	d9f7      	bls.n	80018ac <HAL_RCC_OscConfig+0x50>
          {
            return HAL_TIMEOUT;
 80018bc:	2003      	movs	r0, #3
 80018be:	e11b      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80018c0:	6843      	ldr	r3, [r0, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d100      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6c>
 80018c6:	e118      	b.n	8001afa <HAL_RCC_OscConfig+0x29e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	079b      	lsls	r3, r3, #30
 80018cc:	d525      	bpl.n	800191a <HAL_RCC_OscConfig+0xbe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ce:	4b8e      	ldr	r3, [pc, #568]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80018d4:	421a      	tst	r2, r3
 80018d6:	d165      	bne.n	80019a4 <HAL_RCC_OscConfig+0x148>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018d8:	68e3      	ldr	r3, [r4, #12]
      {
        return HAL_ERROR;
 80018da:	2001      	movs	r0, #1
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d100      	bne.n	80018e2 <HAL_RCC_OscConfig+0x86>
 80018e0:	e10a      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	4b89      	ldr	r3, [pc, #548]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	6859      	ldr	r1, [r3, #4]
 80018e6:	6962      	ldr	r2, [r4, #20]
 80018e8:	0212      	lsls	r2, r2, #8
 80018ea:	488a      	ldr	r0, [pc, #552]	@ (8001b14 <HAL_RCC_OscConfig+0x2b8>)
 80018ec:	4001      	ands	r1, r0
 80018ee:	430a      	orrs	r2, r1
 80018f0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4988      	ldr	r1, [pc, #544]	@ (8001b18 <HAL_RCC_OscConfig+0x2bc>)
 80018f6:	400a      	ands	r2, r1
 80018f8:	6921      	ldr	r1, [r4, #16]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4986      	ldr	r1, [pc, #536]	@ (8001b1c <HAL_RCC_OscConfig+0x2c0>)
 8001902:	049b      	lsls	r3, r3, #18
 8001904:	0f5b      	lsrs	r3, r3, #29
 8001906:	4a86      	ldr	r2, [pc, #536]	@ (8001b20 <HAL_RCC_OscConfig+0x2c4>)
 8001908:	40da      	lsrs	r2, r3
 800190a:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800190c:	4b85      	ldr	r3, [pc, #532]	@ (8001b24 <HAL_RCC_OscConfig+0x2c8>)
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	f7ff f980 	bl	8000c14 <HAL_InitTick>
 8001914:	2800      	cmp	r0, #0
 8001916:	d000      	beq.n	800191a <HAL_RCC_OscConfig+0xbe>
 8001918:	e0f1      	b.n	8001afe <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	071b      	lsls	r3, r3, #28
 800191e:	d400      	bmi.n	8001922 <HAL_RCC_OscConfig+0xc6>
 8001920:	e081      	b.n	8001a26 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001922:	4b79      	ldr	r3, [pc, #484]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	2338      	movs	r3, #56	@ 0x38
 8001928:	4013      	ands	r3, r2
 800192a:	2b18      	cmp	r3, #24
 800192c:	d077      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1c2>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192e:	69a3      	ldr	r3, [r4, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d100      	bne.n	8001936 <HAL_RCC_OscConfig+0xda>
 8001934:	e0a2      	b.n	8001a7c <HAL_RCC_OscConfig+0x220>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001936:	4a74      	ldr	r2, [pc, #464]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001938:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800193a:	2101      	movs	r1, #1
 800193c:	430b      	orrs	r3, r1
 800193e:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff f9a8 	bl	8000c94 <HAL_GetTick>
 8001944:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001946:	4f70      	ldr	r7, [pc, #448]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	2602      	movs	r6, #2
 800194a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800194c:	421e      	tst	r6, r3
 800194e:	d16a      	bne.n	8001a26 <HAL_RCC_OscConfig+0x1ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001950:	f7ff f9a0 	bl	8000c94 <HAL_GetTick>
 8001954:	1b40      	subs	r0, r0, r5
 8001956:	2802      	cmp	r0, #2
 8001958:	d9f7      	bls.n	800194a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800195a:	2003      	movs	r0, #3
 800195c:	e0cc      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195e:	4a6a      	ldr	r2, [pc, #424]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	6811      	ldr	r1, [r2, #0]
 8001962:	2380      	movs	r3, #128	@ 0x80
 8001964:	025b      	lsls	r3, r3, #9
 8001966:	430b      	orrs	r3, r1
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e796      	b.n	800189a <HAL_RCC_OscConfig+0x3e>
 800196c:	4b66      	ldr	r3, [pc, #408]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	2280      	movs	r2, #128	@ 0x80
 8001972:	02d2      	lsls	r2, r2, #11
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	6819      	ldr	r1, [r3, #0]
 800197a:	2280      	movs	r2, #128	@ 0x80
 800197c:	0252      	lsls	r2, r2, #9
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e78a      	b.n	800189a <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 8001984:	f7ff f986 	bl	8000c94 <HAL_GetTick>
 8001988:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198a:	4f5f      	ldr	r7, [pc, #380]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	2680      	movs	r6, #128	@ 0x80
 800198e:	02b6      	lsls	r6, r6, #10
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4233      	tst	r3, r6
 8001994:	d098      	beq.n	80018c8 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001996:	f7ff f97d 	bl	8000c94 <HAL_GetTick>
 800199a:	1b40      	subs	r0, r0, r5
 800199c:	2864      	cmp	r0, #100	@ 0x64
 800199e:	d9f7      	bls.n	8001990 <HAL_RCC_OscConfig+0x134>
            return HAL_TIMEOUT;
 80019a0:	2003      	movs	r0, #3
 80019a2:	e0a9      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a4:	68e3      	ldr	r3, [r4, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d024      	beq.n	80019f4 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019aa:	4a57      	ldr	r2, [pc, #348]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	6813      	ldr	r3, [r2, #0]
 80019ae:	495a      	ldr	r1, [pc, #360]	@ (8001b18 <HAL_RCC_OscConfig+0x2bc>)
 80019b0:	400b      	ands	r3, r1
 80019b2:	6921      	ldr	r1, [r4, #16]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 80019b8:	6811      	ldr	r1, [r2, #0]
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	430b      	orrs	r3, r1
 80019c0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80019c2:	f7ff f967 	bl	8000c94 <HAL_GetTick>
 80019c6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	4f4f      	ldr	r7, [pc, #316]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 80019ca:	2680      	movs	r6, #128	@ 0x80
 80019cc:	00f6      	lsls	r6, r6, #3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	4233      	tst	r3, r6
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x186>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80019d4:	f7ff f95e 	bl	8000c94 <HAL_GetTick>
 80019d8:	1b40      	subs	r0, r0, r5
 80019da:	2802      	cmp	r0, #2
 80019dc:	d9f7      	bls.n	80019ce <HAL_RCC_OscConfig+0x172>
            return HAL_TIMEOUT;
 80019de:	2003      	movs	r0, #3
 80019e0:	e08a      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4949      	ldr	r1, [pc, #292]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	684a      	ldr	r2, [r1, #4]
 80019e6:	6963      	ldr	r3, [r4, #20]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	484a      	ldr	r0, [pc, #296]	@ (8001b14 <HAL_RCC_OscConfig+0x2b8>)
 80019ec:	4002      	ands	r2, r0
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
 80019f2:	e792      	b.n	800191a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_DISABLE();
 80019f4:	4a44      	ldr	r2, [pc, #272]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	6813      	ldr	r3, [r2, #0]
 80019f8:	494b      	ldr	r1, [pc, #300]	@ (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 80019fa:	400b      	ands	r3, r1
 80019fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80019fe:	f7ff f949 	bl	8000c94 <HAL_GetTick>
 8001a02:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a04:	4f40      	ldr	r7, [pc, #256]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001a06:	2680      	movs	r6, #128	@ 0x80
 8001a08:	00f6      	lsls	r6, r6, #3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	4233      	tst	r3, r6
 8001a0e:	d084      	beq.n	800191a <HAL_RCC_OscConfig+0xbe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a10:	f7ff f940 	bl	8000c94 <HAL_GetTick>
 8001a14:	1b40      	subs	r0, r0, r5
 8001a16:	2802      	cmp	r0, #2
 8001a18:	d9f7      	bls.n	8001a0a <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	e06c      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001a1e:	69a3      	ldr	r3, [r4, #24]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d100      	bne.n	8001a26 <HAL_RCC_OscConfig+0x1ca>
 8001a24:	e06d      	b.n	8001b02 <HAL_RCC_OscConfig+0x2a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a26:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001a28:	2000      	movs	r0, #0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2a:	075b      	lsls	r3, r3, #29
 8001a2c:	d564      	bpl.n	8001af8 <HAL_RCC_OscConfig+0x29c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a2e:	4b36      	ldr	r3, [pc, #216]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	2338      	movs	r3, #56	@ 0x38
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	d034      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3a:	68a3      	ldr	r3, [r4, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d036      	beq.n	8001aae <HAL_RCC_OscConfig+0x252>
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d03a      	beq.n	8001aba <HAL_RCC_OscConfig+0x25e>
 8001a44:	4b30      	ldr	r3, [pc, #192]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001a46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a48:	2101      	movs	r1, #1
 8001a4a:	438a      	bics	r2, r1
 8001a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a50:	3103      	adds	r1, #3
 8001a52:	438a      	bics	r2, r1
 8001a54:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a56:	68a3      	ldr	r3, [r4, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d03a      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x276>
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f91a 	bl	8000c94 <HAL_GetTick>
 8001a60:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a62:	4e29      	ldr	r6, [pc, #164]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	2502      	movs	r5, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	4f31      	ldr	r7, [pc, #196]	@ (8001b2c <HAL_RCC_OscConfig+0x2d0>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a68:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8001a6a:	421d      	tst	r5, r3
 8001a6c:	d12f      	bne.n	8001ace <HAL_RCC_OscConfig+0x272>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7ff f911 	bl	8000c94 <HAL_GetTick>
 8001a72:	1b00      	subs	r0, r0, r4
 8001a74:	42b8      	cmp	r0, r7
 8001a76:	d9f7      	bls.n	8001a68 <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 8001a78:	2003      	movs	r0, #3
 8001a7a:	e03d      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_LSI_DISABLE();
 8001a7c:	4a22      	ldr	r2, [pc, #136]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001a7e:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001a80:	2101      	movs	r1, #1
 8001a82:	438b      	bics	r3, r1
 8001a84:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001a86:	f7ff f905 	bl	8000c94 <HAL_GetTick>
 8001a8a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a8c:	4f1e      	ldr	r7, [pc, #120]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001a8e:	2602      	movs	r6, #2
 8001a90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a92:	421e      	tst	r6, r3
 8001a94:	d0c7      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1ca>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a96:	f7ff f8fd 	bl	8000c94 <HAL_GetTick>
 8001a9a:	1b40      	subs	r0, r0, r5
 8001a9c:	2802      	cmp	r0, #2
 8001a9e:	d9f7      	bls.n	8001a90 <HAL_RCC_OscConfig+0x234>
            return HAL_TIMEOUT;
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	e029      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001aa4:	68a0      	ldr	r0, [r4, #8]
 8001aa6:	4243      	negs	r3, r0
 8001aa8:	4158      	adcs	r0, r3
 8001aaa:	b2c0      	uxtb	r0, r0
 8001aac:	e024      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aae:	4a16      	ldr	r2, [pc, #88]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001ab8:	e7cd      	b.n	8001a56 <HAL_RCC_OscConfig+0x1fa>
 8001aba:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001abe:	2104      	movs	r1, #4
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ac4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ac6:	3903      	subs	r1, #3
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001acc:	e7c3      	b.n	8001a56 <HAL_RCC_OscConfig+0x1fa>
  return HAL_OK;
 8001ace:	2000      	movs	r0, #0
 8001ad0:	e012      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f8df 	bl	8000c94 <HAL_GetTick>
 8001ad6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001ad8:	4e0b      	ldr	r6, [pc, #44]	@ (8001b08 <HAL_RCC_OscConfig+0x2ac>)
 8001ada:	2502      	movs	r5, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001adc:	4f13      	ldr	r7, [pc, #76]	@ (8001b2c <HAL_RCC_OscConfig+0x2d0>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001ade:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8001ae0:	421d      	tst	r5, r3
 8001ae2:	d006      	beq.n	8001af2 <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f8d6 	bl	8000c94 <HAL_GetTick>
 8001ae8:	1b00      	subs	r0, r0, r4
 8001aea:	42b8      	cmp	r0, r7
 8001aec:	d9f7      	bls.n	8001ade <HAL_RCC_OscConfig+0x282>
            return HAL_TIMEOUT;
 8001aee:	2003      	movs	r0, #3
 8001af0:	e002      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
  return HAL_OK;
 8001af2:	2000      	movs	r0, #0
 8001af4:	e000      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
    return HAL_ERROR;
 8001af6:	2001      	movs	r0, #1
}
 8001af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8001afa:	2001      	movs	r0, #1
 8001afc:	e7fc      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
          return HAL_ERROR;
 8001afe:	2001      	movs	r0, #1
 8001b00:	e7fa      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
        return HAL_ERROR;
 8001b02:	2001      	movs	r0, #1
 8001b04:	e7f8      	b.n	8001af8 <HAL_RCC_OscConfig+0x29c>
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	fffeffff 	.word	0xfffeffff
 8001b10:	fffbffff 	.word	0xfffbffff
 8001b14:	ffff80ff 	.word	0xffff80ff
 8001b18:	ffffc7ff 	.word	0xffffc7ff
 8001b1c:	20000020 	.word	0x20000020
 8001b20:	02dc6c00 	.word	0x02dc6c00
 8001b24:	20000028 	.word	0x20000028
 8001b28:	fffffeff 	.word	0xfffffeff
 8001b2c:	00001388 	.word	0x00001388

08001b30 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b30:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2238      	movs	r2, #56	@ 0x38
 8001b36:	421a      	tst	r2, r3
 8001b38:	d106      	bne.n	8001b48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b3a:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	049b      	lsls	r3, r3, #18
 8001b40:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b42:	4812      	ldr	r0, [pc, #72]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001b44:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8001b46:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b48:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	2338      	movs	r3, #56	@ 0x38
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d014      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001b54:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	2338      	movs	r3, #56	@ 0x38
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d010      	beq.n	8001b82 <HAL_RCC_GetSysClockFreq+0x52>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b60:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2038      	movs	r0, #56	@ 0x38
 8001b66:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8001b68:	3818      	subs	r0, #24
 8001b6a:	1e43      	subs	r3, r0, #1
 8001b6c:	4198      	sbcs	r0, r3
 8001b6e:	4240      	negs	r0, r0
 8001b70:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x60>)
 8001b72:	4018      	ands	r0, r3
 8001b74:	23fa      	movs	r3, #250	@ 0xfa
 8001b76:	01db      	lsls	r3, r3, #7
 8001b78:	469c      	mov	ip, r3
 8001b7a:	4460      	add	r0, ip
 8001b7c:	e7e3      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x64>)
 8001b80:	e7e1      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8001b82:	2080      	movs	r0, #128	@ 0x80
 8001b84:	0200      	lsls	r0, r0, #8
 8001b86:	e7de      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x16>
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	02dc6c00 	.word	0x02dc6c00
 8001b90:	ffff8300 	.word	0xffff8300
 8001b94:	007a1200 	.word	0x007a1200

08001b98 <HAL_RCC_ClockConfig>:
{
 8001b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9a:	46ce      	mov	lr, r9
 8001b9c:	4647      	mov	r7, r8
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	0004      	movs	r4, r0
 8001ba2:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d100      	bne.n	8001baa <HAL_RCC_ClockConfig+0x12>
 8001ba8:	e0af      	b.n	8001d0a <HAL_RCC_ClockConfig+0x172>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001baa:	4b5a      	ldr	r3, [pc, #360]	@ (8001d14 <HAL_RCC_ClockConfig+0x17c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	2307      	movs	r3, #7
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	428b      	cmp	r3, r1
 8001bb4:	d321      	bcc.n	8001bfa <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	079a      	lsls	r2, r3, #30
 8001bba:	d510      	bpl.n	8001bde <HAL_RCC_ClockConfig+0x46>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	075b      	lsls	r3, r3, #29
 8001bbe:	d507      	bpl.n	8001bd0 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bc0:	4955      	ldr	r1, [pc, #340]	@ (8001d18 <HAL_RCC_ClockConfig+0x180>)
 8001bc2:	688a      	ldr	r2, [r1, #8]
 8001bc4:	4b55      	ldr	r3, [pc, #340]	@ (8001d1c <HAL_RCC_ClockConfig+0x184>)
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	23b0      	movs	r3, #176	@ 0xb0
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4a51      	ldr	r2, [pc, #324]	@ (8001d18 <HAL_RCC_ClockConfig+0x180>)
 8001bd2:	6893      	ldr	r3, [r2, #8]
 8001bd4:	4952      	ldr	r1, [pc, #328]	@ (8001d20 <HAL_RCC_ClockConfig+0x188>)
 8001bd6:	400b      	ands	r3, r1
 8001bd8:	68e1      	ldr	r1, [r4, #12]
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	07db      	lsls	r3, r3, #31
 8001be2:	d552      	bpl.n	8001c8a <HAL_RCC_ClockConfig+0xf2>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be4:	6862      	ldr	r2, [r4, #4]
 8001be6:	2a01      	cmp	r2, #1
 8001be8:	d021      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d13f      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xd6>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bee:	4b4a      	ldr	r3, [pc, #296]	@ (8001d18 <HAL_RCC_ClockConfig+0x180>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	055b      	lsls	r3, r3, #21
 8001bf4:	d41f      	bmi.n	8001c36 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	e069      	b.n	8001cce <HAL_RCC_ClockConfig+0x136>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4a46      	ldr	r2, [pc, #280]	@ (8001d14 <HAL_RCC_ClockConfig+0x17c>)
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	2107      	movs	r1, #7
 8001c00:	438b      	bics	r3, r1
 8001c02:	432b      	orrs	r3, r5
 8001c04:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001c06:	f7ff f845 	bl	8000c94 <HAL_GetTick>
 8001c0a:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c0c:	4b41      	ldr	r3, [pc, #260]	@ (8001d14 <HAL_RCC_ClockConfig+0x17c>)
 8001c0e:	4698      	mov	r8, r3
 8001c10:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c12:	4b44      	ldr	r3, [pc, #272]	@ (8001d24 <HAL_RCC_ClockConfig+0x18c>)
 8001c14:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c16:	4643      	mov	r3, r8
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	403b      	ands	r3, r7
 8001c1c:	42ab      	cmp	r3, r5
 8001c1e:	d0ca      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c20:	f7ff f838 	bl	8000c94 <HAL_GetTick>
 8001c24:	1b80      	subs	r0, r0, r6
 8001c26:	4548      	cmp	r0, r9
 8001c28:	d9f5      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	e04f      	b.n	8001cce <HAL_RCC_ClockConfig+0x136>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d18 <HAL_RCC_ClockConfig+0x180>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	039b      	lsls	r3, r3, #14
 8001c34:	d56b      	bpl.n	8001d0e <HAL_RCC_ClockConfig+0x176>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c36:	4938      	ldr	r1, [pc, #224]	@ (8001d18 <HAL_RCC_ClockConfig+0x180>)
 8001c38:	688b      	ldr	r3, [r1, #8]
 8001c3a:	2007      	movs	r0, #7
 8001c3c:	4383      	bics	r3, r0
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001c42:	f7ff f827 	bl	8000c94 <HAL_GetTick>
 8001c46:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c48:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <HAL_RCC_ClockConfig+0x180>)
 8001c4a:	4698      	mov	r8, r3
 8001c4c:	2738      	movs	r7, #56	@ 0x38
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4e:	4b35      	ldr	r3, [pc, #212]	@ (8001d24 <HAL_RCC_ClockConfig+0x18c>)
 8001c50:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	4643      	mov	r3, r8
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	403a      	ands	r2, r7
 8001c58:	6863      	ldr	r3, [r4, #4]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d014      	beq.n	8001c8a <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c60:	f7ff f818 	bl	8000c94 <HAL_GetTick>
 8001c64:	1b80      	subs	r0, r0, r6
 8001c66:	4548      	cmp	r0, r9
 8001c68:	d9f3      	bls.n	8001c52 <HAL_RCC_ClockConfig+0xba>
        return HAL_TIMEOUT;
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	e02f      	b.n	8001cce <HAL_RCC_ClockConfig+0x136>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c6e:	2a03      	cmp	r2, #3
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_ClockConfig+0xe6>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c72:	4b29      	ldr	r3, [pc, #164]	@ (8001d18 <HAL_RCC_ClockConfig+0x180>)
 8001c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c76:	079b      	lsls	r3, r3, #30
 8001c78:	d4dd      	bmi.n	8001c36 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	e027      	b.n	8001cce <HAL_RCC_ClockConfig+0x136>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c7e:	4b26      	ldr	r3, [pc, #152]	@ (8001d18 <HAL_RCC_ClockConfig+0x180>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c82:	079b      	lsls	r3, r3, #30
 8001c84:	d4d7      	bmi.n	8001c36 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8001c86:	2001      	movs	r0, #1
 8001c88:	e021      	b.n	8001cce <HAL_RCC_ClockConfig+0x136>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8a:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <HAL_RCC_ClockConfig+0x17c>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2307      	movs	r3, #7
 8001c90:	4013      	ands	r3, r2
 8001c92:	42ab      	cmp	r3, r5
 8001c94:	d81f      	bhi.n	8001cd6 <HAL_RCC_ClockConfig+0x13e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	075b      	lsls	r3, r3, #29
 8001c9a:	d506      	bpl.n	8001caa <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d18 <HAL_RCC_ClockConfig+0x180>)
 8001c9e:	6893      	ldr	r3, [r2, #8]
 8001ca0:	4921      	ldr	r1, [pc, #132]	@ (8001d28 <HAL_RCC_ClockConfig+0x190>)
 8001ca2:	400b      	ands	r3, r1
 8001ca4:	6921      	ldr	r1, [r4, #16]
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001caa:	f7ff ff41 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001cae:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <HAL_RCC_ClockConfig+0x180>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	491e      	ldr	r1, [pc, #120]	@ (8001d2c <HAL_RCC_ClockConfig+0x194>)
 8001cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d30 <HAL_RCC_ClockConfig+0x198>)
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cb6:	051b      	lsls	r3, r3, #20
 8001cb8:	0f1b      	lsrs	r3, r3, #28
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001cba:	009b      	lsls	r3, r3, #2
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cbc:	589b      	ldr	r3, [r3, r2]
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001cc2:	40d8      	lsrs	r0, r3
 8001cc4:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <HAL_RCC_ClockConfig+0x19c>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	f7fe ffa3 	bl	8000c14 <HAL_InitTick>
}
 8001cce:	bcc0      	pop	{r6, r7}
 8001cd0:	46b9      	mov	r9, r7
 8001cd2:	46b0      	mov	r8, r6
 8001cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d14 <HAL_RCC_ClockConfig+0x17c>)
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	2107      	movs	r1, #7
 8001cdc:	438b      	bics	r3, r1
 8001cde:	432b      	orrs	r3, r5
 8001ce0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001ce2:	f7fe ffd7 	bl	8000c94 <HAL_GetTick>
 8001ce6:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_RCC_ClockConfig+0x17c>)
 8001cea:	4698      	mov	r8, r3
 8001cec:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001cee:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <HAL_RCC_ClockConfig+0x18c>)
 8001cf0:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cf2:	4643      	mov	r3, r8
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	403b      	ands	r3, r7
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	d0cc      	beq.n	8001c96 <HAL_RCC_ClockConfig+0xfe>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7fe ffca 	bl	8000c94 <HAL_GetTick>
 8001d00:	1b80      	subs	r0, r0, r6
 8001d02:	4548      	cmp	r0, r9
 8001d04:	d9f5      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x15a>
        return HAL_TIMEOUT;
 8001d06:	2003      	movs	r0, #3
 8001d08:	e7e1      	b.n	8001cce <HAL_RCC_ClockConfig+0x136>
    return HAL_ERROR;
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	e7df      	b.n	8001cce <HAL_RCC_ClockConfig+0x136>
        return HAL_ERROR;
 8001d0e:	2001      	movs	r0, #1
 8001d10:	e7dd      	b.n	8001cce <HAL_RCC_ClockConfig+0x136>
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	40022000 	.word	0x40022000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	ffff84ff 	.word	0xffff84ff
 8001d20:	fffff0ff 	.word	0xfffff0ff
 8001d24:	00001388 	.word	0x00001388
 8001d28:	ffff8fff 	.word	0xffff8fff
 8001d2c:	20000020 	.word	0x20000020
 8001d30:	080027fc 	.word	0x080027fc
 8001d34:	20000028 	.word	0x20000028

08001d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d3a:	f7ff fef9 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_RCC_GetHCLKFreq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4a06      	ldr	r2, [pc, #24]	@ (8001d5c <HAL_RCC_GetHCLKFreq+0x24>)
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d44:	051b      	lsls	r3, r3, #20
 8001d46:	0f1b      	lsrs	r3, r3, #28
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d48:	009b      	lsls	r3, r3, #2
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d4a:	589b      	ldr	r3, [r3, r2]
 8001d4c:	221f      	movs	r2, #31
 8001d4e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d50:	40d8      	lsrs	r0, r3
 8001d52:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <HAL_RCC_GetHCLKFreq+0x28>)
 8001d54:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8001d56:	bd10      	pop	{r4, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	080027fc 	.word	0x080027fc
 8001d60:	20000020 	.word	0x20000020

08001d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d64:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001d66:	f7ff ffe7 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d6a:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d70:	045b      	lsls	r3, r3, #17
 8001d72:	0f5b      	lsrs	r3, r3, #29
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	589b      	ldr	r3, [r3, r2]
 8001d78:	221f      	movs	r2, #31
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	40d8      	lsrs	r0, r3
}
 8001d7e:	bd10      	pop	{r4, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	080027dc 	.word	0x080027dc

08001d88 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8a:	46ce      	mov	lr, r9
 8001d8c:	4647      	mov	r7, r8
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b083      	sub	sp, #12
 8001d92:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d94:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d96:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d98:	065b      	lsls	r3, r3, #25
 8001d9a:	d547      	bpl.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xa4>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9c:	4b42      	ldr	r3, [pc, #264]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8001da0:	2500      	movs	r5, #0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	d40a      	bmi.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x34>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	4b40      	ldr	r3, [pc, #256]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001da8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001daa:	2180      	movs	r1, #128	@ 0x80
 8001dac:	0549      	lsls	r1, r1, #21
 8001dae:	430a      	orrs	r2, r1
 8001db0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db4:	400b      	ands	r3, r1
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001dba:	3501      	adds	r5, #1
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001dbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dc0:	23c0      	movs	r3, #192	@ 0xc0
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	0011      	movs	r1, r2
 8001dc6:	4019      	ands	r1, r3

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dc8:	421a      	tst	r2, r3
 8001dca:	d025      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001dcc:	69a3      	ldr	r3, [r4, #24]
 8001dce:	428b      	cmp	r3, r1
 8001dd0:	d022      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001dd2:	4b35      	ldr	r3, [pc, #212]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001dd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dd6:	4935      	ldr	r1, [pc, #212]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001dd8:	4011      	ands	r1, r2
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dda:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 8001ddc:	2080      	movs	r0, #128	@ 0x80
 8001dde:	0240      	lsls	r0, r0, #9
 8001de0:	4330      	orrs	r0, r6
 8001de2:	65d8      	str	r0, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001de4:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8001de6:	4e32      	ldr	r6, [pc, #200]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001de8:	4030      	ands	r0, r6
 8001dea:	65d8      	str	r0, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001dec:	65d9      	str	r1, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001dee:	07d2      	lsls	r2, r2, #31
 8001df0:	d512      	bpl.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df2:	f7fe ff4f 	bl	8000c94 <HAL_GetTick>
 8001df6:	0006      	movs	r6, r0

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001df8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001dfa:	4698      	mov	r8, r3
 8001dfc:	2702      	movs	r7, #2
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001e00:	4699      	mov	r9, r3
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001e02:	4643      	mov	r3, r8
 8001e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e06:	421f      	tst	r7, r3
 8001e08:	d106      	bne.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x90>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe ff43 	bl	8000c94 <HAL_GetTick>
 8001e0e:	1b80      	subs	r0, r0, r6
 8001e10:	4548      	cmp	r0, r9
 8001e12:	d9f6      	bls.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          ret = HAL_TIMEOUT;
 8001e14:	2003      	movs	r0, #3
 8001e16:	e007      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e18:	4a23      	ldr	r2, [pc, #140]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001e1a:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001e1c:	4923      	ldr	r1, [pc, #140]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001e1e:	400b      	ands	r3, r1
 8001e20:	69a1      	ldr	r1, [r4, #24]
 8001e22:	430b      	orrs	r3, r1
 8001e24:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e26:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e28:	2d01      	cmp	r5, #1
 8001e2a:	d036      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	07db      	lsls	r3, r3, #31
 8001e30:	d506      	bpl.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e32:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001e34:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001e36:	2103      	movs	r1, #3
 8001e38:	438b      	bics	r3, r1
 8001e3a:	68a1      	ldr	r1, [r4, #8]
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	079b      	lsls	r3, r3, #30
 8001e44:	d506      	bpl.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e46:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001e48:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001e4a:	491b      	ldr	r1, [pc, #108]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e4c:	400b      	ands	r3, r1
 8001e4e:	68e1      	ldr	r1, [r4, #12]
 8001e50:	430b      	orrs	r3, r1
 8001e52:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	069b      	lsls	r3, r3, #26
 8001e58:	d506      	bpl.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001e5c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	6961      	ldr	r1, [r4, #20]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	075b      	lsls	r3, r3, #29
 8001e6c:	d506      	bpl.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001e70:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001e72:	4912      	ldr	r1, [pc, #72]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e74:	400b      	ands	r3, r1
 8001e76:	6921      	ldr	r1, [r4, #16]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	6553      	str	r3, [r2, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	061b      	lsls	r3, r3, #24
 8001e80:	d506      	bpl.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001e82:	4a09      	ldr	r2, [pc, #36]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001e84:	6813      	ldr	r3, [r2, #0]
 8001e86:	21e0      	movs	r1, #224	@ 0xe0
 8001e88:	438b      	bics	r3, r1
 8001e8a:	6861      	ldr	r1, [r4, #4]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 8001e90:	b003      	add	sp, #12
 8001e92:	bcc0      	pop	{r6, r7}
 8001e94:	46b9      	mov	r9, r7
 8001e96:	46b0      	mov	r8, r6
 8001e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4a03      	ldr	r2, [pc, #12]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001e9c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8001e9e:	4908      	ldr	r1, [pc, #32]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8001ea0:	400b      	ands	r3, r1
 8001ea2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001ea4:	e7c2      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	fffffcff 	.word	0xfffffcff
 8001eb0:	fffeffff 	.word	0xfffeffff
 8001eb4:	00001388 	.word	0x00001388
 8001eb8:	ffffcfff 	.word	0xffffcfff
 8001ebc:	ffff3fff 	.word	0xffff3fff
 8001ec0:	efffffff 	.word	0xefffffff

08001ec4 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ec8:	4770      	bx	lr

08001eca <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_TIM_IRQHandler>:
{
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8001ed4:	6803      	ldr	r3, [r0, #0]
 8001ed6:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ed8:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001eda:	07aa      	lsls	r2, r5, #30
 8001edc:	d50e      	bpl.n	8001efc <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ede:	07b2      	lsls	r2, r6, #30
 8001ee0:	d50c      	bpl.n	8001efc <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	4252      	negs	r2, r2
 8001ee6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eec:	6803      	ldr	r3, [r0, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	079b      	lsls	r3, r3, #30
 8001ef2:	d053      	beq.n	8001f9c <HAL_TIM_IRQHandler+0xcc>
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef4:	f7ff ffe8 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001efc:	076b      	lsls	r3, r5, #29
 8001efe:	d512      	bpl.n	8001f26 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f00:	0773      	lsls	r3, r6, #29
 8001f02:	d510      	bpl.n	8001f26 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	2205      	movs	r2, #5
 8001f08:	4252      	negs	r2, r2
 8001f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	23c0      	movs	r3, #192	@ 0xc0
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	421a      	tst	r2, r3
 8001f1a:	d045      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1c:	0020      	movs	r0, r4
 8001f1e:	f7ff ffd3 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f22:	2300      	movs	r3, #0
 8001f24:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f26:	072b      	lsls	r3, r5, #28
 8001f28:	d510      	bpl.n	8001f4c <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f2a:	0733      	lsls	r3, r6, #28
 8001f2c:	d50e      	bpl.n	8001f4c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	2209      	movs	r2, #9
 8001f32:	4252      	negs	r2, r2
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f36:	2304      	movs	r3, #4
 8001f38:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	079b      	lsls	r3, r3, #30
 8001f40:	d039      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	0020      	movs	r0, r4
 8001f44:	f7ff ffc0 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f4c:	06eb      	lsls	r3, r5, #27
 8001f4e:	d512      	bpl.n	8001f76 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f50:	06f3      	lsls	r3, r6, #27
 8001f52:	d510      	bpl.n	8001f76 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	2211      	movs	r2, #17
 8001f58:	4252      	negs	r2, r2
 8001f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	23c0      	movs	r3, #192	@ 0xc0
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	421a      	tst	r2, r3
 8001f6a:	d02b      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6c:	0020      	movs	r0, r4
 8001f6e:	f7ff ffab 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	2300      	movs	r3, #0
 8001f74:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f76:	07eb      	lsls	r3, r5, #31
 8001f78:	d501      	bpl.n	8001f7e <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f7a:	07f3      	lsls	r3, r6, #31
 8001f7c:	d429      	bmi.n	8001fd2 <HAL_TIM_IRQHandler+0x102>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001f7e:	2382      	movs	r3, #130	@ 0x82
 8001f80:	019b      	lsls	r3, r3, #6
 8001f82:	421d      	tst	r5, r3
 8001f84:	d03c      	beq.n	8002000 <HAL_TIM_IRQHandler+0x130>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f86:	0633      	lsls	r3, r6, #24
 8001f88:	d42b      	bmi.n	8001fe2 <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f8a:	066b      	lsls	r3, r5, #25
 8001f8c:	d501      	bpl.n	8001f92 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f8e:	0673      	lsls	r3, r6, #25
 8001f90:	d43b      	bmi.n	800200a <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f92:	06ad      	lsls	r5, r5, #26
 8001f94:	d501      	bpl.n	8001f9a <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f96:	06b6      	lsls	r6, r6, #26
 8001f98:	d43f      	bmi.n	800201a <HAL_TIM_IRQHandler+0x14a>
}
 8001f9a:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9c:	f7ff ff93 	bl	8001ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	0020      	movs	r0, r4
 8001fa2:	f7ff ff92 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
 8001fa6:	e7a7      	b.n	8001ef8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa8:	0020      	movs	r0, r4
 8001faa:	f7ff ff8c 	bl	8001ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fae:	0020      	movs	r0, r4
 8001fb0:	f7ff ff8b 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
 8001fb4:	e7b5      	b.n	8001f22 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	0020      	movs	r0, r4
 8001fb8:	f7ff ff85 	bl	8001ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	0020      	movs	r0, r4
 8001fbe:	f7ff ff84 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
 8001fc2:	e7c1      	b.n	8001f48 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc4:	0020      	movs	r0, r4
 8001fc6:	f7ff ff7e 	bl	8001ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fca:	0020      	movs	r0, r4
 8001fcc:	f7ff ff7d 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
 8001fd0:	e7cf      	b.n	8001f72 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	4252      	negs	r2, r2
 8001fd8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fda:	0020      	movs	r0, r4
 8001fdc:	f7ff ff72 	bl	8001ec4 <HAL_TIM_PeriodElapsedCallback>
 8001fe0:	e7cd      	b.n	8001f7e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	4a11      	ldr	r2, [pc, #68]	@ (800202c <HAL_TIM_IRQHandler+0x15c>)
 8001fe6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001fe8:	0020      	movs	r0, r4
 8001fea:	f000 f8be 	bl	800216a <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001fee:	05eb      	lsls	r3, r5, #23
 8001ff0:	d5cb      	bpl.n	8001f8a <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	4a0e      	ldr	r2, [pc, #56]	@ (8002030 <HAL_TIM_IRQHandler+0x160>)
 8001ff6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001ff8:	0020      	movs	r0, r4
 8001ffa:	f000 f8b7 	bl	800216c <HAL_TIMEx_Break2Callback>
 8001ffe:	e7c4      	b.n	8001f8a <HAL_TIM_IRQHandler+0xba>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002000:	05eb      	lsls	r3, r5, #23
 8002002:	d5c2      	bpl.n	8001f8a <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002004:	0633      	lsls	r3, r6, #24
 8002006:	d5c0      	bpl.n	8001f8a <HAL_TIM_IRQHandler+0xba>
 8002008:	e7f3      	b.n	8001ff2 <HAL_TIM_IRQHandler+0x122>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	2241      	movs	r2, #65	@ 0x41
 800200e:	4252      	negs	r2, r2
 8002010:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002012:	0020      	movs	r0, r4
 8002014:	f7ff ff5a 	bl	8001ecc <HAL_TIM_TriggerCallback>
 8002018:	e7bb      	b.n	8001f92 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	2221      	movs	r2, #33	@ 0x21
 800201e:	4252      	negs	r2, r2
 8002020:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002022:	0020      	movs	r0, r4
 8002024:	f000 f8a0 	bl	8002168 <HAL_TIMEx_CommutCallback>
}
 8002028:	e7b7      	b.n	8001f9a <HAL_TIM_IRQHandler+0xca>
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	ffffdf7f 	.word	0xffffdf7f
 8002030:	fffffeff 	.word	0xfffffeff

08002034 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002034:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002036:	4a2e      	ldr	r2, [pc, #184]	@ (80020f0 <TIM_Base_SetConfig+0xbc>)
 8002038:	4290      	cmp	r0, r2
 800203a:	d014      	beq.n	8002066 <TIM_Base_SetConfig+0x32>
 800203c:	4a2d      	ldr	r2, [pc, #180]	@ (80020f4 <TIM_Base_SetConfig+0xc0>)
 800203e:	4290      	cmp	r0, r2
 8002040:	d011      	beq.n	8002066 <TIM_Base_SetConfig+0x32>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002042:	4a2d      	ldr	r2, [pc, #180]	@ (80020f8 <TIM_Base_SetConfig+0xc4>)
 8002044:	4290      	cmp	r0, r2
 8002046:	d038      	beq.n	80020ba <TIM_Base_SetConfig+0x86>
 8002048:	4a2c      	ldr	r2, [pc, #176]	@ (80020fc <TIM_Base_SetConfig+0xc8>)
 800204a:	4290      	cmp	r0, r2
 800204c:	d042      	beq.n	80020d4 <TIM_Base_SetConfig+0xa0>
 800204e:	4a2c      	ldr	r2, [pc, #176]	@ (8002100 <TIM_Base_SetConfig+0xcc>)
 8002050:	4290      	cmp	r0, r2
 8002052:	d025      	beq.n	80020a0 <TIM_Base_SetConfig+0x6c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002054:	2280      	movs	r2, #128	@ 0x80
 8002056:	4393      	bics	r3, r2
 8002058:	694a      	ldr	r2, [r1, #20]
 800205a:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800205c:	688a      	ldr	r2, [r1, #8]
 800205e:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002060:	680a      	ldr	r2, [r1, #0]
 8002062:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002064:	e014      	b.n	8002090 <TIM_Base_SetConfig+0x5c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002066:	2270      	movs	r2, #112	@ 0x70
 8002068:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800206a:	684a      	ldr	r2, [r1, #4]
 800206c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800206e:	4a25      	ldr	r2, [pc, #148]	@ (8002104 <TIM_Base_SetConfig+0xd0>)
 8002070:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002072:	68ca      	ldr	r2, [r1, #12]
 8002074:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002076:	2280      	movs	r2, #128	@ 0x80
 8002078:	4393      	bics	r3, r2
 800207a:	694a      	ldr	r2, [r1, #20]
 800207c:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800207e:	688a      	ldr	r2, [r1, #8]
 8002080:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002082:	680a      	ldr	r2, [r1, #0]
 8002084:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002086:	4a1a      	ldr	r2, [pc, #104]	@ (80020f0 <TIM_Base_SetConfig+0xbc>)
 8002088:	4290      	cmp	r0, r2
 800208a:	d101      	bne.n	8002090 <TIM_Base_SetConfig+0x5c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800208c:	690a      	ldr	r2, [r1, #16]
 800208e:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002090:	6802      	ldr	r2, [r0, #0]
 8002092:	2104      	movs	r1, #4
 8002094:	430a      	orrs	r2, r1
 8002096:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002098:	2201      	movs	r2, #1
 800209a:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800209c:	6003      	str	r3, [r0, #0]
}
 800209e:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 80020a0:	4a18      	ldr	r2, [pc, #96]	@ (8002104 <TIM_Base_SetConfig+0xd0>)
 80020a2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a4:	68ca      	ldr	r2, [r1, #12]
 80020a6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a8:	2280      	movs	r2, #128	@ 0x80
 80020aa:	4393      	bics	r3, r2
 80020ac:	694a      	ldr	r2, [r1, #20]
 80020ae:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b0:	688a      	ldr	r2, [r1, #8]
 80020b2:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020b4:	680a      	ldr	r2, [r1, #0]
 80020b6:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020b8:	e7e8      	b.n	800208c <TIM_Base_SetConfig+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <TIM_Base_SetConfig+0xd0>)
 80020bc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020be:	68ca      	ldr	r2, [r1, #12]
 80020c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c2:	2280      	movs	r2, #128	@ 0x80
 80020c4:	4393      	bics	r3, r2
 80020c6:	694a      	ldr	r2, [r1, #20]
 80020c8:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ca:	688a      	ldr	r2, [r1, #8]
 80020cc:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020ce:	680a      	ldr	r2, [r1, #0]
 80020d0:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d2:	e7dd      	b.n	8002090 <TIM_Base_SetConfig+0x5c>
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002104 <TIM_Base_SetConfig+0xd0>)
 80020d6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d8:	68ca      	ldr	r2, [r1, #12]
 80020da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020dc:	2280      	movs	r2, #128	@ 0x80
 80020de:	4393      	bics	r3, r2
 80020e0:	694a      	ldr	r2, [r1, #20]
 80020e2:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e4:	688a      	ldr	r2, [r1, #8]
 80020e6:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020e8:	680a      	ldr	r2, [r1, #0]
 80020ea:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ec:	e7ce      	b.n	800208c <TIM_Base_SetConfig+0x58>
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	40012c00 	.word	0x40012c00
 80020f4:	40000400 	.word	0x40000400
 80020f8:	40002000 	.word	0x40002000
 80020fc:	40014400 	.word	0x40014400
 8002100:	40014800 	.word	0x40014800
 8002104:	fffffcff 	.word	0xfffffcff

08002108 <HAL_TIM_Base_Init>:
{
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800210c:	d02a      	beq.n	8002164 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800210e:	233d      	movs	r3, #61	@ 0x3d
 8002110:	5cc3      	ldrb	r3, [r0, r3]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d020      	beq.n	8002158 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002116:	253d      	movs	r5, #61	@ 0x3d
 8002118:	2302      	movs	r3, #2
 800211a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800211c:	0021      	movs	r1, r4
 800211e:	c901      	ldmia	r1!, {r0}
 8002120:	f7ff ff88 	bl	8002034 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002124:	2301      	movs	r3, #1
 8002126:	2248      	movs	r2, #72	@ 0x48
 8002128:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212a:	3a0a      	subs	r2, #10
 800212c:	54a3      	strb	r3, [r4, r2]
 800212e:	3201      	adds	r2, #1
 8002130:	54a3      	strb	r3, [r4, r2]
 8002132:	3201      	adds	r2, #1
 8002134:	54a3      	strb	r3, [r4, r2]
 8002136:	3201      	adds	r2, #1
 8002138:	54a3      	strb	r3, [r4, r2]
 800213a:	3201      	adds	r2, #1
 800213c:	54a3      	strb	r3, [r4, r2]
 800213e:	3201      	adds	r2, #1
 8002140:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002142:	3201      	adds	r2, #1
 8002144:	54a3      	strb	r3, [r4, r2]
 8002146:	3201      	adds	r2, #1
 8002148:	54a3      	strb	r3, [r4, r2]
 800214a:	3201      	adds	r2, #1
 800214c:	54a3      	strb	r3, [r4, r2]
 800214e:	3201      	adds	r2, #1
 8002150:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002152:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002154:	2000      	movs	r0, #0
}
 8002156:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002158:	333c      	adds	r3, #60	@ 0x3c
 800215a:	2200      	movs	r2, #0
 800215c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800215e:	f7fe fc7d 	bl	8000a5c <HAL_TIM_Base_MspInit>
 8002162:	e7d8      	b.n	8002116 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8002164:	2001      	movs	r0, #1
 8002166:	e7f6      	b.n	8002156 <HAL_TIM_Base_Init+0x4e>

08002168 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002168:	4770      	bx	lr

0800216a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800216a:	4770      	bx	lr

0800216c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800216c:	4770      	bx	lr
	...

08002170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002170:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002172:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002176:	2201      	movs	r2, #1
 8002178:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800217c:	6801      	ldr	r1, [r0, #0]
 800217e:	680b      	ldr	r3, [r1, #0]
 8002180:	4d12      	ldr	r5, [pc, #72]	@ (80021cc <UART_EndRxTransfer+0x5c>)
 8002182:	402b      	ands	r3, r5
 8002184:	600b      	str	r3, [r1, #0]
 8002186:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800218a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800218e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002192:	6802      	ldr	r2, [r0, #0]
 8002194:	6893      	ldr	r3, [r2, #8]
 8002196:	4c0e      	ldr	r4, [pc, #56]	@ (80021d0 <UART_EndRxTransfer+0x60>)
 8002198:	4023      	ands	r3, r4
 800219a:	6093      	str	r3, [r2, #8]
 800219c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021a0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d006      	beq.n	80021b4 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021a6:	238c      	movs	r3, #140	@ 0x8c
 80021a8:	2220      	movs	r2, #32
 80021aa:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ac:	2300      	movs	r3, #0
 80021ae:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80021b0:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80021b2:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80021b4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b8:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021bc:	6802      	ldr	r2, [r0, #0]
 80021be:	6813      	ldr	r3, [r2, #0]
 80021c0:	2410      	movs	r4, #16
 80021c2:	43a3      	bics	r3, r4
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	f381 8810 	msr	PRIMASK, r1
}
 80021ca:	e7ec      	b.n	80021a6 <UART_EndRxTransfer+0x36>
 80021cc:	fffffedf 	.word	0xfffffedf
 80021d0:	effffffe 	.word	0xeffffffe

080021d4 <UART_SetConfig>:
{
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021d8:	6801      	ldr	r1, [r0, #0]
 80021da:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021dc:	6883      	ldr	r3, [r0, #8]
 80021de:	6900      	ldr	r0, [r0, #16]
 80021e0:	4303      	orrs	r3, r0
 80021e2:	6960      	ldr	r0, [r4, #20]
 80021e4:	4303      	orrs	r3, r0
 80021e6:	69e0      	ldr	r0, [r4, #28]
 80021e8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021ea:	485c      	ldr	r0, [pc, #368]	@ (800235c <UART_SetConfig+0x188>)
 80021ec:	4002      	ands	r2, r0
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f2:	6822      	ldr	r2, [r4, #0]
 80021f4:	6853      	ldr	r3, [r2, #4]
 80021f6:	495a      	ldr	r1, [pc, #360]	@ (8002360 <UART_SetConfig+0x18c>)
 80021f8:	400b      	ands	r3, r1
 80021fa:	68e1      	ldr	r1, [r4, #12]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002200:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002202:	6821      	ldr	r1, [r4, #0]
 8002204:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002206:	6a20      	ldr	r0, [r4, #32]
 8002208:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800220a:	4856      	ldr	r0, [pc, #344]	@ (8002364 <UART_SetConfig+0x190>)
 800220c:	4002      	ands	r2, r0
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002212:	6822      	ldr	r2, [r4, #0]
 8002214:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002216:	210f      	movs	r1, #15
 8002218:	438b      	bics	r3, r1
 800221a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800221c:	430b      	orrs	r3, r1
 800221e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	4a51      	ldr	r2, [pc, #324]	@ (8002368 <UART_SetConfig+0x194>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d017      	beq.n	8002258 <UART_SetConfig+0x84>
 8002228:	4a50      	ldr	r2, [pc, #320]	@ (800236c <UART_SetConfig+0x198>)
 800222a:	4694      	mov	ip, r2
 800222c:	4463      	add	r3, ip
 800222e:	1e5a      	subs	r2, r3, #1
 8002230:	4193      	sbcs	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002234:	2280      	movs	r2, #128	@ 0x80
 8002236:	0212      	lsls	r2, r2, #8
 8002238:	69e1      	ldr	r1, [r4, #28]
 800223a:	4291      	cmp	r1, r2
 800223c:	d100      	bne.n	8002240 <UART_SetConfig+0x6c>
 800223e:	e082      	b.n	8002346 <UART_SetConfig+0x172>
    switch (clocksource)
 8002240:	2001      	movs	r0, #1
 8002242:	2b02      	cmp	r3, #2
 8002244:	d943      	bls.n	80022ce <UART_SetConfig+0xfa>
  huart->NbTxDataToProcess = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	226a      	movs	r2, #106	@ 0x6a
 800224a:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 800224c:	3a02      	subs	r2, #2
 800224e:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8002250:	2300      	movs	r3, #0
 8002252:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8002254:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8002256:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002258:	4b45      	ldr	r3, [pc, #276]	@ (8002370 <UART_SetConfig+0x19c>)
 800225a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800225c:	2303      	movs	r3, #3
 800225e:	4013      	ands	r3, r2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d05d      	beq.n	8002320 <UART_SetConfig+0x14c>
 8002264:	d855      	bhi.n	8002312 <UART_SetConfig+0x13e>
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800226a:	2380      	movs	r3, #128	@ 0x80
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	69e2      	ldr	r2, [r4, #28]
 8002270:	429a      	cmp	r2, r3
 8002272:	d064      	beq.n	800233e <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002274:	f7ff fc5c 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8002278:	0003      	movs	r3, r0
        break;
 800227a:	e02b      	b.n	80022d4 <UART_SetConfig+0x100>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800227c:	2300      	movs	r3, #0
 800227e:	e7d9      	b.n	8002234 <UART_SetConfig+0x60>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002280:	4b3b      	ldr	r3, [pc, #236]	@ (8002370 <UART_SetConfig+0x19c>)
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	0609      	lsls	r1, r1, #24
 8002286:	0f49      	lsrs	r1, r1, #29
 8002288:	3101      	adds	r1, #1
 800228a:	483a      	ldr	r0, [pc, #232]	@ (8002374 <UART_SetConfig+0x1a0>)
 800228c:	f7fd ff3c 	bl	8000108 <__udivsi3>
 8002290:	0003      	movs	r3, r0
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002292:	6865      	ldr	r5, [r4, #4]
 8002294:	4a38      	ldr	r2, [pc, #224]	@ (8002378 <UART_SetConfig+0x1a4>)
 8002296:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002298:	0049      	lsls	r1, r1, #1
 800229a:	5a89      	ldrh	r1, [r1, r2]
 800229c:	0018      	movs	r0, r3
 800229e:	f7fd ff33 	bl	8000108 <__udivsi3>
 80022a2:	0040      	lsls	r0, r0, #1
 80022a4:	086b      	lsrs	r3, r5, #1
 80022a6:	18c0      	adds	r0, r0, r3
 80022a8:	0029      	movs	r1, r5
 80022aa:	f7fd ff2d 	bl	8000108 <__udivsi3>
 80022ae:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022b0:	0001      	movs	r1, r0
 80022b2:	3910      	subs	r1, #16
 80022b4:	4a31      	ldr	r2, [pc, #196]	@ (800237c <UART_SetConfig+0x1a8>)
        ret = HAL_ERROR;
 80022b6:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022b8:	4291      	cmp	r1, r2
 80022ba:	d8c4      	bhi.n	8002246 <UART_SetConfig+0x72>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80022bc:	4a30      	ldr	r2, [pc, #192]	@ (8002380 <UART_SetConfig+0x1ac>)
 80022be:	401a      	ands	r2, r3
        huart->Instance->BRR = brrtemp;
 80022c0:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022c2:	071b      	lsls	r3, r3, #28
 80022c4:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60cb      	str	r3, [r1, #12]
 80022ca:	2000      	movs	r0, #0
 80022cc:	e7bb      	b.n	8002246 <UART_SetConfig+0x72>
        pclk = HAL_RCC_GetPCLK1Freq();
 80022ce:	f7ff fd49 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 80022d2:	0003      	movs	r3, r0
    if (pclk != 0U)
 80022d4:	2000      	movs	r0, #0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0b5      	beq.n	8002246 <UART_SetConfig+0x72>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022da:	6865      	ldr	r5, [r4, #4]
 80022dc:	4a26      	ldr	r2, [pc, #152]	@ (8002378 <UART_SetConfig+0x1a4>)
 80022de:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80022e0:	0049      	lsls	r1, r1, #1
 80022e2:	5a89      	ldrh	r1, [r1, r2]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7fd ff0f 	bl	8000108 <__udivsi3>
 80022ea:	086b      	lsrs	r3, r5, #1
 80022ec:	18c0      	adds	r0, r0, r3
 80022ee:	0029      	movs	r1, r5
 80022f0:	f7fd ff0a 	bl	8000108 <__udivsi3>
 80022f4:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022f6:	0001      	movs	r1, r0
 80022f8:	3910      	subs	r1, #16
 80022fa:	4a20      	ldr	r2, [pc, #128]	@ (800237c <UART_SetConfig+0x1a8>)
        ret = HAL_ERROR;
 80022fc:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022fe:	4291      	cmp	r1, r2
 8002300:	d8a1      	bhi.n	8002246 <UART_SetConfig+0x72>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002302:	6822      	ldr	r2, [r4, #0]
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	0c1b      	lsrs	r3, r3, #16
 8002308:	60d3      	str	r3, [r2, #12]
 800230a:	2000      	movs	r0, #0
 800230c:	e79b      	b.n	8002246 <UART_SetConfig+0x72>
    switch (clocksource)
 800230e:	2001      	movs	r0, #1
 8002310:	e799      	b.n	8002246 <UART_SetConfig+0x72>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002312:	69e3      	ldr	r3, [r4, #28]
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	0212      	lsls	r2, r2, #8
 8002318:	4293      	cmp	r3, r2
 800231a:	d0ba      	beq.n	8002292 <UART_SetConfig+0xbe>
 800231c:	0013      	movs	r3, r2
 800231e:	e7dc      	b.n	80022da <UART_SetConfig+0x106>
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	69e2      	ldr	r2, [r4, #28]
 8002326:	429a      	cmp	r2, r3
 8002328:	d0aa      	beq.n	8002280 <UART_SetConfig+0xac>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800232a:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <UART_SetConfig+0x19c>)
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	0609      	lsls	r1, r1, #24
 8002330:	0f49      	lsrs	r1, r1, #29
 8002332:	3101      	adds	r1, #1
 8002334:	480f      	ldr	r0, [pc, #60]	@ (8002374 <UART_SetConfig+0x1a0>)
 8002336:	f7fd fee7 	bl	8000108 <__udivsi3>
 800233a:	0003      	movs	r3, r0
    if (pclk != 0U)
 800233c:	e7cd      	b.n	80022da <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetSysClockFreq();
 800233e:	f7ff fbf7 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8002342:	0003      	movs	r3, r0
        break;
 8002344:	e004      	b.n	8002350 <UART_SetConfig+0x17c>
    switch (clocksource)
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1e1      	bne.n	800230e <UART_SetConfig+0x13a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800234a:	f7ff fd0b 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 800234e:	0003      	movs	r3, r0
    if (pclk != 0U)
 8002350:	2000      	movs	r0, #0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d100      	bne.n	8002358 <UART_SetConfig+0x184>
 8002356:	e776      	b.n	8002246 <UART_SetConfig+0x72>
 8002358:	e79b      	b.n	8002292 <UART_SetConfig+0xbe>
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	cfff69f3 	.word	0xcfff69f3
 8002360:	ffffcfff 	.word	0xffffcfff
 8002364:	11fff4ff 	.word	0x11fff4ff
 8002368:	40013800 	.word	0x40013800
 800236c:	bfffbc00 	.word	0xbfffbc00
 8002370:	40021000 	.word	0x40021000
 8002374:	02dc6c00 	.word	0x02dc6c00
 8002378:	0800283c 	.word	0x0800283c
 800237c:	0000ffef 	.word	0x0000ffef
 8002380:	0000fff0 	.word	0x0000fff0

08002384 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002384:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002386:	071b      	lsls	r3, r3, #28
 8002388:	d506      	bpl.n	8002398 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800238a:	6802      	ldr	r2, [r0, #0]
 800238c:	6853      	ldr	r3, [r2, #4]
 800238e:	492c      	ldr	r1, [pc, #176]	@ (8002440 <UART_AdvFeatureConfig+0xbc>)
 8002390:	400b      	ands	r3, r1
 8002392:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8002394:	430b      	orrs	r3, r1
 8002396:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002398:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800239a:	07db      	lsls	r3, r3, #31
 800239c:	d506      	bpl.n	80023ac <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800239e:	6802      	ldr	r2, [r0, #0]
 80023a0:	6853      	ldr	r3, [r2, #4]
 80023a2:	4928      	ldr	r1, [pc, #160]	@ (8002444 <UART_AdvFeatureConfig+0xc0>)
 80023a4:	400b      	ands	r3, r1
 80023a6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80023a8:	430b      	orrs	r3, r1
 80023aa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023ac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80023ae:	079b      	lsls	r3, r3, #30
 80023b0:	d506      	bpl.n	80023c0 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023b2:	6802      	ldr	r2, [r0, #0]
 80023b4:	6853      	ldr	r3, [r2, #4]
 80023b6:	4924      	ldr	r1, [pc, #144]	@ (8002448 <UART_AdvFeatureConfig+0xc4>)
 80023b8:	400b      	ands	r3, r1
 80023ba:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80023bc:	430b      	orrs	r3, r1
 80023be:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023c0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80023c2:	075b      	lsls	r3, r3, #29
 80023c4:	d506      	bpl.n	80023d4 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023c6:	6802      	ldr	r2, [r0, #0]
 80023c8:	6853      	ldr	r3, [r2, #4]
 80023ca:	4920      	ldr	r1, [pc, #128]	@ (800244c <UART_AdvFeatureConfig+0xc8>)
 80023cc:	400b      	ands	r3, r1
 80023ce:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023d4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80023d6:	06db      	lsls	r3, r3, #27
 80023d8:	d506      	bpl.n	80023e8 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023da:	6802      	ldr	r2, [r0, #0]
 80023dc:	6893      	ldr	r3, [r2, #8]
 80023de:	491c      	ldr	r1, [pc, #112]	@ (8002450 <UART_AdvFeatureConfig+0xcc>)
 80023e0:	400b      	ands	r3, r1
 80023e2:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023e8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80023ea:	069b      	lsls	r3, r3, #26
 80023ec:	d506      	bpl.n	80023fc <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023ee:	6802      	ldr	r2, [r0, #0]
 80023f0:	6893      	ldr	r3, [r2, #8]
 80023f2:	4918      	ldr	r1, [pc, #96]	@ (8002454 <UART_AdvFeatureConfig+0xd0>)
 80023f4:	400b      	ands	r3, r1
 80023f6:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023fc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80023fe:	065b      	lsls	r3, r3, #25
 8002400:	d50b      	bpl.n	800241a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002402:	6802      	ldr	r2, [r0, #0]
 8002404:	6853      	ldr	r3, [r2, #4]
 8002406:	4914      	ldr	r1, [pc, #80]	@ (8002458 <UART_AdvFeatureConfig+0xd4>)
 8002408:	400b      	ands	r3, r1
 800240a:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800240c:	430b      	orrs	r3, r1
 800240e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002410:	2380      	movs	r3, #128	@ 0x80
 8002412:	035b      	lsls	r3, r3, #13
 8002414:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002416:	429a      	cmp	r2, r3
 8002418:	d00a      	beq.n	8002430 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800241a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	d506      	bpl.n	800242e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002420:	6802      	ldr	r2, [r0, #0]
 8002422:	6853      	ldr	r3, [r2, #4]
 8002424:	490d      	ldr	r1, [pc, #52]	@ (800245c <UART_AdvFeatureConfig+0xd8>)
 8002426:	400b      	ands	r3, r1
 8002428:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800242a:	430b      	orrs	r3, r1
 800242c:	6053      	str	r3, [r2, #4]
}
 800242e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002430:	6802      	ldr	r2, [r0, #0]
 8002432:	6853      	ldr	r3, [r2, #4]
 8002434:	490a      	ldr	r1, [pc, #40]	@ (8002460 <UART_AdvFeatureConfig+0xdc>)
 8002436:	400b      	ands	r3, r1
 8002438:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800243a:	430b      	orrs	r3, r1
 800243c:	6053      	str	r3, [r2, #4]
 800243e:	e7ec      	b.n	800241a <UART_AdvFeatureConfig+0x96>
 8002440:	ffff7fff 	.word	0xffff7fff
 8002444:	fffdffff 	.word	0xfffdffff
 8002448:	fffeffff 	.word	0xfffeffff
 800244c:	fffbffff 	.word	0xfffbffff
 8002450:	ffffefff 	.word	0xffffefff
 8002454:	ffffdfff 	.word	0xffffdfff
 8002458:	ffefffff 	.word	0xffefffff
 800245c:	fff7ffff 	.word	0xfff7ffff
 8002460:	ff9fffff 	.word	0xff9fffff

08002464 <UART_WaitOnFlagUntilTimeout>:
{
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	46ce      	mov	lr, r9
 8002468:	4647      	mov	r7, r8
 800246a:	b580      	push	{r7, lr}
 800246c:	4680      	mov	r8, r0
 800246e:	000d      	movs	r5, r1
 8002470:	0016      	movs	r6, r2
 8002472:	4699      	mov	r9, r3
 8002474:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002476:	4643      	mov	r3, r8
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69dc      	ldr	r4, [r3, #28]
 800247c:	402c      	ands	r4, r5
 800247e:	1b64      	subs	r4, r4, r5
 8002480:	4262      	negs	r2, r4
 8002482:	4154      	adcs	r4, r2
 8002484:	42b4      	cmp	r4, r6
 8002486:	d136      	bne.n	80024f6 <UART_WaitOnFlagUntilTimeout+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8002488:	1c7a      	adds	r2, r7, #1
 800248a:	d0f6      	beq.n	800247a <UART_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248c:	f7fe fc02 	bl	8000c94 <HAL_GetTick>
 8002490:	464b      	mov	r3, r9
 8002492:	1ac0      	subs	r0, r0, r3
 8002494:	42b8      	cmp	r0, r7
 8002496:	d833      	bhi.n	8002500 <UART_WaitOnFlagUntilTimeout+0x9c>
 8002498:	2f00      	cmp	r7, #0
 800249a:	d033      	beq.n	8002504 <UART_WaitOnFlagUntilTimeout+0xa0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800249c:	4643      	mov	r3, r8
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	075b      	lsls	r3, r3, #29
 80024a4:	d5e7      	bpl.n	8002476 <UART_WaitOnFlagUntilTimeout+0x12>
 80024a6:	002b      	movs	r3, r5
 80024a8:	3b40      	subs	r3, #64	@ 0x40
 80024aa:	2140      	movs	r1, #64	@ 0x40
 80024ac:	438b      	bics	r3, r1
 80024ae:	d0e2      	beq.n	8002476 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024b0:	69d3      	ldr	r3, [r2, #28]
 80024b2:	071b      	lsls	r3, r3, #28
 80024b4:	d411      	bmi.n	80024da <UART_WaitOnFlagUntilTimeout+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024b6:	69d3      	ldr	r3, [r2, #28]
 80024b8:	051b      	lsls	r3, r3, #20
 80024ba:	d5dc      	bpl.n	8002476 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024bc:	2380      	movs	r3, #128	@ 0x80
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 80024c2:	4640      	mov	r0, r8
 80024c4:	f7ff fe54 	bl	8002170 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024c8:	2390      	movs	r3, #144	@ 0x90
 80024ca:	2220      	movs	r2, #32
 80024cc:	4641      	mov	r1, r8
 80024ce:	50ca      	str	r2, [r1, r3]
          __HAL_UNLOCK(huart);
 80024d0:	3b0c      	subs	r3, #12
 80024d2:	2200      	movs	r2, #0
 80024d4:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 80024d6:	2003      	movs	r0, #3
 80024d8:	e00e      	b.n	80024f8 <UART_WaitOnFlagUntilTimeout+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024da:	2408      	movs	r4, #8
 80024dc:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 80024de:	4640      	mov	r0, r8
 80024e0:	f7ff fe46 	bl	8002170 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024e4:	2390      	movs	r3, #144	@ 0x90
 80024e6:	4642      	mov	r2, r8
 80024e8:	50d4      	str	r4, [r2, r3]
          __HAL_UNLOCK(huart);
 80024ea:	3b0c      	subs	r3, #12
 80024ec:	2200      	movs	r2, #0
 80024ee:	4641      	mov	r1, r8
 80024f0:	54ca      	strb	r2, [r1, r3]
          return HAL_ERROR;
 80024f2:	2001      	movs	r0, #1
 80024f4:	e000      	b.n	80024f8 <UART_WaitOnFlagUntilTimeout+0x94>
  return HAL_OK;
 80024f6:	2000      	movs	r0, #0
}
 80024f8:	bcc0      	pop	{r6, r7}
 80024fa:	46b9      	mov	r9, r7
 80024fc:	46b0      	mov	r8, r6
 80024fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002500:	2003      	movs	r0, #3
 8002502:	e7f9      	b.n	80024f8 <UART_WaitOnFlagUntilTimeout+0x94>
 8002504:	2003      	movs	r0, #3
 8002506:	e7f7      	b.n	80024f8 <UART_WaitOnFlagUntilTimeout+0x94>

08002508 <UART_CheckIdleState>:
{
 8002508:	b530      	push	{r4, r5, lr}
 800250a:	b083      	sub	sp, #12
 800250c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250e:	2390      	movs	r3, #144	@ 0x90
 8002510:	2200      	movs	r2, #0
 8002512:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002514:	f7fe fbbe 	bl	8000c94 <HAL_GetTick>
 8002518:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	071b      	lsls	r3, r3, #28
 8002520:	d411      	bmi.n	8002546 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	075b      	lsls	r3, r3, #29
 8002528:	d429      	bmi.n	800257e <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 800252a:	2320      	movs	r3, #32
 800252c:	2288      	movs	r2, #136	@ 0x88
 800252e:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002530:	3204      	adds	r2, #4
 8002532:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002534:	2300      	movs	r3, #0
 8002536:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002538:	6723      	str	r3, [r4, #112]	@ 0x70
  return HAL_OK;
 800253a:	2000      	movs	r0, #0
      __HAL_UNLOCK(huart);
 800253c:	2384      	movs	r3, #132	@ 0x84
 800253e:	2200      	movs	r2, #0
 8002540:	54e2      	strb	r2, [r4, r3]
}
 8002542:	b003      	add	sp, #12
 8002544:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002546:	2180      	movs	r1, #128	@ 0x80
 8002548:	4b20      	ldr	r3, [pc, #128]	@ (80025cc <UART_CheckIdleState+0xc4>)
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	0003      	movs	r3, r0
 800254e:	2200      	movs	r2, #0
 8002550:	0389      	lsls	r1, r1, #14
 8002552:	0020      	movs	r0, r4
 8002554:	f7ff ff86 	bl	8002464 <UART_WaitOnFlagUntilTimeout>
 8002558:	2800      	cmp	r0, #0
 800255a:	d0e2      	beq.n	8002522 <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800255c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002560:	2301      	movs	r3, #1
 8002562:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002566:	6822      	ldr	r2, [r4, #0]
 8002568:	6813      	ldr	r3, [r2, #0]
 800256a:	2080      	movs	r0, #128	@ 0x80
 800256c:	4383      	bics	r3, r0
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002574:	2388      	movs	r3, #136	@ 0x88
 8002576:	2220      	movs	r2, #32
 8002578:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 800257a:	387d      	subs	r0, #125	@ 0x7d
 800257c:	e7de      	b.n	800253c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800257e:	2180      	movs	r1, #128	@ 0x80
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <UART_CheckIdleState+0xc4>)
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	002b      	movs	r3, r5
 8002586:	2200      	movs	r2, #0
 8002588:	03c9      	lsls	r1, r1, #15
 800258a:	0020      	movs	r0, r4
 800258c:	f7ff ff6a 	bl	8002464 <UART_WaitOnFlagUntilTimeout>
 8002590:	2800      	cmp	r0, #0
 8002592:	d0ca      	beq.n	800252a <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002594:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002598:	2201      	movs	r2, #1
 800259a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800259e:	6821      	ldr	r1, [r4, #0]
 80025a0:	680b      	ldr	r3, [r1, #0]
 80025a2:	4d0b      	ldr	r5, [pc, #44]	@ (80025d0 <UART_CheckIdleState+0xc8>)
 80025a4:	402b      	ands	r3, r5
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025ac:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b4:	6821      	ldr	r1, [r4, #0]
 80025b6:	688b      	ldr	r3, [r1, #8]
 80025b8:	4393      	bics	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]
 80025bc:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80025c0:	238c      	movs	r3, #140	@ 0x8c
 80025c2:	321f      	adds	r2, #31
 80025c4:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80025c6:	2003      	movs	r0, #3
 80025c8:	e7b8      	b.n	800253c <UART_CheckIdleState+0x34>
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	01ffffff 	.word	0x01ffffff
 80025d0:	fffffedf 	.word	0xfffffedf

080025d4 <HAL_UART_Init>:
{
 80025d4:	b510      	push	{r4, lr}
 80025d6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80025d8:	d030      	beq.n	800263c <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 80025da:	2388      	movs	r3, #136	@ 0x88
 80025dc:	58c3      	ldr	r3, [r0, r3]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d022      	beq.n	8002628 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80025e2:	2388      	movs	r3, #136	@ 0x88
 80025e4:	2224      	movs	r2, #36	@ 0x24
 80025e6:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80025e8:	6822      	ldr	r2, [r4, #0]
 80025ea:	6813      	ldr	r3, [r2, #0]
 80025ec:	2101      	movs	r1, #1
 80025ee:	438b      	bics	r3, r1
 80025f0:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d11d      	bne.n	8002634 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025f8:	0020      	movs	r0, r4
 80025fa:	f7ff fdeb 	bl	80021d4 <UART_SetConfig>
 80025fe:	2801      	cmp	r0, #1
 8002600:	d011      	beq.n	8002626 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	6853      	ldr	r3, [r2, #4]
 8002606:	490e      	ldr	r1, [pc, #56]	@ (8002640 <HAL_UART_Init+0x6c>)
 8002608:	400b      	ands	r3, r1
 800260a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	6893      	ldr	r3, [r2, #8]
 8002610:	212a      	movs	r1, #42	@ 0x2a
 8002612:	438b      	bics	r3, r1
 8002614:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	6813      	ldr	r3, [r2, #0]
 800261a:	3929      	subs	r1, #41	@ 0x29
 800261c:	430b      	orrs	r3, r1
 800261e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002620:	0020      	movs	r0, r4
 8002622:	f7ff ff71 	bl	8002508 <UART_CheckIdleState>
}
 8002626:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002628:	3384      	adds	r3, #132	@ 0x84
 800262a:	2200      	movs	r2, #0
 800262c:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800262e:	f7fe fa85 	bl	8000b3c <HAL_UART_MspInit>
 8002632:	e7d6      	b.n	80025e2 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8002634:	0020      	movs	r0, r4
 8002636:	f7ff fea5 	bl	8002384 <UART_AdvFeatureConfig>
 800263a:	e7dd      	b.n	80025f8 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 800263c:	2001      	movs	r0, #1
 800263e:	e7f2      	b.n	8002626 <HAL_UART_Init+0x52>
 8002640:	ffffb7ff 	.word	0xffffb7ff

08002644 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002648:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 800264e:	336a      	adds	r3, #106	@ 0x6a
 8002650:	2201      	movs	r2, #1
 8002652:	52c2      	strh	r2, [r0, r3]
    huart->NbRxDataToProcess = 1U;
 8002654:	2001      	movs	r0, #1
 8002656:	2368      	movs	r3, #104	@ 0x68
 8002658:	52e0      	strh	r0, [r4, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800265a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800265c:	6803      	ldr	r3, [r0, #0]
 800265e:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002664:	4f08      	ldr	r7, [pc, #32]	@ (8002688 <UARTEx_SetNbDataToProcess+0x44>)
 8002666:	5cf8      	ldrb	r0, [r7, r3]
 8002668:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800266a:	4e08      	ldr	r6, [pc, #32]	@ (800268c <UARTEx_SetNbDataToProcess+0x48>)
 800266c:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800266e:	f7fd fdd5 	bl	800021c <__divsi3>
 8002672:	236a      	movs	r3, #106	@ 0x6a
 8002674:	52e0      	strh	r0, [r4, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002676:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002678:	0f5b      	lsrs	r3, r3, #29
 800267a:	5cf8      	ldrb	r0, [r7, r3]
 800267c:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800267e:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002680:	f7fd fdcc 	bl	800021c <__divsi3>
 8002684:	b280      	uxth	r0, r0
 8002686:	e7e6      	b.n	8002656 <UARTEx_SetNbDataToProcess+0x12>
 8002688:	0800285c 	.word	0x0800285c
 800268c:	08002854 	.word	0x08002854

08002690 <HAL_UARTEx_DisableFifoMode>:
{
 8002690:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8002692:	2384      	movs	r3, #132	@ 0x84
 8002694:	5cc3      	ldrb	r3, [r0, r3]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d015      	beq.n	80026c6 <HAL_UARTEx_DisableFifoMode+0x36>
 800269a:	2484      	movs	r4, #132	@ 0x84
 800269c:	2601      	movs	r6, #1
 800269e:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 80026a0:	2588      	movs	r5, #136	@ 0x88
 80026a2:	2324      	movs	r3, #36	@ 0x24
 80026a4:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80026a6:	6802      	ldr	r2, [r0, #0]
 80026a8:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80026aa:	6811      	ldr	r1, [r2, #0]
 80026ac:	43b1      	bics	r1, r6
 80026ae:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80026b0:	4a06      	ldr	r2, [pc, #24]	@ (80026cc <HAL_UARTEx_DisableFifoMode+0x3c>)
 80026b2:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80026b4:	2200      	movs	r2, #0
 80026b6:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80026b8:	6801      	ldr	r1, [r0, #0]
 80026ba:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80026bc:	2320      	movs	r3, #32
 80026be:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 80026c0:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 80026c2:	2000      	movs	r0, #0
}
 80026c4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80026c6:	2002      	movs	r0, #2
 80026c8:	e7fc      	b.n	80026c4 <HAL_UARTEx_DisableFifoMode+0x34>
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	dfffffff 	.word	0xdfffffff

080026d0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d2:	0004      	movs	r4, r0
 80026d4:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80026d6:	2384      	movs	r3, #132	@ 0x84
 80026d8:	5cc3      	ldrb	r3, [r0, r3]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d01b      	beq.n	8002716 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80026de:	2584      	movs	r5, #132	@ 0x84
 80026e0:	2001      	movs	r0, #1
 80026e2:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80026e4:	2688      	movs	r6, #136	@ 0x88
 80026e6:	2324      	movs	r3, #36	@ 0x24
 80026e8:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	4381      	bics	r1, r0
 80026f2:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80026f4:	6820      	ldr	r0, [r4, #0]
 80026f6:	6883      	ldr	r3, [r0, #8]
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	08d9      	lsrs	r1, r3, #3
 80026fc:	4311      	orrs	r1, r2
 80026fe:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002700:	0020      	movs	r0, r4
 8002702:	f7ff ff9f 	bl	8002644 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800270a:	2320      	movs	r3, #32
 800270c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800270e:	2300      	movs	r3, #0
 8002710:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002712:	2000      	movs	r0, #0
}
 8002714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8002716:	2002      	movs	r0, #2
 8002718:	e7fc      	b.n	8002714 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

0800271c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	0004      	movs	r4, r0
 8002720:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8002722:	2284      	movs	r2, #132	@ 0x84
 8002724:	5c82      	ldrb	r2, [r0, r2]
 8002726:	2a01      	cmp	r2, #1
 8002728:	d01b      	beq.n	8002762 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800272a:	2584      	movs	r5, #132	@ 0x84
 800272c:	2001      	movs	r0, #1
 800272e:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8002730:	2688      	movs	r6, #136	@ 0x88
 8002732:	2224      	movs	r2, #36	@ 0x24
 8002734:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002736:	6822      	ldr	r2, [r4, #0]
 8002738:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800273a:	6811      	ldr	r1, [r2, #0]
 800273c:	4381      	bics	r1, r0
 800273e:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002740:	6822      	ldr	r2, [r4, #0]
 8002742:	6891      	ldr	r1, [r2, #8]
 8002744:	4808      	ldr	r0, [pc, #32]	@ (8002768 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8002746:	4001      	ands	r1, r0
 8002748:	4319      	orrs	r1, r3
 800274a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800274c:	0020      	movs	r0, r4
 800274e:	f7ff ff79 	bl	8002644 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002756:	2320      	movs	r3, #32
 8002758:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800275a:	2300      	movs	r3, #0
 800275c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800275e:	2000      	movs	r0, #0
}
 8002760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8002762:	2002      	movs	r0, #2
 8002764:	e7fc      	b.n	8002760 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	f1ffffff 	.word	0xf1ffffff

0800276c <memset>:
 800276c:	0003      	movs	r3, r0
 800276e:	1882      	adds	r2, r0, r2
 8002770:	4293      	cmp	r3, r2
 8002772:	d100      	bne.n	8002776 <memset+0xa>
 8002774:	4770      	bx	lr
 8002776:	7019      	strb	r1, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	e7f9      	b.n	8002770 <memset+0x4>

0800277c <__libc_init_array>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	2600      	movs	r6, #0
 8002780:	4c0c      	ldr	r4, [pc, #48]	@ (80027b4 <__libc_init_array+0x38>)
 8002782:	4d0d      	ldr	r5, [pc, #52]	@ (80027b8 <__libc_init_array+0x3c>)
 8002784:	1b64      	subs	r4, r4, r5
 8002786:	10a4      	asrs	r4, r4, #2
 8002788:	42a6      	cmp	r6, r4
 800278a:	d109      	bne.n	80027a0 <__libc_init_array+0x24>
 800278c:	2600      	movs	r6, #0
 800278e:	f000 f819 	bl	80027c4 <_init>
 8002792:	4c0a      	ldr	r4, [pc, #40]	@ (80027bc <__libc_init_array+0x40>)
 8002794:	4d0a      	ldr	r5, [pc, #40]	@ (80027c0 <__libc_init_array+0x44>)
 8002796:	1b64      	subs	r4, r4, r5
 8002798:	10a4      	asrs	r4, r4, #2
 800279a:	42a6      	cmp	r6, r4
 800279c:	d105      	bne.n	80027aa <__libc_init_array+0x2e>
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	00b3      	lsls	r3, r6, #2
 80027a2:	58eb      	ldr	r3, [r5, r3]
 80027a4:	4798      	blx	r3
 80027a6:	3601      	adds	r6, #1
 80027a8:	e7ee      	b.n	8002788 <__libc_init_array+0xc>
 80027aa:	00b3      	lsls	r3, r6, #2
 80027ac:	58eb      	ldr	r3, [r5, r3]
 80027ae:	4798      	blx	r3
 80027b0:	3601      	adds	r6, #1
 80027b2:	e7f2      	b.n	800279a <__libc_init_array+0x1e>
 80027b4:	08002864 	.word	0x08002864
 80027b8:	08002864 	.word	0x08002864
 80027bc:	08002868 	.word	0x08002868
 80027c0:	08002864 	.word	0x08002864

080027c4 <_init>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ca:	bc08      	pop	{r3}
 80027cc:	469e      	mov	lr, r3
 80027ce:	4770      	bx	lr

080027d0 <_fini>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr
