
gate_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005928  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080059e8  080059e8  000069e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b90  08005b90  0000707c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005b90  08005b90  0000707c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005b90  08005b90  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b90  08005b90  00006b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b94  08005b94  00006b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005b98  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  2000007c  08005c14  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08005c14  000073b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed33  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331f  00000000  00000000  00025dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001106d  00000000  00000000  000290f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  0003a168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f77  00000000  00000000  0003b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015d17  00000000  00000000  0003c387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002040a  00000000  00000000  0005209e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085b91  00000000  00000000  000724a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f8039  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d04  00000000  00000000  000f807c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  000fbd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080059d0 	.word	0x080059d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	080059d0 	.word	0x080059d0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cfrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0008      	movs	r0, r1
 800041c:	4661      	mov	r1, ip
 800041e:	e7ff      	b.n	8000420 <__aeabi_cfcmpeq>

08000420 <__aeabi_cfcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 fbab 	bl	8000b7c <__lesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cfcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_fcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 fb33 	bl	8000a9c <__eqsf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_fcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fb9d 	bl	8000b7c <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_fcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fb93 	bl	8000b7c <__lesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_fcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_fcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fb41 	bl	8000aec <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_fcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_fcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fb37 	bl	8000aec <__gesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_fcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_fadd>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	024b      	lsls	r3, r1, #9
 8000490:	0a5a      	lsrs	r2, r3, #9
 8000492:	4694      	mov	ip, r2
 8000494:	004a      	lsls	r2, r1, #1
 8000496:	0fc9      	lsrs	r1, r1, #31
 8000498:	46ce      	mov	lr, r9
 800049a:	4647      	mov	r7, r8
 800049c:	4689      	mov	r9, r1
 800049e:	0045      	lsls	r5, r0, #1
 80004a0:	0246      	lsls	r6, r0, #9
 80004a2:	0e2d      	lsrs	r5, r5, #24
 80004a4:	0e12      	lsrs	r2, r2, #24
 80004a6:	b580      	push	{r7, lr}
 80004a8:	0999      	lsrs	r1, r3, #6
 80004aa:	0a77      	lsrs	r7, r6, #9
 80004ac:	0fc4      	lsrs	r4, r0, #31
 80004ae:	09b6      	lsrs	r6, r6, #6
 80004b0:	1aab      	subs	r3, r5, r2
 80004b2:	454c      	cmp	r4, r9
 80004b4:	d020      	beq.n	80004f8 <__aeabi_fadd+0x6c>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	dd0c      	ble.n	80004d4 <__aeabi_fadd+0x48>
 80004ba:	2a00      	cmp	r2, #0
 80004bc:	d134      	bne.n	8000528 <__aeabi_fadd+0x9c>
 80004be:	2900      	cmp	r1, #0
 80004c0:	d02a      	beq.n	8000518 <__aeabi_fadd+0x8c>
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d100      	bne.n	80004ca <__aeabi_fadd+0x3e>
 80004c8:	e08f      	b.n	80005ea <__aeabi_fadd+0x15e>
 80004ca:	2bff      	cmp	r3, #255	@ 0xff
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x44>
 80004ce:	e0cd      	b.n	800066c <__aeabi_fadd+0x1e0>
 80004d0:	0013      	movs	r3, r2
 80004d2:	e02f      	b.n	8000534 <__aeabi_fadd+0xa8>
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d060      	beq.n	800059a <__aeabi_fadd+0x10e>
 80004d8:	1b53      	subs	r3, r2, r5
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d000      	beq.n	80004e0 <__aeabi_fadd+0x54>
 80004de:	e0ee      	b.n	80006be <__aeabi_fadd+0x232>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fadd+0x5a>
 80004e4:	e13e      	b.n	8000764 <__aeabi_fadd+0x2d8>
 80004e6:	1e5c      	subs	r4, r3, #1
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x62>
 80004ec:	e16b      	b.n	80007c6 <__aeabi_fadd+0x33a>
 80004ee:	2bff      	cmp	r3, #255	@ 0xff
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x68>
 80004f2:	e0b9      	b.n	8000668 <__aeabi_fadd+0x1dc>
 80004f4:	0023      	movs	r3, r4
 80004f6:	e0e7      	b.n	80006c8 <__aeabi_fadd+0x23c>
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	dc00      	bgt.n	80004fe <__aeabi_fadd+0x72>
 80004fc:	e0a4      	b.n	8000648 <__aeabi_fadd+0x1bc>
 80004fe:	2a00      	cmp	r2, #0
 8000500:	d069      	beq.n	80005d6 <__aeabi_fadd+0x14a>
 8000502:	2dff      	cmp	r5, #255	@ 0xff
 8000504:	d100      	bne.n	8000508 <__aeabi_fadd+0x7c>
 8000506:	e0b1      	b.n	800066c <__aeabi_fadd+0x1e0>
 8000508:	2280      	movs	r2, #128	@ 0x80
 800050a:	04d2      	lsls	r2, r2, #19
 800050c:	4311      	orrs	r1, r2
 800050e:	2b1b      	cmp	r3, #27
 8000510:	dc00      	bgt.n	8000514 <__aeabi_fadd+0x88>
 8000512:	e0e9      	b.n	80006e8 <__aeabi_fadd+0x25c>
 8000514:	002b      	movs	r3, r5
 8000516:	3605      	adds	r6, #5
 8000518:	08f7      	lsrs	r7, r6, #3
 800051a:	2bff      	cmp	r3, #255	@ 0xff
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x94>
 800051e:	e0a5      	b.n	800066c <__aeabi_fadd+0x1e0>
 8000520:	027a      	lsls	r2, r7, #9
 8000522:	0a52      	lsrs	r2, r2, #9
 8000524:	b2d8      	uxtb	r0, r3
 8000526:	e030      	b.n	800058a <__aeabi_fadd+0xfe>
 8000528:	2dff      	cmp	r5, #255	@ 0xff
 800052a:	d100      	bne.n	800052e <__aeabi_fadd+0xa2>
 800052c:	e09e      	b.n	800066c <__aeabi_fadd+0x1e0>
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	04d2      	lsls	r2, r2, #19
 8000532:	4311      	orrs	r1, r2
 8000534:	2001      	movs	r0, #1
 8000536:	2b1b      	cmp	r3, #27
 8000538:	dc08      	bgt.n	800054c <__aeabi_fadd+0xc0>
 800053a:	0008      	movs	r0, r1
 800053c:	2220      	movs	r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	4099      	lsls	r1, r3
 8000544:	000b      	movs	r3, r1
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	4193      	sbcs	r3, r2
 800054a:	4318      	orrs	r0, r3
 800054c:	1a36      	subs	r6, r6, r0
 800054e:	0173      	lsls	r3, r6, #5
 8000550:	d400      	bmi.n	8000554 <__aeabi_fadd+0xc8>
 8000552:	e071      	b.n	8000638 <__aeabi_fadd+0x1ac>
 8000554:	01b6      	lsls	r6, r6, #6
 8000556:	09b7      	lsrs	r7, r6, #6
 8000558:	0038      	movs	r0, r7
 800055a:	f000 ff7b 	bl	8001454 <__clzsi2>
 800055e:	003b      	movs	r3, r7
 8000560:	3805      	subs	r0, #5
 8000562:	4083      	lsls	r3, r0
 8000564:	4285      	cmp	r5, r0
 8000566:	dd4d      	ble.n	8000604 <__aeabi_fadd+0x178>
 8000568:	4eb4      	ldr	r6, [pc, #720]	@ (800083c <__aeabi_fadd+0x3b0>)
 800056a:	1a2d      	subs	r5, r5, r0
 800056c:	401e      	ands	r6, r3
 800056e:	075a      	lsls	r2, r3, #29
 8000570:	d068      	beq.n	8000644 <__aeabi_fadd+0x1b8>
 8000572:	220f      	movs	r2, #15
 8000574:	4013      	ands	r3, r2
 8000576:	2b04      	cmp	r3, #4
 8000578:	d064      	beq.n	8000644 <__aeabi_fadd+0x1b8>
 800057a:	3604      	adds	r6, #4
 800057c:	0173      	lsls	r3, r6, #5
 800057e:	d561      	bpl.n	8000644 <__aeabi_fadd+0x1b8>
 8000580:	1c68      	adds	r0, r5, #1
 8000582:	2dfe      	cmp	r5, #254	@ 0xfe
 8000584:	d154      	bne.n	8000630 <__aeabi_fadd+0x1a4>
 8000586:	20ff      	movs	r0, #255	@ 0xff
 8000588:	2200      	movs	r2, #0
 800058a:	05c0      	lsls	r0, r0, #23
 800058c:	4310      	orrs	r0, r2
 800058e:	07e4      	lsls	r4, r4, #31
 8000590:	4320      	orrs	r0, r4
 8000592:	bcc0      	pop	{r6, r7}
 8000594:	46b9      	mov	r9, r7
 8000596:	46b0      	mov	r8, r6
 8000598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800059a:	22fe      	movs	r2, #254	@ 0xfe
 800059c:	4690      	mov	r8, r2
 800059e:	1c68      	adds	r0, r5, #1
 80005a0:	0002      	movs	r2, r0
 80005a2:	4640      	mov	r0, r8
 80005a4:	4210      	tst	r0, r2
 80005a6:	d16b      	bne.n	8000680 <__aeabi_fadd+0x1f4>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_fadd+0x122>
 80005ac:	e0dd      	b.n	800076a <__aeabi_fadd+0x2de>
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d100      	bne.n	80005b4 <__aeabi_fadd+0x128>
 80005b2:	e102      	b.n	80007ba <__aeabi_fadd+0x32e>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	d0b3      	beq.n	8000520 <__aeabi_fadd+0x94>
 80005b8:	2280      	movs	r2, #128	@ 0x80
 80005ba:	1a77      	subs	r7, r6, r1
 80005bc:	04d2      	lsls	r2, r2, #19
 80005be:	4217      	tst	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x138>
 80005c2:	e136      	b.n	8000832 <__aeabi_fadd+0x3a6>
 80005c4:	464c      	mov	r4, r9
 80005c6:	1b8e      	subs	r6, r1, r6
 80005c8:	d061      	beq.n	800068e <__aeabi_fadd+0x202>
 80005ca:	2001      	movs	r0, #1
 80005cc:	4216      	tst	r6, r2
 80005ce:	d130      	bne.n	8000632 <__aeabi_fadd+0x1a6>
 80005d0:	2300      	movs	r3, #0
 80005d2:	08f7      	lsrs	r7, r6, #3
 80005d4:	e7a4      	b.n	8000520 <__aeabi_fadd+0x94>
 80005d6:	2900      	cmp	r1, #0
 80005d8:	d09e      	beq.n	8000518 <__aeabi_fadd+0x8c>
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d100      	bne.n	80005e2 <__aeabi_fadd+0x156>
 80005e0:	e0ca      	b.n	8000778 <__aeabi_fadd+0x2ec>
 80005e2:	2bff      	cmp	r3, #255	@ 0xff
 80005e4:	d042      	beq.n	800066c <__aeabi_fadd+0x1e0>
 80005e6:	0013      	movs	r3, r2
 80005e8:	e791      	b.n	800050e <__aeabi_fadd+0x82>
 80005ea:	1a71      	subs	r1, r6, r1
 80005ec:	014b      	lsls	r3, r1, #5
 80005ee:	d400      	bmi.n	80005f2 <__aeabi_fadd+0x166>
 80005f0:	e0d1      	b.n	8000796 <__aeabi_fadd+0x30a>
 80005f2:	018f      	lsls	r7, r1, #6
 80005f4:	09bf      	lsrs	r7, r7, #6
 80005f6:	0038      	movs	r0, r7
 80005f8:	f000 ff2c 	bl	8001454 <__clzsi2>
 80005fc:	003b      	movs	r3, r7
 80005fe:	3805      	subs	r0, #5
 8000600:	4083      	lsls	r3, r0
 8000602:	2501      	movs	r5, #1
 8000604:	2220      	movs	r2, #32
 8000606:	1b40      	subs	r0, r0, r5
 8000608:	3001      	adds	r0, #1
 800060a:	1a12      	subs	r2, r2, r0
 800060c:	001e      	movs	r6, r3
 800060e:	4093      	lsls	r3, r2
 8000610:	40c6      	lsrs	r6, r0
 8000612:	1e5a      	subs	r2, r3, #1
 8000614:	4193      	sbcs	r3, r2
 8000616:	431e      	orrs	r6, r3
 8000618:	d039      	beq.n	800068e <__aeabi_fadd+0x202>
 800061a:	0773      	lsls	r3, r6, #29
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x194>
 800061e:	e11b      	b.n	8000858 <__aeabi_fadd+0x3cc>
 8000620:	230f      	movs	r3, #15
 8000622:	2500      	movs	r5, #0
 8000624:	4033      	ands	r3, r6
 8000626:	2b04      	cmp	r3, #4
 8000628:	d1a7      	bne.n	800057a <__aeabi_fadd+0xee>
 800062a:	2001      	movs	r0, #1
 800062c:	0172      	lsls	r2, r6, #5
 800062e:	d57c      	bpl.n	800072a <__aeabi_fadd+0x29e>
 8000630:	b2c0      	uxtb	r0, r0
 8000632:	01b2      	lsls	r2, r6, #6
 8000634:	0a52      	lsrs	r2, r2, #9
 8000636:	e7a8      	b.n	800058a <__aeabi_fadd+0xfe>
 8000638:	0773      	lsls	r3, r6, #29
 800063a:	d003      	beq.n	8000644 <__aeabi_fadd+0x1b8>
 800063c:	230f      	movs	r3, #15
 800063e:	4033      	ands	r3, r6
 8000640:	2b04      	cmp	r3, #4
 8000642:	d19a      	bne.n	800057a <__aeabi_fadd+0xee>
 8000644:	002b      	movs	r3, r5
 8000646:	e767      	b.n	8000518 <__aeabi_fadd+0x8c>
 8000648:	2b00      	cmp	r3, #0
 800064a:	d023      	beq.n	8000694 <__aeabi_fadd+0x208>
 800064c:	1b53      	subs	r3, r2, r5
 800064e:	2d00      	cmp	r5, #0
 8000650:	d17b      	bne.n	800074a <__aeabi_fadd+0x2be>
 8000652:	2e00      	cmp	r6, #0
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x1cc>
 8000656:	e086      	b.n	8000766 <__aeabi_fadd+0x2da>
 8000658:	1e5d      	subs	r5, r3, #1
 800065a:	2b01      	cmp	r3, #1
 800065c:	d100      	bne.n	8000660 <__aeabi_fadd+0x1d4>
 800065e:	e08b      	b.n	8000778 <__aeabi_fadd+0x2ec>
 8000660:	2bff      	cmp	r3, #255	@ 0xff
 8000662:	d002      	beq.n	800066a <__aeabi_fadd+0x1de>
 8000664:	002b      	movs	r3, r5
 8000666:	e075      	b.n	8000754 <__aeabi_fadd+0x2c8>
 8000668:	464c      	mov	r4, r9
 800066a:	4667      	mov	r7, ip
 800066c:	2f00      	cmp	r7, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0x1e6>
 8000670:	e789      	b.n	8000586 <__aeabi_fadd+0xfa>
 8000672:	2280      	movs	r2, #128	@ 0x80
 8000674:	03d2      	lsls	r2, r2, #15
 8000676:	433a      	orrs	r2, r7
 8000678:	0252      	lsls	r2, r2, #9
 800067a:	20ff      	movs	r0, #255	@ 0xff
 800067c:	0a52      	lsrs	r2, r2, #9
 800067e:	e784      	b.n	800058a <__aeabi_fadd+0xfe>
 8000680:	1a77      	subs	r7, r6, r1
 8000682:	017b      	lsls	r3, r7, #5
 8000684:	d46b      	bmi.n	800075e <__aeabi_fadd+0x2d2>
 8000686:	2f00      	cmp	r7, #0
 8000688:	d000      	beq.n	800068c <__aeabi_fadd+0x200>
 800068a:	e765      	b.n	8000558 <__aeabi_fadd+0xcc>
 800068c:	2400      	movs	r4, #0
 800068e:	2000      	movs	r0, #0
 8000690:	2200      	movs	r2, #0
 8000692:	e77a      	b.n	800058a <__aeabi_fadd+0xfe>
 8000694:	22fe      	movs	r2, #254	@ 0xfe
 8000696:	1c6b      	adds	r3, r5, #1
 8000698:	421a      	tst	r2, r3
 800069a:	d149      	bne.n	8000730 <__aeabi_fadd+0x2a4>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0x216>
 80006a0:	e09f      	b.n	80007e2 <__aeabi_fadd+0x356>
 80006a2:	2e00      	cmp	r6, #0
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x21c>
 80006a6:	e0ba      	b.n	800081e <__aeabi_fadd+0x392>
 80006a8:	2900      	cmp	r1, #0
 80006aa:	d100      	bne.n	80006ae <__aeabi_fadd+0x222>
 80006ac:	e0cf      	b.n	800084e <__aeabi_fadd+0x3c2>
 80006ae:	1872      	adds	r2, r6, r1
 80006b0:	0153      	lsls	r3, r2, #5
 80006b2:	d400      	bmi.n	80006b6 <__aeabi_fadd+0x22a>
 80006b4:	e0cd      	b.n	8000852 <__aeabi_fadd+0x3c6>
 80006b6:	0192      	lsls	r2, r2, #6
 80006b8:	2001      	movs	r0, #1
 80006ba:	0a52      	lsrs	r2, r2, #9
 80006bc:	e765      	b.n	800058a <__aeabi_fadd+0xfe>
 80006be:	2aff      	cmp	r2, #255	@ 0xff
 80006c0:	d0d2      	beq.n	8000668 <__aeabi_fadd+0x1dc>
 80006c2:	2080      	movs	r0, #128	@ 0x80
 80006c4:	04c0      	lsls	r0, r0, #19
 80006c6:	4306      	orrs	r6, r0
 80006c8:	2001      	movs	r0, #1
 80006ca:	2b1b      	cmp	r3, #27
 80006cc:	dc08      	bgt.n	80006e0 <__aeabi_fadd+0x254>
 80006ce:	0030      	movs	r0, r6
 80006d0:	2420      	movs	r4, #32
 80006d2:	40d8      	lsrs	r0, r3
 80006d4:	1ae3      	subs	r3, r4, r3
 80006d6:	409e      	lsls	r6, r3
 80006d8:	0033      	movs	r3, r6
 80006da:	1e5c      	subs	r4, r3, #1
 80006dc:	41a3      	sbcs	r3, r4
 80006de:	4318      	orrs	r0, r3
 80006e0:	464c      	mov	r4, r9
 80006e2:	0015      	movs	r5, r2
 80006e4:	1a0e      	subs	r6, r1, r0
 80006e6:	e732      	b.n	800054e <__aeabi_fadd+0xc2>
 80006e8:	0008      	movs	r0, r1
 80006ea:	2220      	movs	r2, #32
 80006ec:	40d8      	lsrs	r0, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	4099      	lsls	r1, r3
 80006f2:	000b      	movs	r3, r1
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	4193      	sbcs	r3, r2
 80006f8:	4303      	orrs	r3, r0
 80006fa:	18f6      	adds	r6, r6, r3
 80006fc:	0173      	lsls	r3, r6, #5
 80006fe:	d59b      	bpl.n	8000638 <__aeabi_fadd+0x1ac>
 8000700:	3501      	adds	r5, #1
 8000702:	2dff      	cmp	r5, #255	@ 0xff
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x27c>
 8000706:	e73e      	b.n	8000586 <__aeabi_fadd+0xfa>
 8000708:	2301      	movs	r3, #1
 800070a:	494d      	ldr	r1, [pc, #308]	@ (8000840 <__aeabi_fadd+0x3b4>)
 800070c:	0872      	lsrs	r2, r6, #1
 800070e:	4033      	ands	r3, r6
 8000710:	400a      	ands	r2, r1
 8000712:	431a      	orrs	r2, r3
 8000714:	0016      	movs	r6, r2
 8000716:	0753      	lsls	r3, r2, #29
 8000718:	d004      	beq.n	8000724 <__aeabi_fadd+0x298>
 800071a:	230f      	movs	r3, #15
 800071c:	4013      	ands	r3, r2
 800071e:	2b04      	cmp	r3, #4
 8000720:	d000      	beq.n	8000724 <__aeabi_fadd+0x298>
 8000722:	e72a      	b.n	800057a <__aeabi_fadd+0xee>
 8000724:	0173      	lsls	r3, r6, #5
 8000726:	d500      	bpl.n	800072a <__aeabi_fadd+0x29e>
 8000728:	e72a      	b.n	8000580 <__aeabi_fadd+0xf4>
 800072a:	002b      	movs	r3, r5
 800072c:	08f7      	lsrs	r7, r6, #3
 800072e:	e6f7      	b.n	8000520 <__aeabi_fadd+0x94>
 8000730:	2bff      	cmp	r3, #255	@ 0xff
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x2aa>
 8000734:	e727      	b.n	8000586 <__aeabi_fadd+0xfa>
 8000736:	1871      	adds	r1, r6, r1
 8000738:	0849      	lsrs	r1, r1, #1
 800073a:	074a      	lsls	r2, r1, #29
 800073c:	d02f      	beq.n	800079e <__aeabi_fadd+0x312>
 800073e:	220f      	movs	r2, #15
 8000740:	400a      	ands	r2, r1
 8000742:	2a04      	cmp	r2, #4
 8000744:	d02b      	beq.n	800079e <__aeabi_fadd+0x312>
 8000746:	1d0e      	adds	r6, r1, #4
 8000748:	e6e6      	b.n	8000518 <__aeabi_fadd+0x8c>
 800074a:	2aff      	cmp	r2, #255	@ 0xff
 800074c:	d08d      	beq.n	800066a <__aeabi_fadd+0x1de>
 800074e:	2080      	movs	r0, #128	@ 0x80
 8000750:	04c0      	lsls	r0, r0, #19
 8000752:	4306      	orrs	r6, r0
 8000754:	2b1b      	cmp	r3, #27
 8000756:	dd24      	ble.n	80007a2 <__aeabi_fadd+0x316>
 8000758:	0013      	movs	r3, r2
 800075a:	1d4e      	adds	r6, r1, #5
 800075c:	e6dc      	b.n	8000518 <__aeabi_fadd+0x8c>
 800075e:	464c      	mov	r4, r9
 8000760:	1b8f      	subs	r7, r1, r6
 8000762:	e6f9      	b.n	8000558 <__aeabi_fadd+0xcc>
 8000764:	464c      	mov	r4, r9
 8000766:	000e      	movs	r6, r1
 8000768:	e6d6      	b.n	8000518 <__aeabi_fadd+0x8c>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d149      	bne.n	8000802 <__aeabi_fadd+0x376>
 800076e:	2900      	cmp	r1, #0
 8000770:	d068      	beq.n	8000844 <__aeabi_fadd+0x3b8>
 8000772:	4667      	mov	r7, ip
 8000774:	464c      	mov	r4, r9
 8000776:	e77c      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000778:	1870      	adds	r0, r6, r1
 800077a:	0143      	lsls	r3, r0, #5
 800077c:	d574      	bpl.n	8000868 <__aeabi_fadd+0x3dc>
 800077e:	4930      	ldr	r1, [pc, #192]	@ (8000840 <__aeabi_fadd+0x3b4>)
 8000780:	0840      	lsrs	r0, r0, #1
 8000782:	4001      	ands	r1, r0
 8000784:	0743      	lsls	r3, r0, #29
 8000786:	d009      	beq.n	800079c <__aeabi_fadd+0x310>
 8000788:	230f      	movs	r3, #15
 800078a:	4003      	ands	r3, r0
 800078c:	2b04      	cmp	r3, #4
 800078e:	d005      	beq.n	800079c <__aeabi_fadd+0x310>
 8000790:	2302      	movs	r3, #2
 8000792:	1d0e      	adds	r6, r1, #4
 8000794:	e6c0      	b.n	8000518 <__aeabi_fadd+0x8c>
 8000796:	2301      	movs	r3, #1
 8000798:	08cf      	lsrs	r7, r1, #3
 800079a:	e6c1      	b.n	8000520 <__aeabi_fadd+0x94>
 800079c:	2302      	movs	r3, #2
 800079e:	08cf      	lsrs	r7, r1, #3
 80007a0:	e6be      	b.n	8000520 <__aeabi_fadd+0x94>
 80007a2:	2520      	movs	r5, #32
 80007a4:	0030      	movs	r0, r6
 80007a6:	40d8      	lsrs	r0, r3
 80007a8:	1aeb      	subs	r3, r5, r3
 80007aa:	409e      	lsls	r6, r3
 80007ac:	0033      	movs	r3, r6
 80007ae:	1e5d      	subs	r5, r3, #1
 80007b0:	41ab      	sbcs	r3, r5
 80007b2:	4303      	orrs	r3, r0
 80007b4:	0015      	movs	r5, r2
 80007b6:	185e      	adds	r6, r3, r1
 80007b8:	e7a0      	b.n	80006fc <__aeabi_fadd+0x270>
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fadd+0x334>
 80007be:	e765      	b.n	800068c <__aeabi_fadd+0x200>
 80007c0:	464c      	mov	r4, r9
 80007c2:	4667      	mov	r7, ip
 80007c4:	e6ac      	b.n	8000520 <__aeabi_fadd+0x94>
 80007c6:	1b8f      	subs	r7, r1, r6
 80007c8:	017b      	lsls	r3, r7, #5
 80007ca:	d52e      	bpl.n	800082a <__aeabi_fadd+0x39e>
 80007cc:	01bf      	lsls	r7, r7, #6
 80007ce:	09bf      	lsrs	r7, r7, #6
 80007d0:	0038      	movs	r0, r7
 80007d2:	f000 fe3f 	bl	8001454 <__clzsi2>
 80007d6:	003b      	movs	r3, r7
 80007d8:	3805      	subs	r0, #5
 80007da:	4083      	lsls	r3, r0
 80007dc:	464c      	mov	r4, r9
 80007de:	3501      	adds	r5, #1
 80007e0:	e710      	b.n	8000604 <__aeabi_fadd+0x178>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x35c>
 80007e6:	e740      	b.n	800066a <__aeabi_fadd+0x1de>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x362>
 80007ec:	e741      	b.n	8000672 <__aeabi_fadd+0x1e6>
 80007ee:	2380      	movs	r3, #128	@ 0x80
 80007f0:	03db      	lsls	r3, r3, #15
 80007f2:	429f      	cmp	r7, r3
 80007f4:	d200      	bcs.n	80007f8 <__aeabi_fadd+0x36c>
 80007f6:	e73c      	b.n	8000672 <__aeabi_fadd+0x1e6>
 80007f8:	459c      	cmp	ip, r3
 80007fa:	d300      	bcc.n	80007fe <__aeabi_fadd+0x372>
 80007fc:	e739      	b.n	8000672 <__aeabi_fadd+0x1e6>
 80007fe:	4667      	mov	r7, ip
 8000800:	e737      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000802:	2900      	cmp	r1, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x37c>
 8000806:	e734      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000808:	2380      	movs	r3, #128	@ 0x80
 800080a:	03db      	lsls	r3, r3, #15
 800080c:	429f      	cmp	r7, r3
 800080e:	d200      	bcs.n	8000812 <__aeabi_fadd+0x386>
 8000810:	e72f      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000812:	459c      	cmp	ip, r3
 8000814:	d300      	bcc.n	8000818 <__aeabi_fadd+0x38c>
 8000816:	e72c      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000818:	464c      	mov	r4, r9
 800081a:	4667      	mov	r7, ip
 800081c:	e729      	b.n	8000672 <__aeabi_fadd+0x1e6>
 800081e:	2900      	cmp	r1, #0
 8000820:	d100      	bne.n	8000824 <__aeabi_fadd+0x398>
 8000822:	e734      	b.n	800068e <__aeabi_fadd+0x202>
 8000824:	2300      	movs	r3, #0
 8000826:	08cf      	lsrs	r7, r1, #3
 8000828:	e67a      	b.n	8000520 <__aeabi_fadd+0x94>
 800082a:	464c      	mov	r4, r9
 800082c:	2301      	movs	r3, #1
 800082e:	08ff      	lsrs	r7, r7, #3
 8000830:	e676      	b.n	8000520 <__aeabi_fadd+0x94>
 8000832:	2f00      	cmp	r7, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x3ac>
 8000836:	e729      	b.n	800068c <__aeabi_fadd+0x200>
 8000838:	08ff      	lsrs	r7, r7, #3
 800083a:	e671      	b.n	8000520 <__aeabi_fadd+0x94>
 800083c:	fbffffff 	.word	0xfbffffff
 8000840:	7dffffff 	.word	0x7dffffff
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	2400      	movs	r4, #0
 8000848:	20ff      	movs	r0, #255	@ 0xff
 800084a:	03d2      	lsls	r2, r2, #15
 800084c:	e69d      	b.n	800058a <__aeabi_fadd+0xfe>
 800084e:	2300      	movs	r3, #0
 8000850:	e666      	b.n	8000520 <__aeabi_fadd+0x94>
 8000852:	2300      	movs	r3, #0
 8000854:	08d7      	lsrs	r7, r2, #3
 8000856:	e663      	b.n	8000520 <__aeabi_fadd+0x94>
 8000858:	2001      	movs	r0, #1
 800085a:	0172      	lsls	r2, r6, #5
 800085c:	d500      	bpl.n	8000860 <__aeabi_fadd+0x3d4>
 800085e:	e6e7      	b.n	8000630 <__aeabi_fadd+0x1a4>
 8000860:	0031      	movs	r1, r6
 8000862:	2300      	movs	r3, #0
 8000864:	08cf      	lsrs	r7, r1, #3
 8000866:	e65b      	b.n	8000520 <__aeabi_fadd+0x94>
 8000868:	2301      	movs	r3, #1
 800086a:	08c7      	lsrs	r7, r0, #3
 800086c:	e658      	b.n	8000520 <__aeabi_fadd+0x94>
 800086e:	46c0      	nop			@ (mov r8, r8)

08000870 <__aeabi_fdiv>:
 8000870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000872:	4646      	mov	r6, r8
 8000874:	464f      	mov	r7, r9
 8000876:	46d6      	mov	lr, sl
 8000878:	0245      	lsls	r5, r0, #9
 800087a:	b5c0      	push	{r6, r7, lr}
 800087c:	0fc3      	lsrs	r3, r0, #31
 800087e:	0047      	lsls	r7, r0, #1
 8000880:	4698      	mov	r8, r3
 8000882:	1c0e      	adds	r6, r1, #0
 8000884:	0a6d      	lsrs	r5, r5, #9
 8000886:	0e3f      	lsrs	r7, r7, #24
 8000888:	d05b      	beq.n	8000942 <__aeabi_fdiv+0xd2>
 800088a:	2fff      	cmp	r7, #255	@ 0xff
 800088c:	d021      	beq.n	80008d2 <__aeabi_fdiv+0x62>
 800088e:	2380      	movs	r3, #128	@ 0x80
 8000890:	00ed      	lsls	r5, r5, #3
 8000892:	04db      	lsls	r3, r3, #19
 8000894:	431d      	orrs	r5, r3
 8000896:	2300      	movs	r3, #0
 8000898:	4699      	mov	r9, r3
 800089a:	469a      	mov	sl, r3
 800089c:	3f7f      	subs	r7, #127	@ 0x7f
 800089e:	0274      	lsls	r4, r6, #9
 80008a0:	0073      	lsls	r3, r6, #1
 80008a2:	0a64      	lsrs	r4, r4, #9
 80008a4:	0e1b      	lsrs	r3, r3, #24
 80008a6:	0ff6      	lsrs	r6, r6, #31
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d020      	beq.n	80008ee <__aeabi_fdiv+0x7e>
 80008ac:	2bff      	cmp	r3, #255	@ 0xff
 80008ae:	d043      	beq.n	8000938 <__aeabi_fdiv+0xc8>
 80008b0:	2280      	movs	r2, #128	@ 0x80
 80008b2:	2000      	movs	r0, #0
 80008b4:	00e4      	lsls	r4, r4, #3
 80008b6:	04d2      	lsls	r2, r2, #19
 80008b8:	4314      	orrs	r4, r2
 80008ba:	3b7f      	subs	r3, #127	@ 0x7f
 80008bc:	4642      	mov	r2, r8
 80008be:	1aff      	subs	r7, r7, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	4072      	eors	r2, r6
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d900      	bls.n	80008ca <__aeabi_fdiv+0x5a>
 80008c8:	e09d      	b.n	8000a06 <__aeabi_fdiv+0x196>
 80008ca:	4971      	ldr	r1, [pc, #452]	@ (8000a90 <__aeabi_fdiv+0x220>)
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	58cb      	ldr	r3, [r1, r3]
 80008d0:	469f      	mov	pc, r3
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d15a      	bne.n	800098c <__aeabi_fdiv+0x11c>
 80008d6:	2308      	movs	r3, #8
 80008d8:	4699      	mov	r9, r3
 80008da:	3b06      	subs	r3, #6
 80008dc:	0274      	lsls	r4, r6, #9
 80008de:	469a      	mov	sl, r3
 80008e0:	0073      	lsls	r3, r6, #1
 80008e2:	27ff      	movs	r7, #255	@ 0xff
 80008e4:	0a64      	lsrs	r4, r4, #9
 80008e6:	0e1b      	lsrs	r3, r3, #24
 80008e8:	0ff6      	lsrs	r6, r6, #31
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1de      	bne.n	80008ac <__aeabi_fdiv+0x3c>
 80008ee:	2c00      	cmp	r4, #0
 80008f0:	d13b      	bne.n	800096a <__aeabi_fdiv+0xfa>
 80008f2:	2301      	movs	r3, #1
 80008f4:	4642      	mov	r2, r8
 80008f6:	4649      	mov	r1, r9
 80008f8:	4072      	eors	r2, r6
 80008fa:	4319      	orrs	r1, r3
 80008fc:	290e      	cmp	r1, #14
 80008fe:	d818      	bhi.n	8000932 <__aeabi_fdiv+0xc2>
 8000900:	4864      	ldr	r0, [pc, #400]	@ (8000a94 <__aeabi_fdiv+0x224>)
 8000902:	0089      	lsls	r1, r1, #2
 8000904:	5841      	ldr	r1, [r0, r1]
 8000906:	468f      	mov	pc, r1
 8000908:	4653      	mov	r3, sl
 800090a:	2b02      	cmp	r3, #2
 800090c:	d100      	bne.n	8000910 <__aeabi_fdiv+0xa0>
 800090e:	e0b8      	b.n	8000a82 <__aeabi_fdiv+0x212>
 8000910:	2b03      	cmp	r3, #3
 8000912:	d06e      	beq.n	80009f2 <__aeabi_fdiv+0x182>
 8000914:	4642      	mov	r2, r8
 8000916:	002c      	movs	r4, r5
 8000918:	2b01      	cmp	r3, #1
 800091a:	d140      	bne.n	800099e <__aeabi_fdiv+0x12e>
 800091c:	2000      	movs	r0, #0
 800091e:	2400      	movs	r4, #0
 8000920:	05c0      	lsls	r0, r0, #23
 8000922:	4320      	orrs	r0, r4
 8000924:	07d2      	lsls	r2, r2, #31
 8000926:	4310      	orrs	r0, r2
 8000928:	bce0      	pop	{r5, r6, r7}
 800092a:	46ba      	mov	sl, r7
 800092c:	46b1      	mov	r9, r6
 800092e:	46a8      	mov	r8, r5
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000932:	20ff      	movs	r0, #255	@ 0xff
 8000934:	2400      	movs	r4, #0
 8000936:	e7f3      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d120      	bne.n	800097e <__aeabi_fdiv+0x10e>
 800093c:	2302      	movs	r3, #2
 800093e:	3fff      	subs	r7, #255	@ 0xff
 8000940:	e7d8      	b.n	80008f4 <__aeabi_fdiv+0x84>
 8000942:	2d00      	cmp	r5, #0
 8000944:	d105      	bne.n	8000952 <__aeabi_fdiv+0xe2>
 8000946:	2304      	movs	r3, #4
 8000948:	4699      	mov	r9, r3
 800094a:	3b03      	subs	r3, #3
 800094c:	2700      	movs	r7, #0
 800094e:	469a      	mov	sl, r3
 8000950:	e7a5      	b.n	800089e <__aeabi_fdiv+0x2e>
 8000952:	0028      	movs	r0, r5
 8000954:	f000 fd7e 	bl	8001454 <__clzsi2>
 8000958:	2776      	movs	r7, #118	@ 0x76
 800095a:	1f43      	subs	r3, r0, #5
 800095c:	409d      	lsls	r5, r3
 800095e:	2300      	movs	r3, #0
 8000960:	427f      	negs	r7, r7
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	1a3f      	subs	r7, r7, r0
 8000968:	e799      	b.n	800089e <__aeabi_fdiv+0x2e>
 800096a:	0020      	movs	r0, r4
 800096c:	f000 fd72 	bl	8001454 <__clzsi2>
 8000970:	1f43      	subs	r3, r0, #5
 8000972:	409c      	lsls	r4, r3
 8000974:	2376      	movs	r3, #118	@ 0x76
 8000976:	425b      	negs	r3, r3
 8000978:	1a1b      	subs	r3, r3, r0
 800097a:	2000      	movs	r0, #0
 800097c:	e79e      	b.n	80008bc <__aeabi_fdiv+0x4c>
 800097e:	2303      	movs	r3, #3
 8000980:	464a      	mov	r2, r9
 8000982:	431a      	orrs	r2, r3
 8000984:	4691      	mov	r9, r2
 8000986:	2003      	movs	r0, #3
 8000988:	33fc      	adds	r3, #252	@ 0xfc
 800098a:	e797      	b.n	80008bc <__aeabi_fdiv+0x4c>
 800098c:	230c      	movs	r3, #12
 800098e:	4699      	mov	r9, r3
 8000990:	3b09      	subs	r3, #9
 8000992:	27ff      	movs	r7, #255	@ 0xff
 8000994:	469a      	mov	sl, r3
 8000996:	e782      	b.n	800089e <__aeabi_fdiv+0x2e>
 8000998:	2803      	cmp	r0, #3
 800099a:	d02c      	beq.n	80009f6 <__aeabi_fdiv+0x186>
 800099c:	0032      	movs	r2, r6
 800099e:	0038      	movs	r0, r7
 80009a0:	307f      	adds	r0, #127	@ 0x7f
 80009a2:	2800      	cmp	r0, #0
 80009a4:	dd47      	ble.n	8000a36 <__aeabi_fdiv+0x1c6>
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d004      	beq.n	80009b4 <__aeabi_fdiv+0x144>
 80009aa:	230f      	movs	r3, #15
 80009ac:	4023      	ands	r3, r4
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fdiv+0x144>
 80009b2:	3404      	adds	r4, #4
 80009b4:	0123      	lsls	r3, r4, #4
 80009b6:	d503      	bpl.n	80009c0 <__aeabi_fdiv+0x150>
 80009b8:	0038      	movs	r0, r7
 80009ba:	4b37      	ldr	r3, [pc, #220]	@ (8000a98 <__aeabi_fdiv+0x228>)
 80009bc:	3080      	adds	r0, #128	@ 0x80
 80009be:	401c      	ands	r4, r3
 80009c0:	28fe      	cmp	r0, #254	@ 0xfe
 80009c2:	dcb6      	bgt.n	8000932 <__aeabi_fdiv+0xc2>
 80009c4:	01a4      	lsls	r4, r4, #6
 80009c6:	0a64      	lsrs	r4, r4, #9
 80009c8:	b2c0      	uxtb	r0, r0
 80009ca:	e7a9      	b.n	8000920 <__aeabi_fdiv+0xb0>
 80009cc:	2480      	movs	r4, #128	@ 0x80
 80009ce:	2200      	movs	r2, #0
 80009d0:	20ff      	movs	r0, #255	@ 0xff
 80009d2:	03e4      	lsls	r4, r4, #15
 80009d4:	e7a4      	b.n	8000920 <__aeabi_fdiv+0xb0>
 80009d6:	2380      	movs	r3, #128	@ 0x80
 80009d8:	03db      	lsls	r3, r3, #15
 80009da:	421d      	tst	r5, r3
 80009dc:	d001      	beq.n	80009e2 <__aeabi_fdiv+0x172>
 80009de:	421c      	tst	r4, r3
 80009e0:	d00b      	beq.n	80009fa <__aeabi_fdiv+0x18a>
 80009e2:	2480      	movs	r4, #128	@ 0x80
 80009e4:	03e4      	lsls	r4, r4, #15
 80009e6:	432c      	orrs	r4, r5
 80009e8:	0264      	lsls	r4, r4, #9
 80009ea:	4642      	mov	r2, r8
 80009ec:	20ff      	movs	r0, #255	@ 0xff
 80009ee:	0a64      	lsrs	r4, r4, #9
 80009f0:	e796      	b.n	8000920 <__aeabi_fdiv+0xb0>
 80009f2:	4646      	mov	r6, r8
 80009f4:	002c      	movs	r4, r5
 80009f6:	2380      	movs	r3, #128	@ 0x80
 80009f8:	03db      	lsls	r3, r3, #15
 80009fa:	431c      	orrs	r4, r3
 80009fc:	0264      	lsls	r4, r4, #9
 80009fe:	0032      	movs	r2, r6
 8000a00:	20ff      	movs	r0, #255	@ 0xff
 8000a02:	0a64      	lsrs	r4, r4, #9
 8000a04:	e78c      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a06:	016d      	lsls	r5, r5, #5
 8000a08:	0160      	lsls	r0, r4, #5
 8000a0a:	4285      	cmp	r5, r0
 8000a0c:	d22d      	bcs.n	8000a6a <__aeabi_fdiv+0x1fa>
 8000a0e:	231b      	movs	r3, #27
 8000a10:	2400      	movs	r4, #0
 8000a12:	3f01      	subs	r7, #1
 8000a14:	2601      	movs	r6, #1
 8000a16:	0029      	movs	r1, r5
 8000a18:	0064      	lsls	r4, r4, #1
 8000a1a:	006d      	lsls	r5, r5, #1
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	db01      	blt.n	8000a24 <__aeabi_fdiv+0x1b4>
 8000a20:	4285      	cmp	r5, r0
 8000a22:	d301      	bcc.n	8000a28 <__aeabi_fdiv+0x1b8>
 8000a24:	1a2d      	subs	r5, r5, r0
 8000a26:	4334      	orrs	r4, r6
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1f3      	bne.n	8000a16 <__aeabi_fdiv+0x1a6>
 8000a2e:	1e6b      	subs	r3, r5, #1
 8000a30:	419d      	sbcs	r5, r3
 8000a32:	432c      	orrs	r4, r5
 8000a34:	e7b3      	b.n	800099e <__aeabi_fdiv+0x12e>
 8000a36:	2301      	movs	r3, #1
 8000a38:	1a1b      	subs	r3, r3, r0
 8000a3a:	2b1b      	cmp	r3, #27
 8000a3c:	dd00      	ble.n	8000a40 <__aeabi_fdiv+0x1d0>
 8000a3e:	e76d      	b.n	800091c <__aeabi_fdiv+0xac>
 8000a40:	0021      	movs	r1, r4
 8000a42:	379e      	adds	r7, #158	@ 0x9e
 8000a44:	40d9      	lsrs	r1, r3
 8000a46:	40bc      	lsls	r4, r7
 8000a48:	000b      	movs	r3, r1
 8000a4a:	1e61      	subs	r1, r4, #1
 8000a4c:	418c      	sbcs	r4, r1
 8000a4e:	4323      	orrs	r3, r4
 8000a50:	0759      	lsls	r1, r3, #29
 8000a52:	d004      	beq.n	8000a5e <__aeabi_fdiv+0x1ee>
 8000a54:	210f      	movs	r1, #15
 8000a56:	4019      	ands	r1, r3
 8000a58:	2904      	cmp	r1, #4
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_fdiv+0x1ee>
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	0159      	lsls	r1, r3, #5
 8000a60:	d413      	bmi.n	8000a8a <__aeabi_fdiv+0x21a>
 8000a62:	019b      	lsls	r3, r3, #6
 8000a64:	2000      	movs	r0, #0
 8000a66:	0a5c      	lsrs	r4, r3, #9
 8000a68:	e75a      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a6a:	231a      	movs	r3, #26
 8000a6c:	2401      	movs	r4, #1
 8000a6e:	1a2d      	subs	r5, r5, r0
 8000a70:	e7d0      	b.n	8000a14 <__aeabi_fdiv+0x1a4>
 8000a72:	1e98      	subs	r0, r3, #2
 8000a74:	4243      	negs	r3, r0
 8000a76:	4158      	adcs	r0, r3
 8000a78:	4240      	negs	r0, r0
 8000a7a:	0032      	movs	r2, r6
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	b2c0      	uxtb	r0, r0
 8000a80:	e74e      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a82:	4642      	mov	r2, r8
 8000a84:	20ff      	movs	r0, #255	@ 0xff
 8000a86:	2400      	movs	r4, #0
 8000a88:	e74a      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	e747      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a90:	080059ec 	.word	0x080059ec
 8000a94:	08005a2c 	.word	0x08005a2c
 8000a98:	f7ffffff 	.word	0xf7ffffff

08000a9c <__eqsf2>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	0042      	lsls	r2, r0, #1
 8000aa0:	024e      	lsls	r6, r1, #9
 8000aa2:	004c      	lsls	r4, r1, #1
 8000aa4:	0245      	lsls	r5, r0, #9
 8000aa6:	0a6d      	lsrs	r5, r5, #9
 8000aa8:	0e12      	lsrs	r2, r2, #24
 8000aaa:	0fc3      	lsrs	r3, r0, #31
 8000aac:	0a76      	lsrs	r6, r6, #9
 8000aae:	0e24      	lsrs	r4, r4, #24
 8000ab0:	0fc9      	lsrs	r1, r1, #31
 8000ab2:	2aff      	cmp	r2, #255	@ 0xff
 8000ab4:	d010      	beq.n	8000ad8 <__eqsf2+0x3c>
 8000ab6:	2cff      	cmp	r4, #255	@ 0xff
 8000ab8:	d00c      	beq.n	8000ad4 <__eqsf2+0x38>
 8000aba:	2001      	movs	r0, #1
 8000abc:	42a2      	cmp	r2, r4
 8000abe:	d10a      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ac0:	42b5      	cmp	r5, r6
 8000ac2:	d108      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	d00f      	beq.n	8000ae8 <__eqsf2+0x4c>
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	d104      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000acc:	0028      	movs	r0, r5
 8000ace:	1e43      	subs	r3, r0, #1
 8000ad0:	4198      	sbcs	r0, r3
 8000ad2:	e000      	b.n	8000ad6 <__eqsf2+0x3a>
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
 8000ad8:	2001      	movs	r0, #1
 8000ada:	2cff      	cmp	r4, #255	@ 0xff
 8000adc:	d1fb      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ade:	4335      	orrs	r5, r6
 8000ae0:	d1f9      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ae2:	404b      	eors	r3, r1
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	e7f6      	b.n	8000ad6 <__eqsf2+0x3a>
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e7f4      	b.n	8000ad6 <__eqsf2+0x3a>

08000aec <__gesf2>:
 8000aec:	b530      	push	{r4, r5, lr}
 8000aee:	0042      	lsls	r2, r0, #1
 8000af0:	0244      	lsls	r4, r0, #9
 8000af2:	024d      	lsls	r5, r1, #9
 8000af4:	0fc3      	lsrs	r3, r0, #31
 8000af6:	0048      	lsls	r0, r1, #1
 8000af8:	0a64      	lsrs	r4, r4, #9
 8000afa:	0e12      	lsrs	r2, r2, #24
 8000afc:	0a6d      	lsrs	r5, r5, #9
 8000afe:	0e00      	lsrs	r0, r0, #24
 8000b00:	0fc9      	lsrs	r1, r1, #31
 8000b02:	2aff      	cmp	r2, #255	@ 0xff
 8000b04:	d018      	beq.n	8000b38 <__gesf2+0x4c>
 8000b06:	28ff      	cmp	r0, #255	@ 0xff
 8000b08:	d00a      	beq.n	8000b20 <__gesf2+0x34>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d11e      	bne.n	8000b4c <__gesf2+0x60>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d10a      	bne.n	8000b28 <__gesf2+0x3c>
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d029      	beq.n	8000b6a <__gesf2+0x7e>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d12d      	bne.n	8000b76 <__gesf2+0x8a>
 8000b1a:	0048      	lsls	r0, r1, #1
 8000b1c:	3801      	subs	r0, #1
 8000b1e:	bd30      	pop	{r4, r5, pc}
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d125      	bne.n	8000b70 <__gesf2+0x84>
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	d101      	bne.n	8000b2c <__gesf2+0x40>
 8000b28:	2c00      	cmp	r4, #0
 8000b2a:	d0f6      	beq.n	8000b1a <__gesf2+0x2e>
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	d019      	beq.n	8000b64 <__gesf2+0x78>
 8000b30:	2001      	movs	r0, #1
 8000b32:	425b      	negs	r3, r3
 8000b34:	4318      	orrs	r0, r3
 8000b36:	e7f2      	b.n	8000b1e <__gesf2+0x32>
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	d119      	bne.n	8000b70 <__gesf2+0x84>
 8000b3c:	28ff      	cmp	r0, #255	@ 0xff
 8000b3e:	d1f7      	bne.n	8000b30 <__gesf2+0x44>
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d115      	bne.n	8000b70 <__gesf2+0x84>
 8000b44:	2000      	movs	r0, #0
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d1f2      	bne.n	8000b30 <__gesf2+0x44>
 8000b4a:	e7e8      	b.n	8000b1e <__gesf2+0x32>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d0ef      	beq.n	8000b30 <__gesf2+0x44>
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d1ed      	bne.n	8000b30 <__gesf2+0x44>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	dceb      	bgt.n	8000b30 <__gesf2+0x44>
 8000b58:	db04      	blt.n	8000b64 <__gesf2+0x78>
 8000b5a:	42ac      	cmp	r4, r5
 8000b5c:	d8e8      	bhi.n	8000b30 <__gesf2+0x44>
 8000b5e:	2000      	movs	r0, #0
 8000b60:	42ac      	cmp	r4, r5
 8000b62:	d2dc      	bcs.n	8000b1e <__gesf2+0x32>
 8000b64:	0058      	lsls	r0, r3, #1
 8000b66:	3801      	subs	r0, #1
 8000b68:	e7d9      	b.n	8000b1e <__gesf2+0x32>
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d0d7      	beq.n	8000b1e <__gesf2+0x32>
 8000b6e:	e7df      	b.n	8000b30 <__gesf2+0x44>
 8000b70:	2002      	movs	r0, #2
 8000b72:	4240      	negs	r0, r0
 8000b74:	e7d3      	b.n	8000b1e <__gesf2+0x32>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d1da      	bne.n	8000b30 <__gesf2+0x44>
 8000b7a:	e7ee      	b.n	8000b5a <__gesf2+0x6e>

08000b7c <__lesf2>:
 8000b7c:	b530      	push	{r4, r5, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0244      	lsls	r4, r0, #9
 8000b82:	024d      	lsls	r5, r1, #9
 8000b84:	0fc3      	lsrs	r3, r0, #31
 8000b86:	0048      	lsls	r0, r1, #1
 8000b88:	0a64      	lsrs	r4, r4, #9
 8000b8a:	0e12      	lsrs	r2, r2, #24
 8000b8c:	0a6d      	lsrs	r5, r5, #9
 8000b8e:	0e00      	lsrs	r0, r0, #24
 8000b90:	0fc9      	lsrs	r1, r1, #31
 8000b92:	2aff      	cmp	r2, #255	@ 0xff
 8000b94:	d017      	beq.n	8000bc6 <__lesf2+0x4a>
 8000b96:	28ff      	cmp	r0, #255	@ 0xff
 8000b98:	d00a      	beq.n	8000bb0 <__lesf2+0x34>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d11b      	bne.n	8000bd6 <__lesf2+0x5a>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d10a      	bne.n	8000bb8 <__lesf2+0x3c>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d01d      	beq.n	8000be2 <__lesf2+0x66>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d12d      	bne.n	8000c06 <__lesf2+0x8a>
 8000baa:	0048      	lsls	r0, r1, #1
 8000bac:	3801      	subs	r0, #1
 8000bae:	e011      	b.n	8000bd4 <__lesf2+0x58>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d10e      	bne.n	8000bd2 <__lesf2+0x56>
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d101      	bne.n	8000bbc <__lesf2+0x40>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d0f6      	beq.n	8000baa <__lesf2+0x2e>
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d10c      	bne.n	8000bda <__lesf2+0x5e>
 8000bc0:	0058      	lsls	r0, r3, #1
 8000bc2:	3801      	subs	r0, #1
 8000bc4:	e006      	b.n	8000bd4 <__lesf2+0x58>
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	d103      	bne.n	8000bd2 <__lesf2+0x56>
 8000bca:	28ff      	cmp	r0, #255	@ 0xff
 8000bcc:	d105      	bne.n	8000bda <__lesf2+0x5e>
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d015      	beq.n	8000bfe <__lesf2+0x82>
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	bd30      	pop	{r4, r5, pc}
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d106      	bne.n	8000be8 <__lesf2+0x6c>
 8000bda:	2001      	movs	r0, #1
 8000bdc:	425b      	negs	r3, r3
 8000bde:	4318      	orrs	r0, r3
 8000be0:	e7f8      	b.n	8000bd4 <__lesf2+0x58>
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	d0f6      	beq.n	8000bd4 <__lesf2+0x58>
 8000be6:	e7f8      	b.n	8000bda <__lesf2+0x5e>
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d1f6      	bne.n	8000bda <__lesf2+0x5e>
 8000bec:	4282      	cmp	r2, r0
 8000bee:	dcf4      	bgt.n	8000bda <__lesf2+0x5e>
 8000bf0:	dbe6      	blt.n	8000bc0 <__lesf2+0x44>
 8000bf2:	42ac      	cmp	r4, r5
 8000bf4:	d8f1      	bhi.n	8000bda <__lesf2+0x5e>
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	42ac      	cmp	r4, r5
 8000bfa:	d2eb      	bcs.n	8000bd4 <__lesf2+0x58>
 8000bfc:	e7e0      	b.n	8000bc0 <__lesf2+0x44>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d1ea      	bne.n	8000bda <__lesf2+0x5e>
 8000c04:	e7e6      	b.n	8000bd4 <__lesf2+0x58>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d1e7      	bne.n	8000bda <__lesf2+0x5e>
 8000c0a:	e7f2      	b.n	8000bf2 <__lesf2+0x76>

08000c0c <__aeabi_fmul>:
 8000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0e:	464f      	mov	r7, r9
 8000c10:	4646      	mov	r6, r8
 8000c12:	46d6      	mov	lr, sl
 8000c14:	0044      	lsls	r4, r0, #1
 8000c16:	b5c0      	push	{r6, r7, lr}
 8000c18:	0246      	lsls	r6, r0, #9
 8000c1a:	1c0f      	adds	r7, r1, #0
 8000c1c:	0a76      	lsrs	r6, r6, #9
 8000c1e:	0e24      	lsrs	r4, r4, #24
 8000c20:	0fc5      	lsrs	r5, r0, #31
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_fmul+0x1c>
 8000c26:	e0da      	b.n	8000dde <__aeabi_fmul+0x1d2>
 8000c28:	2cff      	cmp	r4, #255	@ 0xff
 8000c2a:	d074      	beq.n	8000d16 <__aeabi_fmul+0x10a>
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	00f6      	lsls	r6, r6, #3
 8000c30:	04db      	lsls	r3, r3, #19
 8000c32:	431e      	orrs	r6, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	4699      	mov	r9, r3
 8000c38:	469a      	mov	sl, r3
 8000c3a:	3c7f      	subs	r4, #127	@ 0x7f
 8000c3c:	027b      	lsls	r3, r7, #9
 8000c3e:	0a5b      	lsrs	r3, r3, #9
 8000c40:	4698      	mov	r8, r3
 8000c42:	007b      	lsls	r3, r7, #1
 8000c44:	0e1b      	lsrs	r3, r3, #24
 8000c46:	0fff      	lsrs	r7, r7, #31
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d074      	beq.n	8000d36 <__aeabi_fmul+0x12a>
 8000c4c:	2bff      	cmp	r3, #255	@ 0xff
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fmul+0x46>
 8000c50:	e08e      	b.n	8000d70 <__aeabi_fmul+0x164>
 8000c52:	4642      	mov	r2, r8
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	00d2      	lsls	r2, r2, #3
 8000c58:	04c9      	lsls	r1, r1, #19
 8000c5a:	4311      	orrs	r1, r2
 8000c5c:	3b7f      	subs	r3, #127	@ 0x7f
 8000c5e:	002a      	movs	r2, r5
 8000c60:	18e4      	adds	r4, r4, r3
 8000c62:	464b      	mov	r3, r9
 8000c64:	407a      	eors	r2, r7
 8000c66:	4688      	mov	r8, r1
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	2b0a      	cmp	r3, #10
 8000c6c:	dc75      	bgt.n	8000d5a <__aeabi_fmul+0x14e>
 8000c6e:	464b      	mov	r3, r9
 8000c70:	2000      	movs	r0, #0
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	dd0f      	ble.n	8000c96 <__aeabi_fmul+0x8a>
 8000c76:	4649      	mov	r1, r9
 8000c78:	2301      	movs	r3, #1
 8000c7a:	408b      	lsls	r3, r1
 8000c7c:	21a6      	movs	r1, #166	@ 0xa6
 8000c7e:	00c9      	lsls	r1, r1, #3
 8000c80:	420b      	tst	r3, r1
 8000c82:	d169      	bne.n	8000d58 <__aeabi_fmul+0x14c>
 8000c84:	2190      	movs	r1, #144	@ 0x90
 8000c86:	0089      	lsls	r1, r1, #2
 8000c88:	420b      	tst	r3, r1
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fmul+0x82>
 8000c8c:	e100      	b.n	8000e90 <__aeabi_fmul+0x284>
 8000c8e:	2188      	movs	r1, #136	@ 0x88
 8000c90:	4219      	tst	r1, r3
 8000c92:	d000      	beq.n	8000c96 <__aeabi_fmul+0x8a>
 8000c94:	e0f5      	b.n	8000e82 <__aeabi_fmul+0x276>
 8000c96:	4641      	mov	r1, r8
 8000c98:	0409      	lsls	r1, r1, #16
 8000c9a:	0c09      	lsrs	r1, r1, #16
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	0008      	movs	r0, r1
 8000ca0:	0c35      	lsrs	r5, r6, #16
 8000ca2:	0436      	lsls	r6, r6, #16
 8000ca4:	0c1b      	lsrs	r3, r3, #16
 8000ca6:	0c36      	lsrs	r6, r6, #16
 8000ca8:	4370      	muls	r0, r6
 8000caa:	4369      	muls	r1, r5
 8000cac:	435e      	muls	r6, r3
 8000cae:	435d      	muls	r5, r3
 8000cb0:	1876      	adds	r6, r6, r1
 8000cb2:	0c03      	lsrs	r3, r0, #16
 8000cb4:	199b      	adds	r3, r3, r6
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	d903      	bls.n	8000cc2 <__aeabi_fmul+0xb6>
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	0249      	lsls	r1, r1, #9
 8000cbe:	468c      	mov	ip, r1
 8000cc0:	4465      	add	r5, ip
 8000cc2:	0400      	lsls	r0, r0, #16
 8000cc4:	0419      	lsls	r1, r3, #16
 8000cc6:	0c00      	lsrs	r0, r0, #16
 8000cc8:	1809      	adds	r1, r1, r0
 8000cca:	018e      	lsls	r6, r1, #6
 8000ccc:	1e70      	subs	r0, r6, #1
 8000cce:	4186      	sbcs	r6, r0
 8000cd0:	0c1b      	lsrs	r3, r3, #16
 8000cd2:	0e89      	lsrs	r1, r1, #26
 8000cd4:	195b      	adds	r3, r3, r5
 8000cd6:	430e      	orrs	r6, r1
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	431e      	orrs	r6, r3
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	d46c      	bmi.n	8000dba <__aeabi_fmul+0x1ae>
 8000ce0:	0023      	movs	r3, r4
 8000ce2:	337f      	adds	r3, #127	@ 0x7f
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	dc00      	bgt.n	8000cea <__aeabi_fmul+0xde>
 8000ce8:	e0b1      	b.n	8000e4e <__aeabi_fmul+0x242>
 8000cea:	0015      	movs	r5, r2
 8000cec:	0771      	lsls	r1, r6, #29
 8000cee:	d00b      	beq.n	8000d08 <__aeabi_fmul+0xfc>
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	0021      	movs	r1, r4
 8000cf4:	4030      	ands	r0, r6
 8000cf6:	2804      	cmp	r0, #4
 8000cf8:	d006      	beq.n	8000d08 <__aeabi_fmul+0xfc>
 8000cfa:	3604      	adds	r6, #4
 8000cfc:	0132      	lsls	r2, r6, #4
 8000cfe:	d503      	bpl.n	8000d08 <__aeabi_fmul+0xfc>
 8000d00:	4b6e      	ldr	r3, [pc, #440]	@ (8000ebc <__aeabi_fmul+0x2b0>)
 8000d02:	401e      	ands	r6, r3
 8000d04:	000b      	movs	r3, r1
 8000d06:	3380      	adds	r3, #128	@ 0x80
 8000d08:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d0a:	dd00      	ble.n	8000d0e <__aeabi_fmul+0x102>
 8000d0c:	e0bd      	b.n	8000e8a <__aeabi_fmul+0x27e>
 8000d0e:	01b2      	lsls	r2, r6, #6
 8000d10:	0a52      	lsrs	r2, r2, #9
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	e048      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d000      	beq.n	8000d1c <__aeabi_fmul+0x110>
 8000d1a:	e092      	b.n	8000e42 <__aeabi_fmul+0x236>
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	4699      	mov	r9, r3
 8000d20:	3b06      	subs	r3, #6
 8000d22:	469a      	mov	sl, r3
 8000d24:	027b      	lsls	r3, r7, #9
 8000d26:	0a5b      	lsrs	r3, r3, #9
 8000d28:	4698      	mov	r8, r3
 8000d2a:	007b      	lsls	r3, r7, #1
 8000d2c:	24ff      	movs	r4, #255	@ 0xff
 8000d2e:	0e1b      	lsrs	r3, r3, #24
 8000d30:	0fff      	lsrs	r7, r7, #31
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d18a      	bne.n	8000c4c <__aeabi_fmul+0x40>
 8000d36:	4642      	mov	r2, r8
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d164      	bne.n	8000e06 <__aeabi_fmul+0x1fa>
 8000d3c:	4649      	mov	r1, r9
 8000d3e:	3201      	adds	r2, #1
 8000d40:	4311      	orrs	r1, r2
 8000d42:	4689      	mov	r9, r1
 8000d44:	290a      	cmp	r1, #10
 8000d46:	dc08      	bgt.n	8000d5a <__aeabi_fmul+0x14e>
 8000d48:	407d      	eors	r5, r7
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	b2ea      	uxtb	r2, r5
 8000d4e:	2902      	cmp	r1, #2
 8000d50:	dc91      	bgt.n	8000c76 <__aeabi_fmul+0x6a>
 8000d52:	0015      	movs	r5, r2
 8000d54:	2200      	movs	r2, #0
 8000d56:	e027      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000d58:	0015      	movs	r5, r2
 8000d5a:	4653      	mov	r3, sl
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_fmul+0x156>
 8000d60:	e093      	b.n	8000e8a <__aeabi_fmul+0x27e>
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d01a      	beq.n	8000d9c <__aeabi_fmul+0x190>
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d12c      	bne.n	8000dc4 <__aeabi_fmul+0x1b8>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	e01b      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000d70:	4643      	mov	r3, r8
 8000d72:	34ff      	adds	r4, #255	@ 0xff
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d055      	beq.n	8000e24 <__aeabi_fmul+0x218>
 8000d78:	2103      	movs	r1, #3
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	0019      	movs	r1, r3
 8000d80:	2b0a      	cmp	r3, #10
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_fmul+0x17a>
 8000d84:	e092      	b.n	8000eac <__aeabi_fmul+0x2a0>
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d000      	beq.n	8000d8c <__aeabi_fmul+0x180>
 8000d8a:	e08c      	b.n	8000ea6 <__aeabi_fmul+0x29a>
 8000d8c:	2280      	movs	r2, #128	@ 0x80
 8000d8e:	03d2      	lsls	r2, r2, #15
 8000d90:	4216      	tst	r6, r2
 8000d92:	d003      	beq.n	8000d9c <__aeabi_fmul+0x190>
 8000d94:	4643      	mov	r3, r8
 8000d96:	4213      	tst	r3, r2
 8000d98:	d100      	bne.n	8000d9c <__aeabi_fmul+0x190>
 8000d9a:	e07d      	b.n	8000e98 <__aeabi_fmul+0x28c>
 8000d9c:	2280      	movs	r2, #128	@ 0x80
 8000d9e:	03d2      	lsls	r2, r2, #15
 8000da0:	4332      	orrs	r2, r6
 8000da2:	0252      	lsls	r2, r2, #9
 8000da4:	0a52      	lsrs	r2, r2, #9
 8000da6:	23ff      	movs	r3, #255	@ 0xff
 8000da8:	05d8      	lsls	r0, r3, #23
 8000daa:	07ed      	lsls	r5, r5, #31
 8000dac:	4310      	orrs	r0, r2
 8000dae:	4328      	orrs	r0, r5
 8000db0:	bce0      	pop	{r5, r6, r7}
 8000db2:	46ba      	mov	sl, r7
 8000db4:	46b1      	mov	r9, r6
 8000db6:	46a8      	mov	r8, r5
 8000db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dba:	2301      	movs	r3, #1
 8000dbc:	0015      	movs	r5, r2
 8000dbe:	0871      	lsrs	r1, r6, #1
 8000dc0:	401e      	ands	r6, r3
 8000dc2:	430e      	orrs	r6, r1
 8000dc4:	0023      	movs	r3, r4
 8000dc6:	3380      	adds	r3, #128	@ 0x80
 8000dc8:	1c61      	adds	r1, r4, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dd41      	ble.n	8000e52 <__aeabi_fmul+0x246>
 8000dce:	0772      	lsls	r2, r6, #29
 8000dd0:	d094      	beq.n	8000cfc <__aeabi_fmul+0xf0>
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	4032      	ands	r2, r6
 8000dd6:	2a04      	cmp	r2, #4
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_fmul+0x1d0>
 8000dda:	e78e      	b.n	8000cfa <__aeabi_fmul+0xee>
 8000ddc:	e78e      	b.n	8000cfc <__aeabi_fmul+0xf0>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	d105      	bne.n	8000dee <__aeabi_fmul+0x1e2>
 8000de2:	2304      	movs	r3, #4
 8000de4:	4699      	mov	r9, r3
 8000de6:	3b03      	subs	r3, #3
 8000de8:	2400      	movs	r4, #0
 8000dea:	469a      	mov	sl, r3
 8000dec:	e726      	b.n	8000c3c <__aeabi_fmul+0x30>
 8000dee:	0030      	movs	r0, r6
 8000df0:	f000 fb30 	bl	8001454 <__clzsi2>
 8000df4:	2476      	movs	r4, #118	@ 0x76
 8000df6:	1f43      	subs	r3, r0, #5
 8000df8:	409e      	lsls	r6, r3
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	4264      	negs	r4, r4
 8000dfe:	4699      	mov	r9, r3
 8000e00:	469a      	mov	sl, r3
 8000e02:	1a24      	subs	r4, r4, r0
 8000e04:	e71a      	b.n	8000c3c <__aeabi_fmul+0x30>
 8000e06:	4640      	mov	r0, r8
 8000e08:	f000 fb24 	bl	8001454 <__clzsi2>
 8000e0c:	464b      	mov	r3, r9
 8000e0e:	1a24      	subs	r4, r4, r0
 8000e10:	3c76      	subs	r4, #118	@ 0x76
 8000e12:	2b0a      	cmp	r3, #10
 8000e14:	dca1      	bgt.n	8000d5a <__aeabi_fmul+0x14e>
 8000e16:	4643      	mov	r3, r8
 8000e18:	3805      	subs	r0, #5
 8000e1a:	4083      	lsls	r3, r0
 8000e1c:	407d      	eors	r5, r7
 8000e1e:	4698      	mov	r8, r3
 8000e20:	b2ea      	uxtb	r2, r5
 8000e22:	e724      	b.n	8000c6e <__aeabi_fmul+0x62>
 8000e24:	464a      	mov	r2, r9
 8000e26:	3302      	adds	r3, #2
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	002a      	movs	r2, r5
 8000e2c:	407a      	eors	r2, r7
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	2b0a      	cmp	r3, #10
 8000e32:	dc92      	bgt.n	8000d5a <__aeabi_fmul+0x14e>
 8000e34:	4649      	mov	r1, r9
 8000e36:	0015      	movs	r5, r2
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	d026      	beq.n	8000e8a <__aeabi_fmul+0x27e>
 8000e3c:	4699      	mov	r9, r3
 8000e3e:	2002      	movs	r0, #2
 8000e40:	e719      	b.n	8000c76 <__aeabi_fmul+0x6a>
 8000e42:	230c      	movs	r3, #12
 8000e44:	4699      	mov	r9, r3
 8000e46:	3b09      	subs	r3, #9
 8000e48:	24ff      	movs	r4, #255	@ 0xff
 8000e4a:	469a      	mov	sl, r3
 8000e4c:	e6f6      	b.n	8000c3c <__aeabi_fmul+0x30>
 8000e4e:	0015      	movs	r5, r2
 8000e50:	0021      	movs	r1, r4
 8000e52:	2201      	movs	r2, #1
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b1b      	cmp	r3, #27
 8000e58:	dd00      	ble.n	8000e5c <__aeabi_fmul+0x250>
 8000e5a:	e786      	b.n	8000d6a <__aeabi_fmul+0x15e>
 8000e5c:	319e      	adds	r1, #158	@ 0x9e
 8000e5e:	0032      	movs	r2, r6
 8000e60:	408e      	lsls	r6, r1
 8000e62:	40da      	lsrs	r2, r3
 8000e64:	1e73      	subs	r3, r6, #1
 8000e66:	419e      	sbcs	r6, r3
 8000e68:	4332      	orrs	r2, r6
 8000e6a:	0753      	lsls	r3, r2, #29
 8000e6c:	d004      	beq.n	8000e78 <__aeabi_fmul+0x26c>
 8000e6e:	230f      	movs	r3, #15
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d000      	beq.n	8000e78 <__aeabi_fmul+0x26c>
 8000e76:	3204      	adds	r2, #4
 8000e78:	0153      	lsls	r3, r2, #5
 8000e7a:	d510      	bpl.n	8000e9e <__aeabi_fmul+0x292>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	e792      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000e82:	003d      	movs	r5, r7
 8000e84:	4646      	mov	r6, r8
 8000e86:	4682      	mov	sl, r0
 8000e88:	e767      	b.n	8000d5a <__aeabi_fmul+0x14e>
 8000e8a:	23ff      	movs	r3, #255	@ 0xff
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e78b      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000e90:	2280      	movs	r2, #128	@ 0x80
 8000e92:	2500      	movs	r5, #0
 8000e94:	03d2      	lsls	r2, r2, #15
 8000e96:	e786      	b.n	8000da6 <__aeabi_fmul+0x19a>
 8000e98:	003d      	movs	r5, r7
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	e783      	b.n	8000da6 <__aeabi_fmul+0x19a>
 8000e9e:	0192      	lsls	r2, r2, #6
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	0a52      	lsrs	r2, r2, #9
 8000ea4:	e780      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000ea6:	003d      	movs	r5, r7
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e777      	b.n	8000d9c <__aeabi_fmul+0x190>
 8000eac:	002a      	movs	r2, r5
 8000eae:	2301      	movs	r3, #1
 8000eb0:	407a      	eors	r2, r7
 8000eb2:	408b      	lsls	r3, r1
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	e6e9      	b.n	8000c8e <__aeabi_fmul+0x82>
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	f7ffffff 	.word	0xf7ffffff

08000ec0 <__aeabi_fsub>:
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	4647      	mov	r7, r8
 8000ec4:	46ce      	mov	lr, r9
 8000ec6:	0243      	lsls	r3, r0, #9
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	0a5f      	lsrs	r7, r3, #9
 8000ecc:	099b      	lsrs	r3, r3, #6
 8000ece:	0045      	lsls	r5, r0, #1
 8000ed0:	004a      	lsls	r2, r1, #1
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	024b      	lsls	r3, r1, #9
 8000ed6:	0fc4      	lsrs	r4, r0, #31
 8000ed8:	0fce      	lsrs	r6, r1, #31
 8000eda:	0e2d      	lsrs	r5, r5, #24
 8000edc:	0a58      	lsrs	r0, r3, #9
 8000ede:	0e12      	lsrs	r2, r2, #24
 8000ee0:	0999      	lsrs	r1, r3, #6
 8000ee2:	2aff      	cmp	r2, #255	@ 0xff
 8000ee4:	d06b      	beq.n	8000fbe <__aeabi_fsub+0xfe>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	405e      	eors	r6, r3
 8000eea:	1aab      	subs	r3, r5, r2
 8000eec:	42b4      	cmp	r4, r6
 8000eee:	d04b      	beq.n	8000f88 <__aeabi_fsub+0xc8>
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dc00      	bgt.n	8000ef6 <__aeabi_fsub+0x36>
 8000ef4:	e0ff      	b.n	80010f6 <__aeabi_fsub+0x236>
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x3c>
 8000efa:	e088      	b.n	800100e <__aeabi_fsub+0x14e>
 8000efc:	2dff      	cmp	r5, #255	@ 0xff
 8000efe:	d100      	bne.n	8000f02 <__aeabi_fsub+0x42>
 8000f00:	e0ef      	b.n	80010e2 <__aeabi_fsub+0x222>
 8000f02:	2280      	movs	r2, #128	@ 0x80
 8000f04:	04d2      	lsls	r2, r2, #19
 8000f06:	4311      	orrs	r1, r2
 8000f08:	2001      	movs	r0, #1
 8000f0a:	2b1b      	cmp	r3, #27
 8000f0c:	dc08      	bgt.n	8000f20 <__aeabi_fsub+0x60>
 8000f0e:	0008      	movs	r0, r1
 8000f10:	2220      	movs	r2, #32
 8000f12:	40d8      	lsrs	r0, r3
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4099      	lsls	r1, r3
 8000f18:	000b      	movs	r3, r1
 8000f1a:	1e5a      	subs	r2, r3, #1
 8000f1c:	4193      	sbcs	r3, r2
 8000f1e:	4318      	orrs	r0, r3
 8000f20:	4663      	mov	r3, ip
 8000f22:	1a1b      	subs	r3, r3, r0
 8000f24:	469c      	mov	ip, r3
 8000f26:	4663      	mov	r3, ip
 8000f28:	015b      	lsls	r3, r3, #5
 8000f2a:	d400      	bmi.n	8000f2e <__aeabi_fsub+0x6e>
 8000f2c:	e0cd      	b.n	80010ca <__aeabi_fsub+0x20a>
 8000f2e:	4663      	mov	r3, ip
 8000f30:	019f      	lsls	r7, r3, #6
 8000f32:	09bf      	lsrs	r7, r7, #6
 8000f34:	0038      	movs	r0, r7
 8000f36:	f000 fa8d 	bl	8001454 <__clzsi2>
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	3805      	subs	r0, #5
 8000f3e:	4083      	lsls	r3, r0
 8000f40:	4285      	cmp	r5, r0
 8000f42:	dc00      	bgt.n	8000f46 <__aeabi_fsub+0x86>
 8000f44:	e0a2      	b.n	800108c <__aeabi_fsub+0x1cc>
 8000f46:	4ab7      	ldr	r2, [pc, #732]	@ (8001224 <__aeabi_fsub+0x364>)
 8000f48:	1a2d      	subs	r5, r5, r0
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	4694      	mov	ip, r2
 8000f4e:	075a      	lsls	r2, r3, #29
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x94>
 8000f52:	e0c3      	b.n	80010dc <__aeabi_fsub+0x21c>
 8000f54:	220f      	movs	r2, #15
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_fsub+0x9e>
 8000f5c:	e0be      	b.n	80010dc <__aeabi_fsub+0x21c>
 8000f5e:	2304      	movs	r3, #4
 8000f60:	4698      	mov	r8, r3
 8000f62:	44c4      	add	ip, r8
 8000f64:	4663      	mov	r3, ip
 8000f66:	015b      	lsls	r3, r3, #5
 8000f68:	d400      	bmi.n	8000f6c <__aeabi_fsub+0xac>
 8000f6a:	e0b7      	b.n	80010dc <__aeabi_fsub+0x21c>
 8000f6c:	1c68      	adds	r0, r5, #1
 8000f6e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f70:	d000      	beq.n	8000f74 <__aeabi_fsub+0xb4>
 8000f72:	e0a5      	b.n	80010c0 <__aeabi_fsub+0x200>
 8000f74:	20ff      	movs	r0, #255	@ 0xff
 8000f76:	2200      	movs	r2, #0
 8000f78:	05c0      	lsls	r0, r0, #23
 8000f7a:	4310      	orrs	r0, r2
 8000f7c:	07e4      	lsls	r4, r4, #31
 8000f7e:	4320      	orrs	r0, r4
 8000f80:	bcc0      	pop	{r6, r7}
 8000f82:	46b9      	mov	r9, r7
 8000f84:	46b0      	mov	r8, r6
 8000f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dc00      	bgt.n	8000f8e <__aeabi_fsub+0xce>
 8000f8c:	e1eb      	b.n	8001366 <__aeabi_fsub+0x4a6>
 8000f8e:	2a00      	cmp	r2, #0
 8000f90:	d046      	beq.n	8001020 <__aeabi_fsub+0x160>
 8000f92:	2dff      	cmp	r5, #255	@ 0xff
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0xd8>
 8000f96:	e0a4      	b.n	80010e2 <__aeabi_fsub+0x222>
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	04d2      	lsls	r2, r2, #19
 8000f9c:	4311      	orrs	r1, r2
 8000f9e:	2b1b      	cmp	r3, #27
 8000fa0:	dc00      	bgt.n	8000fa4 <__aeabi_fsub+0xe4>
 8000fa2:	e0fb      	b.n	800119c <__aeabi_fsub+0x2dc>
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	4698      	mov	r8, r3
 8000fa8:	002b      	movs	r3, r5
 8000faa:	44c4      	add	ip, r8
 8000fac:	4662      	mov	r2, ip
 8000fae:	08d7      	lsrs	r7, r2, #3
 8000fb0:	2bff      	cmp	r3, #255	@ 0xff
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_fsub+0xf6>
 8000fb4:	e095      	b.n	80010e2 <__aeabi_fsub+0x222>
 8000fb6:	027a      	lsls	r2, r7, #9
 8000fb8:	0a52      	lsrs	r2, r2, #9
 8000fba:	b2d8      	uxtb	r0, r3
 8000fbc:	e7dc      	b.n	8000f78 <__aeabi_fsub+0xb8>
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	3bff      	subs	r3, #255	@ 0xff
 8000fc2:	4699      	mov	r9, r3
 8000fc4:	2900      	cmp	r1, #0
 8000fc6:	d118      	bne.n	8000ffa <__aeabi_fsub+0x13a>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	405e      	eors	r6, r3
 8000fcc:	42b4      	cmp	r4, r6
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_fsub+0x112>
 8000fd0:	e0ca      	b.n	8001168 <__aeabi_fsub+0x2a8>
 8000fd2:	464b      	mov	r3, r9
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d02d      	beq.n	8001034 <__aeabi_fsub+0x174>
 8000fd8:	2d00      	cmp	r5, #0
 8000fda:	d000      	beq.n	8000fde <__aeabi_fsub+0x11e>
 8000fdc:	e13c      	b.n	8001258 <__aeabi_fsub+0x398>
 8000fde:	23ff      	movs	r3, #255	@ 0xff
 8000fe0:	4664      	mov	r4, ip
 8000fe2:	2c00      	cmp	r4, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_fsub+0x128>
 8000fe6:	e15f      	b.n	80012a8 <__aeabi_fsub+0x3e8>
 8000fe8:	1e5d      	subs	r5, r3, #1
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_fsub+0x130>
 8000fee:	e174      	b.n	80012da <__aeabi_fsub+0x41a>
 8000ff0:	0034      	movs	r4, r6
 8000ff2:	2bff      	cmp	r3, #255	@ 0xff
 8000ff4:	d074      	beq.n	80010e0 <__aeabi_fsub+0x220>
 8000ff6:	002b      	movs	r3, r5
 8000ff8:	e103      	b.n	8001202 <__aeabi_fsub+0x342>
 8000ffa:	42b4      	cmp	r4, r6
 8000ffc:	d100      	bne.n	8001000 <__aeabi_fsub+0x140>
 8000ffe:	e09c      	b.n	800113a <__aeabi_fsub+0x27a>
 8001000:	2b00      	cmp	r3, #0
 8001002:	d017      	beq.n	8001034 <__aeabi_fsub+0x174>
 8001004:	2d00      	cmp	r5, #0
 8001006:	d0ea      	beq.n	8000fde <__aeabi_fsub+0x11e>
 8001008:	0007      	movs	r7, r0
 800100a:	0034      	movs	r4, r6
 800100c:	e06c      	b.n	80010e8 <__aeabi_fsub+0x228>
 800100e:	2900      	cmp	r1, #0
 8001010:	d0cc      	beq.n	8000fac <__aeabi_fsub+0xec>
 8001012:	1e5a      	subs	r2, r3, #1
 8001014:	2b01      	cmp	r3, #1
 8001016:	d02b      	beq.n	8001070 <__aeabi_fsub+0x1b0>
 8001018:	2bff      	cmp	r3, #255	@ 0xff
 800101a:	d062      	beq.n	80010e2 <__aeabi_fsub+0x222>
 800101c:	0013      	movs	r3, r2
 800101e:	e773      	b.n	8000f08 <__aeabi_fsub+0x48>
 8001020:	2900      	cmp	r1, #0
 8001022:	d0c3      	beq.n	8000fac <__aeabi_fsub+0xec>
 8001024:	1e5a      	subs	r2, r3, #1
 8001026:	2b01      	cmp	r3, #1
 8001028:	d100      	bne.n	800102c <__aeabi_fsub+0x16c>
 800102a:	e11e      	b.n	800126a <__aeabi_fsub+0x3aa>
 800102c:	2bff      	cmp	r3, #255	@ 0xff
 800102e:	d058      	beq.n	80010e2 <__aeabi_fsub+0x222>
 8001030:	0013      	movs	r3, r2
 8001032:	e7b4      	b.n	8000f9e <__aeabi_fsub+0xde>
 8001034:	22fe      	movs	r2, #254	@ 0xfe
 8001036:	1c6b      	adds	r3, r5, #1
 8001038:	421a      	tst	r2, r3
 800103a:	d10d      	bne.n	8001058 <__aeabi_fsub+0x198>
 800103c:	2d00      	cmp	r5, #0
 800103e:	d060      	beq.n	8001102 <__aeabi_fsub+0x242>
 8001040:	4663      	mov	r3, ip
 8001042:	2b00      	cmp	r3, #0
 8001044:	d000      	beq.n	8001048 <__aeabi_fsub+0x188>
 8001046:	e120      	b.n	800128a <__aeabi_fsub+0x3ca>
 8001048:	2900      	cmp	r1, #0
 800104a:	d000      	beq.n	800104e <__aeabi_fsub+0x18e>
 800104c:	e128      	b.n	80012a0 <__aeabi_fsub+0x3e0>
 800104e:	2280      	movs	r2, #128	@ 0x80
 8001050:	2400      	movs	r4, #0
 8001052:	20ff      	movs	r0, #255	@ 0xff
 8001054:	03d2      	lsls	r2, r2, #15
 8001056:	e78f      	b.n	8000f78 <__aeabi_fsub+0xb8>
 8001058:	4663      	mov	r3, ip
 800105a:	1a5f      	subs	r7, r3, r1
 800105c:	017b      	lsls	r3, r7, #5
 800105e:	d500      	bpl.n	8001062 <__aeabi_fsub+0x1a2>
 8001060:	e0fe      	b.n	8001260 <__aeabi_fsub+0x3a0>
 8001062:	2f00      	cmp	r7, #0
 8001064:	d000      	beq.n	8001068 <__aeabi_fsub+0x1a8>
 8001066:	e765      	b.n	8000f34 <__aeabi_fsub+0x74>
 8001068:	2400      	movs	r4, #0
 800106a:	2000      	movs	r0, #0
 800106c:	2200      	movs	r2, #0
 800106e:	e783      	b.n	8000f78 <__aeabi_fsub+0xb8>
 8001070:	4663      	mov	r3, ip
 8001072:	1a59      	subs	r1, r3, r1
 8001074:	014b      	lsls	r3, r1, #5
 8001076:	d400      	bmi.n	800107a <__aeabi_fsub+0x1ba>
 8001078:	e119      	b.n	80012ae <__aeabi_fsub+0x3ee>
 800107a:	018f      	lsls	r7, r1, #6
 800107c:	09bf      	lsrs	r7, r7, #6
 800107e:	0038      	movs	r0, r7
 8001080:	f000 f9e8 	bl	8001454 <__clzsi2>
 8001084:	003b      	movs	r3, r7
 8001086:	3805      	subs	r0, #5
 8001088:	4083      	lsls	r3, r0
 800108a:	2501      	movs	r5, #1
 800108c:	2220      	movs	r2, #32
 800108e:	1b40      	subs	r0, r0, r5
 8001090:	3001      	adds	r0, #1
 8001092:	1a12      	subs	r2, r2, r0
 8001094:	0019      	movs	r1, r3
 8001096:	4093      	lsls	r3, r2
 8001098:	40c1      	lsrs	r1, r0
 800109a:	1e5a      	subs	r2, r3, #1
 800109c:	4193      	sbcs	r3, r2
 800109e:	4319      	orrs	r1, r3
 80010a0:	468c      	mov	ip, r1
 80010a2:	1e0b      	subs	r3, r1, #0
 80010a4:	d0e1      	beq.n	800106a <__aeabi_fsub+0x1aa>
 80010a6:	075b      	lsls	r3, r3, #29
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x1ec>
 80010aa:	e152      	b.n	8001352 <__aeabi_fsub+0x492>
 80010ac:	230f      	movs	r3, #15
 80010ae:	2500      	movs	r5, #0
 80010b0:	400b      	ands	r3, r1
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d000      	beq.n	80010b8 <__aeabi_fsub+0x1f8>
 80010b6:	e752      	b.n	8000f5e <__aeabi_fsub+0x9e>
 80010b8:	2001      	movs	r0, #1
 80010ba:	014a      	lsls	r2, r1, #5
 80010bc:	d400      	bmi.n	80010c0 <__aeabi_fsub+0x200>
 80010be:	e092      	b.n	80011e6 <__aeabi_fsub+0x326>
 80010c0:	b2c0      	uxtb	r0, r0
 80010c2:	4663      	mov	r3, ip
 80010c4:	019a      	lsls	r2, r3, #6
 80010c6:	0a52      	lsrs	r2, r2, #9
 80010c8:	e756      	b.n	8000f78 <__aeabi_fsub+0xb8>
 80010ca:	4663      	mov	r3, ip
 80010cc:	075b      	lsls	r3, r3, #29
 80010ce:	d005      	beq.n	80010dc <__aeabi_fsub+0x21c>
 80010d0:	230f      	movs	r3, #15
 80010d2:	4662      	mov	r2, ip
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d000      	beq.n	80010dc <__aeabi_fsub+0x21c>
 80010da:	e740      	b.n	8000f5e <__aeabi_fsub+0x9e>
 80010dc:	002b      	movs	r3, r5
 80010de:	e765      	b.n	8000fac <__aeabi_fsub+0xec>
 80010e0:	0007      	movs	r7, r0
 80010e2:	2f00      	cmp	r7, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_fsub+0x228>
 80010e6:	e745      	b.n	8000f74 <__aeabi_fsub+0xb4>
 80010e8:	2280      	movs	r2, #128	@ 0x80
 80010ea:	03d2      	lsls	r2, r2, #15
 80010ec:	433a      	orrs	r2, r7
 80010ee:	0252      	lsls	r2, r2, #9
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	0a52      	lsrs	r2, r2, #9
 80010f4:	e740      	b.n	8000f78 <__aeabi_fsub+0xb8>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d179      	bne.n	80011ee <__aeabi_fsub+0x32e>
 80010fa:	22fe      	movs	r2, #254	@ 0xfe
 80010fc:	1c6b      	adds	r3, r5, #1
 80010fe:	421a      	tst	r2, r3
 8001100:	d1aa      	bne.n	8001058 <__aeabi_fsub+0x198>
 8001102:	4663      	mov	r3, ip
 8001104:	2b00      	cmp	r3, #0
 8001106:	d100      	bne.n	800110a <__aeabi_fsub+0x24a>
 8001108:	e0f5      	b.n	80012f6 <__aeabi_fsub+0x436>
 800110a:	2900      	cmp	r1, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_fsub+0x250>
 800110e:	e0d1      	b.n	80012b4 <__aeabi_fsub+0x3f4>
 8001110:	1a5f      	subs	r7, r3, r1
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	04db      	lsls	r3, r3, #19
 8001116:	421f      	tst	r7, r3
 8001118:	d100      	bne.n	800111c <__aeabi_fsub+0x25c>
 800111a:	e10e      	b.n	800133a <__aeabi_fsub+0x47a>
 800111c:	4662      	mov	r2, ip
 800111e:	2401      	movs	r4, #1
 8001120:	1a8a      	subs	r2, r1, r2
 8001122:	4694      	mov	ip, r2
 8001124:	2000      	movs	r0, #0
 8001126:	4034      	ands	r4, r6
 8001128:	2a00      	cmp	r2, #0
 800112a:	d100      	bne.n	800112e <__aeabi_fsub+0x26e>
 800112c:	e724      	b.n	8000f78 <__aeabi_fsub+0xb8>
 800112e:	2001      	movs	r0, #1
 8001130:	421a      	tst	r2, r3
 8001132:	d1c6      	bne.n	80010c2 <__aeabi_fsub+0x202>
 8001134:	2300      	movs	r3, #0
 8001136:	08d7      	lsrs	r7, r2, #3
 8001138:	e73d      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d017      	beq.n	800116e <__aeabi_fsub+0x2ae>
 800113e:	2d00      	cmp	r5, #0
 8001140:	d000      	beq.n	8001144 <__aeabi_fsub+0x284>
 8001142:	e0af      	b.n	80012a4 <__aeabi_fsub+0x3e4>
 8001144:	23ff      	movs	r3, #255	@ 0xff
 8001146:	4665      	mov	r5, ip
 8001148:	2d00      	cmp	r5, #0
 800114a:	d100      	bne.n	800114e <__aeabi_fsub+0x28e>
 800114c:	e0ad      	b.n	80012aa <__aeabi_fsub+0x3ea>
 800114e:	1e5e      	subs	r6, r3, #1
 8001150:	2b01      	cmp	r3, #1
 8001152:	d100      	bne.n	8001156 <__aeabi_fsub+0x296>
 8001154:	e089      	b.n	800126a <__aeabi_fsub+0x3aa>
 8001156:	2bff      	cmp	r3, #255	@ 0xff
 8001158:	d0c2      	beq.n	80010e0 <__aeabi_fsub+0x220>
 800115a:	2e1b      	cmp	r6, #27
 800115c:	dc00      	bgt.n	8001160 <__aeabi_fsub+0x2a0>
 800115e:	e0ab      	b.n	80012b8 <__aeabi_fsub+0x3f8>
 8001160:	1d4b      	adds	r3, r1, #5
 8001162:	469c      	mov	ip, r3
 8001164:	0013      	movs	r3, r2
 8001166:	e721      	b.n	8000fac <__aeabi_fsub+0xec>
 8001168:	464b      	mov	r3, r9
 800116a:	2b00      	cmp	r3, #0
 800116c:	d170      	bne.n	8001250 <__aeabi_fsub+0x390>
 800116e:	22fe      	movs	r2, #254	@ 0xfe
 8001170:	1c6b      	adds	r3, r5, #1
 8001172:	421a      	tst	r2, r3
 8001174:	d15e      	bne.n	8001234 <__aeabi_fsub+0x374>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d000      	beq.n	800117c <__aeabi_fsub+0x2bc>
 800117a:	e0c3      	b.n	8001304 <__aeabi_fsub+0x444>
 800117c:	4663      	mov	r3, ip
 800117e:	2b00      	cmp	r3, #0
 8001180:	d100      	bne.n	8001184 <__aeabi_fsub+0x2c4>
 8001182:	e0d0      	b.n	8001326 <__aeabi_fsub+0x466>
 8001184:	2900      	cmp	r1, #0
 8001186:	d100      	bne.n	800118a <__aeabi_fsub+0x2ca>
 8001188:	e094      	b.n	80012b4 <__aeabi_fsub+0x3f4>
 800118a:	000a      	movs	r2, r1
 800118c:	4462      	add	r2, ip
 800118e:	0153      	lsls	r3, r2, #5
 8001190:	d400      	bmi.n	8001194 <__aeabi_fsub+0x2d4>
 8001192:	e0d8      	b.n	8001346 <__aeabi_fsub+0x486>
 8001194:	0192      	lsls	r2, r2, #6
 8001196:	2001      	movs	r0, #1
 8001198:	0a52      	lsrs	r2, r2, #9
 800119a:	e6ed      	b.n	8000f78 <__aeabi_fsub+0xb8>
 800119c:	0008      	movs	r0, r1
 800119e:	2220      	movs	r2, #32
 80011a0:	40d8      	lsrs	r0, r3
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	4099      	lsls	r1, r3
 80011a6:	000b      	movs	r3, r1
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	4193      	sbcs	r3, r2
 80011ac:	4303      	orrs	r3, r0
 80011ae:	449c      	add	ip, r3
 80011b0:	4663      	mov	r3, ip
 80011b2:	015b      	lsls	r3, r3, #5
 80011b4:	d589      	bpl.n	80010ca <__aeabi_fsub+0x20a>
 80011b6:	3501      	adds	r5, #1
 80011b8:	2dff      	cmp	r5, #255	@ 0xff
 80011ba:	d100      	bne.n	80011be <__aeabi_fsub+0x2fe>
 80011bc:	e6da      	b.n	8000f74 <__aeabi_fsub+0xb4>
 80011be:	4662      	mov	r2, ip
 80011c0:	2301      	movs	r3, #1
 80011c2:	4919      	ldr	r1, [pc, #100]	@ (8001228 <__aeabi_fsub+0x368>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	0852      	lsrs	r2, r2, #1
 80011c8:	400a      	ands	r2, r1
 80011ca:	431a      	orrs	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	4694      	mov	ip, r2
 80011d0:	075b      	lsls	r3, r3, #29
 80011d2:	d004      	beq.n	80011de <__aeabi_fsub+0x31e>
 80011d4:	230f      	movs	r3, #15
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d000      	beq.n	80011de <__aeabi_fsub+0x31e>
 80011dc:	e6bf      	b.n	8000f5e <__aeabi_fsub+0x9e>
 80011de:	4663      	mov	r3, ip
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	d500      	bpl.n	80011e6 <__aeabi_fsub+0x326>
 80011e4:	e6c2      	b.n	8000f6c <__aeabi_fsub+0xac>
 80011e6:	4663      	mov	r3, ip
 80011e8:	08df      	lsrs	r7, r3, #3
 80011ea:	002b      	movs	r3, r5
 80011ec:	e6e3      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 80011ee:	1b53      	subs	r3, r2, r5
 80011f0:	2d00      	cmp	r5, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_fsub+0x336>
 80011f4:	e6f4      	b.n	8000fe0 <__aeabi_fsub+0x120>
 80011f6:	2080      	movs	r0, #128	@ 0x80
 80011f8:	4664      	mov	r4, ip
 80011fa:	04c0      	lsls	r0, r0, #19
 80011fc:	4304      	orrs	r4, r0
 80011fe:	46a4      	mov	ip, r4
 8001200:	0034      	movs	r4, r6
 8001202:	2001      	movs	r0, #1
 8001204:	2b1b      	cmp	r3, #27
 8001206:	dc09      	bgt.n	800121c <__aeabi_fsub+0x35c>
 8001208:	2520      	movs	r5, #32
 800120a:	4660      	mov	r0, ip
 800120c:	40d8      	lsrs	r0, r3
 800120e:	1aeb      	subs	r3, r5, r3
 8001210:	4665      	mov	r5, ip
 8001212:	409d      	lsls	r5, r3
 8001214:	002b      	movs	r3, r5
 8001216:	1e5d      	subs	r5, r3, #1
 8001218:	41ab      	sbcs	r3, r5
 800121a:	4318      	orrs	r0, r3
 800121c:	1a0b      	subs	r3, r1, r0
 800121e:	469c      	mov	ip, r3
 8001220:	0015      	movs	r5, r2
 8001222:	e680      	b.n	8000f26 <__aeabi_fsub+0x66>
 8001224:	fbffffff 	.word	0xfbffffff
 8001228:	7dffffff 	.word	0x7dffffff
 800122c:	22fe      	movs	r2, #254	@ 0xfe
 800122e:	1c6b      	adds	r3, r5, #1
 8001230:	4213      	tst	r3, r2
 8001232:	d0a3      	beq.n	800117c <__aeabi_fsub+0x2bc>
 8001234:	2bff      	cmp	r3, #255	@ 0xff
 8001236:	d100      	bne.n	800123a <__aeabi_fsub+0x37a>
 8001238:	e69c      	b.n	8000f74 <__aeabi_fsub+0xb4>
 800123a:	4461      	add	r1, ip
 800123c:	0849      	lsrs	r1, r1, #1
 800123e:	074a      	lsls	r2, r1, #29
 8001240:	d049      	beq.n	80012d6 <__aeabi_fsub+0x416>
 8001242:	220f      	movs	r2, #15
 8001244:	400a      	ands	r2, r1
 8001246:	2a04      	cmp	r2, #4
 8001248:	d045      	beq.n	80012d6 <__aeabi_fsub+0x416>
 800124a:	1d0a      	adds	r2, r1, #4
 800124c:	4694      	mov	ip, r2
 800124e:	e6ad      	b.n	8000fac <__aeabi_fsub+0xec>
 8001250:	2d00      	cmp	r5, #0
 8001252:	d100      	bne.n	8001256 <__aeabi_fsub+0x396>
 8001254:	e776      	b.n	8001144 <__aeabi_fsub+0x284>
 8001256:	e68d      	b.n	8000f74 <__aeabi_fsub+0xb4>
 8001258:	0034      	movs	r4, r6
 800125a:	20ff      	movs	r0, #255	@ 0xff
 800125c:	2200      	movs	r2, #0
 800125e:	e68b      	b.n	8000f78 <__aeabi_fsub+0xb8>
 8001260:	4663      	mov	r3, ip
 8001262:	2401      	movs	r4, #1
 8001264:	1acf      	subs	r7, r1, r3
 8001266:	4034      	ands	r4, r6
 8001268:	e664      	b.n	8000f34 <__aeabi_fsub+0x74>
 800126a:	4461      	add	r1, ip
 800126c:	014b      	lsls	r3, r1, #5
 800126e:	d56d      	bpl.n	800134c <__aeabi_fsub+0x48c>
 8001270:	0848      	lsrs	r0, r1, #1
 8001272:	4944      	ldr	r1, [pc, #272]	@ (8001384 <__aeabi_fsub+0x4c4>)
 8001274:	4001      	ands	r1, r0
 8001276:	0743      	lsls	r3, r0, #29
 8001278:	d02c      	beq.n	80012d4 <__aeabi_fsub+0x414>
 800127a:	230f      	movs	r3, #15
 800127c:	4003      	ands	r3, r0
 800127e:	2b04      	cmp	r3, #4
 8001280:	d028      	beq.n	80012d4 <__aeabi_fsub+0x414>
 8001282:	1d0b      	adds	r3, r1, #4
 8001284:	469c      	mov	ip, r3
 8001286:	2302      	movs	r3, #2
 8001288:	e690      	b.n	8000fac <__aeabi_fsub+0xec>
 800128a:	2900      	cmp	r1, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_fsub+0x3d0>
 800128e:	e72b      	b.n	80010e8 <__aeabi_fsub+0x228>
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	03db      	lsls	r3, r3, #15
 8001294:	429f      	cmp	r7, r3
 8001296:	d200      	bcs.n	800129a <__aeabi_fsub+0x3da>
 8001298:	e726      	b.n	80010e8 <__aeabi_fsub+0x228>
 800129a:	4298      	cmp	r0, r3
 800129c:	d300      	bcc.n	80012a0 <__aeabi_fsub+0x3e0>
 800129e:	e723      	b.n	80010e8 <__aeabi_fsub+0x228>
 80012a0:	2401      	movs	r4, #1
 80012a2:	4034      	ands	r4, r6
 80012a4:	0007      	movs	r7, r0
 80012a6:	e71f      	b.n	80010e8 <__aeabi_fsub+0x228>
 80012a8:	0034      	movs	r4, r6
 80012aa:	468c      	mov	ip, r1
 80012ac:	e67e      	b.n	8000fac <__aeabi_fsub+0xec>
 80012ae:	2301      	movs	r3, #1
 80012b0:	08cf      	lsrs	r7, r1, #3
 80012b2:	e680      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 80012b4:	2300      	movs	r3, #0
 80012b6:	e67e      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 80012b8:	2020      	movs	r0, #32
 80012ba:	4665      	mov	r5, ip
 80012bc:	1b80      	subs	r0, r0, r6
 80012be:	4085      	lsls	r5, r0
 80012c0:	4663      	mov	r3, ip
 80012c2:	0028      	movs	r0, r5
 80012c4:	40f3      	lsrs	r3, r6
 80012c6:	1e45      	subs	r5, r0, #1
 80012c8:	41a8      	sbcs	r0, r5
 80012ca:	4303      	orrs	r3, r0
 80012cc:	469c      	mov	ip, r3
 80012ce:	0015      	movs	r5, r2
 80012d0:	448c      	add	ip, r1
 80012d2:	e76d      	b.n	80011b0 <__aeabi_fsub+0x2f0>
 80012d4:	2302      	movs	r3, #2
 80012d6:	08cf      	lsrs	r7, r1, #3
 80012d8:	e66d      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 80012da:	1b0f      	subs	r7, r1, r4
 80012dc:	017b      	lsls	r3, r7, #5
 80012de:	d528      	bpl.n	8001332 <__aeabi_fsub+0x472>
 80012e0:	01bf      	lsls	r7, r7, #6
 80012e2:	09bf      	lsrs	r7, r7, #6
 80012e4:	0038      	movs	r0, r7
 80012e6:	f000 f8b5 	bl	8001454 <__clzsi2>
 80012ea:	003b      	movs	r3, r7
 80012ec:	3805      	subs	r0, #5
 80012ee:	4083      	lsls	r3, r0
 80012f0:	0034      	movs	r4, r6
 80012f2:	2501      	movs	r5, #1
 80012f4:	e6ca      	b.n	800108c <__aeabi_fsub+0x1cc>
 80012f6:	2900      	cmp	r1, #0
 80012f8:	d100      	bne.n	80012fc <__aeabi_fsub+0x43c>
 80012fa:	e6b5      	b.n	8001068 <__aeabi_fsub+0x1a8>
 80012fc:	2401      	movs	r4, #1
 80012fe:	0007      	movs	r7, r0
 8001300:	4034      	ands	r4, r6
 8001302:	e658      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001304:	4663      	mov	r3, ip
 8001306:	2b00      	cmp	r3, #0
 8001308:	d100      	bne.n	800130c <__aeabi_fsub+0x44c>
 800130a:	e6e9      	b.n	80010e0 <__aeabi_fsub+0x220>
 800130c:	2900      	cmp	r1, #0
 800130e:	d100      	bne.n	8001312 <__aeabi_fsub+0x452>
 8001310:	e6ea      	b.n	80010e8 <__aeabi_fsub+0x228>
 8001312:	2380      	movs	r3, #128	@ 0x80
 8001314:	03db      	lsls	r3, r3, #15
 8001316:	429f      	cmp	r7, r3
 8001318:	d200      	bcs.n	800131c <__aeabi_fsub+0x45c>
 800131a:	e6e5      	b.n	80010e8 <__aeabi_fsub+0x228>
 800131c:	4298      	cmp	r0, r3
 800131e:	d300      	bcc.n	8001322 <__aeabi_fsub+0x462>
 8001320:	e6e2      	b.n	80010e8 <__aeabi_fsub+0x228>
 8001322:	0007      	movs	r7, r0
 8001324:	e6e0      	b.n	80010e8 <__aeabi_fsub+0x228>
 8001326:	2900      	cmp	r1, #0
 8001328:	d100      	bne.n	800132c <__aeabi_fsub+0x46c>
 800132a:	e69e      	b.n	800106a <__aeabi_fsub+0x1aa>
 800132c:	2300      	movs	r3, #0
 800132e:	08cf      	lsrs	r7, r1, #3
 8001330:	e641      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001332:	0034      	movs	r4, r6
 8001334:	2301      	movs	r3, #1
 8001336:	08ff      	lsrs	r7, r7, #3
 8001338:	e63d      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 800133a:	2f00      	cmp	r7, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_fsub+0x480>
 800133e:	e693      	b.n	8001068 <__aeabi_fsub+0x1a8>
 8001340:	2300      	movs	r3, #0
 8001342:	08ff      	lsrs	r7, r7, #3
 8001344:	e637      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001346:	2300      	movs	r3, #0
 8001348:	08d7      	lsrs	r7, r2, #3
 800134a:	e634      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 800134c:	2301      	movs	r3, #1
 800134e:	08cf      	lsrs	r7, r1, #3
 8001350:	e631      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001352:	2280      	movs	r2, #128	@ 0x80
 8001354:	000b      	movs	r3, r1
 8001356:	04d2      	lsls	r2, r2, #19
 8001358:	2001      	movs	r0, #1
 800135a:	4013      	ands	r3, r2
 800135c:	4211      	tst	r1, r2
 800135e:	d000      	beq.n	8001362 <__aeabi_fsub+0x4a2>
 8001360:	e6ae      	b.n	80010c0 <__aeabi_fsub+0x200>
 8001362:	08cf      	lsrs	r7, r1, #3
 8001364:	e627      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <__aeabi_fsub+0x4ac>
 800136a:	e75f      	b.n	800122c <__aeabi_fsub+0x36c>
 800136c:	1b56      	subs	r6, r2, r5
 800136e:	2d00      	cmp	r5, #0
 8001370:	d101      	bne.n	8001376 <__aeabi_fsub+0x4b6>
 8001372:	0033      	movs	r3, r6
 8001374:	e6e7      	b.n	8001146 <__aeabi_fsub+0x286>
 8001376:	2380      	movs	r3, #128	@ 0x80
 8001378:	4660      	mov	r0, ip
 800137a:	04db      	lsls	r3, r3, #19
 800137c:	4318      	orrs	r0, r3
 800137e:	4684      	mov	ip, r0
 8001380:	e6eb      	b.n	800115a <__aeabi_fsub+0x29a>
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	7dffffff 	.word	0x7dffffff

08001388 <__aeabi_fcmpun>:
 8001388:	0243      	lsls	r3, r0, #9
 800138a:	024a      	lsls	r2, r1, #9
 800138c:	0040      	lsls	r0, r0, #1
 800138e:	0049      	lsls	r1, r1, #1
 8001390:	0a5b      	lsrs	r3, r3, #9
 8001392:	0a52      	lsrs	r2, r2, #9
 8001394:	0e09      	lsrs	r1, r1, #24
 8001396:	0e00      	lsrs	r0, r0, #24
 8001398:	28ff      	cmp	r0, #255	@ 0xff
 800139a:	d006      	beq.n	80013aa <__aeabi_fcmpun+0x22>
 800139c:	2000      	movs	r0, #0
 800139e:	29ff      	cmp	r1, #255	@ 0xff
 80013a0:	d102      	bne.n	80013a8 <__aeabi_fcmpun+0x20>
 80013a2:	1e53      	subs	r3, r2, #1
 80013a4:	419a      	sbcs	r2, r3
 80013a6:	0010      	movs	r0, r2
 80013a8:	4770      	bx	lr
 80013aa:	38fe      	subs	r0, #254	@ 0xfe
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1fb      	bne.n	80013a8 <__aeabi_fcmpun+0x20>
 80013b0:	e7f4      	b.n	800139c <__aeabi_fcmpun+0x14>
 80013b2:	46c0      	nop			@ (mov r8, r8)

080013b4 <__aeabi_i2f>:
 80013b4:	b570      	push	{r4, r5, r6, lr}
 80013b6:	2800      	cmp	r0, #0
 80013b8:	d012      	beq.n	80013e0 <__aeabi_i2f+0x2c>
 80013ba:	17c3      	asrs	r3, r0, #31
 80013bc:	18c5      	adds	r5, r0, r3
 80013be:	405d      	eors	r5, r3
 80013c0:	0fc4      	lsrs	r4, r0, #31
 80013c2:	0028      	movs	r0, r5
 80013c4:	f000 f846 	bl	8001454 <__clzsi2>
 80013c8:	239e      	movs	r3, #158	@ 0x9e
 80013ca:	1a1b      	subs	r3, r3, r0
 80013cc:	2b96      	cmp	r3, #150	@ 0x96
 80013ce:	dc0f      	bgt.n	80013f0 <__aeabi_i2f+0x3c>
 80013d0:	2808      	cmp	r0, #8
 80013d2:	d038      	beq.n	8001446 <__aeabi_i2f+0x92>
 80013d4:	3808      	subs	r0, #8
 80013d6:	4085      	lsls	r5, r0
 80013d8:	026d      	lsls	r5, r5, #9
 80013da:	0a6d      	lsrs	r5, r5, #9
 80013dc:	b2d8      	uxtb	r0, r3
 80013de:	e002      	b.n	80013e6 <__aeabi_i2f+0x32>
 80013e0:	2400      	movs	r4, #0
 80013e2:	2000      	movs	r0, #0
 80013e4:	2500      	movs	r5, #0
 80013e6:	05c0      	lsls	r0, r0, #23
 80013e8:	4328      	orrs	r0, r5
 80013ea:	07e4      	lsls	r4, r4, #31
 80013ec:	4320      	orrs	r0, r4
 80013ee:	bd70      	pop	{r4, r5, r6, pc}
 80013f0:	2b99      	cmp	r3, #153	@ 0x99
 80013f2:	dc14      	bgt.n	800141e <__aeabi_i2f+0x6a>
 80013f4:	1f42      	subs	r2, r0, #5
 80013f6:	4095      	lsls	r5, r2
 80013f8:	002a      	movs	r2, r5
 80013fa:	4915      	ldr	r1, [pc, #84]	@ (8001450 <__aeabi_i2f+0x9c>)
 80013fc:	4011      	ands	r1, r2
 80013fe:	0755      	lsls	r5, r2, #29
 8001400:	d01c      	beq.n	800143c <__aeabi_i2f+0x88>
 8001402:	250f      	movs	r5, #15
 8001404:	402a      	ands	r2, r5
 8001406:	2a04      	cmp	r2, #4
 8001408:	d018      	beq.n	800143c <__aeabi_i2f+0x88>
 800140a:	3104      	adds	r1, #4
 800140c:	08ca      	lsrs	r2, r1, #3
 800140e:	0149      	lsls	r1, r1, #5
 8001410:	d515      	bpl.n	800143e <__aeabi_i2f+0x8a>
 8001412:	239f      	movs	r3, #159	@ 0x9f
 8001414:	0252      	lsls	r2, r2, #9
 8001416:	1a18      	subs	r0, r3, r0
 8001418:	0a55      	lsrs	r5, r2, #9
 800141a:	b2c0      	uxtb	r0, r0
 800141c:	e7e3      	b.n	80013e6 <__aeabi_i2f+0x32>
 800141e:	2205      	movs	r2, #5
 8001420:	0029      	movs	r1, r5
 8001422:	1a12      	subs	r2, r2, r0
 8001424:	40d1      	lsrs	r1, r2
 8001426:	0002      	movs	r2, r0
 8001428:	321b      	adds	r2, #27
 800142a:	4095      	lsls	r5, r2
 800142c:	002a      	movs	r2, r5
 800142e:	1e55      	subs	r5, r2, #1
 8001430:	41aa      	sbcs	r2, r5
 8001432:	430a      	orrs	r2, r1
 8001434:	4906      	ldr	r1, [pc, #24]	@ (8001450 <__aeabi_i2f+0x9c>)
 8001436:	4011      	ands	r1, r2
 8001438:	0755      	lsls	r5, r2, #29
 800143a:	d1e2      	bne.n	8001402 <__aeabi_i2f+0x4e>
 800143c:	08ca      	lsrs	r2, r1, #3
 800143e:	0252      	lsls	r2, r2, #9
 8001440:	0a55      	lsrs	r5, r2, #9
 8001442:	b2d8      	uxtb	r0, r3
 8001444:	e7cf      	b.n	80013e6 <__aeabi_i2f+0x32>
 8001446:	026d      	lsls	r5, r5, #9
 8001448:	0a6d      	lsrs	r5, r5, #9
 800144a:	308e      	adds	r0, #142	@ 0x8e
 800144c:	e7cb      	b.n	80013e6 <__aeabi_i2f+0x32>
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	fbffffff 	.word	0xfbffffff

08001454 <__clzsi2>:
 8001454:	211c      	movs	r1, #28
 8001456:	2301      	movs	r3, #1
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	4298      	cmp	r0, r3
 800145c:	d301      	bcc.n	8001462 <__clzsi2+0xe>
 800145e:	0c00      	lsrs	r0, r0, #16
 8001460:	3910      	subs	r1, #16
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	4298      	cmp	r0, r3
 8001466:	d301      	bcc.n	800146c <__clzsi2+0x18>
 8001468:	0a00      	lsrs	r0, r0, #8
 800146a:	3908      	subs	r1, #8
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	4298      	cmp	r0, r3
 8001470:	d301      	bcc.n	8001476 <__clzsi2+0x22>
 8001472:	0900      	lsrs	r0, r0, #4
 8001474:	3904      	subs	r1, #4
 8001476:	a202      	add	r2, pc, #8	@ (adr r2, 8001480 <__clzsi2+0x2c>)
 8001478:	5c10      	ldrb	r0, [r2, r0]
 800147a:	1840      	adds	r0, r0, r1
 800147c:	4770      	bx	lr
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	02020304 	.word	0x02020304
 8001484:	01010101 	.word	0x01010101
	...

08001490 <null_ptr_check>:

static int8_t null_ptr_check(const struct bma400_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->intf_ptr == NULL))
 8001490:	2800      	cmp	r0, #0
 8001492:	d00d      	beq.n	80014b0 <null_ptr_check+0x20>
 8001494:	68c3      	ldr	r3, [r0, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00d      	beq.n	80014b6 <null_ptr_check+0x26>
 800149a:	6903      	ldr	r3, [r0, #16]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00d      	beq.n	80014bc <null_ptr_check+0x2c>
 80014a0:	6843      	ldr	r3, [r0, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <null_ptr_check+0x1a>
        rslt = BMA400_E_NULL_PTR;
    }
    else
    {
        /* Device structure is fine */
        rslt = BMA400_OK;
 80014a6:	2000      	movs	r0, #0
    }

    return rslt;
}
 80014a8:	4770      	bx	lr
        rslt = BMA400_E_NULL_PTR;
 80014aa:	2001      	movs	r0, #1
 80014ac:	4240      	negs	r0, r0
 80014ae:	e7fb      	b.n	80014a8 <null_ptr_check+0x18>
 80014b0:	2001      	movs	r0, #1
 80014b2:	4240      	negs	r0, r0
 80014b4:	e7f8      	b.n	80014a8 <null_ptr_check+0x18>
 80014b6:	2001      	movs	r0, #1
 80014b8:	4240      	negs	r0, r0
 80014ba:	e7f5      	b.n	80014a8 <null_ptr_check+0x18>
 80014bc:	2001      	movs	r0, #1
 80014be:	4240      	negs	r0, r0
 80014c0:	e7f2      	b.n	80014a8 <null_ptr_check+0x18>
	...

080014c4 <map_int_pin>:

    return rslt;
}

static void map_int_pin(uint8_t *data_array, uint8_t int_enable, enum bma400_int_chan int_map)
{
 80014c4:	b510      	push	{r4, lr}
    switch (int_enable)
 80014c6:	290b      	cmp	r1, #11
 80014c8:	d812      	bhi.n	80014f0 <map_int_pin+0x2c>
 80014ca:	0089      	lsls	r1, r1, #2
 80014cc:	4bb9      	ldr	r3, [pc, #740]	@ (80017b4 <map_int_pin+0x2f0>)
 80014ce:	585b      	ldr	r3, [r3, r1]
 80014d0:	469f      	mov	pc, r3
    {
        case BMA400_DATA_READY_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80014d2:	2a01      	cmp	r2, #1
 80014d4:	d00d      	beq.n	80014f2 <map_int_pin+0x2e>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80014d6:	2a02      	cmp	r2, #2
 80014d8:	d011      	beq.n	80014fe <map_int_pin+0x3a>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80014da:	2a00      	cmp	r2, #0
 80014dc:	d106      	bne.n	80014ec <map_int_pin+0x28>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_DRDY);
 80014de:	7801      	ldrb	r1, [r0, #0]
 80014e0:	237f      	movs	r3, #127	@ 0x7f
 80014e2:	4019      	ands	r1, r3
 80014e4:	7001      	strb	r1, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_DRDY);
 80014e6:	7841      	ldrb	r1, [r0, #1]
 80014e8:	400b      	ands	r3, r1
 80014ea:	7043      	strb	r3, [r0, #1]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80014ec:	2a03      	cmp	r2, #3
 80014ee:	d00c      	beq.n	800150a <map_int_pin+0x46>

            break;
        default:
            break;
    }
}
 80014f0:	bd10      	pop	{r4, pc}
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 80014f2:	7801      	ldrb	r1, [r0, #0]
 80014f4:	2380      	movs	r3, #128	@ 0x80
 80014f6:	425b      	negs	r3, r3
 80014f8:	430b      	orrs	r3, r1
 80014fa:	7003      	strb	r3, [r0, #0]
 80014fc:	e7eb      	b.n	80014d6 <map_int_pin+0x12>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 80014fe:	7841      	ldrb	r1, [r0, #1]
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	425b      	negs	r3, r3
 8001504:	430b      	orrs	r3, r1
 8001506:	7043      	strb	r3, [r0, #1]
 8001508:	e7e7      	b.n	80014da <map_int_pin+0x16>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 800150a:	7802      	ldrb	r2, [r0, #0]
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	425b      	negs	r3, r3
 8001510:	431a      	orrs	r2, r3
 8001512:	7002      	strb	r2, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 8001514:	7842      	ldrb	r2, [r0, #1]
 8001516:	4313      	orrs	r3, r2
 8001518:	7043      	strb	r3, [r0, #1]
 800151a:	e7e9      	b.n	80014f0 <map_int_pin+0x2c>
            if (int_map == BMA400_INT_CHANNEL_1)
 800151c:	2a01      	cmp	r2, #1
 800151e:	d014      	beq.n	800154a <map_int_pin+0x86>
            if (int_map == BMA400_INT_CHANNEL_2)
 8001520:	2a02      	cmp	r2, #2
 8001522:	d017      	beq.n	8001554 <map_int_pin+0x90>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8001524:	2a00      	cmp	r2, #0
 8001526:	d106      	bne.n	8001536 <map_int_pin+0x72>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_WM);
 8001528:	7803      	ldrb	r3, [r0, #0]
 800152a:	2140      	movs	r1, #64	@ 0x40
 800152c:	438b      	bics	r3, r1
 800152e:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_WM);
 8001530:	7843      	ldrb	r3, [r0, #1]
 8001532:	438b      	bics	r3, r1
 8001534:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001536:	2a03      	cmp	r2, #3
 8001538:	d1da      	bne.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 800153a:	7803      	ldrb	r3, [r0, #0]
 800153c:	2240      	movs	r2, #64	@ 0x40
 800153e:	4313      	orrs	r3, r2
 8001540:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001542:	7843      	ldrb	r3, [r0, #1]
 8001544:	4313      	orrs	r3, r2
 8001546:	7043      	strb	r3, [r0, #1]
 8001548:	e7d2      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 800154a:	7803      	ldrb	r3, [r0, #0]
 800154c:	2140      	movs	r1, #64	@ 0x40
 800154e:	430b      	orrs	r3, r1
 8001550:	7003      	strb	r3, [r0, #0]
 8001552:	e7e5      	b.n	8001520 <map_int_pin+0x5c>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001554:	7843      	ldrb	r3, [r0, #1]
 8001556:	2140      	movs	r1, #64	@ 0x40
 8001558:	430b      	orrs	r3, r1
 800155a:	7043      	strb	r3, [r0, #1]
 800155c:	e7e2      	b.n	8001524 <map_int_pin+0x60>
            if (int_map == BMA400_INT_CHANNEL_1)
 800155e:	2a01      	cmp	r2, #1
 8001560:	d014      	beq.n	800158c <map_int_pin+0xc8>
            if (int_map == BMA400_INT_CHANNEL_2)
 8001562:	2a02      	cmp	r2, #2
 8001564:	d017      	beq.n	8001596 <map_int_pin+0xd2>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8001566:	2a00      	cmp	r2, #0
 8001568:	d106      	bne.n	8001578 <map_int_pin+0xb4>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 800156a:	7803      	ldrb	r3, [r0, #0]
 800156c:	2120      	movs	r1, #32
 800156e:	438b      	bics	r3, r1
 8001570:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_FULL);
 8001572:	7843      	ldrb	r3, [r0, #1]
 8001574:	438b      	bics	r3, r1
 8001576:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001578:	2a03      	cmp	r2, #3
 800157a:	d1b9      	bne.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 800157c:	7803      	ldrb	r3, [r0, #0]
 800157e:	2220      	movs	r2, #32
 8001580:	4313      	orrs	r3, r2
 8001582:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001584:	7843      	ldrb	r3, [r0, #1]
 8001586:	4313      	orrs	r3, r2
 8001588:	7043      	strb	r3, [r0, #1]
 800158a:	e7b1      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 800158c:	7803      	ldrb	r3, [r0, #0]
 800158e:	2120      	movs	r1, #32
 8001590:	430b      	orrs	r3, r1
 8001592:	7003      	strb	r3, [r0, #0]
 8001594:	e7e5      	b.n	8001562 <map_int_pin+0x9e>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001596:	7843      	ldrb	r3, [r0, #1]
 8001598:	2120      	movs	r1, #32
 800159a:	430b      	orrs	r3, r1
 800159c:	7043      	strb	r3, [r0, #1]
 800159e:	e7e2      	b.n	8001566 <map_int_pin+0xa2>
            if (int_map == BMA400_INT_CHANNEL_1)
 80015a0:	2a01      	cmp	r2, #1
 80015a2:	d014      	beq.n	80015ce <map_int_pin+0x10a>
            if (int_map == BMA400_INT_CHANNEL_2)
 80015a4:	2a02      	cmp	r2, #2
 80015a6:	d017      	beq.n	80015d8 <map_int_pin+0x114>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d106      	bne.n	80015ba <map_int_pin+0xf6>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_INT_OVERRUN);
 80015ac:	7803      	ldrb	r3, [r0, #0]
 80015ae:	2110      	movs	r1, #16
 80015b0:	438b      	bics	r3, r1
 80015b2:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_INT_OVERRUN);
 80015b4:	7843      	ldrb	r3, [r0, #1]
 80015b6:	438b      	bics	r3, r1
 80015b8:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80015ba:	2a03      	cmp	r2, #3
 80015bc:	d198      	bne.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80015be:	7803      	ldrb	r3, [r0, #0]
 80015c0:	2210      	movs	r2, #16
 80015c2:	4313      	orrs	r3, r2
 80015c4:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80015c6:	7843      	ldrb	r3, [r0, #1]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	7043      	strb	r3, [r0, #1]
 80015cc:	e790      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80015ce:	7803      	ldrb	r3, [r0, #0]
 80015d0:	2110      	movs	r1, #16
 80015d2:	430b      	orrs	r3, r1
 80015d4:	7003      	strb	r3, [r0, #0]
 80015d6:	e7e5      	b.n	80015a4 <map_int_pin+0xe0>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80015d8:	7843      	ldrb	r3, [r0, #1]
 80015da:	2110      	movs	r1, #16
 80015dc:	430b      	orrs	r3, r1
 80015de:	7043      	strb	r3, [r0, #1]
 80015e0:	e7e2      	b.n	80015a8 <map_int_pin+0xe4>
            if (int_map == BMA400_INT_CHANNEL_1)
 80015e2:	2a01      	cmp	r2, #1
 80015e4:	d015      	beq.n	8001612 <map_int_pin+0x14e>
            if (int_map == BMA400_INT_CHANNEL_2)
 80015e6:	2a02      	cmp	r2, #2
 80015e8:	d018      	beq.n	800161c <map_int_pin+0x158>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80015ea:	2a00      	cmp	r2, #0
 80015ec:	d106      	bne.n	80015fc <map_int_pin+0x138>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN2);
 80015ee:	7803      	ldrb	r3, [r0, #0]
 80015f0:	2108      	movs	r1, #8
 80015f2:	438b      	bics	r3, r1
 80015f4:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN2);
 80015f6:	7843      	ldrb	r3, [r0, #1]
 80015f8:	438b      	bics	r3, r1
 80015fa:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80015fc:	2a03      	cmp	r2, #3
 80015fe:	d000      	beq.n	8001602 <map_int_pin+0x13e>
 8001600:	e776      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8001602:	7803      	ldrb	r3, [r0, #0]
 8001604:	2208      	movs	r2, #8
 8001606:	4313      	orrs	r3, r2
 8001608:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 800160a:	7843      	ldrb	r3, [r0, #1]
 800160c:	4313      	orrs	r3, r2
 800160e:	7043      	strb	r3, [r0, #1]
 8001610:	e76e      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8001612:	7803      	ldrb	r3, [r0, #0]
 8001614:	2108      	movs	r1, #8
 8001616:	430b      	orrs	r3, r1
 8001618:	7003      	strb	r3, [r0, #0]
 800161a:	e7e4      	b.n	80015e6 <map_int_pin+0x122>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 800161c:	7843      	ldrb	r3, [r0, #1]
 800161e:	2108      	movs	r1, #8
 8001620:	430b      	orrs	r3, r1
 8001622:	7043      	strb	r3, [r0, #1]
 8001624:	e7e1      	b.n	80015ea <map_int_pin+0x126>
            if (int_map == BMA400_INT_CHANNEL_1)
 8001626:	2a01      	cmp	r2, #1
 8001628:	d015      	beq.n	8001656 <map_int_pin+0x192>
            if (int_map == BMA400_INT_CHANNEL_2)
 800162a:	2a02      	cmp	r2, #2
 800162c:	d018      	beq.n	8001660 <map_int_pin+0x19c>
            if (int_map == BMA400_UNMAP_INT_PIN)
 800162e:	2a00      	cmp	r2, #0
 8001630:	d106      	bne.n	8001640 <map_int_pin+0x17c>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN1);
 8001632:	7803      	ldrb	r3, [r0, #0]
 8001634:	2104      	movs	r1, #4
 8001636:	438b      	bics	r3, r1
 8001638:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN1);
 800163a:	7843      	ldrb	r3, [r0, #1]
 800163c:	438b      	bics	r3, r1
 800163e:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001640:	2a03      	cmp	r2, #3
 8001642:	d000      	beq.n	8001646 <map_int_pin+0x182>
 8001644:	e754      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8001646:	7803      	ldrb	r3, [r0, #0]
 8001648:	2204      	movs	r2, #4
 800164a:	4313      	orrs	r3, r2
 800164c:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 800164e:	7843      	ldrb	r3, [r0, #1]
 8001650:	4313      	orrs	r3, r2
 8001652:	7043      	strb	r3, [r0, #1]
 8001654:	e74c      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8001656:	7803      	ldrb	r3, [r0, #0]
 8001658:	2104      	movs	r1, #4
 800165a:	430b      	orrs	r3, r1
 800165c:	7003      	strb	r3, [r0, #0]
 800165e:	e7e4      	b.n	800162a <map_int_pin+0x166>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8001660:	7843      	ldrb	r3, [r0, #1]
 8001662:	2104      	movs	r1, #4
 8001664:	430b      	orrs	r3, r1
 8001666:	7043      	strb	r3, [r0, #1]
 8001668:	e7e1      	b.n	800162e <map_int_pin+0x16a>
            if (int_map == BMA400_INT_CHANNEL_1)
 800166a:	2a01      	cmp	r2, #1
 800166c:	d015      	beq.n	800169a <map_int_pin+0x1d6>
            if (int_map == BMA400_INT_CHANNEL_2)
 800166e:	2a02      	cmp	r2, #2
 8001670:	d018      	beq.n	80016a4 <map_int_pin+0x1e0>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8001672:	2a00      	cmp	r2, #0
 8001674:	d106      	bne.n	8001684 <map_int_pin+0x1c0>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 8001676:	7803      	ldrb	r3, [r0, #0]
 8001678:	2102      	movs	r1, #2
 800167a:	438b      	bics	r3, r1
 800167c:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_ORIENT_CH);
 800167e:	7843      	ldrb	r3, [r0, #1]
 8001680:	438b      	bics	r3, r1
 8001682:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001684:	2a03      	cmp	r2, #3
 8001686:	d000      	beq.n	800168a <map_int_pin+0x1c6>
 8001688:	e732      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800168a:	7803      	ldrb	r3, [r0, #0]
 800168c:	2202      	movs	r2, #2
 800168e:	4313      	orrs	r3, r2
 8001690:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001692:	7843      	ldrb	r3, [r0, #1]
 8001694:	4313      	orrs	r3, r2
 8001696:	7043      	strb	r3, [r0, #1]
 8001698:	e72a      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800169a:	7803      	ldrb	r3, [r0, #0]
 800169c:	2102      	movs	r1, #2
 800169e:	430b      	orrs	r3, r1
 80016a0:	7003      	strb	r3, [r0, #0]
 80016a2:	e7e4      	b.n	800166e <map_int_pin+0x1aa>
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80016a4:	7843      	ldrb	r3, [r0, #1]
 80016a6:	2102      	movs	r1, #2
 80016a8:	430b      	orrs	r3, r1
 80016aa:	7043      	strb	r3, [r0, #1]
 80016ac:	e7e1      	b.n	8001672 <map_int_pin+0x1ae>
            if (int_map == BMA400_INT_CHANNEL_1)
 80016ae:	2a01      	cmp	r2, #1
 80016b0:	d015      	beq.n	80016de <map_int_pin+0x21a>
            if (int_map == BMA400_INT_CHANNEL_2)
 80016b2:	2a02      	cmp	r2, #2
 80016b4:	d018      	beq.n	80016e8 <map_int_pin+0x224>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80016b6:	2a00      	cmp	r2, #0
 80016b8:	d106      	bne.n	80016c8 <map_int_pin+0x204>
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_WAKEUP_INT);
 80016ba:	7803      	ldrb	r3, [r0, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	438b      	bics	r3, r1
 80016c0:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_WAKEUP_INT);
 80016c2:	7843      	ldrb	r3, [r0, #1]
 80016c4:	438b      	bics	r3, r1
 80016c6:	7043      	strb	r3, [r0, #1]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80016c8:	2a03      	cmp	r2, #3
 80016ca:	d000      	beq.n	80016ce <map_int_pin+0x20a>
 80016cc:	e710      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80016ce:	7803      	ldrb	r3, [r0, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4313      	orrs	r3, r2
 80016d4:	7003      	strb	r3, [r0, #0]
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80016d6:	7843      	ldrb	r3, [r0, #1]
 80016d8:	4313      	orrs	r3, r2
 80016da:	7043      	strb	r3, [r0, #1]
 80016dc:	e708      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80016de:	7803      	ldrb	r3, [r0, #0]
 80016e0:	2101      	movs	r1, #1
 80016e2:	430b      	orrs	r3, r1
 80016e4:	7003      	strb	r3, [r0, #0]
 80016e6:	e7e4      	b.n	80016b2 <map_int_pin+0x1ee>
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80016e8:	7843      	ldrb	r3, [r0, #1]
 80016ea:	2101      	movs	r1, #1
 80016ec:	430b      	orrs	r3, r1
 80016ee:	7043      	strb	r3, [r0, #1]
 80016f0:	e7e1      	b.n	80016b6 <map_int_pin+0x1f2>
            if (int_map == BMA400_INT_CHANNEL_1)
 80016f2:	2a01      	cmp	r2, #1
 80016f4:	d017      	beq.n	8001726 <map_int_pin+0x262>
            if (int_map == BMA400_INT_CHANNEL_2)
 80016f6:	2a02      	cmp	r2, #2
 80016f8:	d01a      	beq.n	8001730 <map_int_pin+0x26c>
            if (int_map == BMA400_UNMAP_INT_PIN)
 80016fa:	2a00      	cmp	r2, #0
 80016fc:	d107      	bne.n	800170e <map_int_pin+0x24a>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT1);
 80016fe:	7881      	ldrb	r1, [r0, #2]
 8001700:	2308      	movs	r3, #8
 8001702:	000c      	movs	r4, r1
 8001704:	439c      	bics	r4, r3
 8001706:	7084      	strb	r4, [r0, #2]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT2);
 8001708:	2377      	movs	r3, #119	@ 0x77
 800170a:	400b      	ands	r3, r1
 800170c:	7083      	strb	r3, [r0, #2]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800170e:	2a03      	cmp	r2, #3
 8001710:	d000      	beq.n	8001714 <map_int_pin+0x250>
 8001712:	e6ed      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8001714:	7882      	ldrb	r2, [r0, #2]
 8001716:	2308      	movs	r3, #8
 8001718:	4313      	orrs	r3, r2
 800171a:	7083      	strb	r3, [r0, #2]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 800171c:	2378      	movs	r3, #120	@ 0x78
 800171e:	425b      	negs	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	7083      	strb	r3, [r0, #2]
 8001724:	e6e4      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8001726:	7883      	ldrb	r3, [r0, #2]
 8001728:	2108      	movs	r1, #8
 800172a:	430b      	orrs	r3, r1
 800172c:	7083      	strb	r3, [r0, #2]
 800172e:	e7e2      	b.n	80016f6 <map_int_pin+0x232>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8001730:	7881      	ldrb	r1, [r0, #2]
 8001732:	2380      	movs	r3, #128	@ 0x80
 8001734:	425b      	negs	r3, r3
 8001736:	430b      	orrs	r3, r1
 8001738:	7083      	strb	r3, [r0, #2]
 800173a:	e7de      	b.n	80016fa <map_int_pin+0x236>
            if (int_map == BMA400_INT_CHANNEL_1)
 800173c:	2a01      	cmp	r2, #1
 800173e:	d016      	beq.n	800176e <map_int_pin+0x2aa>
            if (int_map == BMA400_INT_CHANNEL_2)
 8001740:	2a02      	cmp	r2, #2
 8001742:	d019      	beq.n	8001778 <map_int_pin+0x2b4>
            if (int_map == BMA400_UNMAP_INT_PIN)
 8001744:	2a00      	cmp	r2, #0
 8001746:	d107      	bne.n	8001758 <map_int_pin+0x294>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT1);
 8001748:	7883      	ldrb	r3, [r0, #2]
 800174a:	2104      	movs	r1, #4
 800174c:	001c      	movs	r4, r3
 800174e:	438c      	bics	r4, r1
 8001750:	7084      	strb	r4, [r0, #2]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT2);
 8001752:	2144      	movs	r1, #68	@ 0x44
 8001754:	438b      	bics	r3, r1
 8001756:	7083      	strb	r3, [r0, #2]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001758:	2a03      	cmp	r2, #3
 800175a:	d000      	beq.n	800175e <map_int_pin+0x29a>
 800175c:	e6c8      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 800175e:	7883      	ldrb	r3, [r0, #2]
 8001760:	2204      	movs	r2, #4
 8001762:	431a      	orrs	r2, r3
 8001764:	7082      	strb	r2, [r0, #2]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8001766:	2244      	movs	r2, #68	@ 0x44
 8001768:	4313      	orrs	r3, r2
 800176a:	7083      	strb	r3, [r0, #2]
 800176c:	e6c0      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 800176e:	7883      	ldrb	r3, [r0, #2]
 8001770:	2104      	movs	r1, #4
 8001772:	430b      	orrs	r3, r1
 8001774:	7083      	strb	r3, [r0, #2]
 8001776:	e7e3      	b.n	8001740 <map_int_pin+0x27c>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8001778:	7883      	ldrb	r3, [r0, #2]
 800177a:	2140      	movs	r1, #64	@ 0x40
 800177c:	430b      	orrs	r3, r1
 800177e:	7083      	strb	r3, [r0, #2]
 8001780:	e7e0      	b.n	8001744 <map_int_pin+0x280>
            if (int_map == BMA400_INT_CHANNEL_1)
 8001782:	2a01      	cmp	r2, #1
 8001784:	d018      	beq.n	80017b8 <map_int_pin+0x2f4>
            if (int_map == BMA400_INT_CHANNEL_2)
 8001786:	2a02      	cmp	r2, #2
 8001788:	d01b      	beq.n	80017c2 <map_int_pin+0x2fe>
            if (int_map == BMA400_UNMAP_INT_PIN)
 800178a:	2a00      	cmp	r2, #0
 800178c:	d107      	bne.n	800179e <map_int_pin+0x2da>
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_EN_STEP_INT);
 800178e:	7883      	ldrb	r3, [r0, #2]
 8001790:	2101      	movs	r1, #1
 8001792:	001c      	movs	r4, r3
 8001794:	438c      	bics	r4, r1
 8001796:	7084      	strb	r4, [r0, #2]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 8001798:	2111      	movs	r1, #17
 800179a:	438b      	bics	r3, r1
 800179c:	7083      	strb	r3, [r0, #2]
            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800179e:	2a03      	cmp	r2, #3
 80017a0:	d000      	beq.n	80017a4 <map_int_pin+0x2e0>
 80017a2:	e6a5      	b.n	80014f0 <map_int_pin+0x2c>
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 80017a4:	7883      	ldrb	r3, [r0, #2]
 80017a6:	2201      	movs	r2, #1
 80017a8:	431a      	orrs	r2, r3
 80017aa:	7082      	strb	r2, [r0, #2]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 80017ac:	2211      	movs	r2, #17
 80017ae:	4313      	orrs	r3, r2
 80017b0:	7083      	strb	r3, [r0, #2]
}
 80017b2:	e69d      	b.n	80014f0 <map_int_pin+0x2c>
 80017b4:	08005a68 	.word	0x08005a68
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 80017b8:	7883      	ldrb	r3, [r0, #2]
 80017ba:	2101      	movs	r1, #1
 80017bc:	430b      	orrs	r3, r1
 80017be:	7083      	strb	r3, [r0, #2]
 80017c0:	e7e1      	b.n	8001786 <map_int_pin+0x2c2>
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 80017c2:	7883      	ldrb	r3, [r0, #2]
 80017c4:	2110      	movs	r1, #16
 80017c6:	430b      	orrs	r3, r1
 80017c8:	7083      	strb	r3, [r0, #2]
 80017ca:	e7de      	b.n	800178a <map_int_pin+0x2c6>

080017cc <bma400_set_regs>:
{
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	46d6      	mov	lr, sl
 80017d0:	464f      	mov	r7, r9
 80017d2:	4646      	mov	r6, r8
 80017d4:	b5c0      	push	{r6, r7, lr}
 80017d6:	0005      	movs	r5, r0
 80017d8:	4689      	mov	r9, r1
 80017da:	4690      	mov	r8, r2
 80017dc:	001e      	movs	r6, r3
    rslt = null_ptr_check(dev);
 80017de:	0018      	movs	r0, r3
 80017e0:	f7ff fe56 	bl	8001490 <null_ptr_check>
 80017e4:	1e07      	subs	r7, r0, #0
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 80017e6:	d12b      	bne.n	8001840 <bma400_set_regs+0x74>
 80017e8:	464b      	mov	r3, r9
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d030      	beq.n	8001850 <bma400_set_regs+0x84>
        if (len == 1)
 80017ee:	4643      	mov	r3, r8
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d004      	beq.n	80017fe <bma400_set_regs+0x32>
        if (len > 1)
 80017f4:	4643      	mov	r3, r8
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d924      	bls.n	8001844 <bma400_set_regs+0x78>
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 80017fa:	2400      	movs	r4, #0
 80017fc:	e00c      	b.n	8001818 <bma400_set_regs+0x4c>
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 80017fe:	6934      	ldr	r4, [r6, #16]
 8001800:	6873      	ldr	r3, [r6, #4]
 8001802:	4642      	mov	r2, r8
 8001804:	4649      	mov	r1, r9
 8001806:	0028      	movs	r0, r5
 8001808:	47a0      	blx	r4
 800180a:	7730      	strb	r0, [r6, #28]
            if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 800180c:	2800      	cmp	r0, #0
 800180e:	d0f1      	beq.n	80017f4 <bma400_set_regs+0x28>
                rslt = BMA400_E_COM_FAIL;
 8001810:	3f02      	subs	r7, #2
 8001812:	e7ef      	b.n	80017f4 <bma400_set_regs+0x28>
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8001814:	3401      	adds	r4, #1
 8001816:	b2e4      	uxtb	r4, r4
 8001818:	0021      	movs	r1, r4
 800181a:	4544      	cmp	r4, r8
 800181c:	d212      	bcs.n	8001844 <bma400_set_regs+0x78>
 800181e:	2f00      	cmp	r7, #0
 8001820:	d110      	bne.n	8001844 <bma400_set_regs+0x78>
                dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr);
 8001822:	6933      	ldr	r3, [r6, #16]
 8001824:	469a      	mov	sl, r3
 8001826:	6873      	ldr	r3, [r6, #4]
 8001828:	4449      	add	r1, r9
 800182a:	2201      	movs	r2, #1
 800182c:	0028      	movs	r0, r5
 800182e:	47d0      	blx	sl
 8001830:	7730      	strb	r0, [r6, #28]
                reg_addr++;
 8001832:	3501      	adds	r5, #1
 8001834:	b2ed      	uxtb	r5, r5
                if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8001836:	2800      	cmp	r0, #0
 8001838:	d0ec      	beq.n	8001814 <bma400_set_regs+0x48>
                    rslt = BMA400_E_COM_FAIL;
 800183a:	2702      	movs	r7, #2
 800183c:	427f      	negs	r7, r7
 800183e:	e7e9      	b.n	8001814 <bma400_set_regs+0x48>
        rslt = BMA400_E_NULL_PTR;
 8001840:	2701      	movs	r7, #1
 8001842:	427f      	negs	r7, r7
}
 8001844:	0038      	movs	r0, r7
 8001846:	bce0      	pop	{r5, r6, r7}
 8001848:	46ba      	mov	sl, r7
 800184a:	46b1      	mov	r9, r6
 800184c:	46a8      	mov	r8, r5
 800184e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMA400_E_NULL_PTR;
 8001850:	2701      	movs	r7, #1
 8001852:	427f      	negs	r7, r7
 8001854:	e7f6      	b.n	8001844 <bma400_set_regs+0x78>

08001856 <set_activity_change_conf>:
{
 8001856:	b530      	push	{r4, r5, lr}
 8001858:	b083      	sub	sp, #12
 800185a:	000b      	movs	r3, r1
    uint8_t data_array[2] = { 0 };
 800185c:	a901      	add	r1, sp, #4
 800185e:	2200      	movs	r2, #0
 8001860:	800a      	strh	r2, [r1, #0]
    data_array[0] = act_ch_set->act_ch_thres;
 8001862:	7802      	ldrb	r2, [r0, #0]
 8001864:	700a      	strb	r2, [r1, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN, act_ch_set->axes_sel);
 8001866:	7842      	ldrb	r2, [r0, #1]
 8001868:	0152      	lsls	r2, r2, #5
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	704a      	strb	r2, [r1, #1]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC, act_ch_set->data_source);
 800186e:	7885      	ldrb	r5, [r0, #2]
 8001870:	012d      	lsls	r5, r5, #4
 8001872:	2410      	movs	r4, #16
 8001874:	402c      	ands	r4, r5
 8001876:	4322      	orrs	r2, r4
 8001878:	704a      	strb	r2, [r1, #1]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 800187a:	78c4      	ldrb	r4, [r0, #3]
 800187c:	200f      	movs	r0, #15
 800187e:	4020      	ands	r0, r4
 8001880:	4302      	orrs	r2, r0
 8001882:	704a      	strb	r2, [r1, #1]
    rslt = bma400_set_regs(BMA400_REG_ACT_CH_CONFIG_0, data_array, 2, dev);
 8001884:	2202      	movs	r2, #2
 8001886:	2055      	movs	r0, #85	@ 0x55
 8001888:	f7ff ffa0 	bl	80017cc <bma400_set_regs>
}
 800188c:	b003      	add	sp, #12
 800188e:	bd30      	pop	{r4, r5, pc}

08001890 <set_gen1_int>:
{
 8001890:	b570      	push	{r4, r5, r6, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	0005      	movs	r5, r0
 8001896:	000e      	movs	r6, r1
    uint8_t data_array[11] = { 0 };
 8001898:	ac01      	add	r4, sp, #4
 800189a:	220b      	movs	r2, #11
 800189c:	2100      	movs	r1, #0
 800189e:	0020      	movs	r0, r4
 80018a0:	f002 ff5c 	bl	800475c <memset>
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 80018a4:	792a      	ldrb	r2, [r5, #4]
 80018a6:	0152      	lsls	r2, r2, #5
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 80018ac:	7969      	ldrb	r1, [r5, #5]
 80018ae:	0109      	lsls	r1, r1, #4
 80018b0:	2310      	movs	r3, #16
 80018b2:	400b      	ands	r3, r1
 80018b4:	431a      	orrs	r2, r3
 80018b6:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 80018b8:	7a29      	ldrb	r1, [r5, #8]
 80018ba:	0088      	lsls	r0, r1, #2
 80018bc:	230c      	movs	r3, #12
 80018be:	4003      	ands	r3, r0
 80018c0:	431a      	orrs	r2, r3
 80018c2:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80018c4:	7a68      	ldrb	r0, [r5, #9]
 80018c6:	2303      	movs	r3, #3
 80018c8:	4003      	ands	r3, r0
 80018ca:	431a      	orrs	r2, r3
 80018cc:	7022      	strb	r2, [r4, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 80018ce:	79aa      	ldrb	r2, [r5, #6]
 80018d0:	0052      	lsls	r2, r2, #1
 80018d2:	2302      	movs	r3, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	7063      	strb	r3, [r4, #1]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 80018d8:	79e8      	ldrb	r0, [r5, #7]
 80018da:	2201      	movs	r2, #1
 80018dc:	4002      	ands	r2, r0
 80018de:	4313      	orrs	r3, r2
 80018e0:	7063      	strb	r3, [r4, #1]
    data_array[2] = gen_int_set->gen_int_thres;
 80018e2:	782b      	ldrb	r3, [r5, #0]
 80018e4:	70a3      	strb	r3, [r4, #2]
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 80018e6:	886b      	ldrh	r3, [r5, #2]
 80018e8:	0a1a      	lsrs	r2, r3, #8
 80018ea:	70e2      	strb	r2, [r4, #3]
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 80018ec:	7123      	strb	r3, [r4, #4]
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 80018ee:	2900      	cmp	r1, #0
 80018f0:	d116      	bne.n	8001920 <set_gen1_int+0x90>
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 80018f2:	896b      	ldrh	r3, [r5, #10]
 80018f4:	7aaa      	ldrb	r2, [r5, #10]
 80018f6:	0021      	movs	r1, r4
 80018f8:	7162      	strb	r2, [r4, #5]
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	71a3      	strb	r3, [r4, #6]
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 80018fe:	89ab      	ldrh	r3, [r5, #12]
 8001900:	7b2a      	ldrb	r2, [r5, #12]
 8001902:	71e2      	strb	r2, [r4, #7]
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	7223      	strb	r3, [r4, #8]
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8001908:	89eb      	ldrh	r3, [r5, #14]
 800190a:	7baa      	ldrb	r2, [r5, #14]
 800190c:	7262      	strb	r2, [r4, #9]
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	72a3      	strb	r3, [r4, #10]
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 11, dev);
 8001912:	0033      	movs	r3, r6
 8001914:	220b      	movs	r2, #11
 8001916:	203f      	movs	r0, #63	@ 0x3f
 8001918:	f7ff ff58 	bl	80017cc <bma400_set_regs>
}
 800191c:	b004      	add	sp, #16
 800191e:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 5, dev);
 8001920:	0033      	movs	r3, r6
 8001922:	2205      	movs	r2, #5
 8001924:	a901      	add	r1, sp, #4
 8001926:	203f      	movs	r0, #63	@ 0x3f
 8001928:	f7ff ff50 	bl	80017cc <bma400_set_regs>
 800192c:	e7f6      	b.n	800191c <set_gen1_int+0x8c>

0800192e <set_gen2_int>:
{
 800192e:	b570      	push	{r4, r5, r6, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	0005      	movs	r5, r0
 8001934:	000e      	movs	r6, r1
    uint8_t data_array[11] = { 0 };
 8001936:	ac01      	add	r4, sp, #4
 8001938:	220b      	movs	r2, #11
 800193a:	2100      	movs	r1, #0
 800193c:	0020      	movs	r0, r4
 800193e:	f002 ff0d 	bl	800475c <memset>
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8001942:	792a      	ldrb	r2, [r5, #4]
 8001944:	0152      	lsls	r2, r2, #5
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 800194a:	7969      	ldrb	r1, [r5, #5]
 800194c:	0109      	lsls	r1, r1, #4
 800194e:	2310      	movs	r3, #16
 8001950:	400b      	ands	r3, r1
 8001952:	431a      	orrs	r2, r3
 8001954:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8001956:	7a29      	ldrb	r1, [r5, #8]
 8001958:	0088      	lsls	r0, r1, #2
 800195a:	230c      	movs	r3, #12
 800195c:	4003      	ands	r3, r0
 800195e:	431a      	orrs	r2, r3
 8001960:	7022      	strb	r2, [r4, #0]
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8001962:	7a68      	ldrb	r0, [r5, #9]
 8001964:	2303      	movs	r3, #3
 8001966:	4003      	ands	r3, r0
 8001968:	431a      	orrs	r2, r3
 800196a:	7022      	strb	r2, [r4, #0]
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 800196c:	79aa      	ldrb	r2, [r5, #6]
 800196e:	0052      	lsls	r2, r2, #1
 8001970:	2302      	movs	r3, #2
 8001972:	4013      	ands	r3, r2
 8001974:	7063      	strb	r3, [r4, #1]
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8001976:	79e8      	ldrb	r0, [r5, #7]
 8001978:	2201      	movs	r2, #1
 800197a:	4002      	ands	r2, r0
 800197c:	4313      	orrs	r3, r2
 800197e:	7063      	strb	r3, [r4, #1]
    data_array[2] = gen_int_set->gen_int_thres;
 8001980:	782b      	ldrb	r3, [r5, #0]
 8001982:	70a3      	strb	r3, [r4, #2]
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8001984:	886b      	ldrh	r3, [r5, #2]
 8001986:	0a1a      	lsrs	r2, r3, #8
 8001988:	70e2      	strb	r2, [r4, #3]
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 800198a:	7123      	strb	r3, [r4, #4]
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 800198c:	2900      	cmp	r1, #0
 800198e:	d116      	bne.n	80019be <set_gen2_int+0x90>
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8001990:	896b      	ldrh	r3, [r5, #10]
 8001992:	7aaa      	ldrb	r2, [r5, #10]
 8001994:	0021      	movs	r1, r4
 8001996:	7162      	strb	r2, [r4, #5]
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	71a3      	strb	r3, [r4, #6]
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 800199c:	89ab      	ldrh	r3, [r5, #12]
 800199e:	7b2a      	ldrb	r2, [r5, #12]
 80019a0:	71e2      	strb	r2, [r4, #7]
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	7223      	strb	r3, [r4, #8]
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 80019a6:	89eb      	ldrh	r3, [r5, #14]
 80019a8:	7baa      	ldrb	r2, [r5, #14]
 80019aa:	7262      	strb	r2, [r4, #9]
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	72a3      	strb	r3, [r4, #10]
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 11, dev);
 80019b0:	0033      	movs	r3, r6
 80019b2:	220b      	movs	r2, #11
 80019b4:	204a      	movs	r0, #74	@ 0x4a
 80019b6:	f7ff ff09 	bl	80017cc <bma400_set_regs>
}
 80019ba:	b004      	add	sp, #16
 80019bc:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 5, dev);
 80019be:	0033      	movs	r3, r6
 80019c0:	2205      	movs	r2, #5
 80019c2:	a901      	add	r1, sp, #4
 80019c4:	204a      	movs	r0, #74	@ 0x4a
 80019c6:	f7ff ff01 	bl	80017cc <bma400_set_regs>
 80019ca:	e7f6      	b.n	80019ba <set_gen2_int+0x8c>

080019cc <set_orient_int>:
{
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	0004      	movs	r4, r0
 80019d2:	000e      	movs	r6, r1
    uint8_t data_array[10] = { 0 };
 80019d4:	ad01      	add	r5, sp, #4
 80019d6:	220a      	movs	r2, #10
 80019d8:	2100      	movs	r1, #0
 80019da:	0028      	movs	r0, r5
 80019dc:	f002 febe 	bl	800475c <memset>
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 80019e0:	7822      	ldrb	r2, [r4, #0]
 80019e2:	0152      	lsls	r2, r2, #5
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	702a      	strb	r2, [r5, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 80019e8:	7861      	ldrb	r1, [r4, #1]
 80019ea:	0109      	lsls	r1, r1, #4
 80019ec:	2310      	movs	r3, #16
 80019ee:	400b      	ands	r3, r1
 80019f0:	431a      	orrs	r2, r3
 80019f2:	702a      	strb	r2, [r5, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 80019f4:	78a1      	ldrb	r1, [r4, #2]
 80019f6:	0088      	lsls	r0, r1, #2
 80019f8:	230c      	movs	r3, #12
 80019fa:	4003      	ands	r3, r0
 80019fc:	431a      	orrs	r2, r3
 80019fe:	702a      	strb	r2, [r5, #0]
    data_array[1] = orient_conf->orient_thres;
 8001a00:	78e3      	ldrb	r3, [r4, #3]
 8001a02:	706b      	strb	r3, [r5, #1]
    data_array[2] = orient_conf->stability_thres;
 8001a04:	7923      	ldrb	r3, [r4, #4]
 8001a06:	70ab      	strb	r3, [r5, #2]
    data_array[3] = orient_conf->orient_int_dur;
 8001a08:	7963      	ldrb	r3, [r4, #5]
 8001a0a:	70eb      	strb	r3, [r5, #3]
    if (orient_conf->ref_update == BMA400_UPDATE_MANUAL)
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	d116      	bne.n	8001a3e <set_orient_int+0x72>
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 8001a10:	88e3      	ldrh	r3, [r4, #6]
 8001a12:	79a2      	ldrb	r2, [r4, #6]
 8001a14:	0029      	movs	r1, r5
 8001a16:	712a      	strb	r2, [r5, #4]
        data_array[5] = BMA400_GET_MSB(orient_conf->orient_ref_x);
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	716b      	strb	r3, [r5, #5]
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 8001a1c:	8923      	ldrh	r3, [r4, #8]
 8001a1e:	7a22      	ldrb	r2, [r4, #8]
 8001a20:	71aa      	strb	r2, [r5, #6]
        data_array[7] = BMA400_GET_MSB(orient_conf->orient_ref_y);
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	71eb      	strb	r3, [r5, #7]
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 8001a26:	8963      	ldrh	r3, [r4, #10]
 8001a28:	7aa2      	ldrb	r2, [r4, #10]
 8001a2a:	722a      	strb	r2, [r5, #8]
        data_array[9] = BMA400_GET_MSB(orient_conf->orient_ref_z);
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	726b      	strb	r3, [r5, #9]
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 10, dev);
 8001a30:	0033      	movs	r3, r6
 8001a32:	220a      	movs	r2, #10
 8001a34:	2035      	movs	r0, #53	@ 0x35
 8001a36:	f7ff fec9 	bl	80017cc <bma400_set_regs>
}
 8001a3a:	b004      	add	sp, #16
 8001a3c:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 4, dev);
 8001a3e:	0033      	movs	r3, r6
 8001a40:	2204      	movs	r2, #4
 8001a42:	a901      	add	r1, sp, #4
 8001a44:	2035      	movs	r0, #53	@ 0x35
 8001a46:	f7ff fec1 	bl	80017cc <bma400_set_regs>
 8001a4a:	e7f6      	b.n	8001a3a <set_orient_int+0x6e>

08001a4c <set_autowakeup_interrupt>:
{
 8001a4c:	b530      	push	{r4, r5, lr}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	0004      	movs	r4, r0
 8001a52:	000d      	movs	r5, r1
    uint8_t data_array[5] = { 0 };
 8001a54:	2205      	movs	r2, #5
 8001a56:	2100      	movs	r1, #0
 8001a58:	4668      	mov	r0, sp
 8001a5a:	f002 fe7f 	bl	800475c <memset>
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 8001a5e:	7823      	ldrb	r3, [r4, #0]
 8001a60:	2203      	movs	r2, #3
 8001a62:	401a      	ands	r2, r3
 8001a64:	466b      	mov	r3, sp
 8001a66:	701a      	strb	r2, [r3, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 8001a68:	7861      	ldrb	r1, [r4, #1]
 8001a6a:	0089      	lsls	r1, r1, #2
 8001a6c:	231c      	movs	r3, #28
 8001a6e:	400b      	ands	r3, r1
 8001a70:	431a      	orrs	r2, r3
 8001a72:	466b      	mov	r3, sp
 8001a74:	701a      	strb	r2, [r3, #0]
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 8001a76:	78a3      	ldrb	r3, [r4, #2]
 8001a78:	015b      	lsls	r3, r3, #5
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	466b      	mov	r3, sp
 8001a7e:	701a      	strb	r2, [r3, #0]
    data_array[1] = wakeup_conf->int_wkup_threshold;
 8001a80:	78e3      	ldrb	r3, [r4, #3]
 8001a82:	466a      	mov	r2, sp
 8001a84:	7053      	strb	r3, [r2, #1]
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 8001a86:	7923      	ldrb	r3, [r4, #4]
 8001a88:	7093      	strb	r3, [r2, #2]
    data_array[3] = wakeup_conf->int_wkup_ref_y;
 8001a8a:	7963      	ldrb	r3, [r4, #5]
 8001a8c:	70d3      	strb	r3, [r2, #3]
    data_array[4] = wakeup_conf->int_wkup_ref_z;
 8001a8e:	79a3      	ldrb	r3, [r4, #6]
 8001a90:	7113      	strb	r3, [r2, #4]
    rslt = bma400_set_regs(BMA400_REG_WAKEUP_INT_CONF_0, data_array, 5, dev);
 8001a92:	002b      	movs	r3, r5
 8001a94:	2205      	movs	r2, #5
 8001a96:	4669      	mov	r1, sp
 8001a98:	202f      	movs	r0, #47	@ 0x2f
 8001a9a:	f7ff fe97 	bl	80017cc <bma400_set_regs>
}
 8001a9e:	b003      	add	sp, #12
 8001aa0:	bd30      	pop	{r4, r5, pc}

08001aa2 <bma400_get_regs>:
{
 8001aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa4:	46ce      	mov	lr, r9
 8001aa6:	4647      	mov	r7, r8
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0a1      	sub	sp, #132	@ 0x84
 8001aac:	0004      	movs	r4, r0
 8001aae:	4688      	mov	r8, r1
 8001ab0:	0017      	movs	r7, r2
 8001ab2:	001e      	movs	r6, r3
    rslt = null_ptr_check(dev);
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff fceb 	bl	8001490 <null_ptr_check>
 8001aba:	4681      	mov	r9, r0
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d129      	bne.n	8001b14 <bma400_get_regs+0x72>
 8001ac0:	4643      	mov	r3, r8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d02a      	beq.n	8001b1c <bma400_get_regs+0x7a>
        if (dev->intf != BMA400_I2C_INTF)
 8001ac6:	7873      	ldrb	r3, [r6, #1]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d003      	beq.n	8001ad4 <bma400_get_regs+0x32>
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	425b      	negs	r3, r3
 8001ad0:	431c      	orrs	r4, r3
 8001ad2:	b2e4      	uxtb	r4, r4
        dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr);
 8001ad4:	68f5      	ldr	r5, [r6, #12]
 8001ad6:	7a32      	ldrb	r2, [r6, #8]
 8001ad8:	6873      	ldr	r3, [r6, #4]
 8001ada:	19d2      	adds	r2, r2, r7
 8001adc:	4669      	mov	r1, sp
 8001ade:	0020      	movs	r0, r4
 8001ae0:	47a8      	blx	r5
 8001ae2:	7730      	strb	r0, [r6, #28]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	d101      	bne.n	8001aec <bma400_get_regs+0x4a>
            for (index = 0; index < len; index++)
 8001ae8:	2400      	movs	r4, #0
 8001aea:	e00b      	b.n	8001b04 <bma400_get_regs+0x62>
            rslt = BMA400_E_COM_FAIL;
 8001aec:	2302      	movs	r3, #2
 8001aee:	425b      	negs	r3, r3
 8001af0:	4699      	mov	r9, r3
 8001af2:	e009      	b.n	8001b08 <bma400_get_regs+0x66>
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 8001af4:	7a35      	ldrb	r5, [r6, #8]
 8001af6:	1965      	adds	r5, r4, r5
 8001af8:	466b      	mov	r3, sp
 8001afa:	5d5b      	ldrb	r3, [r3, r5]
 8001afc:	4642      	mov	r2, r8
 8001afe:	5513      	strb	r3, [r2, r4]
            for (index = 0; index < len; index++)
 8001b00:	3401      	adds	r4, #1
 8001b02:	b2a4      	uxth	r4, r4
 8001b04:	42bc      	cmp	r4, r7
 8001b06:	d3f5      	bcc.n	8001af4 <bma400_get_regs+0x52>
}
 8001b08:	4648      	mov	r0, r9
 8001b0a:	b021      	add	sp, #132	@ 0x84
 8001b0c:	bcc0      	pop	{r6, r7}
 8001b0e:	46b9      	mov	r9, r7
 8001b10:	46b0      	mov	r8, r6
 8001b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMA400_E_NULL_PTR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	425b      	negs	r3, r3
 8001b18:	4699      	mov	r9, r3
 8001b1a:	e7f5      	b.n	8001b08 <bma400_get_regs+0x66>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	425b      	negs	r3, r3
 8001b20:	4699      	mov	r9, r3
 8001b22:	e7f1      	b.n	8001b08 <bma400_get_regs+0x66>

08001b24 <bma400_init>:
{
 8001b24:	b530      	push	{r4, r5, lr}
 8001b26:	b083      	sub	sp, #12
 8001b28:	0005      	movs	r5, r0
    uint8_t chip_id = 0;
 8001b2a:	466b      	mov	r3, sp
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	71da      	strb	r2, [r3, #7]
    rslt = null_ptr_check(dev);
 8001b30:	f7ff fcae 	bl	8001490 <null_ptr_check>
 8001b34:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8001b36:	d10a      	bne.n	8001b4e <bma400_init+0x2a>
        dev->delay_us(5000, dev->intf_ptr);
 8001b38:	696b      	ldr	r3, [r5, #20]
 8001b3a:	6869      	ldr	r1, [r5, #4]
 8001b3c:	4814      	ldr	r0, [pc, #80]	@ (8001b90 <bma400_init+0x6c>)
 8001b3e:	4798      	blx	r3
        if (dev->intf == BMA400_SPI_INTF)
 8001b40:	786b      	ldrb	r3, [r5, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <bma400_init+0x30>
            dev->dummy_byte = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	722b      	strb	r3, [r5, #8]
        if (rslt == BMA400_OK)
 8001b4a:	2c00      	cmp	r4, #0
 8001b4c:	d00d      	beq.n	8001b6a <bma400_init+0x46>
}
 8001b4e:	0020      	movs	r0, r4
 8001b50:	b003      	add	sp, #12
 8001b52:	bd30      	pop	{r4, r5, pc}
            dev->dummy_byte = 1;
 8001b54:	3301      	adds	r3, #1
 8001b56:	722b      	strb	r3, [r5, #8]
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8001b58:	002b      	movs	r3, r5
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4669      	mov	r1, sp
 8001b5e:	3107      	adds	r1, #7
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff ff9e 	bl	8001aa2 <bma400_get_regs>
 8001b66:	0004      	movs	r4, r0
 8001b68:	e7ef      	b.n	8001b4a <bma400_init+0x26>
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8001b6a:	002b      	movs	r3, r5
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4669      	mov	r1, sp
 8001b70:	3107      	adds	r1, #7
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff ff95 	bl	8001aa2 <bma400_get_regs>
 8001b78:	1e04      	subs	r4, r0, #0
            if (rslt == BMA400_OK)
 8001b7a:	d1e8      	bne.n	8001b4e <bma400_init+0x2a>
                if (chip_id == BMA400_CHIP_ID)
 8001b7c:	466b      	mov	r3, sp
 8001b7e:	3307      	adds	r3, #7
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b90      	cmp	r3, #144	@ 0x90
 8001b84:	d101      	bne.n	8001b8a <bma400_init+0x66>
                    dev->chip_id = chip_id;
 8001b86:	702b      	strb	r3, [r5, #0]
 8001b88:	e7e1      	b.n	8001b4e <bma400_init+0x2a>
                    rslt = BMA400_E_DEV_NOT_FOUND;
 8001b8a:	2403      	movs	r4, #3
 8001b8c:	4264      	negs	r4, r4
 8001b8e:	e7de      	b.n	8001b4e <bma400_init+0x2a>
 8001b90:	00001388 	.word	0x00001388

08001b94 <get_accel_data>:
{
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	0005      	movs	r5, r0
 8001b9a:	000c      	movs	r4, r1
 8001b9c:	0016      	movs	r6, r2
    uint8_t data_array[9] = { 0 };
 8001b9e:	2209      	movs	r2, #9
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	a801      	add	r0, sp, #4
 8001ba4:	f002 fdda 	bl	800475c <memset>
    if (data_sel == BMA400_DATA_ONLY)
 8001ba8:	2d00      	cmp	r5, #0
 8001baa:	d03f      	beq.n	8001c2c <get_accel_data+0x98>
    else if (data_sel == BMA400_DATA_SENSOR_TIME)
 8001bac:	2d01      	cmp	r5, #1
 8001bae:	d150      	bne.n	8001c52 <get_accel_data+0xbe>
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 9, dev);
 8001bb0:	0033      	movs	r3, r6
 8001bb2:	2209      	movs	r2, #9
 8001bb4:	a901      	add	r1, sp, #4
 8001bb6:	2004      	movs	r0, #4
 8001bb8:	f7ff ff73 	bl	8001aa2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d133      	bne.n	8001c28 <get_accel_data+0x94>
        lsb = data_array[0];
 8001bc0:	aa01      	add	r2, sp, #4
 8001bc2:	7813      	ldrb	r3, [r2, #0]
        msb = data_array[1];
 8001bc4:	7852      	ldrb	r2, [r2, #1]
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 8001bc6:	0212      	lsls	r2, r2, #8
 8001bc8:	189b      	adds	r3, r3, r2
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	8023      	strh	r3, [r4, #0]
        if (accel->x > 2047)
 8001bd0:	2180      	movs	r1, #128	@ 0x80
 8001bd2:	0109      	lsls	r1, r1, #4
 8001bd4:	428b      	cmp	r3, r1
 8001bd6:	db03      	blt.n	8001be0 <get_accel_data+0x4c>
            accel->x = accel->x - 4096;
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c58 <get_accel_data+0xc4>)
 8001bda:	469c      	mov	ip, r3
 8001bdc:	4462      	add	r2, ip
 8001bde:	8022      	strh	r2, [r4, #0]
        lsb = data_array[2];
 8001be0:	ab01      	add	r3, sp, #4
 8001be2:	789a      	ldrb	r2, [r3, #2]
        msb = data_array[3];
 8001be4:	78db      	ldrb	r3, [r3, #3]
        accel->y = (int16_t)(((uint16_t)msb * 256) | lsb);
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	4313      	orrs	r3, r2
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	8063      	strh	r3, [r4, #2]
        if (accel->y > 2047)
 8001bee:	2280      	movs	r2, #128	@ 0x80
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	db04      	blt.n	8001c00 <get_accel_data+0x6c>
            accel->y = accel->y - 4096;
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4a17      	ldr	r2, [pc, #92]	@ (8001c58 <get_accel_data+0xc4>)
 8001bfa:	4694      	mov	ip, r2
 8001bfc:	4463      	add	r3, ip
 8001bfe:	8063      	strh	r3, [r4, #2]
        lsb = data_array[4];
 8001c00:	ab01      	add	r3, sp, #4
 8001c02:	791a      	ldrb	r2, [r3, #4]
        msb = data_array[5];
 8001c04:	795b      	ldrb	r3, [r3, #5]
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	80a3      	strh	r3, [r4, #4]
        if (accel->z > 2047)
 8001c0e:	2280      	movs	r2, #128	@ 0x80
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	4293      	cmp	r3, r2
 8001c14:	db04      	blt.n	8001c20 <get_accel_data+0x8c>
            accel->z = accel->z - 4096;
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	4a0f      	ldr	r2, [pc, #60]	@ (8001c58 <get_accel_data+0xc4>)
 8001c1a:	4694      	mov	ip, r2
 8001c1c:	4463      	add	r3, ip
 8001c1e:	80a3      	strh	r3, [r4, #4]
        if (data_sel == BMA400_DATA_ONLY)
 8001c20:	2d00      	cmp	r5, #0
 8001c22:	d10a      	bne.n	8001c3a <get_accel_data+0xa6>
            accel->sensortime = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60a3      	str	r3, [r4, #8]
}
 8001c28:	b004      	add	sp, #16
 8001c2a:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 6, dev);
 8001c2c:	0033      	movs	r3, r6
 8001c2e:	2206      	movs	r2, #6
 8001c30:	a901      	add	r1, sp, #4
 8001c32:	2004      	movs	r0, #4
 8001c34:	f7ff ff35 	bl	8001aa2 <bma400_get_regs>
 8001c38:	e7c0      	b.n	8001bbc <get_accel_data+0x28>
        if (data_sel == BMA400_DATA_SENSOR_TIME)
 8001c3a:	2d01      	cmp	r5, #1
 8001c3c:	d1f4      	bne.n	8001c28 <get_accel_data+0x94>
            time_0 = data_array[6];
 8001c3e:	a901      	add	r1, sp, #4
 8001c40:	798a      	ldrb	r2, [r1, #6]
            time_1 = ((uint16_t)data_array[7] << 8);
 8001c42:	79cb      	ldrb	r3, [r1, #7]
 8001c44:	021b      	lsls	r3, r3, #8
            time_2 = ((uint32_t)data_array[8] << 16);
 8001c46:	7a09      	ldrb	r1, [r1, #8]
 8001c48:	0409      	lsls	r1, r1, #16
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 8001c4a:	185b      	adds	r3, r3, r1
 8001c4c:	18d3      	adds	r3, r2, r3
 8001c4e:	60a3      	str	r3, [r4, #8]
 8001c50:	e7ea      	b.n	8001c28 <get_accel_data+0x94>
        rslt = BMA400_E_INVALID_CONFIG;
 8001c52:	2004      	movs	r0, #4
 8001c54:	4240      	negs	r0, r0
 8001c56:	e7e7      	b.n	8001c28 <get_accel_data+0x94>
 8001c58:	fffff000 	.word	0xfffff000

08001c5c <set_accel_conf>:
{
 8001c5c:	b530      	push	{r4, r5, lr}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	0004      	movs	r4, r0
 8001c62:	000d      	movs	r5, r1
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 8001c64:	4b22      	ldr	r3, [pc, #136]	@ (8001cf0 <set_accel_conf+0x94>)
 8001c66:	881a      	ldrh	r2, [r3, #0]
 8001c68:	4669      	mov	r1, sp
 8001c6a:	808a      	strh	r2, [r1, #4]
 8001c6c:	789b      	ldrb	r3, [r3, #2]
 8001c6e:	718b      	strb	r3, [r1, #6]
    rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8001c70:	002b      	movs	r3, r5
 8001c72:	2203      	movs	r2, #3
 8001c74:	a901      	add	r1, sp, #4
 8001c76:	2019      	movs	r0, #25
 8001c78:	f7ff ff13 	bl	8001aa2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d001      	beq.n	8001c84 <set_accel_conf+0x28>
}
 8001c80:	b003      	add	sp, #12
 8001c82:	bd30      	pop	{r4, r5, pc}
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8001c84:	a901      	add	r1, sp, #4
 8001c86:	7808      	ldrb	r0, [r1, #0]
 8001c88:	7962      	ldrb	r2, [r4, #5]
 8001c8a:	237f      	movs	r3, #127	@ 0x7f
 8001c8c:	4003      	ands	r3, r0
 8001c8e:	01d2      	lsls	r2, r2, #7
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	700b      	strb	r3, [r1, #0]
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 8001c96:	7920      	ldrb	r0, [r4, #4]
 8001c98:	0140      	lsls	r0, r0, #5
 8001c9a:	2260      	movs	r2, #96	@ 0x60
 8001c9c:	4002      	ands	r2, r0
 8001c9e:	2060      	movs	r0, #96	@ 0x60
 8001ca0:	4383      	bics	r3, r0
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	700b      	strb	r3, [r1, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 8001ca6:	7848      	ldrb	r0, [r1, #1]
 8001ca8:	7863      	ldrb	r3, [r4, #1]
 8001caa:	223f      	movs	r2, #63	@ 0x3f
 8001cac:	4002      	ands	r2, r0
 8001cae:	019b      	lsls	r3, r3, #6
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	704a      	strb	r2, [r1, #1]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 8001cb6:	78e0      	ldrb	r0, [r4, #3]
 8001cb8:	0100      	lsls	r0, r0, #4
 8001cba:	2330      	movs	r3, #48	@ 0x30
 8001cbc:	4003      	ands	r3, r0
 8001cbe:	2030      	movs	r0, #48	@ 0x30
 8001cc0:	4382      	bics	r2, r0
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	704a      	strb	r2, [r1, #1]
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 8001cc6:	7820      	ldrb	r0, [r4, #0]
 8001cc8:	230f      	movs	r3, #15
 8001cca:	439a      	bics	r2, r3
 8001ccc:	4003      	ands	r3, r0
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	704a      	strb	r2, [r1, #1]
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 8001cd2:	788b      	ldrb	r3, [r1, #2]
 8001cd4:	78a0      	ldrb	r0, [r4, #2]
 8001cd6:	0080      	lsls	r0, r0, #2
 8001cd8:	220c      	movs	r2, #12
 8001cda:	4002      	ands	r2, r0
 8001cdc:	200c      	movs	r0, #12
 8001cde:	4383      	bics	r3, r0
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	708b      	strb	r3, [r1, #2]
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8001ce4:	002b      	movs	r3, r5
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	300d      	adds	r0, #13
 8001cea:	f7ff fd6f 	bl	80017cc <bma400_set_regs>
 8001cee:	e7c7      	b.n	8001c80 <set_accel_conf+0x24>
 8001cf0:	080059e8 	.word	0x080059e8

08001cf4 <set_tap_conf>:
{
 8001cf4:	b530      	push	{r4, r5, lr}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	0005      	movs	r5, r0
 8001cfa:	000c      	movs	r4, r1
    uint8_t reg_data[2] = { 0, 0 };
 8001cfc:	a901      	add	r1, sp, #4
 8001cfe:	2300      	movs	r3, #0
 8001d00:	800b      	strh	r3, [r1, #0]
    rslt = bma400_get_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8001d02:	0023      	movs	r3, r4
 8001d04:	2202      	movs	r2, #2
 8001d06:	2057      	movs	r0, #87	@ 0x57
 8001d08:	f7ff fecb 	bl	8001aa2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	d001      	beq.n	8001d14 <set_tap_conf+0x20>
}
 8001d10:	b003      	add	sp, #12
 8001d12:	bd30      	pop	{r4, r5, pc}
        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_TAP_AXES_EN, tap_set->axes_sel);
 8001d14:	a901      	add	r1, sp, #4
 8001d16:	780b      	ldrb	r3, [r1, #0]
 8001d18:	7828      	ldrb	r0, [r5, #0]
 8001d1a:	00c0      	lsls	r0, r0, #3
 8001d1c:	2218      	movs	r2, #24
 8001d1e:	4002      	ands	r2, r0
 8001d20:	2018      	movs	r0, #24
 8001d22:	4383      	bics	r3, r0
 8001d24:	4313      	orrs	r3, r2
 8001d26:	700b      	strb	r3, [r1, #0]
        reg_data[0] = BMA400_SET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY, tap_set->sensitivity);
 8001d28:	7868      	ldrb	r0, [r5, #1]
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	4393      	bics	r3, r2
 8001d2e:	4002      	ands	r2, r0
 8001d30:	4313      	orrs	r3, r2
 8001d32:	700b      	strb	r3, [r1, #0]
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET_DT, tap_set->quiet_dt);
 8001d34:	784a      	ldrb	r2, [r1, #1]
 8001d36:	7928      	ldrb	r0, [r5, #4]
 8001d38:	0100      	lsls	r0, r0, #4
 8001d3a:	2330      	movs	r3, #48	@ 0x30
 8001d3c:	4003      	ands	r3, r0
 8001d3e:	2030      	movs	r0, #48	@ 0x30
 8001d40:	4382      	bics	r2, r0
 8001d42:	431a      	orrs	r2, r3
 8001d44:	704a      	strb	r2, [r1, #1]
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET, tap_set->quiet);
 8001d46:	78e8      	ldrb	r0, [r5, #3]
 8001d48:	0080      	lsls	r0, r0, #2
 8001d4a:	230c      	movs	r3, #12
 8001d4c:	4003      	ands	r3, r0
 8001d4e:	200c      	movs	r0, #12
 8001d50:	4382      	bics	r2, r0
 8001d52:	431a      	orrs	r2, r3
 8001d54:	704a      	strb	r2, [r1, #1]
        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH, tap_set->tics_th);
 8001d56:	78a8      	ldrb	r0, [r5, #2]
 8001d58:	2303      	movs	r3, #3
 8001d5a:	439a      	bics	r2, r3
 8001d5c:	4003      	ands	r3, r0
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	704a      	strb	r2, [r1, #1]
        rslt = bma400_set_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8001d62:	0023      	movs	r3, r4
 8001d64:	2202      	movs	r2, #2
 8001d66:	2057      	movs	r0, #87	@ 0x57
 8001d68:	f7ff fd30 	bl	80017cc <bma400_set_regs>
 8001d6c:	e7d0      	b.n	8001d10 <set_tap_conf+0x1c>

08001d6e <set_sensor_conf>:
{
 8001d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d70:	b083      	sub	sp, #12
 8001d72:	9001      	str	r0, [sp, #4]
 8001d74:	000c      	movs	r4, r1
 8001d76:	0016      	movs	r6, r2
    if (BMA400_ACCEL == conf->type)
 8001d78:	780b      	ldrb	r3, [r1, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d018      	beq.n	8001db0 <set_sensor_conf+0x42>
    enum bma400_int_chan int_map = BMA400_UNMAP_INT_PIN;
 8001d7e:	2200      	movs	r2, #0
    uint8_t int_enable = 0;
 8001d80:	2100      	movs	r1, #0
    int8_t rslt = BMA400_E_INVALID_CONFIG;
 8001d82:	2504      	movs	r5, #4
 8001d84:	426d      	negs	r5, r5
    if (BMA400_TAP_INT == conf->type)
 8001d86:	7823      	ldrb	r3, [r4, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d019      	beq.n	8001dc0 <set_sensor_conf+0x52>
    if (BMA400_ACTIVITY_CHANGE_INT == conf->type)
 8001d8c:	7823      	ldrb	r3, [r4, #0]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d01e      	beq.n	8001dd0 <set_sensor_conf+0x62>
    if (BMA400_GEN1_INT == conf->type)
 8001d92:	7823      	ldrb	r3, [r4, #0]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d023      	beq.n	8001de0 <set_sensor_conf+0x72>
    if (BMA400_GEN2_INT == conf->type)
 8001d98:	7827      	ldrb	r7, [r4, #0]
 8001d9a:	2f04      	cmp	r7, #4
 8001d9c:	d028      	beq.n	8001df0 <set_sensor_conf+0x82>
    if (BMA400_ORIENT_CHANGE_INT == conf->type)
 8001d9e:	7823      	ldrb	r3, [r4, #0]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d02d      	beq.n	8001e00 <set_sensor_conf+0x92>
    if (BMA400_STEP_COUNTER_INT == conf->type)
 8001da4:	7823      	ldrb	r3, [r4, #0]
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d032      	beq.n	8001e10 <set_sensor_conf+0xa2>
    if (rslt == BMA400_OK)
 8001daa:	2d00      	cmp	r5, #0
 8001dac:	d136      	bne.n	8001e1c <set_sensor_conf+0xae>
 8001dae:	e032      	b.n	8001e16 <set_sensor_conf+0xa8>
        rslt = set_accel_conf(&conf->param.accel, dev);
 8001db0:	1c88      	adds	r0, r1, #2
 8001db2:	0011      	movs	r1, r2
 8001db4:	f7ff ff52 	bl	8001c5c <set_accel_conf>
 8001db8:	0005      	movs	r5, r0
        int_map = conf->param.accel.int_chan;
 8001dba:	7a22      	ldrb	r2, [r4, #8]
        int_enable = BMA400_DATA_READY_INT_MAP;
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	e7e2      	b.n	8001d86 <set_sensor_conf+0x18>
        rslt = set_tap_conf(&conf->param.tap, dev);
 8001dc0:	1ca0      	adds	r0, r4, #2
 8001dc2:	0031      	movs	r1, r6
 8001dc4:	f7ff ff96 	bl	8001cf4 <set_tap_conf>
 8001dc8:	0005      	movs	r5, r0
        int_map = conf->param.tap.int_chan;
 8001dca:	79e2      	ldrb	r2, [r4, #7]
        int_enable = BMA400_TAP_INT_MAP;
 8001dcc:	2109      	movs	r1, #9
 8001dce:	e7dd      	b.n	8001d8c <set_sensor_conf+0x1e>
        rslt = set_activity_change_conf(&conf->param.act_ch, dev);
 8001dd0:	1ca0      	adds	r0, r4, #2
 8001dd2:	0031      	movs	r1, r6
 8001dd4:	f7ff fd3f 	bl	8001856 <set_activity_change_conf>
 8001dd8:	0005      	movs	r5, r0
        int_map = conf->param.act_ch.int_chan;
 8001dda:	79a2      	ldrb	r2, [r4, #6]
        int_enable = BMA400_ACT_CH_INT_MAP;
 8001ddc:	2108      	movs	r1, #8
 8001dde:	e7d8      	b.n	8001d92 <set_sensor_conf+0x24>
        rslt = set_gen1_int(&conf->param.gen_int, dev);
 8001de0:	1ca0      	adds	r0, r4, #2
 8001de2:	0031      	movs	r1, r6
 8001de4:	f7ff fd54 	bl	8001890 <set_gen1_int>
 8001de8:	0005      	movs	r5, r0
        int_map = conf->param.gen_int.int_chan;
 8001dea:	7ca2      	ldrb	r2, [r4, #18]
        int_enable = BMA400_GEN1_INT_MAP;
 8001dec:	2105      	movs	r1, #5
 8001dee:	e7d3      	b.n	8001d98 <set_sensor_conf+0x2a>
        rslt = set_gen2_int(&conf->param.gen_int, dev);
 8001df0:	1ca0      	adds	r0, r4, #2
 8001df2:	0031      	movs	r1, r6
 8001df4:	f7ff fd9b 	bl	800192e <set_gen2_int>
 8001df8:	0005      	movs	r5, r0
        int_map = conf->param.gen_int.int_chan;
 8001dfa:	7ca2      	ldrb	r2, [r4, #18]
        int_enable = BMA400_GEN2_INT_MAP;
 8001dfc:	0039      	movs	r1, r7
 8001dfe:	e7ce      	b.n	8001d9e <set_sensor_conf+0x30>
        rslt = set_orient_int(&conf->param.orient, dev);
 8001e00:	1ca0      	adds	r0, r4, #2
 8001e02:	0031      	movs	r1, r6
 8001e04:	f7ff fde2 	bl	80019cc <set_orient_int>
 8001e08:	0005      	movs	r5, r0
        int_map = conf->param.orient.int_chan;
 8001e0a:	7ba2      	ldrb	r2, [r4, #14]
        int_enable = BMA400_ORIENT_CH_INT_MAP;
 8001e0c:	2106      	movs	r1, #6
 8001e0e:	e7c9      	b.n	8001da4 <set_sensor_conf+0x36>
        int_map = conf->param.step_cnt.int_chan;
 8001e10:	78a2      	ldrb	r2, [r4, #2]
        int_enable = BMA400_STEP_INT_MAP;
 8001e12:	210a      	movs	r1, #10
        rslt = BMA400_OK;
 8001e14:	2500      	movs	r5, #0
        map_int_pin(data, int_enable, int_map);
 8001e16:	9801      	ldr	r0, [sp, #4]
 8001e18:	f7ff fb54 	bl	80014c4 <map_int_pin>
}
 8001e1c:	0028      	movs	r0, r5
 8001e1e:	b003      	add	sp, #12
 8001e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e22 <set_autowakeup_timeout>:
{
 8001e22:	b530      	push	{r4, r5, lr}
 8001e24:	b083      	sub	sp, #12
 8001e26:	0005      	movs	r5, r0
 8001e28:	000c      	movs	r4, r1
    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &data_array[1], 1, dev);
 8001e2a:	000b      	movs	r3, r1
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4669      	mov	r1, sp
 8001e30:	3105      	adds	r1, #5
 8001e32:	202d      	movs	r0, #45	@ 0x2d
 8001e34:	f7ff fe35 	bl	8001aa2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001e38:	2800      	cmp	r0, #0
 8001e3a:	d001      	beq.n	8001e40 <set_autowakeup_timeout+0x1e>
}
 8001e3c:	b003      	add	sp, #12
 8001e3e:	bd30      	pop	{r4, r5, pc}
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 8001e40:	a901      	add	r1, sp, #4
 8001e42:	784b      	ldrb	r3, [r1, #1]
 8001e44:	7828      	ldrb	r0, [r5, #0]
 8001e46:	0080      	lsls	r0, r0, #2
 8001e48:	2204      	movs	r2, #4
 8001e4a:	4002      	ands	r2, r0
 8001e4c:	2004      	movs	r0, #4
 8001e4e:	4383      	bics	r3, r0
 8001e50:	4313      	orrs	r3, r2
 8001e52:	704b      	strb	r3, [r1, #1]
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 8001e54:	8868      	ldrh	r0, [r5, #2]
        msb = BMA400_GET_BITS(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_MSB);
 8001e56:	1102      	asrs	r2, r0, #4
        data_array[0] = msb;
 8001e58:	700a      	strb	r2, [r1, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT_THRES, lsb);
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	0100      	lsls	r0, r0, #4
 8001e60:	4303      	orrs	r3, r0
 8001e62:	704b      	strb	r3, [r1, #1]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_0, data_array, 2, dev);
 8001e64:	0023      	movs	r3, r4
 8001e66:	3a0d      	subs	r2, #13
 8001e68:	202c      	movs	r0, #44	@ 0x2c
 8001e6a:	f7ff fcaf 	bl	80017cc <bma400_set_regs>
 8001e6e:	e7e5      	b.n	8001e3c <set_autowakeup_timeout+0x1a>

08001e70 <set_auto_low_power>:
{
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	0004      	movs	r4, r0
 8001e76:	000d      	movs	r5, r1
    rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8001e78:	000b      	movs	r3, r1
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4669      	mov	r1, sp
 8001e7e:	3107      	adds	r1, #7
 8001e80:	202b      	movs	r0, #43	@ 0x2b
 8001e82:	f7ff fe0e 	bl	8001aa2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001e86:	2800      	cmp	r0, #0
 8001e88:	d10d      	bne.n	8001ea6 <set_auto_low_power+0x36>
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_AUTO_LOW_POW, auto_lp_conf->auto_low_power_trigger);
 8001e8a:	466b      	mov	r3, sp
 8001e8c:	1dd9      	adds	r1, r3, #7
 8001e8e:	79db      	ldrb	r3, [r3, #7]
 8001e90:	7826      	ldrb	r6, [r4, #0]
 8001e92:	220f      	movs	r2, #15
 8001e94:	4393      	bics	r3, r2
 8001e96:	4032      	ands	r2, r6
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	700b      	strb	r3, [r1, #0]
        if (auto_lp_conf->auto_low_power_trigger & 0x0C)
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	4233      	tst	r3, r6
 8001ea0:	d103      	bne.n	8001eaa <set_auto_low_power+0x3a>
        if (rslt == BMA400_OK)
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d01d      	beq.n	8001ee2 <set_auto_low_power+0x72>
}
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd70      	pop	{r4, r5, r6, pc}
            rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8001eaa:	002b      	movs	r3, r5
 8001eac:	2201      	movs	r2, #1
 8001eae:	4669      	mov	r1, sp
 8001eb0:	3106      	adds	r1, #6
 8001eb2:	302a      	adds	r0, #42	@ 0x2a
 8001eb4:	f7ff fdf5 	bl	8001aa2 <bma400_get_regs>
            if (rslt == BMA400_OK)
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	d1f4      	bne.n	8001ea6 <set_auto_low_power+0x36>
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 8001ebc:	8862      	ldrh	r2, [r4, #2]
 8001ebe:	1113      	asrs	r3, r2, #4
 8001ec0:	4669      	mov	r1, sp
 8001ec2:	3106      	adds	r1, #6
 8001ec4:	700b      	strb	r3, [r1, #0]
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 8001ec6:	466b      	mov	r3, sp
 8001ec8:	1dd8      	adds	r0, r3, #7
 8001eca:	79dc      	ldrb	r4, [r3, #7]
 8001ecc:	230f      	movs	r3, #15
 8001ece:	4023      	ands	r3, r4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	7003      	strb	r3, [r0, #0]
                rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8001ed6:	002b      	movs	r3, r5
 8001ed8:	2201      	movs	r2, #1
 8001eda:	202a      	movs	r0, #42	@ 0x2a
 8001edc:	f7ff fc76 	bl	80017cc <bma400_set_regs>
 8001ee0:	e7df      	b.n	8001ea2 <set_auto_low_power+0x32>
            rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8001ee2:	002b      	movs	r3, r5
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4669      	mov	r1, sp
 8001ee8:	3107      	adds	r1, #7
 8001eea:	302b      	adds	r0, #43	@ 0x2b
 8001eec:	f7ff fc6e 	bl	80017cc <bma400_set_regs>
 8001ef0:	e7d9      	b.n	8001ea6 <set_auto_low_power+0x36>

08001ef2 <set_int_pin_conf>:
            break;
    }
}

static int8_t set_int_pin_conf(struct bma400_int_pin_conf int_conf, struct bma400_dev *dev)
{
 8001ef2:	b530      	push	{r4, r5, lr}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	ab01      	add	r3, sp, #4
 8001ef8:	8018      	strh	r0, [r3, #0]
 8001efa:	000c      	movs	r4, r1
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8001efc:	000b      	movs	r3, r1
 8001efe:	2201      	movs	r2, #1
 8001f00:	210f      	movs	r1, #15
 8001f02:	4469      	add	r1, sp
 8001f04:	2024      	movs	r0, #36	@ 0x24
 8001f06:	f7ff fdcc 	bl	8001aa2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 8001f0a:	2800      	cmp	r0, #0
 8001f0c:	d10c      	bne.n	8001f28 <set_int_pin_conf+0x36>
    {
        if (int_conf.int_chan == BMA400_INT_CHANNEL_1)
 8001f0e:	ab01      	add	r3, sp, #4
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d00a      	beq.n	8001f2c <set_int_pin_conf+0x3a>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
        }

        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d015      	beq.n	8001f46 <set_int_pin_conf+0x54>
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
        }

        /* Set the configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8001f1a:	0023      	movs	r3, r4
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	210f      	movs	r1, #15
 8001f20:	4469      	add	r1, sp
 8001f22:	2024      	movs	r0, #36	@ 0x24
 8001f24:	f7ff fc52 	bl	80017cc <bma400_set_regs>
    }

    return rslt;
}
 8001f28:	b005      	add	sp, #20
 8001f2a:	bd30      	pop	{r4, r5, pc}
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
 8001f2c:	300f      	adds	r0, #15
 8001f2e:	4468      	add	r0, sp
 8001f30:	7802      	ldrb	r2, [r0, #0]
 8001f32:	a901      	add	r1, sp, #4
 8001f34:	784d      	ldrb	r5, [r1, #1]
 8001f36:	006d      	lsls	r5, r5, #1
 8001f38:	2106      	movs	r1, #6
 8001f3a:	4029      	ands	r1, r5
 8001f3c:	2506      	movs	r5, #6
 8001f3e:	43aa      	bics	r2, r5
 8001f40:	430a      	orrs	r2, r1
 8001f42:	7002      	strb	r2, [r0, #0]
 8001f44:	e7e7      	b.n	8001f16 <set_int_pin_conf+0x24>
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 8001f46:	200f      	movs	r0, #15
 8001f48:	4468      	add	r0, sp
 8001f4a:	7803      	ldrb	r3, [r0, #0]
 8001f4c:	aa01      	add	r2, sp, #4
 8001f4e:	7851      	ldrb	r1, [r2, #1]
 8001f50:	0149      	lsls	r1, r1, #5
 8001f52:	2260      	movs	r2, #96	@ 0x60
 8001f54:	400a      	ands	r2, r1
 8001f56:	2160      	movs	r1, #96	@ 0x60
 8001f58:	438b      	bics	r3, r1
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	7003      	strb	r3, [r0, #0]
 8001f5e:	e7dc      	b.n	8001f1a <set_int_pin_conf+0x28>

08001f60 <set_fifo_conf>:

    return rslt;
}

static int8_t set_fifo_conf(const struct bma400_fifo_conf *fifo_conf, struct bma400_dev *dev)
{
 8001f60:	b530      	push	{r4, r5, lr}
 8001f62:	b083      	sub	sp, #12
 8001f64:	0004      	movs	r4, r0
 8001f66:	000d      	movs	r5, r1
    int8_t rslt;
    uint8_t data_array[3];
    uint8_t sens_data[3];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001f68:	0008      	movs	r0, r1
 8001f6a:	f7ff fa91 	bl	8001490 <null_ptr_check>

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d001      	beq.n	8001f76 <set_fifo_conf+0x16>
            }
        }
    }

    return rslt;
}
 8001f72:	b003      	add	sp, #12
 8001f74:	bd30      	pop	{r4, r5, pc}
        rslt = bma400_get_regs(BMA400_REG_FIFO_CONFIG_0, sens_data, 3, dev);
 8001f76:	002b      	movs	r3, r5
 8001f78:	2203      	movs	r2, #3
 8001f7a:	4669      	mov	r1, sp
 8001f7c:	3026      	adds	r0, #38	@ 0x26
 8001f7e:	f7ff fd90 	bl	8001aa2 <bma400_get_regs>
        if (rslt == BMA400_OK)
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d1f5      	bne.n	8001f72 <set_fifo_conf+0x12>
            data_array[0] = fifo_conf->conf_regs;
 8001f86:	7823      	ldrb	r3, [r4, #0]
 8001f88:	aa01      	add	r2, sp, #4
 8001f8a:	7013      	strb	r3, [r2, #0]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 8001f8c:	7862      	ldrb	r2, [r4, #1]
 8001f8e:	2a00      	cmp	r2, #0
 8001f90:	d106      	bne.n	8001fa0 <set_fifo_conf+0x40>
                data_array[0] = sens_data[0] & (~data_array[0]);
 8001f92:	466a      	mov	r2, sp
 8001f94:	7812      	ldrb	r2, [r2, #0]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	aa01      	add	r2, sp, #4
 8001f9e:	7013      	strb	r3, [r2, #0]
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 8001fa0:	8863      	ldrh	r3, [r4, #2]
 8001fa2:	78a0      	ldrb	r0, [r4, #2]
 8001fa4:	a901      	add	r1, sp, #4
 8001fa6:	7048      	strb	r0, [r1, #1]
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	708b      	strb	r3, [r1, #2]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 8001fac:	2207      	movs	r2, #7
 8001fae:	4013      	ands	r3, r2
 8001fb0:	708b      	strb	r3, [r1, #2]
            if ((data_array[1] == sens_data[1]) && (data_array[2] == sens_data[2]))
 8001fb2:	466a      	mov	r2, sp
 8001fb4:	7852      	ldrb	r2, [r2, #1]
 8001fb6:	4290      	cmp	r0, r2
 8001fb8:	d103      	bne.n	8001fc2 <set_fifo_conf+0x62>
 8001fba:	466a      	mov	r2, sp
 8001fbc:	7892      	ldrb	r2, [r2, #2]
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d006      	beq.n	8001fd0 <set_fifo_conf+0x70>
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 3, dev);
 8001fc2:	002b      	movs	r3, r5
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	a901      	add	r1, sp, #4
 8001fc8:	2026      	movs	r0, #38	@ 0x26
 8001fca:	f7ff fbff 	bl	80017cc <bma400_set_regs>
 8001fce:	e7d0      	b.n	8001f72 <set_fifo_conf+0x12>
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 1, dev);
 8001fd0:	002b      	movs	r3, r5
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2026      	movs	r0, #38	@ 0x26
 8001fd6:	f7ff fbf9 	bl	80017cc <bma400_set_regs>
 8001fda:	e7ca      	b.n	8001f72 <set_fifo_conf+0x12>

08001fdc <bma400_set_power_mode>:
{
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	0005      	movs	r5, r0
 8001fe2:	000e      	movs	r6, r1
    uint8_t reg_data = 0;
 8001fe4:	466b      	mov	r3, sp
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	71da      	strb	r2, [r3, #7]
    rslt = null_ptr_check(dev);
 8001fea:	0008      	movs	r0, r1
 8001fec:	f7ff fa50 	bl	8001490 <null_ptr_check>
 8001ff0:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 8001ff2:	d002      	beq.n	8001ffa <bma400_set_power_mode+0x1e>
}
 8001ff4:	0020      	movs	r0, r4
 8001ff6:	b002      	add	sp, #8
 8001ff8:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 8001ffa:	0033      	movs	r3, r6
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4669      	mov	r1, sp
 8002000:	3107      	adds	r1, #7
 8002002:	2019      	movs	r0, #25
 8002004:	f7ff fd4d 	bl	8001aa2 <bma400_get_regs>
 8002008:	1e04      	subs	r4, r0, #0
    if (rslt == BMA400_OK)
 800200a:	d1f3      	bne.n	8001ff4 <bma400_set_power_mode+0x18>
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 800200c:	466b      	mov	r3, sp
 800200e:	79da      	ldrb	r2, [r3, #7]
 8002010:	2303      	movs	r3, #3
 8002012:	402b      	ands	r3, r5
 8002014:	2103      	movs	r1, #3
 8002016:	438a      	bics	r2, r1
 8002018:	4313      	orrs	r3, r2
 800201a:	466a      	mov	r2, sp
 800201c:	71d3      	strb	r3, [r2, #7]
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 800201e:	0033      	movs	r3, r6
 8002020:	2201      	movs	r2, #1
 8002022:	4669      	mov	r1, sp
 8002024:	3107      	adds	r1, #7
 8002026:	2019      	movs	r0, #25
 8002028:	f7ff fbd0 	bl	80017cc <bma400_set_regs>
 800202c:	0004      	movs	r4, r0
        if (power_mode == BMA400_MODE_LOW_POWER)
 800202e:	2d01      	cmp	r5, #1
 8002030:	d004      	beq.n	800203c <bma400_set_power_mode+0x60>
            dev->delay_us(10000, dev->intf_ptr); /* TBC */
 8002032:	6973      	ldr	r3, [r6, #20]
 8002034:	6871      	ldr	r1, [r6, #4]
 8002036:	4804      	ldr	r0, [pc, #16]	@ (8002048 <bma400_set_power_mode+0x6c>)
 8002038:	4798      	blx	r3
 800203a:	e7db      	b.n	8001ff4 <bma400_set_power_mode+0x18>
            dev->delay_us(40000, dev->intf_ptr);
 800203c:	6973      	ldr	r3, [r6, #20]
 800203e:	6871      	ldr	r1, [r6, #4]
 8002040:	4802      	ldr	r0, [pc, #8]	@ (800204c <bma400_set_power_mode+0x70>)
 8002042:	4798      	blx	r3
 8002044:	e7d6      	b.n	8001ff4 <bma400_set_power_mode+0x18>
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	00002710 	.word	0x00002710
 800204c:	00009c40 	.word	0x00009c40

08002050 <bma400_get_accel_data>:
{
 8002050:	b570      	push	{r4, r5, r6, lr}
 8002052:	0006      	movs	r6, r0
 8002054:	000d      	movs	r5, r1
 8002056:	0014      	movs	r4, r2
    rslt = null_ptr_check(dev);
 8002058:	0010      	movs	r0, r2
 800205a:	f7ff fa19 	bl	8001490 <null_ptr_check>
    if ((rslt == BMA400_OK) && (accel != NULL))
 800205e:	2800      	cmp	r0, #0
 8002060:	d107      	bne.n	8002072 <bma400_get_accel_data+0x22>
 8002062:	2d00      	cmp	r5, #0
 8002064:	d008      	beq.n	8002078 <bma400_get_accel_data+0x28>
        rslt = get_accel_data(data_sel, accel, dev);
 8002066:	0022      	movs	r2, r4
 8002068:	0029      	movs	r1, r5
 800206a:	0030      	movs	r0, r6
 800206c:	f7ff fd92 	bl	8001b94 <get_accel_data>
}
 8002070:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BMA400_E_NULL_PTR;
 8002072:	2001      	movs	r0, #1
 8002074:	4240      	negs	r0, r0
 8002076:	e7fb      	b.n	8002070 <bma400_get_accel_data+0x20>
 8002078:	2001      	movs	r0, #1
 800207a:	4240      	negs	r0, r0
 800207c:	e7f8      	b.n	8002070 <bma400_get_accel_data+0x20>

0800207e <bma400_set_sensor_conf>:
{
 800207e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002080:	b083      	sub	sp, #12
 8002082:	0006      	movs	r6, r0
 8002084:	000f      	movs	r7, r1
 8002086:	0015      	movs	r5, r2
    uint8_t data_array[3] = { 0 };
 8002088:	2203      	movs	r2, #3
 800208a:	2100      	movs	r1, #0
 800208c:	a801      	add	r0, sp, #4
 800208e:	f002 fb65 	bl	800475c <memset>
    rslt = null_ptr_check(dev);
 8002092:	0028      	movs	r0, r5
 8002094:	f7ff f9fc 	bl	8001490 <null_ptr_check>
    if ((rslt == BMA400_OK) && (conf != NULL))
 8002098:	2800      	cmp	r0, #0
 800209a:	d124      	bne.n	80020e6 <bma400_set_sensor_conf+0x68>
 800209c:	2e00      	cmp	r6, #0
 800209e:	d025      	beq.n	80020ec <bma400_set_sensor_conf+0x6e>
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 80020a0:	002b      	movs	r3, r5
 80020a2:	2203      	movs	r2, #3
 80020a4:	a901      	add	r1, sp, #4
 80020a6:	3021      	adds	r0, #33	@ 0x21
 80020a8:	f7ff fcfb 	bl	8001aa2 <bma400_get_regs>
        if (rslt == BMA400_OK)
 80020ac:	2800      	cmp	r0, #0
 80020ae:	d001      	beq.n	80020b4 <bma400_set_sensor_conf+0x36>
}
 80020b0:	b003      	add	sp, #12
 80020b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80020b4:	2400      	movs	r4, #0
 80020b6:	42bc      	cmp	r4, r7
 80020b8:	d20c      	bcs.n	80020d4 <bma400_set_sensor_conf+0x56>
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d10a      	bne.n	80020d4 <bma400_set_sensor_conf+0x56>
                rslt = set_sensor_conf(data_array, conf + idx, dev);
 80020be:	00a1      	lsls	r1, r4, #2
 80020c0:	1909      	adds	r1, r1, r4
 80020c2:	0089      	lsls	r1, r1, #2
 80020c4:	1871      	adds	r1, r6, r1
 80020c6:	002a      	movs	r2, r5
 80020c8:	a801      	add	r0, sp, #4
 80020ca:	f7ff fe50 	bl	8001d6e <set_sensor_conf>
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80020ce:	3401      	adds	r4, #1
 80020d0:	b2a4      	uxth	r4, r4
 80020d2:	e7f0      	b.n	80020b6 <bma400_set_sensor_conf+0x38>
            if (rslt == BMA400_OK)
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d1eb      	bne.n	80020b0 <bma400_set_sensor_conf+0x32>
                rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 80020d8:	002b      	movs	r3, r5
 80020da:	2203      	movs	r2, #3
 80020dc:	a901      	add	r1, sp, #4
 80020de:	3021      	adds	r0, #33	@ 0x21
 80020e0:	f7ff fb74 	bl	80017cc <bma400_set_regs>
 80020e4:	e7e4      	b.n	80020b0 <bma400_set_sensor_conf+0x32>
        rslt = BMA400_E_NULL_PTR;
 80020e6:	2001      	movs	r0, #1
 80020e8:	4240      	negs	r0, r0
 80020ea:	e7e1      	b.n	80020b0 <bma400_set_sensor_conf+0x32>
 80020ec:	2001      	movs	r0, #1
 80020ee:	4240      	negs	r0, r0
 80020f0:	e7de      	b.n	80020b0 <bma400_set_sensor_conf+0x32>
	...

080020f4 <bma400_set_device_conf>:
{
 80020f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f6:	46ce      	mov	lr, r9
 80020f8:	4647      	mov	r7, r8
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b083      	sub	sp, #12
 80020fe:	0006      	movs	r6, r0
 8002100:	000f      	movs	r7, r1
 8002102:	4690      	mov	r8, r2
    uint8_t data_array[3] = { 0 };
 8002104:	2203      	movs	r2, #3
 8002106:	2100      	movs	r1, #0
 8002108:	a801      	add	r0, sp, #4
 800210a:	f002 fb27 	bl	800475c <memset>
    rslt = null_ptr_check(dev);
 800210e:	4640      	mov	r0, r8
 8002110:	f7ff f9be 	bl	8001490 <null_ptr_check>
    if ((rslt == BMA400_OK) && (conf != NULL))
 8002114:	2800      	cmp	r0, #0
 8002116:	d000      	beq.n	800211a <bma400_set_device_conf+0x26>
 8002118:	e06d      	b.n	80021f6 <bma400_set_device_conf+0x102>
 800211a:	2e00      	cmp	r6, #0
 800211c:	d100      	bne.n	8002120 <bma400_set_device_conf+0x2c>
 800211e:	e06d      	b.n	80021fc <bma400_set_device_conf+0x108>
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8002120:	4643      	mov	r3, r8
 8002122:	2203      	movs	r2, #3
 8002124:	a901      	add	r1, sp, #4
 8002126:	3021      	adds	r0, #33	@ 0x21
 8002128:	f7ff fcbb 	bl	8001aa2 <bma400_get_regs>
 800212c:	0005      	movs	r5, r0
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 800212e:	2400      	movs	r4, #0
 8002130:	e007      	b.n	8002142 <bma400_set_device_conf+0x4e>
                    rslt = set_autowakeup_timeout(&conf[idx].param.auto_wakeup, dev);
 8002132:	4648      	mov	r0, r9
 8002134:	3002      	adds	r0, #2
 8002136:	4641      	mov	r1, r8
 8002138:	f7ff fe73 	bl	8001e22 <set_autowakeup_timeout>
 800213c:	0005      	movs	r5, r0
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 800213e:	3401      	adds	r4, #1
 8002140:	b2a4      	uxth	r4, r4
 8002142:	42a7      	cmp	r7, r4
 8002144:	d947      	bls.n	80021d6 <bma400_set_device_conf+0xe2>
 8002146:	2d00      	cmp	r5, #0
 8002148:	d145      	bne.n	80021d6 <bma400_set_device_conf+0xe2>
            switch (conf[idx].type)
 800214a:	00a3      	lsls	r3, r4, #2
 800214c:	191b      	adds	r3, r3, r4
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	18f2      	adds	r2, r6, r3
 8002152:	4691      	mov	r9, r2
 8002154:	5cf3      	ldrb	r3, [r6, r3]
 8002156:	2b05      	cmp	r3, #5
 8002158:	d83a      	bhi.n	80021d0 <bma400_set_device_conf+0xdc>
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4a29      	ldr	r2, [pc, #164]	@ (8002204 <bma400_set_device_conf+0x110>)
 800215e:	58d3      	ldr	r3, [r2, r3]
 8002160:	469f      	mov	pc, r3
                    rslt = set_autowakeup_interrupt(&conf[idx].param.wakeup, dev);
 8002162:	464b      	mov	r3, r9
 8002164:	1c98      	adds	r0, r3, #2
 8002166:	4641      	mov	r1, r8
 8002168:	f7ff fc70 	bl	8001a4c <set_autowakeup_interrupt>
 800216c:	1e05      	subs	r5, r0, #0
                    if (rslt == BMA400_OK)
 800216e:	d1e6      	bne.n	800213e <bma400_set_device_conf+0x4a>
                        map_int_pin(data_array, BMA400_WAKEUP_INT_MAP, conf[idx].param.wakeup.int_chan);
 8002170:	464b      	mov	r3, r9
 8002172:	7a5a      	ldrb	r2, [r3, #9]
 8002174:	2107      	movs	r1, #7
 8002176:	a801      	add	r0, sp, #4
 8002178:	f7ff f9a4 	bl	80014c4 <map_int_pin>
 800217c:	e7df      	b.n	800213e <bma400_set_device_conf+0x4a>
                    rslt = set_auto_low_power(&conf[idx].param.auto_lp, dev);
 800217e:	4648      	mov	r0, r9
 8002180:	3002      	adds	r0, #2
 8002182:	4641      	mov	r1, r8
 8002184:	f7ff fe74 	bl	8001e70 <set_auto_low_power>
 8002188:	0005      	movs	r5, r0
                    break;
 800218a:	e7d8      	b.n	800213e <bma400_set_device_conf+0x4a>
                    rslt = set_int_pin_conf(conf[idx].param.int_conf, dev);
 800218c:	464b      	mov	r3, r9
 800218e:	8858      	ldrh	r0, [r3, #2]
 8002190:	4641      	mov	r1, r8
 8002192:	f7ff feae 	bl	8001ef2 <set_int_pin_conf>
 8002196:	0005      	movs	r5, r0
                    break;
 8002198:	e7d1      	b.n	800213e <bma400_set_device_conf+0x4a>
                    map_int_pin(data_array, BMA400_INT_OVERRUN_MAP, conf[idx].param.overrun_int.int_chan);
 800219a:	464b      	mov	r3, r9
 800219c:	789a      	ldrb	r2, [r3, #2]
 800219e:	210b      	movs	r1, #11
 80021a0:	a801      	add	r0, sp, #4
 80021a2:	f7ff f98f 	bl	80014c4 <map_int_pin>
                    break;
 80021a6:	e7ca      	b.n	800213e <bma400_set_device_conf+0x4a>
                    rslt = set_fifo_conf(&conf[idx].param.fifo_conf, dev);
 80021a8:	464b      	mov	r3, r9
 80021aa:	1c98      	adds	r0, r3, #2
 80021ac:	4641      	mov	r1, r8
 80021ae:	f7ff fed7 	bl	8001f60 <set_fifo_conf>
 80021b2:	1e05      	subs	r5, r0, #0
                    if (rslt == BMA400_OK)
 80021b4:	d1c3      	bne.n	800213e <bma400_set_device_conf+0x4a>
                        map_int_pin(data_array, BMA400_FIFO_WM_INT_MAP, conf[idx].param.fifo_conf.fifo_wm_channel);
 80021b6:	464b      	mov	r3, r9
 80021b8:	79da      	ldrb	r2, [r3, #7]
 80021ba:	2102      	movs	r1, #2
 80021bc:	a801      	add	r0, sp, #4
 80021be:	f7ff f981 	bl	80014c4 <map_int_pin>
                        map_int_pin(data_array, BMA400_FIFO_FULL_INT_MAP, conf[idx].param.fifo_conf.fifo_full_channel);
 80021c2:	464b      	mov	r3, r9
 80021c4:	799a      	ldrb	r2, [r3, #6]
 80021c6:	2103      	movs	r1, #3
 80021c8:	a801      	add	r0, sp, #4
 80021ca:	f7ff f97b 	bl	80014c4 <map_int_pin>
 80021ce:	e7b6      	b.n	800213e <bma400_set_device_conf+0x4a>
            switch (conf[idx].type)
 80021d0:	2504      	movs	r5, #4
 80021d2:	426d      	negs	r5, r5
 80021d4:	e7b3      	b.n	800213e <bma400_set_device_conf+0x4a>
        if (rslt == BMA400_OK)
 80021d6:	2d00      	cmp	r5, #0
 80021d8:	d005      	beq.n	80021e6 <bma400_set_device_conf+0xf2>
}
 80021da:	0028      	movs	r0, r5
 80021dc:	b003      	add	sp, #12
 80021de:	bcc0      	pop	{r6, r7}
 80021e0:	46b9      	mov	r9, r7
 80021e2:	46b0      	mov	r8, r6
 80021e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 80021e6:	4643      	mov	r3, r8
 80021e8:	2203      	movs	r2, #3
 80021ea:	a901      	add	r1, sp, #4
 80021ec:	2021      	movs	r0, #33	@ 0x21
 80021ee:	f7ff faed 	bl	80017cc <bma400_set_regs>
 80021f2:	0005      	movs	r5, r0
 80021f4:	e7f1      	b.n	80021da <bma400_set_device_conf+0xe6>
        rslt = BMA400_E_NULL_PTR;
 80021f6:	2501      	movs	r5, #1
 80021f8:	426d      	negs	r5, r5
 80021fa:	e7ee      	b.n	80021da <bma400_set_device_conf+0xe6>
 80021fc:	2501      	movs	r5, #1
 80021fe:	426d      	negs	r5, r5
 8002200:	e7eb      	b.n	80021da <bma400_set_device_conf+0xe6>
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	08005a98 	.word	0x08005a98

08002208 <set_auto_wakeup>:
{
 8002208:	b530      	push	{r4, r5, lr}
 800220a:	b083      	sub	sp, #12
 800220c:	0005      	movs	r5, r0
 800220e:	000c      	movs	r4, r1
    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 8002210:	000b      	movs	r3, r1
 8002212:	2201      	movs	r2, #1
 8002214:	4669      	mov	r1, sp
 8002216:	3107      	adds	r1, #7
 8002218:	202d      	movs	r0, #45	@ 0x2d
 800221a:	f7ff fc42 	bl	8001aa2 <bma400_get_regs>
    if (rslt == BMA400_OK)
 800221e:	2800      	cmp	r0, #0
 8002220:	d001      	beq.n	8002226 <set_auto_wakeup+0x1e>
}
 8002222:	b003      	add	sp, #12
 8002224:	bd30      	pop	{r4, r5, pc}
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 8002226:	466b      	mov	r3, sp
 8002228:	79db      	ldrb	r3, [r3, #7]
 800222a:	006d      	lsls	r5, r5, #1
 800222c:	2202      	movs	r2, #2
 800222e:	402a      	ands	r2, r5
 8002230:	2102      	movs	r1, #2
 8002232:	438b      	bics	r3, r1
 8002234:	4313      	orrs	r3, r2
 8002236:	466a      	mov	r2, sp
 8002238:	71d3      	strb	r3, [r2, #7]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 800223a:	0023      	movs	r3, r4
 800223c:	2201      	movs	r2, #1
 800223e:	4669      	mov	r1, sp
 8002240:	3107      	adds	r1, #7
 8002242:	302d      	adds	r0, #45	@ 0x2d
 8002244:	f7ff fac2 	bl	80017cc <bma400_set_regs>
 8002248:	e7eb      	b.n	8002222 <set_auto_wakeup+0x1a>

0800224a <user_i2c_read>:

    return rslt;
}

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 800224a:	b510      	push	{r4, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	0004      	movs	r4, r0
 8002250:	0018      	movs	r0, r3
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;

    if (HAL_I2C_Mem_Read(hi2c, BMA400_I2C_ADDR, reg_addr,
 8002252:	2301      	movs	r3, #1
 8002254:	425b      	negs	r3, r3
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	b292      	uxth	r2, r2
 800225a:	9201      	str	r2, [sp, #4]
 800225c:	9100      	str	r1, [sp, #0]
 800225e:	3302      	adds	r3, #2
 8002260:	0022      	movs	r2, r4
 8002262:	2128      	movs	r1, #40	@ 0x28
 8002264:	f001 f8ca 	bl	80033fc <HAL_I2C_Mem_Read>
 8002268:	2800      	cmp	r0, #0
 800226a:	d101      	bne.n	8002270 <user_i2c_read+0x26>
    }
    else
    {
        return BMA400_E_COM_FAIL;
    }
}
 800226c:	b004      	add	sp, #16
 800226e:	bd10      	pop	{r4, pc}
        return BMA400_E_COM_FAIL;
 8002270:	2002      	movs	r0, #2
 8002272:	4240      	negs	r0, r0
 8002274:	e7fa      	b.n	800226c <user_i2c_read+0x22>

08002276 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8002276:	b510      	push	{r4, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	0004      	movs	r4, r0
 800227c:	0018      	movs	r0, r3
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;

    if (HAL_I2C_Mem_Write(hi2c, BMA400_I2C_ADDR, reg_addr,
 800227e:	2301      	movs	r3, #1
 8002280:	425b      	negs	r3, r3
 8002282:	9302      	str	r3, [sp, #8]
 8002284:	b292      	uxth	r2, r2
 8002286:	9201      	str	r2, [sp, #4]
 8002288:	9100      	str	r1, [sp, #0]
 800228a:	3302      	adds	r3, #2
 800228c:	0022      	movs	r2, r4
 800228e:	2128      	movs	r1, #40	@ 0x28
 8002290:	f000 ffe4 	bl	800325c <HAL_I2C_Mem_Write>
 8002294:	2800      	cmp	r0, #0
 8002296:	d101      	bne.n	800229c <user_i2c_write+0x26>
    }
    else
    {
        return BMA400_E_COM_FAIL;
    }
}
 8002298:	b004      	add	sp, #16
 800229a:	bd10      	pop	{r4, pc}
        return BMA400_E_COM_FAIL;
 800229c:	2002      	movs	r0, #2
 800229e:	4240      	negs	r0, r0
 80022a0:	e7fa      	b.n	8002298 <user_i2c_write+0x22>

080022a2 <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 80022a2:	b510      	push	{r4, lr}
    // Zakładamy, że potrzebne opóźnienia mają ≥ 1000us (1ms)
    HAL_Delay(period / 1000);
 80022a4:	21fa      	movs	r1, #250	@ 0xfa
 80022a6:	0089      	lsls	r1, r1, #2
 80022a8:	f7fd ff40 	bl	800012c <__udivsi3>
 80022ac:	f000 fc44 	bl	8002b38 <HAL_Delay>

    // Jeśli potrzebujesz dokładniejszych opóźnień — patrz niżej
}
 80022b0:	bd10      	pop	{r4, pc}
	...

080022b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b6:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	2214      	movs	r2, #20
 80022ba:	2100      	movs	r1, #0
 80022bc:	a805      	add	r0, sp, #20
 80022be:	f002 fa4d 	bl	800475c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c2:	4b22      	ldr	r3, [pc, #136]	@ (800234c <MX_GPIO_Init+0x98>)
 80022c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022c6:	2404      	movs	r4, #4
 80022c8:	4322      	orrs	r2, r4
 80022ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80022cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ce:	4022      	ands	r2, r4
 80022d0:	9201      	str	r2, [sp, #4]
 80022d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022d6:	2220      	movs	r2, #32
 80022d8:	4311      	orrs	r1, r2
 80022da:	6359      	str	r1, [r3, #52]	@ 0x34
 80022dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022de:	400a      	ands	r2, r1
 80022e0:	9202      	str	r2, [sp, #8]
 80022e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022e6:	2501      	movs	r5, #1
 80022e8:	432a      	orrs	r2, r5
 80022ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80022ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ee:	402a      	ands	r2, r5
 80022f0:	9203      	str	r2, [sp, #12]
 80022f2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022f6:	2202      	movs	r2, #2
 80022f8:	4311      	orrs	r1, r2
 80022fa:	6359      	str	r1, [r3, #52]	@ 0x34
 80022fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022fe:	401a      	ands	r2, r3
 8002300:	9204      	str	r2, [sp, #16]
 8002302:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_IO_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002304:	27d0      	movs	r7, #208	@ 0xd0
 8002306:	007f      	lsls	r7, r7, #1
 8002308:	26a0      	movs	r6, #160	@ 0xa0
 800230a:	05f6      	lsls	r6, r6, #23
 800230c:	2200      	movs	r2, #0
 800230e:	0039      	movs	r1, r7
 8002310:	0030      	movs	r0, r6
 8002312:	f000 fd63 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8002316:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2400      	movs	r4, #0
 800231a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 800231e:	a905      	add	r1, sp, #20
 8002320:	480b      	ldr	r0, [pc, #44]	@ (8002350 <MX_GPIO_Init+0x9c>)
 8002322:	f000 fc83 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_IO_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = EN_IO_Pin|LED1_Pin|LED2_Pin;
 8002326:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002328:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232e:	a905      	add	r1, sp, #20
 8002330:	0030      	movs	r0, r6
 8002332:	f000 fc7b 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002336:	2340      	movs	r3, #64	@ 0x40
 8002338:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800233e:	a905      	add	r1, sp, #20
 8002340:	0030      	movs	r0, r6
 8002342:	f000 fc73 	bl	8002c2c <HAL_GPIO_Init>

}
 8002346:	b00b      	add	sp, #44	@ 0x2c
 8002348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234a:	46c0      	nop			@ (mov r8, r8)
 800234c:	40021000 	.word	0x40021000
 8002350:	50001400 	.word	0x50001400

08002354 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002354:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002356:	4814      	ldr	r0, [pc, #80]	@ (80023a8 <MX_I2C1_Init+0x54>)
 8002358:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <MX_I2C1_Init+0x58>)
 800235a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00402D41;
 800235c:	4b14      	ldr	r3, [pc, #80]	@ (80023b0 <MX_I2C1_Init+0x5c>)
 800235e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002364:	2201      	movs	r2, #1
 8002366:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002368:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800236a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800236c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800236e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002370:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002372:	f000 ff05 	bl	8003180 <HAL_I2C_Init>
 8002376:	2800      	cmp	r0, #0
 8002378:	d10c      	bne.n	8002394 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800237a:	480b      	ldr	r0, [pc, #44]	@ (80023a8 <MX_I2C1_Init+0x54>)
 800237c:	2100      	movs	r1, #0
 800237e:	f001 f911 	bl	80035a4 <HAL_I2CEx_ConfigAnalogFilter>
 8002382:	2800      	cmp	r0, #0
 8002384:	d109      	bne.n	800239a <MX_I2C1_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002386:	4808      	ldr	r0, [pc, #32]	@ (80023a8 <MX_I2C1_Init+0x54>)
 8002388:	2100      	movs	r1, #0
 800238a:	f001 f937 	bl	80035fc <HAL_I2CEx_ConfigDigitalFilter>
 800238e:	2800      	cmp	r0, #0
 8002390:	d106      	bne.n	80023a0 <MX_I2C1_Init+0x4c>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002392:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002394:	f000 f97e 	bl	8002694 <Error_Handler>
 8002398:	e7ef      	b.n	800237a <MX_I2C1_Init+0x26>
    Error_Handler();
 800239a:	f000 f97b 	bl	8002694 <Error_Handler>
 800239e:	e7f2      	b.n	8002386 <MX_I2C1_Init+0x32>
    Error_Handler();
 80023a0:	f000 f978 	bl	8002694 <Error_Handler>
}
 80023a4:	e7f5      	b.n	8002392 <MX_I2C1_Init+0x3e>
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	20000098 	.word	0x20000098
 80023ac:	40005400 	.word	0x40005400
 80023b0:	00402d41 	.word	0x00402d41

080023b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023b4:	b510      	push	{r4, lr}
 80023b6:	b08e      	sub	sp, #56	@ 0x38
 80023b8:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ba:	2214      	movs	r2, #20
 80023bc:	2100      	movs	r1, #0
 80023be:	a809      	add	r0, sp, #36	@ 0x24
 80023c0:	f002 f9cc 	bl	800475c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023c4:	221c      	movs	r2, #28
 80023c6:	2100      	movs	r1, #0
 80023c8:	a802      	add	r0, sp, #8
 80023ca:	f002 f9c7 	bl	800475c <memset>
  if(i2cHandle->Instance==I2C1)
 80023ce:	6822      	ldr	r2, [r4, #0]
 80023d0:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <HAL_I2C_MspInit+0x7c>)
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80023d6:	b00e      	add	sp, #56	@ 0x38
 80023d8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023da:	2302      	movs	r3, #2
 80023dc:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023de:	a802      	add	r0, sp, #8
 80023e0:	f001 fbd2 	bl	8003b88 <HAL_RCCEx_PeriphCLKConfig>
 80023e4:	2800      	cmp	r0, #0
 80023e6:	d120      	bne.n	800242a <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	4c12      	ldr	r4, [pc, #72]	@ (8002434 <HAL_I2C_MspInit+0x80>)
 80023ea:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80023ec:	2302      	movs	r3, #2
 80023ee:	431a      	orrs	r2, r3
 80023f0:	6362      	str	r2, [r4, #52]	@ 0x34
 80023f2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80023f4:	4013      	ands	r3, r2
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023fa:	23c0      	movs	r3, #192	@ 0xc0
 80023fc:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023fe:	3bae      	subs	r3, #174	@ 0xae
 8002400:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002402:	3b11      	subs	r3, #17
 8002404:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800240a:	3306      	adds	r3, #6
 800240c:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240e:	a909      	add	r1, sp, #36	@ 0x24
 8002410:	4809      	ldr	r0, [pc, #36]	@ (8002438 <HAL_I2C_MspInit+0x84>)
 8002412:	f000 fc0b 	bl	8002c2c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002416:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002418:	2280      	movs	r2, #128	@ 0x80
 800241a:	0392      	lsls	r2, r2, #14
 800241c:	4313      	orrs	r3, r2
 800241e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002420:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002422:	4013      	ands	r3, r2
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	9b01      	ldr	r3, [sp, #4]
}
 8002428:	e7d5      	b.n	80023d6 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800242a:	f000 f933 	bl	8002694 <Error_Handler>
 800242e:	e7db      	b.n	80023e8 <HAL_I2C_MspInit+0x34>
 8002430:	40005400 	.word	0x40005400
 8002434:	40021000 	.word	0x40021000
 8002438:	50000400 	.word	0x50000400

0800243c <enterStandby>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enterStandby(void)
{
 800243c:	b510      	push	{r4, lr}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 800243e:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <enterStandby+0x14>)
 8002440:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <enterStandby+0x18>)
 8002442:	619a      	str	r2, [r3, #24]
  	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002444:	2001      	movs	r0, #1
 8002446:	f001 f903 	bl	8003650 <HAL_PWR_EnableWakeUpPin>
    HAL_PWR_EnterSTANDBYMode();
 800244a:	f001 f90f 	bl	800366c <HAL_PWR_EnterSTANDBYMode>
}
 800244e:	bd10      	pop	{r4, pc}
 8002450:	40007000 	.word	0x40007000
 8002454:	0001002f 	.word	0x0001002f

08002458 <configureBMA400>:

// Configure BMA400 for low power + wake-up on Y-axis motion
void configureBMA400(struct bma400_dev *dev)
{
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245a:	b08f      	sub	sp, #60	@ 0x3c
 800245c:	0005      	movs	r5, r0
	bma400_set_power_mode(BMA400_MODE_LOW_POWER, dev);
 800245e:	0001      	movs	r1, r0
 8002460:	2001      	movs	r0, #1
 8002462:	f7ff fdbb 	bl	8001fdc <bma400_set_power_mode>

	struct bma400_device_conf dev_conf[] = {
 8002466:	ac06      	add	r4, sp, #24
 8002468:	221e      	movs	r2, #30
 800246a:	2100      	movs	r1, #0
 800246c:	0020      	movs	r0, r4
 800246e:	f002 f975 	bl	800475c <memset>
 8002472:	2302      	movs	r3, #2
 8002474:	7023      	strb	r3, [r4, #0]
 8002476:	220e      	movs	r2, #14
 8002478:	70a2      	strb	r2, [r4, #2]
 800247a:	32ba      	adds	r2, #186	@ 0xba
 800247c:	80a2      	strh	r2, [r4, #4]
 800247e:	2601      	movs	r6, #1
 8002480:	72a6      	strb	r6, [r4, #10]
 8002482:	7323      	strb	r3, [r4, #12]
 8002484:	73a3      	strb	r3, [r4, #14]
 8002486:	3ac3      	subs	r2, #195	@ 0xc3
 8002488:	73e2      	strb	r2, [r4, #15]
 800248a:	74e6      	strb	r6, [r4, #19]
 800248c:	2703      	movs	r7, #3
 800248e:	7527      	strb	r7, [r4, #20]
 8002490:	75a6      	strb	r6, [r4, #22]
 8002492:	75e3      	strb	r3, [r4, #23]
				.pin_conf = BMA400_INT_OPEN_DRAIN_ACTIVE_0
			}
		}
	};

	bma400_set_device_conf(dev_conf, 3, dev);
 8002494:	002a      	movs	r2, r5
 8002496:	2103      	movs	r1, #3
 8002498:	0020      	movs	r0, r4
 800249a:	f7ff fe2b 	bl	80020f4 <bma400_set_device_conf>

	struct bma400_sensor_conf sensor_conf = {
 800249e:	ac01      	add	r4, sp, #4
 80024a0:	2214      	movs	r2, #20
 80024a2:	2100      	movs	r1, #0
 80024a4:	0020      	movs	r0, r4
 80024a6:	f002 f959 	bl	800475c <memset>
 80024aa:	2308      	movs	r3, #8
 80024ac:	70a3      	strb	r3, [r4, #2]
 80024ae:	7126      	strb	r6, [r4, #4]
 80024b0:	7167      	strb	r7, [r4, #5]
			.osr = BMA400_ACCEL_OSR_SETTING_3,
			.odr = BMA400_ODR_100HZ
		}
	};

	bma400_set_sensor_conf(&sensor_conf, 1, dev);
 80024b2:	002a      	movs	r2, r5
 80024b4:	2101      	movs	r1, #1
 80024b6:	0020      	movs	r0, r4
 80024b8:	f7ff fde1 	bl	800207e <bma400_set_sensor_conf>
	set_auto_wakeup(BMA400_ENABLE, dev);	// enable auto wake up
 80024bc:	0029      	movs	r1, r5
 80024be:	2001      	movs	r0, #1
 80024c0:	f7ff fea2 	bl	8002208 <set_auto_wakeup>
}
 80024c4:	b00f      	add	sp, #60	@ 0x3c
 80024c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024c8 <detectGateMotion>:

bool detectGateMotion(const int16_t *data)
{
 80024c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ca:	46ce      	mov	lr, r9
 80024cc:	4647      	mov	r7, r8
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b085      	sub	sp, #20
 80024d2:	4680      	mov	r8, r0
    float sigma[4] = {0};
 80024d4:	2210      	movs	r2, #16
 80024d6:	2100      	movs	r1, #0
 80024d8:	4668      	mov	r0, sp
 80024da:	f002 f93f 	bl	800475c <memset>

    // calculate SD from 4 blocks of 8 samples each
    for (uint8_t block = 0; block < 4; block++)
 80024de:	2700      	movs	r7, #0
 80024e0:	e035      	b.n	800254e <detectGateMotion+0x86>
        const int16_t *ptr = &data[block * 8];			// pointer to start of current block

        // calculate mean of the 8 samples
        for (uint8_t i = 0; i < 8; i++)
        {
            sum += ptr[i];
 80024e2:	0063      	lsls	r3, r4, #1
 80024e4:	5f98      	ldrsh	r0, [r3, r6]
 80024e6:	f7fe ff65 	bl	80013b4 <__aeabi_i2f>
 80024ea:	1c01      	adds	r1, r0, #0
 80024ec:	1c28      	adds	r0, r5, #0
 80024ee:	f7fd ffcd 	bl	800048c <__aeabi_fadd>
 80024f2:	1c05      	adds	r5, r0, #0
        for (uint8_t i = 0; i < 8; i++)
 80024f4:	3401      	adds	r4, #1
 80024f6:	b2e4      	uxtb	r4, r4
 80024f8:	2c07      	cmp	r4, #7
 80024fa:	d9f2      	bls.n	80024e2 <detectGateMotion+0x1a>
        }
        mean = sum / 8.0f;
 80024fc:	21f8      	movs	r1, #248	@ 0xf8
 80024fe:	0589      	lsls	r1, r1, #22
 8002500:	1c28      	adds	r0, r5, #0
 8002502:	f7fe fb83 	bl	8000c0c <__aeabi_fmul>
 8002506:	4681      	mov	r9, r0

        // calculate sum of squared differences from the mean
        for (uint8_t i = 0; i < 8; i++)
 8002508:	2400      	movs	r4, #0
        float sum = 0, mean = 0, sum_diff_squared = 0;
 800250a:	2500      	movs	r5, #0
        for (uint8_t i = 0; i < 8; i++)
 800250c:	e011      	b.n	8002532 <detectGateMotion+0x6a>
        {
        	sum_diff_squared += powf(ptr[i] - mean, 2);
 800250e:	0063      	lsls	r3, r4, #1
 8002510:	5f98      	ldrsh	r0, [r3, r6]
 8002512:	f7fe ff4f 	bl	80013b4 <__aeabi_i2f>
 8002516:	4649      	mov	r1, r9
 8002518:	f7fe fcd2 	bl	8000ec0 <__aeabi_fsub>
 800251c:	2180      	movs	r1, #128	@ 0x80
 800251e:	05c9      	lsls	r1, r1, #23
 8002520:	f002 fd84 	bl	800502c <powf>
 8002524:	1c01      	adds	r1, r0, #0
 8002526:	1c28      	adds	r0, r5, #0
 8002528:	f7fd ffb0 	bl	800048c <__aeabi_fadd>
 800252c:	1c05      	adds	r5, r0, #0
        for (uint8_t i = 0; i < 8; i++)
 800252e:	3401      	adds	r4, #1
 8002530:	b2e4      	uxtb	r4, r4
 8002532:	2c07      	cmp	r4, #7
 8002534:	d9eb      	bls.n	800250e <detectGateMotion+0x46>
        }

        sigma[block] = sqrtf(sum_diff_squared / 8.0f); // calculate standard deviation
 8002536:	21f8      	movs	r1, #248	@ 0xf8
 8002538:	0589      	lsls	r1, r1, #22
 800253a:	1c28      	adds	r0, r5, #0
 800253c:	f7fe fb66 	bl	8000c0c <__aeabi_fmul>
 8002540:	f002 fdc8 	bl	80050d4 <sqrtf>
 8002544:	00bb      	lsls	r3, r7, #2
 8002546:	466a      	mov	r2, sp
 8002548:	50d0      	str	r0, [r2, r3]
    for (uint8_t block = 0; block < 4; block++)
 800254a:	3701      	adds	r7, #1
 800254c:	b2ff      	uxtb	r7, r7
 800254e:	2f03      	cmp	r7, #3
 8002550:	d804      	bhi.n	800255c <detectGateMotion+0x94>
        const int16_t *ptr = &data[block * 8];			// pointer to start of current block
 8002552:	013e      	lsls	r6, r7, #4
 8002554:	4446      	add	r6, r8
        for (uint8_t i = 0; i < 8; i++)
 8002556:	2400      	movs	r4, #0
        float sum = 0, mean = 0, sum_diff_squared = 0;
 8002558:	2500      	movs	r5, #0
        for (uint8_t i = 0; i < 8; i++)
 800255a:	e7cd      	b.n	80024f8 <detectGateMotion+0x30>
    }

    // count how many times the difference between adjacent sigmas exceeds threshold (5 LSB)
    uint8_t count = 0;
    for (uint8_t i = 0; i < 3; i++)
 800255c:	2400      	movs	r4, #0
    uint8_t count = 0;
 800255e:	2500      	movs	r5, #0
 8002560:	e001      	b.n	8002566 <detectGateMotion+0x9e>
    for (uint8_t i = 0; i < 3; i++)
 8002562:	3401      	adds	r4, #1
 8002564:	b2e4      	uxtb	r4, r4
 8002566:	2c02      	cmp	r4, #2
 8002568:	d812      	bhi.n	8002590 <detectGateMotion+0xc8>
    {
        float diff = fabsf(sigma[i + 1] - sigma[i]);
 800256a:	1c63      	adds	r3, r4, #1
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	466a      	mov	r2, sp
 8002570:	5898      	ldr	r0, [r3, r2]
 8002572:	00a3      	lsls	r3, r4, #2
 8002574:	5899      	ldr	r1, [r3, r2]
 8002576:	f7fe fca3 	bl	8000ec0 <__aeabi_fsub>
 800257a:	0040      	lsls	r0, r0, #1
 800257c:	0840      	lsrs	r0, r0, #1
        if (diff >= 2.0f)
 800257e:	2180      	movs	r1, #128	@ 0x80
 8002580:	05c9      	lsls	r1, r1, #23
 8002582:	f7fd ff79 	bl	8000478 <__aeabi_fcmpge>
 8002586:	2800      	cmp	r0, #0
 8002588:	d0eb      	beq.n	8002562 <detectGateMotion+0x9a>
            count++;
 800258a:	3501      	adds	r5, #1
 800258c:	b2ed      	uxtb	r5, r5
 800258e:	e7e8      	b.n	8002562 <detectGateMotion+0x9a>
    }

    return (count >= 2); // if 3 times threshold was exceeded -> motion detected
 8002590:	2001      	movs	r0, #1
 8002592:	42a8      	cmp	r0, r5
 8002594:	4180      	sbcs	r0, r0
 8002596:	4240      	negs	r0, r0
}
 8002598:	b005      	add	sp, #20
 800259a:	bcc0      	pop	{r6, r7}
 800259c:	46b9      	mov	r9, r7
 800259e:	46b0      	mov	r8, r6
 80025a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025a4 <Send16BitESP>:

void Send16BitESP(UART_HandleTypeDef *huart, uint16_t value) {
 80025a4:	b530      	push	{r4, r5, lr}
 80025a6:	b085      	sub	sp, #20
 80025a8:	0004      	movs	r4, r0
 80025aa:	000b      	movs	r3, r1
	char msg[16];
	snprintf(msg, sizeof(msg), "%u\n", value);
 80025ac:	4a11      	ldr	r2, [pc, #68]	@ (80025f4 <Send16BitESP+0x50>)
 80025ae:	2110      	movs	r1, #16
 80025b0:	4668      	mov	r0, sp
 80025b2:	f002 f88b 	bl	80046cc <sniprintf>

	HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, SET);
 80025b6:	25a0      	movs	r5, #160	@ 0xa0
 80025b8:	05ed      	lsls	r5, r5, #23
 80025ba:	2201      	movs	r2, #1
 80025bc:	2120      	movs	r1, #32
 80025be:	0028      	movs	r0, r5
 80025c0:	f000 fc0c 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80025c4:	2096      	movs	r0, #150	@ 0x96
 80025c6:	0040      	lsls	r0, r0, #1
 80025c8:	f000 fab6 	bl	8002b38 <HAL_Delay>
	HAL_UART_Transmit(huart, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80025cc:	4668      	mov	r0, sp
 80025ce:	f7fd fd9b 	bl	8000108 <strlen>
 80025d2:	2301      	movs	r3, #1
 80025d4:	b282      	uxth	r2, r0
 80025d6:	425b      	negs	r3, r3
 80025d8:	4669      	mov	r1, sp
 80025da:	0020      	movs	r0, r4
 80025dc:	f001 febf 	bl	800435e <HAL_UART_Transmit>
	HAL_Delay(10);
 80025e0:	200a      	movs	r0, #10
 80025e2:	f000 faa9 	bl	8002b38 <HAL_Delay>
	HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, RESET);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2120      	movs	r1, #32
 80025ea:	0028      	movs	r0, r5
 80025ec:	f000 fbf6 	bl	8002ddc <HAL_GPIO_WritePin>
}
 80025f0:	b005      	add	sp, #20
 80025f2:	bd30      	pop	{r4, r5, pc}
 80025f4:	08005ab0 	.word	0x08005ab0

080025f8 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b500      	push	{lr}
 80025fa:	b085      	sub	sp, #20
	if (htim->Instance == TIM14)
 80025fc:	6802      	ldr	r2, [r0, #0]
 80025fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_TIM_PeriodElapsedCallback+0x10>
			{
				y_samples[0] = sample.y;
			}
		}
	}
}
 8002604:	b005      	add	sp, #20
 8002606:	bd00      	pop	{pc}
		motion_time++;
 8002608:	4a1b      	ldr	r2, [pc, #108]	@ (8002678 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800260a:	8813      	ldrh	r3, [r2, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	b29b      	uxth	r3, r3
 8002610:	8013      	strh	r3, [r2, #0]
		tick_counter++;
 8002612:	4a1a      	ldr	r2, [pc, #104]	@ (800267c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002614:	8813      	ldrh	r3, [r2, #0]
 8002616:	3301      	adds	r3, #1
 8002618:	b29b      	uxth	r3, r3
 800261a:	8013      	strh	r3, [r2, #0]
		if (tick_counter >= 2000)
 800261c:	22fa      	movs	r2, #250	@ 0xfa
 800261e:	00d2      	lsls	r2, r2, #3
 8002620:	4293      	cmp	r3, r2
 8002622:	d30a      	bcc.n	800263a <HAL_TIM_PeriodElapsedCallback+0x42>
			tick_counter = 0;
 8002624:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002626:	2200      	movs	r2, #0
 8002628:	801a      	strh	r2, [r3, #0]
			flag_2sec = 1;
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800262c:	3201      	adds	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
			send_2sec = motion_time;
 8002630:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	4a13      	ldr	r2, [pc, #76]	@ (8002684 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002638:	8013      	strh	r3, [r2, #0]
		accel_tick++;
 800263a:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800263c:	7813      	ldrb	r3, [r2, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	7013      	strb	r3, [r2, #0]
		if (accel_tick >= 10)
 8002644:	2b09      	cmp	r3, #9
 8002646:	d9dd      	bls.n	8002604 <HAL_TIM_PeriodElapsedCallback+0xc>
			accel_tick = 0;
 8002648:	0013      	movs	r3, r2
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
			memmove(&y_samples[1], &y_samples[0], sizeof(int16_t) * 31);
 800264e:	490f      	ldr	r1, [pc, #60]	@ (800268c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002650:	1c88      	adds	r0, r1, #2
 8002652:	323e      	adds	r2, #62	@ 0x3e
 8002654:	f002 f870 	bl	8004738 <memmove>
			if (bma400_get_accel_data(BMA400_DATA_ONLY, &sample, &bma400) == BMA400_OK)
 8002658:	4a0d      	ldr	r2, [pc, #52]	@ (8002690 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800265a:	a901      	add	r1, sp, #4
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff fcf7 	bl	8002050 <bma400_get_accel_data>
 8002662:	2800      	cmp	r0, #0
 8002664:	d1ce      	bne.n	8002604 <HAL_TIM_PeriodElapsedCallback+0xc>
				y_samples[0] = sample.y;
 8002666:	ab01      	add	r3, sp, #4
 8002668:	2202      	movs	r2, #2
 800266a:	5e9a      	ldrsh	r2, [r3, r2]
 800266c:	4b07      	ldr	r3, [pc, #28]	@ (800268c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800266e:	801a      	strh	r2, [r3, #0]
}
 8002670:	e7c8      	b.n	8002604 <HAL_TIM_PeriodElapsedCallback+0xc>
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	40002000 	.word	0x40002000
 8002678:	20000134 	.word	0x20000134
 800267c:	200000ee 	.word	0x200000ee
 8002680:	20000132 	.word	0x20000132
 8002684:	20000130 	.word	0x20000130
 8002688:	200000ec 	.word	0x200000ec
 800268c:	200000f0 	.word	0x200000f0
 8002690:	20000000 	.word	0x20000000

08002694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002694:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8002696:	2180      	movs	r1, #128	@ 0x80
 8002698:	20a0      	movs	r0, #160	@ 0xa0
 800269a:	2201      	movs	r2, #1
 800269c:	0049      	lsls	r1, r1, #1
 800269e:	05c0      	lsls	r0, r0, #23
 80026a0:	f000 fb9c 	bl	8002ddc <HAL_GPIO_WritePin>
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <Error_Handler+0x10>
	...

080026a8 <SystemClock_Config>:
{
 80026a8:	b500      	push	{lr}
 80026aa:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ac:	221c      	movs	r2, #28
 80026ae:	2100      	movs	r1, #0
 80026b0:	a805      	add	r0, sp, #20
 80026b2:	f002 f853 	bl	800475c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b6:	2214      	movs	r2, #20
 80026b8:	2100      	movs	r1, #0
 80026ba:	4668      	mov	r0, sp
 80026bc:	f002 f84e 	bl	800475c <memset>
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80026c0:	4a12      	ldr	r2, [pc, #72]	@ (800270c <SystemClock_Config+0x64>)
 80026c2:	6813      	ldr	r3, [r2, #0]
 80026c4:	2107      	movs	r1, #7
 80026c6:	438b      	bics	r3, r1
 80026c8:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026ca:	2302      	movs	r3, #2
 80026cc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026ce:	33fe      	adds	r3, #254	@ 0xfe
 80026d0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80026d2:	2380      	movs	r3, #128	@ 0x80
 80026d4:	015b      	lsls	r3, r3, #5
 80026d6:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026d8:	2340      	movs	r3, #64	@ 0x40
 80026da:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026dc:	a805      	add	r0, sp, #20
 80026de:	f000 ffd7 	bl	8003690 <HAL_RCC_OscConfig>
 80026e2:	2800      	cmp	r0, #0
 80026e4:	d10e      	bne.n	8002704 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026e6:	2307      	movs	r3, #7
 80026e8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026ea:	2300      	movs	r3, #0
 80026ec:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80026ee:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80026f0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80026f2:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026f4:	2100      	movs	r1, #0
 80026f6:	4668      	mov	r0, sp
 80026f8:	f001 f958 	bl	80039ac <HAL_RCC_ClockConfig>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d103      	bne.n	8002708 <SystemClock_Config+0x60>
}
 8002700:	b00d      	add	sp, #52	@ 0x34
 8002702:	bd00      	pop	{pc}
    Error_Handler();
 8002704:	f7ff ffc6 	bl	8002694 <Error_Handler>
    Error_Handler();
 8002708:	f7ff ffc4 	bl	8002694 <Error_Handler>
 800270c:	40022000 	.word	0x40022000

08002710 <main>:
{
 8002710:	b530      	push	{r4, r5, lr}
 8002712:	b085      	sub	sp, #20
  HAL_Init();
 8002714:	f000 f9f2 	bl	8002afc <HAL_Init>
  SystemClock_Config();
 8002718:	f7ff ffc6 	bl	80026a8 <SystemClock_Config>
  MX_GPIO_Init();
 800271c:	f7ff fdca 	bl	80022b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002720:	f7ff fe18 	bl	8002354 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002724:	f000 f91a 	bl	800295c <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8002728:	f000 f8c6 	bl	80028b8 <MX_TIM14_Init>
  bma400_init(&bma400);
 800272c:	4c2a      	ldr	r4, [pc, #168]	@ (80027d8 <main+0xc8>)
 800272e:	0020      	movs	r0, r4
 8002730:	f7ff f9f8 	bl	8001b24 <bma400_init>
  configureBMA400(&bma400);
 8002734:	0020      	movs	r0, r4
 8002736:	f7ff fe8f 	bl	8002458 <configureBMA400>
  HAL_Delay(10);
 800273a:	200a      	movs	r0, #10
 800273c:	f000 f9fc 	bl	8002b38 <HAL_Delay>
  for (int i = 0; i < 32; i++)
 8002740:	2400      	movs	r4, #0
 8002742:	e003      	b.n	800274c <main+0x3c>
  	HAL_Delay(10);
 8002744:	200a      	movs	r0, #10
 8002746:	f000 f9f7 	bl	8002b38 <HAL_Delay>
  for (int i = 0; i < 32; i++)
 800274a:	3401      	adds	r4, #1
 800274c:	2c1f      	cmp	r4, #31
 800274e:	dc0f      	bgt.n	8002770 <main+0x60>
  	if (bma400_get_accel_data(BMA400_DATA_ONLY, &sample, &bma400) == BMA400_OK)
 8002750:	4a21      	ldr	r2, [pc, #132]	@ (80027d8 <main+0xc8>)
 8002752:	a901      	add	r1, sp, #4
 8002754:	2000      	movs	r0, #0
 8002756:	f7ff fc7b 	bl	8002050 <bma400_get_accel_data>
 800275a:	2800      	cmp	r0, #0
 800275c:	d1f2      	bne.n	8002744 <main+0x34>
  		y_samples[31 - i] = sample.y;
 800275e:	231f      	movs	r3, #31
 8002760:	1b1b      	subs	r3, r3, r4
 8002762:	aa01      	add	r2, sp, #4
 8002764:	2102      	movs	r1, #2
 8002766:	5e51      	ldrsh	r1, [r2, r1]
 8002768:	4a1c      	ldr	r2, [pc, #112]	@ (80027dc <main+0xcc>)
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	5299      	strh	r1, [r3, r2]
 800276e:	e7e9      	b.n	8002744 <main+0x34>
	bool timer_started = false;
 8002770:	2500      	movs	r5, #0
 8002772:	e001      	b.n	8002778 <main+0x68>
			  enterStandby();
 8002774:	f7ff fe62 	bl	800243c <enterStandby>
	  motion_detected = detectGateMotion(y_samples);
 8002778:	4818      	ldr	r0, [pc, #96]	@ (80027dc <main+0xcc>)
 800277a:	f7ff fea5 	bl	80024c8 <detectGateMotion>
 800277e:	1e04      	subs	r4, r0, #0
	  if (!motion_detected)
 8002780:	d110      	bne.n	80027a4 <main+0x94>
		  HAL_TIM_Base_Stop_IT(&htim14);
 8002782:	4817      	ldr	r0, [pc, #92]	@ (80027e0 <main+0xd0>)
 8002784:	f001 face 	bl	8003d24 <HAL_TIM_Base_Stop_IT>
		  if (motion_time >= 1)	// gate stopped while movement
 8002788:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <main+0xd4>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <main+0x64>
			  Send16BitESP(&huart1, motion_time);
 8002792:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <main+0xd4>)
 8002794:	8819      	ldrh	r1, [r3, #0]
 8002796:	b289      	uxth	r1, r1
 8002798:	4813      	ldr	r0, [pc, #76]	@ (80027e8 <main+0xd8>)
 800279a:	f7ff ff03 	bl	80025a4 <Send16BitESP>
			  enterStandby();
 800279e:	f7ff fe4d 	bl	800243c <enterStandby>
 80027a2:	e7e9      	b.n	8002778 <main+0x68>
	  else if (motion_detected && flag_2sec == 1)
 80027a4:	4a11      	ldr	r2, [pc, #68]	@ (80027ec <main+0xdc>)
 80027a6:	7812      	ldrb	r2, [r2, #0]
 80027a8:	2a01      	cmp	r2, #1
 80027aa:	d00b      	beq.n	80027c4 <main+0xb4>
	  else if (motion_detected && !timer_started)
 80027ac:	2800      	cmp	r0, #0
 80027ae:	d0e3      	beq.n	8002778 <main+0x68>
 80027b0:	2d00      	cmp	r5, #0
 80027b2:	d1e1      	bne.n	8002778 <main+0x68>
		  motion_time = 0;
 80027b4:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <main+0xd4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	801a      	strh	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim14);
 80027ba:	4809      	ldr	r0, [pc, #36]	@ (80027e0 <main+0xd0>)
 80027bc:	f001 fa7e 	bl	8003cbc <HAL_TIM_Base_Start_IT>
		  timer_started = true;
 80027c0:	0025      	movs	r5, r4
 80027c2:	e7d9      	b.n	8002778 <main+0x68>
		  flag_2sec = 0;
 80027c4:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <main+0xdc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
		  Send16BitESP(&huart1, send_2sec);
 80027ca:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <main+0xe0>)
 80027cc:	8819      	ldrh	r1, [r3, #0]
 80027ce:	b289      	uxth	r1, r1
 80027d0:	4805      	ldr	r0, [pc, #20]	@ (80027e8 <main+0xd8>)
 80027d2:	f7ff fee7 	bl	80025a4 <Send16BitESP>
 80027d6:	e7cf      	b.n	8002778 <main+0x68>
 80027d8:	20000000 	.word	0x20000000
 80027dc:	200000f0 	.word	0x200000f0
 80027e0:	20000188 	.word	0x20000188
 80027e4:	20000134 	.word	0x20000134
 80027e8:	200001d4 	.word	0x200001d4
 80027ec:	20000132 	.word	0x20000132
 80027f0:	20000130 	.word	0x20000130

080027f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f4:	b500      	push	{lr}
 80027f6:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f8:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <HAL_MspInit+0x38>)
 80027fa:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80027fc:	2201      	movs	r2, #1
 80027fe:	4311      	orrs	r1, r2
 8002800:	6419      	str	r1, [r3, #64]	@ 0x40
 8002802:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002804:	400a      	ands	r2, r1
 8002806:	9200      	str	r2, [sp, #0]
 8002808:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800280a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800280c:	2180      	movs	r1, #128	@ 0x80
 800280e:	0549      	lsls	r1, r1, #21
 8002810:	430a      	orrs	r2, r1
 8002812:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002816:	400b      	ands	r3, r1
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 800281c:	2008      	movs	r0, #8
 800281e:	f000 f99d 	bl	8002b5c <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8002822:	2010      	movs	r0, #16
 8002824:	f000 f99a 	bl	8002b5c <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002828:	b003      	add	sp, #12
 800282a:	bd00      	pop	{pc}
 800282c:	40021000 	.word	0x40021000

08002830 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002830:	e7fe      	b.n	8002830 <NMI_Handler>

08002832 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002832:	e7fe      	b.n	8002832 <HardFault_Handler>

08002834 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002834:	4770      	bx	lr

08002836 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002836:	4770      	bx	lr

08002838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002838:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800283a:	f000 f96b 	bl	8002b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800283e:	bd10      	pop	{r4, pc}

08002840 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002840:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002842:	4802      	ldr	r0, [pc, #8]	@ (800284c <TIM14_IRQHandler+0xc>)
 8002844:	f001 fa8e 	bl	8003d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002848:	bd10      	pop	{r4, pc}
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	20000188 	.word	0x20000188

08002850 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002850:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002852:	4802      	ldr	r0, [pc, #8]	@ (800285c <TIM16_IRQHandler+0xc>)
 8002854:	f001 fa86 	bl	8003d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002858:	bd10      	pop	{r4, pc}
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	2000013c 	.word	0x2000013c

08002860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002860:	b510      	push	{r4, lr}
 8002862:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002864:	4a0c      	ldr	r2, [pc, #48]	@ (8002898 <_sbrk+0x38>)
 8002866:	490d      	ldr	r1, [pc, #52]	@ (800289c <_sbrk+0x3c>)
 8002868:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800286a:	490d      	ldr	r1, [pc, #52]	@ (80028a0 <_sbrk+0x40>)
 800286c:	6809      	ldr	r1, [r1, #0]
 800286e:	2900      	cmp	r1, #0
 8002870:	d007      	beq.n	8002882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002872:	490b      	ldr	r1, [pc, #44]	@ (80028a0 <_sbrk+0x40>)
 8002874:	6808      	ldr	r0, [r1, #0]
 8002876:	18c3      	adds	r3, r0, r3
 8002878:	4293      	cmp	r3, r2
 800287a:	d806      	bhi.n	800288a <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800287c:	4a08      	ldr	r2, [pc, #32]	@ (80028a0 <_sbrk+0x40>)
 800287e:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002880:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002882:	4907      	ldr	r1, [pc, #28]	@ (80028a0 <_sbrk+0x40>)
 8002884:	4807      	ldr	r0, [pc, #28]	@ (80028a4 <_sbrk+0x44>)
 8002886:	6008      	str	r0, [r1, #0]
 8002888:	e7f3      	b.n	8002872 <_sbrk+0x12>
    errno = ENOMEM;
 800288a:	f001 ff6f 	bl	800476c <__errno>
 800288e:	230c      	movs	r3, #12
 8002890:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002892:	2001      	movs	r0, #1
 8002894:	4240      	negs	r0, r0
 8002896:	e7f3      	b.n	8002880 <_sbrk+0x20>
 8002898:	20001800 	.word	0x20001800
 800289c:	00000400 	.word	0x00000400
 80028a0:	20000138 	.word	0x20000138
 80028a4:	200003b8 	.word	0x200003b8

080028a8 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028a8:	4b02      	ldr	r3, [pc, #8]	@ (80028b4 <SystemInit+0xc>)
 80028aa:	2280      	movs	r2, #128	@ 0x80
 80028ac:	0512      	lsls	r2, r2, #20
 80028ae:	609a      	str	r2, [r3, #8]
#endif
}
 80028b0:	4770      	bx	lr
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <MX_TIM14_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80028b8:	b510      	push	{r4, lr}
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80028ba:	4809      	ldr	r0, [pc, #36]	@ (80028e0 <MX_TIM14_Init+0x28>)
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <MX_TIM14_Init+0x2c>)
 80028be:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 1199;
 80028c0:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <MX_TIM14_Init+0x30>)
 80028c2:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c4:	2300      	movs	r3, #0
 80028c6:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 9;
 80028c8:	2209      	movs	r2, #9
 80028ca:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028cc:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ce:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80028d0:	f001 fb3e 	bl	8003f50 <HAL_TIM_Base_Init>
 80028d4:	2800      	cmp	r0, #0
 80028d6:	d100      	bne.n	80028da <MX_TIM14_Init+0x22>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80028d8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80028da:	f7ff fedb 	bl	8002694 <Error_Handler>
}
 80028de:	e7fb      	b.n	80028d8 <MX_TIM14_Init+0x20>
 80028e0:	20000188 	.word	0x20000188
 80028e4:	40002000 	.word	0x40002000
 80028e8:	000004af 	.word	0x000004af

080028ec <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM16_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028ec:	b500      	push	{lr}
 80028ee:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM14)
 80028f0:	6803      	ldr	r3, [r0, #0]
 80028f2:	4a17      	ldr	r2, [pc, #92]	@ (8002950 <HAL_TIM_Base_MspInit+0x64>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d004      	beq.n	8002902 <HAL_TIM_Base_MspInit+0x16>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM16)
 80028f8:	4a16      	ldr	r2, [pc, #88]	@ (8002954 <HAL_TIM_Base_MspInit+0x68>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d014      	beq.n	8002928 <HAL_TIM_Base_MspInit+0x3c>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80028fe:	b003      	add	sp, #12
 8002900:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002902:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <HAL_TIM_Base_MspInit+0x6c>)
 8002904:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002906:	2180      	movs	r1, #128	@ 0x80
 8002908:	0209      	lsls	r1, r1, #8
 800290a:	430a      	orrs	r2, r1
 800290c:	641a      	str	r2, [r3, #64]	@ 0x40
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	400b      	ands	r3, r1
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	2013      	movs	r0, #19
 800291c:	f000 f972 	bl	8002c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002920:	2013      	movs	r0, #19
 8002922:	f000 f973 	bl	8002c0c <HAL_NVIC_EnableIRQ>
 8002926:	e7ea      	b.n	80028fe <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_TIM_Base_MspInit+0x6c>)
 800292a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800292c:	2180      	movs	r1, #128	@ 0x80
 800292e:	0289      	lsls	r1, r1, #10
 8002930:	430a      	orrs	r2, r1
 8002932:	641a      	str	r2, [r3, #64]	@ 0x40
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	400b      	ands	r3, r1
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	2100      	movs	r1, #0
 8002940:	2015      	movs	r0, #21
 8002942:	f000 f95f 	bl	8002c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002946:	2015      	movs	r0, #21
 8002948:	f000 f960 	bl	8002c0c <HAL_NVIC_EnableIRQ>
}
 800294c:	e7d7      	b.n	80028fe <HAL_TIM_Base_MspInit+0x12>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	40002000 	.word	0x40002000
 8002954:	40014400 	.word	0x40014400
 8002958:	40021000 	.word	0x40021000

0800295c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800295c:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800295e:	4819      	ldr	r0, [pc, #100]	@ (80029c4 <MX_USART1_UART_Init+0x68>)
 8002960:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <MX_USART1_UART_Init+0x6c>)
 8002962:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002964:	23e1      	movs	r3, #225	@ 0xe1
 8002966:	025b      	lsls	r3, r3, #9
 8002968:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800296a:	2300      	movs	r3, #0
 800296c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800296e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002970:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002972:	220c      	movs	r2, #12
 8002974:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002976:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002978:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800297a:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800297c:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800297e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002980:	f001 fdd6 	bl	8004530 <HAL_UART_Init>
 8002984:	2800      	cmp	r0, #0
 8002986:	d111      	bne.n	80029ac <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002988:	480e      	ldr	r0, [pc, #56]	@ (80029c4 <MX_USART1_UART_Init+0x68>)
 800298a:	2100      	movs	r1, #0
 800298c:	f001 fe50 	bl	8004630 <HAL_UARTEx_SetTxFifoThreshold>
 8002990:	2800      	cmp	r0, #0
 8002992:	d10e      	bne.n	80029b2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002994:	480b      	ldr	r0, [pc, #44]	@ (80029c4 <MX_USART1_UART_Init+0x68>)
 8002996:	2100      	movs	r1, #0
 8002998:	f001 fe70 	bl	800467c <HAL_UARTEx_SetRxFifoThreshold>
 800299c:	2800      	cmp	r0, #0
 800299e:	d10b      	bne.n	80029b8 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80029a0:	4808      	ldr	r0, [pc, #32]	@ (80029c4 <MX_USART1_UART_Init+0x68>)
 80029a2:	f001 fe25 	bl	80045f0 <HAL_UARTEx_DisableFifoMode>
 80029a6:	2800      	cmp	r0, #0
 80029a8:	d109      	bne.n	80029be <MX_USART1_UART_Init+0x62>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029aa:	bd10      	pop	{r4, pc}
    Error_Handler();
 80029ac:	f7ff fe72 	bl	8002694 <Error_Handler>
 80029b0:	e7ea      	b.n	8002988 <MX_USART1_UART_Init+0x2c>
    Error_Handler();
 80029b2:	f7ff fe6f 	bl	8002694 <Error_Handler>
 80029b6:	e7ed      	b.n	8002994 <MX_USART1_UART_Init+0x38>
    Error_Handler();
 80029b8:	f7ff fe6c 	bl	8002694 <Error_Handler>
 80029bc:	e7f0      	b.n	80029a0 <MX_USART1_UART_Init+0x44>
    Error_Handler();
 80029be:	f7ff fe69 	bl	8002694 <Error_Handler>
}
 80029c2:	e7f2      	b.n	80029aa <MX_USART1_UART_Init+0x4e>
 80029c4:	200001d4 	.word	0x200001d4
 80029c8:	40013800 	.word	0x40013800

080029cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029cc:	b510      	push	{r4, lr}
 80029ce:	b08e      	sub	sp, #56	@ 0x38
 80029d0:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d2:	2214      	movs	r2, #20
 80029d4:	2100      	movs	r1, #0
 80029d6:	a809      	add	r0, sp, #36	@ 0x24
 80029d8:	f001 fec0 	bl	800475c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029dc:	221c      	movs	r2, #28
 80029de:	2100      	movs	r1, #0
 80029e0:	a802      	add	r0, sp, #8
 80029e2:	f001 febb 	bl	800475c <memset>
  if(uartHandle->Instance==USART1)
 80029e6:	6822      	ldr	r2, [r4, #0]
 80029e8:	4b17      	ldr	r3, [pc, #92]	@ (8002a48 <HAL_UART_MspInit+0x7c>)
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d001      	beq.n	80029f2 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80029ee:	b00e      	add	sp, #56	@ 0x38
 80029f0:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f6:	a802      	add	r0, sp, #8
 80029f8:	f001 f8c6 	bl	8003b88 <HAL_RCCEx_PeriphCLKConfig>
 80029fc:	2800      	cmp	r0, #0
 80029fe:	d120      	bne.n	8002a42 <HAL_UART_MspInit+0x76>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a00:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <HAL_UART_MspInit+0x80>)
 8002a02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a04:	2180      	movs	r1, #128	@ 0x80
 8002a06:	01c9      	lsls	r1, r1, #7
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a0e:	400a      	ands	r2, r1
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a16:	2201      	movs	r2, #1
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	6359      	str	r1, [r3, #52]	@ 0x34
 8002a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1e:	4013      	ands	r3, r2
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a24:	23c0      	movs	r3, #192	@ 0xc0
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002a34:	920d      	str	r2, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a36:	20a0      	movs	r0, #160	@ 0xa0
 8002a38:	a909      	add	r1, sp, #36	@ 0x24
 8002a3a:	05c0      	lsls	r0, r0, #23
 8002a3c:	f000 f8f6 	bl	8002c2c <HAL_GPIO_Init>
}
 8002a40:	e7d5      	b.n	80029ee <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002a42:	f7ff fe27 	bl	8002694 <Error_Handler>
 8002a46:	e7db      	b.n	8002a00 <HAL_UART_MspInit+0x34>
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40021000 	.word	0x40021000

08002a50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a50:	480d      	ldr	r0, [pc, #52]	@ (8002a88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a52:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a54:	f7ff ff28 	bl	80028a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a5a:	e003      	b.n	8002a64 <LoopCopyDataInit>

08002a5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002a5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a62:	3104      	adds	r1, #4

08002a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a64:	480a      	ldr	r0, [pc, #40]	@ (8002a90 <LoopForever+0xa>)
  ldr r3, =_edata
 8002a66:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <LoopForever+0xe>)
  adds r2, r0, r1
 8002a68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a6c:	d3f6      	bcc.n	8002a5c <CopyDataInit>
  ldr r2, =_sbss
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a98 <LoopForever+0x12>)
  b LoopFillZerobss
 8002a70:	e002      	b.n	8002a78 <LoopFillZerobss>

08002a72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a72:	2300      	movs	r3, #0
  str  r3, [r2]
 8002a74:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a76:	3204      	adds	r2, #4

08002a78 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002a78:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <LoopForever+0x16>)
  cmp r2, r3
 8002a7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a7c:	d3f9      	bcc.n	8002a72 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002a7e:	f001 fe7b 	bl	8004778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a82:	f7ff fe45 	bl	8002710 <main>

08002a86 <LoopForever>:

LoopForever:
    b LoopForever
 8002a86:	e7fe      	b.n	8002a86 <LoopForever>
  ldr   r0, =_estack
 8002a88:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8002a8c:	08005b98 	.word	0x08005b98
  ldr r0, =_sdata
 8002a90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a94:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8002a98:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8002a9c:	200003b4 	.word	0x200003b4

08002aa0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002aa0:	e7fe      	b.n	8002aa0 <ADC1_IRQHandler>
	...

08002aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa4:	b510      	push	{r4, lr}
 8002aa6:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8002aa8:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <HAL_InitTick+0x4c>)
 8002aaa:	7819      	ldrb	r1, [r3, #0]
 8002aac:	2900      	cmp	r1, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ab0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002ab2:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002ab4:	20fa      	movs	r0, #250	@ 0xfa
 8002ab6:	0080      	lsls	r0, r0, #2
 8002ab8:	f7fd fb38 	bl	800012c <__udivsi3>
 8002abc:	0001      	movs	r1, r0
 8002abe:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <HAL_InitTick+0x50>)
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	f7fd fb33 	bl	800012c <__udivsi3>
 8002ac6:	f000 f8ad 	bl	8002c24 <HAL_SYSTICK_Config>
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d10d      	bne.n	8002aea <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ace:	2c03      	cmp	r4, #3
 8002ad0:	d901      	bls.n	8002ad6 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	e7ed      	b.n	8002ab2 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad6:	3001      	adds	r0, #1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	0021      	movs	r1, r4
 8002adc:	4240      	negs	r0, r0
 8002ade:	f000 f891 	bl	8002c04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ae2:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <HAL_InitTick+0x54>)
 8002ae4:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	e7e3      	b.n	8002ab2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8002aea:	2001      	movs	r0, #1
 8002aec:	e7e1      	b.n	8002ab2 <HAL_InitTick+0xe>
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	20000024 	.word	0x20000024
 8002af4:	20000020 	.word	0x20000020
 8002af8:	20000028 	.word	0x20000028

08002afc <HAL_Init>:
{
 8002afc:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002afe:	2003      	movs	r0, #3
 8002b00:	f7ff ffd0 	bl	8002aa4 <HAL_InitTick>
 8002b04:	1e04      	subs	r4, r0, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_Init+0x12>
    status = HAL_ERROR;
 8002b08:	2401      	movs	r4, #1
}
 8002b0a:	0020      	movs	r0, r4
 8002b0c:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8002b0e:	f7ff fe71 	bl	80027f4 <HAL_MspInit>
 8002b12:	e7fa      	b.n	8002b0a <HAL_Init+0xe>

08002b14 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002b14:	4b03      	ldr	r3, [pc, #12]	@ (8002b24 <HAL_IncTick+0x10>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4a03      	ldr	r2, [pc, #12]	@ (8002b28 <HAL_IncTick+0x14>)
 8002b1a:	6811      	ldr	r1, [r2, #0]
 8002b1c:	185b      	adds	r3, r3, r1
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	4770      	bx	lr
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	20000024 	.word	0x20000024
 8002b28:	20000268 	.word	0x20000268

08002b2c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b2c:	4b01      	ldr	r3, [pc, #4]	@ (8002b34 <HAL_GetTick+0x8>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
}
 8002b30:	4770      	bx	lr
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	20000268 	.word	0x20000268

08002b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b3c:	f7ff fff6 	bl	8002b2c <HAL_GetTick>
 8002b40:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b42:	1c63      	adds	r3, r4, #1
 8002b44:	d002      	beq.n	8002b4c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b46:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <HAL_Delay+0x20>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b4c:	f7ff ffee 	bl	8002b2c <HAL_GetTick>
 8002b50:	1b40      	subs	r0, r0, r5
 8002b52:	42a0      	cmp	r0, r4
 8002b54:	d3fa      	bcc.n	8002b4c <HAL_Delay+0x14>
  {
  }
}
 8002b56:	bd70      	pop	{r4, r5, r6, pc}
 8002b58:	20000024 	.word	0x20000024

08002b5c <HAL_SYSCFG_EnableRemap>:
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8002b5c:	4a02      	ldr	r2, [pc, #8]	@ (8002b68 <HAL_SYSCFG_EnableRemap+0xc>)
 8002b5e:	6813      	ldr	r3, [r2, #0]
 8002b60:	4303      	orrs	r3, r0
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	4770      	bx	lr
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	40010000 	.word	0x40010000

08002b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b6c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	db11      	blt.n	8002b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b72:	0883      	lsrs	r3, r0, #2
 8002b74:	4d13      	ldr	r5, [pc, #76]	@ (8002bc4 <__NVIC_SetPriority+0x58>)
 8002b76:	33c0      	adds	r3, #192	@ 0xc0
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	595c      	ldr	r4, [r3, r5]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	4010      	ands	r0, r2
 8002b80:	00c0      	lsls	r0, r0, #3
 8002b82:	32fc      	adds	r2, #252	@ 0xfc
 8002b84:	0016      	movs	r6, r2
 8002b86:	4086      	lsls	r6, r0
 8002b88:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b8a:	0189      	lsls	r1, r1, #6
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b90:	4322      	orrs	r2, r4
 8002b92:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b94:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b96:	230f      	movs	r3, #15
 8002b98:	4003      	ands	r3, r0
 8002b9a:	3b08      	subs	r3, #8
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	3306      	adds	r3, #6
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4a09      	ldr	r2, [pc, #36]	@ (8002bc8 <__NVIC_SetPriority+0x5c>)
 8002ba4:	4694      	mov	ip, r2
 8002ba6:	4463      	add	r3, ip
 8002ba8:	685c      	ldr	r4, [r3, #4]
 8002baa:	2203      	movs	r2, #3
 8002bac:	4010      	ands	r0, r2
 8002bae:	00c0      	lsls	r0, r0, #3
 8002bb0:	32fc      	adds	r2, #252	@ 0xfc
 8002bb2:	0015      	movs	r5, r2
 8002bb4:	4085      	lsls	r5, r0
 8002bb6:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bb8:	0189      	lsls	r1, r1, #6
 8002bba:	400a      	ands	r2, r1
 8002bbc:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bbe:	4322      	orrs	r2, r4
 8002bc0:	605a      	str	r2, [r3, #4]
}
 8002bc2:	e7e7      	b.n	8002b94 <__NVIC_SetPriority+0x28>
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bcc:	3801      	subs	r0, #1
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	045b      	lsls	r3, r3, #17
 8002bd2:	4298      	cmp	r0, r3
 8002bd4:	d20f      	bcs.n	8002bf6 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd6:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <SysTick_Config+0x30>)
 8002bd8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bda:	4809      	ldr	r0, [pc, #36]	@ (8002c00 <SysTick_Config+0x34>)
 8002bdc:	6a03      	ldr	r3, [r0, #32]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	21c0      	movs	r1, #192	@ 0xc0
 8002be4:	0609      	lsls	r1, r1, #24
 8002be6:	430b      	orrs	r3, r1
 8002be8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bea:	2300      	movs	r3, #0
 8002bec:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bee:	3307      	adds	r3, #7
 8002bf0:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf2:	2000      	movs	r0, #0
}
 8002bf4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	e7fc      	b.n	8002bf4 <SysTick_Config+0x28>
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	e000e010 	.word	0xe000e010
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002c06:	f7ff ffb1 	bl	8002b6c <__NVIC_SetPriority>
}
 8002c0a:	bd10      	pop	{r4, pc}

08002c0c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	db05      	blt.n	8002c1c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c10:	221f      	movs	r2, #31
 8002c12:	4002      	ands	r2, r0
 8002c14:	2301      	movs	r3, #1
 8002c16:	4093      	lsls	r3, r2
 8002c18:	4a01      	ldr	r2, [pc, #4]	@ (8002c20 <HAL_NVIC_EnableIRQ+0x14>)
 8002c1a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c1c:	4770      	bx	lr
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c24:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 8002c26:	f7ff ffd1 	bl	8002bcc <SysTick_Config>
}
 8002c2a:	bd10      	pop	{r4, pc}

08002c2c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2e:	46d6      	mov	lr, sl
 8002c30:	464f      	mov	r7, r9
 8002c32:	4646      	mov	r6, r8
 8002c34:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002c36:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c38:	e03b      	b.n	8002cb2 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002c3a:	2505      	movs	r5, #5
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x14>
 8002c3e:	2500      	movs	r5, #0
 8002c40:	40a5      	lsls	r5, r4
 8002c42:	002c      	movs	r4, r5
 8002c44:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8002c46:	4d61      	ldr	r5, [pc, #388]	@ (8002dcc <HAL_GPIO_Init+0x1a0>)
 8002c48:	3218      	adds	r2, #24
 8002c4a:	0092      	lsls	r2, r2, #2
 8002c4c:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002c4e:	2280      	movs	r2, #128	@ 0x80
 8002c50:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8002c52:	464a      	mov	r2, r9
 8002c54:	43d2      	mvns	r2, r2
 8002c56:	003d      	movs	r5, r7
 8002c58:	464c      	mov	r4, r9
 8002c5a:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c5c:	684c      	ldr	r4, [r1, #4]
 8002c5e:	03e4      	lsls	r4, r4, #15
 8002c60:	d502      	bpl.n	8002c68 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8002c62:	003d      	movs	r5, r7
 8002c64:	464c      	mov	r4, r9
 8002c66:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8002c68:	4c58      	ldr	r4, [pc, #352]	@ (8002dcc <HAL_GPIO_Init+0x1a0>)
 8002c6a:	2780      	movs	r7, #128	@ 0x80
 8002c6c:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 8002c6e:	2584      	movs	r5, #132	@ 0x84
 8002c70:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8002c72:	003d      	movs	r5, r7
 8002c74:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c76:	684c      	ldr	r4, [r1, #4]
 8002c78:	03a4      	lsls	r4, r4, #14
 8002c7a:	d502      	bpl.n	8002c82 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8002c7c:	003d      	movs	r5, r7
 8002c7e:	464c      	mov	r4, r9
 8002c80:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8002c82:	4c52      	ldr	r4, [pc, #328]	@ (8002dcc <HAL_GPIO_Init+0x1a0>)
 8002c84:	2784      	movs	r7, #132	@ 0x84
 8002c86:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002c88:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 8002c8a:	003d      	movs	r5, r7
 8002c8c:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c8e:	684c      	ldr	r4, [r1, #4]
 8002c90:	02e4      	lsls	r4, r4, #11
 8002c92:	d502      	bpl.n	8002c9a <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8002c94:	003d      	movs	r5, r7
 8002c96:	464c      	mov	r4, r9
 8002c98:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 8002c9a:	4c4c      	ldr	r4, [pc, #304]	@ (8002dcc <HAL_GPIO_Init+0x1a0>)
 8002c9c:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 8002c9e:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8002ca0:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ca2:	684c      	ldr	r4, [r1, #4]
 8002ca4:	02a4      	lsls	r4, r4, #10
 8002ca6:	d501      	bpl.n	8002cac <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8002ca8:	464a      	mov	r2, r9
 8002caa:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 8002cac:	4c47      	ldr	r4, [pc, #284]	@ (8002dcc <HAL_GPIO_Init+0x1a0>)
 8002cae:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8002cb0:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002cb2:	680c      	ldr	r4, [r1, #0]
 8002cb4:	0022      	movs	r2, r4
 8002cb6:	40da      	lsrs	r2, r3
 8002cb8:	d100      	bne.n	8002cbc <HAL_GPIO_Init+0x90>
 8002cba:	e081      	b.n	8002dc0 <HAL_GPIO_Init+0x194>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	0026      	movs	r6, r4
 8002cc2:	4016      	ands	r6, r2
 8002cc4:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8002cc6:	4214      	tst	r4, r2
 8002cc8:	d0f2      	beq.n	8002cb0 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cca:	684c      	ldr	r4, [r1, #4]
 8002ccc:	2c02      	cmp	r4, #2
 8002cce:	d001      	beq.n	8002cd4 <HAL_GPIO_Init+0xa8>
 8002cd0:	2c12      	cmp	r4, #18
 8002cd2:	d118      	bne.n	8002d06 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8002cd4:	08dd      	lsrs	r5, r3, #3
 8002cd6:	3508      	adds	r5, #8
 8002cd8:	00ad      	lsls	r5, r5, #2
 8002cda:	582c      	ldr	r4, [r5, r0]
 8002cdc:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002cde:	2707      	movs	r7, #7
 8002ce0:	401f      	ands	r7, r3
 8002ce2:	00bf      	lsls	r7, r7, #2
 8002ce4:	240f      	movs	r4, #15
 8002ce6:	46a2      	mov	sl, r4
 8002ce8:	0026      	movs	r6, r4
 8002cea:	40be      	lsls	r6, r7
 8002cec:	46b0      	mov	r8, r6
 8002cee:	4666      	mov	r6, ip
 8002cf0:	4644      	mov	r4, r8
 8002cf2:	43a6      	bics	r6, r4
 8002cf4:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002cf6:	690c      	ldr	r4, [r1, #16]
 8002cf8:	4656      	mov	r6, sl
 8002cfa:	4026      	ands	r6, r4
 8002cfc:	0034      	movs	r4, r6
 8002cfe:	40bc      	lsls	r4, r7
 8002d00:	4666      	mov	r6, ip
 8002d02:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8002d04:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8002d06:	6804      	ldr	r4, [r0, #0]
 8002d08:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002d0a:	005d      	lsls	r5, r3, #1
 8002d0c:	2403      	movs	r4, #3
 8002d0e:	46a2      	mov	sl, r4
 8002d10:	0027      	movs	r7, r4
 8002d12:	40af      	lsls	r7, r5
 8002d14:	46b8      	mov	r8, r7
 8002d16:	43ff      	mvns	r7, r7
 8002d18:	4666      	mov	r6, ip
 8002d1a:	4644      	mov	r4, r8
 8002d1c:	43a6      	bics	r6, r4
 8002d1e:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002d20:	684c      	ldr	r4, [r1, #4]
 8002d22:	4656      	mov	r6, sl
 8002d24:	4026      	ands	r6, r4
 8002d26:	0034      	movs	r4, r6
 8002d28:	40ac      	lsls	r4, r5
 8002d2a:	4666      	mov	r6, ip
 8002d2c:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8002d2e:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d30:	684c      	ldr	r4, [r1, #4]
 8002d32:	1e66      	subs	r6, r4, #1
 8002d34:	2e01      	cmp	r6, #1
 8002d36:	d903      	bls.n	8002d40 <HAL_GPIO_Init+0x114>
 8002d38:	2c11      	cmp	r4, #17
 8002d3a:	d001      	beq.n	8002d40 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d3c:	2c12      	cmp	r4, #18
 8002d3e:	d112      	bne.n	8002d66 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8002d40:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002d42:	403c      	ands	r4, r7
 8002d44:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002d46:	68cc      	ldr	r4, [r1, #12]
 8002d48:	40ac      	lsls	r4, r5
 8002d4a:	4666      	mov	r6, ip
 8002d4c:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8002d4e:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8002d50:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d52:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d54:	684a      	ldr	r2, [r1, #4]
 8002d56:	0912      	lsrs	r2, r2, #4
 8002d58:	4694      	mov	ip, r2
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4666      	mov	r6, ip
 8002d5e:	4032      	ands	r2, r6
 8002d60:	409a      	lsls	r2, r3
 8002d62:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8002d64:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002d66:	684a      	ldr	r2, [r1, #4]
 8002d68:	2a03      	cmp	r2, #3
 8002d6a:	d005      	beq.n	8002d78 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8002d6c:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002d6e:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002d70:	688a      	ldr	r2, [r1, #8]
 8002d72:	40aa      	lsls	r2, r5
 8002d74:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 8002d76:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d78:	684a      	ldr	r2, [r1, #4]
 8002d7a:	00d2      	lsls	r2, r2, #3
 8002d7c:	d598      	bpl.n	8002cb0 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8002d7e:	089a      	lsrs	r2, r3, #2
 8002d80:	0014      	movs	r4, r2
 8002d82:	3418      	adds	r4, #24
 8002d84:	00a4      	lsls	r4, r4, #2
 8002d86:	4d11      	ldr	r5, [pc, #68]	@ (8002dcc <HAL_GPIO_Init+0x1a0>)
 8002d88:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002d8a:	2403      	movs	r4, #3
 8002d8c:	401c      	ands	r4, r3
 8002d8e:	00e4      	lsls	r4, r4, #3
 8002d90:	250f      	movs	r5, #15
 8002d92:	40a5      	lsls	r5, r4
 8002d94:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002d96:	25a0      	movs	r5, #160	@ 0xa0
 8002d98:	05ed      	lsls	r5, r5, #23
 8002d9a:	42a8      	cmp	r0, r5
 8002d9c:	d100      	bne.n	8002da0 <HAL_GPIO_Init+0x174>
 8002d9e:	e74e      	b.n	8002c3e <HAL_GPIO_Init+0x12>
 8002da0:	4d0b      	ldr	r5, [pc, #44]	@ (8002dd0 <HAL_GPIO_Init+0x1a4>)
 8002da2:	42a8      	cmp	r0, r5
 8002da4:	d008      	beq.n	8002db8 <HAL_GPIO_Init+0x18c>
 8002da6:	4d0b      	ldr	r5, [pc, #44]	@ (8002dd4 <HAL_GPIO_Init+0x1a8>)
 8002da8:	42a8      	cmp	r0, r5
 8002daa:	d007      	beq.n	8002dbc <HAL_GPIO_Init+0x190>
 8002dac:	4d0a      	ldr	r5, [pc, #40]	@ (8002dd8 <HAL_GPIO_Init+0x1ac>)
 8002dae:	42a8      	cmp	r0, r5
 8002db0:	d100      	bne.n	8002db4 <HAL_GPIO_Init+0x188>
 8002db2:	e742      	b.n	8002c3a <HAL_GPIO_Init+0xe>
 8002db4:	2506      	movs	r5, #6
 8002db6:	e743      	b.n	8002c40 <HAL_GPIO_Init+0x14>
 8002db8:	2501      	movs	r5, #1
 8002dba:	e741      	b.n	8002c40 <HAL_GPIO_Init+0x14>
 8002dbc:	2502      	movs	r5, #2
 8002dbe:	e73f      	b.n	8002c40 <HAL_GPIO_Init+0x14>
  }
}
 8002dc0:	bce0      	pop	{r5, r6, r7}
 8002dc2:	46ba      	mov	sl, r7
 8002dc4:	46b1      	mov	r9, r6
 8002dc6:	46a8      	mov	r8, r5
 8002dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dca:	46c0      	nop			@ (mov r8, r8)
 8002dcc:	40021800 	.word	0x40021800
 8002dd0:	50000400 	.word	0x50000400
 8002dd4:	50000800 	.word	0x50000800
 8002dd8:	50001400 	.word	0x50001400

08002ddc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ddc:	2a00      	cmp	r2, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002de0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002de2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002de4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8002de6:	e7fc      	b.n	8002de2 <HAL_GPIO_WritePin+0x6>

08002de8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002de8:	6802      	ldr	r2, [r0, #0]
 8002dea:	6993      	ldr	r3, [r2, #24]
 8002dec:	079b      	lsls	r3, r3, #30
 8002dee:	d501      	bpl.n	8002df4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	07d2      	lsls	r2, r2, #31
 8002dfa:	d403      	bmi.n	8002e04 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	2101      	movs	r1, #1
 8002e00:	430a      	orrs	r2, r1
 8002e02:	619a      	str	r2, [r3, #24]
  }
}
 8002e04:	4770      	bx	lr
	...

08002e08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e08:	b510      	push	{r4, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e0a:	0589      	lsls	r1, r1, #22
 8002e0c:	0d89      	lsrs	r1, r1, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e0e:	0412      	lsls	r2, r2, #16
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e10:	4311      	orrs	r1, r2
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e12:	4319      	orrs	r1, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e14:	9b02      	ldr	r3, [sp, #8]
 8002e16:	4319      	orrs	r1, r3
 8002e18:	0049      	lsls	r1, r1, #1
 8002e1a:	0849      	lsrs	r1, r1, #1
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e1c:	6804      	ldr	r4, [r0, #0]
 8002e1e:	6862      	ldr	r2, [r4, #4]
 8002e20:	0d5b      	lsrs	r3, r3, #21
 8002e22:	2080      	movs	r0, #128	@ 0x80
 8002e24:	00c0      	lsls	r0, r0, #3
 8002e26:	4003      	ands	r3, r0
 8002e28:	4803      	ldr	r0, [pc, #12]	@ (8002e38 <I2C_TransferConfig+0x30>)
 8002e2a:	4303      	orrs	r3, r0
 8002e2c:	439a      	bics	r2, r3
 8002e2e:	0013      	movs	r3, r2
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e34:	bd10      	pop	{r4, pc}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	03ff63ff 	.word	0x03ff63ff

08002e3c <I2C_IsErrorOccurred>:
{
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	46c6      	mov	lr, r8
 8002e40:	b500      	push	{lr}
 8002e42:	0004      	movs	r4, r0
 8002e44:	000d      	movs	r5, r1
 8002e46:	0017      	movs	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e48:	6801      	ldr	r1, [r0, #0]
 8002e4a:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	0016      	movs	r6, r2
 8002e50:	401e      	ands	r6, r3
 8002e52:	421a      	tst	r2, r3
 8002e54:	d100      	bne.n	8002e58 <I2C_IsErrorOccurred+0x1c>
 8002e56:	e075      	b.n	8002f44 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e58:	2310      	movs	r3, #16
 8002e5a:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	4698      	mov	r8, r3
  HAL_StatusTypeDef status = HAL_OK;
 8002e60:	2600      	movs	r6, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e62:	6820      	ldr	r0, [r4, #0]
 8002e64:	6983      	ldr	r3, [r0, #24]
 8002e66:	069b      	lsls	r3, r3, #26
 8002e68:	d431      	bmi.n	8002ece <I2C_IsErrorOccurred+0x92>
 8002e6a:	2e00      	cmp	r6, #0
 8002e6c:	d12f      	bne.n	8002ece <I2C_IsErrorOccurred+0x92>
      if (Timeout != HAL_MAX_DELAY)
 8002e6e:	1c6b      	adds	r3, r5, #1
 8002e70:	d0f7      	beq.n	8002e62 <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e72:	f7ff fe5b 	bl	8002b2c <HAL_GetTick>
 8002e76:	1bc0      	subs	r0, r0, r7
 8002e78:	42a8      	cmp	r0, r5
 8002e7a:	d801      	bhi.n	8002e80 <I2C_IsErrorOccurred+0x44>
 8002e7c:	2d00      	cmp	r5, #0
 8002e7e:	d1f0      	bne.n	8002e62 <I2C_IsErrorOccurred+0x26>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e80:	6821      	ldr	r1, [r4, #0]
 8002e82:	684b      	ldr	r3, [r1, #4]
 8002e84:	2280      	movs	r2, #128	@ 0x80
 8002e86:	01d2      	lsls	r2, r2, #7
 8002e88:	4013      	ands	r3, r2
          tmp2 = hi2c->Mode;
 8002e8a:	2242      	movs	r2, #66	@ 0x42
 8002e8c:	5ca2      	ldrb	r2, [r4, r2]
 8002e8e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e90:	6988      	ldr	r0, [r1, #24]
 8002e92:	0400      	lsls	r0, r0, #16
 8002e94:	d503      	bpl.n	8002e9e <I2C_IsErrorOccurred+0x62>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 8002e9a:	2a20      	cmp	r2, #32
 8002e9c:	d10e      	bne.n	8002ebc <I2C_IsErrorOccurred+0x80>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	069b      	lsls	r3, r3, #26
 8002ea4:	d4dd      	bmi.n	8002e62 <I2C_IsErrorOccurred+0x26>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ea6:	f7ff fe41 	bl	8002b2c <HAL_GetTick>
 8002eaa:	1bc0      	subs	r0, r0, r7
 8002eac:	2819      	cmp	r0, #25
 8002eae:	d9f6      	bls.n	8002e9e <I2C_IsErrorOccurred+0x62>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	4642      	mov	r2, r8
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	4690      	mov	r8, r2
              status = HAL_ERROR;
 8002eb8:	2601      	movs	r6, #1
              break;
 8002eba:	e7d2      	b.n	8002e62 <I2C_IsErrorOccurred+0x26>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ebc:	684a      	ldr	r2, [r1, #4]
 8002ebe:	2380      	movs	r3, #128	@ 0x80
 8002ec0:	01db      	lsls	r3, r3, #7
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8002ec6:	f7ff fe31 	bl	8002b2c <HAL_GetTick>
 8002eca:	0007      	movs	r7, r0
 8002ecc:	e7e7      	b.n	8002e9e <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 8002ece:	2e00      	cmp	r6, #0
 8002ed0:	d101      	bne.n	8002ed6 <I2C_IsErrorOccurred+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002ed6:	2604      	movs	r6, #4
 8002ed8:	4643      	mov	r3, r8
 8002eda:	4333      	orrs	r3, r6
 8002edc:	001e      	movs	r6, r3
    status = HAL_ERROR;
 8002ede:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8002ee0:	6822      	ldr	r2, [r4, #0]
 8002ee2:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ee4:	05d9      	lsls	r1, r3, #23
 8002ee6:	d504      	bpl.n	8002ef2 <I2C_IsErrorOccurred+0xb6>
    error_code |= HAL_I2C_ERROR_BERR;
 8002ee8:	2101      	movs	r1, #1
 8002eea:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eec:	31ff      	adds	r1, #255	@ 0xff
 8002eee:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002ef0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ef2:	055a      	lsls	r2, r3, #21
 8002ef4:	d506      	bpl.n	8002f04 <I2C_IsErrorOccurred+0xc8>
    error_code |= HAL_I2C_ERROR_OVR;
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002efa:	6822      	ldr	r2, [r4, #0]
 8002efc:	2180      	movs	r1, #128	@ 0x80
 8002efe:	00c9      	lsls	r1, r1, #3
 8002f00:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002f02:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f04:	059b      	lsls	r3, r3, #22
 8002f06:	d51f      	bpl.n	8002f48 <I2C_IsErrorOccurred+0x10c>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	2280      	movs	r2, #128	@ 0x80
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8002f14:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8002f16:	0020      	movs	r0, r4
 8002f18:	f7ff ff66 	bl	8002de8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	6853      	ldr	r3, [r2, #4]
 8002f20:	490b      	ldr	r1, [pc, #44]	@ (8002f50 <I2C_IsErrorOccurred+0x114>)
 8002f22:	400b      	ands	r3, r1
 8002f24:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8002f26:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002f28:	4333      	orrs	r3, r6
 8002f2a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f2c:	2341      	movs	r3, #65	@ 0x41
 8002f2e:	2220      	movs	r2, #32
 8002f30:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	3222      	adds	r2, #34	@ 0x22
 8002f36:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8002f38:	3a02      	subs	r2, #2
 8002f3a:	54a3      	strb	r3, [r4, r2]
}
 8002f3c:	0028      	movs	r0, r5
 8002f3e:	bc80      	pop	{r7}
 8002f40:	46b8      	mov	r8, r7
 8002f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8002f44:	2500      	movs	r5, #0
 8002f46:	e7cb      	b.n	8002ee0 <I2C_IsErrorOccurred+0xa4>
  if (status != HAL_OK)
 8002f48:	2d00      	cmp	r5, #0
 8002f4a:	d0f7      	beq.n	8002f3c <I2C_IsErrorOccurred+0x100>
 8002f4c:	e7e3      	b.n	8002f16 <I2C_IsErrorOccurred+0xda>
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	fe00e800 	.word	0xfe00e800

08002f54 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	0004      	movs	r4, r0
 8002f58:	000d      	movs	r5, r1
 8002f5a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	079b      	lsls	r3, r3, #30
 8002f62:	d420      	bmi.n	8002fa6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f64:	0032      	movs	r2, r6
 8002f66:	0029      	movs	r1, r5
 8002f68:	0020      	movs	r0, r4
 8002f6a:	f7ff ff67 	bl	8002e3c <I2C_IsErrorOccurred>
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d11b      	bne.n	8002faa <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	1c6b      	adds	r3, r5, #1
 8002f74:	d0f2      	beq.n	8002f5c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f76:	f7ff fdd9 	bl	8002b2c <HAL_GetTick>
 8002f7a:	1b80      	subs	r0, r0, r6
 8002f7c:	42a8      	cmp	r0, r5
 8002f7e:	d801      	bhi.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8002f80:	2d00      	cmp	r5, #0
 8002f82:	d1eb      	bne.n	8002f5c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	079b      	lsls	r3, r3, #30
 8002f8a:	d4e7      	bmi.n	8002f5c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f8c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002f8e:	2220      	movs	r2, #32
 8002f90:	4313      	orrs	r3, r2
 8002f92:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	2341      	movs	r3, #65	@ 0x41
 8002f96:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	3222      	adds	r2, #34	@ 0x22
 8002f9c:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8002f9e:	3a02      	subs	r2, #2
 8002fa0:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	e000      	b.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
  return HAL_OK;
 8002fa6:	2000      	movs	r0, #0
}
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002faa:	2001      	movs	r0, #1
 8002fac:	e7fc      	b.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x54>

08002fae <I2C_WaitOnFlagUntilTimeout>:
{
 8002fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb0:	46d6      	mov	lr, sl
 8002fb2:	464f      	mov	r7, r9
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	0007      	movs	r7, r0
 8002fba:	000d      	movs	r5, r1
 8002fbc:	0016      	movs	r6, r2
 8002fbe:	4699      	mov	r9, r3
 8002fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002fc2:	469a      	mov	sl, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	699c      	ldr	r4, [r3, #24]
 8002fc8:	402c      	ands	r4, r5
 8002fca:	1b64      	subs	r4, r4, r5
 8002fcc:	4263      	negs	r3, r4
 8002fce:	415c      	adcs	r4, r3
 8002fd0:	9601      	str	r6, [sp, #4]
 8002fd2:	42b4      	cmp	r4, r6
 8002fd4:	d128      	bne.n	8003028 <I2C_WaitOnFlagUntilTimeout+0x7a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd6:	4652      	mov	r2, sl
 8002fd8:	4649      	mov	r1, r9
 8002fda:	0038      	movs	r0, r7
 8002fdc:	f7ff ff2e 	bl	8002e3c <I2C_IsErrorOccurred>
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	d127      	bne.n	8003034 <I2C_WaitOnFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	d0ec      	beq.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fea:	f7ff fd9f 	bl	8002b2c <HAL_GetTick>
 8002fee:	4653      	mov	r3, sl
 8002ff0:	1ac0      	subs	r0, r0, r3
 8002ff2:	4548      	cmp	r0, r9
 8002ff4:	d802      	bhi.n	8002ffc <I2C_WaitOnFlagUntilTimeout+0x4e>
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e3      	bne.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	402b      	ands	r3, r5
 8003002:	1b5b      	subs	r3, r3, r5
 8003004:	425a      	negs	r2, r3
 8003006:	4153      	adcs	r3, r2
 8003008:	9a01      	ldr	r2, [sp, #4]
 800300a:	4293      	cmp	r3, r2
 800300c:	d1da      	bne.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800300e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003010:	2220      	movs	r2, #32
 8003012:	4313      	orrs	r3, r2
 8003014:	647b      	str	r3, [r7, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003016:	2341      	movs	r3, #65	@ 0x41
 8003018:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800301a:	2300      	movs	r3, #0
 800301c:	3222      	adds	r2, #34	@ 0x22
 800301e:	54bb      	strb	r3, [r7, r2]
          __HAL_UNLOCK(hi2c);
 8003020:	3a02      	subs	r2, #2
 8003022:	54bb      	strb	r3, [r7, r2]
          return HAL_ERROR;
 8003024:	2001      	movs	r0, #1
 8003026:	e000      	b.n	800302a <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8003028:	2000      	movs	r0, #0
}
 800302a:	b003      	add	sp, #12
 800302c:	bcc0      	pop	{r6, r7}
 800302e:	46ba      	mov	sl, r7
 8003030:	46b1      	mov	r9, r6
 8003032:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003034:	2001      	movs	r0, #1
 8003036:	e7f8      	b.n	800302a <I2C_WaitOnFlagUntilTimeout+0x7c>

08003038 <I2C_RequestMemoryWrite>:
{
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	0004      	movs	r4, r0
 800303e:	0015      	movs	r5, r2
 8003040:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003042:	2380      	movs	r3, #128	@ 0x80
 8003044:	b2f2      	uxtb	r2, r6
 8003046:	4819      	ldr	r0, [pc, #100]	@ (80030ac <I2C_RequestMemoryWrite+0x74>)
 8003048:	9000      	str	r0, [sp, #0]
 800304a:	045b      	lsls	r3, r3, #17
 800304c:	0020      	movs	r0, r4
 800304e:	f7ff fedb 	bl	8002e08 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	9a07      	ldr	r2, [sp, #28]
 8003054:	9906      	ldr	r1, [sp, #24]
 8003056:	0020      	movs	r0, r4
 8003058:	f7ff ff7c 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 800305c:	2800      	cmp	r0, #0
 800305e:	d11e      	bne.n	800309e <I2C_RequestMemoryWrite+0x66>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003060:	2e01      	cmp	r6, #1
 8003062:	d10e      	bne.n	8003082 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	b2ed      	uxtb	r5, r5
 8003068:	629d      	str	r5, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800306a:	9b07      	ldr	r3, [sp, #28]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	9b06      	ldr	r3, [sp, #24]
 8003070:	2200      	movs	r2, #0
 8003072:	2180      	movs	r1, #128	@ 0x80
 8003074:	0020      	movs	r0, r4
 8003076:	f7ff ff9a 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 800307a:	2800      	cmp	r0, #0
 800307c:	d113      	bne.n	80030a6 <I2C_RequestMemoryWrite+0x6e>
}
 800307e:	b002      	add	sp, #8
 8003080:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	0a2a      	lsrs	r2, r5, #8
 8003086:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003088:	9a07      	ldr	r2, [sp, #28]
 800308a:	9906      	ldr	r1, [sp, #24]
 800308c:	0020      	movs	r0, r4
 800308e:	f7ff ff61 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8003092:	2800      	cmp	r0, #0
 8003094:	d105      	bne.n	80030a2 <I2C_RequestMemoryWrite+0x6a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	b2ed      	uxtb	r5, r5
 800309a:	629d      	str	r5, [r3, #40]	@ 0x28
 800309c:	e7e5      	b.n	800306a <I2C_RequestMemoryWrite+0x32>
    return HAL_ERROR;
 800309e:	2001      	movs	r0, #1
 80030a0:	e7ed      	b.n	800307e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80030a2:	2001      	movs	r0, #1
 80030a4:	e7eb      	b.n	800307e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80030a6:	2001      	movs	r0, #1
 80030a8:	e7e9      	b.n	800307e <I2C_RequestMemoryWrite+0x46>
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	80002000 	.word	0x80002000

080030b0 <I2C_RequestMemoryRead>:
{
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	0004      	movs	r4, r0
 80030b6:	0015      	movs	r5, r2
 80030b8:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <I2C_RequestMemoryRead+0x70>)
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2300      	movs	r3, #0
 80030c2:	f7ff fea1 	bl	8002e08 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c6:	9a07      	ldr	r2, [sp, #28]
 80030c8:	9906      	ldr	r1, [sp, #24]
 80030ca:	0020      	movs	r0, r4
 80030cc:	f7ff ff42 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d11e      	bne.n	8003112 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030d4:	2e01      	cmp	r6, #1
 80030d6:	d10e      	bne.n	80030f6 <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	b2ed      	uxtb	r5, r5
 80030dc:	629d      	str	r5, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030de:	9b07      	ldr	r3, [sp, #28]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	9b06      	ldr	r3, [sp, #24]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2140      	movs	r1, #64	@ 0x40
 80030e8:	0020      	movs	r0, r4
 80030ea:	f7ff ff60 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d113      	bne.n	800311a <I2C_RequestMemoryRead+0x6a>
}
 80030f2:	b002      	add	sp, #8
 80030f4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	0a2a      	lsrs	r2, r5, #8
 80030fa:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fc:	9a07      	ldr	r2, [sp, #28]
 80030fe:	9906      	ldr	r1, [sp, #24]
 8003100:	0020      	movs	r0, r4
 8003102:	f7ff ff27 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8003106:	2800      	cmp	r0, #0
 8003108:	d105      	bne.n	8003116 <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	b2ed      	uxtb	r5, r5
 800310e:	629d      	str	r5, [r3, #40]	@ 0x28
 8003110:	e7e5      	b.n	80030de <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8003112:	2001      	movs	r0, #1
 8003114:	e7ed      	b.n	80030f2 <I2C_RequestMemoryRead+0x42>
      return HAL_ERROR;
 8003116:	2001      	movs	r0, #1
 8003118:	e7eb      	b.n	80030f2 <I2C_RequestMemoryRead+0x42>
    return HAL_ERROR;
 800311a:	2001      	movs	r0, #1
 800311c:	e7e9      	b.n	80030f2 <I2C_RequestMemoryRead+0x42>
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	80002000 	.word	0x80002000

08003124 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	0004      	movs	r4, r0
 8003128:	000d      	movs	r5, r1
 800312a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800312c:	e003      	b.n	8003136 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	069b      	lsls	r3, r3, #26
 8003134:	d512      	bpl.n	800315c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	069b      	lsls	r3, r3, #26
 800313c:	d41b      	bmi.n	8003176 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800313e:	0032      	movs	r2, r6
 8003140:	0029      	movs	r1, r5
 8003142:	0020      	movs	r0, r4
 8003144:	f7ff fe7a 	bl	8002e3c <I2C_IsErrorOccurred>
 8003148:	2800      	cmp	r0, #0
 800314a:	d116      	bne.n	800317a <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314c:	f7ff fcee 	bl	8002b2c <HAL_GetTick>
 8003150:	1b80      	subs	r0, r0, r6
 8003152:	42a8      	cmp	r0, r5
 8003154:	d8eb      	bhi.n	800312e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8003156:	2d00      	cmp	r5, #0
 8003158:	d1ed      	bne.n	8003136 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
 800315a:	e7e8      	b.n	800312e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800315c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800315e:	2220      	movs	r2, #32
 8003160:	4313      	orrs	r3, r2
 8003162:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003164:	2341      	movs	r3, #65	@ 0x41
 8003166:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	2300      	movs	r3, #0
 800316a:	3222      	adds	r2, #34	@ 0x22
 800316c:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 800316e:	3a02      	subs	r2, #2
 8003170:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8003172:	2001      	movs	r0, #1
 8003174:	e000      	b.n	8003178 <I2C_WaitOnSTOPFlagUntilTimeout+0x54>
  return HAL_OK;
 8003176:	2000      	movs	r0, #0
}
 8003178:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800317a:	2001      	movs	r0, #1
 800317c:	e7fc      	b.n	8003178 <I2C_WaitOnSTOPFlagUntilTimeout+0x54>
	...

08003180 <HAL_I2C_Init>:
{
 8003180:	b510      	push	{r4, lr}
 8003182:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8003184:	d060      	beq.n	8003248 <HAL_I2C_Init+0xc8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003186:	2341      	movs	r3, #65	@ 0x41
 8003188:	5cc3      	ldrb	r3, [r0, r3]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d048      	beq.n	8003220 <HAL_I2C_Init+0xa0>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800318e:	2341      	movs	r3, #65	@ 0x41
 8003190:	2224      	movs	r2, #36	@ 0x24
 8003192:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8003194:	6822      	ldr	r2, [r4, #0]
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	438b      	bics	r3, r1
 800319c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800319e:	6863      	ldr	r3, [r4, #4]
 80031a0:	6822      	ldr	r2, [r4, #0]
 80031a2:	492a      	ldr	r1, [pc, #168]	@ (800324c <HAL_I2C_Init+0xcc>)
 80031a4:	400b      	ands	r3, r1
 80031a6:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031a8:	6822      	ldr	r2, [r4, #0]
 80031aa:	6893      	ldr	r3, [r2, #8]
 80031ac:	4928      	ldr	r1, [pc, #160]	@ (8003250 <HAL_I2C_Init+0xd0>)
 80031ae:	400b      	ands	r3, r1
 80031b0:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031b2:	68e3      	ldr	r3, [r4, #12]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d039      	beq.n	800322c <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031b8:	68a1      	ldr	r1, [r4, #8]
 80031ba:	6822      	ldr	r2, [r4, #0]
 80031bc:	2384      	movs	r3, #132	@ 0x84
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031c4:	68e3      	ldr	r3, [r4, #12]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d037      	beq.n	800323a <HAL_I2C_Init+0xba>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	6853      	ldr	r3, [r2, #4]
 80031ce:	4921      	ldr	r1, [pc, #132]	@ (8003254 <HAL_I2C_Init+0xd4>)
 80031d0:	400b      	ands	r3, r1
 80031d2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031d4:	6822      	ldr	r2, [r4, #0]
 80031d6:	6851      	ldr	r1, [r2, #4]
 80031d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003258 <HAL_I2C_Init+0xd8>)
 80031da:	430b      	orrs	r3, r1
 80031dc:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	68d3      	ldr	r3, [r2, #12]
 80031e2:	491b      	ldr	r1, [pc, #108]	@ (8003250 <HAL_I2C_Init+0xd0>)
 80031e4:	400b      	ands	r3, r1
 80031e6:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031e8:	6923      	ldr	r3, [r4, #16]
 80031ea:	6962      	ldr	r2, [r4, #20]
 80031ec:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031ee:	69a2      	ldr	r2, [r4, #24]
 80031f0:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031f2:	6821      	ldr	r1, [r4, #0]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031f8:	69e3      	ldr	r3, [r4, #28]
 80031fa:	6a21      	ldr	r1, [r4, #32]
 80031fc:	6822      	ldr	r2, [r4, #0]
 80031fe:	430b      	orrs	r3, r1
 8003200:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	6813      	ldr	r3, [r2, #0]
 8003206:	2101      	movs	r1, #1
 8003208:	430b      	orrs	r3, r1
 800320a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320c:	2300      	movs	r3, #0
 800320e:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003210:	2241      	movs	r2, #65	@ 0x41
 8003212:	311f      	adds	r1, #31
 8003214:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003216:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003218:	3201      	adds	r2, #1
 800321a:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800321c:	2000      	movs	r0, #0
}
 800321e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003220:	3340      	adds	r3, #64	@ 0x40
 8003222:	2200      	movs	r2, #0
 8003224:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8003226:	f7ff f8c5 	bl	80023b4 <HAL_I2C_MspInit>
 800322a:	e7b0      	b.n	800318e <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800322c:	68a1      	ldr	r1, [r4, #8]
 800322e:	6822      	ldr	r2, [r4, #0]
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	430b      	orrs	r3, r1
 8003236:	6093      	str	r3, [r2, #8]
 8003238:	e7c4      	b.n	80031c4 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800323a:	6822      	ldr	r2, [r4, #0]
 800323c:	6851      	ldr	r1, [r2, #4]
 800323e:	2380      	movs	r3, #128	@ 0x80
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	430b      	orrs	r3, r1
 8003244:	6053      	str	r3, [r2, #4]
 8003246:	e7c5      	b.n	80031d4 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8003248:	2001      	movs	r0, #1
 800324a:	e7e8      	b.n	800321e <HAL_I2C_Init+0x9e>
 800324c:	f0ffffff 	.word	0xf0ffffff
 8003250:	ffff7fff 	.word	0xffff7fff
 8003254:	fffff7ff 	.word	0xfffff7ff
 8003258:	02008000 	.word	0x02008000

0800325c <HAL_I2C_Mem_Write>:
{
 800325c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800325e:	b087      	sub	sp, #28
 8003260:	0004      	movs	r4, r0
 8003262:	9103      	str	r1, [sp, #12]
 8003264:	9204      	str	r2, [sp, #16]
 8003266:	9305      	str	r3, [sp, #20]
 8003268:	ab0c      	add	r3, sp, #48	@ 0x30
 800326a:	cb20      	ldmia	r3!, {r5}
 800326c:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800326e:	2341      	movs	r3, #65	@ 0x41
 8003270:	5cc3      	ldrb	r3, [r0, r3]
 8003272:	2b20      	cmp	r3, #32
 8003274:	d000      	beq.n	8003278 <HAL_I2C_Mem_Write+0x1c>
 8003276:	e0b3      	b.n	80033e0 <HAL_I2C_Mem_Write+0x184>
    if ((pData == NULL) || (Size == 0U))
 8003278:	2d00      	cmp	r5, #0
 800327a:	d018      	beq.n	80032ae <HAL_I2C_Mem_Write+0x52>
 800327c:	2f00      	cmp	r7, #0
 800327e:	d016      	beq.n	80032ae <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8003280:	2340      	movs	r3, #64	@ 0x40
 8003282:	5cc3      	ldrb	r3, [r0, r3]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d100      	bne.n	800328a <HAL_I2C_Mem_Write+0x2e>
 8003288:	e0ad      	b.n	80033e6 <HAL_I2C_Mem_Write+0x18a>
 800328a:	2340      	movs	r3, #64	@ 0x40
 800328c:	2201      	movs	r2, #1
 800328e:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8003290:	f7ff fc4c 	bl	8002b2c <HAL_GetTick>
 8003294:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003296:	2180      	movs	r1, #128	@ 0x80
 8003298:	9000      	str	r0, [sp, #0]
 800329a:	2319      	movs	r3, #25
 800329c:	2201      	movs	r2, #1
 800329e:	0209      	lsls	r1, r1, #8
 80032a0:	0020      	movs	r0, r4
 80032a2:	f7ff fe84 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 80032a6:	2800      	cmp	r0, #0
 80032a8:	d006      	beq.n	80032b8 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 80032aa:	2001      	movs	r0, #1
 80032ac:	e099      	b.n	80033e2 <HAL_I2C_Mem_Write+0x186>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80032b4:	2001      	movs	r0, #1
 80032b6:	e094      	b.n	80033e2 <HAL_I2C_Mem_Write+0x186>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032b8:	2341      	movs	r3, #65	@ 0x41
 80032ba:	2221      	movs	r2, #33	@ 0x21
 80032bc:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032be:	3301      	adds	r3, #1
 80032c0:	321f      	adds	r2, #31
 80032c2:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80032c8:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032ca:	8567      	strh	r7, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032cc:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032ce:	9601      	str	r6, [sp, #4]
 80032d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	9b05      	ldr	r3, [sp, #20]
 80032d6:	9a04      	ldr	r2, [sp, #16]
 80032d8:	9903      	ldr	r1, [sp, #12]
 80032da:	0020      	movs	r0, r4
 80032dc:	f7ff feac 	bl	8003038 <I2C_RequestMemoryWrite>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d10f      	bne.n	8003304 <HAL_I2C_Mem_Write+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2bff      	cmp	r3, #255	@ 0xff
 80032ea:	d910      	bls.n	800330e <HAL_I2C_Mem_Write+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ec:	23ff      	movs	r3, #255	@ 0xff
 80032ee:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032f0:	3b7f      	subs	r3, #127	@ 0x7f
 80032f2:	2200      	movs	r2, #0
 80032f4:	9200      	str	r2, [sp, #0]
 80032f6:	045b      	lsls	r3, r3, #17
 80032f8:	32ff      	adds	r2, #255	@ 0xff
 80032fa:	9903      	ldr	r1, [sp, #12]
 80032fc:	0020      	movs	r0, r4
 80032fe:	f7ff fd83 	bl	8002e08 <I2C_TransferConfig>
 8003302:	e021      	b.n	8003348 <HAL_I2C_Mem_Write+0xec>
      __HAL_UNLOCK(hi2c);
 8003304:	2340      	movs	r3, #64	@ 0x40
 8003306:	2200      	movs	r2, #0
 8003308:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 800330a:	2001      	movs	r0, #1
 800330c:	e069      	b.n	80033e2 <HAL_I2C_Mem_Write+0x186>
      hi2c->XferSize = hi2c->XferCount;
 800330e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003310:	b292      	uxth	r2, r2
 8003312:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	2100      	movs	r1, #0
 800331a:	9100      	str	r1, [sp, #0]
 800331c:	049b      	lsls	r3, r3, #18
 800331e:	9903      	ldr	r1, [sp, #12]
 8003320:	0020      	movs	r0, r4
 8003322:	f7ff fd71 	bl	8002e08 <I2C_TransferConfig>
 8003326:	e00f      	b.n	8003348 <HAL_I2C_Mem_Write+0xec>
          hi2c->XferSize = hi2c->XferCount;
 8003328:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800332a:	b292      	uxth	r2, r2
 800332c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800332e:	2380      	movs	r3, #128	@ 0x80
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	2100      	movs	r1, #0
 8003334:	9100      	str	r1, [sp, #0]
 8003336:	049b      	lsls	r3, r3, #18
 8003338:	9903      	ldr	r1, [sp, #12]
 800333a:	0020      	movs	r0, r4
 800333c:	f7ff fd64 	bl	8002e08 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003340:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d034      	beq.n	80033b2 <HAL_I2C_Mem_Write+0x156>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003348:	0032      	movs	r2, r6
 800334a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800334c:	0020      	movs	r0, r4
 800334e:	f7ff fe01 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8003352:	2800      	cmp	r0, #0
 8003354:	d149      	bne.n	80033ea <HAL_I2C_Mem_Write+0x18e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003356:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	7812      	ldrb	r2, [r2, #0]
 800335c:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800335e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003360:	3301      	adds	r3, #1
 8003362:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003364:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003366:	3b01      	subs	r3, #1
 8003368:	b29b      	uxth	r3, r3
 800336a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800336c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800336e:	3b01      	subs	r3, #1
 8003370:	b29b      	uxth	r3, r3
 8003372:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003374:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003376:	b292      	uxth	r2, r2
 8003378:	2a00      	cmp	r2, #0
 800337a:	d0e1      	beq.n	8003340 <HAL_I2C_Mem_Write+0xe4>
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1df      	bne.n	8003340 <HAL_I2C_Mem_Write+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003380:	9600      	str	r6, [sp, #0]
 8003382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003384:	2200      	movs	r2, #0
 8003386:	2180      	movs	r1, #128	@ 0x80
 8003388:	0020      	movs	r0, r4
 800338a:	f7ff fe10 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 800338e:	2800      	cmp	r0, #0
 8003390:	d12d      	bne.n	80033ee <HAL_I2C_Mem_Write+0x192>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003392:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2bff      	cmp	r3, #255	@ 0xff
 8003398:	d9c6      	bls.n	8003328 <HAL_I2C_Mem_Write+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800339a:	23ff      	movs	r3, #255	@ 0xff
 800339c:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800339e:	3b7f      	subs	r3, #127	@ 0x7f
 80033a0:	2200      	movs	r2, #0
 80033a2:	9200      	str	r2, [sp, #0]
 80033a4:	045b      	lsls	r3, r3, #17
 80033a6:	32ff      	adds	r2, #255	@ 0xff
 80033a8:	9903      	ldr	r1, [sp, #12]
 80033aa:	0020      	movs	r0, r4
 80033ac:	f7ff fd2c 	bl	8002e08 <I2C_TransferConfig>
 80033b0:	e7c6      	b.n	8003340 <HAL_I2C_Mem_Write+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b2:	0032      	movs	r2, r6
 80033b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80033b6:	0020      	movs	r0, r4
 80033b8:	f7ff feb4 	bl	8003124 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033bc:	2800      	cmp	r0, #0
 80033be:	d118      	bne.n	80033f2 <HAL_I2C_Mem_Write+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	2220      	movs	r2, #32
 80033c4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80033c6:	6821      	ldr	r1, [r4, #0]
 80033c8:	684b      	ldr	r3, [r1, #4]
 80033ca:	4d0b      	ldr	r5, [pc, #44]	@ (80033f8 <HAL_I2C_Mem_Write+0x19c>)
 80033cc:	402b      	ands	r3, r5
 80033ce:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	2341      	movs	r3, #65	@ 0x41
 80033d2:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	3222      	adds	r2, #34	@ 0x22
 80033d8:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80033da:	3a02      	subs	r2, #2
 80033dc:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 80033de:	e000      	b.n	80033e2 <HAL_I2C_Mem_Write+0x186>
    return HAL_BUSY;
 80033e0:	2002      	movs	r0, #2
}
 80033e2:	b007      	add	sp, #28
 80033e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80033e6:	2002      	movs	r0, #2
 80033e8:	e7fb      	b.n	80033e2 <HAL_I2C_Mem_Write+0x186>
        return HAL_ERROR;
 80033ea:	2001      	movs	r0, #1
 80033ec:	e7f9      	b.n	80033e2 <HAL_I2C_Mem_Write+0x186>
          return HAL_ERROR;
 80033ee:	2001      	movs	r0, #1
 80033f0:	e7f7      	b.n	80033e2 <HAL_I2C_Mem_Write+0x186>
      return HAL_ERROR;
 80033f2:	2001      	movs	r0, #1
 80033f4:	e7f5      	b.n	80033e2 <HAL_I2C_Mem_Write+0x186>
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	fe00e800 	.word	0xfe00e800

080033fc <HAL_I2C_Mem_Read>:
{
 80033fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fe:	b087      	sub	sp, #28
 8003400:	0004      	movs	r4, r0
 8003402:	9103      	str	r1, [sp, #12]
 8003404:	9204      	str	r2, [sp, #16]
 8003406:	9305      	str	r3, [sp, #20]
 8003408:	ab0c      	add	r3, sp, #48	@ 0x30
 800340a:	cb20      	ldmia	r3!, {r5}
 800340c:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800340e:	2341      	movs	r3, #65	@ 0x41
 8003410:	5cc3      	ldrb	r3, [r0, r3]
 8003412:	2b20      	cmp	r3, #32
 8003414:	d000      	beq.n	8003418 <HAL_I2C_Mem_Read+0x1c>
 8003416:	e0b5      	b.n	8003584 <HAL_I2C_Mem_Read+0x188>
    if ((pData == NULL) || (Size == 0U))
 8003418:	2d00      	cmp	r5, #0
 800341a:	d018      	beq.n	800344e <HAL_I2C_Mem_Read+0x52>
 800341c:	2f00      	cmp	r7, #0
 800341e:	d016      	beq.n	800344e <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 8003420:	2340      	movs	r3, #64	@ 0x40
 8003422:	5cc3      	ldrb	r3, [r0, r3]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d100      	bne.n	800342a <HAL_I2C_Mem_Read+0x2e>
 8003428:	e0af      	b.n	800358a <HAL_I2C_Mem_Read+0x18e>
 800342a:	2340      	movs	r3, #64	@ 0x40
 800342c:	2201      	movs	r2, #1
 800342e:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8003430:	f7ff fb7c 	bl	8002b2c <HAL_GetTick>
 8003434:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003436:	2180      	movs	r1, #128	@ 0x80
 8003438:	9000      	str	r0, [sp, #0]
 800343a:	2319      	movs	r3, #25
 800343c:	2201      	movs	r2, #1
 800343e:	0209      	lsls	r1, r1, #8
 8003440:	0020      	movs	r0, r4
 8003442:	f7ff fdb4 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003446:	2800      	cmp	r0, #0
 8003448:	d006      	beq.n	8003458 <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 800344a:	2001      	movs	r0, #1
 800344c:	e09b      	b.n	8003586 <HAL_I2C_Mem_Read+0x18a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800344e:	2380      	movs	r3, #128	@ 0x80
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003454:	2001      	movs	r0, #1
 8003456:	e096      	b.n	8003586 <HAL_I2C_Mem_Read+0x18a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003458:	2341      	movs	r3, #65	@ 0x41
 800345a:	2222      	movs	r2, #34	@ 0x22
 800345c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800345e:	3301      	adds	r3, #1
 8003460:	321e      	adds	r2, #30
 8003462:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003464:	2300      	movs	r3, #0
 8003466:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8003468:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800346a:	8567      	strh	r7, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800346c:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800346e:	9601      	str	r6, [sp, #4]
 8003470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	9b05      	ldr	r3, [sp, #20]
 8003476:	9a04      	ldr	r2, [sp, #16]
 8003478:	9903      	ldr	r1, [sp, #12]
 800347a:	0020      	movs	r0, r4
 800347c:	f7ff fe18 	bl	80030b0 <I2C_RequestMemoryRead>
 8003480:	2800      	cmp	r0, #0
 8003482:	d10f      	bne.n	80034a4 <HAL_I2C_Mem_Read+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003484:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	2bff      	cmp	r3, #255	@ 0xff
 800348a:	d910      	bls.n	80034ae <HAL_I2C_Mem_Read+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800348c:	23ff      	movs	r3, #255	@ 0xff
 800348e:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003490:	3b7f      	subs	r3, #127	@ 0x7f
 8003492:	4a42      	ldr	r2, [pc, #264]	@ (800359c <HAL_I2C_Mem_Read+0x1a0>)
 8003494:	9200      	str	r2, [sp, #0]
 8003496:	045b      	lsls	r3, r3, #17
 8003498:	22ff      	movs	r2, #255	@ 0xff
 800349a:	9903      	ldr	r1, [sp, #12]
 800349c:	0020      	movs	r0, r4
 800349e:	f7ff fcb3 	bl	8002e08 <I2C_TransferConfig>
 80034a2:	e021      	b.n	80034e8 <HAL_I2C_Mem_Read+0xec>
      __HAL_UNLOCK(hi2c);
 80034a4:	2340      	movs	r3, #64	@ 0x40
 80034a6:	2200      	movs	r2, #0
 80034a8:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80034aa:	2001      	movs	r0, #1
 80034ac:	e06b      	b.n	8003586 <HAL_I2C_Mem_Read+0x18a>
      hi2c->XferSize = hi2c->XferCount;
 80034ae:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80034b0:	b292      	uxth	r2, r2
 80034b2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034b4:	2380      	movs	r3, #128	@ 0x80
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	4938      	ldr	r1, [pc, #224]	@ (800359c <HAL_I2C_Mem_Read+0x1a0>)
 80034ba:	9100      	str	r1, [sp, #0]
 80034bc:	049b      	lsls	r3, r3, #18
 80034be:	9903      	ldr	r1, [sp, #12]
 80034c0:	0020      	movs	r0, r4
 80034c2:	f7ff fca1 	bl	8002e08 <I2C_TransferConfig>
 80034c6:	e00f      	b.n	80034e8 <HAL_I2C_Mem_Read+0xec>
          hi2c->XferSize = hi2c->XferCount;
 80034c8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80034ca:	b292      	uxth	r2, r2
 80034cc:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	2100      	movs	r1, #0
 80034d4:	9100      	str	r1, [sp, #0]
 80034d6:	049b      	lsls	r3, r3, #18
 80034d8:	9903      	ldr	r1, [sp, #12]
 80034da:	0020      	movs	r0, r4
 80034dc:	f7ff fc94 	bl	8002e08 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80034e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d036      	beq.n	8003556 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034e8:	9600      	str	r6, [sp, #0]
 80034ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80034ec:	2200      	movs	r2, #0
 80034ee:	2104      	movs	r1, #4
 80034f0:	0020      	movs	r0, r4
 80034f2:	f7ff fd5c 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d149      	bne.n	800358e <HAL_I2C_Mem_Read+0x192>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003500:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003502:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003504:	3301      	adds	r3, #1
 8003506:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8003508:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800350a:	3b01      	subs	r3, #1
 800350c:	b29b      	uxth	r3, r3
 800350e:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003510:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003512:	3a01      	subs	r2, #1
 8003514:	b292      	uxth	r2, r2
 8003516:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003518:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800351a:	b292      	uxth	r2, r2
 800351c:	2a00      	cmp	r2, #0
 800351e:	d0df      	beq.n	80034e0 <HAL_I2C_Mem_Read+0xe4>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1dd      	bne.n	80034e0 <HAL_I2C_Mem_Read+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003524:	9600      	str	r6, [sp, #0]
 8003526:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	@ 0x80
 800352c:	0020      	movs	r0, r4
 800352e:	f7ff fd3e 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003532:	2800      	cmp	r0, #0
 8003534:	d12d      	bne.n	8003592 <HAL_I2C_Mem_Read+0x196>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003536:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	2bff      	cmp	r3, #255	@ 0xff
 800353c:	d9c4      	bls.n	80034c8 <HAL_I2C_Mem_Read+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800353e:	23ff      	movs	r3, #255	@ 0xff
 8003540:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003542:	3b7f      	subs	r3, #127	@ 0x7f
 8003544:	2200      	movs	r2, #0
 8003546:	9200      	str	r2, [sp, #0]
 8003548:	045b      	lsls	r3, r3, #17
 800354a:	32ff      	adds	r2, #255	@ 0xff
 800354c:	9903      	ldr	r1, [sp, #12]
 800354e:	0020      	movs	r0, r4
 8003550:	f7ff fc5a 	bl	8002e08 <I2C_TransferConfig>
 8003554:	e7c4      	b.n	80034e0 <HAL_I2C_Mem_Read+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003556:	0032      	movs	r2, r6
 8003558:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800355a:	0020      	movs	r0, r4
 800355c:	f7ff fde2 	bl	8003124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003560:	2800      	cmp	r0, #0
 8003562:	d118      	bne.n	8003596 <HAL_I2C_Mem_Read+0x19a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	2220      	movs	r2, #32
 8003568:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800356a:	6821      	ldr	r1, [r4, #0]
 800356c:	684b      	ldr	r3, [r1, #4]
 800356e:	4d0c      	ldr	r5, [pc, #48]	@ (80035a0 <HAL_I2C_Mem_Read+0x1a4>)
 8003570:	402b      	ands	r3, r5
 8003572:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003574:	2341      	movs	r3, #65	@ 0x41
 8003576:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003578:	2300      	movs	r3, #0
 800357a:	3222      	adds	r2, #34	@ 0x22
 800357c:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 800357e:	3a02      	subs	r2, #2
 8003580:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8003582:	e000      	b.n	8003586 <HAL_I2C_Mem_Read+0x18a>
    return HAL_BUSY;
 8003584:	2002      	movs	r0, #2
}
 8003586:	b007      	add	sp, #28
 8003588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800358a:	2002      	movs	r0, #2
 800358c:	e7fb      	b.n	8003586 <HAL_I2C_Mem_Read+0x18a>
        return HAL_ERROR;
 800358e:	2001      	movs	r0, #1
 8003590:	e7f9      	b.n	8003586 <HAL_I2C_Mem_Read+0x18a>
          return HAL_ERROR;
 8003592:	2001      	movs	r0, #1
 8003594:	e7f7      	b.n	8003586 <HAL_I2C_Mem_Read+0x18a>
      return HAL_ERROR;
 8003596:	2001      	movs	r0, #1
 8003598:	e7f5      	b.n	8003586 <HAL_I2C_Mem_Read+0x18a>
 800359a:	46c0      	nop			@ (mov r8, r8)
 800359c:	80002400 	.word	0x80002400
 80035a0:	fe00e800 	.word	0xfe00e800

080035a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a6:	2341      	movs	r3, #65	@ 0x41
 80035a8:	5cc3      	ldrb	r3, [r0, r3]
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d120      	bne.n	80035f0 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ae:	3320      	adds	r3, #32
 80035b0:	5cc3      	ldrb	r3, [r0, r3]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d01e      	beq.n	80035f4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80035b6:	2440      	movs	r4, #64	@ 0x40
 80035b8:	2201      	movs	r2, #1
 80035ba:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035bc:	2541      	movs	r5, #65	@ 0x41
 80035be:	2324      	movs	r3, #36	@ 0x24
 80035c0:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035c2:	6806      	ldr	r6, [r0, #0]
 80035c4:	6833      	ldr	r3, [r6, #0]
 80035c6:	4393      	bics	r3, r2
 80035c8:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035ca:	6806      	ldr	r6, [r0, #0]
 80035cc:	6833      	ldr	r3, [r6, #0]
 80035ce:	4f0a      	ldr	r7, [pc, #40]	@ (80035f8 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 80035d0:	403b      	ands	r3, r7
 80035d2:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035d4:	6806      	ldr	r6, [r0, #0]
 80035d6:	6833      	ldr	r3, [r6, #0]
 80035d8:	430b      	orrs	r3, r1
 80035da:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035dc:	6801      	ldr	r1, [r0, #0]
 80035de:	680b      	ldr	r3, [r1, #0]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	2320      	movs	r3, #32
 80035e6:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e8:	2300      	movs	r3, #0
 80035ea:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80035ec:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80035ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80035f0:	2002      	movs	r0, #2
 80035f2:	e7fc      	b.n	80035ee <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 80035f4:	2002      	movs	r0, #2
 80035f6:	e7fa      	b.n	80035ee <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 80035f8:	ffffefff 	.word	0xffffefff

080035fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035fc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fe:	2341      	movs	r3, #65	@ 0x41
 8003600:	5cc3      	ldrb	r3, [r0, r3]
 8003602:	2b20      	cmp	r3, #32
 8003604:	d11e      	bne.n	8003644 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003606:	3320      	adds	r3, #32
 8003608:	5cc3      	ldrb	r3, [r0, r3]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d01c      	beq.n	8003648 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 800360e:	2440      	movs	r4, #64	@ 0x40
 8003610:	2201      	movs	r2, #1
 8003612:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003614:	2541      	movs	r5, #65	@ 0x41
 8003616:	2324      	movs	r3, #36	@ 0x24
 8003618:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800361a:	6806      	ldr	r6, [r0, #0]
 800361c:	6833      	ldr	r3, [r6, #0]
 800361e:	4393      	bics	r3, r2
 8003620:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003622:	6806      	ldr	r6, [r0, #0]
 8003624:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003626:	4f09      	ldr	r7, [pc, #36]	@ (800364c <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8003628:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800362a:	0209      	lsls	r1, r1, #8
 800362c:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800362e:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003630:	6801      	ldr	r1, [r0, #0]
 8003632:	680b      	ldr	r3, [r1, #0]
 8003634:	4313      	orrs	r3, r2
 8003636:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003638:	2320      	movs	r3, #32
 800363a:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363c:	2300      	movs	r3, #0
 800363e:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8003640:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003644:	2002      	movs	r0, #2
 8003646:	e7fc      	b.n	8003642 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8003648:	2002      	movs	r0, #2
 800364a:	e7fa      	b.n	8003642 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 800364c:	fffff0ff 	.word	0xfffff0ff

08003650 <HAL_PWR_EnableWakeUpPin>:
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR4_WP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8003650:	4905      	ldr	r1, [pc, #20]	@ (8003668 <HAL_PWR_EnableWakeUpPin+0x18>)
 8003652:	68ca      	ldr	r2, [r1, #12]
 8003654:	232f      	movs	r3, #47	@ 0x2f
 8003656:	4003      	ands	r3, r0
 8003658:	439a      	bics	r2, r3
 800365a:	0a00      	lsrs	r0, r0, #8
 800365c:	4302      	orrs	r2, r0
 800365e:	60ca      	str	r2, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8003660:	688a      	ldr	r2, [r1, #8]
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
}
 8003666:	4770      	bx	lr
 8003668:	40007000 	.word	0x40007000

0800366c <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 800366c:	4a06      	ldr	r2, [pc, #24]	@ (8003688 <HAL_PWR_EnterSTANDBYMode+0x1c>)
 800366e:	6813      	ldr	r3, [r2, #0]
 8003670:	2107      	movs	r1, #7
 8003672:	438b      	bics	r3, r1
 8003674:	3904      	subs	r1, #4
 8003676:	430b      	orrs	r3, r1
 8003678:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800367a:	4a04      	ldr	r2, [pc, #16]	@ (800368c <HAL_PWR_EnterSTANDBYMode+0x20>)
 800367c:	6913      	ldr	r3, [r2, #16]
 800367e:	3101      	adds	r1, #1
 8003680:	430b      	orrs	r3, r1
 8003682:	6113      	str	r3, [r2, #16]

  /* Request Wait For Interrupt */
  __WFI();
 8003684:	bf30      	wfi
}
 8003686:	4770      	bx	lr
 8003688:	40007000 	.word	0x40007000
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003694:	d100      	bne.n	8003698 <HAL_RCC_OscConfig+0x8>
 8003696:	e139      	b.n	800390c <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003698:	6803      	ldr	r3, [r0, #0]
 800369a:	07db      	lsls	r3, r3, #31
 800369c:	d52c      	bpl.n	80036f8 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369e:	4ba1      	ldr	r3, [pc, #644]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	2338      	movs	r3, #56	@ 0x38
 80036a4:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d022      	beq.n	80036f0 <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036aa:	6843      	ldr	r3, [r0, #4]
 80036ac:	2280      	movs	r2, #128	@ 0x80
 80036ae:	0252      	lsls	r2, r2, #9
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d02e      	beq.n	8003712 <HAL_RCC_OscConfig+0x82>
 80036b4:	22a0      	movs	r2, #160	@ 0xa0
 80036b6:	02d2      	lsls	r2, r2, #11
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d031      	beq.n	8003720 <HAL_RCC_OscConfig+0x90>
 80036bc:	4b99      	ldr	r3, [pc, #612]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4999      	ldr	r1, [pc, #612]	@ (8003928 <HAL_RCC_OscConfig+0x298>)
 80036c2:	400a      	ands	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4998      	ldr	r1, [pc, #608]	@ (800392c <HAL_RCC_OscConfig+0x29c>)
 80036ca:	400a      	ands	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ce:	6863      	ldr	r3, [r4, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d031      	beq.n	8003738 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7ff fa2a 	bl	8002b2c <HAL_GetTick>
 80036d8:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036da:	4b92      	ldr	r3, [pc, #584]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	039b      	lsls	r3, r3, #14
 80036e0:	d40a      	bmi.n	80036f8 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80036e2:	f7ff fa23 	bl	8002b2c <HAL_GetTick>
 80036e6:	1b40      	subs	r0, r0, r5
 80036e8:	2864      	cmp	r0, #100	@ 0x64
 80036ea:	d9f6      	bls.n	80036da <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 80036ec:	2003      	movs	r0, #3
 80036ee:	e10e      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80036f0:	6843      	ldr	r3, [r0, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d100      	bne.n	80036f8 <HAL_RCC_OscConfig+0x68>
 80036f6:	e10b      	b.n	8003910 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	079b      	lsls	r3, r3, #30
 80036fc:	d547      	bpl.n	800378e <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036fe:	4b89      	ldr	r3, [pc, #548]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003704:	421a      	tst	r2, r3
 8003706:	d161      	bne.n	80037cc <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003708:	68e3      	ldr	r3, [r4, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d122      	bne.n	8003754 <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 800370e:	2001      	movs	r0, #1
 8003710:	e0fd      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003712:	4a84      	ldr	r2, [pc, #528]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 8003714:	6811      	ldr	r1, [r2, #0]
 8003716:	2380      	movs	r3, #128	@ 0x80
 8003718:	025b      	lsls	r3, r3, #9
 800371a:	430b      	orrs	r3, r1
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e7d6      	b.n	80036ce <HAL_RCC_OscConfig+0x3e>
 8003720:	4b80      	ldr	r3, [pc, #512]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	2280      	movs	r2, #128	@ 0x80
 8003726:	02d2      	lsls	r2, r2, #11
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	2280      	movs	r2, #128	@ 0x80
 8003730:	0252      	lsls	r2, r2, #9
 8003732:	430a      	orrs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e7ca      	b.n	80036ce <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 8003738:	f7ff f9f8 	bl	8002b2c <HAL_GetTick>
 800373c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800373e:	4b79      	ldr	r3, [pc, #484]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	039b      	lsls	r3, r3, #14
 8003744:	d5d8      	bpl.n	80036f8 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003746:	f7ff f9f1 	bl	8002b2c <HAL_GetTick>
 800374a:	1b40      	subs	r0, r0, r5
 800374c:	2864      	cmp	r0, #100	@ 0x64
 800374e:	d9f6      	bls.n	800373e <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 8003750:	2003      	movs	r0, #3
 8003752:	e0dc      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003754:	4b73      	ldr	r3, [pc, #460]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	4975      	ldr	r1, [pc, #468]	@ (8003930 <HAL_RCC_OscConfig+0x2a0>)
 800375a:	400a      	ands	r2, r1
 800375c:	6961      	ldr	r1, [r4, #20]
 800375e:	0209      	lsls	r1, r1, #8
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4973      	ldr	r1, [pc, #460]	@ (8003934 <HAL_RCC_OscConfig+0x2a4>)
 8003768:	400a      	ands	r2, r1
 800376a:	6921      	ldr	r1, [r4, #16]
 800376c:	430a      	orrs	r2, r1
 800376e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	0adb      	lsrs	r3, r3, #11
 8003774:	2207      	movs	r2, #7
 8003776:	401a      	ands	r2, r3
 8003778:	4b6f      	ldr	r3, [pc, #444]	@ (8003938 <HAL_RCC_OscConfig+0x2a8>)
 800377a:	40d3      	lsrs	r3, r2
 800377c:	4a6f      	ldr	r2, [pc, #444]	@ (800393c <HAL_RCC_OscConfig+0x2ac>)
 800377e:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003780:	4b6f      	ldr	r3, [pc, #444]	@ (8003940 <HAL_RCC_OscConfig+0x2b0>)
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	f7ff f98e 	bl	8002aa4 <HAL_InitTick>
 8003788:	2800      	cmp	r0, #0
 800378a:	d000      	beq.n	800378e <HAL_RCC_OscConfig+0xfe>
 800378c:	e0c2      	b.n	8003914 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	071b      	lsls	r3, r3, #28
 8003792:	d557      	bpl.n	8003844 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003794:	4b63      	ldr	r3, [pc, #396]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	2338      	movs	r3, #56	@ 0x38
 800379a:	4013      	ands	r3, r2
 800379c:	2b18      	cmp	r3, #24
 800379e:	d04e      	beq.n	800383e <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a0:	69a3      	ldr	r3, [r4, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d077      	beq.n	8003896 <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80037a6:	4a5f      	ldr	r2, [pc, #380]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 80037a8:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80037aa:	2101      	movs	r1, #1
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7ff f9bc 	bl	8002b2c <HAL_GetTick>
 80037b4:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80037b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 80037b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ba:	079b      	lsls	r3, r3, #30
 80037bc:	d442      	bmi.n	8003844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80037be:	f7ff f9b5 	bl	8002b2c <HAL_GetTick>
 80037c2:	1b40      	subs	r0, r0, r5
 80037c4:	2802      	cmp	r0, #2
 80037c6:	d9f6      	bls.n	80037b6 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 80037c8:	2003      	movs	r0, #3
 80037ca:	e0a0      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037cc:	68e3      	ldr	r3, [r4, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d022      	beq.n	8003818 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037d2:	4a54      	ldr	r2, [pc, #336]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 80037d4:	6813      	ldr	r3, [r2, #0]
 80037d6:	4957      	ldr	r1, [pc, #348]	@ (8003934 <HAL_RCC_OscConfig+0x2a4>)
 80037d8:	400b      	ands	r3, r1
 80037da:	6921      	ldr	r1, [r4, #16]
 80037dc:	430b      	orrs	r3, r1
 80037de:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 80037e0:	6811      	ldr	r1, [r2, #0]
 80037e2:	2380      	movs	r3, #128	@ 0x80
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	430b      	orrs	r3, r1
 80037e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80037ea:	f7ff f99f 	bl	8002b2c <HAL_GetTick>
 80037ee:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	055b      	lsls	r3, r3, #21
 80037f6:	d406      	bmi.n	8003806 <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80037f8:	f7ff f998 	bl	8002b2c <HAL_GetTick>
 80037fc:	1b40      	subs	r0, r0, r5
 80037fe:	2802      	cmp	r0, #2
 8003800:	d9f6      	bls.n	80037f0 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8003802:	2003      	movs	r0, #3
 8003804:	e083      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003806:	4947      	ldr	r1, [pc, #284]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 8003808:	684b      	ldr	r3, [r1, #4]
 800380a:	4a49      	ldr	r2, [pc, #292]	@ (8003930 <HAL_RCC_OscConfig+0x2a0>)
 800380c:	4013      	ands	r3, r2
 800380e:	6962      	ldr	r2, [r4, #20]
 8003810:	0212      	lsls	r2, r2, #8
 8003812:	4313      	orrs	r3, r2
 8003814:	604b      	str	r3, [r1, #4]
 8003816:	e7ba      	b.n	800378e <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 8003818:	4a42      	ldr	r2, [pc, #264]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 800381a:	6813      	ldr	r3, [r2, #0]
 800381c:	4949      	ldr	r1, [pc, #292]	@ (8003944 <HAL_RCC_OscConfig+0x2b4>)
 800381e:	400b      	ands	r3, r1
 8003820:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003822:	f7ff f983 	bl	8002b2c <HAL_GetTick>
 8003826:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003828:	4b3e      	ldr	r3, [pc, #248]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	055b      	lsls	r3, r3, #21
 800382e:	d5ae      	bpl.n	800378e <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003830:	f7ff f97c 	bl	8002b2c <HAL_GetTick>
 8003834:	1b40      	subs	r0, r0, r5
 8003836:	2802      	cmp	r0, #2
 8003838:	d9f6      	bls.n	8003828 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 800383a:	2003      	movs	r0, #3
 800383c:	e067      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800383e:	69a3      	ldr	r3, [r4, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d069      	beq.n	8003918 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	075b      	lsls	r3, r3, #29
 8003848:	d568      	bpl.n	800391c <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800384a:	4b36      	ldr	r3, [pc, #216]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	2338      	movs	r3, #56	@ 0x38
 8003850:	4013      	ands	r3, r2
 8003852:	2b20      	cmp	r3, #32
 8003854:	d032      	beq.n	80038bc <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003856:	68a3      	ldr	r3, [r4, #8]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d034      	beq.n	80038c6 <HAL_RCC_OscConfig+0x236>
 800385c:	2b05      	cmp	r3, #5
 800385e:	d038      	beq.n	80038d2 <HAL_RCC_OscConfig+0x242>
 8003860:	4b30      	ldr	r3, [pc, #192]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 8003862:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003864:	2101      	movs	r1, #1
 8003866:	438a      	bics	r2, r1
 8003868:	65da      	str	r2, [r3, #92]	@ 0x5c
 800386a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800386c:	3103      	adds	r1, #3
 800386e:	438a      	bics	r2, r1
 8003870:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003872:	68a3      	ldr	r3, [r4, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d038      	beq.n	80038ea <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7ff f958 	bl	8002b2c <HAL_GetTick>
 800387c:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800387e:	4b29      	ldr	r3, [pc, #164]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 8003880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003882:	079b      	lsls	r3, r3, #30
 8003884:	d42f      	bmi.n	80038e6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7ff f951 	bl	8002b2c <HAL_GetTick>
 800388a:	1b00      	subs	r0, r0, r4
 800388c:	4b2e      	ldr	r3, [pc, #184]	@ (8003948 <HAL_RCC_OscConfig+0x2b8>)
 800388e:	4298      	cmp	r0, r3
 8003890:	d9f5      	bls.n	800387e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003892:	2003      	movs	r0, #3
 8003894:	e03b      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 8003896:	4a23      	ldr	r2, [pc, #140]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 8003898:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800389a:	2101      	movs	r1, #1
 800389c:	438b      	bics	r3, r1
 800389e:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80038a0:	f7ff f944 	bl	8002b2c <HAL_GetTick>
 80038a4:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80038a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 80038a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038aa:	079b      	lsls	r3, r3, #30
 80038ac:	d5ca      	bpl.n	8003844 <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80038ae:	f7ff f93d 	bl	8002b2c <HAL_GetTick>
 80038b2:	1b40      	subs	r0, r0, r5
 80038b4:	2802      	cmp	r0, #2
 80038b6:	d9f6      	bls.n	80038a6 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 80038b8:	2003      	movs	r0, #3
 80038ba:	e028      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80038bc:	68a3      	ldr	r3, [r4, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d02e      	beq.n	8003920 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80038c2:	2000      	movs	r0, #0
 80038c4:	e023      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c6:	4a17      	ldr	r2, [pc, #92]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 80038c8:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80038ca:	2101      	movs	r1, #1
 80038cc:	430b      	orrs	r3, r1
 80038ce:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80038d0:	e7cf      	b.n	8003872 <HAL_RCC_OscConfig+0x1e2>
 80038d2:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 80038d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038d6:	2104      	movs	r1, #4
 80038d8:	430a      	orrs	r2, r1
 80038da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038de:	3903      	subs	r1, #3
 80038e0:	430a      	orrs	r2, r1
 80038e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038e4:	e7c5      	b.n	8003872 <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 80038e6:	2000      	movs	r0, #0
 80038e8:	e011      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80038ea:	f7ff f91f 	bl	8002b2c <HAL_GetTick>
 80038ee:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <HAL_RCC_OscConfig+0x294>)
 80038f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f4:	079b      	lsls	r3, r3, #30
 80038f6:	d507      	bpl.n	8003908 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7ff f918 	bl	8002b2c <HAL_GetTick>
 80038fc:	1b00      	subs	r0, r0, r4
 80038fe:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <HAL_RCC_OscConfig+0x2b8>)
 8003900:	4298      	cmp	r0, r3
 8003902:	d9f5      	bls.n	80038f0 <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 8003904:	2003      	movs	r0, #3
 8003906:	e002      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8003908:	2000      	movs	r0, #0
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 800390c:	2001      	movs	r0, #1
}
 800390e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003910:	2001      	movs	r0, #1
 8003912:	e7fc      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 8003914:	2001      	movs	r0, #1
 8003916:	e7fa      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8003918:	2001      	movs	r0, #1
 800391a:	e7f8      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 800391c:	2000      	movs	r0, #0
 800391e:	e7f6      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8003920:	2001      	movs	r0, #1
 8003922:	e7f4      	b.n	800390e <HAL_RCC_OscConfig+0x27e>
 8003924:	40021000 	.word	0x40021000
 8003928:	fffeffff 	.word	0xfffeffff
 800392c:	fffbffff 	.word	0xfffbffff
 8003930:	ffff80ff 	.word	0xffff80ff
 8003934:	ffffc7ff 	.word	0xffffc7ff
 8003938:	02dc6c00 	.word	0x02dc6c00
 800393c:	20000020 	.word	0x20000020
 8003940:	20000028 	.word	0x20000028
 8003944:	fffffeff 	.word	0xfffffeff
 8003948:	00001388 	.word	0x00001388

0800394c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800394c:	4b14      	ldr	r3, [pc, #80]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x54>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2238      	movs	r2, #56	@ 0x38
 8003952:	421a      	tst	r2, r3
 8003954:	d107      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003956:	4b12      	ldr	r3, [pc, #72]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x54>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	0ad2      	lsrs	r2, r2, #11
 800395c:	2307      	movs	r3, #7
 800395e:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003960:	4810      	ldr	r0, [pc, #64]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x58>)
 8003962:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8003964:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003966:	4b0e      	ldr	r3, [pc, #56]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x54>)
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	2338      	movs	r3, #56	@ 0x38
 800396c:	4013      	ands	r3, r2
 800396e:	2b08      	cmp	r3, #8
 8003970:	d010      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003972:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x54>)
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	2338      	movs	r3, #56	@ 0x38
 8003978:	4013      	ands	r3, r2
 800397a:	2b20      	cmp	r3, #32
 800397c:	d00c      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800397e:	4b08      	ldr	r3, [pc, #32]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x54>)
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	2338      	movs	r3, #56	@ 0x38
 8003984:	4013      	ands	r3, r2
 8003986:	2b18      	cmp	r3, #24
 8003988:	d001      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 800398a:	2000      	movs	r0, #0
  return sysclockfreq;
 800398c:	e7ea      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 800398e:	20fa      	movs	r0, #250	@ 0xfa
 8003990:	01c0      	lsls	r0, r0, #7
 8003992:	e7e7      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8003994:	4804      	ldr	r0, [pc, #16]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8003996:	e7e5      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8003998:	2080      	movs	r0, #128	@ 0x80
 800399a:	0200      	lsls	r0, r0, #8
 800399c:	e7e2      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x18>
 800399e:	46c0      	nop			@ (mov r8, r8)
 80039a0:	40021000 	.word	0x40021000
 80039a4:	02dc6c00 	.word	0x02dc6c00
 80039a8:	007a1200 	.word	0x007a1200

080039ac <HAL_RCC_ClockConfig>:
{
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	0004      	movs	r4, r0
 80039b0:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d100      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xc>
 80039b6:	e0a4      	b.n	8003b02 <HAL_RCC_ClockConfig+0x156>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b8:	4b54      	ldr	r3, [pc, #336]	@ (8003b0c <HAL_RCC_ClockConfig+0x160>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	2307      	movs	r3, #7
 80039be:	4013      	ands	r3, r2
 80039c0:	428b      	cmp	r3, r1
 80039c2:	d321      	bcc.n	8003a08 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	079a      	lsls	r2, r3, #30
 80039c8:	d510      	bpl.n	80039ec <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ca:	075b      	lsls	r3, r3, #29
 80039cc:	d507      	bpl.n	80039de <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80039ce:	4950      	ldr	r1, [pc, #320]	@ (8003b10 <HAL_RCC_ClockConfig+0x164>)
 80039d0:	688a      	ldr	r2, [r1, #8]
 80039d2:	4b50      	ldr	r3, [pc, #320]	@ (8003b14 <HAL_RCC_ClockConfig+0x168>)
 80039d4:	401a      	ands	r2, r3
 80039d6:	23b0      	movs	r3, #176	@ 0xb0
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039de:	4a4c      	ldr	r2, [pc, #304]	@ (8003b10 <HAL_RCC_ClockConfig+0x164>)
 80039e0:	6893      	ldr	r3, [r2, #8]
 80039e2:	494d      	ldr	r1, [pc, #308]	@ (8003b18 <HAL_RCC_ClockConfig+0x16c>)
 80039e4:	400b      	ands	r3, r1
 80039e6:	68e1      	ldr	r1, [r4, #12]
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	07db      	lsls	r3, r3, #31
 80039f0:	d54c      	bpl.n	8003a8c <HAL_RCC_ClockConfig+0xe0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f2:	6863      	ldr	r3, [r4, #4]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d01e      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d139      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xc4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039fc:	4a44      	ldr	r2, [pc, #272]	@ (8003b10 <HAL_RCC_ClockConfig+0x164>)
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	0552      	lsls	r2, r2, #21
 8003a02:	d41c      	bmi.n	8003a3e <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8003a04:	2001      	movs	r0, #1
 8003a06:	e064      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a08:	4a40      	ldr	r2, [pc, #256]	@ (8003b0c <HAL_RCC_ClockConfig+0x160>)
 8003a0a:	6813      	ldr	r3, [r2, #0]
 8003a0c:	2107      	movs	r1, #7
 8003a0e:	438b      	bics	r3, r1
 8003a10:	432b      	orrs	r3, r5
 8003a12:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003a14:	f7ff f88a 	bl	8002b2c <HAL_GetTick>
 8003a18:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a1a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b0c <HAL_RCC_ClockConfig+0x160>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	2307      	movs	r3, #7
 8003a20:	4013      	ands	r3, r2
 8003a22:	42ab      	cmp	r3, r5
 8003a24:	d0ce      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a26:	f7ff f881 	bl	8002b2c <HAL_GetTick>
 8003a2a:	1b80      	subs	r0, r0, r6
 8003a2c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b1c <HAL_RCC_ClockConfig+0x170>)
 8003a2e:	4290      	cmp	r0, r2
 8003a30:	d9f3      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8003a32:	2003      	movs	r0, #3
 8003a34:	e04d      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a36:	4a36      	ldr	r2, [pc, #216]	@ (8003b10 <HAL_RCC_ClockConfig+0x164>)
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	0392      	lsls	r2, r2, #14
 8003a3c:	d563      	bpl.n	8003b06 <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a3e:	4934      	ldr	r1, [pc, #208]	@ (8003b10 <HAL_RCC_ClockConfig+0x164>)
 8003a40:	688a      	ldr	r2, [r1, #8]
 8003a42:	2007      	movs	r0, #7
 8003a44:	4382      	bics	r2, r0
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003a4a:	f7ff f86f 	bl	8002b2c <HAL_GetTick>
 8003a4e:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a50:	4b2f      	ldr	r3, [pc, #188]	@ (8003b10 <HAL_RCC_ClockConfig+0x164>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2238      	movs	r2, #56	@ 0x38
 8003a56:	401a      	ands	r2, r3
 8003a58:	6863      	ldr	r3, [r4, #4]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d015      	beq.n	8003a8c <HAL_RCC_ClockConfig+0xe0>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7ff f864 	bl	8002b2c <HAL_GetTick>
 8003a64:	1b80      	subs	r0, r0, r6
 8003a66:	4b2d      	ldr	r3, [pc, #180]	@ (8003b1c <HAL_RCC_ClockConfig+0x170>)
 8003a68:	4298      	cmp	r0, r3
 8003a6a:	d9f1      	bls.n	8003a50 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8003a6c:	2003      	movs	r0, #3
 8003a6e:	e030      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x126>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0xd4>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003a74:	4a26      	ldr	r2, [pc, #152]	@ (8003b10 <HAL_RCC_ClockConfig+0x164>)
 8003a76:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a78:	0792      	lsls	r2, r2, #30
 8003a7a:	d4e0      	bmi.n	8003a3e <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	e028      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003a80:	4a23      	ldr	r2, [pc, #140]	@ (8003b10 <HAL_RCC_ClockConfig+0x164>)
 8003a82:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003a84:	0792      	lsls	r2, r2, #30
 8003a86:	d4da      	bmi.n	8003a3e <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8003a88:	2001      	movs	r0, #1
 8003a8a:	e022      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x126>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003b0c <HAL_RCC_ClockConfig+0x160>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2307      	movs	r3, #7
 8003a92:	4013      	ands	r3, r2
 8003a94:	42ab      	cmp	r3, r5
 8003a96:	d81d      	bhi.n	8003ad4 <HAL_RCC_ClockConfig+0x128>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	075b      	lsls	r3, r3, #29
 8003a9c:	d506      	bpl.n	8003aac <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <HAL_RCC_ClockConfig+0x164>)
 8003aa0:	6893      	ldr	r3, [r2, #8]
 8003aa2:	491f      	ldr	r1, [pc, #124]	@ (8003b20 <HAL_RCC_ClockConfig+0x174>)
 8003aa4:	400b      	ands	r3, r1
 8003aa6:	6921      	ldr	r1, [r4, #16]
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003aac:	f7ff ff4e 	bl	800394c <HAL_RCC_GetSysClockFreq>
 8003ab0:	4b17      	ldr	r3, [pc, #92]	@ (8003b10 <HAL_RCC_ClockConfig+0x164>)
 8003ab2:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003ab4:	0a12      	lsrs	r2, r2, #8
 8003ab6:	230f      	movs	r3, #15
 8003ab8:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003aba:	4a1a      	ldr	r2, [pc, #104]	@ (8003b24 <HAL_RCC_ClockConfig+0x178>)
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003ac0:	231f      	movs	r3, #31
 8003ac2:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003ac4:	40d8      	lsrs	r0, r3
 8003ac6:	4b18      	ldr	r3, [pc, #96]	@ (8003b28 <HAL_RCC_ClockConfig+0x17c>)
 8003ac8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003aca:	4b18      	ldr	r3, [pc, #96]	@ (8003b2c <HAL_RCC_ClockConfig+0x180>)
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	f7fe ffe9 	bl	8002aa4 <HAL_InitTick>
}
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8003b0c <HAL_RCC_ClockConfig+0x160>)
 8003ad6:	6813      	ldr	r3, [r2, #0]
 8003ad8:	2107      	movs	r1, #7
 8003ada:	438b      	bics	r3, r1
 8003adc:	432b      	orrs	r3, r5
 8003ade:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003ae0:	f7ff f824 	bl	8002b2c <HAL_GetTick>
 8003ae4:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ae6:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <HAL_RCC_ClockConfig+0x160>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	2307      	movs	r3, #7
 8003aec:	4013      	ands	r3, r2
 8003aee:	42ab      	cmp	r3, r5
 8003af0:	d0d2      	beq.n	8003a98 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003af2:	f7ff f81b 	bl	8002b2c <HAL_GetTick>
 8003af6:	1b80      	subs	r0, r0, r6
 8003af8:	4b08      	ldr	r3, [pc, #32]	@ (8003b1c <HAL_RCC_ClockConfig+0x170>)
 8003afa:	4298      	cmp	r0, r3
 8003afc:	d9f3      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_TIMEOUT;
 8003afe:	2003      	movs	r0, #3
 8003b00:	e7e7      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 8003b02:	2001      	movs	r0, #1
 8003b04:	e7e5      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x126>
        return HAL_ERROR;
 8003b06:	2001      	movs	r0, #1
 8003b08:	e7e3      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x126>
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	40022000 	.word	0x40022000
 8003b10:	40021000 	.word	0x40021000
 8003b14:	ffff84ff 	.word	0xffff84ff
 8003b18:	fffff0ff 	.word	0xfffff0ff
 8003b1c:	00001388 	.word	0x00001388
 8003b20:	ffff8fff 	.word	0xffff8fff
 8003b24:	08005ad4 	.word	0x08005ad4
 8003b28:	20000020 	.word	0x20000020
 8003b2c:	20000028 	.word	0x20000028

08003b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b30:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003b32:	f7ff ff0b 	bl	800394c <HAL_RCC_GetSysClockFreq>
 8003b36:	4b07      	ldr	r3, [pc, #28]	@ (8003b54 <HAL_RCC_GetHCLKFreq+0x24>)
 8003b38:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003b3a:	0a12      	lsrs	r2, r2, #8
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003b40:	4a05      	ldr	r2, [pc, #20]	@ (8003b58 <HAL_RCC_GetHCLKFreq+0x28>)
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003b46:	231f      	movs	r3, #31
 8003b48:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003b4a:	40d8      	lsrs	r0, r3
 8003b4c:	4b03      	ldr	r3, [pc, #12]	@ (8003b5c <HAL_RCC_GetHCLKFreq+0x2c>)
 8003b4e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8003b50:	bd10      	pop	{r4, pc}
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	40021000 	.word	0x40021000
 8003b58:	08005ad4 	.word	0x08005ad4
 8003b5c:	20000020 	.word	0x20000020

08003b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b60:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003b62:	f7ff ffe5 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b66:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	0b12      	lsrs	r2, r2, #12
 8003b6c:	2307      	movs	r3, #7
 8003b6e:	4013      	ands	r3, r2
 8003b70:	4a04      	ldr	r2, [pc, #16]	@ (8003b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	589a      	ldr	r2, [r3, r2]
 8003b76:	231f      	movs	r3, #31
 8003b78:	4013      	ands	r3, r2
 8003b7a:	40d8      	lsrs	r0, r3
}
 8003b7c:	bd10      	pop	{r4, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	40021000 	.word	0x40021000
 8003b84:	08005ab4 	.word	0x08005ab4

08003b88 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b88:	b570      	push	{r4, r5, r6, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b8e:	6803      	ldr	r3, [r0, #0]
 8003b90:	065b      	lsls	r3, r3, #25
 8003b92:	d550      	bpl.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b94:	4b42      	ldr	r3, [pc, #264]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	d435      	bmi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9c:	4b40      	ldr	r3, [pc, #256]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ba0:	2180      	movs	r1, #128	@ 0x80
 8003ba2:	0549      	lsls	r1, r1, #21
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003baa:	400b      	ands	r3, r1
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003bb0:	2501      	movs	r5, #1
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003bb4:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8003bb6:	22c0      	movs	r2, #192	@ 0xc0
 8003bb8:	0092      	lsls	r2, r2, #2
 8003bba:	000b      	movs	r3, r1
 8003bbc:	4013      	ands	r3, r2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bbe:	4211      	tst	r1, r2
 8003bc0:	d035      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8003bc2:	69a2      	ldr	r2, [r4, #24]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d00d      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003bc8:	4a35      	ldr	r2, [pc, #212]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003bca:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8003bcc:	4935      	ldr	r1, [pc, #212]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8003bce:	400b      	ands	r3, r1
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bd0:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8003bd2:	2180      	movs	r1, #128	@ 0x80
 8003bd4:	0249      	lsls	r1, r1, #9
 8003bd6:	4301      	orrs	r1, r0
 8003bd8:	65d1      	str	r1, [r2, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bda:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8003bdc:	4832      	ldr	r0, [pc, #200]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8003bde:	4001      	ands	r1, r0
 8003be0:	65d1      	str	r1, [r2, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003be2:	65d3      	str	r3, [r2, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003be4:	07db      	lsls	r3, r3, #31
 8003be6:	d411      	bmi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003bea:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8003bec:	492d      	ldr	r1, [pc, #180]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8003bee:	400b      	ands	r3, r1
 8003bf0:	69a1      	ldr	r1, [r4, #24]
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf6:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bf8:	2d01      	cmp	r5, #1
 8003bfa:	d11d      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfc:	4a28      	ldr	r2, [pc, #160]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003bfe:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8003c00:	492a      	ldr	r1, [pc, #168]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003c02:	400b      	ands	r3, r1
 8003c04:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003c06:	e017      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    FlagStatus       pwrclkchanged = RESET;
 8003c08:	2500      	movs	r5, #0
 8003c0a:	e7d2      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      tickstart = HAL_GetTick();
 8003c0c:	f7fe ff8e 	bl	8002b2c <HAL_GetTick>
 8003c10:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003c12:	4b23      	ldr	r3, [pc, #140]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c16:	079b      	lsls	r3, r3, #30
 8003c18:	d407      	bmi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7fe ff87 	bl	8002b2c <HAL_GetTick>
 8003c1e:	1b80      	subs	r0, r0, r6
 8003c20:	4b23      	ldr	r3, [pc, #140]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003c22:	4298      	cmp	r0, r3
 8003c24:	d9f5      	bls.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
          ret = HAL_TIMEOUT;
 8003c26:	2003      	movs	r0, #3
 8003c28:	e002      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8003c2e:	2000      	movs	r0, #0
    if (ret == HAL_OK)
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d1e1      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003c34:	e7d8      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c36:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	07db      	lsls	r3, r3, #31
 8003c3c:	d506      	bpl.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c3e:	4a18      	ldr	r2, [pc, #96]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003c40:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003c42:	2103      	movs	r1, #3
 8003c44:	438b      	bics	r3, r1
 8003c46:	68a1      	ldr	r1, [r4, #8]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	079b      	lsls	r3, r3, #30
 8003c50:	d506      	bpl.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c52:	4a13      	ldr	r2, [pc, #76]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003c54:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003c56:	4917      	ldr	r1, [pc, #92]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003c58:	400b      	ands	r3, r1
 8003c5a:	68e1      	ldr	r1, [r4, #12]
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	069b      	lsls	r3, r3, #26
 8003c64:	d506      	bpl.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c66:	4a0e      	ldr	r2, [pc, #56]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003c68:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	089b      	lsrs	r3, r3, #2
 8003c6e:	6961      	ldr	r1, [r4, #20]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	075b      	lsls	r3, r3, #29
 8003c78:	d506      	bpl.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003c7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003c7c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003c7e:	490e      	ldr	r1, [pc, #56]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c80:	400b      	ands	r3, r1
 8003c82:	6921      	ldr	r1, [r4, #16]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6553      	str	r3, [r2, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	061b      	lsls	r3, r3, #24
 8003c8c:	d506      	bpl.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003c8e:	4a04      	ldr	r2, [pc, #16]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003c90:	6813      	ldr	r3, [r2, #0]
 8003c92:	21e0      	movs	r1, #224	@ 0xe0
 8003c94:	438b      	bics	r3, r1
 8003c96:	6861      	ldr	r1, [r4, #4]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	fffffcff 	.word	0xfffffcff
 8003ca8:	fffeffff 	.word	0xfffeffff
 8003cac:	efffffff 	.word	0xefffffff
 8003cb0:	00001388 	.word	0x00001388
 8003cb4:	ffffcfff 	.word	0xffffcfff
 8003cb8:	ffff3fff 	.word	0xffff3fff

08003cbc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cbc:	233d      	movs	r3, #61	@ 0x3d
 8003cbe:	5cc3      	ldrb	r3, [r0, r3]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d122      	bne.n	8003d0a <HAL_TIM_Base_Start_IT+0x4e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	333c      	adds	r3, #60	@ 0x3c
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cca:	6802      	ldr	r2, [r0, #0]
 8003ccc:	68d3      	ldr	r3, [r2, #12]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd4:	6803      	ldr	r3, [r0, #0]
 8003cd6:	4a10      	ldr	r2, [pc, #64]	@ (8003d18 <HAL_TIM_Base_Start_IT+0x5c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d008      	beq.n	8003cee <HAL_TIM_Base_Start_IT+0x32>
 8003cdc:	4a0f      	ldr	r2, [pc, #60]	@ (8003d1c <HAL_TIM_Base_Start_IT+0x60>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d005      	beq.n	8003cee <HAL_TIM_Base_Start_IT+0x32>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cea:	2000      	movs	r0, #0
 8003cec:	e00e      	b.n	8003d0c <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	490b      	ldr	r1, [pc, #44]	@ (8003d20 <HAL_TIM_Base_Start_IT+0x64>)
 8003cf2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf4:	2a06      	cmp	r2, #6
 8003cf6:	d00a      	beq.n	8003d0e <HAL_TIM_Base_Start_IT+0x52>
 8003cf8:	3907      	subs	r1, #7
 8003cfa:	428a      	cmp	r2, r1
 8003cfc:	d009      	beq.n	8003d12 <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	2101      	movs	r1, #1
 8003d02:	430a      	orrs	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003d06:	2000      	movs	r0, #0
 8003d08:	e000      	b.n	8003d0c <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8003d0a:	2001      	movs	r0, #1
}
 8003d0c:	4770      	bx	lr
  return HAL_OK;
 8003d0e:	2000      	movs	r0, #0
 8003d10:	e7fc      	b.n	8003d0c <HAL_TIM_Base_Start_IT+0x50>
 8003d12:	2000      	movs	r0, #0
 8003d14:	e7fa      	b.n	8003d0c <HAL_TIM_Base_Start_IT+0x50>
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	40012c00 	.word	0x40012c00
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	00010007 	.word	0x00010007

08003d24 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d24:	6802      	ldr	r2, [r0, #0]
 8003d26:	68d3      	ldr	r3, [r2, #12]
 8003d28:	2101      	movs	r1, #1
 8003d2a:	438b      	bics	r3, r1
 8003d2c:	60d3      	str	r3, [r2, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d2e:	6803      	ldr	r3, [r0, #0]
 8003d30:	6a19      	ldr	r1, [r3, #32]
 8003d32:	4a08      	ldr	r2, [pc, #32]	@ (8003d54 <HAL_TIM_Base_Stop_IT+0x30>)
 8003d34:	4211      	tst	r1, r2
 8003d36:	d107      	bne.n	8003d48 <HAL_TIM_Base_Stop_IT+0x24>
 8003d38:	6a19      	ldr	r1, [r3, #32]
 8003d3a:	4a07      	ldr	r2, [pc, #28]	@ (8003d58 <HAL_TIM_Base_Stop_IT+0x34>)
 8003d3c:	4211      	tst	r1, r2
 8003d3e:	d103      	bne.n	8003d48 <HAL_TIM_Base_Stop_IT+0x24>
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	2101      	movs	r1, #1
 8003d44:	438a      	bics	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	233d      	movs	r3, #61	@ 0x3d
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	54c2      	strb	r2, [r0, r3]

  /* Return function status */
  return HAL_OK;
}
 8003d4e:	2000      	movs	r0, #0
 8003d50:	4770      	bx	lr
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	00001111 	.word	0x00001111
 8003d58:	00000444 	.word	0x00000444

08003d5c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d5c:	4770      	bx	lr

08003d5e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d60:	4770      	bx	lr

08003d62 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIM_IRQHandler>:
{
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8003d68:	6803      	ldr	r3, [r0, #0]
 8003d6a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d6c:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d6e:	07a2      	lsls	r2, r4, #30
 8003d70:	d50e      	bpl.n	8003d90 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d72:	07b2      	lsls	r2, r6, #30
 8003d74:	d50c      	bpl.n	8003d90 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d76:	2203      	movs	r2, #3
 8003d78:	4252      	negs	r2, r2
 8003d7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d80:	6803      	ldr	r3, [r0, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	079b      	lsls	r3, r3, #30
 8003d86:	d057      	beq.n	8003e38 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 8003d88:	f7ff ffe9 	bl	8003d5e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d90:	0763      	lsls	r3, r4, #29
 8003d92:	d512      	bpl.n	8003dba <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d94:	0773      	lsls	r3, r6, #29
 8003d96:	d510      	bpl.n	8003dba <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	2205      	movs	r2, #5
 8003d9c:	4252      	negs	r2, r2
 8003d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003da0:	2302      	movs	r3, #2
 8003da2:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	699a      	ldr	r2, [r3, #24]
 8003da8:	23c0      	movs	r3, #192	@ 0xc0
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	421a      	tst	r2, r3
 8003dae:	d049      	beq.n	8003e44 <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 8003db0:	0028      	movs	r0, r5
 8003db2:	f7ff ffd4 	bl	8003d5e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	2300      	movs	r3, #0
 8003db8:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dba:	0723      	lsls	r3, r4, #28
 8003dbc:	d510      	bpl.n	8003de0 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dbe:	0733      	lsls	r3, r6, #28
 8003dc0:	d50e      	bpl.n	8003de0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dc2:	682b      	ldr	r3, [r5, #0]
 8003dc4:	2209      	movs	r2, #9
 8003dc6:	4252      	negs	r2, r2
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dca:	2304      	movs	r3, #4
 8003dcc:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dce:	682b      	ldr	r3, [r5, #0]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	079b      	lsls	r3, r3, #30
 8003dd4:	d03d      	beq.n	8003e52 <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	0028      	movs	r0, r5
 8003dd8:	f7ff ffc1 	bl	8003d5e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003de0:	06e3      	lsls	r3, r4, #27
 8003de2:	d512      	bpl.n	8003e0a <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003de4:	06f3      	lsls	r3, r6, #27
 8003de6:	d510      	bpl.n	8003e0a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	2211      	movs	r2, #17
 8003dec:	4252      	negs	r2, r2
 8003dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003df0:	2308      	movs	r3, #8
 8003df2:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	23c0      	movs	r3, #192	@ 0xc0
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	421a      	tst	r2, r3
 8003dfe:	d02f      	beq.n	8003e60 <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e00:	0028      	movs	r0, r5
 8003e02:	f7ff ffac 	bl	8003d5e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e06:	2300      	movs	r3, #0
 8003e08:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e0a:	07e3      	lsls	r3, r4, #31
 8003e0c:	d501      	bpl.n	8003e12 <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e0e:	07f3      	lsls	r3, r6, #31
 8003e10:	d42d      	bmi.n	8003e6e <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e12:	2382      	movs	r3, #130	@ 0x82
 8003e14:	019b      	lsls	r3, r3, #6
 8003e16:	421c      	tst	r4, r3
 8003e18:	d001      	beq.n	8003e1e <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e1a:	0633      	lsls	r3, r6, #24
 8003e1c:	d42f      	bmi.n	8003e7e <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e1e:	05e3      	lsls	r3, r4, #23
 8003e20:	d501      	bpl.n	8003e26 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e22:	0633      	lsls	r3, r6, #24
 8003e24:	d432      	bmi.n	8003e8c <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e26:	0663      	lsls	r3, r4, #25
 8003e28:	d501      	bpl.n	8003e2e <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e2a:	0673      	lsls	r3, r6, #25
 8003e2c:	d435      	bmi.n	8003e9a <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e2e:	06a4      	lsls	r4, r4, #26
 8003e30:	d501      	bpl.n	8003e36 <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e32:	06b6      	lsls	r6, r6, #26
 8003e34:	d439      	bmi.n	8003eaa <HAL_TIM_IRQHandler+0x146>
}
 8003e36:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e38:	f7ff ff90 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	0028      	movs	r0, r5
 8003e3e:	f7ff ff8f 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e42:	e7a3      	b.n	8003d8c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e44:	0028      	movs	r0, r5
 8003e46:	f7ff ff89 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4a:	0028      	movs	r0, r5
 8003e4c:	f7ff ff88 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e50:	e7b1      	b.n	8003db6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	0028      	movs	r0, r5
 8003e54:	f7ff ff82 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	0028      	movs	r0, r5
 8003e5a:	f7ff ff81 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e5e:	e7bd      	b.n	8003ddc <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e60:	0028      	movs	r0, r5
 8003e62:	f7ff ff7b 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e66:	0028      	movs	r0, r5
 8003e68:	f7ff ff7a 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e6c:	e7cb      	b.n	8003e06 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e6e:	682b      	ldr	r3, [r5, #0]
 8003e70:	2202      	movs	r2, #2
 8003e72:	4252      	negs	r2, r2
 8003e74:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e76:	0028      	movs	r0, r5
 8003e78:	f7fe fbbe 	bl	80025f8 <HAL_TIM_PeriodElapsedCallback>
 8003e7c:	e7c9      	b.n	8003e12 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003e7e:	682b      	ldr	r3, [r5, #0]
 8003e80:	4a0e      	ldr	r2, [pc, #56]	@ (8003ebc <HAL_TIM_IRQHandler+0x158>)
 8003e82:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003e84:	0028      	movs	r0, r5
 8003e86:	f000 f894 	bl	8003fb2 <HAL_TIMEx_BreakCallback>
 8003e8a:	e7c8      	b.n	8003e1e <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ec0 <HAL_TIM_IRQHandler+0x15c>)
 8003e90:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003e92:	0028      	movs	r0, r5
 8003e94:	f000 f88e 	bl	8003fb4 <HAL_TIMEx_Break2Callback>
 8003e98:	e7c5      	b.n	8003e26 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e9a:	682b      	ldr	r3, [r5, #0]
 8003e9c:	2241      	movs	r2, #65	@ 0x41
 8003e9e:	4252      	negs	r2, r2
 8003ea0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003ea2:	0028      	movs	r0, r5
 8003ea4:	f7ff ff5d 	bl	8003d62 <HAL_TIM_TriggerCallback>
 8003ea8:	e7c1      	b.n	8003e2e <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003eaa:	682b      	ldr	r3, [r5, #0]
 8003eac:	2221      	movs	r2, #33	@ 0x21
 8003eae:	4252      	negs	r2, r2
 8003eb0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003eb2:	0028      	movs	r0, r5
 8003eb4:	f000 f87c 	bl	8003fb0 <HAL_TIMEx_CommutCallback>
}
 8003eb8:	e7bd      	b.n	8003e36 <HAL_TIM_IRQHandler+0xd2>
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	ffffdf7f 	.word	0xffffdf7f
 8003ec0:	fffffeff 	.word	0xfffffeff

08003ec4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ec4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f38 <TIM_Base_SetConfig+0x74>)
 8003ec8:	4290      	cmp	r0, r2
 8003eca:	d002      	beq.n	8003ed2 <TIM_Base_SetConfig+0xe>
 8003ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8003f3c <TIM_Base_SetConfig+0x78>)
 8003ece:	4290      	cmp	r0, r2
 8003ed0:	d103      	bne.n	8003eda <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed2:	2270      	movs	r2, #112	@ 0x70
 8003ed4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003ed6:	684a      	ldr	r2, [r1, #4]
 8003ed8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	4a17      	ldr	r2, [pc, #92]	@ (8003f38 <TIM_Base_SetConfig+0x74>)
 8003edc:	4290      	cmp	r0, r2
 8003ede:	d00b      	beq.n	8003ef8 <TIM_Base_SetConfig+0x34>
 8003ee0:	4a16      	ldr	r2, [pc, #88]	@ (8003f3c <TIM_Base_SetConfig+0x78>)
 8003ee2:	4290      	cmp	r0, r2
 8003ee4:	d008      	beq.n	8003ef8 <TIM_Base_SetConfig+0x34>
 8003ee6:	4a16      	ldr	r2, [pc, #88]	@ (8003f40 <TIM_Base_SetConfig+0x7c>)
 8003ee8:	4290      	cmp	r0, r2
 8003eea:	d005      	beq.n	8003ef8 <TIM_Base_SetConfig+0x34>
 8003eec:	4a15      	ldr	r2, [pc, #84]	@ (8003f44 <TIM_Base_SetConfig+0x80>)
 8003eee:	4290      	cmp	r0, r2
 8003ef0:	d002      	beq.n	8003ef8 <TIM_Base_SetConfig+0x34>
 8003ef2:	4a15      	ldr	r2, [pc, #84]	@ (8003f48 <TIM_Base_SetConfig+0x84>)
 8003ef4:	4290      	cmp	r0, r2
 8003ef6:	d103      	bne.n	8003f00 <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef8:	4a14      	ldr	r2, [pc, #80]	@ (8003f4c <TIM_Base_SetConfig+0x88>)
 8003efa:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efc:	68ca      	ldr	r2, [r1, #12]
 8003efe:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f00:	2280      	movs	r2, #128	@ 0x80
 8003f02:	4393      	bics	r3, r2
 8003f04:	694a      	ldr	r2, [r1, #20]
 8003f06:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f08:	688a      	ldr	r2, [r1, #8]
 8003f0a:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f0c:	680a      	ldr	r2, [r1, #0]
 8003f0e:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f10:	4a09      	ldr	r2, [pc, #36]	@ (8003f38 <TIM_Base_SetConfig+0x74>)
 8003f12:	4290      	cmp	r0, r2
 8003f14:	d005      	beq.n	8003f22 <TIM_Base_SetConfig+0x5e>
 8003f16:	4a0b      	ldr	r2, [pc, #44]	@ (8003f44 <TIM_Base_SetConfig+0x80>)
 8003f18:	4290      	cmp	r0, r2
 8003f1a:	d002      	beq.n	8003f22 <TIM_Base_SetConfig+0x5e>
 8003f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f48 <TIM_Base_SetConfig+0x84>)
 8003f1e:	4290      	cmp	r0, r2
 8003f20:	d101      	bne.n	8003f26 <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f22:	690a      	ldr	r2, [r1, #16]
 8003f24:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f26:	6802      	ldr	r2, [r0, #0]
 8003f28:	2104      	movs	r1, #4
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f2e:	2201      	movs	r2, #1
 8003f30:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 8003f32:	6003      	str	r3, [r0, #0]
}
 8003f34:	4770      	bx	lr
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40002000 	.word	0x40002000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800
 8003f4c:	fffffcff 	.word	0xfffffcff

08003f50 <HAL_TIM_Base_Init>:
{
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003f54:	d02a      	beq.n	8003fac <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f56:	233d      	movs	r3, #61	@ 0x3d
 8003f58:	5cc3      	ldrb	r3, [r0, r3]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d020      	beq.n	8003fa0 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5e:	253d      	movs	r5, #61	@ 0x3d
 8003f60:	2302      	movs	r3, #2
 8003f62:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f64:	0021      	movs	r1, r4
 8003f66:	c901      	ldmia	r1!, {r0}
 8003f68:	f7ff ffac 	bl	8003ec4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	2248      	movs	r2, #72	@ 0x48
 8003f70:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f72:	3a0a      	subs	r2, #10
 8003f74:	54a3      	strb	r3, [r4, r2]
 8003f76:	3201      	adds	r2, #1
 8003f78:	54a3      	strb	r3, [r4, r2]
 8003f7a:	3201      	adds	r2, #1
 8003f7c:	54a3      	strb	r3, [r4, r2]
 8003f7e:	3201      	adds	r2, #1
 8003f80:	54a3      	strb	r3, [r4, r2]
 8003f82:	3201      	adds	r2, #1
 8003f84:	54a3      	strb	r3, [r4, r2]
 8003f86:	3201      	adds	r2, #1
 8003f88:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8a:	3201      	adds	r2, #1
 8003f8c:	54a3      	strb	r3, [r4, r2]
 8003f8e:	3201      	adds	r2, #1
 8003f90:	54a3      	strb	r3, [r4, r2]
 8003f92:	3201      	adds	r2, #1
 8003f94:	54a3      	strb	r3, [r4, r2]
 8003f96:	3201      	adds	r2, #1
 8003f98:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003f9a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003f9c:	2000      	movs	r0, #0
}
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003fa0:	333c      	adds	r3, #60	@ 0x3c
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003fa6:	f7fe fca1 	bl	80028ec <HAL_TIM_Base_MspInit>
 8003faa:	e7d8      	b.n	8003f5e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8003fac:	2001      	movs	r0, #1
 8003fae:	e7f6      	b.n	8003f9e <HAL_TIM_Base_Init+0x4e>

08003fb0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fb4:	4770      	bx	lr
	...

08003fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fb8:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fba:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fc4:	6801      	ldr	r1, [r0, #0]
 8003fc6:	680b      	ldr	r3, [r1, #0]
 8003fc8:	4d12      	ldr	r5, [pc, #72]	@ (8004014 <UART_EndRxTransfer+0x5c>)
 8003fca:	402b      	ands	r3, r5
 8003fcc:	600b      	str	r3, [r1, #0]
 8003fce:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fd2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fda:	6802      	ldr	r2, [r0, #0]
 8003fdc:	6893      	ldr	r3, [r2, #8]
 8003fde:	4c0e      	ldr	r4, [pc, #56]	@ (8004018 <UART_EndRxTransfer+0x60>)
 8003fe0:	4023      	ands	r3, r4
 8003fe2:	6093      	str	r3, [r2, #8]
 8003fe4:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d006      	beq.n	8003ffc <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fee:	238c      	movs	r3, #140	@ 0x8c
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ff8:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8003ffa:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ffc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004000:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004004:	6802      	ldr	r2, [r0, #0]
 8004006:	6813      	ldr	r3, [r2, #0]
 8004008:	2410      	movs	r4, #16
 800400a:	43a3      	bics	r3, r4
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	f381 8810 	msr	PRIMASK, r1
}
 8004012:	e7ec      	b.n	8003fee <UART_EndRxTransfer+0x36>
 8004014:	fffffedf 	.word	0xfffffedf
 8004018:	effffffe 	.word	0xeffffffe

0800401c <UART_SetConfig>:
{
 800401c:	b510      	push	{r4, lr}
 800401e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004020:	6883      	ldr	r3, [r0, #8]
 8004022:	6902      	ldr	r2, [r0, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	6942      	ldr	r2, [r0, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	69c2      	ldr	r2, [r0, #28]
 800402c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800402e:	6801      	ldr	r1, [r0, #0]
 8004030:	680a      	ldr	r2, [r1, #0]
 8004032:	4862      	ldr	r0, [pc, #392]	@ (80041bc <UART_SetConfig+0x1a0>)
 8004034:	4002      	ands	r2, r0
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800403a:	6822      	ldr	r2, [r4, #0]
 800403c:	6853      	ldr	r3, [r2, #4]
 800403e:	4960      	ldr	r1, [pc, #384]	@ (80041c0 <UART_SetConfig+0x1a4>)
 8004040:	400b      	ands	r3, r1
 8004042:	68e1      	ldr	r1, [r4, #12]
 8004044:	430b      	orrs	r3, r1
 8004046:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004048:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800404a:	6a22      	ldr	r2, [r4, #32]
 800404c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800404e:	6821      	ldr	r1, [r4, #0]
 8004050:	688b      	ldr	r3, [r1, #8]
 8004052:	485c      	ldr	r0, [pc, #368]	@ (80041c4 <UART_SetConfig+0x1a8>)
 8004054:	4003      	ands	r3, r0
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800405e:	210f      	movs	r1, #15
 8004060:	438b      	bics	r3, r1
 8004062:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004064:	430b      	orrs	r3, r1
 8004066:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	4a57      	ldr	r2, [pc, #348]	@ (80041c8 <UART_SetConfig+0x1ac>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d030      	beq.n	80040d2 <UART_SetConfig+0xb6>
 8004070:	4a56      	ldr	r2, [pc, #344]	@ (80041cc <UART_SetConfig+0x1b0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d03e      	beq.n	80040f4 <UART_SetConfig+0xd8>
 8004076:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004078:	69e0      	ldr	r0, [r4, #28]
 800407a:	2280      	movs	r2, #128	@ 0x80
 800407c:	0212      	lsls	r2, r2, #8
 800407e:	4290      	cmp	r0, r2
 8004080:	d042      	beq.n	8004108 <UART_SetConfig+0xec>
    switch (clocksource)
 8004082:	2b04      	cmp	r3, #4
 8004084:	d100      	bne.n	8004088 <UART_SetConfig+0x6c>
 8004086:	e089      	b.n	800419c <UART_SetConfig+0x180>
 8004088:	d87b      	bhi.n	8004182 <UART_SetConfig+0x166>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d100      	bne.n	8004090 <UART_SetConfig+0x74>
 800408e:	e07f      	b.n	8004190 <UART_SetConfig+0x174>
 8004090:	2b02      	cmp	r3, #2
 8004092:	d174      	bne.n	800417e <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004094:	4b4e      	ldr	r3, [pc, #312]	@ (80041d0 <UART_SetConfig+0x1b4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	2107      	movs	r1, #7
 800409c:	4019      	ands	r1, r3
 800409e:	3101      	adds	r1, #1
 80040a0:	484c      	ldr	r0, [pc, #304]	@ (80041d4 <UART_SetConfig+0x1b8>)
 80040a2:	f7fc f843 	bl	800012c <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040a6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80040a8:	4b4b      	ldr	r3, [pc, #300]	@ (80041d8 <UART_SetConfig+0x1bc>)
 80040aa:	0052      	lsls	r2, r2, #1
 80040ac:	5ad1      	ldrh	r1, [r2, r3]
 80040ae:	f7fc f83d 	bl	800012c <__udivsi3>
 80040b2:	6861      	ldr	r1, [r4, #4]
 80040b4:	084b      	lsrs	r3, r1, #1
 80040b6:	18c0      	adds	r0, r0, r3
 80040b8:	f7fc f838 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040bc:	0002      	movs	r2, r0
 80040be:	3a10      	subs	r2, #16
 80040c0:	4b46      	ldr	r3, [pc, #280]	@ (80041dc <UART_SetConfig+0x1c0>)
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d86f      	bhi.n	80041a6 <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	0400      	lsls	r0, r0, #16
 80040ca:	0c00      	lsrs	r0, r0, #16
 80040cc:	60d8      	str	r0, [r3, #12]
 80040ce:	2000      	movs	r0, #0
 80040d0:	e06a      	b.n	80041a8 <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040d2:	4b3f      	ldr	r3, [pc, #252]	@ (80041d0 <UART_SetConfig+0x1b4>)
 80040d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040d6:	2303      	movs	r3, #3
 80040d8:	4013      	ands	r3, r2
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d00c      	beq.n	80040f8 <UART_SetConfig+0xdc>
 80040de:	d805      	bhi.n	80040ec <UART_SetConfig+0xd0>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <UART_SetConfig+0xe0>
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d10b      	bne.n	8004100 <UART_SetConfig+0xe4>
 80040e8:	3303      	adds	r3, #3
 80040ea:	e7c5      	b.n	8004078 <UART_SetConfig+0x5c>
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d109      	bne.n	8004104 <UART_SetConfig+0xe8>
 80040f0:	3305      	adds	r3, #5
 80040f2:	e7c1      	b.n	8004078 <UART_SetConfig+0x5c>
 80040f4:	2300      	movs	r3, #0
 80040f6:	e7bf      	b.n	8004078 <UART_SetConfig+0x5c>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e7bd      	b.n	8004078 <UART_SetConfig+0x5c>
 80040fc:	2300      	movs	r3, #0
 80040fe:	e7bb      	b.n	8004078 <UART_SetConfig+0x5c>
 8004100:	2310      	movs	r3, #16
 8004102:	e7b9      	b.n	8004078 <UART_SetConfig+0x5c>
 8004104:	2310      	movs	r3, #16
 8004106:	e7b7      	b.n	8004078 <UART_SetConfig+0x5c>
    switch (clocksource)
 8004108:	2b04      	cmp	r3, #4
 800410a:	d035      	beq.n	8004178 <UART_SetConfig+0x15c>
 800410c:	d82a      	bhi.n	8004164 <UART_SetConfig+0x148>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d02c      	beq.n	800416c <UART_SetConfig+0x150>
 8004112:	2b02      	cmp	r3, #2
 8004114:	d124      	bne.n	8004160 <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004116:	4b2e      	ldr	r3, [pc, #184]	@ (80041d0 <UART_SetConfig+0x1b4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2107      	movs	r1, #7
 800411e:	4019      	ands	r1, r3
 8004120:	3101      	adds	r1, #1
 8004122:	482c      	ldr	r0, [pc, #176]	@ (80041d4 <UART_SetConfig+0x1b8>)
 8004124:	f7fc f802 	bl	800012c <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004128:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800412a:	4b2b      	ldr	r3, [pc, #172]	@ (80041d8 <UART_SetConfig+0x1bc>)
 800412c:	0052      	lsls	r2, r2, #1
 800412e:	5ad1      	ldrh	r1, [r2, r3]
 8004130:	f7fb fffc 	bl	800012c <__udivsi3>
 8004134:	0040      	lsls	r0, r0, #1
 8004136:	6861      	ldr	r1, [r4, #4]
 8004138:	084b      	lsrs	r3, r1, #1
 800413a:	18c0      	adds	r0, r0, r3
 800413c:	f7fb fff6 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004140:	0002      	movs	r2, r0
 8004142:	3a10      	subs	r2, #16
 8004144:	4b25      	ldr	r3, [pc, #148]	@ (80041dc <UART_SetConfig+0x1c0>)
 8004146:	429a      	cmp	r2, r3
 8004148:	d82b      	bhi.n	80041a2 <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800414a:	b282      	uxth	r2, r0
 800414c:	230f      	movs	r3, #15
 800414e:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004150:	0840      	lsrs	r0, r0, #1
 8004152:	3b08      	subs	r3, #8
 8004154:	4003      	ands	r3, r0
 8004156:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8004158:	6822      	ldr	r2, [r4, #0]
 800415a:	60d3      	str	r3, [r2, #12]
 800415c:	2000      	movs	r0, #0
 800415e:	e023      	b.n	80041a8 <UART_SetConfig+0x18c>
    switch (clocksource)
 8004160:	2001      	movs	r0, #1
 8004162:	e021      	b.n	80041a8 <UART_SetConfig+0x18c>
 8004164:	2b08      	cmp	r3, #8
 8004166:	d0df      	beq.n	8004128 <UART_SetConfig+0x10c>
 8004168:	2001      	movs	r0, #1
 800416a:	e01d      	b.n	80041a8 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800416c:	f7ff fcf8 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004170:	2800      	cmp	r0, #0
 8004172:	d1d9      	bne.n	8004128 <UART_SetConfig+0x10c>
 8004174:	2000      	movs	r0, #0
 8004176:	e017      	b.n	80041a8 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8004178:	f7ff fbe8 	bl	800394c <HAL_RCC_GetSysClockFreq>
        break;
 800417c:	e7f8      	b.n	8004170 <UART_SetConfig+0x154>
    switch (clocksource)
 800417e:	2001      	movs	r0, #1
 8004180:	e012      	b.n	80041a8 <UART_SetConfig+0x18c>
 8004182:	2b08      	cmp	r3, #8
 8004184:	d102      	bne.n	800418c <UART_SetConfig+0x170>
 8004186:	2080      	movs	r0, #128	@ 0x80
 8004188:	0200      	lsls	r0, r0, #8
 800418a:	e78c      	b.n	80040a6 <UART_SetConfig+0x8a>
 800418c:	2001      	movs	r0, #1
 800418e:	e00b      	b.n	80041a8 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004190:	f7ff fce6 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004194:	2800      	cmp	r0, #0
 8004196:	d186      	bne.n	80040a6 <UART_SetConfig+0x8a>
 8004198:	2000      	movs	r0, #0
 800419a:	e005      	b.n	80041a8 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 800419c:	f7ff fbd6 	bl	800394c <HAL_RCC_GetSysClockFreq>
        break;
 80041a0:	e7f8      	b.n	8004194 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 80041a2:	2001      	movs	r0, #1
 80041a4:	e000      	b.n	80041a8 <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 80041a6:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 80041a8:	2301      	movs	r3, #1
 80041aa:	226a      	movs	r2, #106	@ 0x6a
 80041ac:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 80041ae:	3a02      	subs	r2, #2
 80041b0:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80041b6:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80041b8:	bd10      	pop	{r4, pc}
 80041ba:	46c0      	nop			@ (mov r8, r8)
 80041bc:	cfff69f3 	.word	0xcfff69f3
 80041c0:	ffffcfff 	.word	0xffffcfff
 80041c4:	11fff4ff 	.word	0x11fff4ff
 80041c8:	40013800 	.word	0x40013800
 80041cc:	40004400 	.word	0x40004400
 80041d0:	40021000 	.word	0x40021000
 80041d4:	02dc6c00 	.word	0x02dc6c00
 80041d8:	08005b14 	.word	0x08005b14
 80041dc:	0000ffef 	.word	0x0000ffef

080041e0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041e0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80041e2:	071b      	lsls	r3, r3, #28
 80041e4:	d506      	bpl.n	80041f4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e6:	6802      	ldr	r2, [r0, #0]
 80041e8:	6853      	ldr	r3, [r2, #4]
 80041ea:	492c      	ldr	r1, [pc, #176]	@ (800429c <UART_AdvFeatureConfig+0xbc>)
 80041ec:	400b      	ands	r3, r1
 80041ee:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041f4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80041f6:	07db      	lsls	r3, r3, #31
 80041f8:	d506      	bpl.n	8004208 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041fa:	6802      	ldr	r2, [r0, #0]
 80041fc:	6853      	ldr	r3, [r2, #4]
 80041fe:	4928      	ldr	r1, [pc, #160]	@ (80042a0 <UART_AdvFeatureConfig+0xc0>)
 8004200:	400b      	ands	r3, r1
 8004202:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004204:	430b      	orrs	r3, r1
 8004206:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004208:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800420a:	079b      	lsls	r3, r3, #30
 800420c:	d506      	bpl.n	800421c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800420e:	6802      	ldr	r2, [r0, #0]
 8004210:	6853      	ldr	r3, [r2, #4]
 8004212:	4924      	ldr	r1, [pc, #144]	@ (80042a4 <UART_AdvFeatureConfig+0xc4>)
 8004214:	400b      	ands	r3, r1
 8004216:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8004218:	430b      	orrs	r3, r1
 800421a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800421c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800421e:	075b      	lsls	r3, r3, #29
 8004220:	d506      	bpl.n	8004230 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004222:	6802      	ldr	r2, [r0, #0]
 8004224:	6853      	ldr	r3, [r2, #4]
 8004226:	4920      	ldr	r1, [pc, #128]	@ (80042a8 <UART_AdvFeatureConfig+0xc8>)
 8004228:	400b      	ands	r3, r1
 800422a:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800422c:	430b      	orrs	r3, r1
 800422e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004230:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004232:	06db      	lsls	r3, r3, #27
 8004234:	d506      	bpl.n	8004244 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004236:	6802      	ldr	r2, [r0, #0]
 8004238:	6893      	ldr	r3, [r2, #8]
 800423a:	491c      	ldr	r1, [pc, #112]	@ (80042ac <UART_AdvFeatureConfig+0xcc>)
 800423c:	400b      	ands	r3, r1
 800423e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8004240:	430b      	orrs	r3, r1
 8004242:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004244:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004246:	069b      	lsls	r3, r3, #26
 8004248:	d506      	bpl.n	8004258 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800424a:	6802      	ldr	r2, [r0, #0]
 800424c:	6893      	ldr	r3, [r2, #8]
 800424e:	4918      	ldr	r1, [pc, #96]	@ (80042b0 <UART_AdvFeatureConfig+0xd0>)
 8004250:	400b      	ands	r3, r1
 8004252:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004254:	430b      	orrs	r3, r1
 8004256:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004258:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800425a:	065b      	lsls	r3, r3, #25
 800425c:	d50b      	bpl.n	8004276 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800425e:	6802      	ldr	r2, [r0, #0]
 8004260:	6853      	ldr	r3, [r2, #4]
 8004262:	4914      	ldr	r1, [pc, #80]	@ (80042b4 <UART_AdvFeatureConfig+0xd4>)
 8004264:	400b      	ands	r3, r1
 8004266:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8004268:	430b      	orrs	r3, r1
 800426a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800426c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800426e:	2380      	movs	r3, #128	@ 0x80
 8004270:	035b      	lsls	r3, r3, #13
 8004272:	429a      	cmp	r2, r3
 8004274:	d00a      	beq.n	800428c <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004276:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	d506      	bpl.n	800428a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800427c:	6802      	ldr	r2, [r0, #0]
 800427e:	6853      	ldr	r3, [r2, #4]
 8004280:	490d      	ldr	r1, [pc, #52]	@ (80042b8 <UART_AdvFeatureConfig+0xd8>)
 8004282:	400b      	ands	r3, r1
 8004284:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004286:	430b      	orrs	r3, r1
 8004288:	6053      	str	r3, [r2, #4]
}
 800428a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800428c:	6802      	ldr	r2, [r0, #0]
 800428e:	6853      	ldr	r3, [r2, #4]
 8004290:	490a      	ldr	r1, [pc, #40]	@ (80042bc <UART_AdvFeatureConfig+0xdc>)
 8004292:	400b      	ands	r3, r1
 8004294:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004296:	430b      	orrs	r3, r1
 8004298:	6053      	str	r3, [r2, #4]
 800429a:	e7ec      	b.n	8004276 <UART_AdvFeatureConfig+0x96>
 800429c:	ffff7fff 	.word	0xffff7fff
 80042a0:	fffdffff 	.word	0xfffdffff
 80042a4:	fffeffff 	.word	0xfffeffff
 80042a8:	fffbffff 	.word	0xfffbffff
 80042ac:	ffffefff 	.word	0xffffefff
 80042b0:	ffffdfff 	.word	0xffffdfff
 80042b4:	ffefffff 	.word	0xffefffff
 80042b8:	fff7ffff 	.word	0xfff7ffff
 80042bc:	ff9fffff 	.word	0xff9fffff

080042c0 <UART_WaitOnFlagUntilTimeout>:
{
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	46ce      	mov	lr, r9
 80042c4:	4647      	mov	r7, r8
 80042c6:	b580      	push	{r7, lr}
 80042c8:	0006      	movs	r6, r0
 80042ca:	000d      	movs	r5, r1
 80042cc:	0017      	movs	r7, r2
 80042ce:	4699      	mov	r9, r3
 80042d0:	9b08      	ldr	r3, [sp, #32]
 80042d2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d4:	6833      	ldr	r3, [r6, #0]
 80042d6:	69dc      	ldr	r4, [r3, #28]
 80042d8:	402c      	ands	r4, r5
 80042da:	1b64      	subs	r4, r4, r5
 80042dc:	4263      	negs	r3, r4
 80042de:	415c      	adcs	r4, r3
 80042e0:	42bc      	cmp	r4, r7
 80042e2:	d133      	bne.n	800434c <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 80042e4:	4643      	mov	r3, r8
 80042e6:	3301      	adds	r3, #1
 80042e8:	d0f4      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fe fc1f 	bl	8002b2c <HAL_GetTick>
 80042ee:	464b      	mov	r3, r9
 80042f0:	1ac0      	subs	r0, r0, r3
 80042f2:	4540      	cmp	r0, r8
 80042f4:	d82f      	bhi.n	8004356 <UART_WaitOnFlagUntilTimeout+0x96>
 80042f6:	4643      	mov	r3, r8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d02e      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042fc:	6832      	ldr	r2, [r6, #0]
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	075b      	lsls	r3, r3, #29
 8004302:	d5e7      	bpl.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x14>
 8004304:	2d80      	cmp	r5, #128	@ 0x80
 8004306:	d0e5      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x14>
 8004308:	2d40      	cmp	r5, #64	@ 0x40
 800430a:	d0e3      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800430c:	69d3      	ldr	r3, [r2, #28]
 800430e:	071b      	lsls	r3, r3, #28
 8004310:	d410      	bmi.n	8004334 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004312:	69d3      	ldr	r3, [r2, #28]
 8004314:	051b      	lsls	r3, r3, #20
 8004316:	d5dd      	bpl.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004318:	2380      	movs	r3, #128	@ 0x80
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 800431e:	0030      	movs	r0, r6
 8004320:	f7ff fe4a 	bl	8003fb8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004324:	2390      	movs	r3, #144	@ 0x90
 8004326:	2220      	movs	r2, #32
 8004328:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 800432a:	3b0c      	subs	r3, #12
 800432c:	2200      	movs	r2, #0
 800432e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8004330:	2003      	movs	r0, #3
 8004332:	e00c      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004334:	2408      	movs	r4, #8
 8004336:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8004338:	0030      	movs	r0, r6
 800433a:	f7ff fe3d 	bl	8003fb8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800433e:	2390      	movs	r3, #144	@ 0x90
 8004340:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 8004342:	3b0c      	subs	r3, #12
 8004344:	2200      	movs	r2, #0
 8004346:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8004348:	2001      	movs	r0, #1
 800434a:	e000      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 800434c:	2000      	movs	r0, #0
}
 800434e:	bcc0      	pop	{r6, r7}
 8004350:	46b9      	mov	r9, r7
 8004352:	46b0      	mov	r8, r6
 8004354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004356:	2003      	movs	r0, #3
 8004358:	e7f9      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0x8e>
 800435a:	2003      	movs	r0, #3
 800435c:	e7f7      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0x8e>

0800435e <HAL_UART_Transmit>:
{
 800435e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004360:	46c6      	mov	lr, r8
 8004362:	b500      	push	{lr}
 8004364:	b082      	sub	sp, #8
 8004366:	0004      	movs	r4, r0
 8004368:	000d      	movs	r5, r1
 800436a:	4690      	mov	r8, r2
 800436c:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800436e:	2388      	movs	r3, #136	@ 0x88
 8004370:	58c3      	ldr	r3, [r0, r3]
 8004372:	2b20      	cmp	r3, #32
 8004374:	d166      	bne.n	8004444 <HAL_UART_Transmit+0xe6>
    if ((pData == NULL) || (Size == 0U))
 8004376:	2900      	cmp	r1, #0
 8004378:	d069      	beq.n	800444e <HAL_UART_Transmit+0xf0>
 800437a:	2a00      	cmp	r2, #0
 800437c:	d069      	beq.n	8004452 <HAL_UART_Transmit+0xf4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800437e:	6882      	ldr	r2, [r0, #8]
 8004380:	2380      	movs	r3, #128	@ 0x80
 8004382:	015b      	lsls	r3, r3, #5
 8004384:	429a      	cmp	r2, r3
 8004386:	d104      	bne.n	8004392 <HAL_UART_Transmit+0x34>
 8004388:	6903      	ldr	r3, [r0, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 800438e:	07cb      	lsls	r3, r1, #31
 8004390:	d461      	bmi.n	8004456 <HAL_UART_Transmit+0xf8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004392:	2390      	movs	r3, #144	@ 0x90
 8004394:	2200      	movs	r2, #0
 8004396:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004398:	3b08      	subs	r3, #8
 800439a:	3221      	adds	r2, #33	@ 0x21
 800439c:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800439e:	f7fe fbc5 	bl	8002b2c <HAL_GetTick>
 80043a2:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 80043a4:	2354      	movs	r3, #84	@ 0x54
 80043a6:	4642      	mov	r2, r8
 80043a8:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80043aa:	3302      	adds	r3, #2
 80043ac:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ae:	68a2      	ldr	r2, [r4, #8]
 80043b0:	2380      	movs	r3, #128	@ 0x80
 80043b2:	015b      	lsls	r3, r3, #5
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d002      	beq.n	80043be <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	4698      	mov	r8, r3
 80043bc:	e018      	b.n	80043f0 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043be:	6923      	ldr	r3, [r4, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02a      	beq.n	800441a <HAL_UART_Transmit+0xbc>
      pdata16bits = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	4698      	mov	r8, r3
 80043c8:	e012      	b.n	80043f0 <HAL_UART_Transmit+0x92>
        huart->gState = HAL_UART_STATE_READY;
 80043ca:	2388      	movs	r3, #136	@ 0x88
 80043cc:	2220      	movs	r2, #32
 80043ce:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 80043d0:	2003      	movs	r0, #3
 80043d2:	e038      	b.n	8004446 <HAL_UART_Transmit+0xe8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d4:	4643      	mov	r3, r8
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	6822      	ldr	r2, [r4, #0]
 80043da:	05db      	lsls	r3, r3, #23
 80043dc:	0ddb      	lsrs	r3, r3, #23
 80043de:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 80043e0:	2302      	movs	r3, #2
 80043e2:	469c      	mov	ip, r3
 80043e4:	44e0      	add	r8, ip
      huart->TxXferCount--;
 80043e6:	2356      	movs	r3, #86	@ 0x56
 80043e8:	5ae2      	ldrh	r2, [r4, r3]
 80043ea:	3a01      	subs	r2, #1
 80043ec:	b292      	uxth	r2, r2
 80043ee:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 80043f0:	2356      	movs	r3, #86	@ 0x56
 80043f2:	5ae3      	ldrh	r3, [r4, r3]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d012      	beq.n	8004420 <HAL_UART_Transmit+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043fa:	9600      	str	r6, [sp, #0]
 80043fc:	003b      	movs	r3, r7
 80043fe:	2200      	movs	r2, #0
 8004400:	2180      	movs	r1, #128	@ 0x80
 8004402:	0020      	movs	r0, r4
 8004404:	f7ff ff5c 	bl	80042c0 <UART_WaitOnFlagUntilTimeout>
 8004408:	2800      	cmp	r0, #0
 800440a:	d1de      	bne.n	80043ca <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 800440c:	2d00      	cmp	r5, #0
 800440e:	d0e1      	beq.n	80043d4 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004410:	782a      	ldrb	r2, [r5, #0]
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004416:	3501      	adds	r5, #1
 8004418:	e7e5      	b.n	80043e6 <HAL_UART_Transmit+0x88>
      pdata16bits = (const uint16_t *) pData;
 800441a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800441c:	2500      	movs	r5, #0
 800441e:	e7e7      	b.n	80043f0 <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004420:	9600      	str	r6, [sp, #0]
 8004422:	003b      	movs	r3, r7
 8004424:	2200      	movs	r2, #0
 8004426:	2140      	movs	r1, #64	@ 0x40
 8004428:	0020      	movs	r0, r4
 800442a:	f7ff ff49 	bl	80042c0 <UART_WaitOnFlagUntilTimeout>
 800442e:	2800      	cmp	r0, #0
 8004430:	d103      	bne.n	800443a <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8004432:	2388      	movs	r3, #136	@ 0x88
 8004434:	2220      	movs	r2, #32
 8004436:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8004438:	e005      	b.n	8004446 <HAL_UART_Transmit+0xe8>
      huart->gState = HAL_UART_STATE_READY;
 800443a:	2388      	movs	r3, #136	@ 0x88
 800443c:	2220      	movs	r2, #32
 800443e:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004440:	2003      	movs	r0, #3
 8004442:	e000      	b.n	8004446 <HAL_UART_Transmit+0xe8>
    return HAL_BUSY;
 8004444:	2002      	movs	r0, #2
}
 8004446:	b002      	add	sp, #8
 8004448:	bc80      	pop	{r7}
 800444a:	46b8      	mov	r8, r7
 800444c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800444e:	2001      	movs	r0, #1
 8004450:	e7f9      	b.n	8004446 <HAL_UART_Transmit+0xe8>
 8004452:	2001      	movs	r0, #1
 8004454:	e7f7      	b.n	8004446 <HAL_UART_Transmit+0xe8>
        return  HAL_ERROR;
 8004456:	2001      	movs	r0, #1
 8004458:	e7f5      	b.n	8004446 <HAL_UART_Transmit+0xe8>
	...

0800445c <UART_CheckIdleState>:
{
 800445c:	b530      	push	{r4, r5, lr}
 800445e:	b083      	sub	sp, #12
 8004460:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004462:	2390      	movs	r3, #144	@ 0x90
 8004464:	2200      	movs	r2, #0
 8004466:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8004468:	f7fe fb60 	bl	8002b2c <HAL_GetTick>
 800446c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	071b      	lsls	r3, r3, #28
 8004474:	d410      	bmi.n	8004498 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	075b      	lsls	r3, r3, #29
 800447c:	d42b      	bmi.n	80044d6 <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 800447e:	2320      	movs	r3, #32
 8004480:	2288      	movs	r2, #136	@ 0x88
 8004482:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004484:	3204      	adds	r2, #4
 8004486:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004488:	2300      	movs	r3, #0
 800448a:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800448c:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 800448e:	3a08      	subs	r2, #8
 8004490:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8004492:	2000      	movs	r0, #0
}
 8004494:	b003      	add	sp, #12
 8004496:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004498:	2180      	movs	r1, #128	@ 0x80
 800449a:	4b23      	ldr	r3, [pc, #140]	@ (8004528 <UART_CheckIdleState+0xcc>)
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	0003      	movs	r3, r0
 80044a0:	2200      	movs	r2, #0
 80044a2:	0389      	lsls	r1, r1, #14
 80044a4:	0020      	movs	r0, r4
 80044a6:	f7ff ff0b 	bl	80042c0 <UART_WaitOnFlagUntilTimeout>
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d0e3      	beq.n	8004476 <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b2:	2301      	movs	r3, #1
 80044b4:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80044b8:	6822      	ldr	r2, [r4, #0]
 80044ba:	6813      	ldr	r3, [r2, #0]
 80044bc:	2080      	movs	r0, #128	@ 0x80
 80044be:	4383      	bics	r3, r0
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80044c6:	2388      	movs	r3, #136	@ 0x88
 80044c8:	2220      	movs	r2, #32
 80044ca:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 80044cc:	3b04      	subs	r3, #4
 80044ce:	2200      	movs	r2, #0
 80044d0:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 80044d2:	387d      	subs	r0, #125	@ 0x7d
 80044d4:	e7de      	b.n	8004494 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044d6:	2180      	movs	r1, #128	@ 0x80
 80044d8:	4b13      	ldr	r3, [pc, #76]	@ (8004528 <UART_CheckIdleState+0xcc>)
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	002b      	movs	r3, r5
 80044de:	2200      	movs	r2, #0
 80044e0:	03c9      	lsls	r1, r1, #15
 80044e2:	0020      	movs	r0, r4
 80044e4:	f7ff feec 	bl	80042c0 <UART_WaitOnFlagUntilTimeout>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d0c8      	beq.n	800447e <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044ec:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f0:	2201      	movs	r2, #1
 80044f2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044f6:	6821      	ldr	r1, [r4, #0]
 80044f8:	680b      	ldr	r3, [r1, #0]
 80044fa:	4d0c      	ldr	r5, [pc, #48]	@ (800452c <UART_CheckIdleState+0xd0>)
 80044fc:	402b      	ands	r3, r5
 80044fe:	600b      	str	r3, [r1, #0]
 8004500:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004504:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004508:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450c:	6821      	ldr	r1, [r4, #0]
 800450e:	688b      	ldr	r3, [r1, #8]
 8004510:	4393      	bics	r3, r2
 8004512:	608b      	str	r3, [r1, #8]
 8004514:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004518:	238c      	movs	r3, #140	@ 0x8c
 800451a:	321f      	adds	r2, #31
 800451c:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 800451e:	3b08      	subs	r3, #8
 8004520:	2200      	movs	r2, #0
 8004522:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004524:	2003      	movs	r0, #3
 8004526:	e7b5      	b.n	8004494 <UART_CheckIdleState+0x38>
 8004528:	01ffffff 	.word	0x01ffffff
 800452c:	fffffedf 	.word	0xfffffedf

08004530 <HAL_UART_Init>:
{
 8004530:	b510      	push	{r4, lr}
 8004532:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004534:	d030      	beq.n	8004598 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004536:	2388      	movs	r3, #136	@ 0x88
 8004538:	58c3      	ldr	r3, [r0, r3]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d022      	beq.n	8004584 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 800453e:	2388      	movs	r3, #136	@ 0x88
 8004540:	2224      	movs	r2, #36	@ 0x24
 8004542:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8004544:	6822      	ldr	r2, [r4, #0]
 8004546:	6813      	ldr	r3, [r2, #0]
 8004548:	2101      	movs	r1, #1
 800454a:	438b      	bics	r3, r1
 800454c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800454e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11d      	bne.n	8004590 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004554:	0020      	movs	r0, r4
 8004556:	f7ff fd61 	bl	800401c <UART_SetConfig>
 800455a:	2801      	cmp	r0, #1
 800455c:	d011      	beq.n	8004582 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800455e:	6822      	ldr	r2, [r4, #0]
 8004560:	6853      	ldr	r3, [r2, #4]
 8004562:	490e      	ldr	r1, [pc, #56]	@ (800459c <HAL_UART_Init+0x6c>)
 8004564:	400b      	ands	r3, r1
 8004566:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004568:	6822      	ldr	r2, [r4, #0]
 800456a:	6893      	ldr	r3, [r2, #8]
 800456c:	212a      	movs	r1, #42	@ 0x2a
 800456e:	438b      	bics	r3, r1
 8004570:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	6813      	ldr	r3, [r2, #0]
 8004576:	3929      	subs	r1, #41	@ 0x29
 8004578:	430b      	orrs	r3, r1
 800457a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800457c:	0020      	movs	r0, r4
 800457e:	f7ff ff6d 	bl	800445c <UART_CheckIdleState>
}
 8004582:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004584:	3384      	adds	r3, #132	@ 0x84
 8004586:	2200      	movs	r2, #0
 8004588:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800458a:	f7fe fa1f 	bl	80029cc <HAL_UART_MspInit>
 800458e:	e7d6      	b.n	800453e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8004590:	0020      	movs	r0, r4
 8004592:	f7ff fe25 	bl	80041e0 <UART_AdvFeatureConfig>
 8004596:	e7dd      	b.n	8004554 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8004598:	2001      	movs	r0, #1
 800459a:	e7f2      	b.n	8004582 <HAL_UART_Init+0x52>
 800459c:	ffffb7ff 	.word	0xffffb7ff

080045a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045a4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d105      	bne.n	80045b6 <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 80045aa:	3301      	adds	r3, #1
 80045ac:	226a      	movs	r2, #106	@ 0x6a
 80045ae:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 80045b0:	3a02      	subs	r2, #2
 80045b2:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045b6:	6802      	ldr	r2, [r0, #0]
 80045b8:	6895      	ldr	r5, [r2, #8]
 80045ba:	0e6d      	lsrs	r5, r5, #25
 80045bc:	2307      	movs	r3, #7
 80045be:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045c0:	6892      	ldr	r2, [r2, #8]
 80045c2:	0f52      	lsrs	r2, r2, #29
 80045c4:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045c6:	4f08      	ldr	r7, [pc, #32]	@ (80045e8 <UARTEx_SetNbDataToProcess+0x48>)
 80045c8:	5cf8      	ldrb	r0, [r7, r3]
 80045ca:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80045cc:	4e07      	ldr	r6, [pc, #28]	@ (80045ec <UARTEx_SetNbDataToProcess+0x4c>)
 80045ce:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045d0:	f7fb fe36 	bl	8000240 <__divsi3>
 80045d4:	236a      	movs	r3, #106	@ 0x6a
 80045d6:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045d8:	5d78      	ldrb	r0, [r7, r5]
 80045da:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045dc:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045de:	f7fb fe2f 	bl	8000240 <__divsi3>
 80045e2:	2368      	movs	r3, #104	@ 0x68
 80045e4:	52e0      	strh	r0, [r4, r3]
}
 80045e6:	e7e5      	b.n	80045b4 <UARTEx_SetNbDataToProcess+0x14>
 80045e8:	08005b34 	.word	0x08005b34
 80045ec:	08005b2c 	.word	0x08005b2c

080045f0 <HAL_UARTEx_DisableFifoMode>:
{
 80045f0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80045f2:	2384      	movs	r3, #132	@ 0x84
 80045f4:	5cc3      	ldrb	r3, [r0, r3]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d015      	beq.n	8004626 <HAL_UARTEx_DisableFifoMode+0x36>
 80045fa:	2484      	movs	r4, #132	@ 0x84
 80045fc:	2601      	movs	r6, #1
 80045fe:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8004600:	2588      	movs	r5, #136	@ 0x88
 8004602:	2324      	movs	r3, #36	@ 0x24
 8004604:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004606:	6802      	ldr	r2, [r0, #0]
 8004608:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800460a:	6811      	ldr	r1, [r2, #0]
 800460c:	43b1      	bics	r1, r6
 800460e:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004610:	4a06      	ldr	r2, [pc, #24]	@ (800462c <HAL_UARTEx_DisableFifoMode+0x3c>)
 8004612:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004614:	2200      	movs	r2, #0
 8004616:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004618:	6801      	ldr	r1, [r0, #0]
 800461a:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800461c:	2320      	movs	r3, #32
 800461e:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8004620:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8004622:	2000      	movs	r0, #0
}
 8004624:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8004626:	2002      	movs	r0, #2
 8004628:	e7fc      	b.n	8004624 <HAL_UARTEx_DisableFifoMode+0x34>
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	dfffffff 	.word	0xdfffffff

08004630 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	0004      	movs	r4, r0
 8004634:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8004636:	2384      	movs	r3, #132	@ 0x84
 8004638:	5cc3      	ldrb	r3, [r0, r3]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d01b      	beq.n	8004676 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800463e:	2584      	movs	r5, #132	@ 0x84
 8004640:	2001      	movs	r0, #1
 8004642:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8004644:	2688      	movs	r6, #136	@ 0x88
 8004646:	2324      	movs	r3, #36	@ 0x24
 8004648:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800464e:	6819      	ldr	r1, [r3, #0]
 8004650:	4381      	bics	r1, r0
 8004652:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004654:	6820      	ldr	r0, [r4, #0]
 8004656:	6883      	ldr	r3, [r0, #8]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	08d9      	lsrs	r1, r3, #3
 800465c:	4311      	orrs	r1, r2
 800465e:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004660:	0020      	movs	r0, r4
 8004662:	f7ff ff9d 	bl	80045a0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800466a:	2320      	movs	r3, #32
 800466c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800466e:	2300      	movs	r3, #0
 8004670:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004672:	2000      	movs	r0, #0
}
 8004674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8004676:	2002      	movs	r0, #2
 8004678:	e7fc      	b.n	8004674 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

0800467c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	0004      	movs	r4, r0
 8004680:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8004682:	2284      	movs	r2, #132	@ 0x84
 8004684:	5c82      	ldrb	r2, [r0, r2]
 8004686:	2a01      	cmp	r2, #1
 8004688:	d01b      	beq.n	80046c2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800468a:	2584      	movs	r5, #132	@ 0x84
 800468c:	2001      	movs	r0, #1
 800468e:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8004690:	2688      	movs	r6, #136	@ 0x88
 8004692:	2224      	movs	r2, #36	@ 0x24
 8004694:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004696:	6822      	ldr	r2, [r4, #0]
 8004698:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800469a:	6811      	ldr	r1, [r2, #0]
 800469c:	4381      	bics	r1, r0
 800469e:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046a0:	6822      	ldr	r2, [r4, #0]
 80046a2:	6891      	ldr	r1, [r2, #8]
 80046a4:	4808      	ldr	r0, [pc, #32]	@ (80046c8 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 80046a6:	4001      	ands	r1, r0
 80046a8:	4319      	orrs	r1, r3
 80046aa:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80046ac:	0020      	movs	r0, r4
 80046ae:	f7ff ff77 	bl	80045a0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80046b6:	2320      	movs	r3, #32
 80046b8:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80046ba:	2300      	movs	r3, #0
 80046bc:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80046be:	2000      	movs	r0, #0
}
 80046c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80046c2:	2002      	movs	r0, #2
 80046c4:	e7fc      	b.n	80046c0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	f1ffffff 	.word	0xf1ffffff

080046cc <sniprintf>:
 80046cc:	b40c      	push	{r2, r3}
 80046ce:	b530      	push	{r4, r5, lr}
 80046d0:	4b18      	ldr	r3, [pc, #96]	@ (8004734 <sniprintf+0x68>)
 80046d2:	000c      	movs	r4, r1
 80046d4:	681d      	ldr	r5, [r3, #0]
 80046d6:	b09d      	sub	sp, #116	@ 0x74
 80046d8:	2900      	cmp	r1, #0
 80046da:	da08      	bge.n	80046ee <sniprintf+0x22>
 80046dc:	238b      	movs	r3, #139	@ 0x8b
 80046de:	2001      	movs	r0, #1
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	4240      	negs	r0, r0
 80046e4:	b01d      	add	sp, #116	@ 0x74
 80046e6:	bc30      	pop	{r4, r5}
 80046e8:	bc08      	pop	{r3}
 80046ea:	b002      	add	sp, #8
 80046ec:	4718      	bx	r3
 80046ee:	2382      	movs	r3, #130	@ 0x82
 80046f0:	466a      	mov	r2, sp
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	8293      	strh	r3, [r2, #20]
 80046f6:	2300      	movs	r3, #0
 80046f8:	9002      	str	r0, [sp, #8]
 80046fa:	931b      	str	r3, [sp, #108]	@ 0x6c
 80046fc:	9006      	str	r0, [sp, #24]
 80046fe:	4299      	cmp	r1, r3
 8004700:	d000      	beq.n	8004704 <sniprintf+0x38>
 8004702:	1e4b      	subs	r3, r1, #1
 8004704:	9304      	str	r3, [sp, #16]
 8004706:	9307      	str	r3, [sp, #28]
 8004708:	2301      	movs	r3, #1
 800470a:	466a      	mov	r2, sp
 800470c:	425b      	negs	r3, r3
 800470e:	82d3      	strh	r3, [r2, #22]
 8004710:	0028      	movs	r0, r5
 8004712:	ab21      	add	r3, sp, #132	@ 0x84
 8004714:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004716:	a902      	add	r1, sp, #8
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	f000 f9af 	bl	8004a7c <_svfiprintf_r>
 800471e:	1c43      	adds	r3, r0, #1
 8004720:	da01      	bge.n	8004726 <sniprintf+0x5a>
 8004722:	238b      	movs	r3, #139	@ 0x8b
 8004724:	602b      	str	r3, [r5, #0]
 8004726:	2c00      	cmp	r4, #0
 8004728:	d0dc      	beq.n	80046e4 <sniprintf+0x18>
 800472a:	2200      	movs	r2, #0
 800472c:	9b02      	ldr	r3, [sp, #8]
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	e7d8      	b.n	80046e4 <sniprintf+0x18>
 8004732:	46c0      	nop			@ (mov r8, r8)
 8004734:	2000002c 	.word	0x2000002c

08004738 <memmove>:
 8004738:	b510      	push	{r4, lr}
 800473a:	4288      	cmp	r0, r1
 800473c:	d902      	bls.n	8004744 <memmove+0xc>
 800473e:	188b      	adds	r3, r1, r2
 8004740:	4298      	cmp	r0, r3
 8004742:	d308      	bcc.n	8004756 <memmove+0x1e>
 8004744:	2300      	movs	r3, #0
 8004746:	429a      	cmp	r2, r3
 8004748:	d007      	beq.n	800475a <memmove+0x22>
 800474a:	5ccc      	ldrb	r4, [r1, r3]
 800474c:	54c4      	strb	r4, [r0, r3]
 800474e:	3301      	adds	r3, #1
 8004750:	e7f9      	b.n	8004746 <memmove+0xe>
 8004752:	5c8b      	ldrb	r3, [r1, r2]
 8004754:	5483      	strb	r3, [r0, r2]
 8004756:	3a01      	subs	r2, #1
 8004758:	d2fb      	bcs.n	8004752 <memmove+0x1a>
 800475a:	bd10      	pop	{r4, pc}

0800475c <memset>:
 800475c:	0003      	movs	r3, r0
 800475e:	1882      	adds	r2, r0, r2
 8004760:	4293      	cmp	r3, r2
 8004762:	d100      	bne.n	8004766 <memset+0xa>
 8004764:	4770      	bx	lr
 8004766:	7019      	strb	r1, [r3, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	e7f9      	b.n	8004760 <memset+0x4>

0800476c <__errno>:
 800476c:	4b01      	ldr	r3, [pc, #4]	@ (8004774 <__errno+0x8>)
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	4770      	bx	lr
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	2000002c 	.word	0x2000002c

08004778 <__libc_init_array>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	2600      	movs	r6, #0
 800477c:	4c0c      	ldr	r4, [pc, #48]	@ (80047b0 <__libc_init_array+0x38>)
 800477e:	4d0d      	ldr	r5, [pc, #52]	@ (80047b4 <__libc_init_array+0x3c>)
 8004780:	1b64      	subs	r4, r4, r5
 8004782:	10a4      	asrs	r4, r4, #2
 8004784:	42a6      	cmp	r6, r4
 8004786:	d109      	bne.n	800479c <__libc_init_array+0x24>
 8004788:	2600      	movs	r6, #0
 800478a:	f001 f921 	bl	80059d0 <_init>
 800478e:	4c0a      	ldr	r4, [pc, #40]	@ (80047b8 <__libc_init_array+0x40>)
 8004790:	4d0a      	ldr	r5, [pc, #40]	@ (80047bc <__libc_init_array+0x44>)
 8004792:	1b64      	subs	r4, r4, r5
 8004794:	10a4      	asrs	r4, r4, #2
 8004796:	42a6      	cmp	r6, r4
 8004798:	d105      	bne.n	80047a6 <__libc_init_array+0x2e>
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	00b3      	lsls	r3, r6, #2
 800479e:	58eb      	ldr	r3, [r5, r3]
 80047a0:	4798      	blx	r3
 80047a2:	3601      	adds	r6, #1
 80047a4:	e7ee      	b.n	8004784 <__libc_init_array+0xc>
 80047a6:	00b3      	lsls	r3, r6, #2
 80047a8:	58eb      	ldr	r3, [r5, r3]
 80047aa:	4798      	blx	r3
 80047ac:	3601      	adds	r6, #1
 80047ae:	e7f2      	b.n	8004796 <__libc_init_array+0x1e>
 80047b0:	08005b90 	.word	0x08005b90
 80047b4:	08005b90 	.word	0x08005b90
 80047b8:	08005b94 	.word	0x08005b94
 80047bc:	08005b90 	.word	0x08005b90

080047c0 <__retarget_lock_acquire_recursive>:
 80047c0:	4770      	bx	lr

080047c2 <__retarget_lock_release_recursive>:
 80047c2:	4770      	bx	lr

080047c4 <_free_r>:
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	0005      	movs	r5, r0
 80047c8:	1e0c      	subs	r4, r1, #0
 80047ca:	d010      	beq.n	80047ee <_free_r+0x2a>
 80047cc:	3c04      	subs	r4, #4
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	da00      	bge.n	80047d6 <_free_r+0x12>
 80047d4:	18e4      	adds	r4, r4, r3
 80047d6:	0028      	movs	r0, r5
 80047d8:	f000 f8e0 	bl	800499c <__malloc_lock>
 80047dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004854 <_free_r+0x90>)
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d105      	bne.n	80047f0 <_free_r+0x2c>
 80047e4:	6063      	str	r3, [r4, #4]
 80047e6:	6014      	str	r4, [r2, #0]
 80047e8:	0028      	movs	r0, r5
 80047ea:	f000 f8df 	bl	80049ac <__malloc_unlock>
 80047ee:	bd70      	pop	{r4, r5, r6, pc}
 80047f0:	42a3      	cmp	r3, r4
 80047f2:	d908      	bls.n	8004806 <_free_r+0x42>
 80047f4:	6820      	ldr	r0, [r4, #0]
 80047f6:	1821      	adds	r1, r4, r0
 80047f8:	428b      	cmp	r3, r1
 80047fa:	d1f3      	bne.n	80047e4 <_free_r+0x20>
 80047fc:	6819      	ldr	r1, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	1809      	adds	r1, r1, r0
 8004802:	6021      	str	r1, [r4, #0]
 8004804:	e7ee      	b.n	80047e4 <_free_r+0x20>
 8004806:	001a      	movs	r2, r3
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <_free_r+0x4e>
 800480e:	42a3      	cmp	r3, r4
 8004810:	d9f9      	bls.n	8004806 <_free_r+0x42>
 8004812:	6811      	ldr	r1, [r2, #0]
 8004814:	1850      	adds	r0, r2, r1
 8004816:	42a0      	cmp	r0, r4
 8004818:	d10b      	bne.n	8004832 <_free_r+0x6e>
 800481a:	6820      	ldr	r0, [r4, #0]
 800481c:	1809      	adds	r1, r1, r0
 800481e:	1850      	adds	r0, r2, r1
 8004820:	6011      	str	r1, [r2, #0]
 8004822:	4283      	cmp	r3, r0
 8004824:	d1e0      	bne.n	80047e8 <_free_r+0x24>
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	1841      	adds	r1, r0, r1
 800482c:	6011      	str	r1, [r2, #0]
 800482e:	6053      	str	r3, [r2, #4]
 8004830:	e7da      	b.n	80047e8 <_free_r+0x24>
 8004832:	42a0      	cmp	r0, r4
 8004834:	d902      	bls.n	800483c <_free_r+0x78>
 8004836:	230c      	movs	r3, #12
 8004838:	602b      	str	r3, [r5, #0]
 800483a:	e7d5      	b.n	80047e8 <_free_r+0x24>
 800483c:	6820      	ldr	r0, [r4, #0]
 800483e:	1821      	adds	r1, r4, r0
 8004840:	428b      	cmp	r3, r1
 8004842:	d103      	bne.n	800484c <_free_r+0x88>
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	1809      	adds	r1, r1, r0
 800484a:	6021      	str	r1, [r4, #0]
 800484c:	6063      	str	r3, [r4, #4]
 800484e:	6054      	str	r4, [r2, #4]
 8004850:	e7ca      	b.n	80047e8 <_free_r+0x24>
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	200003b0 	.word	0x200003b0

08004858 <sbrk_aligned>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	4e0f      	ldr	r6, [pc, #60]	@ (8004898 <sbrk_aligned+0x40>)
 800485c:	000d      	movs	r5, r1
 800485e:	6831      	ldr	r1, [r6, #0]
 8004860:	0004      	movs	r4, r0
 8004862:	2900      	cmp	r1, #0
 8004864:	d102      	bne.n	800486c <sbrk_aligned+0x14>
 8004866:	f000 fb83 	bl	8004f70 <_sbrk_r>
 800486a:	6030      	str	r0, [r6, #0]
 800486c:	0029      	movs	r1, r5
 800486e:	0020      	movs	r0, r4
 8004870:	f000 fb7e 	bl	8004f70 <_sbrk_r>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d103      	bne.n	8004880 <sbrk_aligned+0x28>
 8004878:	2501      	movs	r5, #1
 800487a:	426d      	negs	r5, r5
 800487c:	0028      	movs	r0, r5
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	2303      	movs	r3, #3
 8004882:	1cc5      	adds	r5, r0, #3
 8004884:	439d      	bics	r5, r3
 8004886:	42a8      	cmp	r0, r5
 8004888:	d0f8      	beq.n	800487c <sbrk_aligned+0x24>
 800488a:	1a29      	subs	r1, r5, r0
 800488c:	0020      	movs	r0, r4
 800488e:	f000 fb6f 	bl	8004f70 <_sbrk_r>
 8004892:	3001      	adds	r0, #1
 8004894:	d1f2      	bne.n	800487c <sbrk_aligned+0x24>
 8004896:	e7ef      	b.n	8004878 <sbrk_aligned+0x20>
 8004898:	200003ac 	.word	0x200003ac

0800489c <_malloc_r>:
 800489c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800489e:	2203      	movs	r2, #3
 80048a0:	1ccb      	adds	r3, r1, #3
 80048a2:	4393      	bics	r3, r2
 80048a4:	3308      	adds	r3, #8
 80048a6:	0005      	movs	r5, r0
 80048a8:	001f      	movs	r7, r3
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	d234      	bcs.n	8004918 <_malloc_r+0x7c>
 80048ae:	270c      	movs	r7, #12
 80048b0:	42b9      	cmp	r1, r7
 80048b2:	d833      	bhi.n	800491c <_malloc_r+0x80>
 80048b4:	0028      	movs	r0, r5
 80048b6:	f000 f871 	bl	800499c <__malloc_lock>
 80048ba:	4e37      	ldr	r6, [pc, #220]	@ (8004998 <_malloc_r+0xfc>)
 80048bc:	6833      	ldr	r3, [r6, #0]
 80048be:	001c      	movs	r4, r3
 80048c0:	2c00      	cmp	r4, #0
 80048c2:	d12f      	bne.n	8004924 <_malloc_r+0x88>
 80048c4:	0039      	movs	r1, r7
 80048c6:	0028      	movs	r0, r5
 80048c8:	f7ff ffc6 	bl	8004858 <sbrk_aligned>
 80048cc:	0004      	movs	r4, r0
 80048ce:	1c43      	adds	r3, r0, #1
 80048d0:	d15f      	bne.n	8004992 <_malloc_r+0xf6>
 80048d2:	6834      	ldr	r4, [r6, #0]
 80048d4:	9400      	str	r4, [sp, #0]
 80048d6:	9b00      	ldr	r3, [sp, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d14a      	bne.n	8004972 <_malloc_r+0xd6>
 80048dc:	2c00      	cmp	r4, #0
 80048de:	d052      	beq.n	8004986 <_malloc_r+0xea>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	0028      	movs	r0, r5
 80048e4:	18e3      	adds	r3, r4, r3
 80048e6:	9900      	ldr	r1, [sp, #0]
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	f000 fb41 	bl	8004f70 <_sbrk_r>
 80048ee:	9b01      	ldr	r3, [sp, #4]
 80048f0:	4283      	cmp	r3, r0
 80048f2:	d148      	bne.n	8004986 <_malloc_r+0xea>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	0028      	movs	r0, r5
 80048f8:	1aff      	subs	r7, r7, r3
 80048fa:	0039      	movs	r1, r7
 80048fc:	f7ff ffac 	bl	8004858 <sbrk_aligned>
 8004900:	3001      	adds	r0, #1
 8004902:	d040      	beq.n	8004986 <_malloc_r+0xea>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	19db      	adds	r3, r3, r7
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	6833      	ldr	r3, [r6, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	2a00      	cmp	r2, #0
 8004910:	d133      	bne.n	800497a <_malloc_r+0xde>
 8004912:	9b00      	ldr	r3, [sp, #0]
 8004914:	6033      	str	r3, [r6, #0]
 8004916:	e019      	b.n	800494c <_malloc_r+0xb0>
 8004918:	2b00      	cmp	r3, #0
 800491a:	dac9      	bge.n	80048b0 <_malloc_r+0x14>
 800491c:	230c      	movs	r3, #12
 800491e:	602b      	str	r3, [r5, #0]
 8004920:	2000      	movs	r0, #0
 8004922:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004924:	6821      	ldr	r1, [r4, #0]
 8004926:	1bc9      	subs	r1, r1, r7
 8004928:	d420      	bmi.n	800496c <_malloc_r+0xd0>
 800492a:	290b      	cmp	r1, #11
 800492c:	d90a      	bls.n	8004944 <_malloc_r+0xa8>
 800492e:	19e2      	adds	r2, r4, r7
 8004930:	6027      	str	r7, [r4, #0]
 8004932:	42a3      	cmp	r3, r4
 8004934:	d104      	bne.n	8004940 <_malloc_r+0xa4>
 8004936:	6032      	str	r2, [r6, #0]
 8004938:	6863      	ldr	r3, [r4, #4]
 800493a:	6011      	str	r1, [r2, #0]
 800493c:	6053      	str	r3, [r2, #4]
 800493e:	e005      	b.n	800494c <_malloc_r+0xb0>
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	e7f9      	b.n	8004938 <_malloc_r+0x9c>
 8004944:	6862      	ldr	r2, [r4, #4]
 8004946:	42a3      	cmp	r3, r4
 8004948:	d10e      	bne.n	8004968 <_malloc_r+0xcc>
 800494a:	6032      	str	r2, [r6, #0]
 800494c:	0028      	movs	r0, r5
 800494e:	f000 f82d 	bl	80049ac <__malloc_unlock>
 8004952:	0020      	movs	r0, r4
 8004954:	2207      	movs	r2, #7
 8004956:	300b      	adds	r0, #11
 8004958:	1d23      	adds	r3, r4, #4
 800495a:	4390      	bics	r0, r2
 800495c:	1ac2      	subs	r2, r0, r3
 800495e:	4298      	cmp	r0, r3
 8004960:	d0df      	beq.n	8004922 <_malloc_r+0x86>
 8004962:	1a1b      	subs	r3, r3, r0
 8004964:	50a3      	str	r3, [r4, r2]
 8004966:	e7dc      	b.n	8004922 <_malloc_r+0x86>
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	e7ef      	b.n	800494c <_malloc_r+0xb0>
 800496c:	0023      	movs	r3, r4
 800496e:	6864      	ldr	r4, [r4, #4]
 8004970:	e7a6      	b.n	80048c0 <_malloc_r+0x24>
 8004972:	9c00      	ldr	r4, [sp, #0]
 8004974:	6863      	ldr	r3, [r4, #4]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	e7ad      	b.n	80048d6 <_malloc_r+0x3a>
 800497a:	001a      	movs	r2, r3
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	42a3      	cmp	r3, r4
 8004980:	d1fb      	bne.n	800497a <_malloc_r+0xde>
 8004982:	2300      	movs	r3, #0
 8004984:	e7da      	b.n	800493c <_malloc_r+0xa0>
 8004986:	230c      	movs	r3, #12
 8004988:	0028      	movs	r0, r5
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	f000 f80e 	bl	80049ac <__malloc_unlock>
 8004990:	e7c6      	b.n	8004920 <_malloc_r+0x84>
 8004992:	6007      	str	r7, [r0, #0]
 8004994:	e7da      	b.n	800494c <_malloc_r+0xb0>
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	200003b0 	.word	0x200003b0

0800499c <__malloc_lock>:
 800499c:	b510      	push	{r4, lr}
 800499e:	4802      	ldr	r0, [pc, #8]	@ (80049a8 <__malloc_lock+0xc>)
 80049a0:	f7ff ff0e 	bl	80047c0 <__retarget_lock_acquire_recursive>
 80049a4:	bd10      	pop	{r4, pc}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	200003a8 	.word	0x200003a8

080049ac <__malloc_unlock>:
 80049ac:	b510      	push	{r4, lr}
 80049ae:	4802      	ldr	r0, [pc, #8]	@ (80049b8 <__malloc_unlock+0xc>)
 80049b0:	f7ff ff07 	bl	80047c2 <__retarget_lock_release_recursive>
 80049b4:	bd10      	pop	{r4, pc}
 80049b6:	46c0      	nop			@ (mov r8, r8)
 80049b8:	200003a8 	.word	0x200003a8

080049bc <__ssputs_r>:
 80049bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049be:	688e      	ldr	r6, [r1, #8]
 80049c0:	b085      	sub	sp, #20
 80049c2:	001f      	movs	r7, r3
 80049c4:	000c      	movs	r4, r1
 80049c6:	680b      	ldr	r3, [r1, #0]
 80049c8:	9002      	str	r0, [sp, #8]
 80049ca:	9203      	str	r2, [sp, #12]
 80049cc:	42be      	cmp	r6, r7
 80049ce:	d830      	bhi.n	8004a32 <__ssputs_r+0x76>
 80049d0:	210c      	movs	r1, #12
 80049d2:	5e62      	ldrsh	r2, [r4, r1]
 80049d4:	2190      	movs	r1, #144	@ 0x90
 80049d6:	00c9      	lsls	r1, r1, #3
 80049d8:	420a      	tst	r2, r1
 80049da:	d028      	beq.n	8004a2e <__ssputs_r+0x72>
 80049dc:	2003      	movs	r0, #3
 80049de:	6921      	ldr	r1, [r4, #16]
 80049e0:	1a5b      	subs	r3, r3, r1
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	6963      	ldr	r3, [r4, #20]
 80049e6:	4343      	muls	r3, r0
 80049e8:	9801      	ldr	r0, [sp, #4]
 80049ea:	0fdd      	lsrs	r5, r3, #31
 80049ec:	18ed      	adds	r5, r5, r3
 80049ee:	1c7b      	adds	r3, r7, #1
 80049f0:	181b      	adds	r3, r3, r0
 80049f2:	106d      	asrs	r5, r5, #1
 80049f4:	42ab      	cmp	r3, r5
 80049f6:	d900      	bls.n	80049fa <__ssputs_r+0x3e>
 80049f8:	001d      	movs	r5, r3
 80049fa:	0552      	lsls	r2, r2, #21
 80049fc:	d528      	bpl.n	8004a50 <__ssputs_r+0x94>
 80049fe:	0029      	movs	r1, r5
 8004a00:	9802      	ldr	r0, [sp, #8]
 8004a02:	f7ff ff4b 	bl	800489c <_malloc_r>
 8004a06:	1e06      	subs	r6, r0, #0
 8004a08:	d02c      	beq.n	8004a64 <__ssputs_r+0xa8>
 8004a0a:	9a01      	ldr	r2, [sp, #4]
 8004a0c:	6921      	ldr	r1, [r4, #16]
 8004a0e:	f000 facc 	bl	8004faa <memcpy>
 8004a12:	89a2      	ldrh	r2, [r4, #12]
 8004a14:	4b18      	ldr	r3, [pc, #96]	@ (8004a78 <__ssputs_r+0xbc>)
 8004a16:	401a      	ands	r2, r3
 8004a18:	2380      	movs	r3, #128	@ 0x80
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	81a3      	strh	r3, [r4, #12]
 8004a1e:	9b01      	ldr	r3, [sp, #4]
 8004a20:	6126      	str	r6, [r4, #16]
 8004a22:	18f6      	adds	r6, r6, r3
 8004a24:	6026      	str	r6, [r4, #0]
 8004a26:	003e      	movs	r6, r7
 8004a28:	6165      	str	r5, [r4, #20]
 8004a2a:	1aed      	subs	r5, r5, r3
 8004a2c:	60a5      	str	r5, [r4, #8]
 8004a2e:	42be      	cmp	r6, r7
 8004a30:	d900      	bls.n	8004a34 <__ssputs_r+0x78>
 8004a32:	003e      	movs	r6, r7
 8004a34:	0032      	movs	r2, r6
 8004a36:	9903      	ldr	r1, [sp, #12]
 8004a38:	6820      	ldr	r0, [r4, #0]
 8004a3a:	f7ff fe7d 	bl	8004738 <memmove>
 8004a3e:	2000      	movs	r0, #0
 8004a40:	68a3      	ldr	r3, [r4, #8]
 8004a42:	1b9b      	subs	r3, r3, r6
 8004a44:	60a3      	str	r3, [r4, #8]
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	199b      	adds	r3, r3, r6
 8004a4a:	6023      	str	r3, [r4, #0]
 8004a4c:	b005      	add	sp, #20
 8004a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a50:	002a      	movs	r2, r5
 8004a52:	9802      	ldr	r0, [sp, #8]
 8004a54:	f000 fab2 	bl	8004fbc <_realloc_r>
 8004a58:	1e06      	subs	r6, r0, #0
 8004a5a:	d1e0      	bne.n	8004a1e <__ssputs_r+0x62>
 8004a5c:	6921      	ldr	r1, [r4, #16]
 8004a5e:	9802      	ldr	r0, [sp, #8]
 8004a60:	f7ff feb0 	bl	80047c4 <_free_r>
 8004a64:	230c      	movs	r3, #12
 8004a66:	2001      	movs	r0, #1
 8004a68:	9a02      	ldr	r2, [sp, #8]
 8004a6a:	4240      	negs	r0, r0
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	89a2      	ldrh	r2, [r4, #12]
 8004a70:	3334      	adds	r3, #52	@ 0x34
 8004a72:	4313      	orrs	r3, r2
 8004a74:	81a3      	strh	r3, [r4, #12]
 8004a76:	e7e9      	b.n	8004a4c <__ssputs_r+0x90>
 8004a78:	fffffb7f 	.word	0xfffffb7f

08004a7c <_svfiprintf_r>:
 8004a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a7e:	b0a1      	sub	sp, #132	@ 0x84
 8004a80:	9003      	str	r0, [sp, #12]
 8004a82:	001d      	movs	r5, r3
 8004a84:	898b      	ldrh	r3, [r1, #12]
 8004a86:	000f      	movs	r7, r1
 8004a88:	0016      	movs	r6, r2
 8004a8a:	061b      	lsls	r3, r3, #24
 8004a8c:	d511      	bpl.n	8004ab2 <_svfiprintf_r+0x36>
 8004a8e:	690b      	ldr	r3, [r1, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10e      	bne.n	8004ab2 <_svfiprintf_r+0x36>
 8004a94:	2140      	movs	r1, #64	@ 0x40
 8004a96:	f7ff ff01 	bl	800489c <_malloc_r>
 8004a9a:	6038      	str	r0, [r7, #0]
 8004a9c:	6138      	str	r0, [r7, #16]
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d105      	bne.n	8004aae <_svfiprintf_r+0x32>
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	9a03      	ldr	r2, [sp, #12]
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	4240      	negs	r0, r0
 8004aac:	e0cf      	b.n	8004c4e <_svfiprintf_r+0x1d2>
 8004aae:	2340      	movs	r3, #64	@ 0x40
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	ac08      	add	r4, sp, #32
 8004ab6:	6163      	str	r3, [r4, #20]
 8004ab8:	3320      	adds	r3, #32
 8004aba:	7663      	strb	r3, [r4, #25]
 8004abc:	3310      	adds	r3, #16
 8004abe:	76a3      	strb	r3, [r4, #26]
 8004ac0:	9507      	str	r5, [sp, #28]
 8004ac2:	0035      	movs	r5, r6
 8004ac4:	782b      	ldrb	r3, [r5, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <_svfiprintf_r+0x52>
 8004aca:	2b25      	cmp	r3, #37	@ 0x25
 8004acc:	d148      	bne.n	8004b60 <_svfiprintf_r+0xe4>
 8004ace:	1bab      	subs	r3, r5, r6
 8004ad0:	9305      	str	r3, [sp, #20]
 8004ad2:	42b5      	cmp	r5, r6
 8004ad4:	d00b      	beq.n	8004aee <_svfiprintf_r+0x72>
 8004ad6:	0032      	movs	r2, r6
 8004ad8:	0039      	movs	r1, r7
 8004ada:	9803      	ldr	r0, [sp, #12]
 8004adc:	f7ff ff6e 	bl	80049bc <__ssputs_r>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d100      	bne.n	8004ae6 <_svfiprintf_r+0x6a>
 8004ae4:	e0ae      	b.n	8004c44 <_svfiprintf_r+0x1c8>
 8004ae6:	6963      	ldr	r3, [r4, #20]
 8004ae8:	9a05      	ldr	r2, [sp, #20]
 8004aea:	189b      	adds	r3, r3, r2
 8004aec:	6163      	str	r3, [r4, #20]
 8004aee:	782b      	ldrb	r3, [r5, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d100      	bne.n	8004af6 <_svfiprintf_r+0x7a>
 8004af4:	e0a6      	b.n	8004c44 <_svfiprintf_r+0x1c8>
 8004af6:	2201      	movs	r2, #1
 8004af8:	2300      	movs	r3, #0
 8004afa:	4252      	negs	r2, r2
 8004afc:	6062      	str	r2, [r4, #4]
 8004afe:	a904      	add	r1, sp, #16
 8004b00:	3254      	adds	r2, #84	@ 0x54
 8004b02:	1852      	adds	r2, r2, r1
 8004b04:	1c6e      	adds	r6, r5, #1
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	60e3      	str	r3, [r4, #12]
 8004b0a:	60a3      	str	r3, [r4, #8]
 8004b0c:	7013      	strb	r3, [r2, #0]
 8004b0e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004b10:	4b54      	ldr	r3, [pc, #336]	@ (8004c64 <_svfiprintf_r+0x1e8>)
 8004b12:	2205      	movs	r2, #5
 8004b14:	0018      	movs	r0, r3
 8004b16:	7831      	ldrb	r1, [r6, #0]
 8004b18:	9305      	str	r3, [sp, #20]
 8004b1a:	f000 fa3b 	bl	8004f94 <memchr>
 8004b1e:	1c75      	adds	r5, r6, #1
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d11f      	bne.n	8004b64 <_svfiprintf_r+0xe8>
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	06d3      	lsls	r3, r2, #27
 8004b28:	d504      	bpl.n	8004b34 <_svfiprintf_r+0xb8>
 8004b2a:	2353      	movs	r3, #83	@ 0x53
 8004b2c:	a904      	add	r1, sp, #16
 8004b2e:	185b      	adds	r3, r3, r1
 8004b30:	2120      	movs	r1, #32
 8004b32:	7019      	strb	r1, [r3, #0]
 8004b34:	0713      	lsls	r3, r2, #28
 8004b36:	d504      	bpl.n	8004b42 <_svfiprintf_r+0xc6>
 8004b38:	2353      	movs	r3, #83	@ 0x53
 8004b3a:	a904      	add	r1, sp, #16
 8004b3c:	185b      	adds	r3, r3, r1
 8004b3e:	212b      	movs	r1, #43	@ 0x2b
 8004b40:	7019      	strb	r1, [r3, #0]
 8004b42:	7833      	ldrb	r3, [r6, #0]
 8004b44:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b46:	d016      	beq.n	8004b76 <_svfiprintf_r+0xfa>
 8004b48:	0035      	movs	r5, r6
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	200a      	movs	r0, #10
 8004b4e:	68e3      	ldr	r3, [r4, #12]
 8004b50:	782a      	ldrb	r2, [r5, #0]
 8004b52:	1c6e      	adds	r6, r5, #1
 8004b54:	3a30      	subs	r2, #48	@ 0x30
 8004b56:	2a09      	cmp	r2, #9
 8004b58:	d950      	bls.n	8004bfc <_svfiprintf_r+0x180>
 8004b5a:	2900      	cmp	r1, #0
 8004b5c:	d111      	bne.n	8004b82 <_svfiprintf_r+0x106>
 8004b5e:	e017      	b.n	8004b90 <_svfiprintf_r+0x114>
 8004b60:	3501      	adds	r5, #1
 8004b62:	e7af      	b.n	8004ac4 <_svfiprintf_r+0x48>
 8004b64:	9b05      	ldr	r3, [sp, #20]
 8004b66:	6822      	ldr	r2, [r4, #0]
 8004b68:	1ac0      	subs	r0, r0, r3
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4083      	lsls	r3, r0
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	002e      	movs	r6, r5
 8004b72:	6023      	str	r3, [r4, #0]
 8004b74:	e7cc      	b.n	8004b10 <_svfiprintf_r+0x94>
 8004b76:	9b07      	ldr	r3, [sp, #28]
 8004b78:	1d19      	adds	r1, r3, #4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	9107      	str	r1, [sp, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	db01      	blt.n	8004b86 <_svfiprintf_r+0x10a>
 8004b82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b84:	e004      	b.n	8004b90 <_svfiprintf_r+0x114>
 8004b86:	425b      	negs	r3, r3
 8004b88:	60e3      	str	r3, [r4, #12]
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	782b      	ldrb	r3, [r5, #0]
 8004b92:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b94:	d10c      	bne.n	8004bb0 <_svfiprintf_r+0x134>
 8004b96:	786b      	ldrb	r3, [r5, #1]
 8004b98:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b9a:	d134      	bne.n	8004c06 <_svfiprintf_r+0x18a>
 8004b9c:	9b07      	ldr	r3, [sp, #28]
 8004b9e:	3502      	adds	r5, #2
 8004ba0:	1d1a      	adds	r2, r3, #4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	9207      	str	r2, [sp, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da01      	bge.n	8004bae <_svfiprintf_r+0x132>
 8004baa:	2301      	movs	r3, #1
 8004bac:	425b      	negs	r3, r3
 8004bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bb0:	4e2d      	ldr	r6, [pc, #180]	@ (8004c68 <_svfiprintf_r+0x1ec>)
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	0030      	movs	r0, r6
 8004bb6:	7829      	ldrb	r1, [r5, #0]
 8004bb8:	f000 f9ec 	bl	8004f94 <memchr>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d006      	beq.n	8004bce <_svfiprintf_r+0x152>
 8004bc0:	2340      	movs	r3, #64	@ 0x40
 8004bc2:	1b80      	subs	r0, r0, r6
 8004bc4:	4083      	lsls	r3, r0
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	3501      	adds	r5, #1
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	7829      	ldrb	r1, [r5, #0]
 8004bd0:	2206      	movs	r2, #6
 8004bd2:	4826      	ldr	r0, [pc, #152]	@ (8004c6c <_svfiprintf_r+0x1f0>)
 8004bd4:	1c6e      	adds	r6, r5, #1
 8004bd6:	7621      	strb	r1, [r4, #24]
 8004bd8:	f000 f9dc 	bl	8004f94 <memchr>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d038      	beq.n	8004c52 <_svfiprintf_r+0x1d6>
 8004be0:	4b23      	ldr	r3, [pc, #140]	@ (8004c70 <_svfiprintf_r+0x1f4>)
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d122      	bne.n	8004c2c <_svfiprintf_r+0x1b0>
 8004be6:	2207      	movs	r2, #7
 8004be8:	9b07      	ldr	r3, [sp, #28]
 8004bea:	3307      	adds	r3, #7
 8004bec:	4393      	bics	r3, r2
 8004bee:	3308      	adds	r3, #8
 8004bf0:	9307      	str	r3, [sp, #28]
 8004bf2:	6963      	ldr	r3, [r4, #20]
 8004bf4:	9a04      	ldr	r2, [sp, #16]
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	6163      	str	r3, [r4, #20]
 8004bfa:	e762      	b.n	8004ac2 <_svfiprintf_r+0x46>
 8004bfc:	4343      	muls	r3, r0
 8004bfe:	0035      	movs	r5, r6
 8004c00:	2101      	movs	r1, #1
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	e7a4      	b.n	8004b50 <_svfiprintf_r+0xd4>
 8004c06:	2300      	movs	r3, #0
 8004c08:	200a      	movs	r0, #10
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	3501      	adds	r5, #1
 8004c0e:	6063      	str	r3, [r4, #4]
 8004c10:	782a      	ldrb	r2, [r5, #0]
 8004c12:	1c6e      	adds	r6, r5, #1
 8004c14:	3a30      	subs	r2, #48	@ 0x30
 8004c16:	2a09      	cmp	r2, #9
 8004c18:	d903      	bls.n	8004c22 <_svfiprintf_r+0x1a6>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0c8      	beq.n	8004bb0 <_svfiprintf_r+0x134>
 8004c1e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c20:	e7c6      	b.n	8004bb0 <_svfiprintf_r+0x134>
 8004c22:	4341      	muls	r1, r0
 8004c24:	0035      	movs	r5, r6
 8004c26:	2301      	movs	r3, #1
 8004c28:	1889      	adds	r1, r1, r2
 8004c2a:	e7f1      	b.n	8004c10 <_svfiprintf_r+0x194>
 8004c2c:	aa07      	add	r2, sp, #28
 8004c2e:	9200      	str	r2, [sp, #0]
 8004c30:	0021      	movs	r1, r4
 8004c32:	003a      	movs	r2, r7
 8004c34:	4b0f      	ldr	r3, [pc, #60]	@ (8004c74 <_svfiprintf_r+0x1f8>)
 8004c36:	9803      	ldr	r0, [sp, #12]
 8004c38:	e000      	b.n	8004c3c <_svfiprintf_r+0x1c0>
 8004c3a:	bf00      	nop
 8004c3c:	9004      	str	r0, [sp, #16]
 8004c3e:	9b04      	ldr	r3, [sp, #16]
 8004c40:	3301      	adds	r3, #1
 8004c42:	d1d6      	bne.n	8004bf2 <_svfiprintf_r+0x176>
 8004c44:	89bb      	ldrh	r3, [r7, #12]
 8004c46:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004c48:	065b      	lsls	r3, r3, #25
 8004c4a:	d500      	bpl.n	8004c4e <_svfiprintf_r+0x1d2>
 8004c4c:	e72c      	b.n	8004aa8 <_svfiprintf_r+0x2c>
 8004c4e:	b021      	add	sp, #132	@ 0x84
 8004c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c52:	aa07      	add	r2, sp, #28
 8004c54:	9200      	str	r2, [sp, #0]
 8004c56:	0021      	movs	r1, r4
 8004c58:	003a      	movs	r2, r7
 8004c5a:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <_svfiprintf_r+0x1f8>)
 8004c5c:	9803      	ldr	r0, [sp, #12]
 8004c5e:	f000 f87b 	bl	8004d58 <_printf_i>
 8004c62:	e7eb      	b.n	8004c3c <_svfiprintf_r+0x1c0>
 8004c64:	08005b3c 	.word	0x08005b3c
 8004c68:	08005b42 	.word	0x08005b42
 8004c6c:	08005b46 	.word	0x08005b46
 8004c70:	00000000 	.word	0x00000000
 8004c74:	080049bd 	.word	0x080049bd

08004c78 <_printf_common>:
 8004c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c7a:	0016      	movs	r6, r2
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	688a      	ldr	r2, [r1, #8]
 8004c80:	690b      	ldr	r3, [r1, #16]
 8004c82:	000c      	movs	r4, r1
 8004c84:	9000      	str	r0, [sp, #0]
 8004c86:	4293      	cmp	r3, r2
 8004c88:	da00      	bge.n	8004c8c <_printf_common+0x14>
 8004c8a:	0013      	movs	r3, r2
 8004c8c:	0022      	movs	r2, r4
 8004c8e:	6033      	str	r3, [r6, #0]
 8004c90:	3243      	adds	r2, #67	@ 0x43
 8004c92:	7812      	ldrb	r2, [r2, #0]
 8004c94:	2a00      	cmp	r2, #0
 8004c96:	d001      	beq.n	8004c9c <_printf_common+0x24>
 8004c98:	3301      	adds	r3, #1
 8004c9a:	6033      	str	r3, [r6, #0]
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	069b      	lsls	r3, r3, #26
 8004ca0:	d502      	bpl.n	8004ca8 <_printf_common+0x30>
 8004ca2:	6833      	ldr	r3, [r6, #0]
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	6033      	str	r3, [r6, #0]
 8004ca8:	6822      	ldr	r2, [r4, #0]
 8004caa:	2306      	movs	r3, #6
 8004cac:	0015      	movs	r5, r2
 8004cae:	401d      	ands	r5, r3
 8004cb0:	421a      	tst	r2, r3
 8004cb2:	d027      	beq.n	8004d04 <_printf_common+0x8c>
 8004cb4:	0023      	movs	r3, r4
 8004cb6:	3343      	adds	r3, #67	@ 0x43
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	1e5a      	subs	r2, r3, #1
 8004cbc:	4193      	sbcs	r3, r2
 8004cbe:	6822      	ldr	r2, [r4, #0]
 8004cc0:	0692      	lsls	r2, r2, #26
 8004cc2:	d430      	bmi.n	8004d26 <_printf_common+0xae>
 8004cc4:	0022      	movs	r2, r4
 8004cc6:	9901      	ldr	r1, [sp, #4]
 8004cc8:	9800      	ldr	r0, [sp, #0]
 8004cca:	9d08      	ldr	r5, [sp, #32]
 8004ccc:	3243      	adds	r2, #67	@ 0x43
 8004cce:	47a8      	blx	r5
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d025      	beq.n	8004d20 <_printf_common+0xa8>
 8004cd4:	2206      	movs	r2, #6
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	2500      	movs	r5, #0
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d105      	bne.n	8004cec <_printf_common+0x74>
 8004ce0:	6833      	ldr	r3, [r6, #0]
 8004ce2:	68e5      	ldr	r5, [r4, #12]
 8004ce4:	1aed      	subs	r5, r5, r3
 8004ce6:	43eb      	mvns	r3, r5
 8004ce8:	17db      	asrs	r3, r3, #31
 8004cea:	401d      	ands	r5, r3
 8004cec:	68a3      	ldr	r3, [r4, #8]
 8004cee:	6922      	ldr	r2, [r4, #16]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	dd01      	ble.n	8004cf8 <_printf_common+0x80>
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	18ed      	adds	r5, r5, r3
 8004cf8:	2600      	movs	r6, #0
 8004cfa:	42b5      	cmp	r5, r6
 8004cfc:	d120      	bne.n	8004d40 <_printf_common+0xc8>
 8004cfe:	2000      	movs	r0, #0
 8004d00:	e010      	b.n	8004d24 <_printf_common+0xac>
 8004d02:	3501      	adds	r5, #1
 8004d04:	68e3      	ldr	r3, [r4, #12]
 8004d06:	6832      	ldr	r2, [r6, #0]
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	42ab      	cmp	r3, r5
 8004d0c:	ddd2      	ble.n	8004cb4 <_printf_common+0x3c>
 8004d0e:	0022      	movs	r2, r4
 8004d10:	2301      	movs	r3, #1
 8004d12:	9901      	ldr	r1, [sp, #4]
 8004d14:	9800      	ldr	r0, [sp, #0]
 8004d16:	9f08      	ldr	r7, [sp, #32]
 8004d18:	3219      	adds	r2, #25
 8004d1a:	47b8      	blx	r7
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	d1f0      	bne.n	8004d02 <_printf_common+0x8a>
 8004d20:	2001      	movs	r0, #1
 8004d22:	4240      	negs	r0, r0
 8004d24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d26:	2030      	movs	r0, #48	@ 0x30
 8004d28:	18e1      	adds	r1, r4, r3
 8004d2a:	3143      	adds	r1, #67	@ 0x43
 8004d2c:	7008      	strb	r0, [r1, #0]
 8004d2e:	0021      	movs	r1, r4
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	3145      	adds	r1, #69	@ 0x45
 8004d34:	7809      	ldrb	r1, [r1, #0]
 8004d36:	18a2      	adds	r2, r4, r2
 8004d38:	3243      	adds	r2, #67	@ 0x43
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	7011      	strb	r1, [r2, #0]
 8004d3e:	e7c1      	b.n	8004cc4 <_printf_common+0x4c>
 8004d40:	0022      	movs	r2, r4
 8004d42:	2301      	movs	r3, #1
 8004d44:	9901      	ldr	r1, [sp, #4]
 8004d46:	9800      	ldr	r0, [sp, #0]
 8004d48:	9f08      	ldr	r7, [sp, #32]
 8004d4a:	321a      	adds	r2, #26
 8004d4c:	47b8      	blx	r7
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d0e6      	beq.n	8004d20 <_printf_common+0xa8>
 8004d52:	3601      	adds	r6, #1
 8004d54:	e7d1      	b.n	8004cfa <_printf_common+0x82>
	...

08004d58 <_printf_i>:
 8004d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d5a:	b08b      	sub	sp, #44	@ 0x2c
 8004d5c:	9206      	str	r2, [sp, #24]
 8004d5e:	000a      	movs	r2, r1
 8004d60:	3243      	adds	r2, #67	@ 0x43
 8004d62:	9307      	str	r3, [sp, #28]
 8004d64:	9005      	str	r0, [sp, #20]
 8004d66:	9203      	str	r2, [sp, #12]
 8004d68:	7e0a      	ldrb	r2, [r1, #24]
 8004d6a:	000c      	movs	r4, r1
 8004d6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004d6e:	2a78      	cmp	r2, #120	@ 0x78
 8004d70:	d809      	bhi.n	8004d86 <_printf_i+0x2e>
 8004d72:	2a62      	cmp	r2, #98	@ 0x62
 8004d74:	d80b      	bhi.n	8004d8e <_printf_i+0x36>
 8004d76:	2a00      	cmp	r2, #0
 8004d78:	d100      	bne.n	8004d7c <_printf_i+0x24>
 8004d7a:	e0ba      	b.n	8004ef2 <_printf_i+0x19a>
 8004d7c:	497a      	ldr	r1, [pc, #488]	@ (8004f68 <_printf_i+0x210>)
 8004d7e:	9104      	str	r1, [sp, #16]
 8004d80:	2a58      	cmp	r2, #88	@ 0x58
 8004d82:	d100      	bne.n	8004d86 <_printf_i+0x2e>
 8004d84:	e08e      	b.n	8004ea4 <_printf_i+0x14c>
 8004d86:	0025      	movs	r5, r4
 8004d88:	3542      	adds	r5, #66	@ 0x42
 8004d8a:	702a      	strb	r2, [r5, #0]
 8004d8c:	e022      	b.n	8004dd4 <_printf_i+0x7c>
 8004d8e:	0010      	movs	r0, r2
 8004d90:	3863      	subs	r0, #99	@ 0x63
 8004d92:	2815      	cmp	r0, #21
 8004d94:	d8f7      	bhi.n	8004d86 <_printf_i+0x2e>
 8004d96:	f7fb f9bf 	bl	8000118 <__gnu_thumb1_case_shi>
 8004d9a:	0016      	.short	0x0016
 8004d9c:	fff6001f 	.word	0xfff6001f
 8004da0:	fff6fff6 	.word	0xfff6fff6
 8004da4:	001ffff6 	.word	0x001ffff6
 8004da8:	fff6fff6 	.word	0xfff6fff6
 8004dac:	fff6fff6 	.word	0xfff6fff6
 8004db0:	0036009f 	.word	0x0036009f
 8004db4:	fff6007e 	.word	0xfff6007e
 8004db8:	00b0fff6 	.word	0x00b0fff6
 8004dbc:	0036fff6 	.word	0x0036fff6
 8004dc0:	fff6fff6 	.word	0xfff6fff6
 8004dc4:	0082      	.short	0x0082
 8004dc6:	0025      	movs	r5, r4
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	3542      	adds	r5, #66	@ 0x42
 8004dcc:	1d11      	adds	r1, r2, #4
 8004dce:	6019      	str	r1, [r3, #0]
 8004dd0:	6813      	ldr	r3, [r2, #0]
 8004dd2:	702b      	strb	r3, [r5, #0]
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e09e      	b.n	8004f16 <_printf_i+0x1be>
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	6809      	ldr	r1, [r1, #0]
 8004ddc:	1d02      	adds	r2, r0, #4
 8004dde:	060d      	lsls	r5, r1, #24
 8004de0:	d50b      	bpl.n	8004dfa <_printf_i+0xa2>
 8004de2:	6806      	ldr	r6, [r0, #0]
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	2e00      	cmp	r6, #0
 8004de8:	da03      	bge.n	8004df2 <_printf_i+0x9a>
 8004dea:	232d      	movs	r3, #45	@ 0x2d
 8004dec:	9a03      	ldr	r2, [sp, #12]
 8004dee:	4276      	negs	r6, r6
 8004df0:	7013      	strb	r3, [r2, #0]
 8004df2:	4b5d      	ldr	r3, [pc, #372]	@ (8004f68 <_printf_i+0x210>)
 8004df4:	270a      	movs	r7, #10
 8004df6:	9304      	str	r3, [sp, #16]
 8004df8:	e018      	b.n	8004e2c <_printf_i+0xd4>
 8004dfa:	6806      	ldr	r6, [r0, #0]
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	0649      	lsls	r1, r1, #25
 8004e00:	d5f1      	bpl.n	8004de6 <_printf_i+0x8e>
 8004e02:	b236      	sxth	r6, r6
 8004e04:	e7ef      	b.n	8004de6 <_printf_i+0x8e>
 8004e06:	6808      	ldr	r0, [r1, #0]
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	c940      	ldmia	r1!, {r6}
 8004e0c:	0605      	lsls	r5, r0, #24
 8004e0e:	d402      	bmi.n	8004e16 <_printf_i+0xbe>
 8004e10:	0640      	lsls	r0, r0, #25
 8004e12:	d500      	bpl.n	8004e16 <_printf_i+0xbe>
 8004e14:	b2b6      	uxth	r6, r6
 8004e16:	6019      	str	r1, [r3, #0]
 8004e18:	4b53      	ldr	r3, [pc, #332]	@ (8004f68 <_printf_i+0x210>)
 8004e1a:	270a      	movs	r7, #10
 8004e1c:	9304      	str	r3, [sp, #16]
 8004e1e:	2a6f      	cmp	r2, #111	@ 0x6f
 8004e20:	d100      	bne.n	8004e24 <_printf_i+0xcc>
 8004e22:	3f02      	subs	r7, #2
 8004e24:	0023      	movs	r3, r4
 8004e26:	2200      	movs	r2, #0
 8004e28:	3343      	adds	r3, #67	@ 0x43
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	60a3      	str	r3, [r4, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	db06      	blt.n	8004e42 <_printf_i+0xea>
 8004e34:	2104      	movs	r1, #4
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	9d03      	ldr	r5, [sp, #12]
 8004e3a:	438a      	bics	r2, r1
 8004e3c:	6022      	str	r2, [r4, #0]
 8004e3e:	4333      	orrs	r3, r6
 8004e40:	d00c      	beq.n	8004e5c <_printf_i+0x104>
 8004e42:	9d03      	ldr	r5, [sp, #12]
 8004e44:	0030      	movs	r0, r6
 8004e46:	0039      	movs	r1, r7
 8004e48:	f7fb f9f6 	bl	8000238 <__aeabi_uidivmod>
 8004e4c:	9b04      	ldr	r3, [sp, #16]
 8004e4e:	3d01      	subs	r5, #1
 8004e50:	5c5b      	ldrb	r3, [r3, r1]
 8004e52:	702b      	strb	r3, [r5, #0]
 8004e54:	0033      	movs	r3, r6
 8004e56:	0006      	movs	r6, r0
 8004e58:	429f      	cmp	r7, r3
 8004e5a:	d9f3      	bls.n	8004e44 <_printf_i+0xec>
 8004e5c:	2f08      	cmp	r7, #8
 8004e5e:	d109      	bne.n	8004e74 <_printf_i+0x11c>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	07db      	lsls	r3, r3, #31
 8004e64:	d506      	bpl.n	8004e74 <_printf_i+0x11c>
 8004e66:	6862      	ldr	r2, [r4, #4]
 8004e68:	6923      	ldr	r3, [r4, #16]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	dc02      	bgt.n	8004e74 <_printf_i+0x11c>
 8004e6e:	2330      	movs	r3, #48	@ 0x30
 8004e70:	3d01      	subs	r5, #1
 8004e72:	702b      	strb	r3, [r5, #0]
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	1b5b      	subs	r3, r3, r5
 8004e78:	6123      	str	r3, [r4, #16]
 8004e7a:	9b07      	ldr	r3, [sp, #28]
 8004e7c:	0021      	movs	r1, r4
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	9805      	ldr	r0, [sp, #20]
 8004e82:	9b06      	ldr	r3, [sp, #24]
 8004e84:	aa09      	add	r2, sp, #36	@ 0x24
 8004e86:	f7ff fef7 	bl	8004c78 <_printf_common>
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d148      	bne.n	8004f20 <_printf_i+0x1c8>
 8004e8e:	2001      	movs	r0, #1
 8004e90:	4240      	negs	r0, r0
 8004e92:	b00b      	add	sp, #44	@ 0x2c
 8004e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e96:	2220      	movs	r2, #32
 8004e98:	6809      	ldr	r1, [r1, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	6022      	str	r2, [r4, #0]
 8004e9e:	2278      	movs	r2, #120	@ 0x78
 8004ea0:	4932      	ldr	r1, [pc, #200]	@ (8004f6c <_printf_i+0x214>)
 8004ea2:	9104      	str	r1, [sp, #16]
 8004ea4:	0021      	movs	r1, r4
 8004ea6:	3145      	adds	r1, #69	@ 0x45
 8004ea8:	700a      	strb	r2, [r1, #0]
 8004eaa:	6819      	ldr	r1, [r3, #0]
 8004eac:	6822      	ldr	r2, [r4, #0]
 8004eae:	c940      	ldmia	r1!, {r6}
 8004eb0:	0610      	lsls	r0, r2, #24
 8004eb2:	d402      	bmi.n	8004eba <_printf_i+0x162>
 8004eb4:	0650      	lsls	r0, r2, #25
 8004eb6:	d500      	bpl.n	8004eba <_printf_i+0x162>
 8004eb8:	b2b6      	uxth	r6, r6
 8004eba:	6019      	str	r1, [r3, #0]
 8004ebc:	07d3      	lsls	r3, r2, #31
 8004ebe:	d502      	bpl.n	8004ec6 <_printf_i+0x16e>
 8004ec0:	2320      	movs	r3, #32
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	2e00      	cmp	r6, #0
 8004ec8:	d001      	beq.n	8004ece <_printf_i+0x176>
 8004eca:	2710      	movs	r7, #16
 8004ecc:	e7aa      	b.n	8004e24 <_printf_i+0xcc>
 8004ece:	2220      	movs	r2, #32
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	4393      	bics	r3, r2
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	e7f8      	b.n	8004eca <_printf_i+0x172>
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	680d      	ldr	r5, [r1, #0]
 8004edc:	1d10      	adds	r0, r2, #4
 8004ede:	6949      	ldr	r1, [r1, #20]
 8004ee0:	6018      	str	r0, [r3, #0]
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	062e      	lsls	r6, r5, #24
 8004ee6:	d501      	bpl.n	8004eec <_printf_i+0x194>
 8004ee8:	6019      	str	r1, [r3, #0]
 8004eea:	e002      	b.n	8004ef2 <_printf_i+0x19a>
 8004eec:	066d      	lsls	r5, r5, #25
 8004eee:	d5fb      	bpl.n	8004ee8 <_printf_i+0x190>
 8004ef0:	8019      	strh	r1, [r3, #0]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	9d03      	ldr	r5, [sp, #12]
 8004ef6:	6123      	str	r3, [r4, #16]
 8004ef8:	e7bf      	b.n	8004e7a <_printf_i+0x122>
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	1d11      	adds	r1, r2, #4
 8004efe:	6019      	str	r1, [r3, #0]
 8004f00:	6815      	ldr	r5, [r2, #0]
 8004f02:	2100      	movs	r1, #0
 8004f04:	0028      	movs	r0, r5
 8004f06:	6862      	ldr	r2, [r4, #4]
 8004f08:	f000 f844 	bl	8004f94 <memchr>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d001      	beq.n	8004f14 <_printf_i+0x1bc>
 8004f10:	1b40      	subs	r0, r0, r5
 8004f12:	6060      	str	r0, [r4, #4]
 8004f14:	6863      	ldr	r3, [r4, #4]
 8004f16:	6123      	str	r3, [r4, #16]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	9a03      	ldr	r2, [sp, #12]
 8004f1c:	7013      	strb	r3, [r2, #0]
 8004f1e:	e7ac      	b.n	8004e7a <_printf_i+0x122>
 8004f20:	002a      	movs	r2, r5
 8004f22:	6923      	ldr	r3, [r4, #16]
 8004f24:	9906      	ldr	r1, [sp, #24]
 8004f26:	9805      	ldr	r0, [sp, #20]
 8004f28:	9d07      	ldr	r5, [sp, #28]
 8004f2a:	47a8      	blx	r5
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d0ae      	beq.n	8004e8e <_printf_i+0x136>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	079b      	lsls	r3, r3, #30
 8004f34:	d415      	bmi.n	8004f62 <_printf_i+0x20a>
 8004f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f38:	68e0      	ldr	r0, [r4, #12]
 8004f3a:	4298      	cmp	r0, r3
 8004f3c:	daa9      	bge.n	8004e92 <_printf_i+0x13a>
 8004f3e:	0018      	movs	r0, r3
 8004f40:	e7a7      	b.n	8004e92 <_printf_i+0x13a>
 8004f42:	0022      	movs	r2, r4
 8004f44:	2301      	movs	r3, #1
 8004f46:	9906      	ldr	r1, [sp, #24]
 8004f48:	9805      	ldr	r0, [sp, #20]
 8004f4a:	9e07      	ldr	r6, [sp, #28]
 8004f4c:	3219      	adds	r2, #25
 8004f4e:	47b0      	blx	r6
 8004f50:	3001      	adds	r0, #1
 8004f52:	d09c      	beq.n	8004e8e <_printf_i+0x136>
 8004f54:	3501      	adds	r5, #1
 8004f56:	68e3      	ldr	r3, [r4, #12]
 8004f58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	42ab      	cmp	r3, r5
 8004f5e:	dcf0      	bgt.n	8004f42 <_printf_i+0x1ea>
 8004f60:	e7e9      	b.n	8004f36 <_printf_i+0x1de>
 8004f62:	2500      	movs	r5, #0
 8004f64:	e7f7      	b.n	8004f56 <_printf_i+0x1fe>
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	08005b4d 	.word	0x08005b4d
 8004f6c:	08005b5e 	.word	0x08005b5e

08004f70 <_sbrk_r>:
 8004f70:	2300      	movs	r3, #0
 8004f72:	b570      	push	{r4, r5, r6, lr}
 8004f74:	4d06      	ldr	r5, [pc, #24]	@ (8004f90 <_sbrk_r+0x20>)
 8004f76:	0004      	movs	r4, r0
 8004f78:	0008      	movs	r0, r1
 8004f7a:	602b      	str	r3, [r5, #0]
 8004f7c:	f7fd fc70 	bl	8002860 <_sbrk>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d103      	bne.n	8004f8c <_sbrk_r+0x1c>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d000      	beq.n	8004f8c <_sbrk_r+0x1c>
 8004f8a:	6023      	str	r3, [r4, #0]
 8004f8c:	bd70      	pop	{r4, r5, r6, pc}
 8004f8e:	46c0      	nop			@ (mov r8, r8)
 8004f90:	200003a4 	.word	0x200003a4

08004f94 <memchr>:
 8004f94:	b2c9      	uxtb	r1, r1
 8004f96:	1882      	adds	r2, r0, r2
 8004f98:	4290      	cmp	r0, r2
 8004f9a:	d101      	bne.n	8004fa0 <memchr+0xc>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	4770      	bx	lr
 8004fa0:	7803      	ldrb	r3, [r0, #0]
 8004fa2:	428b      	cmp	r3, r1
 8004fa4:	d0fb      	beq.n	8004f9e <memchr+0xa>
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	e7f6      	b.n	8004f98 <memchr+0x4>

08004faa <memcpy>:
 8004faa:	2300      	movs	r3, #0
 8004fac:	b510      	push	{r4, lr}
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d100      	bne.n	8004fb4 <memcpy+0xa>
 8004fb2:	bd10      	pop	{r4, pc}
 8004fb4:	5ccc      	ldrb	r4, [r1, r3]
 8004fb6:	54c4      	strb	r4, [r0, r3]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	e7f8      	b.n	8004fae <memcpy+0x4>

08004fbc <_realloc_r>:
 8004fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fbe:	0006      	movs	r6, r0
 8004fc0:	000c      	movs	r4, r1
 8004fc2:	0015      	movs	r5, r2
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	d105      	bne.n	8004fd4 <_realloc_r+0x18>
 8004fc8:	0011      	movs	r1, r2
 8004fca:	f7ff fc67 	bl	800489c <_malloc_r>
 8004fce:	0004      	movs	r4, r0
 8004fd0:	0020      	movs	r0, r4
 8004fd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fd4:	2a00      	cmp	r2, #0
 8004fd6:	d103      	bne.n	8004fe0 <_realloc_r+0x24>
 8004fd8:	f7ff fbf4 	bl	80047c4 <_free_r>
 8004fdc:	002c      	movs	r4, r5
 8004fde:	e7f7      	b.n	8004fd0 <_realloc_r+0x14>
 8004fe0:	f000 f81c 	bl	800501c <_malloc_usable_size_r>
 8004fe4:	0007      	movs	r7, r0
 8004fe6:	4285      	cmp	r5, r0
 8004fe8:	d802      	bhi.n	8004ff0 <_realloc_r+0x34>
 8004fea:	0843      	lsrs	r3, r0, #1
 8004fec:	42ab      	cmp	r3, r5
 8004fee:	d3ef      	bcc.n	8004fd0 <_realloc_r+0x14>
 8004ff0:	0029      	movs	r1, r5
 8004ff2:	0030      	movs	r0, r6
 8004ff4:	f7ff fc52 	bl	800489c <_malloc_r>
 8004ff8:	9001      	str	r0, [sp, #4]
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d101      	bne.n	8005002 <_realloc_r+0x46>
 8004ffe:	9c01      	ldr	r4, [sp, #4]
 8005000:	e7e6      	b.n	8004fd0 <_realloc_r+0x14>
 8005002:	002a      	movs	r2, r5
 8005004:	42bd      	cmp	r5, r7
 8005006:	d900      	bls.n	800500a <_realloc_r+0x4e>
 8005008:	003a      	movs	r2, r7
 800500a:	0021      	movs	r1, r4
 800500c:	9801      	ldr	r0, [sp, #4]
 800500e:	f7ff ffcc 	bl	8004faa <memcpy>
 8005012:	0021      	movs	r1, r4
 8005014:	0030      	movs	r0, r6
 8005016:	f7ff fbd5 	bl	80047c4 <_free_r>
 800501a:	e7f0      	b.n	8004ffe <_realloc_r+0x42>

0800501c <_malloc_usable_size_r>:
 800501c:	1f0b      	subs	r3, r1, #4
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	1f18      	subs	r0, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	da01      	bge.n	800502a <_malloc_usable_size_r+0xe>
 8005026:	580b      	ldr	r3, [r1, r0]
 8005028:	18c0      	adds	r0, r0, r3
 800502a:	4770      	bx	lr

0800502c <powf>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	1c0c      	adds	r4, r1, #0
 8005030:	1c06      	adds	r6, r0, #0
 8005032:	f000 f8e9 	bl	8005208 <__ieee754_powf>
 8005036:	1c21      	adds	r1, r4, #0
 8005038:	1c05      	adds	r5, r0, #0
 800503a:	1c20      	adds	r0, r4, #0
 800503c:	f7fc f9a4 	bl	8001388 <__aeabi_fcmpun>
 8005040:	2800      	cmp	r0, #0
 8005042:	d133      	bne.n	80050ac <powf+0x80>
 8005044:	2100      	movs	r1, #0
 8005046:	1c30      	adds	r0, r6, #0
 8005048:	f7fb f9f2 	bl	8000430 <__aeabi_fcmpeq>
 800504c:	2800      	cmp	r0, #0
 800504e:	d014      	beq.n	800507a <powf+0x4e>
 8005050:	2100      	movs	r1, #0
 8005052:	1c20      	adds	r0, r4, #0
 8005054:	f7fb f9ec 	bl	8000430 <__aeabi_fcmpeq>
 8005058:	2800      	cmp	r0, #0
 800505a:	d138      	bne.n	80050ce <powf+0xa2>
 800505c:	1c20      	adds	r0, r4, #0
 800505e:	f000 f855 	bl	800510c <finitef>
 8005062:	2800      	cmp	r0, #0
 8005064:	d022      	beq.n	80050ac <powf+0x80>
 8005066:	2100      	movs	r1, #0
 8005068:	1c20      	adds	r0, r4, #0
 800506a:	f7fb f9e7 	bl	800043c <__aeabi_fcmplt>
 800506e:	2800      	cmp	r0, #0
 8005070:	d01c      	beq.n	80050ac <powf+0x80>
 8005072:	f7ff fb7b 	bl	800476c <__errno>
 8005076:	2322      	movs	r3, #34	@ 0x22
 8005078:	e017      	b.n	80050aa <powf+0x7e>
 800507a:	1c28      	adds	r0, r5, #0
 800507c:	f000 f846 	bl	800510c <finitef>
 8005080:	2800      	cmp	r0, #0
 8005082:	d115      	bne.n	80050b0 <powf+0x84>
 8005084:	1c30      	adds	r0, r6, #0
 8005086:	f000 f841 	bl	800510c <finitef>
 800508a:	2800      	cmp	r0, #0
 800508c:	d010      	beq.n	80050b0 <powf+0x84>
 800508e:	1c20      	adds	r0, r4, #0
 8005090:	f000 f83c 	bl	800510c <finitef>
 8005094:	2800      	cmp	r0, #0
 8005096:	d00b      	beq.n	80050b0 <powf+0x84>
 8005098:	1c29      	adds	r1, r5, #0
 800509a:	1c28      	adds	r0, r5, #0
 800509c:	f7fc f974 	bl	8001388 <__aeabi_fcmpun>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d0e6      	beq.n	8005072 <powf+0x46>
 80050a4:	f7ff fb62 	bl	800476c <__errno>
 80050a8:	2321      	movs	r3, #33	@ 0x21
 80050aa:	6003      	str	r3, [r0, #0]
 80050ac:	1c28      	adds	r0, r5, #0
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	2100      	movs	r1, #0
 80050b2:	1c28      	adds	r0, r5, #0
 80050b4:	f7fb f9bc 	bl	8000430 <__aeabi_fcmpeq>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d0f7      	beq.n	80050ac <powf+0x80>
 80050bc:	1c30      	adds	r0, r6, #0
 80050be:	f000 f825 	bl	800510c <finitef>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d0f2      	beq.n	80050ac <powf+0x80>
 80050c6:	1c20      	adds	r0, r4, #0
 80050c8:	f000 f820 	bl	800510c <finitef>
 80050cc:	e7cf      	b.n	800506e <powf+0x42>
 80050ce:	25fe      	movs	r5, #254	@ 0xfe
 80050d0:	05ad      	lsls	r5, r5, #22
 80050d2:	e7eb      	b.n	80050ac <powf+0x80>

080050d4 <sqrtf>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	1c05      	adds	r5, r0, #0
 80050d8:	f000 f822 	bl	8005120 <__ieee754_sqrtf>
 80050dc:	1c29      	adds	r1, r5, #0
 80050de:	1c04      	adds	r4, r0, #0
 80050e0:	1c28      	adds	r0, r5, #0
 80050e2:	f7fc f951 	bl	8001388 <__aeabi_fcmpun>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d10e      	bne.n	8005108 <sqrtf+0x34>
 80050ea:	2100      	movs	r1, #0
 80050ec:	1c28      	adds	r0, r5, #0
 80050ee:	f7fb f9a5 	bl	800043c <__aeabi_fcmplt>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d008      	beq.n	8005108 <sqrtf+0x34>
 80050f6:	f7ff fb39 	bl	800476c <__errno>
 80050fa:	2321      	movs	r3, #33	@ 0x21
 80050fc:	2100      	movs	r1, #0
 80050fe:	6003      	str	r3, [r0, #0]
 8005100:	1c08      	adds	r0, r1, #0
 8005102:	f7fb fbb5 	bl	8000870 <__aeabi_fdiv>
 8005106:	1c04      	adds	r4, r0, #0
 8005108:	1c20      	adds	r0, r4, #0
 800510a:	bd70      	pop	{r4, r5, r6, pc}

0800510c <finitef>:
 800510c:	22ff      	movs	r2, #255	@ 0xff
 800510e:	0043      	lsls	r3, r0, #1
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	2001      	movs	r0, #1
 8005114:	05d2      	lsls	r2, r2, #23
 8005116:	4293      	cmp	r3, r2
 8005118:	db00      	blt.n	800511c <finitef+0x10>
 800511a:	2000      	movs	r0, #0
 800511c:	4770      	bx	lr
	...

08005120 <__ieee754_sqrtf>:
 8005120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005122:	21ff      	movs	r1, #255	@ 0xff
 8005124:	0042      	lsls	r2, r0, #1
 8005126:	0003      	movs	r3, r0
 8005128:	1c04      	adds	r4, r0, #0
 800512a:	0852      	lsrs	r2, r2, #1
 800512c:	05c9      	lsls	r1, r1, #23
 800512e:	428a      	cmp	r2, r1
 8005130:	d309      	bcc.n	8005146 <__ieee754_sqrtf+0x26>
 8005132:	1c01      	adds	r1, r0, #0
 8005134:	f7fb fd6a 	bl	8000c0c <__aeabi_fmul>
 8005138:	1c01      	adds	r1, r0, #0
 800513a:	1c20      	adds	r0, r4, #0
 800513c:	f7fb f9a6 	bl	800048c <__aeabi_fadd>
 8005140:	1c04      	adds	r4, r0, #0
 8005142:	1c20      	adds	r0, r4, #0
 8005144:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005146:	2a00      	cmp	r2, #0
 8005148:	d0fb      	beq.n	8005142 <__ieee754_sqrtf+0x22>
 800514a:	2800      	cmp	r0, #0
 800514c:	da06      	bge.n	800515c <__ieee754_sqrtf+0x3c>
 800514e:	1c01      	adds	r1, r0, #0
 8005150:	f7fb feb6 	bl	8000ec0 <__aeabi_fsub>
 8005154:	1c01      	adds	r1, r0, #0
 8005156:	f7fb fb8b 	bl	8000870 <__aeabi_fdiv>
 800515a:	e7f1      	b.n	8005140 <__ieee754_sqrtf+0x20>
 800515c:	0002      	movs	r2, r0
 800515e:	400a      	ands	r2, r1
 8005160:	4208      	tst	r0, r1
 8005162:	d040      	beq.n	80051e6 <__ieee754_sqrtf+0xc6>
 8005164:	15c1      	asrs	r1, r0, #23
 8005166:	2280      	movs	r2, #128	@ 0x80
 8005168:	000f      	movs	r7, r1
 800516a:	025b      	lsls	r3, r3, #9
 800516c:	0a5b      	lsrs	r3, r3, #9
 800516e:	0412      	lsls	r2, r2, #16
 8005170:	3f7f      	subs	r7, #127	@ 0x7f
 8005172:	4313      	orrs	r3, r2
 8005174:	07c9      	lsls	r1, r1, #31
 8005176:	d400      	bmi.n	800517a <__ieee754_sqrtf+0x5a>
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	2400      	movs	r4, #0
 800517c:	2180      	movs	r1, #128	@ 0x80
 800517e:	2019      	movs	r0, #25
 8005180:	0026      	movs	r6, r4
 8005182:	107f      	asrs	r7, r7, #1
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	0449      	lsls	r1, r1, #17
 8005188:	1875      	adds	r5, r6, r1
 800518a:	001a      	movs	r2, r3
 800518c:	429d      	cmp	r5, r3
 800518e:	dc02      	bgt.n	8005196 <__ieee754_sqrtf+0x76>
 8005190:	186e      	adds	r6, r5, r1
 8005192:	1b5a      	subs	r2, r3, r5
 8005194:	1864      	adds	r4, r4, r1
 8005196:	3801      	subs	r0, #1
 8005198:	0053      	lsls	r3, r2, #1
 800519a:	0849      	lsrs	r1, r1, #1
 800519c:	2800      	cmp	r0, #0
 800519e:	d1f3      	bne.n	8005188 <__ieee754_sqrtf+0x68>
 80051a0:	2a00      	cmp	r2, #0
 80051a2:	d019      	beq.n	80051d8 <__ieee754_sqrtf+0xb8>
 80051a4:	4d16      	ldr	r5, [pc, #88]	@ (8005200 <__ieee754_sqrtf+0xe0>)
 80051a6:	4e17      	ldr	r6, [pc, #92]	@ (8005204 <__ieee754_sqrtf+0xe4>)
 80051a8:	6828      	ldr	r0, [r5, #0]
 80051aa:	6831      	ldr	r1, [r6, #0]
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	f7fb fe86 	bl	8000ec0 <__aeabi_fsub>
 80051b4:	1c01      	adds	r1, r0, #0
 80051b6:	9801      	ldr	r0, [sp, #4]
 80051b8:	f7fb f94a 	bl	8000450 <__aeabi_fcmple>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d00b      	beq.n	80051d8 <__ieee754_sqrtf+0xb8>
 80051c0:	6828      	ldr	r0, [r5, #0]
 80051c2:	6831      	ldr	r1, [r6, #0]
 80051c4:	f7fb f962 	bl	800048c <__aeabi_fadd>
 80051c8:	682d      	ldr	r5, [r5, #0]
 80051ca:	1c01      	adds	r1, r0, #0
 80051cc:	1c28      	adds	r0, r5, #0
 80051ce:	f7fb f935 	bl	800043c <__aeabi_fcmplt>
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d010      	beq.n	80051f8 <__ieee754_sqrtf+0xd8>
 80051d6:	3402      	adds	r4, #2
 80051d8:	23fc      	movs	r3, #252	@ 0xfc
 80051da:	1064      	asrs	r4, r4, #1
 80051dc:	059b      	lsls	r3, r3, #22
 80051de:	18e3      	adds	r3, r4, r3
 80051e0:	05fc      	lsls	r4, r7, #23
 80051e2:	18e4      	adds	r4, r4, r3
 80051e4:	e7ad      	b.n	8005142 <__ieee754_sqrtf+0x22>
 80051e6:	2080      	movs	r0, #128	@ 0x80
 80051e8:	0400      	lsls	r0, r0, #16
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	0011      	movs	r1, r2
 80051ee:	3201      	adds	r2, #1
 80051f0:	4203      	tst	r3, r0
 80051f2:	d0fa      	beq.n	80051ea <__ieee754_sqrtf+0xca>
 80051f4:	4249      	negs	r1, r1
 80051f6:	e7b6      	b.n	8005166 <__ieee754_sqrtf+0x46>
 80051f8:	2301      	movs	r3, #1
 80051fa:	3401      	adds	r4, #1
 80051fc:	439c      	bics	r4, r3
 80051fe:	e7eb      	b.n	80051d8 <__ieee754_sqrtf+0xb8>
 8005200:	08005b74 	.word	0x08005b74
 8005204:	08005b70 	.word	0x08005b70

08005208 <__ieee754_powf>:
 8005208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800520a:	b08b      	sub	sp, #44	@ 0x2c
 800520c:	9101      	str	r1, [sp, #4]
 800520e:	9f01      	ldr	r7, [sp, #4]
 8005210:	1c04      	adds	r4, r0, #0
 8005212:	007b      	lsls	r3, r7, #1
 8005214:	9004      	str	r0, [sp, #16]
 8005216:	085e      	lsrs	r6, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10d      	bne.n	8005238 <__ieee754_powf+0x30>
 800521c:	2380      	movs	r3, #128	@ 0x80
 800521e:	03db      	lsls	r3, r3, #15
 8005220:	4043      	eors	r3, r0
 8005222:	4a88      	ldr	r2, [pc, #544]	@ (8005444 <__ieee754_powf+0x23c>)
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	4293      	cmp	r3, r2
 8005228:	d800      	bhi.n	800522c <__ieee754_powf+0x24>
 800522a:	e2f2      	b.n	8005812 <__ieee754_powf+0x60a>
 800522c:	9901      	ldr	r1, [sp, #4]
 800522e:	1c20      	adds	r0, r4, #0
 8005230:	f7fb f92c 	bl	800048c <__aeabi_fadd>
 8005234:	b00b      	add	sp, #44	@ 0x2c
 8005236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005238:	23ff      	movs	r3, #255	@ 0xff
 800523a:	22fe      	movs	r2, #254	@ 0xfe
 800523c:	0045      	lsls	r5, r0, #1
 800523e:	086d      	lsrs	r5, r5, #1
 8005240:	05db      	lsls	r3, r3, #23
 8005242:	0592      	lsls	r2, r2, #22
 8005244:	429d      	cmp	r5, r3
 8005246:	d801      	bhi.n	800524c <__ieee754_powf+0x44>
 8005248:	429e      	cmp	r6, r3
 800524a:	d906      	bls.n	800525a <__ieee754_powf+0x52>
 800524c:	4294      	cmp	r4, r2
 800524e:	d1ed      	bne.n	800522c <__ieee754_powf+0x24>
 8005250:	2380      	movs	r3, #128	@ 0x80
 8005252:	9a01      	ldr	r2, [sp, #4]
 8005254:	03db      	lsls	r3, r3, #15
 8005256:	4053      	eors	r3, r2
 8005258:	e7e3      	b.n	8005222 <__ieee754_powf+0x1a>
 800525a:	2800      	cmp	r0, #0
 800525c:	da24      	bge.n	80052a8 <__ieee754_powf+0xa0>
 800525e:	2197      	movs	r1, #151	@ 0x97
 8005260:	05c9      	lsls	r1, r1, #23
 8005262:	428e      	cmp	r6, r1
 8005264:	d300      	bcc.n	8005268 <__ieee754_powf+0x60>
 8005266:	e30d      	b.n	8005884 <__ieee754_powf+0x67c>
 8005268:	4296      	cmp	r6, r2
 800526a:	d333      	bcc.n	80052d4 <__ieee754_powf+0xcc>
 800526c:	2296      	movs	r2, #150	@ 0x96
 800526e:	15f3      	asrs	r3, r6, #23
 8005270:	1ad2      	subs	r2, r2, r3
 8005272:	0033      	movs	r3, r6
 8005274:	4113      	asrs	r3, r2
 8005276:	0019      	movs	r1, r3
 8005278:	4091      	lsls	r1, r2
 800527a:	000a      	movs	r2, r1
 800527c:	2100      	movs	r1, #0
 800527e:	9102      	str	r1, [sp, #8]
 8005280:	42b2      	cmp	r2, r6
 8005282:	d104      	bne.n	800528e <__ieee754_powf+0x86>
 8005284:	2201      	movs	r2, #1
 8005286:	4013      	ands	r3, r2
 8005288:	1892      	adds	r2, r2, r2
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	9302      	str	r3, [sp, #8]
 800528e:	23fe      	movs	r3, #254	@ 0xfe
 8005290:	059b      	lsls	r3, r3, #22
 8005292:	429e      	cmp	r6, r3
 8005294:	d120      	bne.n	80052d8 <__ieee754_powf+0xd0>
 8005296:	1c20      	adds	r0, r4, #0
 8005298:	2f00      	cmp	r7, #0
 800529a:	dacb      	bge.n	8005234 <__ieee754_powf+0x2c>
 800529c:	20fe      	movs	r0, #254	@ 0xfe
 800529e:	1c21      	adds	r1, r4, #0
 80052a0:	0580      	lsls	r0, r0, #22
 80052a2:	f7fb fae5 	bl	8000870 <__aeabi_fdiv>
 80052a6:	e7c5      	b.n	8005234 <__ieee754_powf+0x2c>
 80052a8:	2100      	movs	r1, #0
 80052aa:	9102      	str	r1, [sp, #8]
 80052ac:	429e      	cmp	r6, r3
 80052ae:	d1ee      	bne.n	800528e <__ieee754_powf+0x86>
 80052b0:	4295      	cmp	r5, r2
 80052b2:	d100      	bne.n	80052b6 <__ieee754_powf+0xae>
 80052b4:	e2ad      	b.n	8005812 <__ieee754_powf+0x60a>
 80052b6:	d904      	bls.n	80052c2 <__ieee754_powf+0xba>
 80052b8:	9801      	ldr	r0, [sp, #4]
 80052ba:	2f00      	cmp	r7, #0
 80052bc:	daba      	bge.n	8005234 <__ieee754_powf+0x2c>
 80052be:	2000      	movs	r0, #0
 80052c0:	e7b8      	b.n	8005234 <__ieee754_powf+0x2c>
 80052c2:	2f00      	cmp	r7, #0
 80052c4:	dafb      	bge.n	80052be <__ieee754_powf+0xb6>
 80052c6:	2280      	movs	r2, #128	@ 0x80
 80052c8:	0612      	lsls	r2, r2, #24
 80052ca:	4694      	mov	ip, r2
 80052cc:	9b01      	ldr	r3, [sp, #4]
 80052ce:	4463      	add	r3, ip
 80052d0:	0018      	movs	r0, r3
 80052d2:	e7af      	b.n	8005234 <__ieee754_powf+0x2c>
 80052d4:	2300      	movs	r3, #0
 80052d6:	9302      	str	r3, [sp, #8]
 80052d8:	2380      	movs	r3, #128	@ 0x80
 80052da:	05db      	lsls	r3, r3, #23
 80052dc:	429f      	cmp	r7, r3
 80052de:	d104      	bne.n	80052ea <__ieee754_powf+0xe2>
 80052e0:	1c21      	adds	r1, r4, #0
 80052e2:	1c20      	adds	r0, r4, #0
 80052e4:	f7fb fc92 	bl	8000c0c <__aeabi_fmul>
 80052e8:	e7a4      	b.n	8005234 <__ieee754_powf+0x2c>
 80052ea:	23fc      	movs	r3, #252	@ 0xfc
 80052ec:	059b      	lsls	r3, r3, #22
 80052ee:	429f      	cmp	r7, r3
 80052f0:	d000      	beq.n	80052f4 <__ieee754_powf+0xec>
 80052f2:	e2cc      	b.n	800588e <__ieee754_powf+0x686>
 80052f4:	2c00      	cmp	r4, #0
 80052f6:	da00      	bge.n	80052fa <__ieee754_powf+0xf2>
 80052f8:	e2c9      	b.n	800588e <__ieee754_powf+0x686>
 80052fa:	1c20      	adds	r0, r4, #0
 80052fc:	f7ff ff10 	bl	8005120 <__ieee754_sqrtf>
 8005300:	e798      	b.n	8005234 <__ieee754_powf+0x2c>
 8005302:	9b02      	ldr	r3, [sp, #8]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d000      	beq.n	800530a <__ieee754_powf+0x102>
 8005308:	e794      	b.n	8005234 <__ieee754_powf+0x2c>
 800530a:	2380      	movs	r3, #128	@ 0x80
 800530c:	061b      	lsls	r3, r3, #24
 800530e:	18c0      	adds	r0, r0, r3
 8005310:	e790      	b.n	8005234 <__ieee754_powf+0x2c>
 8005312:	0fe3      	lsrs	r3, r4, #31
 8005314:	3b01      	subs	r3, #1
 8005316:	9305      	str	r3, [sp, #20]
 8005318:	9a05      	ldr	r2, [sp, #20]
 800531a:	9b02      	ldr	r3, [sp, #8]
 800531c:	4313      	orrs	r3, r2
 800531e:	d102      	bne.n	8005326 <__ieee754_powf+0x11e>
 8005320:	1c21      	adds	r1, r4, #0
 8005322:	1c20      	adds	r0, r4, #0
 8005324:	e2d2      	b.n	80058cc <__ieee754_powf+0x6c4>
 8005326:	239a      	movs	r3, #154	@ 0x9a
 8005328:	05db      	lsls	r3, r3, #23
 800532a:	429e      	cmp	r6, r3
 800532c:	d800      	bhi.n	8005330 <__ieee754_powf+0x128>
 800532e:	e097      	b.n	8005460 <__ieee754_powf+0x258>
 8005330:	4b45      	ldr	r3, [pc, #276]	@ (8005448 <__ieee754_powf+0x240>)
 8005332:	429d      	cmp	r5, r3
 8005334:	d805      	bhi.n	8005342 <__ieee754_powf+0x13a>
 8005336:	2f00      	cmp	r7, #0
 8005338:	da08      	bge.n	800534c <__ieee754_powf+0x144>
 800533a:	2000      	movs	r0, #0
 800533c:	f000 fb42 	bl	80059c4 <__math_oflowf>
 8005340:	e778      	b.n	8005234 <__ieee754_powf+0x2c>
 8005342:	4b42      	ldr	r3, [pc, #264]	@ (800544c <__ieee754_powf+0x244>)
 8005344:	429d      	cmp	r5, r3
 8005346:	d905      	bls.n	8005354 <__ieee754_powf+0x14c>
 8005348:	2f00      	cmp	r7, #0
 800534a:	dcf6      	bgt.n	800533a <__ieee754_powf+0x132>
 800534c:	2000      	movs	r0, #0
 800534e:	f000 fb33 	bl	80059b8 <__math_uflowf>
 8005352:	e76f      	b.n	8005234 <__ieee754_powf+0x2c>
 8005354:	21fe      	movs	r1, #254	@ 0xfe
 8005356:	0589      	lsls	r1, r1, #22
 8005358:	f7fb fdb2 	bl	8000ec0 <__aeabi_fsub>
 800535c:	493c      	ldr	r1, [pc, #240]	@ (8005450 <__ieee754_powf+0x248>)
 800535e:	1c04      	adds	r4, r0, #0
 8005360:	f7fb fc54 	bl	8000c0c <__aeabi_fmul>
 8005364:	493b      	ldr	r1, [pc, #236]	@ (8005454 <__ieee754_powf+0x24c>)
 8005366:	1c05      	adds	r5, r0, #0
 8005368:	1c20      	adds	r0, r4, #0
 800536a:	f7fb fc4f 	bl	8000c0c <__aeabi_fmul>
 800536e:	21fa      	movs	r1, #250	@ 0xfa
 8005370:	1c06      	adds	r6, r0, #0
 8005372:	0589      	lsls	r1, r1, #22
 8005374:	1c20      	adds	r0, r4, #0
 8005376:	f7fb fc49 	bl	8000c0c <__aeabi_fmul>
 800537a:	1c01      	adds	r1, r0, #0
 800537c:	4836      	ldr	r0, [pc, #216]	@ (8005458 <__ieee754_powf+0x250>)
 800537e:	f7fb fd9f 	bl	8000ec0 <__aeabi_fsub>
 8005382:	1c21      	adds	r1, r4, #0
 8005384:	f7fb fc42 	bl	8000c0c <__aeabi_fmul>
 8005388:	1c01      	adds	r1, r0, #0
 800538a:	20fc      	movs	r0, #252	@ 0xfc
 800538c:	0580      	lsls	r0, r0, #22
 800538e:	f7fb fd97 	bl	8000ec0 <__aeabi_fsub>
 8005392:	1c21      	adds	r1, r4, #0
 8005394:	1c07      	adds	r7, r0, #0
 8005396:	1c20      	adds	r0, r4, #0
 8005398:	f7fb fc38 	bl	8000c0c <__aeabi_fmul>
 800539c:	1c01      	adds	r1, r0, #0
 800539e:	1c38      	adds	r0, r7, #0
 80053a0:	f7fb fc34 	bl	8000c0c <__aeabi_fmul>
 80053a4:	492d      	ldr	r1, [pc, #180]	@ (800545c <__ieee754_powf+0x254>)
 80053a6:	f7fb fc31 	bl	8000c0c <__aeabi_fmul>
 80053aa:	1c01      	adds	r1, r0, #0
 80053ac:	1c30      	adds	r0, r6, #0
 80053ae:	f7fb fd87 	bl	8000ec0 <__aeabi_fsub>
 80053b2:	1c01      	adds	r1, r0, #0
 80053b4:	1c06      	adds	r6, r0, #0
 80053b6:	1c28      	adds	r0, r5, #0
 80053b8:	f7fb f868 	bl	800048c <__aeabi_fadd>
 80053bc:	0b04      	lsrs	r4, r0, #12
 80053be:	0324      	lsls	r4, r4, #12
 80053c0:	1c29      	adds	r1, r5, #0
 80053c2:	1c20      	adds	r0, r4, #0
 80053c4:	f7fb fd7c 	bl	8000ec0 <__aeabi_fsub>
 80053c8:	1c01      	adds	r1, r0, #0
 80053ca:	1c30      	adds	r0, r6, #0
 80053cc:	f7fb fd78 	bl	8000ec0 <__aeabi_fsub>
 80053d0:	9b02      	ldr	r3, [sp, #8]
 80053d2:	9a05      	ldr	r2, [sp, #20]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	1c06      	adds	r6, r0, #0
 80053d8:	4313      	orrs	r3, r2
 80053da:	d100      	bne.n	80053de <__ieee754_powf+0x1d6>
 80053dc:	e14d      	b.n	800567a <__ieee754_powf+0x472>
 80053de:	27fe      	movs	r7, #254	@ 0xfe
 80053e0:	05bf      	lsls	r7, r7, #22
 80053e2:	9b01      	ldr	r3, [sp, #4]
 80053e4:	9801      	ldr	r0, [sp, #4]
 80053e6:	0b1d      	lsrs	r5, r3, #12
 80053e8:	032d      	lsls	r5, r5, #12
 80053ea:	1c29      	adds	r1, r5, #0
 80053ec:	f7fb fd68 	bl	8000ec0 <__aeabi_fsub>
 80053f0:	1c21      	adds	r1, r4, #0
 80053f2:	f7fb fc0b 	bl	8000c0c <__aeabi_fmul>
 80053f6:	9901      	ldr	r1, [sp, #4]
 80053f8:	9002      	str	r0, [sp, #8]
 80053fa:	1c30      	adds	r0, r6, #0
 80053fc:	f7fb fc06 	bl	8000c0c <__aeabi_fmul>
 8005400:	1c01      	adds	r1, r0, #0
 8005402:	9802      	ldr	r0, [sp, #8]
 8005404:	f7fb f842 	bl	800048c <__aeabi_fadd>
 8005408:	1c29      	adds	r1, r5, #0
 800540a:	9001      	str	r0, [sp, #4]
 800540c:	1c20      	adds	r0, r4, #0
 800540e:	f7fb fbfd 	bl	8000c0c <__aeabi_fmul>
 8005412:	1c01      	adds	r1, r0, #0
 8005414:	1c04      	adds	r4, r0, #0
 8005416:	9801      	ldr	r0, [sp, #4]
 8005418:	f7fb f838 	bl	800048c <__aeabi_fadd>
 800541c:	0043      	lsls	r3, r0, #1
 800541e:	1c06      	adds	r6, r0, #0
 8005420:	9002      	str	r0, [sp, #8]
 8005422:	085b      	lsrs	r3, r3, #1
 8005424:	2800      	cmp	r0, #0
 8005426:	dc00      	bgt.n	800542a <__ieee754_powf+0x222>
 8005428:	e13d      	b.n	80056a6 <__ieee754_powf+0x49e>
 800542a:	2286      	movs	r2, #134	@ 0x86
 800542c:	05d2      	lsls	r2, r2, #23
 800542e:	4293      	cmp	r3, r2
 8005430:	d800      	bhi.n	8005434 <__ieee754_powf+0x22c>
 8005432:	e124      	b.n	800567e <__ieee754_powf+0x476>
 8005434:	2100      	movs	r1, #0
 8005436:	1c38      	adds	r0, r7, #0
 8005438:	f7fb f800 	bl	800043c <__aeabi_fcmplt>
 800543c:	1e43      	subs	r3, r0, #1
 800543e:	4198      	sbcs	r0, r3
 8005440:	e77c      	b.n	800533c <__ieee754_powf+0x134>
 8005442:	46c0      	nop			@ (mov r8, r8)
 8005444:	ff800000 	.word	0xff800000
 8005448:	3f7ffff3 	.word	0x3f7ffff3
 800544c:	3f800007 	.word	0x3f800007
 8005450:	3fb8aa00 	.word	0x3fb8aa00
 8005454:	36eca570 	.word	0x36eca570
 8005458:	3eaaaaab 	.word	0x3eaaaaab
 800545c:	3fb8aa3b 	.word	0x3fb8aa3b
 8005460:	23ff      	movs	r3, #255	@ 0xff
 8005462:	05db      	lsls	r3, r3, #23
 8005464:	2200      	movs	r2, #0
 8005466:	4223      	tst	r3, r4
 8005468:	d106      	bne.n	8005478 <__ieee754_powf+0x270>
 800546a:	2197      	movs	r1, #151	@ 0x97
 800546c:	05c9      	lsls	r1, r1, #23
 800546e:	f7fb fbcd 	bl	8000c0c <__aeabi_fmul>
 8005472:	2218      	movs	r2, #24
 8005474:	9003      	str	r0, [sp, #12]
 8005476:	4252      	negs	r2, r2
 8005478:	24fe      	movs	r4, #254	@ 0xfe
 800547a:	9b03      	ldr	r3, [sp, #12]
 800547c:	05a4      	lsls	r4, r4, #22
 800547e:	15db      	asrs	r3, r3, #23
 8005480:	3b7f      	subs	r3, #127	@ 0x7f
 8005482:	189b      	adds	r3, r3, r2
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	9b03      	ldr	r3, [sp, #12]
 8005488:	4ae3      	ldr	r2, [pc, #908]	@ (8005818 <__ieee754_powf+0x610>)
 800548a:	025b      	lsls	r3, r3, #9
 800548c:	0a5b      	lsrs	r3, r3, #9
 800548e:	2500      	movs	r5, #0
 8005490:	431c      	orrs	r4, r3
 8005492:	4293      	cmp	r3, r2
 8005494:	dd09      	ble.n	80054aa <__ieee754_powf+0x2a2>
 8005496:	4ae1      	ldr	r2, [pc, #900]	@ (800581c <__ieee754_powf+0x614>)
 8005498:	3501      	adds	r5, #1
 800549a:	4293      	cmp	r3, r2
 800549c:	dd05      	ble.n	80054aa <__ieee754_powf+0x2a2>
 800549e:	9b04      	ldr	r3, [sp, #16]
 80054a0:	195b      	adds	r3, r3, r5
 80054a2:	2500      	movs	r5, #0
 80054a4:	9304      	str	r3, [sp, #16]
 80054a6:	4bde      	ldr	r3, [pc, #888]	@ (8005820 <__ieee754_powf+0x618>)
 80054a8:	18e4      	adds	r4, r4, r3
 80054aa:	4bde      	ldr	r3, [pc, #888]	@ (8005824 <__ieee754_powf+0x61c>)
 80054ac:	00aa      	lsls	r2, r5, #2
 80054ae:	58d7      	ldr	r7, [r2, r3]
 80054b0:	1c20      	adds	r0, r4, #0
 80054b2:	1c39      	adds	r1, r7, #0
 80054b4:	9206      	str	r2, [sp, #24]
 80054b6:	9409      	str	r4, [sp, #36]	@ 0x24
 80054b8:	f7fb fd02 	bl	8000ec0 <__aeabi_fsub>
 80054bc:	1c21      	adds	r1, r4, #0
 80054be:	9007      	str	r0, [sp, #28]
 80054c0:	1c38      	adds	r0, r7, #0
 80054c2:	f7fa ffe3 	bl	800048c <__aeabi_fadd>
 80054c6:	1c01      	adds	r1, r0, #0
 80054c8:	20fe      	movs	r0, #254	@ 0xfe
 80054ca:	0580      	lsls	r0, r0, #22
 80054cc:	f7fb f9d0 	bl	8000870 <__aeabi_fdiv>
 80054d0:	1c01      	adds	r1, r0, #0
 80054d2:	9008      	str	r0, [sp, #32]
 80054d4:	9807      	ldr	r0, [sp, #28]
 80054d6:	f7fb fb99 	bl	8000c0c <__aeabi_fmul>
 80054da:	9003      	str	r0, [sp, #12]
 80054dc:	9b03      	ldr	r3, [sp, #12]
 80054de:	2280      	movs	r2, #128	@ 0x80
 80054e0:	0b1e      	lsrs	r6, r3, #12
 80054e2:	2380      	movs	r3, #128	@ 0x80
 80054e4:	1064      	asrs	r4, r4, #1
 80054e6:	0592      	lsls	r2, r2, #22
 80054e8:	02db      	lsls	r3, r3, #11
 80054ea:	4322      	orrs	r2, r4
 80054ec:	18d2      	adds	r2, r2, r3
 80054ee:	056d      	lsls	r5, r5, #21
 80054f0:	1955      	adds	r5, r2, r5
 80054f2:	0336      	lsls	r6, r6, #12
 80054f4:	1c29      	adds	r1, r5, #0
 80054f6:	1c30      	adds	r0, r6, #0
 80054f8:	f7fb fb88 	bl	8000c0c <__aeabi_fmul>
 80054fc:	1c01      	adds	r1, r0, #0
 80054fe:	9807      	ldr	r0, [sp, #28]
 8005500:	f7fb fcde 	bl	8000ec0 <__aeabi_fsub>
 8005504:	1c39      	adds	r1, r7, #0
 8005506:	1c04      	adds	r4, r0, #0
 8005508:	1c28      	adds	r0, r5, #0
 800550a:	f7fb fcd9 	bl	8000ec0 <__aeabi_fsub>
 800550e:	1c01      	adds	r1, r0, #0
 8005510:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005512:	f7fb fcd5 	bl	8000ec0 <__aeabi_fsub>
 8005516:	1c31      	adds	r1, r6, #0
 8005518:	f7fb fb78 	bl	8000c0c <__aeabi_fmul>
 800551c:	1c01      	adds	r1, r0, #0
 800551e:	1c20      	adds	r0, r4, #0
 8005520:	f7fb fcce 	bl	8000ec0 <__aeabi_fsub>
 8005524:	9908      	ldr	r1, [sp, #32]
 8005526:	f7fb fb71 	bl	8000c0c <__aeabi_fmul>
 800552a:	9903      	ldr	r1, [sp, #12]
 800552c:	9007      	str	r0, [sp, #28]
 800552e:	1c08      	adds	r0, r1, #0
 8005530:	f7fb fb6c 	bl	8000c0c <__aeabi_fmul>
 8005534:	49bc      	ldr	r1, [pc, #752]	@ (8005828 <__ieee754_powf+0x620>)
 8005536:	1c04      	adds	r4, r0, #0
 8005538:	f7fb fb68 	bl	8000c0c <__aeabi_fmul>
 800553c:	49bb      	ldr	r1, [pc, #748]	@ (800582c <__ieee754_powf+0x624>)
 800553e:	f7fa ffa5 	bl	800048c <__aeabi_fadd>
 8005542:	1c21      	adds	r1, r4, #0
 8005544:	f7fb fb62 	bl	8000c0c <__aeabi_fmul>
 8005548:	49b9      	ldr	r1, [pc, #740]	@ (8005830 <__ieee754_powf+0x628>)
 800554a:	f7fa ff9f 	bl	800048c <__aeabi_fadd>
 800554e:	1c21      	adds	r1, r4, #0
 8005550:	f7fb fb5c 	bl	8000c0c <__aeabi_fmul>
 8005554:	49b7      	ldr	r1, [pc, #732]	@ (8005834 <__ieee754_powf+0x62c>)
 8005556:	f7fa ff99 	bl	800048c <__aeabi_fadd>
 800555a:	1c21      	adds	r1, r4, #0
 800555c:	f7fb fb56 	bl	8000c0c <__aeabi_fmul>
 8005560:	49b5      	ldr	r1, [pc, #724]	@ (8005838 <__ieee754_powf+0x630>)
 8005562:	f7fa ff93 	bl	800048c <__aeabi_fadd>
 8005566:	1c21      	adds	r1, r4, #0
 8005568:	f7fb fb50 	bl	8000c0c <__aeabi_fmul>
 800556c:	49b3      	ldr	r1, [pc, #716]	@ (800583c <__ieee754_powf+0x634>)
 800556e:	f7fa ff8d 	bl	800048c <__aeabi_fadd>
 8005572:	1c21      	adds	r1, r4, #0
 8005574:	1c05      	adds	r5, r0, #0
 8005576:	1c20      	adds	r0, r4, #0
 8005578:	f7fb fb48 	bl	8000c0c <__aeabi_fmul>
 800557c:	1c01      	adds	r1, r0, #0
 800557e:	1c28      	adds	r0, r5, #0
 8005580:	f7fb fb44 	bl	8000c0c <__aeabi_fmul>
 8005584:	1c31      	adds	r1, r6, #0
 8005586:	1c04      	adds	r4, r0, #0
 8005588:	9803      	ldr	r0, [sp, #12]
 800558a:	f7fa ff7f 	bl	800048c <__aeabi_fadd>
 800558e:	9907      	ldr	r1, [sp, #28]
 8005590:	f7fb fb3c 	bl	8000c0c <__aeabi_fmul>
 8005594:	1c21      	adds	r1, r4, #0
 8005596:	f7fa ff79 	bl	800048c <__aeabi_fadd>
 800559a:	1c31      	adds	r1, r6, #0
 800559c:	9008      	str	r0, [sp, #32]
 800559e:	1c30      	adds	r0, r6, #0
 80055a0:	f7fb fb34 	bl	8000c0c <__aeabi_fmul>
 80055a4:	49a6      	ldr	r1, [pc, #664]	@ (8005840 <__ieee754_powf+0x638>)
 80055a6:	1c07      	adds	r7, r0, #0
 80055a8:	f7fa ff70 	bl	800048c <__aeabi_fadd>
 80055ac:	9908      	ldr	r1, [sp, #32]
 80055ae:	f7fa ff6d 	bl	800048c <__aeabi_fadd>
 80055b2:	0b04      	lsrs	r4, r0, #12
 80055b4:	0324      	lsls	r4, r4, #12
 80055b6:	1c21      	adds	r1, r4, #0
 80055b8:	1c30      	adds	r0, r6, #0
 80055ba:	f7fb fb27 	bl	8000c0c <__aeabi_fmul>
 80055be:	49a0      	ldr	r1, [pc, #640]	@ (8005840 <__ieee754_powf+0x638>)
 80055c0:	1c05      	adds	r5, r0, #0
 80055c2:	1c20      	adds	r0, r4, #0
 80055c4:	f7fb fc7c 	bl	8000ec0 <__aeabi_fsub>
 80055c8:	1c39      	adds	r1, r7, #0
 80055ca:	f7fb fc79 	bl	8000ec0 <__aeabi_fsub>
 80055ce:	1c01      	adds	r1, r0, #0
 80055d0:	9808      	ldr	r0, [sp, #32]
 80055d2:	f7fb fc75 	bl	8000ec0 <__aeabi_fsub>
 80055d6:	9903      	ldr	r1, [sp, #12]
 80055d8:	f7fb fb18 	bl	8000c0c <__aeabi_fmul>
 80055dc:	1c21      	adds	r1, r4, #0
 80055de:	1c06      	adds	r6, r0, #0
 80055e0:	9807      	ldr	r0, [sp, #28]
 80055e2:	f7fb fb13 	bl	8000c0c <__aeabi_fmul>
 80055e6:	1c01      	adds	r1, r0, #0
 80055e8:	1c30      	adds	r0, r6, #0
 80055ea:	f7fa ff4f 	bl	800048c <__aeabi_fadd>
 80055ee:	1c06      	adds	r6, r0, #0
 80055f0:	1c01      	adds	r1, r0, #0
 80055f2:	1c28      	adds	r0, r5, #0
 80055f4:	f7fa ff4a 	bl	800048c <__aeabi_fadd>
 80055f8:	0b04      	lsrs	r4, r0, #12
 80055fa:	0324      	lsls	r4, r4, #12
 80055fc:	4991      	ldr	r1, [pc, #580]	@ (8005844 <__ieee754_powf+0x63c>)
 80055fe:	1c20      	adds	r0, r4, #0
 8005600:	f7fb fb04 	bl	8000c0c <__aeabi_fmul>
 8005604:	1c29      	adds	r1, r5, #0
 8005606:	9003      	str	r0, [sp, #12]
 8005608:	1c20      	adds	r0, r4, #0
 800560a:	f7fb fc59 	bl	8000ec0 <__aeabi_fsub>
 800560e:	1c01      	adds	r1, r0, #0
 8005610:	1c30      	adds	r0, r6, #0
 8005612:	f7fb fc55 	bl	8000ec0 <__aeabi_fsub>
 8005616:	498c      	ldr	r1, [pc, #560]	@ (8005848 <__ieee754_powf+0x640>)
 8005618:	f7fb faf8 	bl	8000c0c <__aeabi_fmul>
 800561c:	498b      	ldr	r1, [pc, #556]	@ (800584c <__ieee754_powf+0x644>)
 800561e:	1c05      	adds	r5, r0, #0
 8005620:	1c20      	adds	r0, r4, #0
 8005622:	f7fb faf3 	bl	8000c0c <__aeabi_fmul>
 8005626:	1c01      	adds	r1, r0, #0
 8005628:	1c28      	adds	r0, r5, #0
 800562a:	f7fa ff2f 	bl	800048c <__aeabi_fadd>
 800562e:	9a06      	ldr	r2, [sp, #24]
 8005630:	4b87      	ldr	r3, [pc, #540]	@ (8005850 <__ieee754_powf+0x648>)
 8005632:	58d1      	ldr	r1, [r2, r3]
 8005634:	f7fa ff2a 	bl	800048c <__aeabi_fadd>
 8005638:	1c05      	adds	r5, r0, #0
 800563a:	9804      	ldr	r0, [sp, #16]
 800563c:	f7fb feba 	bl	80013b4 <__aeabi_i2f>
 8005640:	4b84      	ldr	r3, [pc, #528]	@ (8005854 <__ieee754_powf+0x64c>)
 8005642:	9a06      	ldr	r2, [sp, #24]
 8005644:	1c06      	adds	r6, r0, #0
 8005646:	58d7      	ldr	r7, [r2, r3]
 8005648:	1c29      	adds	r1, r5, #0
 800564a:	9803      	ldr	r0, [sp, #12]
 800564c:	f7fa ff1e 	bl	800048c <__aeabi_fadd>
 8005650:	1c39      	adds	r1, r7, #0
 8005652:	f7fa ff1b 	bl	800048c <__aeabi_fadd>
 8005656:	1c31      	adds	r1, r6, #0
 8005658:	f7fa ff18 	bl	800048c <__aeabi_fadd>
 800565c:	0b04      	lsrs	r4, r0, #12
 800565e:	0324      	lsls	r4, r4, #12
 8005660:	1c31      	adds	r1, r6, #0
 8005662:	1c20      	adds	r0, r4, #0
 8005664:	f7fb fc2c 	bl	8000ec0 <__aeabi_fsub>
 8005668:	1c39      	adds	r1, r7, #0
 800566a:	f7fb fc29 	bl	8000ec0 <__aeabi_fsub>
 800566e:	9903      	ldr	r1, [sp, #12]
 8005670:	f7fb fc26 	bl	8000ec0 <__aeabi_fsub>
 8005674:	1c01      	adds	r1, r0, #0
 8005676:	1c28      	adds	r0, r5, #0
 8005678:	e6a8      	b.n	80053cc <__ieee754_powf+0x1c4>
 800567a:	4f77      	ldr	r7, [pc, #476]	@ (8005858 <__ieee754_powf+0x650>)
 800567c:	e6b1      	b.n	80053e2 <__ieee754_powf+0x1da>
 800567e:	4293      	cmp	r3, r2
 8005680:	d126      	bne.n	80056d0 <__ieee754_powf+0x4c8>
 8005682:	4976      	ldr	r1, [pc, #472]	@ (800585c <__ieee754_powf+0x654>)
 8005684:	9801      	ldr	r0, [sp, #4]
 8005686:	f7fa ff01 	bl	800048c <__aeabi_fadd>
 800568a:	1c21      	adds	r1, r4, #0
 800568c:	1c05      	adds	r5, r0, #0
 800568e:	1c30      	adds	r0, r6, #0
 8005690:	f7fb fc16 	bl	8000ec0 <__aeabi_fsub>
 8005694:	1c01      	adds	r1, r0, #0
 8005696:	1c28      	adds	r0, r5, #0
 8005698:	f7fa fee4 	bl	8000464 <__aeabi_fcmpgt>
 800569c:	2800      	cmp	r0, #0
 800569e:	d000      	beq.n	80056a2 <__ieee754_powf+0x49a>
 80056a0:	e6c8      	b.n	8005434 <__ieee754_powf+0x22c>
 80056a2:	2386      	movs	r3, #134	@ 0x86
 80056a4:	e01a      	b.n	80056dc <__ieee754_powf+0x4d4>
 80056a6:	4a6e      	ldr	r2, [pc, #440]	@ (8005860 <__ieee754_powf+0x658>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d906      	bls.n	80056ba <__ieee754_powf+0x4b2>
 80056ac:	2100      	movs	r1, #0
 80056ae:	1c38      	adds	r0, r7, #0
 80056b0:	f7fa fec4 	bl	800043c <__aeabi_fcmplt>
 80056b4:	1e43      	subs	r3, r0, #1
 80056b6:	4198      	sbcs	r0, r3
 80056b8:	e649      	b.n	800534e <__ieee754_powf+0x146>
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d108      	bne.n	80056d0 <__ieee754_powf+0x4c8>
 80056be:	1c21      	adds	r1, r4, #0
 80056c0:	f7fb fbfe 	bl	8000ec0 <__aeabi_fsub>
 80056c4:	9901      	ldr	r1, [sp, #4]
 80056c6:	f7fa fed7 	bl	8000478 <__aeabi_fcmpge>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d0e9      	beq.n	80056a2 <__ieee754_powf+0x49a>
 80056ce:	e7ed      	b.n	80056ac <__ieee754_powf+0x4a4>
 80056d0:	22fc      	movs	r2, #252	@ 0xfc
 80056d2:	2500      	movs	r5, #0
 80056d4:	0592      	lsls	r2, r2, #22
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d91a      	bls.n	8005710 <__ieee754_powf+0x508>
 80056da:	15db      	asrs	r3, r3, #23
 80056dc:	2580      	movs	r5, #128	@ 0x80
 80056de:	042d      	lsls	r5, r5, #16
 80056e0:	002a      	movs	r2, r5
 80056e2:	3b7e      	subs	r3, #126	@ 0x7e
 80056e4:	411a      	asrs	r2, r3
 80056e6:	1993      	adds	r3, r2, r6
 80056e8:	15da      	asrs	r2, r3, #23
 80056ea:	494d      	ldr	r1, [pc, #308]	@ (8005820 <__ieee754_powf+0x618>)
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	3a7f      	subs	r2, #127	@ 0x7f
 80056f0:	4111      	asrs	r1, r2
 80056f2:	4019      	ands	r1, r3
 80056f4:	025b      	lsls	r3, r3, #9
 80056f6:	0a5b      	lsrs	r3, r3, #9
 80056f8:	431d      	orrs	r5, r3
 80056fa:	2317      	movs	r3, #23
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	411d      	asrs	r5, r3
 8005700:	9b02      	ldr	r3, [sp, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	da00      	bge.n	8005708 <__ieee754_powf+0x500>
 8005706:	426d      	negs	r5, r5
 8005708:	1c20      	adds	r0, r4, #0
 800570a:	f7fb fbd9 	bl	8000ec0 <__aeabi_fsub>
 800570e:	1c04      	adds	r4, r0, #0
 8005710:	9901      	ldr	r1, [sp, #4]
 8005712:	1c20      	adds	r0, r4, #0
 8005714:	f7fa feba 	bl	800048c <__aeabi_fadd>
 8005718:	0b00      	lsrs	r0, r0, #12
 800571a:	0303      	lsls	r3, r0, #12
 800571c:	1c18      	adds	r0, r3, #0
 800571e:	4951      	ldr	r1, [pc, #324]	@ (8005864 <__ieee754_powf+0x65c>)
 8005720:	001e      	movs	r6, r3
 8005722:	f7fb fa73 	bl	8000c0c <__aeabi_fmul>
 8005726:	1c21      	adds	r1, r4, #0
 8005728:	9002      	str	r0, [sp, #8]
 800572a:	1c30      	adds	r0, r6, #0
 800572c:	f7fb fbc8 	bl	8000ec0 <__aeabi_fsub>
 8005730:	1c01      	adds	r1, r0, #0
 8005732:	9801      	ldr	r0, [sp, #4]
 8005734:	f7fb fbc4 	bl	8000ec0 <__aeabi_fsub>
 8005738:	494b      	ldr	r1, [pc, #300]	@ (8005868 <__ieee754_powf+0x660>)
 800573a:	f7fb fa67 	bl	8000c0c <__aeabi_fmul>
 800573e:	494b      	ldr	r1, [pc, #300]	@ (800586c <__ieee754_powf+0x664>)
 8005740:	1c04      	adds	r4, r0, #0
 8005742:	1c30      	adds	r0, r6, #0
 8005744:	f7fb fa62 	bl	8000c0c <__aeabi_fmul>
 8005748:	1c01      	adds	r1, r0, #0
 800574a:	1c20      	adds	r0, r4, #0
 800574c:	f7fa fe9e 	bl	800048c <__aeabi_fadd>
 8005750:	1c06      	adds	r6, r0, #0
 8005752:	1c01      	adds	r1, r0, #0
 8005754:	9802      	ldr	r0, [sp, #8]
 8005756:	f7fa fe99 	bl	800048c <__aeabi_fadd>
 800575a:	9902      	ldr	r1, [sp, #8]
 800575c:	1c04      	adds	r4, r0, #0
 800575e:	f7fb fbaf 	bl	8000ec0 <__aeabi_fsub>
 8005762:	1c01      	adds	r1, r0, #0
 8005764:	1c30      	adds	r0, r6, #0
 8005766:	f7fb fbab 	bl	8000ec0 <__aeabi_fsub>
 800576a:	1c21      	adds	r1, r4, #0
 800576c:	9001      	str	r0, [sp, #4]
 800576e:	1c20      	adds	r0, r4, #0
 8005770:	f7fb fa4c 	bl	8000c0c <__aeabi_fmul>
 8005774:	493e      	ldr	r1, [pc, #248]	@ (8005870 <__ieee754_powf+0x668>)
 8005776:	1c06      	adds	r6, r0, #0
 8005778:	f7fb fa48 	bl	8000c0c <__aeabi_fmul>
 800577c:	493d      	ldr	r1, [pc, #244]	@ (8005874 <__ieee754_powf+0x66c>)
 800577e:	f7fb fb9f 	bl	8000ec0 <__aeabi_fsub>
 8005782:	1c31      	adds	r1, r6, #0
 8005784:	f7fb fa42 	bl	8000c0c <__aeabi_fmul>
 8005788:	493b      	ldr	r1, [pc, #236]	@ (8005878 <__ieee754_powf+0x670>)
 800578a:	f7fa fe7f 	bl	800048c <__aeabi_fadd>
 800578e:	1c31      	adds	r1, r6, #0
 8005790:	f7fb fa3c 	bl	8000c0c <__aeabi_fmul>
 8005794:	4939      	ldr	r1, [pc, #228]	@ (800587c <__ieee754_powf+0x674>)
 8005796:	f7fb fb93 	bl	8000ec0 <__aeabi_fsub>
 800579a:	1c31      	adds	r1, r6, #0
 800579c:	f7fb fa36 	bl	8000c0c <__aeabi_fmul>
 80057a0:	4937      	ldr	r1, [pc, #220]	@ (8005880 <__ieee754_powf+0x678>)
 80057a2:	f7fa fe73 	bl	800048c <__aeabi_fadd>
 80057a6:	1c31      	adds	r1, r6, #0
 80057a8:	f7fb fa30 	bl	8000c0c <__aeabi_fmul>
 80057ac:	1c01      	adds	r1, r0, #0
 80057ae:	1c20      	adds	r0, r4, #0
 80057b0:	f7fb fb86 	bl	8000ec0 <__aeabi_fsub>
 80057b4:	1c06      	adds	r6, r0, #0
 80057b6:	1c01      	adds	r1, r0, #0
 80057b8:	1c20      	adds	r0, r4, #0
 80057ba:	f7fb fa27 	bl	8000c0c <__aeabi_fmul>
 80057be:	2180      	movs	r1, #128	@ 0x80
 80057c0:	9002      	str	r0, [sp, #8]
 80057c2:	05c9      	lsls	r1, r1, #23
 80057c4:	1c30      	adds	r0, r6, #0
 80057c6:	f7fb fb7b 	bl	8000ec0 <__aeabi_fsub>
 80057ca:	1c01      	adds	r1, r0, #0
 80057cc:	9802      	ldr	r0, [sp, #8]
 80057ce:	f7fb f84f 	bl	8000870 <__aeabi_fdiv>
 80057d2:	9901      	ldr	r1, [sp, #4]
 80057d4:	1c06      	adds	r6, r0, #0
 80057d6:	1c20      	adds	r0, r4, #0
 80057d8:	f7fb fa18 	bl	8000c0c <__aeabi_fmul>
 80057dc:	9901      	ldr	r1, [sp, #4]
 80057de:	f7fa fe55 	bl	800048c <__aeabi_fadd>
 80057e2:	1c01      	adds	r1, r0, #0
 80057e4:	1c30      	adds	r0, r6, #0
 80057e6:	f7fb fb6b 	bl	8000ec0 <__aeabi_fsub>
 80057ea:	1c21      	adds	r1, r4, #0
 80057ec:	f7fb fb68 	bl	8000ec0 <__aeabi_fsub>
 80057f0:	1c01      	adds	r1, r0, #0
 80057f2:	20fe      	movs	r0, #254	@ 0xfe
 80057f4:	0580      	lsls	r0, r0, #22
 80057f6:	f7fb fb63 	bl	8000ec0 <__aeabi_fsub>
 80057fa:	05eb      	lsls	r3, r5, #23
 80057fc:	181b      	adds	r3, r3, r0
 80057fe:	15da      	asrs	r2, r3, #23
 8005800:	2a00      	cmp	r2, #0
 8005802:	dc04      	bgt.n	800580e <__ieee754_powf+0x606>
 8005804:	0029      	movs	r1, r5
 8005806:	f000 f86b 	bl	80058e0 <scalbnf>
 800580a:	1c39      	adds	r1, r7, #0
 800580c:	e56a      	b.n	80052e4 <__ieee754_powf+0xdc>
 800580e:	1c18      	adds	r0, r3, #0
 8005810:	e7fb      	b.n	800580a <__ieee754_powf+0x602>
 8005812:	20fe      	movs	r0, #254	@ 0xfe
 8005814:	0580      	lsls	r0, r0, #22
 8005816:	e50d      	b.n	8005234 <__ieee754_powf+0x2c>
 8005818:	001cc471 	.word	0x001cc471
 800581c:	005db3d6 	.word	0x005db3d6
 8005820:	ff800000 	.word	0xff800000
 8005824:	08005b88 	.word	0x08005b88
 8005828:	3e53f142 	.word	0x3e53f142
 800582c:	3e6c3255 	.word	0x3e6c3255
 8005830:	3e8ba305 	.word	0x3e8ba305
 8005834:	3eaaaaab 	.word	0x3eaaaaab
 8005838:	3edb6db7 	.word	0x3edb6db7
 800583c:	3f19999a 	.word	0x3f19999a
 8005840:	40400000 	.word	0x40400000
 8005844:	3f763800 	.word	0x3f763800
 8005848:	3f76384f 	.word	0x3f76384f
 800584c:	369dc3a0 	.word	0x369dc3a0
 8005850:	08005b78 	.word	0x08005b78
 8005854:	08005b80 	.word	0x08005b80
 8005858:	bf800000 	.word	0xbf800000
 800585c:	3338aa3c 	.word	0x3338aa3c
 8005860:	43160000 	.word	0x43160000
 8005864:	3f317200 	.word	0x3f317200
 8005868:	3f317218 	.word	0x3f317218
 800586c:	35bfbe8c 	.word	0x35bfbe8c
 8005870:	3331bb4c 	.word	0x3331bb4c
 8005874:	35ddea0e 	.word	0x35ddea0e
 8005878:	388ab355 	.word	0x388ab355
 800587c:	3b360b61 	.word	0x3b360b61
 8005880:	3e2aaaab 	.word	0x3e2aaaab
 8005884:	429e      	cmp	r6, r3
 8005886:	d100      	bne.n	800588a <__ieee754_powf+0x682>
 8005888:	e512      	b.n	80052b0 <__ieee754_powf+0xa8>
 800588a:	2302      	movs	r3, #2
 800588c:	9302      	str	r3, [sp, #8]
 800588e:	1c20      	adds	r0, r4, #0
 8005890:	9503      	str	r5, [sp, #12]
 8005892:	f000 f821 	bl	80058d8 <fabsf>
 8005896:	22fe      	movs	r2, #254	@ 0xfe
 8005898:	00a3      	lsls	r3, r4, #2
 800589a:	089b      	lsrs	r3, r3, #2
 800589c:	0592      	lsls	r2, r2, #22
 800589e:	4293      	cmp	r3, r2
 80058a0:	d002      	beq.n	80058a8 <__ieee754_powf+0x6a0>
 80058a2:	2d00      	cmp	r5, #0
 80058a4:	d000      	beq.n	80058a8 <__ieee754_powf+0x6a0>
 80058a6:	e534      	b.n	8005312 <__ieee754_powf+0x10a>
 80058a8:	2f00      	cmp	r7, #0
 80058aa:	da04      	bge.n	80058b6 <__ieee754_powf+0x6ae>
 80058ac:	1c01      	adds	r1, r0, #0
 80058ae:	20fe      	movs	r0, #254	@ 0xfe
 80058b0:	0580      	lsls	r0, r0, #22
 80058b2:	f7fa ffdd 	bl	8000870 <__aeabi_fdiv>
 80058b6:	9b04      	ldr	r3, [sp, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	db00      	blt.n	80058be <__ieee754_powf+0x6b6>
 80058bc:	e4ba      	b.n	8005234 <__ieee754_powf+0x2c>
 80058be:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <__ieee754_powf+0x6cc>)
 80058c0:	18ed      	adds	r5, r5, r3
 80058c2:	9b02      	ldr	r3, [sp, #8]
 80058c4:	431d      	orrs	r5, r3
 80058c6:	d000      	beq.n	80058ca <__ieee754_powf+0x6c2>
 80058c8:	e51b      	b.n	8005302 <__ieee754_powf+0xfa>
 80058ca:	1c01      	adds	r1, r0, #0
 80058cc:	f7fb faf8 	bl	8000ec0 <__aeabi_fsub>
 80058d0:	1c01      	adds	r1, r0, #0
 80058d2:	e4e6      	b.n	80052a2 <__ieee754_powf+0x9a>
 80058d4:	c0800000 	.word	0xc0800000

080058d8 <fabsf>:
 80058d8:	0040      	lsls	r0, r0, #1
 80058da:	0840      	lsrs	r0, r0, #1
 80058dc:	4770      	bx	lr
	...

080058e0 <scalbnf>:
 80058e0:	0043      	lsls	r3, r0, #1
 80058e2:	b570      	push	{r4, r5, r6, lr}
 80058e4:	0002      	movs	r2, r0
 80058e6:	000c      	movs	r4, r1
 80058e8:	085d      	lsrs	r5, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d006      	beq.n	80058fc <scalbnf+0x1c>
 80058ee:	21ff      	movs	r1, #255	@ 0xff
 80058f0:	05c9      	lsls	r1, r1, #23
 80058f2:	428d      	cmp	r5, r1
 80058f4:	d303      	bcc.n	80058fe <scalbnf+0x1e>
 80058f6:	1c01      	adds	r1, r0, #0
 80058f8:	f7fa fdc8 	bl	800048c <__aeabi_fadd>
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	4208      	tst	r0, r1
 8005900:	d118      	bne.n	8005934 <scalbnf+0x54>
 8005902:	2198      	movs	r1, #152	@ 0x98
 8005904:	05c9      	lsls	r1, r1, #23
 8005906:	f7fb f981 	bl	8000c0c <__aeabi_fmul>
 800590a:	4b19      	ldr	r3, [pc, #100]	@ (8005970 <scalbnf+0x90>)
 800590c:	429c      	cmp	r4, r3
 800590e:	db0d      	blt.n	800592c <scalbnf+0x4c>
 8005910:	0002      	movs	r2, r0
 8005912:	15c3      	asrs	r3, r0, #23
 8005914:	b2db      	uxtb	r3, r3
 8005916:	3b19      	subs	r3, #25
 8005918:	4916      	ldr	r1, [pc, #88]	@ (8005974 <scalbnf+0x94>)
 800591a:	428c      	cmp	r4, r1
 800591c:	dd0c      	ble.n	8005938 <scalbnf+0x58>
 800591e:	4b16      	ldr	r3, [pc, #88]	@ (8005978 <scalbnf+0x98>)
 8005920:	2800      	cmp	r0, #0
 8005922:	da00      	bge.n	8005926 <scalbnf+0x46>
 8005924:	4b15      	ldr	r3, [pc, #84]	@ (800597c <scalbnf+0x9c>)
 8005926:	4914      	ldr	r1, [pc, #80]	@ (8005978 <scalbnf+0x98>)
 8005928:	1c18      	adds	r0, r3, #0
 800592a:	e000      	b.n	800592e <scalbnf+0x4e>
 800592c:	4914      	ldr	r1, [pc, #80]	@ (8005980 <scalbnf+0xa0>)
 800592e:	f7fb f96d 	bl	8000c0c <__aeabi_fmul>
 8005932:	e7e3      	b.n	80058fc <scalbnf+0x1c>
 8005934:	0e1b      	lsrs	r3, r3, #24
 8005936:	e7ef      	b.n	8005918 <scalbnf+0x38>
 8005938:	1919      	adds	r1, r3, r4
 800593a:	29fe      	cmp	r1, #254	@ 0xfe
 800593c:	dcef      	bgt.n	800591e <scalbnf+0x3e>
 800593e:	2900      	cmp	r1, #0
 8005940:	dd04      	ble.n	800594c <scalbnf+0x6c>
 8005942:	4810      	ldr	r0, [pc, #64]	@ (8005984 <scalbnf+0xa4>)
 8005944:	05c9      	lsls	r1, r1, #23
 8005946:	4010      	ands	r0, r2
 8005948:	4308      	orrs	r0, r1
 800594a:	e7d7      	b.n	80058fc <scalbnf+0x1c>
 800594c:	000b      	movs	r3, r1
 800594e:	3316      	adds	r3, #22
 8005950:	da05      	bge.n	800595e <scalbnf+0x7e>
 8005952:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <scalbnf+0xa0>)
 8005954:	2800      	cmp	r0, #0
 8005956:	da00      	bge.n	800595a <scalbnf+0x7a>
 8005958:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <scalbnf+0xa8>)
 800595a:	4909      	ldr	r1, [pc, #36]	@ (8005980 <scalbnf+0xa0>)
 800595c:	e7e4      	b.n	8005928 <scalbnf+0x48>
 800595e:	3119      	adds	r1, #25
 8005960:	05c8      	lsls	r0, r1, #23
 8005962:	21cc      	movs	r1, #204	@ 0xcc
 8005964:	4b07      	ldr	r3, [pc, #28]	@ (8005984 <scalbnf+0xa4>)
 8005966:	0589      	lsls	r1, r1, #22
 8005968:	401a      	ands	r2, r3
 800596a:	4310      	orrs	r0, r2
 800596c:	e7df      	b.n	800592e <scalbnf+0x4e>
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	ffff3cb0 	.word	0xffff3cb0
 8005974:	0000c350 	.word	0x0000c350
 8005978:	7149f2ca 	.word	0x7149f2ca
 800597c:	f149f2ca 	.word	0xf149f2ca
 8005980:	0da24260 	.word	0x0da24260
 8005984:	807fffff 	.word	0x807fffff
 8005988:	8da24260 	.word	0x8da24260

0800598c <with_errnof>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	000d      	movs	r5, r1
 8005990:	1c04      	adds	r4, r0, #0
 8005992:	f7fe feeb 	bl	800476c <__errno>
 8005996:	6005      	str	r5, [r0, #0]
 8005998:	1c20      	adds	r0, r4, #0
 800599a:	bd70      	pop	{r4, r5, r6, pc}

0800599c <xflowf>:
 800599c:	b510      	push	{r4, lr}
 800599e:	1c0b      	adds	r3, r1, #0
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d002      	beq.n	80059aa <xflowf+0xe>
 80059a4:	2380      	movs	r3, #128	@ 0x80
 80059a6:	061b      	lsls	r3, r3, #24
 80059a8:	18cb      	adds	r3, r1, r3
 80059aa:	1c18      	adds	r0, r3, #0
 80059ac:	f7fb f92e 	bl	8000c0c <__aeabi_fmul>
 80059b0:	2122      	movs	r1, #34	@ 0x22
 80059b2:	f7ff ffeb 	bl	800598c <with_errnof>
 80059b6:	bd10      	pop	{r4, pc}

080059b8 <__math_uflowf>:
 80059b8:	2180      	movs	r1, #128	@ 0x80
 80059ba:	b510      	push	{r4, lr}
 80059bc:	0549      	lsls	r1, r1, #21
 80059be:	f7ff ffed 	bl	800599c <xflowf>
 80059c2:	bd10      	pop	{r4, pc}

080059c4 <__math_oflowf>:
 80059c4:	21e0      	movs	r1, #224	@ 0xe0
 80059c6:	b510      	push	{r4, lr}
 80059c8:	05c9      	lsls	r1, r1, #23
 80059ca:	f7ff ffe7 	bl	800599c <xflowf>
 80059ce:	bd10      	pop	{r4, pc}

080059d0 <_init>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	46c0      	nop			@ (mov r8, r8)
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr

080059dc <_fini>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	46c0      	nop			@ (mov r8, r8)
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr
