
gate_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079a4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007a64  08007a64  00008a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf4  08007bf4  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007bf4  08007bf4  0000905c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007bf4  08007bf4  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf4  08007bf4  00008bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bf8  08007bf8  00008bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007bfc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000005c  08007c58  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08007c58  000092fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147b0  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a77  00000000  00000000  0001d834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  000202b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8a  00000000  00000000  000213e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b28  00000000  00000000  0002216a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171c6  00000000  00000000  00037c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000853c5  00000000  00000000  0004ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d421d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004720  00000000  00000000  000d4260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d8980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a4c 	.word	0x08007a4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08007a4c 	.word	0x08007a4c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cfrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0008      	movs	r0, r1
 800041c:	4661      	mov	r1, ip
 800041e:	e7ff      	b.n	8000420 <__aeabi_cfcmpeq>

08000420 <__aeabi_cfcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 fbab 	bl	8000b7c <__lesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cfcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_fcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 fb33 	bl	8000a9c <__eqsf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_fcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fb9d 	bl	8000b7c <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_fcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fb93 	bl	8000b7c <__lesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_fcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_fcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fb41 	bl	8000aec <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_fcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_fcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fb37 	bl	8000aec <__gesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_fcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_fadd>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	024b      	lsls	r3, r1, #9
 8000490:	0a5a      	lsrs	r2, r3, #9
 8000492:	4694      	mov	ip, r2
 8000494:	004a      	lsls	r2, r1, #1
 8000496:	0fc9      	lsrs	r1, r1, #31
 8000498:	46ce      	mov	lr, r9
 800049a:	4647      	mov	r7, r8
 800049c:	4689      	mov	r9, r1
 800049e:	0045      	lsls	r5, r0, #1
 80004a0:	0246      	lsls	r6, r0, #9
 80004a2:	0e2d      	lsrs	r5, r5, #24
 80004a4:	0e12      	lsrs	r2, r2, #24
 80004a6:	b580      	push	{r7, lr}
 80004a8:	0999      	lsrs	r1, r3, #6
 80004aa:	0a77      	lsrs	r7, r6, #9
 80004ac:	0fc4      	lsrs	r4, r0, #31
 80004ae:	09b6      	lsrs	r6, r6, #6
 80004b0:	1aab      	subs	r3, r5, r2
 80004b2:	454c      	cmp	r4, r9
 80004b4:	d020      	beq.n	80004f8 <__aeabi_fadd+0x6c>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	dd0c      	ble.n	80004d4 <__aeabi_fadd+0x48>
 80004ba:	2a00      	cmp	r2, #0
 80004bc:	d134      	bne.n	8000528 <__aeabi_fadd+0x9c>
 80004be:	2900      	cmp	r1, #0
 80004c0:	d02a      	beq.n	8000518 <__aeabi_fadd+0x8c>
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d100      	bne.n	80004ca <__aeabi_fadd+0x3e>
 80004c8:	e08f      	b.n	80005ea <__aeabi_fadd+0x15e>
 80004ca:	2bff      	cmp	r3, #255	@ 0xff
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x44>
 80004ce:	e0cd      	b.n	800066c <__aeabi_fadd+0x1e0>
 80004d0:	0013      	movs	r3, r2
 80004d2:	e02f      	b.n	8000534 <__aeabi_fadd+0xa8>
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d060      	beq.n	800059a <__aeabi_fadd+0x10e>
 80004d8:	1b53      	subs	r3, r2, r5
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d000      	beq.n	80004e0 <__aeabi_fadd+0x54>
 80004de:	e0ee      	b.n	80006be <__aeabi_fadd+0x232>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fadd+0x5a>
 80004e4:	e13e      	b.n	8000764 <__aeabi_fadd+0x2d8>
 80004e6:	1e5c      	subs	r4, r3, #1
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x62>
 80004ec:	e16b      	b.n	80007c6 <__aeabi_fadd+0x33a>
 80004ee:	2bff      	cmp	r3, #255	@ 0xff
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x68>
 80004f2:	e0b9      	b.n	8000668 <__aeabi_fadd+0x1dc>
 80004f4:	0023      	movs	r3, r4
 80004f6:	e0e7      	b.n	80006c8 <__aeabi_fadd+0x23c>
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	dc00      	bgt.n	80004fe <__aeabi_fadd+0x72>
 80004fc:	e0a4      	b.n	8000648 <__aeabi_fadd+0x1bc>
 80004fe:	2a00      	cmp	r2, #0
 8000500:	d069      	beq.n	80005d6 <__aeabi_fadd+0x14a>
 8000502:	2dff      	cmp	r5, #255	@ 0xff
 8000504:	d100      	bne.n	8000508 <__aeabi_fadd+0x7c>
 8000506:	e0b1      	b.n	800066c <__aeabi_fadd+0x1e0>
 8000508:	2280      	movs	r2, #128	@ 0x80
 800050a:	04d2      	lsls	r2, r2, #19
 800050c:	4311      	orrs	r1, r2
 800050e:	2b1b      	cmp	r3, #27
 8000510:	dc00      	bgt.n	8000514 <__aeabi_fadd+0x88>
 8000512:	e0e9      	b.n	80006e8 <__aeabi_fadd+0x25c>
 8000514:	002b      	movs	r3, r5
 8000516:	3605      	adds	r6, #5
 8000518:	08f7      	lsrs	r7, r6, #3
 800051a:	2bff      	cmp	r3, #255	@ 0xff
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x94>
 800051e:	e0a5      	b.n	800066c <__aeabi_fadd+0x1e0>
 8000520:	027a      	lsls	r2, r7, #9
 8000522:	0a52      	lsrs	r2, r2, #9
 8000524:	b2d8      	uxtb	r0, r3
 8000526:	e030      	b.n	800058a <__aeabi_fadd+0xfe>
 8000528:	2dff      	cmp	r5, #255	@ 0xff
 800052a:	d100      	bne.n	800052e <__aeabi_fadd+0xa2>
 800052c:	e09e      	b.n	800066c <__aeabi_fadd+0x1e0>
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	04d2      	lsls	r2, r2, #19
 8000532:	4311      	orrs	r1, r2
 8000534:	2001      	movs	r0, #1
 8000536:	2b1b      	cmp	r3, #27
 8000538:	dc08      	bgt.n	800054c <__aeabi_fadd+0xc0>
 800053a:	0008      	movs	r0, r1
 800053c:	2220      	movs	r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	4099      	lsls	r1, r3
 8000544:	000b      	movs	r3, r1
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	4193      	sbcs	r3, r2
 800054a:	4318      	orrs	r0, r3
 800054c:	1a36      	subs	r6, r6, r0
 800054e:	0173      	lsls	r3, r6, #5
 8000550:	d400      	bmi.n	8000554 <__aeabi_fadd+0xc8>
 8000552:	e071      	b.n	8000638 <__aeabi_fadd+0x1ac>
 8000554:	01b6      	lsls	r6, r6, #6
 8000556:	09b7      	lsrs	r7, r6, #6
 8000558:	0038      	movs	r0, r7
 800055a:	f001 fb4b 	bl	8001bf4 <__clzsi2>
 800055e:	003b      	movs	r3, r7
 8000560:	3805      	subs	r0, #5
 8000562:	4083      	lsls	r3, r0
 8000564:	4285      	cmp	r5, r0
 8000566:	dd4d      	ble.n	8000604 <__aeabi_fadd+0x178>
 8000568:	4eb4      	ldr	r6, [pc, #720]	@ (800083c <__aeabi_fadd+0x3b0>)
 800056a:	1a2d      	subs	r5, r5, r0
 800056c:	401e      	ands	r6, r3
 800056e:	075a      	lsls	r2, r3, #29
 8000570:	d068      	beq.n	8000644 <__aeabi_fadd+0x1b8>
 8000572:	220f      	movs	r2, #15
 8000574:	4013      	ands	r3, r2
 8000576:	2b04      	cmp	r3, #4
 8000578:	d064      	beq.n	8000644 <__aeabi_fadd+0x1b8>
 800057a:	3604      	adds	r6, #4
 800057c:	0173      	lsls	r3, r6, #5
 800057e:	d561      	bpl.n	8000644 <__aeabi_fadd+0x1b8>
 8000580:	1c68      	adds	r0, r5, #1
 8000582:	2dfe      	cmp	r5, #254	@ 0xfe
 8000584:	d154      	bne.n	8000630 <__aeabi_fadd+0x1a4>
 8000586:	20ff      	movs	r0, #255	@ 0xff
 8000588:	2200      	movs	r2, #0
 800058a:	05c0      	lsls	r0, r0, #23
 800058c:	4310      	orrs	r0, r2
 800058e:	07e4      	lsls	r4, r4, #31
 8000590:	4320      	orrs	r0, r4
 8000592:	bcc0      	pop	{r6, r7}
 8000594:	46b9      	mov	r9, r7
 8000596:	46b0      	mov	r8, r6
 8000598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800059a:	22fe      	movs	r2, #254	@ 0xfe
 800059c:	4690      	mov	r8, r2
 800059e:	1c68      	adds	r0, r5, #1
 80005a0:	0002      	movs	r2, r0
 80005a2:	4640      	mov	r0, r8
 80005a4:	4210      	tst	r0, r2
 80005a6:	d16b      	bne.n	8000680 <__aeabi_fadd+0x1f4>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_fadd+0x122>
 80005ac:	e0dd      	b.n	800076a <__aeabi_fadd+0x2de>
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d100      	bne.n	80005b4 <__aeabi_fadd+0x128>
 80005b2:	e102      	b.n	80007ba <__aeabi_fadd+0x32e>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	d0b3      	beq.n	8000520 <__aeabi_fadd+0x94>
 80005b8:	2280      	movs	r2, #128	@ 0x80
 80005ba:	1a77      	subs	r7, r6, r1
 80005bc:	04d2      	lsls	r2, r2, #19
 80005be:	4217      	tst	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x138>
 80005c2:	e136      	b.n	8000832 <__aeabi_fadd+0x3a6>
 80005c4:	464c      	mov	r4, r9
 80005c6:	1b8e      	subs	r6, r1, r6
 80005c8:	d061      	beq.n	800068e <__aeabi_fadd+0x202>
 80005ca:	2001      	movs	r0, #1
 80005cc:	4216      	tst	r6, r2
 80005ce:	d130      	bne.n	8000632 <__aeabi_fadd+0x1a6>
 80005d0:	2300      	movs	r3, #0
 80005d2:	08f7      	lsrs	r7, r6, #3
 80005d4:	e7a4      	b.n	8000520 <__aeabi_fadd+0x94>
 80005d6:	2900      	cmp	r1, #0
 80005d8:	d09e      	beq.n	8000518 <__aeabi_fadd+0x8c>
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d100      	bne.n	80005e2 <__aeabi_fadd+0x156>
 80005e0:	e0ca      	b.n	8000778 <__aeabi_fadd+0x2ec>
 80005e2:	2bff      	cmp	r3, #255	@ 0xff
 80005e4:	d042      	beq.n	800066c <__aeabi_fadd+0x1e0>
 80005e6:	0013      	movs	r3, r2
 80005e8:	e791      	b.n	800050e <__aeabi_fadd+0x82>
 80005ea:	1a71      	subs	r1, r6, r1
 80005ec:	014b      	lsls	r3, r1, #5
 80005ee:	d400      	bmi.n	80005f2 <__aeabi_fadd+0x166>
 80005f0:	e0d1      	b.n	8000796 <__aeabi_fadd+0x30a>
 80005f2:	018f      	lsls	r7, r1, #6
 80005f4:	09bf      	lsrs	r7, r7, #6
 80005f6:	0038      	movs	r0, r7
 80005f8:	f001 fafc 	bl	8001bf4 <__clzsi2>
 80005fc:	003b      	movs	r3, r7
 80005fe:	3805      	subs	r0, #5
 8000600:	4083      	lsls	r3, r0
 8000602:	2501      	movs	r5, #1
 8000604:	2220      	movs	r2, #32
 8000606:	1b40      	subs	r0, r0, r5
 8000608:	3001      	adds	r0, #1
 800060a:	1a12      	subs	r2, r2, r0
 800060c:	001e      	movs	r6, r3
 800060e:	4093      	lsls	r3, r2
 8000610:	40c6      	lsrs	r6, r0
 8000612:	1e5a      	subs	r2, r3, #1
 8000614:	4193      	sbcs	r3, r2
 8000616:	431e      	orrs	r6, r3
 8000618:	d039      	beq.n	800068e <__aeabi_fadd+0x202>
 800061a:	0773      	lsls	r3, r6, #29
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x194>
 800061e:	e11b      	b.n	8000858 <__aeabi_fadd+0x3cc>
 8000620:	230f      	movs	r3, #15
 8000622:	2500      	movs	r5, #0
 8000624:	4033      	ands	r3, r6
 8000626:	2b04      	cmp	r3, #4
 8000628:	d1a7      	bne.n	800057a <__aeabi_fadd+0xee>
 800062a:	2001      	movs	r0, #1
 800062c:	0172      	lsls	r2, r6, #5
 800062e:	d57c      	bpl.n	800072a <__aeabi_fadd+0x29e>
 8000630:	b2c0      	uxtb	r0, r0
 8000632:	01b2      	lsls	r2, r6, #6
 8000634:	0a52      	lsrs	r2, r2, #9
 8000636:	e7a8      	b.n	800058a <__aeabi_fadd+0xfe>
 8000638:	0773      	lsls	r3, r6, #29
 800063a:	d003      	beq.n	8000644 <__aeabi_fadd+0x1b8>
 800063c:	230f      	movs	r3, #15
 800063e:	4033      	ands	r3, r6
 8000640:	2b04      	cmp	r3, #4
 8000642:	d19a      	bne.n	800057a <__aeabi_fadd+0xee>
 8000644:	002b      	movs	r3, r5
 8000646:	e767      	b.n	8000518 <__aeabi_fadd+0x8c>
 8000648:	2b00      	cmp	r3, #0
 800064a:	d023      	beq.n	8000694 <__aeabi_fadd+0x208>
 800064c:	1b53      	subs	r3, r2, r5
 800064e:	2d00      	cmp	r5, #0
 8000650:	d17b      	bne.n	800074a <__aeabi_fadd+0x2be>
 8000652:	2e00      	cmp	r6, #0
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x1cc>
 8000656:	e086      	b.n	8000766 <__aeabi_fadd+0x2da>
 8000658:	1e5d      	subs	r5, r3, #1
 800065a:	2b01      	cmp	r3, #1
 800065c:	d100      	bne.n	8000660 <__aeabi_fadd+0x1d4>
 800065e:	e08b      	b.n	8000778 <__aeabi_fadd+0x2ec>
 8000660:	2bff      	cmp	r3, #255	@ 0xff
 8000662:	d002      	beq.n	800066a <__aeabi_fadd+0x1de>
 8000664:	002b      	movs	r3, r5
 8000666:	e075      	b.n	8000754 <__aeabi_fadd+0x2c8>
 8000668:	464c      	mov	r4, r9
 800066a:	4667      	mov	r7, ip
 800066c:	2f00      	cmp	r7, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0x1e6>
 8000670:	e789      	b.n	8000586 <__aeabi_fadd+0xfa>
 8000672:	2280      	movs	r2, #128	@ 0x80
 8000674:	03d2      	lsls	r2, r2, #15
 8000676:	433a      	orrs	r2, r7
 8000678:	0252      	lsls	r2, r2, #9
 800067a:	20ff      	movs	r0, #255	@ 0xff
 800067c:	0a52      	lsrs	r2, r2, #9
 800067e:	e784      	b.n	800058a <__aeabi_fadd+0xfe>
 8000680:	1a77      	subs	r7, r6, r1
 8000682:	017b      	lsls	r3, r7, #5
 8000684:	d46b      	bmi.n	800075e <__aeabi_fadd+0x2d2>
 8000686:	2f00      	cmp	r7, #0
 8000688:	d000      	beq.n	800068c <__aeabi_fadd+0x200>
 800068a:	e765      	b.n	8000558 <__aeabi_fadd+0xcc>
 800068c:	2400      	movs	r4, #0
 800068e:	2000      	movs	r0, #0
 8000690:	2200      	movs	r2, #0
 8000692:	e77a      	b.n	800058a <__aeabi_fadd+0xfe>
 8000694:	22fe      	movs	r2, #254	@ 0xfe
 8000696:	1c6b      	adds	r3, r5, #1
 8000698:	421a      	tst	r2, r3
 800069a:	d149      	bne.n	8000730 <__aeabi_fadd+0x2a4>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0x216>
 80006a0:	e09f      	b.n	80007e2 <__aeabi_fadd+0x356>
 80006a2:	2e00      	cmp	r6, #0
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x21c>
 80006a6:	e0ba      	b.n	800081e <__aeabi_fadd+0x392>
 80006a8:	2900      	cmp	r1, #0
 80006aa:	d100      	bne.n	80006ae <__aeabi_fadd+0x222>
 80006ac:	e0cf      	b.n	800084e <__aeabi_fadd+0x3c2>
 80006ae:	1872      	adds	r2, r6, r1
 80006b0:	0153      	lsls	r3, r2, #5
 80006b2:	d400      	bmi.n	80006b6 <__aeabi_fadd+0x22a>
 80006b4:	e0cd      	b.n	8000852 <__aeabi_fadd+0x3c6>
 80006b6:	0192      	lsls	r2, r2, #6
 80006b8:	2001      	movs	r0, #1
 80006ba:	0a52      	lsrs	r2, r2, #9
 80006bc:	e765      	b.n	800058a <__aeabi_fadd+0xfe>
 80006be:	2aff      	cmp	r2, #255	@ 0xff
 80006c0:	d0d2      	beq.n	8000668 <__aeabi_fadd+0x1dc>
 80006c2:	2080      	movs	r0, #128	@ 0x80
 80006c4:	04c0      	lsls	r0, r0, #19
 80006c6:	4306      	orrs	r6, r0
 80006c8:	2001      	movs	r0, #1
 80006ca:	2b1b      	cmp	r3, #27
 80006cc:	dc08      	bgt.n	80006e0 <__aeabi_fadd+0x254>
 80006ce:	0030      	movs	r0, r6
 80006d0:	2420      	movs	r4, #32
 80006d2:	40d8      	lsrs	r0, r3
 80006d4:	1ae3      	subs	r3, r4, r3
 80006d6:	409e      	lsls	r6, r3
 80006d8:	0033      	movs	r3, r6
 80006da:	1e5c      	subs	r4, r3, #1
 80006dc:	41a3      	sbcs	r3, r4
 80006de:	4318      	orrs	r0, r3
 80006e0:	464c      	mov	r4, r9
 80006e2:	0015      	movs	r5, r2
 80006e4:	1a0e      	subs	r6, r1, r0
 80006e6:	e732      	b.n	800054e <__aeabi_fadd+0xc2>
 80006e8:	0008      	movs	r0, r1
 80006ea:	2220      	movs	r2, #32
 80006ec:	40d8      	lsrs	r0, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	4099      	lsls	r1, r3
 80006f2:	000b      	movs	r3, r1
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	4193      	sbcs	r3, r2
 80006f8:	4303      	orrs	r3, r0
 80006fa:	18f6      	adds	r6, r6, r3
 80006fc:	0173      	lsls	r3, r6, #5
 80006fe:	d59b      	bpl.n	8000638 <__aeabi_fadd+0x1ac>
 8000700:	3501      	adds	r5, #1
 8000702:	2dff      	cmp	r5, #255	@ 0xff
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x27c>
 8000706:	e73e      	b.n	8000586 <__aeabi_fadd+0xfa>
 8000708:	2301      	movs	r3, #1
 800070a:	494d      	ldr	r1, [pc, #308]	@ (8000840 <__aeabi_fadd+0x3b4>)
 800070c:	0872      	lsrs	r2, r6, #1
 800070e:	4033      	ands	r3, r6
 8000710:	400a      	ands	r2, r1
 8000712:	431a      	orrs	r2, r3
 8000714:	0016      	movs	r6, r2
 8000716:	0753      	lsls	r3, r2, #29
 8000718:	d004      	beq.n	8000724 <__aeabi_fadd+0x298>
 800071a:	230f      	movs	r3, #15
 800071c:	4013      	ands	r3, r2
 800071e:	2b04      	cmp	r3, #4
 8000720:	d000      	beq.n	8000724 <__aeabi_fadd+0x298>
 8000722:	e72a      	b.n	800057a <__aeabi_fadd+0xee>
 8000724:	0173      	lsls	r3, r6, #5
 8000726:	d500      	bpl.n	800072a <__aeabi_fadd+0x29e>
 8000728:	e72a      	b.n	8000580 <__aeabi_fadd+0xf4>
 800072a:	002b      	movs	r3, r5
 800072c:	08f7      	lsrs	r7, r6, #3
 800072e:	e6f7      	b.n	8000520 <__aeabi_fadd+0x94>
 8000730:	2bff      	cmp	r3, #255	@ 0xff
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x2aa>
 8000734:	e727      	b.n	8000586 <__aeabi_fadd+0xfa>
 8000736:	1871      	adds	r1, r6, r1
 8000738:	0849      	lsrs	r1, r1, #1
 800073a:	074a      	lsls	r2, r1, #29
 800073c:	d02f      	beq.n	800079e <__aeabi_fadd+0x312>
 800073e:	220f      	movs	r2, #15
 8000740:	400a      	ands	r2, r1
 8000742:	2a04      	cmp	r2, #4
 8000744:	d02b      	beq.n	800079e <__aeabi_fadd+0x312>
 8000746:	1d0e      	adds	r6, r1, #4
 8000748:	e6e6      	b.n	8000518 <__aeabi_fadd+0x8c>
 800074a:	2aff      	cmp	r2, #255	@ 0xff
 800074c:	d08d      	beq.n	800066a <__aeabi_fadd+0x1de>
 800074e:	2080      	movs	r0, #128	@ 0x80
 8000750:	04c0      	lsls	r0, r0, #19
 8000752:	4306      	orrs	r6, r0
 8000754:	2b1b      	cmp	r3, #27
 8000756:	dd24      	ble.n	80007a2 <__aeabi_fadd+0x316>
 8000758:	0013      	movs	r3, r2
 800075a:	1d4e      	adds	r6, r1, #5
 800075c:	e6dc      	b.n	8000518 <__aeabi_fadd+0x8c>
 800075e:	464c      	mov	r4, r9
 8000760:	1b8f      	subs	r7, r1, r6
 8000762:	e6f9      	b.n	8000558 <__aeabi_fadd+0xcc>
 8000764:	464c      	mov	r4, r9
 8000766:	000e      	movs	r6, r1
 8000768:	e6d6      	b.n	8000518 <__aeabi_fadd+0x8c>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d149      	bne.n	8000802 <__aeabi_fadd+0x376>
 800076e:	2900      	cmp	r1, #0
 8000770:	d068      	beq.n	8000844 <__aeabi_fadd+0x3b8>
 8000772:	4667      	mov	r7, ip
 8000774:	464c      	mov	r4, r9
 8000776:	e77c      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000778:	1870      	adds	r0, r6, r1
 800077a:	0143      	lsls	r3, r0, #5
 800077c:	d574      	bpl.n	8000868 <__aeabi_fadd+0x3dc>
 800077e:	4930      	ldr	r1, [pc, #192]	@ (8000840 <__aeabi_fadd+0x3b4>)
 8000780:	0840      	lsrs	r0, r0, #1
 8000782:	4001      	ands	r1, r0
 8000784:	0743      	lsls	r3, r0, #29
 8000786:	d009      	beq.n	800079c <__aeabi_fadd+0x310>
 8000788:	230f      	movs	r3, #15
 800078a:	4003      	ands	r3, r0
 800078c:	2b04      	cmp	r3, #4
 800078e:	d005      	beq.n	800079c <__aeabi_fadd+0x310>
 8000790:	2302      	movs	r3, #2
 8000792:	1d0e      	adds	r6, r1, #4
 8000794:	e6c0      	b.n	8000518 <__aeabi_fadd+0x8c>
 8000796:	2301      	movs	r3, #1
 8000798:	08cf      	lsrs	r7, r1, #3
 800079a:	e6c1      	b.n	8000520 <__aeabi_fadd+0x94>
 800079c:	2302      	movs	r3, #2
 800079e:	08cf      	lsrs	r7, r1, #3
 80007a0:	e6be      	b.n	8000520 <__aeabi_fadd+0x94>
 80007a2:	2520      	movs	r5, #32
 80007a4:	0030      	movs	r0, r6
 80007a6:	40d8      	lsrs	r0, r3
 80007a8:	1aeb      	subs	r3, r5, r3
 80007aa:	409e      	lsls	r6, r3
 80007ac:	0033      	movs	r3, r6
 80007ae:	1e5d      	subs	r5, r3, #1
 80007b0:	41ab      	sbcs	r3, r5
 80007b2:	4303      	orrs	r3, r0
 80007b4:	0015      	movs	r5, r2
 80007b6:	185e      	adds	r6, r3, r1
 80007b8:	e7a0      	b.n	80006fc <__aeabi_fadd+0x270>
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fadd+0x334>
 80007be:	e765      	b.n	800068c <__aeabi_fadd+0x200>
 80007c0:	464c      	mov	r4, r9
 80007c2:	4667      	mov	r7, ip
 80007c4:	e6ac      	b.n	8000520 <__aeabi_fadd+0x94>
 80007c6:	1b8f      	subs	r7, r1, r6
 80007c8:	017b      	lsls	r3, r7, #5
 80007ca:	d52e      	bpl.n	800082a <__aeabi_fadd+0x39e>
 80007cc:	01bf      	lsls	r7, r7, #6
 80007ce:	09bf      	lsrs	r7, r7, #6
 80007d0:	0038      	movs	r0, r7
 80007d2:	f001 fa0f 	bl	8001bf4 <__clzsi2>
 80007d6:	003b      	movs	r3, r7
 80007d8:	3805      	subs	r0, #5
 80007da:	4083      	lsls	r3, r0
 80007dc:	464c      	mov	r4, r9
 80007de:	3501      	adds	r5, #1
 80007e0:	e710      	b.n	8000604 <__aeabi_fadd+0x178>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x35c>
 80007e6:	e740      	b.n	800066a <__aeabi_fadd+0x1de>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x362>
 80007ec:	e741      	b.n	8000672 <__aeabi_fadd+0x1e6>
 80007ee:	2380      	movs	r3, #128	@ 0x80
 80007f0:	03db      	lsls	r3, r3, #15
 80007f2:	429f      	cmp	r7, r3
 80007f4:	d200      	bcs.n	80007f8 <__aeabi_fadd+0x36c>
 80007f6:	e73c      	b.n	8000672 <__aeabi_fadd+0x1e6>
 80007f8:	459c      	cmp	ip, r3
 80007fa:	d300      	bcc.n	80007fe <__aeabi_fadd+0x372>
 80007fc:	e739      	b.n	8000672 <__aeabi_fadd+0x1e6>
 80007fe:	4667      	mov	r7, ip
 8000800:	e737      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000802:	2900      	cmp	r1, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x37c>
 8000806:	e734      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000808:	2380      	movs	r3, #128	@ 0x80
 800080a:	03db      	lsls	r3, r3, #15
 800080c:	429f      	cmp	r7, r3
 800080e:	d200      	bcs.n	8000812 <__aeabi_fadd+0x386>
 8000810:	e72f      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000812:	459c      	cmp	ip, r3
 8000814:	d300      	bcc.n	8000818 <__aeabi_fadd+0x38c>
 8000816:	e72c      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000818:	464c      	mov	r4, r9
 800081a:	4667      	mov	r7, ip
 800081c:	e729      	b.n	8000672 <__aeabi_fadd+0x1e6>
 800081e:	2900      	cmp	r1, #0
 8000820:	d100      	bne.n	8000824 <__aeabi_fadd+0x398>
 8000822:	e734      	b.n	800068e <__aeabi_fadd+0x202>
 8000824:	2300      	movs	r3, #0
 8000826:	08cf      	lsrs	r7, r1, #3
 8000828:	e67a      	b.n	8000520 <__aeabi_fadd+0x94>
 800082a:	464c      	mov	r4, r9
 800082c:	2301      	movs	r3, #1
 800082e:	08ff      	lsrs	r7, r7, #3
 8000830:	e676      	b.n	8000520 <__aeabi_fadd+0x94>
 8000832:	2f00      	cmp	r7, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x3ac>
 8000836:	e729      	b.n	800068c <__aeabi_fadd+0x200>
 8000838:	08ff      	lsrs	r7, r7, #3
 800083a:	e671      	b.n	8000520 <__aeabi_fadd+0x94>
 800083c:	fbffffff 	.word	0xfbffffff
 8000840:	7dffffff 	.word	0x7dffffff
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	2400      	movs	r4, #0
 8000848:	20ff      	movs	r0, #255	@ 0xff
 800084a:	03d2      	lsls	r2, r2, #15
 800084c:	e69d      	b.n	800058a <__aeabi_fadd+0xfe>
 800084e:	2300      	movs	r3, #0
 8000850:	e666      	b.n	8000520 <__aeabi_fadd+0x94>
 8000852:	2300      	movs	r3, #0
 8000854:	08d7      	lsrs	r7, r2, #3
 8000856:	e663      	b.n	8000520 <__aeabi_fadd+0x94>
 8000858:	2001      	movs	r0, #1
 800085a:	0172      	lsls	r2, r6, #5
 800085c:	d500      	bpl.n	8000860 <__aeabi_fadd+0x3d4>
 800085e:	e6e7      	b.n	8000630 <__aeabi_fadd+0x1a4>
 8000860:	0031      	movs	r1, r6
 8000862:	2300      	movs	r3, #0
 8000864:	08cf      	lsrs	r7, r1, #3
 8000866:	e65b      	b.n	8000520 <__aeabi_fadd+0x94>
 8000868:	2301      	movs	r3, #1
 800086a:	08c7      	lsrs	r7, r0, #3
 800086c:	e658      	b.n	8000520 <__aeabi_fadd+0x94>
 800086e:	46c0      	nop			@ (mov r8, r8)

08000870 <__aeabi_fdiv>:
 8000870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000872:	4646      	mov	r6, r8
 8000874:	464f      	mov	r7, r9
 8000876:	46d6      	mov	lr, sl
 8000878:	0245      	lsls	r5, r0, #9
 800087a:	b5c0      	push	{r6, r7, lr}
 800087c:	0fc3      	lsrs	r3, r0, #31
 800087e:	0047      	lsls	r7, r0, #1
 8000880:	4698      	mov	r8, r3
 8000882:	1c0e      	adds	r6, r1, #0
 8000884:	0a6d      	lsrs	r5, r5, #9
 8000886:	0e3f      	lsrs	r7, r7, #24
 8000888:	d05b      	beq.n	8000942 <__aeabi_fdiv+0xd2>
 800088a:	2fff      	cmp	r7, #255	@ 0xff
 800088c:	d021      	beq.n	80008d2 <__aeabi_fdiv+0x62>
 800088e:	2380      	movs	r3, #128	@ 0x80
 8000890:	00ed      	lsls	r5, r5, #3
 8000892:	04db      	lsls	r3, r3, #19
 8000894:	431d      	orrs	r5, r3
 8000896:	2300      	movs	r3, #0
 8000898:	4699      	mov	r9, r3
 800089a:	469a      	mov	sl, r3
 800089c:	3f7f      	subs	r7, #127	@ 0x7f
 800089e:	0274      	lsls	r4, r6, #9
 80008a0:	0073      	lsls	r3, r6, #1
 80008a2:	0a64      	lsrs	r4, r4, #9
 80008a4:	0e1b      	lsrs	r3, r3, #24
 80008a6:	0ff6      	lsrs	r6, r6, #31
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d020      	beq.n	80008ee <__aeabi_fdiv+0x7e>
 80008ac:	2bff      	cmp	r3, #255	@ 0xff
 80008ae:	d043      	beq.n	8000938 <__aeabi_fdiv+0xc8>
 80008b0:	2280      	movs	r2, #128	@ 0x80
 80008b2:	2000      	movs	r0, #0
 80008b4:	00e4      	lsls	r4, r4, #3
 80008b6:	04d2      	lsls	r2, r2, #19
 80008b8:	4314      	orrs	r4, r2
 80008ba:	3b7f      	subs	r3, #127	@ 0x7f
 80008bc:	4642      	mov	r2, r8
 80008be:	1aff      	subs	r7, r7, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	4072      	eors	r2, r6
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d900      	bls.n	80008ca <__aeabi_fdiv+0x5a>
 80008c8:	e09d      	b.n	8000a06 <__aeabi_fdiv+0x196>
 80008ca:	4971      	ldr	r1, [pc, #452]	@ (8000a90 <__aeabi_fdiv+0x220>)
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	58cb      	ldr	r3, [r1, r3]
 80008d0:	469f      	mov	pc, r3
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d15a      	bne.n	800098c <__aeabi_fdiv+0x11c>
 80008d6:	2308      	movs	r3, #8
 80008d8:	4699      	mov	r9, r3
 80008da:	3b06      	subs	r3, #6
 80008dc:	0274      	lsls	r4, r6, #9
 80008de:	469a      	mov	sl, r3
 80008e0:	0073      	lsls	r3, r6, #1
 80008e2:	27ff      	movs	r7, #255	@ 0xff
 80008e4:	0a64      	lsrs	r4, r4, #9
 80008e6:	0e1b      	lsrs	r3, r3, #24
 80008e8:	0ff6      	lsrs	r6, r6, #31
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1de      	bne.n	80008ac <__aeabi_fdiv+0x3c>
 80008ee:	2c00      	cmp	r4, #0
 80008f0:	d13b      	bne.n	800096a <__aeabi_fdiv+0xfa>
 80008f2:	2301      	movs	r3, #1
 80008f4:	4642      	mov	r2, r8
 80008f6:	4649      	mov	r1, r9
 80008f8:	4072      	eors	r2, r6
 80008fa:	4319      	orrs	r1, r3
 80008fc:	290e      	cmp	r1, #14
 80008fe:	d818      	bhi.n	8000932 <__aeabi_fdiv+0xc2>
 8000900:	4864      	ldr	r0, [pc, #400]	@ (8000a94 <__aeabi_fdiv+0x224>)
 8000902:	0089      	lsls	r1, r1, #2
 8000904:	5841      	ldr	r1, [r0, r1]
 8000906:	468f      	mov	pc, r1
 8000908:	4653      	mov	r3, sl
 800090a:	2b02      	cmp	r3, #2
 800090c:	d100      	bne.n	8000910 <__aeabi_fdiv+0xa0>
 800090e:	e0b8      	b.n	8000a82 <__aeabi_fdiv+0x212>
 8000910:	2b03      	cmp	r3, #3
 8000912:	d06e      	beq.n	80009f2 <__aeabi_fdiv+0x182>
 8000914:	4642      	mov	r2, r8
 8000916:	002c      	movs	r4, r5
 8000918:	2b01      	cmp	r3, #1
 800091a:	d140      	bne.n	800099e <__aeabi_fdiv+0x12e>
 800091c:	2000      	movs	r0, #0
 800091e:	2400      	movs	r4, #0
 8000920:	05c0      	lsls	r0, r0, #23
 8000922:	4320      	orrs	r0, r4
 8000924:	07d2      	lsls	r2, r2, #31
 8000926:	4310      	orrs	r0, r2
 8000928:	bce0      	pop	{r5, r6, r7}
 800092a:	46ba      	mov	sl, r7
 800092c:	46b1      	mov	r9, r6
 800092e:	46a8      	mov	r8, r5
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000932:	20ff      	movs	r0, #255	@ 0xff
 8000934:	2400      	movs	r4, #0
 8000936:	e7f3      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d120      	bne.n	800097e <__aeabi_fdiv+0x10e>
 800093c:	2302      	movs	r3, #2
 800093e:	3fff      	subs	r7, #255	@ 0xff
 8000940:	e7d8      	b.n	80008f4 <__aeabi_fdiv+0x84>
 8000942:	2d00      	cmp	r5, #0
 8000944:	d105      	bne.n	8000952 <__aeabi_fdiv+0xe2>
 8000946:	2304      	movs	r3, #4
 8000948:	4699      	mov	r9, r3
 800094a:	3b03      	subs	r3, #3
 800094c:	2700      	movs	r7, #0
 800094e:	469a      	mov	sl, r3
 8000950:	e7a5      	b.n	800089e <__aeabi_fdiv+0x2e>
 8000952:	0028      	movs	r0, r5
 8000954:	f001 f94e 	bl	8001bf4 <__clzsi2>
 8000958:	2776      	movs	r7, #118	@ 0x76
 800095a:	1f43      	subs	r3, r0, #5
 800095c:	409d      	lsls	r5, r3
 800095e:	2300      	movs	r3, #0
 8000960:	427f      	negs	r7, r7
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	1a3f      	subs	r7, r7, r0
 8000968:	e799      	b.n	800089e <__aeabi_fdiv+0x2e>
 800096a:	0020      	movs	r0, r4
 800096c:	f001 f942 	bl	8001bf4 <__clzsi2>
 8000970:	1f43      	subs	r3, r0, #5
 8000972:	409c      	lsls	r4, r3
 8000974:	2376      	movs	r3, #118	@ 0x76
 8000976:	425b      	negs	r3, r3
 8000978:	1a1b      	subs	r3, r3, r0
 800097a:	2000      	movs	r0, #0
 800097c:	e79e      	b.n	80008bc <__aeabi_fdiv+0x4c>
 800097e:	2303      	movs	r3, #3
 8000980:	464a      	mov	r2, r9
 8000982:	431a      	orrs	r2, r3
 8000984:	4691      	mov	r9, r2
 8000986:	2003      	movs	r0, #3
 8000988:	33fc      	adds	r3, #252	@ 0xfc
 800098a:	e797      	b.n	80008bc <__aeabi_fdiv+0x4c>
 800098c:	230c      	movs	r3, #12
 800098e:	4699      	mov	r9, r3
 8000990:	3b09      	subs	r3, #9
 8000992:	27ff      	movs	r7, #255	@ 0xff
 8000994:	469a      	mov	sl, r3
 8000996:	e782      	b.n	800089e <__aeabi_fdiv+0x2e>
 8000998:	2803      	cmp	r0, #3
 800099a:	d02c      	beq.n	80009f6 <__aeabi_fdiv+0x186>
 800099c:	0032      	movs	r2, r6
 800099e:	0038      	movs	r0, r7
 80009a0:	307f      	adds	r0, #127	@ 0x7f
 80009a2:	2800      	cmp	r0, #0
 80009a4:	dd47      	ble.n	8000a36 <__aeabi_fdiv+0x1c6>
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d004      	beq.n	80009b4 <__aeabi_fdiv+0x144>
 80009aa:	230f      	movs	r3, #15
 80009ac:	4023      	ands	r3, r4
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fdiv+0x144>
 80009b2:	3404      	adds	r4, #4
 80009b4:	0123      	lsls	r3, r4, #4
 80009b6:	d503      	bpl.n	80009c0 <__aeabi_fdiv+0x150>
 80009b8:	0038      	movs	r0, r7
 80009ba:	4b37      	ldr	r3, [pc, #220]	@ (8000a98 <__aeabi_fdiv+0x228>)
 80009bc:	3080      	adds	r0, #128	@ 0x80
 80009be:	401c      	ands	r4, r3
 80009c0:	28fe      	cmp	r0, #254	@ 0xfe
 80009c2:	dcb6      	bgt.n	8000932 <__aeabi_fdiv+0xc2>
 80009c4:	01a4      	lsls	r4, r4, #6
 80009c6:	0a64      	lsrs	r4, r4, #9
 80009c8:	b2c0      	uxtb	r0, r0
 80009ca:	e7a9      	b.n	8000920 <__aeabi_fdiv+0xb0>
 80009cc:	2480      	movs	r4, #128	@ 0x80
 80009ce:	2200      	movs	r2, #0
 80009d0:	20ff      	movs	r0, #255	@ 0xff
 80009d2:	03e4      	lsls	r4, r4, #15
 80009d4:	e7a4      	b.n	8000920 <__aeabi_fdiv+0xb0>
 80009d6:	2380      	movs	r3, #128	@ 0x80
 80009d8:	03db      	lsls	r3, r3, #15
 80009da:	421d      	tst	r5, r3
 80009dc:	d001      	beq.n	80009e2 <__aeabi_fdiv+0x172>
 80009de:	421c      	tst	r4, r3
 80009e0:	d00b      	beq.n	80009fa <__aeabi_fdiv+0x18a>
 80009e2:	2480      	movs	r4, #128	@ 0x80
 80009e4:	03e4      	lsls	r4, r4, #15
 80009e6:	432c      	orrs	r4, r5
 80009e8:	0264      	lsls	r4, r4, #9
 80009ea:	4642      	mov	r2, r8
 80009ec:	20ff      	movs	r0, #255	@ 0xff
 80009ee:	0a64      	lsrs	r4, r4, #9
 80009f0:	e796      	b.n	8000920 <__aeabi_fdiv+0xb0>
 80009f2:	4646      	mov	r6, r8
 80009f4:	002c      	movs	r4, r5
 80009f6:	2380      	movs	r3, #128	@ 0x80
 80009f8:	03db      	lsls	r3, r3, #15
 80009fa:	431c      	orrs	r4, r3
 80009fc:	0264      	lsls	r4, r4, #9
 80009fe:	0032      	movs	r2, r6
 8000a00:	20ff      	movs	r0, #255	@ 0xff
 8000a02:	0a64      	lsrs	r4, r4, #9
 8000a04:	e78c      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a06:	016d      	lsls	r5, r5, #5
 8000a08:	0160      	lsls	r0, r4, #5
 8000a0a:	4285      	cmp	r5, r0
 8000a0c:	d22d      	bcs.n	8000a6a <__aeabi_fdiv+0x1fa>
 8000a0e:	231b      	movs	r3, #27
 8000a10:	2400      	movs	r4, #0
 8000a12:	3f01      	subs	r7, #1
 8000a14:	2601      	movs	r6, #1
 8000a16:	0029      	movs	r1, r5
 8000a18:	0064      	lsls	r4, r4, #1
 8000a1a:	006d      	lsls	r5, r5, #1
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	db01      	blt.n	8000a24 <__aeabi_fdiv+0x1b4>
 8000a20:	4285      	cmp	r5, r0
 8000a22:	d301      	bcc.n	8000a28 <__aeabi_fdiv+0x1b8>
 8000a24:	1a2d      	subs	r5, r5, r0
 8000a26:	4334      	orrs	r4, r6
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1f3      	bne.n	8000a16 <__aeabi_fdiv+0x1a6>
 8000a2e:	1e6b      	subs	r3, r5, #1
 8000a30:	419d      	sbcs	r5, r3
 8000a32:	432c      	orrs	r4, r5
 8000a34:	e7b3      	b.n	800099e <__aeabi_fdiv+0x12e>
 8000a36:	2301      	movs	r3, #1
 8000a38:	1a1b      	subs	r3, r3, r0
 8000a3a:	2b1b      	cmp	r3, #27
 8000a3c:	dd00      	ble.n	8000a40 <__aeabi_fdiv+0x1d0>
 8000a3e:	e76d      	b.n	800091c <__aeabi_fdiv+0xac>
 8000a40:	0021      	movs	r1, r4
 8000a42:	379e      	adds	r7, #158	@ 0x9e
 8000a44:	40d9      	lsrs	r1, r3
 8000a46:	40bc      	lsls	r4, r7
 8000a48:	000b      	movs	r3, r1
 8000a4a:	1e61      	subs	r1, r4, #1
 8000a4c:	418c      	sbcs	r4, r1
 8000a4e:	4323      	orrs	r3, r4
 8000a50:	0759      	lsls	r1, r3, #29
 8000a52:	d004      	beq.n	8000a5e <__aeabi_fdiv+0x1ee>
 8000a54:	210f      	movs	r1, #15
 8000a56:	4019      	ands	r1, r3
 8000a58:	2904      	cmp	r1, #4
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_fdiv+0x1ee>
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	0159      	lsls	r1, r3, #5
 8000a60:	d413      	bmi.n	8000a8a <__aeabi_fdiv+0x21a>
 8000a62:	019b      	lsls	r3, r3, #6
 8000a64:	2000      	movs	r0, #0
 8000a66:	0a5c      	lsrs	r4, r3, #9
 8000a68:	e75a      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a6a:	231a      	movs	r3, #26
 8000a6c:	2401      	movs	r4, #1
 8000a6e:	1a2d      	subs	r5, r5, r0
 8000a70:	e7d0      	b.n	8000a14 <__aeabi_fdiv+0x1a4>
 8000a72:	1e98      	subs	r0, r3, #2
 8000a74:	4243      	negs	r3, r0
 8000a76:	4158      	adcs	r0, r3
 8000a78:	4240      	negs	r0, r0
 8000a7a:	0032      	movs	r2, r6
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	b2c0      	uxtb	r0, r0
 8000a80:	e74e      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a82:	4642      	mov	r2, r8
 8000a84:	20ff      	movs	r0, #255	@ 0xff
 8000a86:	2400      	movs	r4, #0
 8000a88:	e74a      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	e747      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a90:	08007a6c 	.word	0x08007a6c
 8000a94:	08007aac 	.word	0x08007aac
 8000a98:	f7ffffff 	.word	0xf7ffffff

08000a9c <__eqsf2>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	0042      	lsls	r2, r0, #1
 8000aa0:	024e      	lsls	r6, r1, #9
 8000aa2:	004c      	lsls	r4, r1, #1
 8000aa4:	0245      	lsls	r5, r0, #9
 8000aa6:	0a6d      	lsrs	r5, r5, #9
 8000aa8:	0e12      	lsrs	r2, r2, #24
 8000aaa:	0fc3      	lsrs	r3, r0, #31
 8000aac:	0a76      	lsrs	r6, r6, #9
 8000aae:	0e24      	lsrs	r4, r4, #24
 8000ab0:	0fc9      	lsrs	r1, r1, #31
 8000ab2:	2aff      	cmp	r2, #255	@ 0xff
 8000ab4:	d010      	beq.n	8000ad8 <__eqsf2+0x3c>
 8000ab6:	2cff      	cmp	r4, #255	@ 0xff
 8000ab8:	d00c      	beq.n	8000ad4 <__eqsf2+0x38>
 8000aba:	2001      	movs	r0, #1
 8000abc:	42a2      	cmp	r2, r4
 8000abe:	d10a      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ac0:	42b5      	cmp	r5, r6
 8000ac2:	d108      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	d00f      	beq.n	8000ae8 <__eqsf2+0x4c>
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	d104      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000acc:	0028      	movs	r0, r5
 8000ace:	1e43      	subs	r3, r0, #1
 8000ad0:	4198      	sbcs	r0, r3
 8000ad2:	e000      	b.n	8000ad6 <__eqsf2+0x3a>
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
 8000ad8:	2001      	movs	r0, #1
 8000ada:	2cff      	cmp	r4, #255	@ 0xff
 8000adc:	d1fb      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ade:	4335      	orrs	r5, r6
 8000ae0:	d1f9      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ae2:	404b      	eors	r3, r1
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	e7f6      	b.n	8000ad6 <__eqsf2+0x3a>
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e7f4      	b.n	8000ad6 <__eqsf2+0x3a>

08000aec <__gesf2>:
 8000aec:	b530      	push	{r4, r5, lr}
 8000aee:	0042      	lsls	r2, r0, #1
 8000af0:	0244      	lsls	r4, r0, #9
 8000af2:	024d      	lsls	r5, r1, #9
 8000af4:	0fc3      	lsrs	r3, r0, #31
 8000af6:	0048      	lsls	r0, r1, #1
 8000af8:	0a64      	lsrs	r4, r4, #9
 8000afa:	0e12      	lsrs	r2, r2, #24
 8000afc:	0a6d      	lsrs	r5, r5, #9
 8000afe:	0e00      	lsrs	r0, r0, #24
 8000b00:	0fc9      	lsrs	r1, r1, #31
 8000b02:	2aff      	cmp	r2, #255	@ 0xff
 8000b04:	d018      	beq.n	8000b38 <__gesf2+0x4c>
 8000b06:	28ff      	cmp	r0, #255	@ 0xff
 8000b08:	d00a      	beq.n	8000b20 <__gesf2+0x34>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d11e      	bne.n	8000b4c <__gesf2+0x60>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d10a      	bne.n	8000b28 <__gesf2+0x3c>
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d029      	beq.n	8000b6a <__gesf2+0x7e>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d12d      	bne.n	8000b76 <__gesf2+0x8a>
 8000b1a:	0048      	lsls	r0, r1, #1
 8000b1c:	3801      	subs	r0, #1
 8000b1e:	bd30      	pop	{r4, r5, pc}
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d125      	bne.n	8000b70 <__gesf2+0x84>
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	d101      	bne.n	8000b2c <__gesf2+0x40>
 8000b28:	2c00      	cmp	r4, #0
 8000b2a:	d0f6      	beq.n	8000b1a <__gesf2+0x2e>
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	d019      	beq.n	8000b64 <__gesf2+0x78>
 8000b30:	2001      	movs	r0, #1
 8000b32:	425b      	negs	r3, r3
 8000b34:	4318      	orrs	r0, r3
 8000b36:	e7f2      	b.n	8000b1e <__gesf2+0x32>
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	d119      	bne.n	8000b70 <__gesf2+0x84>
 8000b3c:	28ff      	cmp	r0, #255	@ 0xff
 8000b3e:	d1f7      	bne.n	8000b30 <__gesf2+0x44>
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d115      	bne.n	8000b70 <__gesf2+0x84>
 8000b44:	2000      	movs	r0, #0
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d1f2      	bne.n	8000b30 <__gesf2+0x44>
 8000b4a:	e7e8      	b.n	8000b1e <__gesf2+0x32>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d0ef      	beq.n	8000b30 <__gesf2+0x44>
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d1ed      	bne.n	8000b30 <__gesf2+0x44>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	dceb      	bgt.n	8000b30 <__gesf2+0x44>
 8000b58:	db04      	blt.n	8000b64 <__gesf2+0x78>
 8000b5a:	42ac      	cmp	r4, r5
 8000b5c:	d8e8      	bhi.n	8000b30 <__gesf2+0x44>
 8000b5e:	2000      	movs	r0, #0
 8000b60:	42ac      	cmp	r4, r5
 8000b62:	d2dc      	bcs.n	8000b1e <__gesf2+0x32>
 8000b64:	0058      	lsls	r0, r3, #1
 8000b66:	3801      	subs	r0, #1
 8000b68:	e7d9      	b.n	8000b1e <__gesf2+0x32>
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d0d7      	beq.n	8000b1e <__gesf2+0x32>
 8000b6e:	e7df      	b.n	8000b30 <__gesf2+0x44>
 8000b70:	2002      	movs	r0, #2
 8000b72:	4240      	negs	r0, r0
 8000b74:	e7d3      	b.n	8000b1e <__gesf2+0x32>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d1da      	bne.n	8000b30 <__gesf2+0x44>
 8000b7a:	e7ee      	b.n	8000b5a <__gesf2+0x6e>

08000b7c <__lesf2>:
 8000b7c:	b530      	push	{r4, r5, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0244      	lsls	r4, r0, #9
 8000b82:	024d      	lsls	r5, r1, #9
 8000b84:	0fc3      	lsrs	r3, r0, #31
 8000b86:	0048      	lsls	r0, r1, #1
 8000b88:	0a64      	lsrs	r4, r4, #9
 8000b8a:	0e12      	lsrs	r2, r2, #24
 8000b8c:	0a6d      	lsrs	r5, r5, #9
 8000b8e:	0e00      	lsrs	r0, r0, #24
 8000b90:	0fc9      	lsrs	r1, r1, #31
 8000b92:	2aff      	cmp	r2, #255	@ 0xff
 8000b94:	d017      	beq.n	8000bc6 <__lesf2+0x4a>
 8000b96:	28ff      	cmp	r0, #255	@ 0xff
 8000b98:	d00a      	beq.n	8000bb0 <__lesf2+0x34>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d11b      	bne.n	8000bd6 <__lesf2+0x5a>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d10a      	bne.n	8000bb8 <__lesf2+0x3c>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d01d      	beq.n	8000be2 <__lesf2+0x66>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d12d      	bne.n	8000c06 <__lesf2+0x8a>
 8000baa:	0048      	lsls	r0, r1, #1
 8000bac:	3801      	subs	r0, #1
 8000bae:	e011      	b.n	8000bd4 <__lesf2+0x58>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d10e      	bne.n	8000bd2 <__lesf2+0x56>
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d101      	bne.n	8000bbc <__lesf2+0x40>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d0f6      	beq.n	8000baa <__lesf2+0x2e>
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d10c      	bne.n	8000bda <__lesf2+0x5e>
 8000bc0:	0058      	lsls	r0, r3, #1
 8000bc2:	3801      	subs	r0, #1
 8000bc4:	e006      	b.n	8000bd4 <__lesf2+0x58>
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	d103      	bne.n	8000bd2 <__lesf2+0x56>
 8000bca:	28ff      	cmp	r0, #255	@ 0xff
 8000bcc:	d105      	bne.n	8000bda <__lesf2+0x5e>
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d015      	beq.n	8000bfe <__lesf2+0x82>
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	bd30      	pop	{r4, r5, pc}
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d106      	bne.n	8000be8 <__lesf2+0x6c>
 8000bda:	2001      	movs	r0, #1
 8000bdc:	425b      	negs	r3, r3
 8000bde:	4318      	orrs	r0, r3
 8000be0:	e7f8      	b.n	8000bd4 <__lesf2+0x58>
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	d0f6      	beq.n	8000bd4 <__lesf2+0x58>
 8000be6:	e7f8      	b.n	8000bda <__lesf2+0x5e>
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d1f6      	bne.n	8000bda <__lesf2+0x5e>
 8000bec:	4282      	cmp	r2, r0
 8000bee:	dcf4      	bgt.n	8000bda <__lesf2+0x5e>
 8000bf0:	dbe6      	blt.n	8000bc0 <__lesf2+0x44>
 8000bf2:	42ac      	cmp	r4, r5
 8000bf4:	d8f1      	bhi.n	8000bda <__lesf2+0x5e>
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	42ac      	cmp	r4, r5
 8000bfa:	d2eb      	bcs.n	8000bd4 <__lesf2+0x58>
 8000bfc:	e7e0      	b.n	8000bc0 <__lesf2+0x44>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d1ea      	bne.n	8000bda <__lesf2+0x5e>
 8000c04:	e7e6      	b.n	8000bd4 <__lesf2+0x58>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d1e7      	bne.n	8000bda <__lesf2+0x5e>
 8000c0a:	e7f2      	b.n	8000bf2 <__lesf2+0x76>

08000c0c <__aeabi_fmul>:
 8000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0e:	464f      	mov	r7, r9
 8000c10:	4646      	mov	r6, r8
 8000c12:	46d6      	mov	lr, sl
 8000c14:	0044      	lsls	r4, r0, #1
 8000c16:	b5c0      	push	{r6, r7, lr}
 8000c18:	0246      	lsls	r6, r0, #9
 8000c1a:	1c0f      	adds	r7, r1, #0
 8000c1c:	0a76      	lsrs	r6, r6, #9
 8000c1e:	0e24      	lsrs	r4, r4, #24
 8000c20:	0fc5      	lsrs	r5, r0, #31
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_fmul+0x1c>
 8000c26:	e0da      	b.n	8000dde <__aeabi_fmul+0x1d2>
 8000c28:	2cff      	cmp	r4, #255	@ 0xff
 8000c2a:	d074      	beq.n	8000d16 <__aeabi_fmul+0x10a>
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	00f6      	lsls	r6, r6, #3
 8000c30:	04db      	lsls	r3, r3, #19
 8000c32:	431e      	orrs	r6, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	4699      	mov	r9, r3
 8000c38:	469a      	mov	sl, r3
 8000c3a:	3c7f      	subs	r4, #127	@ 0x7f
 8000c3c:	027b      	lsls	r3, r7, #9
 8000c3e:	0a5b      	lsrs	r3, r3, #9
 8000c40:	4698      	mov	r8, r3
 8000c42:	007b      	lsls	r3, r7, #1
 8000c44:	0e1b      	lsrs	r3, r3, #24
 8000c46:	0fff      	lsrs	r7, r7, #31
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d074      	beq.n	8000d36 <__aeabi_fmul+0x12a>
 8000c4c:	2bff      	cmp	r3, #255	@ 0xff
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fmul+0x46>
 8000c50:	e08e      	b.n	8000d70 <__aeabi_fmul+0x164>
 8000c52:	4642      	mov	r2, r8
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	00d2      	lsls	r2, r2, #3
 8000c58:	04c9      	lsls	r1, r1, #19
 8000c5a:	4311      	orrs	r1, r2
 8000c5c:	3b7f      	subs	r3, #127	@ 0x7f
 8000c5e:	002a      	movs	r2, r5
 8000c60:	18e4      	adds	r4, r4, r3
 8000c62:	464b      	mov	r3, r9
 8000c64:	407a      	eors	r2, r7
 8000c66:	4688      	mov	r8, r1
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	2b0a      	cmp	r3, #10
 8000c6c:	dc75      	bgt.n	8000d5a <__aeabi_fmul+0x14e>
 8000c6e:	464b      	mov	r3, r9
 8000c70:	2000      	movs	r0, #0
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	dd0f      	ble.n	8000c96 <__aeabi_fmul+0x8a>
 8000c76:	4649      	mov	r1, r9
 8000c78:	2301      	movs	r3, #1
 8000c7a:	408b      	lsls	r3, r1
 8000c7c:	21a6      	movs	r1, #166	@ 0xa6
 8000c7e:	00c9      	lsls	r1, r1, #3
 8000c80:	420b      	tst	r3, r1
 8000c82:	d169      	bne.n	8000d58 <__aeabi_fmul+0x14c>
 8000c84:	2190      	movs	r1, #144	@ 0x90
 8000c86:	0089      	lsls	r1, r1, #2
 8000c88:	420b      	tst	r3, r1
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fmul+0x82>
 8000c8c:	e100      	b.n	8000e90 <__aeabi_fmul+0x284>
 8000c8e:	2188      	movs	r1, #136	@ 0x88
 8000c90:	4219      	tst	r1, r3
 8000c92:	d000      	beq.n	8000c96 <__aeabi_fmul+0x8a>
 8000c94:	e0f5      	b.n	8000e82 <__aeabi_fmul+0x276>
 8000c96:	4641      	mov	r1, r8
 8000c98:	0409      	lsls	r1, r1, #16
 8000c9a:	0c09      	lsrs	r1, r1, #16
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	0008      	movs	r0, r1
 8000ca0:	0c35      	lsrs	r5, r6, #16
 8000ca2:	0436      	lsls	r6, r6, #16
 8000ca4:	0c1b      	lsrs	r3, r3, #16
 8000ca6:	0c36      	lsrs	r6, r6, #16
 8000ca8:	4370      	muls	r0, r6
 8000caa:	4369      	muls	r1, r5
 8000cac:	435e      	muls	r6, r3
 8000cae:	435d      	muls	r5, r3
 8000cb0:	1876      	adds	r6, r6, r1
 8000cb2:	0c03      	lsrs	r3, r0, #16
 8000cb4:	199b      	adds	r3, r3, r6
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	d903      	bls.n	8000cc2 <__aeabi_fmul+0xb6>
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	0249      	lsls	r1, r1, #9
 8000cbe:	468c      	mov	ip, r1
 8000cc0:	4465      	add	r5, ip
 8000cc2:	0400      	lsls	r0, r0, #16
 8000cc4:	0419      	lsls	r1, r3, #16
 8000cc6:	0c00      	lsrs	r0, r0, #16
 8000cc8:	1809      	adds	r1, r1, r0
 8000cca:	018e      	lsls	r6, r1, #6
 8000ccc:	1e70      	subs	r0, r6, #1
 8000cce:	4186      	sbcs	r6, r0
 8000cd0:	0c1b      	lsrs	r3, r3, #16
 8000cd2:	0e89      	lsrs	r1, r1, #26
 8000cd4:	195b      	adds	r3, r3, r5
 8000cd6:	430e      	orrs	r6, r1
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	431e      	orrs	r6, r3
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	d46c      	bmi.n	8000dba <__aeabi_fmul+0x1ae>
 8000ce0:	0023      	movs	r3, r4
 8000ce2:	337f      	adds	r3, #127	@ 0x7f
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	dc00      	bgt.n	8000cea <__aeabi_fmul+0xde>
 8000ce8:	e0b1      	b.n	8000e4e <__aeabi_fmul+0x242>
 8000cea:	0015      	movs	r5, r2
 8000cec:	0771      	lsls	r1, r6, #29
 8000cee:	d00b      	beq.n	8000d08 <__aeabi_fmul+0xfc>
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	0021      	movs	r1, r4
 8000cf4:	4030      	ands	r0, r6
 8000cf6:	2804      	cmp	r0, #4
 8000cf8:	d006      	beq.n	8000d08 <__aeabi_fmul+0xfc>
 8000cfa:	3604      	adds	r6, #4
 8000cfc:	0132      	lsls	r2, r6, #4
 8000cfe:	d503      	bpl.n	8000d08 <__aeabi_fmul+0xfc>
 8000d00:	4b6e      	ldr	r3, [pc, #440]	@ (8000ebc <__aeabi_fmul+0x2b0>)
 8000d02:	401e      	ands	r6, r3
 8000d04:	000b      	movs	r3, r1
 8000d06:	3380      	adds	r3, #128	@ 0x80
 8000d08:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d0a:	dd00      	ble.n	8000d0e <__aeabi_fmul+0x102>
 8000d0c:	e0bd      	b.n	8000e8a <__aeabi_fmul+0x27e>
 8000d0e:	01b2      	lsls	r2, r6, #6
 8000d10:	0a52      	lsrs	r2, r2, #9
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	e048      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d000      	beq.n	8000d1c <__aeabi_fmul+0x110>
 8000d1a:	e092      	b.n	8000e42 <__aeabi_fmul+0x236>
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	4699      	mov	r9, r3
 8000d20:	3b06      	subs	r3, #6
 8000d22:	469a      	mov	sl, r3
 8000d24:	027b      	lsls	r3, r7, #9
 8000d26:	0a5b      	lsrs	r3, r3, #9
 8000d28:	4698      	mov	r8, r3
 8000d2a:	007b      	lsls	r3, r7, #1
 8000d2c:	24ff      	movs	r4, #255	@ 0xff
 8000d2e:	0e1b      	lsrs	r3, r3, #24
 8000d30:	0fff      	lsrs	r7, r7, #31
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d18a      	bne.n	8000c4c <__aeabi_fmul+0x40>
 8000d36:	4642      	mov	r2, r8
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d164      	bne.n	8000e06 <__aeabi_fmul+0x1fa>
 8000d3c:	4649      	mov	r1, r9
 8000d3e:	3201      	adds	r2, #1
 8000d40:	4311      	orrs	r1, r2
 8000d42:	4689      	mov	r9, r1
 8000d44:	290a      	cmp	r1, #10
 8000d46:	dc08      	bgt.n	8000d5a <__aeabi_fmul+0x14e>
 8000d48:	407d      	eors	r5, r7
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	b2ea      	uxtb	r2, r5
 8000d4e:	2902      	cmp	r1, #2
 8000d50:	dc91      	bgt.n	8000c76 <__aeabi_fmul+0x6a>
 8000d52:	0015      	movs	r5, r2
 8000d54:	2200      	movs	r2, #0
 8000d56:	e027      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000d58:	0015      	movs	r5, r2
 8000d5a:	4653      	mov	r3, sl
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_fmul+0x156>
 8000d60:	e093      	b.n	8000e8a <__aeabi_fmul+0x27e>
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d01a      	beq.n	8000d9c <__aeabi_fmul+0x190>
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d12c      	bne.n	8000dc4 <__aeabi_fmul+0x1b8>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	e01b      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000d70:	4643      	mov	r3, r8
 8000d72:	34ff      	adds	r4, #255	@ 0xff
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d055      	beq.n	8000e24 <__aeabi_fmul+0x218>
 8000d78:	2103      	movs	r1, #3
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	0019      	movs	r1, r3
 8000d80:	2b0a      	cmp	r3, #10
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_fmul+0x17a>
 8000d84:	e092      	b.n	8000eac <__aeabi_fmul+0x2a0>
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d000      	beq.n	8000d8c <__aeabi_fmul+0x180>
 8000d8a:	e08c      	b.n	8000ea6 <__aeabi_fmul+0x29a>
 8000d8c:	2280      	movs	r2, #128	@ 0x80
 8000d8e:	03d2      	lsls	r2, r2, #15
 8000d90:	4216      	tst	r6, r2
 8000d92:	d003      	beq.n	8000d9c <__aeabi_fmul+0x190>
 8000d94:	4643      	mov	r3, r8
 8000d96:	4213      	tst	r3, r2
 8000d98:	d100      	bne.n	8000d9c <__aeabi_fmul+0x190>
 8000d9a:	e07d      	b.n	8000e98 <__aeabi_fmul+0x28c>
 8000d9c:	2280      	movs	r2, #128	@ 0x80
 8000d9e:	03d2      	lsls	r2, r2, #15
 8000da0:	4332      	orrs	r2, r6
 8000da2:	0252      	lsls	r2, r2, #9
 8000da4:	0a52      	lsrs	r2, r2, #9
 8000da6:	23ff      	movs	r3, #255	@ 0xff
 8000da8:	05d8      	lsls	r0, r3, #23
 8000daa:	07ed      	lsls	r5, r5, #31
 8000dac:	4310      	orrs	r0, r2
 8000dae:	4328      	orrs	r0, r5
 8000db0:	bce0      	pop	{r5, r6, r7}
 8000db2:	46ba      	mov	sl, r7
 8000db4:	46b1      	mov	r9, r6
 8000db6:	46a8      	mov	r8, r5
 8000db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dba:	2301      	movs	r3, #1
 8000dbc:	0015      	movs	r5, r2
 8000dbe:	0871      	lsrs	r1, r6, #1
 8000dc0:	401e      	ands	r6, r3
 8000dc2:	430e      	orrs	r6, r1
 8000dc4:	0023      	movs	r3, r4
 8000dc6:	3380      	adds	r3, #128	@ 0x80
 8000dc8:	1c61      	adds	r1, r4, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dd41      	ble.n	8000e52 <__aeabi_fmul+0x246>
 8000dce:	0772      	lsls	r2, r6, #29
 8000dd0:	d094      	beq.n	8000cfc <__aeabi_fmul+0xf0>
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	4032      	ands	r2, r6
 8000dd6:	2a04      	cmp	r2, #4
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_fmul+0x1d0>
 8000dda:	e78e      	b.n	8000cfa <__aeabi_fmul+0xee>
 8000ddc:	e78e      	b.n	8000cfc <__aeabi_fmul+0xf0>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	d105      	bne.n	8000dee <__aeabi_fmul+0x1e2>
 8000de2:	2304      	movs	r3, #4
 8000de4:	4699      	mov	r9, r3
 8000de6:	3b03      	subs	r3, #3
 8000de8:	2400      	movs	r4, #0
 8000dea:	469a      	mov	sl, r3
 8000dec:	e726      	b.n	8000c3c <__aeabi_fmul+0x30>
 8000dee:	0030      	movs	r0, r6
 8000df0:	f000 ff00 	bl	8001bf4 <__clzsi2>
 8000df4:	2476      	movs	r4, #118	@ 0x76
 8000df6:	1f43      	subs	r3, r0, #5
 8000df8:	409e      	lsls	r6, r3
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	4264      	negs	r4, r4
 8000dfe:	4699      	mov	r9, r3
 8000e00:	469a      	mov	sl, r3
 8000e02:	1a24      	subs	r4, r4, r0
 8000e04:	e71a      	b.n	8000c3c <__aeabi_fmul+0x30>
 8000e06:	4640      	mov	r0, r8
 8000e08:	f000 fef4 	bl	8001bf4 <__clzsi2>
 8000e0c:	464b      	mov	r3, r9
 8000e0e:	1a24      	subs	r4, r4, r0
 8000e10:	3c76      	subs	r4, #118	@ 0x76
 8000e12:	2b0a      	cmp	r3, #10
 8000e14:	dca1      	bgt.n	8000d5a <__aeabi_fmul+0x14e>
 8000e16:	4643      	mov	r3, r8
 8000e18:	3805      	subs	r0, #5
 8000e1a:	4083      	lsls	r3, r0
 8000e1c:	407d      	eors	r5, r7
 8000e1e:	4698      	mov	r8, r3
 8000e20:	b2ea      	uxtb	r2, r5
 8000e22:	e724      	b.n	8000c6e <__aeabi_fmul+0x62>
 8000e24:	464a      	mov	r2, r9
 8000e26:	3302      	adds	r3, #2
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	002a      	movs	r2, r5
 8000e2c:	407a      	eors	r2, r7
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	2b0a      	cmp	r3, #10
 8000e32:	dc92      	bgt.n	8000d5a <__aeabi_fmul+0x14e>
 8000e34:	4649      	mov	r1, r9
 8000e36:	0015      	movs	r5, r2
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	d026      	beq.n	8000e8a <__aeabi_fmul+0x27e>
 8000e3c:	4699      	mov	r9, r3
 8000e3e:	2002      	movs	r0, #2
 8000e40:	e719      	b.n	8000c76 <__aeabi_fmul+0x6a>
 8000e42:	230c      	movs	r3, #12
 8000e44:	4699      	mov	r9, r3
 8000e46:	3b09      	subs	r3, #9
 8000e48:	24ff      	movs	r4, #255	@ 0xff
 8000e4a:	469a      	mov	sl, r3
 8000e4c:	e6f6      	b.n	8000c3c <__aeabi_fmul+0x30>
 8000e4e:	0015      	movs	r5, r2
 8000e50:	0021      	movs	r1, r4
 8000e52:	2201      	movs	r2, #1
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b1b      	cmp	r3, #27
 8000e58:	dd00      	ble.n	8000e5c <__aeabi_fmul+0x250>
 8000e5a:	e786      	b.n	8000d6a <__aeabi_fmul+0x15e>
 8000e5c:	319e      	adds	r1, #158	@ 0x9e
 8000e5e:	0032      	movs	r2, r6
 8000e60:	408e      	lsls	r6, r1
 8000e62:	40da      	lsrs	r2, r3
 8000e64:	1e73      	subs	r3, r6, #1
 8000e66:	419e      	sbcs	r6, r3
 8000e68:	4332      	orrs	r2, r6
 8000e6a:	0753      	lsls	r3, r2, #29
 8000e6c:	d004      	beq.n	8000e78 <__aeabi_fmul+0x26c>
 8000e6e:	230f      	movs	r3, #15
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d000      	beq.n	8000e78 <__aeabi_fmul+0x26c>
 8000e76:	3204      	adds	r2, #4
 8000e78:	0153      	lsls	r3, r2, #5
 8000e7a:	d510      	bpl.n	8000e9e <__aeabi_fmul+0x292>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	e792      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000e82:	003d      	movs	r5, r7
 8000e84:	4646      	mov	r6, r8
 8000e86:	4682      	mov	sl, r0
 8000e88:	e767      	b.n	8000d5a <__aeabi_fmul+0x14e>
 8000e8a:	23ff      	movs	r3, #255	@ 0xff
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e78b      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000e90:	2280      	movs	r2, #128	@ 0x80
 8000e92:	2500      	movs	r5, #0
 8000e94:	03d2      	lsls	r2, r2, #15
 8000e96:	e786      	b.n	8000da6 <__aeabi_fmul+0x19a>
 8000e98:	003d      	movs	r5, r7
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	e783      	b.n	8000da6 <__aeabi_fmul+0x19a>
 8000e9e:	0192      	lsls	r2, r2, #6
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	0a52      	lsrs	r2, r2, #9
 8000ea4:	e780      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000ea6:	003d      	movs	r5, r7
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e777      	b.n	8000d9c <__aeabi_fmul+0x190>
 8000eac:	002a      	movs	r2, r5
 8000eae:	2301      	movs	r3, #1
 8000eb0:	407a      	eors	r2, r7
 8000eb2:	408b      	lsls	r3, r1
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	e6e9      	b.n	8000c8e <__aeabi_fmul+0x82>
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	f7ffffff 	.word	0xf7ffffff

08000ec0 <__aeabi_fsub>:
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	4647      	mov	r7, r8
 8000ec4:	46ce      	mov	lr, r9
 8000ec6:	0243      	lsls	r3, r0, #9
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	0a5f      	lsrs	r7, r3, #9
 8000ecc:	099b      	lsrs	r3, r3, #6
 8000ece:	0045      	lsls	r5, r0, #1
 8000ed0:	004a      	lsls	r2, r1, #1
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	024b      	lsls	r3, r1, #9
 8000ed6:	0fc4      	lsrs	r4, r0, #31
 8000ed8:	0fce      	lsrs	r6, r1, #31
 8000eda:	0e2d      	lsrs	r5, r5, #24
 8000edc:	0a58      	lsrs	r0, r3, #9
 8000ede:	0e12      	lsrs	r2, r2, #24
 8000ee0:	0999      	lsrs	r1, r3, #6
 8000ee2:	2aff      	cmp	r2, #255	@ 0xff
 8000ee4:	d06b      	beq.n	8000fbe <__aeabi_fsub+0xfe>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	405e      	eors	r6, r3
 8000eea:	1aab      	subs	r3, r5, r2
 8000eec:	42b4      	cmp	r4, r6
 8000eee:	d04b      	beq.n	8000f88 <__aeabi_fsub+0xc8>
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dc00      	bgt.n	8000ef6 <__aeabi_fsub+0x36>
 8000ef4:	e0ff      	b.n	80010f6 <__aeabi_fsub+0x236>
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x3c>
 8000efa:	e088      	b.n	800100e <__aeabi_fsub+0x14e>
 8000efc:	2dff      	cmp	r5, #255	@ 0xff
 8000efe:	d100      	bne.n	8000f02 <__aeabi_fsub+0x42>
 8000f00:	e0ef      	b.n	80010e2 <__aeabi_fsub+0x222>
 8000f02:	2280      	movs	r2, #128	@ 0x80
 8000f04:	04d2      	lsls	r2, r2, #19
 8000f06:	4311      	orrs	r1, r2
 8000f08:	2001      	movs	r0, #1
 8000f0a:	2b1b      	cmp	r3, #27
 8000f0c:	dc08      	bgt.n	8000f20 <__aeabi_fsub+0x60>
 8000f0e:	0008      	movs	r0, r1
 8000f10:	2220      	movs	r2, #32
 8000f12:	40d8      	lsrs	r0, r3
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4099      	lsls	r1, r3
 8000f18:	000b      	movs	r3, r1
 8000f1a:	1e5a      	subs	r2, r3, #1
 8000f1c:	4193      	sbcs	r3, r2
 8000f1e:	4318      	orrs	r0, r3
 8000f20:	4663      	mov	r3, ip
 8000f22:	1a1b      	subs	r3, r3, r0
 8000f24:	469c      	mov	ip, r3
 8000f26:	4663      	mov	r3, ip
 8000f28:	015b      	lsls	r3, r3, #5
 8000f2a:	d400      	bmi.n	8000f2e <__aeabi_fsub+0x6e>
 8000f2c:	e0cd      	b.n	80010ca <__aeabi_fsub+0x20a>
 8000f2e:	4663      	mov	r3, ip
 8000f30:	019f      	lsls	r7, r3, #6
 8000f32:	09bf      	lsrs	r7, r7, #6
 8000f34:	0038      	movs	r0, r7
 8000f36:	f000 fe5d 	bl	8001bf4 <__clzsi2>
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	3805      	subs	r0, #5
 8000f3e:	4083      	lsls	r3, r0
 8000f40:	4285      	cmp	r5, r0
 8000f42:	dc00      	bgt.n	8000f46 <__aeabi_fsub+0x86>
 8000f44:	e0a2      	b.n	800108c <__aeabi_fsub+0x1cc>
 8000f46:	4ab7      	ldr	r2, [pc, #732]	@ (8001224 <__aeabi_fsub+0x364>)
 8000f48:	1a2d      	subs	r5, r5, r0
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	4694      	mov	ip, r2
 8000f4e:	075a      	lsls	r2, r3, #29
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x94>
 8000f52:	e0c3      	b.n	80010dc <__aeabi_fsub+0x21c>
 8000f54:	220f      	movs	r2, #15
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_fsub+0x9e>
 8000f5c:	e0be      	b.n	80010dc <__aeabi_fsub+0x21c>
 8000f5e:	2304      	movs	r3, #4
 8000f60:	4698      	mov	r8, r3
 8000f62:	44c4      	add	ip, r8
 8000f64:	4663      	mov	r3, ip
 8000f66:	015b      	lsls	r3, r3, #5
 8000f68:	d400      	bmi.n	8000f6c <__aeabi_fsub+0xac>
 8000f6a:	e0b7      	b.n	80010dc <__aeabi_fsub+0x21c>
 8000f6c:	1c68      	adds	r0, r5, #1
 8000f6e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f70:	d000      	beq.n	8000f74 <__aeabi_fsub+0xb4>
 8000f72:	e0a5      	b.n	80010c0 <__aeabi_fsub+0x200>
 8000f74:	20ff      	movs	r0, #255	@ 0xff
 8000f76:	2200      	movs	r2, #0
 8000f78:	05c0      	lsls	r0, r0, #23
 8000f7a:	4310      	orrs	r0, r2
 8000f7c:	07e4      	lsls	r4, r4, #31
 8000f7e:	4320      	orrs	r0, r4
 8000f80:	bcc0      	pop	{r6, r7}
 8000f82:	46b9      	mov	r9, r7
 8000f84:	46b0      	mov	r8, r6
 8000f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dc00      	bgt.n	8000f8e <__aeabi_fsub+0xce>
 8000f8c:	e1eb      	b.n	8001366 <__aeabi_fsub+0x4a6>
 8000f8e:	2a00      	cmp	r2, #0
 8000f90:	d046      	beq.n	8001020 <__aeabi_fsub+0x160>
 8000f92:	2dff      	cmp	r5, #255	@ 0xff
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0xd8>
 8000f96:	e0a4      	b.n	80010e2 <__aeabi_fsub+0x222>
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	04d2      	lsls	r2, r2, #19
 8000f9c:	4311      	orrs	r1, r2
 8000f9e:	2b1b      	cmp	r3, #27
 8000fa0:	dc00      	bgt.n	8000fa4 <__aeabi_fsub+0xe4>
 8000fa2:	e0fb      	b.n	800119c <__aeabi_fsub+0x2dc>
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	4698      	mov	r8, r3
 8000fa8:	002b      	movs	r3, r5
 8000faa:	44c4      	add	ip, r8
 8000fac:	4662      	mov	r2, ip
 8000fae:	08d7      	lsrs	r7, r2, #3
 8000fb0:	2bff      	cmp	r3, #255	@ 0xff
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_fsub+0xf6>
 8000fb4:	e095      	b.n	80010e2 <__aeabi_fsub+0x222>
 8000fb6:	027a      	lsls	r2, r7, #9
 8000fb8:	0a52      	lsrs	r2, r2, #9
 8000fba:	b2d8      	uxtb	r0, r3
 8000fbc:	e7dc      	b.n	8000f78 <__aeabi_fsub+0xb8>
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	3bff      	subs	r3, #255	@ 0xff
 8000fc2:	4699      	mov	r9, r3
 8000fc4:	2900      	cmp	r1, #0
 8000fc6:	d118      	bne.n	8000ffa <__aeabi_fsub+0x13a>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	405e      	eors	r6, r3
 8000fcc:	42b4      	cmp	r4, r6
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_fsub+0x112>
 8000fd0:	e0ca      	b.n	8001168 <__aeabi_fsub+0x2a8>
 8000fd2:	464b      	mov	r3, r9
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d02d      	beq.n	8001034 <__aeabi_fsub+0x174>
 8000fd8:	2d00      	cmp	r5, #0
 8000fda:	d000      	beq.n	8000fde <__aeabi_fsub+0x11e>
 8000fdc:	e13c      	b.n	8001258 <__aeabi_fsub+0x398>
 8000fde:	23ff      	movs	r3, #255	@ 0xff
 8000fe0:	4664      	mov	r4, ip
 8000fe2:	2c00      	cmp	r4, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_fsub+0x128>
 8000fe6:	e15f      	b.n	80012a8 <__aeabi_fsub+0x3e8>
 8000fe8:	1e5d      	subs	r5, r3, #1
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_fsub+0x130>
 8000fee:	e174      	b.n	80012da <__aeabi_fsub+0x41a>
 8000ff0:	0034      	movs	r4, r6
 8000ff2:	2bff      	cmp	r3, #255	@ 0xff
 8000ff4:	d074      	beq.n	80010e0 <__aeabi_fsub+0x220>
 8000ff6:	002b      	movs	r3, r5
 8000ff8:	e103      	b.n	8001202 <__aeabi_fsub+0x342>
 8000ffa:	42b4      	cmp	r4, r6
 8000ffc:	d100      	bne.n	8001000 <__aeabi_fsub+0x140>
 8000ffe:	e09c      	b.n	800113a <__aeabi_fsub+0x27a>
 8001000:	2b00      	cmp	r3, #0
 8001002:	d017      	beq.n	8001034 <__aeabi_fsub+0x174>
 8001004:	2d00      	cmp	r5, #0
 8001006:	d0ea      	beq.n	8000fde <__aeabi_fsub+0x11e>
 8001008:	0007      	movs	r7, r0
 800100a:	0034      	movs	r4, r6
 800100c:	e06c      	b.n	80010e8 <__aeabi_fsub+0x228>
 800100e:	2900      	cmp	r1, #0
 8001010:	d0cc      	beq.n	8000fac <__aeabi_fsub+0xec>
 8001012:	1e5a      	subs	r2, r3, #1
 8001014:	2b01      	cmp	r3, #1
 8001016:	d02b      	beq.n	8001070 <__aeabi_fsub+0x1b0>
 8001018:	2bff      	cmp	r3, #255	@ 0xff
 800101a:	d062      	beq.n	80010e2 <__aeabi_fsub+0x222>
 800101c:	0013      	movs	r3, r2
 800101e:	e773      	b.n	8000f08 <__aeabi_fsub+0x48>
 8001020:	2900      	cmp	r1, #0
 8001022:	d0c3      	beq.n	8000fac <__aeabi_fsub+0xec>
 8001024:	1e5a      	subs	r2, r3, #1
 8001026:	2b01      	cmp	r3, #1
 8001028:	d100      	bne.n	800102c <__aeabi_fsub+0x16c>
 800102a:	e11e      	b.n	800126a <__aeabi_fsub+0x3aa>
 800102c:	2bff      	cmp	r3, #255	@ 0xff
 800102e:	d058      	beq.n	80010e2 <__aeabi_fsub+0x222>
 8001030:	0013      	movs	r3, r2
 8001032:	e7b4      	b.n	8000f9e <__aeabi_fsub+0xde>
 8001034:	22fe      	movs	r2, #254	@ 0xfe
 8001036:	1c6b      	adds	r3, r5, #1
 8001038:	421a      	tst	r2, r3
 800103a:	d10d      	bne.n	8001058 <__aeabi_fsub+0x198>
 800103c:	2d00      	cmp	r5, #0
 800103e:	d060      	beq.n	8001102 <__aeabi_fsub+0x242>
 8001040:	4663      	mov	r3, ip
 8001042:	2b00      	cmp	r3, #0
 8001044:	d000      	beq.n	8001048 <__aeabi_fsub+0x188>
 8001046:	e120      	b.n	800128a <__aeabi_fsub+0x3ca>
 8001048:	2900      	cmp	r1, #0
 800104a:	d000      	beq.n	800104e <__aeabi_fsub+0x18e>
 800104c:	e128      	b.n	80012a0 <__aeabi_fsub+0x3e0>
 800104e:	2280      	movs	r2, #128	@ 0x80
 8001050:	2400      	movs	r4, #0
 8001052:	20ff      	movs	r0, #255	@ 0xff
 8001054:	03d2      	lsls	r2, r2, #15
 8001056:	e78f      	b.n	8000f78 <__aeabi_fsub+0xb8>
 8001058:	4663      	mov	r3, ip
 800105a:	1a5f      	subs	r7, r3, r1
 800105c:	017b      	lsls	r3, r7, #5
 800105e:	d500      	bpl.n	8001062 <__aeabi_fsub+0x1a2>
 8001060:	e0fe      	b.n	8001260 <__aeabi_fsub+0x3a0>
 8001062:	2f00      	cmp	r7, #0
 8001064:	d000      	beq.n	8001068 <__aeabi_fsub+0x1a8>
 8001066:	e765      	b.n	8000f34 <__aeabi_fsub+0x74>
 8001068:	2400      	movs	r4, #0
 800106a:	2000      	movs	r0, #0
 800106c:	2200      	movs	r2, #0
 800106e:	e783      	b.n	8000f78 <__aeabi_fsub+0xb8>
 8001070:	4663      	mov	r3, ip
 8001072:	1a59      	subs	r1, r3, r1
 8001074:	014b      	lsls	r3, r1, #5
 8001076:	d400      	bmi.n	800107a <__aeabi_fsub+0x1ba>
 8001078:	e119      	b.n	80012ae <__aeabi_fsub+0x3ee>
 800107a:	018f      	lsls	r7, r1, #6
 800107c:	09bf      	lsrs	r7, r7, #6
 800107e:	0038      	movs	r0, r7
 8001080:	f000 fdb8 	bl	8001bf4 <__clzsi2>
 8001084:	003b      	movs	r3, r7
 8001086:	3805      	subs	r0, #5
 8001088:	4083      	lsls	r3, r0
 800108a:	2501      	movs	r5, #1
 800108c:	2220      	movs	r2, #32
 800108e:	1b40      	subs	r0, r0, r5
 8001090:	3001      	adds	r0, #1
 8001092:	1a12      	subs	r2, r2, r0
 8001094:	0019      	movs	r1, r3
 8001096:	4093      	lsls	r3, r2
 8001098:	40c1      	lsrs	r1, r0
 800109a:	1e5a      	subs	r2, r3, #1
 800109c:	4193      	sbcs	r3, r2
 800109e:	4319      	orrs	r1, r3
 80010a0:	468c      	mov	ip, r1
 80010a2:	1e0b      	subs	r3, r1, #0
 80010a4:	d0e1      	beq.n	800106a <__aeabi_fsub+0x1aa>
 80010a6:	075b      	lsls	r3, r3, #29
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x1ec>
 80010aa:	e152      	b.n	8001352 <__aeabi_fsub+0x492>
 80010ac:	230f      	movs	r3, #15
 80010ae:	2500      	movs	r5, #0
 80010b0:	400b      	ands	r3, r1
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d000      	beq.n	80010b8 <__aeabi_fsub+0x1f8>
 80010b6:	e752      	b.n	8000f5e <__aeabi_fsub+0x9e>
 80010b8:	2001      	movs	r0, #1
 80010ba:	014a      	lsls	r2, r1, #5
 80010bc:	d400      	bmi.n	80010c0 <__aeabi_fsub+0x200>
 80010be:	e092      	b.n	80011e6 <__aeabi_fsub+0x326>
 80010c0:	b2c0      	uxtb	r0, r0
 80010c2:	4663      	mov	r3, ip
 80010c4:	019a      	lsls	r2, r3, #6
 80010c6:	0a52      	lsrs	r2, r2, #9
 80010c8:	e756      	b.n	8000f78 <__aeabi_fsub+0xb8>
 80010ca:	4663      	mov	r3, ip
 80010cc:	075b      	lsls	r3, r3, #29
 80010ce:	d005      	beq.n	80010dc <__aeabi_fsub+0x21c>
 80010d0:	230f      	movs	r3, #15
 80010d2:	4662      	mov	r2, ip
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d000      	beq.n	80010dc <__aeabi_fsub+0x21c>
 80010da:	e740      	b.n	8000f5e <__aeabi_fsub+0x9e>
 80010dc:	002b      	movs	r3, r5
 80010de:	e765      	b.n	8000fac <__aeabi_fsub+0xec>
 80010e0:	0007      	movs	r7, r0
 80010e2:	2f00      	cmp	r7, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_fsub+0x228>
 80010e6:	e745      	b.n	8000f74 <__aeabi_fsub+0xb4>
 80010e8:	2280      	movs	r2, #128	@ 0x80
 80010ea:	03d2      	lsls	r2, r2, #15
 80010ec:	433a      	orrs	r2, r7
 80010ee:	0252      	lsls	r2, r2, #9
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	0a52      	lsrs	r2, r2, #9
 80010f4:	e740      	b.n	8000f78 <__aeabi_fsub+0xb8>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d179      	bne.n	80011ee <__aeabi_fsub+0x32e>
 80010fa:	22fe      	movs	r2, #254	@ 0xfe
 80010fc:	1c6b      	adds	r3, r5, #1
 80010fe:	421a      	tst	r2, r3
 8001100:	d1aa      	bne.n	8001058 <__aeabi_fsub+0x198>
 8001102:	4663      	mov	r3, ip
 8001104:	2b00      	cmp	r3, #0
 8001106:	d100      	bne.n	800110a <__aeabi_fsub+0x24a>
 8001108:	e0f5      	b.n	80012f6 <__aeabi_fsub+0x436>
 800110a:	2900      	cmp	r1, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_fsub+0x250>
 800110e:	e0d1      	b.n	80012b4 <__aeabi_fsub+0x3f4>
 8001110:	1a5f      	subs	r7, r3, r1
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	04db      	lsls	r3, r3, #19
 8001116:	421f      	tst	r7, r3
 8001118:	d100      	bne.n	800111c <__aeabi_fsub+0x25c>
 800111a:	e10e      	b.n	800133a <__aeabi_fsub+0x47a>
 800111c:	4662      	mov	r2, ip
 800111e:	2401      	movs	r4, #1
 8001120:	1a8a      	subs	r2, r1, r2
 8001122:	4694      	mov	ip, r2
 8001124:	2000      	movs	r0, #0
 8001126:	4034      	ands	r4, r6
 8001128:	2a00      	cmp	r2, #0
 800112a:	d100      	bne.n	800112e <__aeabi_fsub+0x26e>
 800112c:	e724      	b.n	8000f78 <__aeabi_fsub+0xb8>
 800112e:	2001      	movs	r0, #1
 8001130:	421a      	tst	r2, r3
 8001132:	d1c6      	bne.n	80010c2 <__aeabi_fsub+0x202>
 8001134:	2300      	movs	r3, #0
 8001136:	08d7      	lsrs	r7, r2, #3
 8001138:	e73d      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d017      	beq.n	800116e <__aeabi_fsub+0x2ae>
 800113e:	2d00      	cmp	r5, #0
 8001140:	d000      	beq.n	8001144 <__aeabi_fsub+0x284>
 8001142:	e0af      	b.n	80012a4 <__aeabi_fsub+0x3e4>
 8001144:	23ff      	movs	r3, #255	@ 0xff
 8001146:	4665      	mov	r5, ip
 8001148:	2d00      	cmp	r5, #0
 800114a:	d100      	bne.n	800114e <__aeabi_fsub+0x28e>
 800114c:	e0ad      	b.n	80012aa <__aeabi_fsub+0x3ea>
 800114e:	1e5e      	subs	r6, r3, #1
 8001150:	2b01      	cmp	r3, #1
 8001152:	d100      	bne.n	8001156 <__aeabi_fsub+0x296>
 8001154:	e089      	b.n	800126a <__aeabi_fsub+0x3aa>
 8001156:	2bff      	cmp	r3, #255	@ 0xff
 8001158:	d0c2      	beq.n	80010e0 <__aeabi_fsub+0x220>
 800115a:	2e1b      	cmp	r6, #27
 800115c:	dc00      	bgt.n	8001160 <__aeabi_fsub+0x2a0>
 800115e:	e0ab      	b.n	80012b8 <__aeabi_fsub+0x3f8>
 8001160:	1d4b      	adds	r3, r1, #5
 8001162:	469c      	mov	ip, r3
 8001164:	0013      	movs	r3, r2
 8001166:	e721      	b.n	8000fac <__aeabi_fsub+0xec>
 8001168:	464b      	mov	r3, r9
 800116a:	2b00      	cmp	r3, #0
 800116c:	d170      	bne.n	8001250 <__aeabi_fsub+0x390>
 800116e:	22fe      	movs	r2, #254	@ 0xfe
 8001170:	1c6b      	adds	r3, r5, #1
 8001172:	421a      	tst	r2, r3
 8001174:	d15e      	bne.n	8001234 <__aeabi_fsub+0x374>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d000      	beq.n	800117c <__aeabi_fsub+0x2bc>
 800117a:	e0c3      	b.n	8001304 <__aeabi_fsub+0x444>
 800117c:	4663      	mov	r3, ip
 800117e:	2b00      	cmp	r3, #0
 8001180:	d100      	bne.n	8001184 <__aeabi_fsub+0x2c4>
 8001182:	e0d0      	b.n	8001326 <__aeabi_fsub+0x466>
 8001184:	2900      	cmp	r1, #0
 8001186:	d100      	bne.n	800118a <__aeabi_fsub+0x2ca>
 8001188:	e094      	b.n	80012b4 <__aeabi_fsub+0x3f4>
 800118a:	000a      	movs	r2, r1
 800118c:	4462      	add	r2, ip
 800118e:	0153      	lsls	r3, r2, #5
 8001190:	d400      	bmi.n	8001194 <__aeabi_fsub+0x2d4>
 8001192:	e0d8      	b.n	8001346 <__aeabi_fsub+0x486>
 8001194:	0192      	lsls	r2, r2, #6
 8001196:	2001      	movs	r0, #1
 8001198:	0a52      	lsrs	r2, r2, #9
 800119a:	e6ed      	b.n	8000f78 <__aeabi_fsub+0xb8>
 800119c:	0008      	movs	r0, r1
 800119e:	2220      	movs	r2, #32
 80011a0:	40d8      	lsrs	r0, r3
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	4099      	lsls	r1, r3
 80011a6:	000b      	movs	r3, r1
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	4193      	sbcs	r3, r2
 80011ac:	4303      	orrs	r3, r0
 80011ae:	449c      	add	ip, r3
 80011b0:	4663      	mov	r3, ip
 80011b2:	015b      	lsls	r3, r3, #5
 80011b4:	d589      	bpl.n	80010ca <__aeabi_fsub+0x20a>
 80011b6:	3501      	adds	r5, #1
 80011b8:	2dff      	cmp	r5, #255	@ 0xff
 80011ba:	d100      	bne.n	80011be <__aeabi_fsub+0x2fe>
 80011bc:	e6da      	b.n	8000f74 <__aeabi_fsub+0xb4>
 80011be:	4662      	mov	r2, ip
 80011c0:	2301      	movs	r3, #1
 80011c2:	4919      	ldr	r1, [pc, #100]	@ (8001228 <__aeabi_fsub+0x368>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	0852      	lsrs	r2, r2, #1
 80011c8:	400a      	ands	r2, r1
 80011ca:	431a      	orrs	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	4694      	mov	ip, r2
 80011d0:	075b      	lsls	r3, r3, #29
 80011d2:	d004      	beq.n	80011de <__aeabi_fsub+0x31e>
 80011d4:	230f      	movs	r3, #15
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d000      	beq.n	80011de <__aeabi_fsub+0x31e>
 80011dc:	e6bf      	b.n	8000f5e <__aeabi_fsub+0x9e>
 80011de:	4663      	mov	r3, ip
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	d500      	bpl.n	80011e6 <__aeabi_fsub+0x326>
 80011e4:	e6c2      	b.n	8000f6c <__aeabi_fsub+0xac>
 80011e6:	4663      	mov	r3, ip
 80011e8:	08df      	lsrs	r7, r3, #3
 80011ea:	002b      	movs	r3, r5
 80011ec:	e6e3      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 80011ee:	1b53      	subs	r3, r2, r5
 80011f0:	2d00      	cmp	r5, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_fsub+0x336>
 80011f4:	e6f4      	b.n	8000fe0 <__aeabi_fsub+0x120>
 80011f6:	2080      	movs	r0, #128	@ 0x80
 80011f8:	4664      	mov	r4, ip
 80011fa:	04c0      	lsls	r0, r0, #19
 80011fc:	4304      	orrs	r4, r0
 80011fe:	46a4      	mov	ip, r4
 8001200:	0034      	movs	r4, r6
 8001202:	2001      	movs	r0, #1
 8001204:	2b1b      	cmp	r3, #27
 8001206:	dc09      	bgt.n	800121c <__aeabi_fsub+0x35c>
 8001208:	2520      	movs	r5, #32
 800120a:	4660      	mov	r0, ip
 800120c:	40d8      	lsrs	r0, r3
 800120e:	1aeb      	subs	r3, r5, r3
 8001210:	4665      	mov	r5, ip
 8001212:	409d      	lsls	r5, r3
 8001214:	002b      	movs	r3, r5
 8001216:	1e5d      	subs	r5, r3, #1
 8001218:	41ab      	sbcs	r3, r5
 800121a:	4318      	orrs	r0, r3
 800121c:	1a0b      	subs	r3, r1, r0
 800121e:	469c      	mov	ip, r3
 8001220:	0015      	movs	r5, r2
 8001222:	e680      	b.n	8000f26 <__aeabi_fsub+0x66>
 8001224:	fbffffff 	.word	0xfbffffff
 8001228:	7dffffff 	.word	0x7dffffff
 800122c:	22fe      	movs	r2, #254	@ 0xfe
 800122e:	1c6b      	adds	r3, r5, #1
 8001230:	4213      	tst	r3, r2
 8001232:	d0a3      	beq.n	800117c <__aeabi_fsub+0x2bc>
 8001234:	2bff      	cmp	r3, #255	@ 0xff
 8001236:	d100      	bne.n	800123a <__aeabi_fsub+0x37a>
 8001238:	e69c      	b.n	8000f74 <__aeabi_fsub+0xb4>
 800123a:	4461      	add	r1, ip
 800123c:	0849      	lsrs	r1, r1, #1
 800123e:	074a      	lsls	r2, r1, #29
 8001240:	d049      	beq.n	80012d6 <__aeabi_fsub+0x416>
 8001242:	220f      	movs	r2, #15
 8001244:	400a      	ands	r2, r1
 8001246:	2a04      	cmp	r2, #4
 8001248:	d045      	beq.n	80012d6 <__aeabi_fsub+0x416>
 800124a:	1d0a      	adds	r2, r1, #4
 800124c:	4694      	mov	ip, r2
 800124e:	e6ad      	b.n	8000fac <__aeabi_fsub+0xec>
 8001250:	2d00      	cmp	r5, #0
 8001252:	d100      	bne.n	8001256 <__aeabi_fsub+0x396>
 8001254:	e776      	b.n	8001144 <__aeabi_fsub+0x284>
 8001256:	e68d      	b.n	8000f74 <__aeabi_fsub+0xb4>
 8001258:	0034      	movs	r4, r6
 800125a:	20ff      	movs	r0, #255	@ 0xff
 800125c:	2200      	movs	r2, #0
 800125e:	e68b      	b.n	8000f78 <__aeabi_fsub+0xb8>
 8001260:	4663      	mov	r3, ip
 8001262:	2401      	movs	r4, #1
 8001264:	1acf      	subs	r7, r1, r3
 8001266:	4034      	ands	r4, r6
 8001268:	e664      	b.n	8000f34 <__aeabi_fsub+0x74>
 800126a:	4461      	add	r1, ip
 800126c:	014b      	lsls	r3, r1, #5
 800126e:	d56d      	bpl.n	800134c <__aeabi_fsub+0x48c>
 8001270:	0848      	lsrs	r0, r1, #1
 8001272:	4944      	ldr	r1, [pc, #272]	@ (8001384 <__aeabi_fsub+0x4c4>)
 8001274:	4001      	ands	r1, r0
 8001276:	0743      	lsls	r3, r0, #29
 8001278:	d02c      	beq.n	80012d4 <__aeabi_fsub+0x414>
 800127a:	230f      	movs	r3, #15
 800127c:	4003      	ands	r3, r0
 800127e:	2b04      	cmp	r3, #4
 8001280:	d028      	beq.n	80012d4 <__aeabi_fsub+0x414>
 8001282:	1d0b      	adds	r3, r1, #4
 8001284:	469c      	mov	ip, r3
 8001286:	2302      	movs	r3, #2
 8001288:	e690      	b.n	8000fac <__aeabi_fsub+0xec>
 800128a:	2900      	cmp	r1, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_fsub+0x3d0>
 800128e:	e72b      	b.n	80010e8 <__aeabi_fsub+0x228>
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	03db      	lsls	r3, r3, #15
 8001294:	429f      	cmp	r7, r3
 8001296:	d200      	bcs.n	800129a <__aeabi_fsub+0x3da>
 8001298:	e726      	b.n	80010e8 <__aeabi_fsub+0x228>
 800129a:	4298      	cmp	r0, r3
 800129c:	d300      	bcc.n	80012a0 <__aeabi_fsub+0x3e0>
 800129e:	e723      	b.n	80010e8 <__aeabi_fsub+0x228>
 80012a0:	2401      	movs	r4, #1
 80012a2:	4034      	ands	r4, r6
 80012a4:	0007      	movs	r7, r0
 80012a6:	e71f      	b.n	80010e8 <__aeabi_fsub+0x228>
 80012a8:	0034      	movs	r4, r6
 80012aa:	468c      	mov	ip, r1
 80012ac:	e67e      	b.n	8000fac <__aeabi_fsub+0xec>
 80012ae:	2301      	movs	r3, #1
 80012b0:	08cf      	lsrs	r7, r1, #3
 80012b2:	e680      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 80012b4:	2300      	movs	r3, #0
 80012b6:	e67e      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 80012b8:	2020      	movs	r0, #32
 80012ba:	4665      	mov	r5, ip
 80012bc:	1b80      	subs	r0, r0, r6
 80012be:	4085      	lsls	r5, r0
 80012c0:	4663      	mov	r3, ip
 80012c2:	0028      	movs	r0, r5
 80012c4:	40f3      	lsrs	r3, r6
 80012c6:	1e45      	subs	r5, r0, #1
 80012c8:	41a8      	sbcs	r0, r5
 80012ca:	4303      	orrs	r3, r0
 80012cc:	469c      	mov	ip, r3
 80012ce:	0015      	movs	r5, r2
 80012d0:	448c      	add	ip, r1
 80012d2:	e76d      	b.n	80011b0 <__aeabi_fsub+0x2f0>
 80012d4:	2302      	movs	r3, #2
 80012d6:	08cf      	lsrs	r7, r1, #3
 80012d8:	e66d      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 80012da:	1b0f      	subs	r7, r1, r4
 80012dc:	017b      	lsls	r3, r7, #5
 80012de:	d528      	bpl.n	8001332 <__aeabi_fsub+0x472>
 80012e0:	01bf      	lsls	r7, r7, #6
 80012e2:	09bf      	lsrs	r7, r7, #6
 80012e4:	0038      	movs	r0, r7
 80012e6:	f000 fc85 	bl	8001bf4 <__clzsi2>
 80012ea:	003b      	movs	r3, r7
 80012ec:	3805      	subs	r0, #5
 80012ee:	4083      	lsls	r3, r0
 80012f0:	0034      	movs	r4, r6
 80012f2:	2501      	movs	r5, #1
 80012f4:	e6ca      	b.n	800108c <__aeabi_fsub+0x1cc>
 80012f6:	2900      	cmp	r1, #0
 80012f8:	d100      	bne.n	80012fc <__aeabi_fsub+0x43c>
 80012fa:	e6b5      	b.n	8001068 <__aeabi_fsub+0x1a8>
 80012fc:	2401      	movs	r4, #1
 80012fe:	0007      	movs	r7, r0
 8001300:	4034      	ands	r4, r6
 8001302:	e658      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001304:	4663      	mov	r3, ip
 8001306:	2b00      	cmp	r3, #0
 8001308:	d100      	bne.n	800130c <__aeabi_fsub+0x44c>
 800130a:	e6e9      	b.n	80010e0 <__aeabi_fsub+0x220>
 800130c:	2900      	cmp	r1, #0
 800130e:	d100      	bne.n	8001312 <__aeabi_fsub+0x452>
 8001310:	e6ea      	b.n	80010e8 <__aeabi_fsub+0x228>
 8001312:	2380      	movs	r3, #128	@ 0x80
 8001314:	03db      	lsls	r3, r3, #15
 8001316:	429f      	cmp	r7, r3
 8001318:	d200      	bcs.n	800131c <__aeabi_fsub+0x45c>
 800131a:	e6e5      	b.n	80010e8 <__aeabi_fsub+0x228>
 800131c:	4298      	cmp	r0, r3
 800131e:	d300      	bcc.n	8001322 <__aeabi_fsub+0x462>
 8001320:	e6e2      	b.n	80010e8 <__aeabi_fsub+0x228>
 8001322:	0007      	movs	r7, r0
 8001324:	e6e0      	b.n	80010e8 <__aeabi_fsub+0x228>
 8001326:	2900      	cmp	r1, #0
 8001328:	d100      	bne.n	800132c <__aeabi_fsub+0x46c>
 800132a:	e69e      	b.n	800106a <__aeabi_fsub+0x1aa>
 800132c:	2300      	movs	r3, #0
 800132e:	08cf      	lsrs	r7, r1, #3
 8001330:	e641      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001332:	0034      	movs	r4, r6
 8001334:	2301      	movs	r3, #1
 8001336:	08ff      	lsrs	r7, r7, #3
 8001338:	e63d      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 800133a:	2f00      	cmp	r7, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_fsub+0x480>
 800133e:	e693      	b.n	8001068 <__aeabi_fsub+0x1a8>
 8001340:	2300      	movs	r3, #0
 8001342:	08ff      	lsrs	r7, r7, #3
 8001344:	e637      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001346:	2300      	movs	r3, #0
 8001348:	08d7      	lsrs	r7, r2, #3
 800134a:	e634      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 800134c:	2301      	movs	r3, #1
 800134e:	08cf      	lsrs	r7, r1, #3
 8001350:	e631      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001352:	2280      	movs	r2, #128	@ 0x80
 8001354:	000b      	movs	r3, r1
 8001356:	04d2      	lsls	r2, r2, #19
 8001358:	2001      	movs	r0, #1
 800135a:	4013      	ands	r3, r2
 800135c:	4211      	tst	r1, r2
 800135e:	d000      	beq.n	8001362 <__aeabi_fsub+0x4a2>
 8001360:	e6ae      	b.n	80010c0 <__aeabi_fsub+0x200>
 8001362:	08cf      	lsrs	r7, r1, #3
 8001364:	e627      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <__aeabi_fsub+0x4ac>
 800136a:	e75f      	b.n	800122c <__aeabi_fsub+0x36c>
 800136c:	1b56      	subs	r6, r2, r5
 800136e:	2d00      	cmp	r5, #0
 8001370:	d101      	bne.n	8001376 <__aeabi_fsub+0x4b6>
 8001372:	0033      	movs	r3, r6
 8001374:	e6e7      	b.n	8001146 <__aeabi_fsub+0x286>
 8001376:	2380      	movs	r3, #128	@ 0x80
 8001378:	4660      	mov	r0, ip
 800137a:	04db      	lsls	r3, r3, #19
 800137c:	4318      	orrs	r0, r3
 800137e:	4684      	mov	ip, r0
 8001380:	e6eb      	b.n	800115a <__aeabi_fsub+0x29a>
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	7dffffff 	.word	0x7dffffff

08001388 <__aeabi_fcmpun>:
 8001388:	0243      	lsls	r3, r0, #9
 800138a:	024a      	lsls	r2, r1, #9
 800138c:	0040      	lsls	r0, r0, #1
 800138e:	0049      	lsls	r1, r1, #1
 8001390:	0a5b      	lsrs	r3, r3, #9
 8001392:	0a52      	lsrs	r2, r2, #9
 8001394:	0e09      	lsrs	r1, r1, #24
 8001396:	0e00      	lsrs	r0, r0, #24
 8001398:	28ff      	cmp	r0, #255	@ 0xff
 800139a:	d006      	beq.n	80013aa <__aeabi_fcmpun+0x22>
 800139c:	2000      	movs	r0, #0
 800139e:	29ff      	cmp	r1, #255	@ 0xff
 80013a0:	d102      	bne.n	80013a8 <__aeabi_fcmpun+0x20>
 80013a2:	1e53      	subs	r3, r2, #1
 80013a4:	419a      	sbcs	r2, r3
 80013a6:	0010      	movs	r0, r2
 80013a8:	4770      	bx	lr
 80013aa:	38fe      	subs	r0, #254	@ 0xfe
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1fb      	bne.n	80013a8 <__aeabi_fcmpun+0x20>
 80013b0:	e7f4      	b.n	800139c <__aeabi_fcmpun+0x14>
 80013b2:	46c0      	nop			@ (mov r8, r8)

080013b4 <__aeabi_f2iz>:
 80013b4:	0241      	lsls	r1, r0, #9
 80013b6:	0042      	lsls	r2, r0, #1
 80013b8:	0fc3      	lsrs	r3, r0, #31
 80013ba:	0a49      	lsrs	r1, r1, #9
 80013bc:	2000      	movs	r0, #0
 80013be:	0e12      	lsrs	r2, r2, #24
 80013c0:	2a7e      	cmp	r2, #126	@ 0x7e
 80013c2:	dd03      	ble.n	80013cc <__aeabi_f2iz+0x18>
 80013c4:	2a9d      	cmp	r2, #157	@ 0x9d
 80013c6:	dd02      	ble.n	80013ce <__aeabi_f2iz+0x1a>
 80013c8:	4a09      	ldr	r2, [pc, #36]	@ (80013f0 <__aeabi_f2iz+0x3c>)
 80013ca:	1898      	adds	r0, r3, r2
 80013cc:	4770      	bx	lr
 80013ce:	2080      	movs	r0, #128	@ 0x80
 80013d0:	0400      	lsls	r0, r0, #16
 80013d2:	4301      	orrs	r1, r0
 80013d4:	2a95      	cmp	r2, #149	@ 0x95
 80013d6:	dc07      	bgt.n	80013e8 <__aeabi_f2iz+0x34>
 80013d8:	2096      	movs	r0, #150	@ 0x96
 80013da:	1a82      	subs	r2, r0, r2
 80013dc:	40d1      	lsrs	r1, r2
 80013de:	4248      	negs	r0, r1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f3      	bne.n	80013cc <__aeabi_f2iz+0x18>
 80013e4:	0008      	movs	r0, r1
 80013e6:	e7f1      	b.n	80013cc <__aeabi_f2iz+0x18>
 80013e8:	3a96      	subs	r2, #150	@ 0x96
 80013ea:	4091      	lsls	r1, r2
 80013ec:	e7f7      	b.n	80013de <__aeabi_f2iz+0x2a>
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	7fffffff 	.word	0x7fffffff

080013f4 <__aeabi_i2f>:
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d012      	beq.n	8001420 <__aeabi_i2f+0x2c>
 80013fa:	17c3      	asrs	r3, r0, #31
 80013fc:	18c5      	adds	r5, r0, r3
 80013fe:	405d      	eors	r5, r3
 8001400:	0fc4      	lsrs	r4, r0, #31
 8001402:	0028      	movs	r0, r5
 8001404:	f000 fbf6 	bl	8001bf4 <__clzsi2>
 8001408:	239e      	movs	r3, #158	@ 0x9e
 800140a:	1a1b      	subs	r3, r3, r0
 800140c:	2b96      	cmp	r3, #150	@ 0x96
 800140e:	dc0f      	bgt.n	8001430 <__aeabi_i2f+0x3c>
 8001410:	2808      	cmp	r0, #8
 8001412:	d038      	beq.n	8001486 <__aeabi_i2f+0x92>
 8001414:	3808      	subs	r0, #8
 8001416:	4085      	lsls	r5, r0
 8001418:	026d      	lsls	r5, r5, #9
 800141a:	0a6d      	lsrs	r5, r5, #9
 800141c:	b2d8      	uxtb	r0, r3
 800141e:	e002      	b.n	8001426 <__aeabi_i2f+0x32>
 8001420:	2400      	movs	r4, #0
 8001422:	2000      	movs	r0, #0
 8001424:	2500      	movs	r5, #0
 8001426:	05c0      	lsls	r0, r0, #23
 8001428:	4328      	orrs	r0, r5
 800142a:	07e4      	lsls	r4, r4, #31
 800142c:	4320      	orrs	r0, r4
 800142e:	bd70      	pop	{r4, r5, r6, pc}
 8001430:	2b99      	cmp	r3, #153	@ 0x99
 8001432:	dc14      	bgt.n	800145e <__aeabi_i2f+0x6a>
 8001434:	1f42      	subs	r2, r0, #5
 8001436:	4095      	lsls	r5, r2
 8001438:	002a      	movs	r2, r5
 800143a:	4915      	ldr	r1, [pc, #84]	@ (8001490 <__aeabi_i2f+0x9c>)
 800143c:	4011      	ands	r1, r2
 800143e:	0755      	lsls	r5, r2, #29
 8001440:	d01c      	beq.n	800147c <__aeabi_i2f+0x88>
 8001442:	250f      	movs	r5, #15
 8001444:	402a      	ands	r2, r5
 8001446:	2a04      	cmp	r2, #4
 8001448:	d018      	beq.n	800147c <__aeabi_i2f+0x88>
 800144a:	3104      	adds	r1, #4
 800144c:	08ca      	lsrs	r2, r1, #3
 800144e:	0149      	lsls	r1, r1, #5
 8001450:	d515      	bpl.n	800147e <__aeabi_i2f+0x8a>
 8001452:	239f      	movs	r3, #159	@ 0x9f
 8001454:	0252      	lsls	r2, r2, #9
 8001456:	1a18      	subs	r0, r3, r0
 8001458:	0a55      	lsrs	r5, r2, #9
 800145a:	b2c0      	uxtb	r0, r0
 800145c:	e7e3      	b.n	8001426 <__aeabi_i2f+0x32>
 800145e:	2205      	movs	r2, #5
 8001460:	0029      	movs	r1, r5
 8001462:	1a12      	subs	r2, r2, r0
 8001464:	40d1      	lsrs	r1, r2
 8001466:	0002      	movs	r2, r0
 8001468:	321b      	adds	r2, #27
 800146a:	4095      	lsls	r5, r2
 800146c:	002a      	movs	r2, r5
 800146e:	1e55      	subs	r5, r2, #1
 8001470:	41aa      	sbcs	r2, r5
 8001472:	430a      	orrs	r2, r1
 8001474:	4906      	ldr	r1, [pc, #24]	@ (8001490 <__aeabi_i2f+0x9c>)
 8001476:	4011      	ands	r1, r2
 8001478:	0755      	lsls	r5, r2, #29
 800147a:	d1e2      	bne.n	8001442 <__aeabi_i2f+0x4e>
 800147c:	08ca      	lsrs	r2, r1, #3
 800147e:	0252      	lsls	r2, r2, #9
 8001480:	0a55      	lsrs	r5, r2, #9
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	e7cf      	b.n	8001426 <__aeabi_i2f+0x32>
 8001486:	026d      	lsls	r5, r5, #9
 8001488:	0a6d      	lsrs	r5, r5, #9
 800148a:	308e      	adds	r0, #142	@ 0x8e
 800148c:	e7cb      	b.n	8001426 <__aeabi_i2f+0x32>
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	fbffffff 	.word	0xfbffffff

08001494 <__aeabi_dmul>:
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	4657      	mov	r7, sl
 8001498:	464e      	mov	r6, r9
 800149a:	46de      	mov	lr, fp
 800149c:	4645      	mov	r5, r8
 800149e:	b5e0      	push	{r5, r6, r7, lr}
 80014a0:	001f      	movs	r7, r3
 80014a2:	030b      	lsls	r3, r1, #12
 80014a4:	0b1b      	lsrs	r3, r3, #12
 80014a6:	0016      	movs	r6, r2
 80014a8:	469a      	mov	sl, r3
 80014aa:	0fca      	lsrs	r2, r1, #31
 80014ac:	004b      	lsls	r3, r1, #1
 80014ae:	0004      	movs	r4, r0
 80014b0:	4691      	mov	r9, r2
 80014b2:	b085      	sub	sp, #20
 80014b4:	0d5b      	lsrs	r3, r3, #21
 80014b6:	d100      	bne.n	80014ba <__aeabi_dmul+0x26>
 80014b8:	e1cf      	b.n	800185a <__aeabi_dmul+0x3c6>
 80014ba:	4acd      	ldr	r2, [pc, #820]	@ (80017f0 <__aeabi_dmul+0x35c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d055      	beq.n	800156c <__aeabi_dmul+0xd8>
 80014c0:	4651      	mov	r1, sl
 80014c2:	0f42      	lsrs	r2, r0, #29
 80014c4:	00c9      	lsls	r1, r1, #3
 80014c6:	430a      	orrs	r2, r1
 80014c8:	2180      	movs	r1, #128	@ 0x80
 80014ca:	0409      	lsls	r1, r1, #16
 80014cc:	4311      	orrs	r1, r2
 80014ce:	00c2      	lsls	r2, r0, #3
 80014d0:	4690      	mov	r8, r2
 80014d2:	4ac8      	ldr	r2, [pc, #800]	@ (80017f4 <__aeabi_dmul+0x360>)
 80014d4:	468a      	mov	sl, r1
 80014d6:	4693      	mov	fp, r2
 80014d8:	449b      	add	fp, r3
 80014da:	2300      	movs	r3, #0
 80014dc:	2500      	movs	r5, #0
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	033c      	lsls	r4, r7, #12
 80014e2:	007b      	lsls	r3, r7, #1
 80014e4:	0ffa      	lsrs	r2, r7, #31
 80014e6:	9601      	str	r6, [sp, #4]
 80014e8:	0b24      	lsrs	r4, r4, #12
 80014ea:	0d5b      	lsrs	r3, r3, #21
 80014ec:	9200      	str	r2, [sp, #0]
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dmul+0x5e>
 80014f0:	e188      	b.n	8001804 <__aeabi_dmul+0x370>
 80014f2:	4abf      	ldr	r2, [pc, #764]	@ (80017f0 <__aeabi_dmul+0x35c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d100      	bne.n	80014fa <__aeabi_dmul+0x66>
 80014f8:	e092      	b.n	8001620 <__aeabi_dmul+0x18c>
 80014fa:	4abe      	ldr	r2, [pc, #760]	@ (80017f4 <__aeabi_dmul+0x360>)
 80014fc:	4694      	mov	ip, r2
 80014fe:	4463      	add	r3, ip
 8001500:	449b      	add	fp, r3
 8001502:	2d0a      	cmp	r5, #10
 8001504:	dc42      	bgt.n	800158c <__aeabi_dmul+0xf8>
 8001506:	00e4      	lsls	r4, r4, #3
 8001508:	0f73      	lsrs	r3, r6, #29
 800150a:	4323      	orrs	r3, r4
 800150c:	2480      	movs	r4, #128	@ 0x80
 800150e:	4649      	mov	r1, r9
 8001510:	0424      	lsls	r4, r4, #16
 8001512:	431c      	orrs	r4, r3
 8001514:	00f3      	lsls	r3, r6, #3
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	9b00      	ldr	r3, [sp, #0]
 800151a:	2000      	movs	r0, #0
 800151c:	4059      	eors	r1, r3
 800151e:	b2cb      	uxtb	r3, r1
 8001520:	9303      	str	r3, [sp, #12]
 8001522:	2d02      	cmp	r5, #2
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x94>
 8001526:	e094      	b.n	8001652 <__aeabi_dmul+0x1be>
 8001528:	2301      	movs	r3, #1
 800152a:	40ab      	lsls	r3, r5
 800152c:	001d      	movs	r5, r3
 800152e:	23a6      	movs	r3, #166	@ 0xa6
 8001530:	002a      	movs	r2, r5
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	401a      	ands	r2, r3
 8001536:	421d      	tst	r5, r3
 8001538:	d000      	beq.n	800153c <__aeabi_dmul+0xa8>
 800153a:	e229      	b.n	8001990 <__aeabi_dmul+0x4fc>
 800153c:	2390      	movs	r3, #144	@ 0x90
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	421d      	tst	r5, r3
 8001542:	d100      	bne.n	8001546 <__aeabi_dmul+0xb2>
 8001544:	e24d      	b.n	80019e2 <__aeabi_dmul+0x54e>
 8001546:	2300      	movs	r3, #0
 8001548:	2480      	movs	r4, #128	@ 0x80
 800154a:	4699      	mov	r9, r3
 800154c:	0324      	lsls	r4, r4, #12
 800154e:	4ba8      	ldr	r3, [pc, #672]	@ (80017f0 <__aeabi_dmul+0x35c>)
 8001550:	0010      	movs	r0, r2
 8001552:	464a      	mov	r2, r9
 8001554:	051b      	lsls	r3, r3, #20
 8001556:	4323      	orrs	r3, r4
 8001558:	07d2      	lsls	r2, r2, #31
 800155a:	4313      	orrs	r3, r2
 800155c:	0019      	movs	r1, r3
 800155e:	b005      	add	sp, #20
 8001560:	bcf0      	pop	{r4, r5, r6, r7}
 8001562:	46bb      	mov	fp, r7
 8001564:	46b2      	mov	sl, r6
 8001566:	46a9      	mov	r9, r5
 8001568:	46a0      	mov	r8, r4
 800156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156c:	4652      	mov	r2, sl
 800156e:	4302      	orrs	r2, r0
 8001570:	4690      	mov	r8, r2
 8001572:	d000      	beq.n	8001576 <__aeabi_dmul+0xe2>
 8001574:	e1ac      	b.n	80018d0 <__aeabi_dmul+0x43c>
 8001576:	469b      	mov	fp, r3
 8001578:	2302      	movs	r3, #2
 800157a:	4692      	mov	sl, r2
 800157c:	2508      	movs	r5, #8
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	e7ae      	b.n	80014e0 <__aeabi_dmul+0x4c>
 8001582:	9b00      	ldr	r3, [sp, #0]
 8001584:	46a2      	mov	sl, r4
 8001586:	4699      	mov	r9, r3
 8001588:	9b01      	ldr	r3, [sp, #4]
 800158a:	4698      	mov	r8, r3
 800158c:	9b02      	ldr	r3, [sp, #8]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d100      	bne.n	8001594 <__aeabi_dmul+0x100>
 8001592:	e1ca      	b.n	800192a <__aeabi_dmul+0x496>
 8001594:	2b03      	cmp	r3, #3
 8001596:	d100      	bne.n	800159a <__aeabi_dmul+0x106>
 8001598:	e192      	b.n	80018c0 <__aeabi_dmul+0x42c>
 800159a:	2b01      	cmp	r3, #1
 800159c:	d110      	bne.n	80015c0 <__aeabi_dmul+0x12c>
 800159e:	2300      	movs	r3, #0
 80015a0:	2400      	movs	r4, #0
 80015a2:	2200      	movs	r2, #0
 80015a4:	e7d4      	b.n	8001550 <__aeabi_dmul+0xbc>
 80015a6:	2201      	movs	r2, #1
 80015a8:	087b      	lsrs	r3, r7, #1
 80015aa:	403a      	ands	r2, r7
 80015ac:	4313      	orrs	r3, r2
 80015ae:	4652      	mov	r2, sl
 80015b0:	07d2      	lsls	r2, r2, #31
 80015b2:	4313      	orrs	r3, r2
 80015b4:	4698      	mov	r8, r3
 80015b6:	4653      	mov	r3, sl
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	469a      	mov	sl, r3
 80015bc:	9b03      	ldr	r3, [sp, #12]
 80015be:	4699      	mov	r9, r3
 80015c0:	465b      	mov	r3, fp
 80015c2:	1c58      	adds	r0, r3, #1
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	445b      	add	r3, fp
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	dc00      	bgt.n	80015d0 <__aeabi_dmul+0x13c>
 80015ce:	e1b1      	b.n	8001934 <__aeabi_dmul+0x4a0>
 80015d0:	4642      	mov	r2, r8
 80015d2:	0752      	lsls	r2, r2, #29
 80015d4:	d00b      	beq.n	80015ee <__aeabi_dmul+0x15a>
 80015d6:	220f      	movs	r2, #15
 80015d8:	4641      	mov	r1, r8
 80015da:	400a      	ands	r2, r1
 80015dc:	2a04      	cmp	r2, #4
 80015de:	d006      	beq.n	80015ee <__aeabi_dmul+0x15a>
 80015e0:	4642      	mov	r2, r8
 80015e2:	1d11      	adds	r1, r2, #4
 80015e4:	4541      	cmp	r1, r8
 80015e6:	4192      	sbcs	r2, r2
 80015e8:	4688      	mov	r8, r1
 80015ea:	4252      	negs	r2, r2
 80015ec:	4492      	add	sl, r2
 80015ee:	4652      	mov	r2, sl
 80015f0:	01d2      	lsls	r2, r2, #7
 80015f2:	d506      	bpl.n	8001602 <__aeabi_dmul+0x16e>
 80015f4:	4652      	mov	r2, sl
 80015f6:	4b80      	ldr	r3, [pc, #512]	@ (80017f8 <__aeabi_dmul+0x364>)
 80015f8:	401a      	ands	r2, r3
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	4692      	mov	sl, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	18c3      	adds	r3, r0, r3
 8001602:	4a7e      	ldr	r2, [pc, #504]	@ (80017fc <__aeabi_dmul+0x368>)
 8001604:	4293      	cmp	r3, r2
 8001606:	dd00      	ble.n	800160a <__aeabi_dmul+0x176>
 8001608:	e18f      	b.n	800192a <__aeabi_dmul+0x496>
 800160a:	4642      	mov	r2, r8
 800160c:	08d1      	lsrs	r1, r2, #3
 800160e:	4652      	mov	r2, sl
 8001610:	0752      	lsls	r2, r2, #29
 8001612:	430a      	orrs	r2, r1
 8001614:	4651      	mov	r1, sl
 8001616:	055b      	lsls	r3, r3, #21
 8001618:	024c      	lsls	r4, r1, #9
 800161a:	0b24      	lsrs	r4, r4, #12
 800161c:	0d5b      	lsrs	r3, r3, #21
 800161e:	e797      	b.n	8001550 <__aeabi_dmul+0xbc>
 8001620:	4b73      	ldr	r3, [pc, #460]	@ (80017f0 <__aeabi_dmul+0x35c>)
 8001622:	4326      	orrs	r6, r4
 8001624:	469c      	mov	ip, r3
 8001626:	44e3      	add	fp, ip
 8001628:	2e00      	cmp	r6, #0
 800162a:	d100      	bne.n	800162e <__aeabi_dmul+0x19a>
 800162c:	e16f      	b.n	800190e <__aeabi_dmul+0x47a>
 800162e:	2303      	movs	r3, #3
 8001630:	4649      	mov	r1, r9
 8001632:	431d      	orrs	r5, r3
 8001634:	9b00      	ldr	r3, [sp, #0]
 8001636:	4059      	eors	r1, r3
 8001638:	b2cb      	uxtb	r3, r1
 800163a:	9303      	str	r3, [sp, #12]
 800163c:	2d0a      	cmp	r5, #10
 800163e:	dd00      	ble.n	8001642 <__aeabi_dmul+0x1ae>
 8001640:	e133      	b.n	80018aa <__aeabi_dmul+0x416>
 8001642:	2301      	movs	r3, #1
 8001644:	40ab      	lsls	r3, r5
 8001646:	001d      	movs	r5, r3
 8001648:	2303      	movs	r3, #3
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	2288      	movs	r2, #136	@ 0x88
 800164e:	422a      	tst	r2, r5
 8001650:	d197      	bne.n	8001582 <__aeabi_dmul+0xee>
 8001652:	4642      	mov	r2, r8
 8001654:	4643      	mov	r3, r8
 8001656:	0412      	lsls	r2, r2, #16
 8001658:	0c12      	lsrs	r2, r2, #16
 800165a:	0016      	movs	r6, r2
 800165c:	9801      	ldr	r0, [sp, #4]
 800165e:	0c1d      	lsrs	r5, r3, #16
 8001660:	0c03      	lsrs	r3, r0, #16
 8001662:	0400      	lsls	r0, r0, #16
 8001664:	0c00      	lsrs	r0, r0, #16
 8001666:	4346      	muls	r6, r0
 8001668:	46b4      	mov	ip, r6
 800166a:	001e      	movs	r6, r3
 800166c:	436e      	muls	r6, r5
 800166e:	9600      	str	r6, [sp, #0]
 8001670:	0016      	movs	r6, r2
 8001672:	0007      	movs	r7, r0
 8001674:	435e      	muls	r6, r3
 8001676:	4661      	mov	r1, ip
 8001678:	46b0      	mov	r8, r6
 800167a:	436f      	muls	r7, r5
 800167c:	0c0e      	lsrs	r6, r1, #16
 800167e:	44b8      	add	r8, r7
 8001680:	4446      	add	r6, r8
 8001682:	42b7      	cmp	r7, r6
 8001684:	d905      	bls.n	8001692 <__aeabi_dmul+0x1fe>
 8001686:	2180      	movs	r1, #128	@ 0x80
 8001688:	0249      	lsls	r1, r1, #9
 800168a:	4688      	mov	r8, r1
 800168c:	9f00      	ldr	r7, [sp, #0]
 800168e:	4447      	add	r7, r8
 8001690:	9700      	str	r7, [sp, #0]
 8001692:	4661      	mov	r1, ip
 8001694:	0409      	lsls	r1, r1, #16
 8001696:	0c09      	lsrs	r1, r1, #16
 8001698:	0c37      	lsrs	r7, r6, #16
 800169a:	0436      	lsls	r6, r6, #16
 800169c:	468c      	mov	ip, r1
 800169e:	0031      	movs	r1, r6
 80016a0:	4461      	add	r1, ip
 80016a2:	9101      	str	r1, [sp, #4]
 80016a4:	0011      	movs	r1, r2
 80016a6:	0c26      	lsrs	r6, r4, #16
 80016a8:	0424      	lsls	r4, r4, #16
 80016aa:	0c24      	lsrs	r4, r4, #16
 80016ac:	4361      	muls	r1, r4
 80016ae:	468c      	mov	ip, r1
 80016b0:	0021      	movs	r1, r4
 80016b2:	4369      	muls	r1, r5
 80016b4:	4689      	mov	r9, r1
 80016b6:	4661      	mov	r1, ip
 80016b8:	0c09      	lsrs	r1, r1, #16
 80016ba:	4688      	mov	r8, r1
 80016bc:	4372      	muls	r2, r6
 80016be:	444a      	add	r2, r9
 80016c0:	4442      	add	r2, r8
 80016c2:	4375      	muls	r5, r6
 80016c4:	4591      	cmp	r9, r2
 80016c6:	d903      	bls.n	80016d0 <__aeabi_dmul+0x23c>
 80016c8:	2180      	movs	r1, #128	@ 0x80
 80016ca:	0249      	lsls	r1, r1, #9
 80016cc:	4688      	mov	r8, r1
 80016ce:	4445      	add	r5, r8
 80016d0:	0c11      	lsrs	r1, r2, #16
 80016d2:	4688      	mov	r8, r1
 80016d4:	4661      	mov	r1, ip
 80016d6:	0409      	lsls	r1, r1, #16
 80016d8:	0c09      	lsrs	r1, r1, #16
 80016da:	468c      	mov	ip, r1
 80016dc:	0412      	lsls	r2, r2, #16
 80016de:	4462      	add	r2, ip
 80016e0:	18b9      	adds	r1, r7, r2
 80016e2:	9102      	str	r1, [sp, #8]
 80016e4:	4651      	mov	r1, sl
 80016e6:	0c09      	lsrs	r1, r1, #16
 80016e8:	468c      	mov	ip, r1
 80016ea:	4651      	mov	r1, sl
 80016ec:	040f      	lsls	r7, r1, #16
 80016ee:	0c3f      	lsrs	r7, r7, #16
 80016f0:	0039      	movs	r1, r7
 80016f2:	4341      	muls	r1, r0
 80016f4:	4445      	add	r5, r8
 80016f6:	4688      	mov	r8, r1
 80016f8:	4661      	mov	r1, ip
 80016fa:	4341      	muls	r1, r0
 80016fc:	468a      	mov	sl, r1
 80016fe:	4641      	mov	r1, r8
 8001700:	4660      	mov	r0, ip
 8001702:	0c09      	lsrs	r1, r1, #16
 8001704:	4689      	mov	r9, r1
 8001706:	4358      	muls	r0, r3
 8001708:	437b      	muls	r3, r7
 800170a:	4453      	add	r3, sl
 800170c:	444b      	add	r3, r9
 800170e:	459a      	cmp	sl, r3
 8001710:	d903      	bls.n	800171a <__aeabi_dmul+0x286>
 8001712:	2180      	movs	r1, #128	@ 0x80
 8001714:	0249      	lsls	r1, r1, #9
 8001716:	4689      	mov	r9, r1
 8001718:	4448      	add	r0, r9
 800171a:	0c19      	lsrs	r1, r3, #16
 800171c:	4689      	mov	r9, r1
 800171e:	4641      	mov	r1, r8
 8001720:	0409      	lsls	r1, r1, #16
 8001722:	0c09      	lsrs	r1, r1, #16
 8001724:	4688      	mov	r8, r1
 8001726:	0039      	movs	r1, r7
 8001728:	4361      	muls	r1, r4
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	4443      	add	r3, r8
 800172e:	4688      	mov	r8, r1
 8001730:	4661      	mov	r1, ip
 8001732:	434c      	muls	r4, r1
 8001734:	4371      	muls	r1, r6
 8001736:	468c      	mov	ip, r1
 8001738:	4641      	mov	r1, r8
 800173a:	4377      	muls	r7, r6
 800173c:	0c0e      	lsrs	r6, r1, #16
 800173e:	193f      	adds	r7, r7, r4
 8001740:	19f6      	adds	r6, r6, r7
 8001742:	4448      	add	r0, r9
 8001744:	42b4      	cmp	r4, r6
 8001746:	d903      	bls.n	8001750 <__aeabi_dmul+0x2bc>
 8001748:	2180      	movs	r1, #128	@ 0x80
 800174a:	0249      	lsls	r1, r1, #9
 800174c:	4689      	mov	r9, r1
 800174e:	44cc      	add	ip, r9
 8001750:	9902      	ldr	r1, [sp, #8]
 8001752:	9f00      	ldr	r7, [sp, #0]
 8001754:	4689      	mov	r9, r1
 8001756:	0431      	lsls	r1, r6, #16
 8001758:	444f      	add	r7, r9
 800175a:	4689      	mov	r9, r1
 800175c:	4641      	mov	r1, r8
 800175e:	4297      	cmp	r7, r2
 8001760:	4192      	sbcs	r2, r2
 8001762:	040c      	lsls	r4, r1, #16
 8001764:	0c24      	lsrs	r4, r4, #16
 8001766:	444c      	add	r4, r9
 8001768:	18ff      	adds	r7, r7, r3
 800176a:	4252      	negs	r2, r2
 800176c:	1964      	adds	r4, r4, r5
 800176e:	18a1      	adds	r1, r4, r2
 8001770:	429f      	cmp	r7, r3
 8001772:	419b      	sbcs	r3, r3
 8001774:	4688      	mov	r8, r1
 8001776:	4682      	mov	sl, r0
 8001778:	425b      	negs	r3, r3
 800177a:	4699      	mov	r9, r3
 800177c:	4590      	cmp	r8, r2
 800177e:	4192      	sbcs	r2, r2
 8001780:	42ac      	cmp	r4, r5
 8001782:	41a4      	sbcs	r4, r4
 8001784:	44c2      	add	sl, r8
 8001786:	44d1      	add	r9, sl
 8001788:	4252      	negs	r2, r2
 800178a:	4264      	negs	r4, r4
 800178c:	4314      	orrs	r4, r2
 800178e:	4599      	cmp	r9, r3
 8001790:	419b      	sbcs	r3, r3
 8001792:	4582      	cmp	sl, r0
 8001794:	4192      	sbcs	r2, r2
 8001796:	425b      	negs	r3, r3
 8001798:	4252      	negs	r2, r2
 800179a:	4313      	orrs	r3, r2
 800179c:	464a      	mov	r2, r9
 800179e:	0c36      	lsrs	r6, r6, #16
 80017a0:	19a4      	adds	r4, r4, r6
 80017a2:	18e3      	adds	r3, r4, r3
 80017a4:	4463      	add	r3, ip
 80017a6:	025b      	lsls	r3, r3, #9
 80017a8:	0dd2      	lsrs	r2, r2, #23
 80017aa:	431a      	orrs	r2, r3
 80017ac:	9901      	ldr	r1, [sp, #4]
 80017ae:	4692      	mov	sl, r2
 80017b0:	027a      	lsls	r2, r7, #9
 80017b2:	430a      	orrs	r2, r1
 80017b4:	1e50      	subs	r0, r2, #1
 80017b6:	4182      	sbcs	r2, r0
 80017b8:	0dff      	lsrs	r7, r7, #23
 80017ba:	4317      	orrs	r7, r2
 80017bc:	464a      	mov	r2, r9
 80017be:	0252      	lsls	r2, r2, #9
 80017c0:	4317      	orrs	r7, r2
 80017c2:	46b8      	mov	r8, r7
 80017c4:	01db      	lsls	r3, r3, #7
 80017c6:	d500      	bpl.n	80017ca <__aeabi_dmul+0x336>
 80017c8:	e6ed      	b.n	80015a6 <__aeabi_dmul+0x112>
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <__aeabi_dmul+0x36c>)
 80017cc:	9a03      	ldr	r2, [sp, #12]
 80017ce:	445b      	add	r3, fp
 80017d0:	4691      	mov	r9, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	dc00      	bgt.n	80017d8 <__aeabi_dmul+0x344>
 80017d6:	e0ac      	b.n	8001932 <__aeabi_dmul+0x49e>
 80017d8:	003a      	movs	r2, r7
 80017da:	0752      	lsls	r2, r2, #29
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dmul+0x34c>
 80017de:	e710      	b.n	8001602 <__aeabi_dmul+0x16e>
 80017e0:	220f      	movs	r2, #15
 80017e2:	4658      	mov	r0, fp
 80017e4:	403a      	ands	r2, r7
 80017e6:	2a04      	cmp	r2, #4
 80017e8:	d000      	beq.n	80017ec <__aeabi_dmul+0x358>
 80017ea:	e6f9      	b.n	80015e0 <__aeabi_dmul+0x14c>
 80017ec:	e709      	b.n	8001602 <__aeabi_dmul+0x16e>
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	fffffc01 	.word	0xfffffc01
 80017f8:	feffffff 	.word	0xfeffffff
 80017fc:	000007fe 	.word	0x000007fe
 8001800:	000003ff 	.word	0x000003ff
 8001804:	0022      	movs	r2, r4
 8001806:	4332      	orrs	r2, r6
 8001808:	d06f      	beq.n	80018ea <__aeabi_dmul+0x456>
 800180a:	2c00      	cmp	r4, #0
 800180c:	d100      	bne.n	8001810 <__aeabi_dmul+0x37c>
 800180e:	e0c2      	b.n	8001996 <__aeabi_dmul+0x502>
 8001810:	0020      	movs	r0, r4
 8001812:	f000 f9ef 	bl	8001bf4 <__clzsi2>
 8001816:	0002      	movs	r2, r0
 8001818:	0003      	movs	r3, r0
 800181a:	3a0b      	subs	r2, #11
 800181c:	201d      	movs	r0, #29
 800181e:	1a82      	subs	r2, r0, r2
 8001820:	0030      	movs	r0, r6
 8001822:	0019      	movs	r1, r3
 8001824:	40d0      	lsrs	r0, r2
 8001826:	3908      	subs	r1, #8
 8001828:	408c      	lsls	r4, r1
 800182a:	0002      	movs	r2, r0
 800182c:	4322      	orrs	r2, r4
 800182e:	0034      	movs	r4, r6
 8001830:	408c      	lsls	r4, r1
 8001832:	4659      	mov	r1, fp
 8001834:	1acb      	subs	r3, r1, r3
 8001836:	4986      	ldr	r1, [pc, #536]	@ (8001a50 <__aeabi_dmul+0x5bc>)
 8001838:	468b      	mov	fp, r1
 800183a:	449b      	add	fp, r3
 800183c:	2d0a      	cmp	r5, #10
 800183e:	dd00      	ble.n	8001842 <__aeabi_dmul+0x3ae>
 8001840:	e6a4      	b.n	800158c <__aeabi_dmul+0xf8>
 8001842:	4649      	mov	r1, r9
 8001844:	9b00      	ldr	r3, [sp, #0]
 8001846:	9401      	str	r4, [sp, #4]
 8001848:	4059      	eors	r1, r3
 800184a:	b2cb      	uxtb	r3, r1
 800184c:	0014      	movs	r4, r2
 800184e:	2000      	movs	r0, #0
 8001850:	9303      	str	r3, [sp, #12]
 8001852:	2d02      	cmp	r5, #2
 8001854:	dd00      	ble.n	8001858 <__aeabi_dmul+0x3c4>
 8001856:	e667      	b.n	8001528 <__aeabi_dmul+0x94>
 8001858:	e6fb      	b.n	8001652 <__aeabi_dmul+0x1be>
 800185a:	4653      	mov	r3, sl
 800185c:	4303      	orrs	r3, r0
 800185e:	4698      	mov	r8, r3
 8001860:	d03c      	beq.n	80018dc <__aeabi_dmul+0x448>
 8001862:	4653      	mov	r3, sl
 8001864:	2b00      	cmp	r3, #0
 8001866:	d100      	bne.n	800186a <__aeabi_dmul+0x3d6>
 8001868:	e0a3      	b.n	80019b2 <__aeabi_dmul+0x51e>
 800186a:	4650      	mov	r0, sl
 800186c:	f000 f9c2 	bl	8001bf4 <__clzsi2>
 8001870:	230b      	movs	r3, #11
 8001872:	425b      	negs	r3, r3
 8001874:	469c      	mov	ip, r3
 8001876:	0002      	movs	r2, r0
 8001878:	4484      	add	ip, r0
 800187a:	0011      	movs	r1, r2
 800187c:	4650      	mov	r0, sl
 800187e:	3908      	subs	r1, #8
 8001880:	4088      	lsls	r0, r1
 8001882:	231d      	movs	r3, #29
 8001884:	4680      	mov	r8, r0
 8001886:	4660      	mov	r0, ip
 8001888:	1a1b      	subs	r3, r3, r0
 800188a:	0020      	movs	r0, r4
 800188c:	40d8      	lsrs	r0, r3
 800188e:	0003      	movs	r3, r0
 8001890:	4640      	mov	r0, r8
 8001892:	4303      	orrs	r3, r0
 8001894:	469a      	mov	sl, r3
 8001896:	0023      	movs	r3, r4
 8001898:	408b      	lsls	r3, r1
 800189a:	4698      	mov	r8, r3
 800189c:	4b6c      	ldr	r3, [pc, #432]	@ (8001a50 <__aeabi_dmul+0x5bc>)
 800189e:	2500      	movs	r5, #0
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	469b      	mov	fp, r3
 80018a4:	2300      	movs	r3, #0
 80018a6:	9302      	str	r3, [sp, #8]
 80018a8:	e61a      	b.n	80014e0 <__aeabi_dmul+0x4c>
 80018aa:	2d0f      	cmp	r5, #15
 80018ac:	d000      	beq.n	80018b0 <__aeabi_dmul+0x41c>
 80018ae:	e0c9      	b.n	8001a44 <__aeabi_dmul+0x5b0>
 80018b0:	2380      	movs	r3, #128	@ 0x80
 80018b2:	4652      	mov	r2, sl
 80018b4:	031b      	lsls	r3, r3, #12
 80018b6:	421a      	tst	r2, r3
 80018b8:	d002      	beq.n	80018c0 <__aeabi_dmul+0x42c>
 80018ba:	421c      	tst	r4, r3
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dmul+0x42c>
 80018be:	e092      	b.n	80019e6 <__aeabi_dmul+0x552>
 80018c0:	2480      	movs	r4, #128	@ 0x80
 80018c2:	4653      	mov	r3, sl
 80018c4:	0324      	lsls	r4, r4, #12
 80018c6:	431c      	orrs	r4, r3
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	4642      	mov	r2, r8
 80018cc:	0b24      	lsrs	r4, r4, #12
 80018ce:	e63e      	b.n	800154e <__aeabi_dmul+0xba>
 80018d0:	469b      	mov	fp, r3
 80018d2:	2303      	movs	r3, #3
 80018d4:	4680      	mov	r8, r0
 80018d6:	250c      	movs	r5, #12
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	e601      	b.n	80014e0 <__aeabi_dmul+0x4c>
 80018dc:	2300      	movs	r3, #0
 80018de:	469a      	mov	sl, r3
 80018e0:	469b      	mov	fp, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	2504      	movs	r5, #4
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	e5fa      	b.n	80014e0 <__aeabi_dmul+0x4c>
 80018ea:	2101      	movs	r1, #1
 80018ec:	430d      	orrs	r5, r1
 80018ee:	2d0a      	cmp	r5, #10
 80018f0:	dd00      	ble.n	80018f4 <__aeabi_dmul+0x460>
 80018f2:	e64b      	b.n	800158c <__aeabi_dmul+0xf8>
 80018f4:	4649      	mov	r1, r9
 80018f6:	9800      	ldr	r0, [sp, #0]
 80018f8:	4041      	eors	r1, r0
 80018fa:	b2c9      	uxtb	r1, r1
 80018fc:	9103      	str	r1, [sp, #12]
 80018fe:	2d02      	cmp	r5, #2
 8001900:	dc00      	bgt.n	8001904 <__aeabi_dmul+0x470>
 8001902:	e096      	b.n	8001a32 <__aeabi_dmul+0x59e>
 8001904:	2300      	movs	r3, #0
 8001906:	2400      	movs	r4, #0
 8001908:	2001      	movs	r0, #1
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	e60c      	b.n	8001528 <__aeabi_dmul+0x94>
 800190e:	4649      	mov	r1, r9
 8001910:	2302      	movs	r3, #2
 8001912:	9a00      	ldr	r2, [sp, #0]
 8001914:	432b      	orrs	r3, r5
 8001916:	4051      	eors	r1, r2
 8001918:	b2ca      	uxtb	r2, r1
 800191a:	9203      	str	r2, [sp, #12]
 800191c:	2b0a      	cmp	r3, #10
 800191e:	dd00      	ble.n	8001922 <__aeabi_dmul+0x48e>
 8001920:	e634      	b.n	800158c <__aeabi_dmul+0xf8>
 8001922:	2d00      	cmp	r5, #0
 8001924:	d157      	bne.n	80019d6 <__aeabi_dmul+0x542>
 8001926:	9b03      	ldr	r3, [sp, #12]
 8001928:	4699      	mov	r9, r3
 800192a:	2400      	movs	r4, #0
 800192c:	2200      	movs	r2, #0
 800192e:	4b49      	ldr	r3, [pc, #292]	@ (8001a54 <__aeabi_dmul+0x5c0>)
 8001930:	e60e      	b.n	8001550 <__aeabi_dmul+0xbc>
 8001932:	4658      	mov	r0, fp
 8001934:	2101      	movs	r1, #1
 8001936:	1ac9      	subs	r1, r1, r3
 8001938:	2938      	cmp	r1, #56	@ 0x38
 800193a:	dd00      	ble.n	800193e <__aeabi_dmul+0x4aa>
 800193c:	e62f      	b.n	800159e <__aeabi_dmul+0x10a>
 800193e:	291f      	cmp	r1, #31
 8001940:	dd56      	ble.n	80019f0 <__aeabi_dmul+0x55c>
 8001942:	221f      	movs	r2, #31
 8001944:	4654      	mov	r4, sl
 8001946:	4252      	negs	r2, r2
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	40dc      	lsrs	r4, r3
 800194c:	2920      	cmp	r1, #32
 800194e:	d007      	beq.n	8001960 <__aeabi_dmul+0x4cc>
 8001950:	4b41      	ldr	r3, [pc, #260]	@ (8001a58 <__aeabi_dmul+0x5c4>)
 8001952:	4642      	mov	r2, r8
 8001954:	469c      	mov	ip, r3
 8001956:	4653      	mov	r3, sl
 8001958:	4460      	add	r0, ip
 800195a:	4083      	lsls	r3, r0
 800195c:	431a      	orrs	r2, r3
 800195e:	4690      	mov	r8, r2
 8001960:	4642      	mov	r2, r8
 8001962:	2107      	movs	r1, #7
 8001964:	1e53      	subs	r3, r2, #1
 8001966:	419a      	sbcs	r2, r3
 8001968:	000b      	movs	r3, r1
 800196a:	4322      	orrs	r2, r4
 800196c:	4013      	ands	r3, r2
 800196e:	2400      	movs	r4, #0
 8001970:	4211      	tst	r1, r2
 8001972:	d009      	beq.n	8001988 <__aeabi_dmul+0x4f4>
 8001974:	230f      	movs	r3, #15
 8001976:	4013      	ands	r3, r2
 8001978:	2b04      	cmp	r3, #4
 800197a:	d05d      	beq.n	8001a38 <__aeabi_dmul+0x5a4>
 800197c:	1d11      	adds	r1, r2, #4
 800197e:	4291      	cmp	r1, r2
 8001980:	419b      	sbcs	r3, r3
 8001982:	000a      	movs	r2, r1
 8001984:	425b      	negs	r3, r3
 8001986:	075b      	lsls	r3, r3, #29
 8001988:	08d2      	lsrs	r2, r2, #3
 800198a:	431a      	orrs	r2, r3
 800198c:	2300      	movs	r3, #0
 800198e:	e5df      	b.n	8001550 <__aeabi_dmul+0xbc>
 8001990:	9b03      	ldr	r3, [sp, #12]
 8001992:	4699      	mov	r9, r3
 8001994:	e5fa      	b.n	800158c <__aeabi_dmul+0xf8>
 8001996:	9801      	ldr	r0, [sp, #4]
 8001998:	f000 f92c 	bl	8001bf4 <__clzsi2>
 800199c:	0002      	movs	r2, r0
 800199e:	0003      	movs	r3, r0
 80019a0:	3215      	adds	r2, #21
 80019a2:	3320      	adds	r3, #32
 80019a4:	2a1c      	cmp	r2, #28
 80019a6:	dc00      	bgt.n	80019aa <__aeabi_dmul+0x516>
 80019a8:	e738      	b.n	800181c <__aeabi_dmul+0x388>
 80019aa:	9a01      	ldr	r2, [sp, #4]
 80019ac:	3808      	subs	r0, #8
 80019ae:	4082      	lsls	r2, r0
 80019b0:	e73f      	b.n	8001832 <__aeabi_dmul+0x39e>
 80019b2:	f000 f91f 	bl	8001bf4 <__clzsi2>
 80019b6:	2315      	movs	r3, #21
 80019b8:	469c      	mov	ip, r3
 80019ba:	4484      	add	ip, r0
 80019bc:	0002      	movs	r2, r0
 80019be:	4663      	mov	r3, ip
 80019c0:	3220      	adds	r2, #32
 80019c2:	2b1c      	cmp	r3, #28
 80019c4:	dc00      	bgt.n	80019c8 <__aeabi_dmul+0x534>
 80019c6:	e758      	b.n	800187a <__aeabi_dmul+0x3e6>
 80019c8:	2300      	movs	r3, #0
 80019ca:	4698      	mov	r8, r3
 80019cc:	0023      	movs	r3, r4
 80019ce:	3808      	subs	r0, #8
 80019d0:	4083      	lsls	r3, r0
 80019d2:	469a      	mov	sl, r3
 80019d4:	e762      	b.n	800189c <__aeabi_dmul+0x408>
 80019d6:	001d      	movs	r5, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	2400      	movs	r4, #0
 80019dc:	2002      	movs	r0, #2
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	e5a2      	b.n	8001528 <__aeabi_dmul+0x94>
 80019e2:	9002      	str	r0, [sp, #8]
 80019e4:	e632      	b.n	800164c <__aeabi_dmul+0x1b8>
 80019e6:	431c      	orrs	r4, r3
 80019e8:	9b00      	ldr	r3, [sp, #0]
 80019ea:	9a01      	ldr	r2, [sp, #4]
 80019ec:	4699      	mov	r9, r3
 80019ee:	e5ae      	b.n	800154e <__aeabi_dmul+0xba>
 80019f0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <__aeabi_dmul+0x5c8>)
 80019f2:	4652      	mov	r2, sl
 80019f4:	18c3      	adds	r3, r0, r3
 80019f6:	4640      	mov	r0, r8
 80019f8:	409a      	lsls	r2, r3
 80019fa:	40c8      	lsrs	r0, r1
 80019fc:	4302      	orrs	r2, r0
 80019fe:	4640      	mov	r0, r8
 8001a00:	4098      	lsls	r0, r3
 8001a02:	0003      	movs	r3, r0
 8001a04:	1e58      	subs	r0, r3, #1
 8001a06:	4183      	sbcs	r3, r0
 8001a08:	4654      	mov	r4, sl
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	40cc      	lsrs	r4, r1
 8001a0e:	0753      	lsls	r3, r2, #29
 8001a10:	d009      	beq.n	8001a26 <__aeabi_dmul+0x592>
 8001a12:	230f      	movs	r3, #15
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d005      	beq.n	8001a26 <__aeabi_dmul+0x592>
 8001a1a:	1d13      	adds	r3, r2, #4
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	4192      	sbcs	r2, r2
 8001a20:	4252      	negs	r2, r2
 8001a22:	18a4      	adds	r4, r4, r2
 8001a24:	001a      	movs	r2, r3
 8001a26:	0223      	lsls	r3, r4, #8
 8001a28:	d508      	bpl.n	8001a3c <__aeabi_dmul+0x5a8>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	2400      	movs	r4, #0
 8001a2e:	2200      	movs	r2, #0
 8001a30:	e58e      	b.n	8001550 <__aeabi_dmul+0xbc>
 8001a32:	4689      	mov	r9, r1
 8001a34:	2400      	movs	r4, #0
 8001a36:	e58b      	b.n	8001550 <__aeabi_dmul+0xbc>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e7a5      	b.n	8001988 <__aeabi_dmul+0x4f4>
 8001a3c:	0763      	lsls	r3, r4, #29
 8001a3e:	0264      	lsls	r4, r4, #9
 8001a40:	0b24      	lsrs	r4, r4, #12
 8001a42:	e7a1      	b.n	8001988 <__aeabi_dmul+0x4f4>
 8001a44:	9b00      	ldr	r3, [sp, #0]
 8001a46:	46a2      	mov	sl, r4
 8001a48:	4699      	mov	r9, r3
 8001a4a:	9b01      	ldr	r3, [sp, #4]
 8001a4c:	4698      	mov	r8, r3
 8001a4e:	e737      	b.n	80018c0 <__aeabi_dmul+0x42c>
 8001a50:	fffffc0d 	.word	0xfffffc0d
 8001a54:	000007ff 	.word	0x000007ff
 8001a58:	0000043e 	.word	0x0000043e
 8001a5c:	0000041e 	.word	0x0000041e

08001a60 <__aeabi_f2d>:
 8001a60:	b570      	push	{r4, r5, r6, lr}
 8001a62:	0242      	lsls	r2, r0, #9
 8001a64:	0043      	lsls	r3, r0, #1
 8001a66:	0fc4      	lsrs	r4, r0, #31
 8001a68:	20fe      	movs	r0, #254	@ 0xfe
 8001a6a:	0e1b      	lsrs	r3, r3, #24
 8001a6c:	1c59      	adds	r1, r3, #1
 8001a6e:	0a55      	lsrs	r5, r2, #9
 8001a70:	4208      	tst	r0, r1
 8001a72:	d00c      	beq.n	8001a8e <__aeabi_f2d+0x2e>
 8001a74:	21e0      	movs	r1, #224	@ 0xe0
 8001a76:	0089      	lsls	r1, r1, #2
 8001a78:	468c      	mov	ip, r1
 8001a7a:	076d      	lsls	r5, r5, #29
 8001a7c:	0b12      	lsrs	r2, r2, #12
 8001a7e:	4463      	add	r3, ip
 8001a80:	051b      	lsls	r3, r3, #20
 8001a82:	4313      	orrs	r3, r2
 8001a84:	07e4      	lsls	r4, r4, #31
 8001a86:	4323      	orrs	r3, r4
 8001a88:	0028      	movs	r0, r5
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	bd70      	pop	{r4, r5, r6, pc}
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d114      	bne.n	8001abc <__aeabi_f2d+0x5c>
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	d01b      	beq.n	8001ace <__aeabi_f2d+0x6e>
 8001a96:	0028      	movs	r0, r5
 8001a98:	f000 f8ac 	bl	8001bf4 <__clzsi2>
 8001a9c:	280a      	cmp	r0, #10
 8001a9e:	dc1c      	bgt.n	8001ada <__aeabi_f2d+0x7a>
 8001aa0:	230b      	movs	r3, #11
 8001aa2:	002a      	movs	r2, r5
 8001aa4:	1a1b      	subs	r3, r3, r0
 8001aa6:	40da      	lsrs	r2, r3
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	3315      	adds	r3, #21
 8001aac:	409d      	lsls	r5, r3
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <__aeabi_f2d+0x88>)
 8001ab0:	0312      	lsls	r2, r2, #12
 8001ab2:	1a1b      	subs	r3, r3, r0
 8001ab4:	055b      	lsls	r3, r3, #21
 8001ab6:	0b12      	lsrs	r2, r2, #12
 8001ab8:	0d5b      	lsrs	r3, r3, #21
 8001aba:	e7e1      	b.n	8001a80 <__aeabi_f2d+0x20>
 8001abc:	2d00      	cmp	r5, #0
 8001abe:	d009      	beq.n	8001ad4 <__aeabi_f2d+0x74>
 8001ac0:	0b13      	lsrs	r3, r2, #12
 8001ac2:	2280      	movs	r2, #128	@ 0x80
 8001ac4:	0312      	lsls	r2, r2, #12
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	076d      	lsls	r5, r5, #29
 8001aca:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <__aeabi_f2d+0x8c>)
 8001acc:	e7d8      	b.n	8001a80 <__aeabi_f2d+0x20>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	e7d5      	b.n	8001a80 <__aeabi_f2d+0x20>
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <__aeabi_f2d+0x8c>)
 8001ad8:	e7d2      	b.n	8001a80 <__aeabi_f2d+0x20>
 8001ada:	0003      	movs	r3, r0
 8001adc:	002a      	movs	r2, r5
 8001ade:	3b0b      	subs	r3, #11
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	2500      	movs	r5, #0
 8001ae4:	e7e3      	b.n	8001aae <__aeabi_f2d+0x4e>
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	00000389 	.word	0x00000389
 8001aec:	000007ff 	.word	0x000007ff

08001af0 <__aeabi_d2f>:
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af2:	004b      	lsls	r3, r1, #1
 8001af4:	030f      	lsls	r7, r1, #12
 8001af6:	0d5b      	lsrs	r3, r3, #21
 8001af8:	4c3a      	ldr	r4, [pc, #232]	@ (8001be4 <__aeabi_d2f+0xf4>)
 8001afa:	0f45      	lsrs	r5, r0, #29
 8001afc:	b083      	sub	sp, #12
 8001afe:	0a7f      	lsrs	r7, r7, #9
 8001b00:	1c5e      	adds	r6, r3, #1
 8001b02:	432f      	orrs	r7, r5
 8001b04:	9000      	str	r0, [sp, #0]
 8001b06:	9101      	str	r1, [sp, #4]
 8001b08:	0fca      	lsrs	r2, r1, #31
 8001b0a:	00c5      	lsls	r5, r0, #3
 8001b0c:	4226      	tst	r6, r4
 8001b0e:	d00b      	beq.n	8001b28 <__aeabi_d2f+0x38>
 8001b10:	4935      	ldr	r1, [pc, #212]	@ (8001be8 <__aeabi_d2f+0xf8>)
 8001b12:	185c      	adds	r4, r3, r1
 8001b14:	2cfe      	cmp	r4, #254	@ 0xfe
 8001b16:	dd13      	ble.n	8001b40 <__aeabi_d2f+0x50>
 8001b18:	20ff      	movs	r0, #255	@ 0xff
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	05c0      	lsls	r0, r0, #23
 8001b1e:	4318      	orrs	r0, r3
 8001b20:	07d2      	lsls	r2, r2, #31
 8001b22:	4310      	orrs	r0, r2
 8001b24:	b003      	add	sp, #12
 8001b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b28:	433d      	orrs	r5, r7
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <__aeabi_d2f+0x42>
 8001b2e:	2000      	movs	r0, #0
 8001b30:	e7f4      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001b32:	2d00      	cmp	r5, #0
 8001b34:	d0f0      	beq.n	8001b18 <__aeabi_d2f+0x28>
 8001b36:	2380      	movs	r3, #128	@ 0x80
 8001b38:	03db      	lsls	r3, r3, #15
 8001b3a:	20ff      	movs	r0, #255	@ 0xff
 8001b3c:	433b      	orrs	r3, r7
 8001b3e:	e7ed      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001b40:	2c00      	cmp	r4, #0
 8001b42:	dd0c      	ble.n	8001b5e <__aeabi_d2f+0x6e>
 8001b44:	9b00      	ldr	r3, [sp, #0]
 8001b46:	00ff      	lsls	r7, r7, #3
 8001b48:	019b      	lsls	r3, r3, #6
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	4183      	sbcs	r3, r0
 8001b4e:	0f69      	lsrs	r1, r5, #29
 8001b50:	433b      	orrs	r3, r7
 8001b52:	430b      	orrs	r3, r1
 8001b54:	0759      	lsls	r1, r3, #29
 8001b56:	d127      	bne.n	8001ba8 <__aeabi_d2f+0xb8>
 8001b58:	08db      	lsrs	r3, r3, #3
 8001b5a:	b2e0      	uxtb	r0, r4
 8001b5c:	e7de      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001b5e:	0021      	movs	r1, r4
 8001b60:	3117      	adds	r1, #23
 8001b62:	db31      	blt.n	8001bc8 <__aeabi_d2f+0xd8>
 8001b64:	2180      	movs	r1, #128	@ 0x80
 8001b66:	201e      	movs	r0, #30
 8001b68:	0409      	lsls	r1, r1, #16
 8001b6a:	4339      	orrs	r1, r7
 8001b6c:	1b00      	subs	r0, r0, r4
 8001b6e:	281f      	cmp	r0, #31
 8001b70:	dd2d      	ble.n	8001bce <__aeabi_d2f+0xde>
 8001b72:	2602      	movs	r6, #2
 8001b74:	4276      	negs	r6, r6
 8001b76:	1b34      	subs	r4, r6, r4
 8001b78:	000e      	movs	r6, r1
 8001b7a:	40e6      	lsrs	r6, r4
 8001b7c:	0034      	movs	r4, r6
 8001b7e:	2820      	cmp	r0, #32
 8001b80:	d004      	beq.n	8001b8c <__aeabi_d2f+0x9c>
 8001b82:	481a      	ldr	r0, [pc, #104]	@ (8001bec <__aeabi_d2f+0xfc>)
 8001b84:	4684      	mov	ip, r0
 8001b86:	4463      	add	r3, ip
 8001b88:	4099      	lsls	r1, r3
 8001b8a:	430d      	orrs	r5, r1
 8001b8c:	002b      	movs	r3, r5
 8001b8e:	1e59      	subs	r1, r3, #1
 8001b90:	418b      	sbcs	r3, r1
 8001b92:	4323      	orrs	r3, r4
 8001b94:	0759      	lsls	r1, r3, #29
 8001b96:	d003      	beq.n	8001ba0 <__aeabi_d2f+0xb0>
 8001b98:	210f      	movs	r1, #15
 8001b9a:	4019      	ands	r1, r3
 8001b9c:	2904      	cmp	r1, #4
 8001b9e:	d10b      	bne.n	8001bb8 <__aeabi_d2f+0xc8>
 8001ba0:	019b      	lsls	r3, r3, #6
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	0a5b      	lsrs	r3, r3, #9
 8001ba6:	e7b9      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001ba8:	210f      	movs	r1, #15
 8001baa:	4019      	ands	r1, r3
 8001bac:	2904      	cmp	r1, #4
 8001bae:	d104      	bne.n	8001bba <__aeabi_d2f+0xca>
 8001bb0:	019b      	lsls	r3, r3, #6
 8001bb2:	0a5b      	lsrs	r3, r3, #9
 8001bb4:	b2e0      	uxtb	r0, r4
 8001bb6:	e7b1      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001bb8:	2400      	movs	r4, #0
 8001bba:	3304      	adds	r3, #4
 8001bbc:	0159      	lsls	r1, r3, #5
 8001bbe:	d5f7      	bpl.n	8001bb0 <__aeabi_d2f+0xc0>
 8001bc0:	3401      	adds	r4, #1
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	b2e0      	uxtb	r0, r4
 8001bc6:	e7a9      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001bc8:	2000      	movs	r0, #0
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e7a6      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001bce:	4c08      	ldr	r4, [pc, #32]	@ (8001bf0 <__aeabi_d2f+0x100>)
 8001bd0:	191c      	adds	r4, r3, r4
 8001bd2:	002b      	movs	r3, r5
 8001bd4:	40a5      	lsls	r5, r4
 8001bd6:	40c3      	lsrs	r3, r0
 8001bd8:	40a1      	lsls	r1, r4
 8001bda:	1e68      	subs	r0, r5, #1
 8001bdc:	4185      	sbcs	r5, r0
 8001bde:	4329      	orrs	r1, r5
 8001be0:	430b      	orrs	r3, r1
 8001be2:	e7d7      	b.n	8001b94 <__aeabi_d2f+0xa4>
 8001be4:	000007fe 	.word	0x000007fe
 8001be8:	fffffc80 	.word	0xfffffc80
 8001bec:	fffffca2 	.word	0xfffffca2
 8001bf0:	fffffc82 	.word	0xfffffc82

08001bf4 <__clzsi2>:
 8001bf4:	211c      	movs	r1, #28
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	041b      	lsls	r3, r3, #16
 8001bfa:	4298      	cmp	r0, r3
 8001bfc:	d301      	bcc.n	8001c02 <__clzsi2+0xe>
 8001bfe:	0c00      	lsrs	r0, r0, #16
 8001c00:	3910      	subs	r1, #16
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	4298      	cmp	r0, r3
 8001c06:	d301      	bcc.n	8001c0c <__clzsi2+0x18>
 8001c08:	0a00      	lsrs	r0, r0, #8
 8001c0a:	3908      	subs	r1, #8
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	4298      	cmp	r0, r3
 8001c10:	d301      	bcc.n	8001c16 <__clzsi2+0x22>
 8001c12:	0900      	lsrs	r0, r0, #4
 8001c14:	3904      	subs	r1, #4
 8001c16:	a202      	add	r2, pc, #8	@ (adr r2, 8001c20 <__clzsi2+0x2c>)
 8001c18:	5c10      	ldrb	r0, [r2, r0]
 8001c1a:	1840      	adds	r0, r0, r1
 8001c1c:	4770      	bx	lr
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	02020304 	.word	0x02020304
 8001c24:	01010101 	.word	0x01010101
	...

08001c30 <bma400_init>:
/************************************************************************************/
/*********************** User function definitions **********************************/
/************************************************************************************/

int8_t bma400_init(struct bma400_dev *dev)
{
 8001c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001c38:	260e      	movs	r6, #14
 8001c3a:	19bb      	adds	r3, r7, r6
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001c40:	250f      	movs	r5, #15
 8001c42:	197c      	adds	r4, r7, r5
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 fb8a 	bl	8002360 <null_ptr_check>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8001c50:	002c      	movs	r4, r5
 8001c52:	193b      	adds	r3, r7, r4
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d13c      	bne.n	8001cd6 <bma400_init+0xa6>
    {
        /* Initial power-up time */
        dev->delay_us(5000, dev->intf_ptr);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4820      	ldr	r0, [pc, #128]	@ (8001ce8 <bma400_init+0xb8>)
 8001c66:	0019      	movs	r1, r3
 8001c68:	4790      	blx	r2

        /* Assigning dummy byte value */
        if (dev->intf == BMA400_SPI_INTF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	785b      	ldrb	r3, [r3, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10c      	bne.n	8001c8c <bma400_init+0x5c>
        {
            /* Dummy Byte availability */
            dev->dummy_byte = 1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	721a      	strb	r2, [r3, #8]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8001c78:	193c      	adds	r4, r7, r4
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	19b9      	adds	r1, r7, r6
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2000      	movs	r0, #0
 8001c82:	f000 f8b1 	bl	8001de8 <bma400_get_regs>
 8001c86:	0003      	movs	r3, r0
 8001c88:	7023      	strb	r3, [r4, #0]
 8001c8a:	e002      	b.n	8001c92 <bma400_init+0x62>
        }
        else
        {
            dev->dummy_byte = 0;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	721a      	strb	r2, [r3, #8]
        }

        if (rslt == BMA400_OK)
 8001c92:	250f      	movs	r5, #15
 8001c94:	197b      	adds	r3, r7, r5
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11b      	bne.n	8001cd6 <bma400_init+0xa6>
        {
            /* Chip ID of the sensor is read */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8001c9e:	197c      	adds	r4, r7, r5
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	260e      	movs	r6, #14
 8001ca4:	19b9      	adds	r1, r7, r6
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f000 f89d 	bl	8001de8 <bma400_get_regs>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	7023      	strb	r3, [r4, #0]

            /* Proceed if everything is fine until now */
            if (rslt == BMA400_OK)
 8001cb2:	197b      	adds	r3, r7, r5
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10c      	bne.n	8001cd6 <bma400_init+0xa6>
            {
                /* Check for chip id validity */
                if (chip_id == BMA400_CHIP_ID)
 8001cbc:	19bb      	adds	r3, r7, r6
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b90      	cmp	r3, #144	@ 0x90
 8001cc2:	d104      	bne.n	8001cce <bma400_init+0x9e>
                {
                    /* Store the chip ID in dev structure */
                    dev->chip_id = chip_id;
 8001cc4:	19bb      	adds	r3, r7, r6
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	e003      	b.n	8001cd6 <bma400_init+0xa6>
                }
                else
                {
                    rslt = BMA400_E_DEV_NOT_FOUND;
 8001cce:	230f      	movs	r3, #15
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	22fd      	movs	r2, #253	@ 0xfd
 8001cd4:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    return rslt;
 8001cd6:	230f      	movs	r3, #15
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b25b      	sxtb	r3, r3
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b005      	add	sp, #20
 8001ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	00001388 	.word	0x00001388

08001cec <bma400_set_regs>:

int8_t bma400_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 8001cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	1c02      	adds	r2, r0, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t count;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001d00:	2617      	movs	r6, #23
 8001d02:	19bc      	adds	r4, r7, r6
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f000 fb2a 	bl	8002360 <null_ptr_check>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8001d10:	19bb      	adds	r3, r7, r6
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d158      	bne.n	8001dcc <bma400_set_regs+0xe0>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d055      	beq.n	8001dcc <bma400_set_regs+0xe0>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        if (len == 1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d116      	bne.n	8001d54 <bma400_set_regs+0x68>
        {
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691c      	ldr	r4, [r3, #16]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685d      	ldr	r5, [r3, #4]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	230f      	movs	r3, #15
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	7818      	ldrb	r0, [r3, #0]
 8001d38:	002b      	movs	r3, r5
 8001d3a:	47a0      	blx	r4
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	001a      	movs	r2, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	771a      	strb	r2, [r3, #28]
            if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	7f1b      	ldrb	r3, [r3, #28]
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <bma400_set_regs+0x68>
            {
                /* Failure case */
                rslt = BMA400_E_COM_FAIL;
 8001d4e:	19bb      	adds	r3, r7, r6
 8001d50:	22fe      	movs	r2, #254	@ 0xfe
 8001d52:	701a      	strb	r2, [r3, #0]

        /* Burst write is not allowed thus we split burst case write
         * into single byte writes Thus user can write multiple bytes
         * with ease
         */
        if (len > 1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d93d      	bls.n	8001dd6 <bma400_set_regs+0xea>
        {
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8001d5a:	2316      	movs	r3, #22
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e026      	b.n	8001db2 <bma400_set_regs+0xc6>
            {
                dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691c      	ldr	r4, [r3, #16]
 8001d68:	2316      	movs	r3, #22
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	18d1      	adds	r1, r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	250f      	movs	r5, #15
 8001d78:	197b      	adds	r3, r7, r5
 8001d7a:	7818      	ldrb	r0, [r3, #0]
 8001d7c:	0013      	movs	r3, r2
 8001d7e:	2201      	movs	r2, #1
 8001d80:	47a0      	blx	r4
 8001d82:	0003      	movs	r3, r0
 8001d84:	001a      	movs	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	771a      	strb	r2, [r3, #28]
                reg_addr++;
 8001d8a:	197b      	adds	r3, r7, r5
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	197b      	adds	r3, r7, r5
 8001d90:	3201      	adds	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
                if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	7f1b      	ldrb	r3, [r3, #28]
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <bma400_set_regs+0xba>
                {
                    /* Failure case */
                    rslt = BMA400_E_COM_FAIL;
 8001d9e:	2317      	movs	r3, #23
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	22fe      	movs	r2, #254	@ 0xfe
 8001da4:	701a      	strb	r2, [r3, #0]
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8001da6:	2116      	movs	r1, #22
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	3201      	adds	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	2316      	movs	r3, #22
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d90b      	bls.n	8001dd6 <bma400_set_regs+0xea>
 8001dbe:	2317      	movs	r3, #23
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b25b      	sxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0cc      	beq.n	8001d64 <bma400_set_regs+0x78>
        if (len > 1)
 8001dca:	e004      	b.n	8001dd6 <bma400_set_regs+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001dcc:	2317      	movs	r3, #23
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	22ff      	movs	r2, #255	@ 0xff
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e000      	b.n	8001dd8 <bma400_set_regs+0xec>
        if (len > 1)
 8001dd6:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 8001dd8:	2317      	movs	r3, #23
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b25b      	sxtb	r3, r3
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b007      	add	sp, #28
 8001de6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001de8 <bma400_get_regs>:

int8_t bma400_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	b0a7      	sub	sp, #156	@ 0x9c
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	250f      	movs	r5, #15
 8001df6:	197b      	adds	r3, r7, r5
 8001df8:	1c02      	adds	r2, r0, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t index;
    uint8_t temp_buff[BMA400_MAX_LEN];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001dfc:	2697      	movs	r6, #151	@ 0x97
 8001dfe:	19bc      	adds	r4, r7, r6
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 faac 	bl	8002360 <null_ptr_check>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8001e0c:	19bb      	adds	r3, r7, r6
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d14a      	bne.n	8001eac <bma400_get_regs+0xc4>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d047      	beq.n	8001eac <bma400_get_regs+0xc4>
    {
        if (dev->intf != BMA400_I2C_INTF)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	785b      	ldrb	r3, [r3, #1]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d006      	beq.n	8001e32 <bma400_get_regs+0x4a>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 8001e24:	197b      	adds	r3, r7, r5
 8001e26:	197a      	adds	r2, r7, r5
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	2180      	movs	r1, #128	@ 0x80
 8001e2c:	4249      	negs	r1, r1
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68dc      	ldr	r4, [r3, #12]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	7a1b      	ldrb	r3, [r3, #8]
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	18d2      	adds	r2, r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685d      	ldr	r5, [r3, #4]
 8001e44:	2314      	movs	r3, #20
 8001e46:	18f9      	adds	r1, r7, r3
 8001e48:	230f      	movs	r3, #15
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	7818      	ldrb	r0, [r3, #0]
 8001e4e:	002b      	movs	r3, r5
 8001e50:	47a0      	blx	r4
 8001e52:	0003      	movs	r3, r0
 8001e54:	001a      	movs	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	771a      	strb	r2, [r3, #28]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	7f1b      	ldrb	r3, [r3, #28]
 8001e5e:	b25b      	sxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d11e      	bne.n	8001ea2 <bma400_get_regs+0xba>
        {
            for (index = 0; index < len; index++)
 8001e64:	2394      	movs	r3, #148	@ 0x94
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2200      	movs	r2, #0
 8001e6a:	801a      	strh	r2, [r3, #0]
 8001e6c:	e012      	b.n	8001e94 <bma400_get_regs+0xac>
            {
                /* Parse the data read and store in "reg_data"
                 * buffer so that the dummy byte is removed
                 * and user will get only valid data
                 */
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 8001e6e:	2094      	movs	r0, #148	@ 0x94
 8001e70:	183b      	adds	r3, r7, r0
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	7a12      	ldrb	r2, [r2, #8]
 8001e78:	189a      	adds	r2, r3, r2
 8001e7a:	183b      	adds	r3, r7, r0
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	18cb      	adds	r3, r1, r3
 8001e82:	2114      	movs	r1, #20
 8001e84:	1879      	adds	r1, r7, r1
 8001e86:	5c8a      	ldrb	r2, [r1, r2]
 8001e88:	701a      	strb	r2, [r3, #0]
            for (index = 0; index < len; index++)
 8001e8a:	183b      	adds	r3, r7, r0
 8001e8c:	881a      	ldrh	r2, [r3, #0]
 8001e8e:	183b      	adds	r3, r7, r0
 8001e90:	3201      	adds	r2, #1
 8001e92:	801a      	strh	r2, [r3, #0]
 8001e94:	2394      	movs	r3, #148	@ 0x94
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8e6      	bhi.n	8001e6e <bma400_get_regs+0x86>
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8001ea0:	e008      	b.n	8001eb4 <bma400_get_regs+0xcc>
            }
        }
        else
        {
            /* Failure case */
            rslt = BMA400_E_COM_FAIL;
 8001ea2:	2397      	movs	r3, #151	@ 0x97
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	22fe      	movs	r2, #254	@ 0xfe
 8001ea8:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8001eaa:	e003      	b.n	8001eb4 <bma400_get_regs+0xcc>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001eac:	2397      	movs	r3, #151	@ 0x97
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	22ff      	movs	r2, #255	@ 0xff
 8001eb2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001eb4:	2397      	movs	r3, #151	@ 0x97
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	b25b      	sxtb	r3, r3
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b027      	add	sp, #156	@ 0x9c
 8001ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ec4 <bma400_set_power_mode>:

    return rslt;
}

int8_t bma400_set_power_mode(uint8_t power_mode, struct bma400_dev *dev)
{
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	0002      	movs	r2, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	1dfb      	adds	r3, r7, #7
 8001ed0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data = 0;
 8001ed2:	260e      	movs	r6, #14
 8001ed4:	19bb      	adds	r3, r7, r6
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]

    rslt = null_ptr_check(dev);
 8001eda:	250f      	movs	r5, #15
 8001edc:	197c      	adds	r4, r7, r5
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f000 fa3d 	bl	8002360 <null_ptr_check>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8001eea:	197b      	adds	r3, r7, r5
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d108      	bne.n	8001f06 <bma400_set_power_mode+0x42>
    {
        rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 8001ef4:	197c      	adds	r4, r7, r5
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	19b9      	adds	r1, r7, r6
 8001efa:	2201      	movs	r2, #1
 8001efc:	2019      	movs	r0, #25
 8001efe:	f7ff ff73 	bl	8001de8 <bma400_get_regs>
 8001f02:	0003      	movs	r3, r0
 8001f04:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BMA400_OK)
 8001f06:	240f      	movs	r4, #15
 8001f08:	193b      	adds	r3, r7, r4
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d12d      	bne.n	8001f6e <bma400_set_power_mode+0xaa>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 8001f12:	200e      	movs	r0, #14
 8001f14:	183b      	adds	r3, r7, r0
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b25b      	sxtb	r3, r3
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	4393      	bics	r3, r2
 8001f1e:	b25a      	sxtb	r2, r3
 8001f20:	1dfb      	adds	r3, r7, #7
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b25b      	sxtb	r3, r3
 8001f26:	2103      	movs	r1, #3
 8001f28:	400b      	ands	r3, r1
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b25b      	sxtb	r3, r3
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	183b      	adds	r3, r7, r0
 8001f34:	701a      	strb	r2, [r3, #0]

        /* Set the power mode of sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 8001f36:	193c      	adds	r4, r7, r4
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	1839      	adds	r1, r7, r0
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2019      	movs	r0, #25
 8001f40:	f7ff fed4 	bl	8001cec <bma400_set_regs>
 8001f44:	0003      	movs	r3, r0
 8001f46:	7023      	strb	r3, [r4, #0]
        if (power_mode == BMA400_MODE_LOW_POWER)
 8001f48:	1dfb      	adds	r3, r7, #7
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <bma400_set_power_mode+0x9c>
        {
            /* A delay of 1/ODR is required to switch power modes
             * Low power mode has 25Hz frequency and hence it needs
             * 40ms delay to enter low power mode
             */
            dev->delay_us(40000, dev->intf_ptr);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4809      	ldr	r0, [pc, #36]	@ (8001f80 <bma400_set_power_mode+0xbc>)
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	4790      	blx	r2
 8001f5e:	e006      	b.n	8001f6e <bma400_set_power_mode+0xaa>
        }
        else
        {
            dev->delay_us(10000, dev->intf_ptr); /* TBC */
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4806      	ldr	r0, [pc, #24]	@ (8001f84 <bma400_set_power_mode+0xc0>)
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	4790      	blx	r2
        }
    }

    return rslt;
 8001f6e:	230f      	movs	r3, #15
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	b25b      	sxtb	r3, r3
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b005      	add	sp, #20
 8001f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	00009c40 	.word	0x00009c40
 8001f84:	00002710 	.word	0x00002710

08001f88 <bma400_get_accel_data>:

    return rslt;
}

int8_t bma400_get_accel_data(uint8_t data_sel, struct bma400_sensor_data *accel, struct bma400_dev *dev)
{
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	260f      	movs	r6, #15
 8001f94:	19bb      	adds	r3, r7, r6
 8001f96:	1c02      	adds	r2, r0, #0
 8001f98:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001f9a:	2517      	movs	r5, #23
 8001f9c:	197c      	adds	r4, r7, r5
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 f9dd 	bl	8002360 <null_ptr_check>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (accel != NULL))
 8001faa:	002a      	movs	r2, r5
 8001fac:	18bb      	adds	r3, r7, r2
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10d      	bne.n	8001fd2 <bma400_get_accel_data+0x4a>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00a      	beq.n	8001fd2 <bma400_get_accel_data+0x4a>
    {
        /* Read and store the accel data */
        rslt = get_accel_data(data_sel, accel, dev);
 8001fbc:	18bc      	adds	r4, r7, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	19bb      	adds	r3, r7, r6
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f000 fb50 	bl	800266c <get_accel_data>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	7023      	strb	r3, [r4, #0]
 8001fd0:	e003      	b.n	8001fda <bma400_get_accel_data+0x52>
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001fd2:	2317      	movs	r3, #23
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	22ff      	movs	r2, #255	@ 0xff
 8001fd8:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001fda:	2317      	movs	r3, #23
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b25b      	sxtb	r3, r3
}
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b007      	add	sp, #28
 8001fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fea <bma400_set_sensor_conf>:

int8_t bma400_set_sensor_conf(const struct bma400_sensor_conf *conf, uint16_t n_sett, struct bma400_dev *dev)
{
 8001fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fec:	b087      	sub	sp, #28
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	230a      	movs	r3, #10
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	1c0a      	adds	r2, r1, #0
 8001ffa:	801a      	strh	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx = 0;
 8001ffc:	2614      	movs	r6, #20
 8001ffe:	19bb      	adds	r3, r7, r6
 8002000:	2200      	movs	r2, #0
 8002002:	801a      	strh	r2, [r3, #0]
    uint8_t data_array[3] = { 0 };
 8002004:	2310      	movs	r3, #16
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	0018      	movs	r0, r3
 800200a:	2303      	movs	r3, #3
 800200c:	001a      	movs	r2, r3
 800200e:	2100      	movs	r1, #0
 8002010:	f004 fe5c 	bl	8006ccc <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002014:	2517      	movs	r5, #23
 8002016:	197c      	adds	r4, r7, r5
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	0018      	movs	r0, r3
 800201c:	f000 f9a0 	bl	8002360 <null_ptr_check>
 8002020:	0003      	movs	r3, r0
 8002022:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (conf != NULL))
 8002024:	197b      	adds	r3, r7, r5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b25b      	sxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d14d      	bne.n	80020ca <bma400_set_sensor_conf+0xe0>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d04a      	beq.n	80020ca <bma400_set_sensor_conf+0xe0>
    {
        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8002034:	197c      	adds	r4, r7, r5
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2210      	movs	r2, #16
 800203a:	18b9      	adds	r1, r7, r2
 800203c:	2203      	movs	r2, #3
 800203e:	2021      	movs	r0, #33	@ 0x21
 8002040:	f7ff fed2 	bl	8001de8 <bma400_get_regs>
 8002044:	0003      	movs	r3, r0
 8002046:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8002048:	197b      	adds	r3, r7, r5
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b25b      	sxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d140      	bne.n	80020d4 <bma400_set_sensor_conf+0xea>
        {
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8002052:	19bb      	adds	r3, r7, r6
 8002054:	2200      	movs	r2, #0
 8002056:	801a      	strh	r2, [r3, #0]
 8002058:	e018      	b.n	800208c <bma400_set_sensor_conf+0xa2>
            {
                rslt = set_sensor_conf(data_array, conf + idx, dev);
 800205a:	2514      	movs	r5, #20
 800205c:	197b      	adds	r3, r7, r5
 800205e:	881a      	ldrh	r2, [r3, #0]
 8002060:	0013      	movs	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	189b      	adds	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	001a      	movs	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1899      	adds	r1, r3, r2
 800206e:	2317      	movs	r3, #23
 8002070:	18fc      	adds	r4, r7, r3
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	2310      	movs	r3, #16
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	0018      	movs	r0, r3
 800207a:	f000 f995 	bl	80023a8 <set_sensor_conf>
 800207e:	0003      	movs	r3, r0
 8002080:	7023      	strb	r3, [r4, #0]
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8002082:	197b      	adds	r3, r7, r5
 8002084:	881a      	ldrh	r2, [r3, #0]
 8002086:	197b      	adds	r3, r7, r5
 8002088:	3201      	adds	r2, #1
 800208a:	801a      	strh	r2, [r3, #0]
 800208c:	2314      	movs	r3, #20
 800208e:	18fa      	adds	r2, r7, r3
 8002090:	230a      	movs	r3, #10
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	8812      	ldrh	r2, [r2, #0]
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d205      	bcs.n	80020a8 <bma400_set_sensor_conf+0xbe>
 800209c:	2317      	movs	r3, #23
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0d8      	beq.n	800205a <bma400_set_sensor_conf+0x70>
            }

            if (rslt == BMA400_OK)
 80020a8:	2217      	movs	r2, #23
 80020aa:	18bb      	adds	r3, r7, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b25b      	sxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10f      	bne.n	80020d4 <bma400_set_sensor_conf+0xea>
            {
                /* Set the interrupt pin mapping configurations */
                rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 80020b4:	18bc      	adds	r4, r7, r2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2210      	movs	r2, #16
 80020ba:	18b9      	adds	r1, r7, r2
 80020bc:	2203      	movs	r2, #3
 80020be:	2021      	movs	r0, #33	@ 0x21
 80020c0:	f7ff fe14 	bl	8001cec <bma400_set_regs>
 80020c4:	0003      	movs	r3, r0
 80020c6:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 80020c8:	e004      	b.n	80020d4 <bma400_set_sensor_conf+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 80020ca:	2317      	movs	r3, #23
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	22ff      	movs	r2, #255	@ 0xff
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e000      	b.n	80020d6 <bma400_set_sensor_conf+0xec>
        if (rslt == BMA400_OK)
 80020d4:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 80020d6:	2317      	movs	r3, #23
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b25b      	sxtb	r3, r3
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b007      	add	sp, #28
 80020e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080020e8 <bma400_set_device_conf>:

    return rslt;
}

int8_t bma400_set_device_conf(const struct bma400_device_conf *conf, uint8_t n_sett, struct bma400_dev *dev)
{
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	230b      	movs	r3, #11
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	1c0a      	adds	r2, r1, #0
 80020f8:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx;
    uint8_t data_array[3] = { 0 };
 80020fa:	2610      	movs	r6, #16
 80020fc:	19bb      	adds	r3, r7, r6
 80020fe:	0018      	movs	r0, r3
 8002100:	2303      	movs	r3, #3
 8002102:	001a      	movs	r2, r3
 8002104:	2100      	movs	r1, #0
 8002106:	f004 fde1 	bl	8006ccc <memset>

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800210a:	2517      	movs	r5, #23
 800210c:	197c      	adds	r4, r7, r5
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	0018      	movs	r0, r3
 8002112:	f000 f925 	bl	8002360 <null_ptr_check>
 8002116:	0003      	movs	r3, r0
 8002118:	7023      	strb	r3, [r4, #0]

    if ((rslt == BMA400_OK) && (conf != NULL))
 800211a:	197b      	adds	r3, r7, r5
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b25b      	sxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d000      	beq.n	8002126 <bma400_set_device_conf+0x3e>
 8002124:	e10e      	b.n	8002344 <bma400_set_device_conf+0x25c>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d100      	bne.n	800212e <bma400_set_device_conf+0x46>
 800212c:	e10a      	b.n	8002344 <bma400_set_device_conf+0x25c>
    {

        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 800212e:	197c      	adds	r4, r7, r5
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	19b9      	adds	r1, r7, r6
 8002134:	2203      	movs	r2, #3
 8002136:	2021      	movs	r0, #33	@ 0x21
 8002138:	f7ff fe56 	bl	8001de8 <bma400_get_regs>
 800213c:	0003      	movs	r3, r0
 800213e:	7023      	strb	r3, [r4, #0]

        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8002140:	2314      	movs	r3, #20
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	2200      	movs	r2, #0
 8002146:	801a      	strh	r2, [r3, #0]
 8002148:	e0db      	b.n	8002302 <bma400_set_device_conf+0x21a>
        {
            switch (conf[idx].type)
 800214a:	2314      	movs	r3, #20
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	881a      	ldrh	r2, [r3, #0]
 8002150:	0013      	movs	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	189b      	adds	r3, r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	001a      	movs	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	189b      	adds	r3, r3, r2
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d900      	bls.n	8002166 <bma400_set_device_conf+0x7e>
 8002164:	e0bf      	b.n	80022e6 <bma400_set_device_conf+0x1fe>
 8002166:	009a      	lsls	r2, r3, #2
 8002168:	4b7c      	ldr	r3, [pc, #496]	@ (800235c <bma400_set_device_conf+0x274>)
 800216a:	18d3      	adds	r3, r2, r3
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	469f      	mov	pc, r3
            {
                case BMA400_AUTOWAKEUP_TIMEOUT:
                    rslt = set_autowakeup_timeout(&conf[idx].param.auto_wakeup, dev);
 8002170:	2314      	movs	r3, #20
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	881a      	ldrh	r2, [r3, #0]
 8002176:	0013      	movs	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	001a      	movs	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	189b      	adds	r3, r3, r2
 8002184:	3302      	adds	r3, #2
 8002186:	2217      	movs	r2, #23
 8002188:	18bc      	adds	r4, r7, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	0011      	movs	r1, r2
 800218e:	0018      	movs	r0, r3
 8002190:	f000 fb56 	bl	8002840 <set_autowakeup_timeout>
 8002194:	0003      	movs	r3, r0
 8002196:	7023      	strb	r3, [r4, #0]
                    break;
 8002198:	e0ad      	b.n	80022f6 <bma400_set_device_conf+0x20e>
                case BMA400_AUTOWAKEUP_INT:
                    rslt = set_autowakeup_interrupt(&conf[idx].param.wakeup, dev);
 800219a:	2514      	movs	r5, #20
 800219c:	197b      	adds	r3, r7, r5
 800219e:	881a      	ldrh	r2, [r3, #0]
 80021a0:	0013      	movs	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	189b      	adds	r3, r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	001a      	movs	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	189b      	adds	r3, r3, r2
 80021ae:	3302      	adds	r3, #2
 80021b0:	2617      	movs	r6, #23
 80021b2:	19bc      	adds	r4, r7, r6
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	0011      	movs	r1, r2
 80021b8:	0018      	movs	r0, r3
 80021ba:	f000 fbdd 	bl	8002978 <set_autowakeup_interrupt>
 80021be:	0003      	movs	r3, r0
 80021c0:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 80021c2:	19bb      	adds	r3, r7, r6
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b25b      	sxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d000      	beq.n	80021ce <bma400_set_device_conf+0xe6>
 80021cc:	e090      	b.n	80022f0 <bma400_set_device_conf+0x208>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_WAKEUP_INT_MAP, conf[idx].param.wakeup.int_chan);
 80021ce:	197b      	adds	r3, r7, r5
 80021d0:	881a      	ldrh	r2, [r3, #0]
 80021d2:	0013      	movs	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	189b      	adds	r3, r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	001a      	movs	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	189b      	adds	r3, r3, r2
 80021e0:	7a5a      	ldrb	r2, [r3, #9]
 80021e2:	2310      	movs	r3, #16
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	2107      	movs	r1, #7
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 ffb7 	bl	800315c <map_int_pin>
                    }

                    break;
 80021ee:	e07f      	b.n	80022f0 <bma400_set_device_conf+0x208>
                case BMA400_AUTO_LOW_POWER:
                    rslt = set_auto_low_power(&conf[idx].param.auto_lp, dev);
 80021f0:	2314      	movs	r3, #20
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	881a      	ldrh	r2, [r3, #0]
 80021f6:	0013      	movs	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	189b      	adds	r3, r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	001a      	movs	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	189b      	adds	r3, r3, r2
 8002204:	3302      	adds	r3, #2
 8002206:	2217      	movs	r2, #23
 8002208:	18bc      	adds	r4, r7, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	0011      	movs	r1, r2
 800220e:	0018      	movs	r0, r3
 8002210:	f000 fc16 	bl	8002a40 <set_auto_low_power>
 8002214:	0003      	movs	r3, r0
 8002216:	7023      	strb	r3, [r4, #0]
                    break;
 8002218:	e06d      	b.n	80022f6 <bma400_set_device_conf+0x20e>
                case BMA400_INT_PIN_CONF:
                    rslt = set_int_pin_conf(conf[idx].param.int_conf, dev);
 800221a:	2314      	movs	r3, #20
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	881a      	ldrh	r2, [r3, #0]
 8002220:	0013      	movs	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	189b      	adds	r3, r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	001a      	movs	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	189b      	adds	r3, r3, r2
 800222e:	2217      	movs	r2, #23
 8002230:	18bc      	adds	r4, r7, r2
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	2202      	movs	r2, #2
 8002236:	5a9a      	ldrh	r2, [r3, r2]
 8002238:	2300      	movs	r3, #0
 800223a:	0412      	lsls	r2, r2, #16
 800223c:	0c12      	lsrs	r2, r2, #16
 800223e:	0c1b      	lsrs	r3, r3, #16
 8002240:	041b      	lsls	r3, r3, #16
 8002242:	4313      	orrs	r3, r2
 8002244:	0018      	movs	r0, r3
 8002246:	f001 faa9 	bl	800379c <set_int_pin_conf>
 800224a:	0003      	movs	r3, r0
 800224c:	7023      	strb	r3, [r4, #0]
                    break;
 800224e:	e052      	b.n	80022f6 <bma400_set_device_conf+0x20e>
                case BMA400_INT_OVERRUN_CONF:

                    /* Interrupt pin mapping */
                    map_int_pin(data_array, BMA400_INT_OVERRUN_MAP, conf[idx].param.overrun_int.int_chan);
 8002250:	2314      	movs	r3, #20
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	881a      	ldrh	r2, [r3, #0]
 8002256:	0013      	movs	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	189b      	adds	r3, r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	001a      	movs	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	189b      	adds	r3, r3, r2
 8002264:	789a      	ldrb	r2, [r3, #2]
 8002266:	2310      	movs	r3, #16
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	210b      	movs	r1, #11
 800226c:	0018      	movs	r0, r3
 800226e:	f000 ff75 	bl	800315c <map_int_pin>
                    break;
 8002272:	e040      	b.n	80022f6 <bma400_set_device_conf+0x20e>
                case BMA400_FIFO_CONF:
                    rslt = set_fifo_conf(&conf[idx].param.fifo_conf, dev);
 8002274:	2514      	movs	r5, #20
 8002276:	197b      	adds	r3, r7, r5
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	0013      	movs	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	189b      	adds	r3, r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	001a      	movs	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	189b      	adds	r3, r3, r2
 8002288:	3302      	adds	r3, #2
 800228a:	2617      	movs	r6, #23
 800228c:	19bc      	adds	r4, r7, r6
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	0011      	movs	r1, r2
 8002292:	0018      	movs	r0, r3
 8002294:	f001 fadb 	bl	800384e <set_fifo_conf>
 8002298:	0003      	movs	r3, r0
 800229a:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 800229c:	19bb      	adds	r3, r7, r6
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d126      	bne.n	80022f4 <bma400_set_device_conf+0x20c>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_FIFO_WM_INT_MAP, conf[idx].param.fifo_conf.fifo_wm_channel);
 80022a6:	197b      	adds	r3, r7, r5
 80022a8:	881a      	ldrh	r2, [r3, #0]
 80022aa:	0013      	movs	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	189b      	adds	r3, r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	001a      	movs	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	79da      	ldrb	r2, [r3, #7]
 80022ba:	2410      	movs	r4, #16
 80022bc:	193b      	adds	r3, r7, r4
 80022be:	2102      	movs	r1, #2
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 ff4b 	bl	800315c <map_int_pin>
                        map_int_pin(data_array, BMA400_FIFO_FULL_INT_MAP, conf[idx].param.fifo_conf.fifo_full_channel);
 80022c6:	197b      	adds	r3, r7, r5
 80022c8:	881a      	ldrh	r2, [r3, #0]
 80022ca:	0013      	movs	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	189b      	adds	r3, r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	001a      	movs	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	189b      	adds	r3, r3, r2
 80022d8:	799a      	ldrb	r2, [r3, #6]
 80022da:	193b      	adds	r3, r7, r4
 80022dc:	2103      	movs	r1, #3
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 ff3c 	bl	800315c <map_int_pin>
                    }

                    break;
 80022e4:	e006      	b.n	80022f4 <bma400_set_device_conf+0x20c>
                default:
                    rslt = BMA400_E_INVALID_CONFIG;
 80022e6:	2317      	movs	r3, #23
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	22fc      	movs	r2, #252	@ 0xfc
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	e002      	b.n	80022f6 <bma400_set_device_conf+0x20e>
                    break;
 80022f0:	46c0      	nop			@ (mov r8, r8)
 80022f2:	e000      	b.n	80022f6 <bma400_set_device_conf+0x20e>
                    break;
 80022f4:	46c0      	nop			@ (mov r8, r8)
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80022f6:	2114      	movs	r1, #20
 80022f8:	187b      	adds	r3, r7, r1
 80022fa:	881a      	ldrh	r2, [r3, #0]
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	3201      	adds	r2, #1
 8002300:	801a      	strh	r2, [r3, #0]
 8002302:	230b      	movs	r3, #11
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	2214      	movs	r2, #20
 800230c:	18ba      	adds	r2, r7, r2
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d206      	bcs.n	8002322 <bma400_set_device_conf+0x23a>
 8002314:	2317      	movs	r3, #23
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b25b      	sxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d100      	bne.n	8002322 <bma400_set_device_conf+0x23a>
 8002320:	e713      	b.n	800214a <bma400_set_device_conf+0x62>
            }
        }

        if (rslt == BMA400_OK)
 8002322:	2217      	movs	r2, #23
 8002324:	18bb      	adds	r3, r7, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b25b      	sxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10e      	bne.n	800234c <bma400_set_device_conf+0x264>
        {
            /* Set the interrupt pin mapping configurations */
            rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 800232e:	18bc      	adds	r4, r7, r2
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2210      	movs	r2, #16
 8002334:	18b9      	adds	r1, r7, r2
 8002336:	2203      	movs	r2, #3
 8002338:	2021      	movs	r0, #33	@ 0x21
 800233a:	f7ff fcd7 	bl	8001cec <bma400_set_regs>
 800233e:	0003      	movs	r3, r0
 8002340:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8002342:	e003      	b.n	800234c <bma400_set_device_conf+0x264>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8002344:	2317      	movs	r3, #23
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	22ff      	movs	r2, #255	@ 0xff
 800234a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800234c:	2317      	movs	r3, #23
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	b25b      	sxtb	r3, r3
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b007      	add	sp, #28
 800235a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235c:	08007ae8 	.word	0x08007ae8

08002360 <null_ptr_check>:
/************************************************************************************/
/*********************** Static function definitions **********************************/
/************************************************************************************/

static int8_t null_ptr_check(const struct bma400_dev *dev)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->intf_ptr == NULL))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <null_ptr_check+0x26>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <null_ptr_check+0x26>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <null_ptr_check+0x26>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d104      	bne.n	8002390 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BMA400_E_NULL_PTR;
 8002386:	230f      	movs	r3, #15
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	22ff      	movs	r2, #255	@ 0xff
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e003      	b.n	8002398 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMA400_OK;
 8002390:	230f      	movs	r3, #15
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002398:	230f      	movs	r3, #15
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b25b      	sxtb	r3, r3
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b004      	add	sp, #16
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <set_sensor_conf>:

static int8_t set_sensor_conf(uint8_t *data, const struct bma400_sensor_conf *conf, struct bma400_dev *dev)
{
 80023a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMA400_E_INVALID_CONFIG;
 80023b4:	2117      	movs	r1, #23
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	22fc      	movs	r2, #252	@ 0xfc
 80023ba:	701a      	strb	r2, [r3, #0]
    uint8_t int_enable = 0;
 80023bc:	2516      	movs	r5, #22
 80023be:	197b      	adds	r3, r7, r5
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
    enum bma400_int_chan int_map = BMA400_UNMAP_INT_PIN;
 80023c4:	2615      	movs	r6, #21
 80023c6:	19bb      	adds	r3, r7, r6
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]

    if (BMA400_ACCEL == conf->type)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d110      	bne.n	80023f6 <set_sensor_conf+0x4e>
    {
        /* Setting Accel configurations */
        rslt = set_accel_conf(&conf->param.accel, dev);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3302      	adds	r3, #2
 80023d8:	187c      	adds	r4, r7, r1
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	0011      	movs	r1, r2
 80023de:	0018      	movs	r0, r3
 80023e0:	f000 f8aa 	bl	8002538 <set_accel_conf>
 80023e4:	0003      	movs	r3, r0
 80023e6:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_DATA_READY_INT_MAP;
 80023e8:	197b      	adds	r3, r7, r5
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.accel.int_chan;
 80023ee:	19bb      	adds	r3, r7, r6
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	7a12      	ldrb	r2, [r2, #8]
 80023f4:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_TAP_INT == conf->type)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d113      	bne.n	8002426 <set_sensor_conf+0x7e>
    {
        /* Setting tap configurations */
        rslt = set_tap_conf(&conf->param.tap, dev);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3302      	adds	r3, #2
 8002402:	2217      	movs	r2, #23
 8002404:	18bc      	adds	r4, r7, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	0011      	movs	r1, r2
 800240a:	0018      	movs	r0, r3
 800240c:	f000 fb96 	bl	8002b3c <set_tap_conf>
 8002410:	0003      	movs	r3, r0
 8002412:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_TAP_INT_MAP;
 8002414:	2316      	movs	r3, #22
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	2209      	movs	r2, #9
 800241a:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.tap.int_chan;
 800241c:	2315      	movs	r3, #21
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	79d2      	ldrb	r2, [r2, #7]
 8002424:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ACTIVITY_CHANGE_INT == conf->type)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d113      	bne.n	8002456 <set_sensor_conf+0xae>
    {
        /* Setting activity change configurations */
        rslt = set_activity_change_conf(&conf->param.act_ch, dev);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3302      	adds	r3, #2
 8002432:	2217      	movs	r2, #23
 8002434:	18bc      	adds	r4, r7, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	0011      	movs	r1, r2
 800243a:	0018      	movs	r0, r3
 800243c:	f000 fc04 	bl	8002c48 <set_activity_change_conf>
 8002440:	0003      	movs	r3, r0
 8002442:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ACT_CH_INT_MAP;
 8002444:	2316      	movs	r3, #22
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	2208      	movs	r2, #8
 800244a:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.act_ch.int_chan;
 800244c:	2315      	movs	r3, #21
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	7992      	ldrb	r2, [r2, #6]
 8002454:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN1_INT == conf->type)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d113      	bne.n	8002486 <set_sensor_conf+0xde>
    {
        /* Setting generic int 1 configurations */
        rslt = set_gen1_int(&conf->param.gen_int, dev);
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	3302      	adds	r3, #2
 8002462:	2217      	movs	r2, #23
 8002464:	18bc      	adds	r4, r7, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	0011      	movs	r1, r2
 800246a:	0018      	movs	r0, r3
 800246c:	f000 fc3e 	bl	8002cec <set_gen1_int>
 8002470:	0003      	movs	r3, r0
 8002472:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN1_INT_MAP;
 8002474:	2316      	movs	r3, #22
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2205      	movs	r2, #5
 800247a:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 800247c:	2315      	movs	r3, #21
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	7c92      	ldrb	r2, [r2, #18]
 8002484:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN2_INT == conf->type)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b04      	cmp	r3, #4
 800248c:	d113      	bne.n	80024b6 <set_sensor_conf+0x10e>
    {
        /* Setting generic int 2 configurations */
        rslt = set_gen2_int(&conf->param.gen_int, dev);
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	3302      	adds	r3, #2
 8002492:	2217      	movs	r2, #23
 8002494:	18bc      	adds	r4, r7, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	0011      	movs	r1, r2
 800249a:	0018      	movs	r0, r3
 800249c:	f000 fcf6 	bl	8002e8c <set_gen2_int>
 80024a0:	0003      	movs	r3, r0
 80024a2:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN2_INT_MAP;
 80024a4:	2316      	movs	r3, #22
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2204      	movs	r2, #4
 80024aa:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 80024ac:	2315      	movs	r3, #21
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	7c92      	ldrb	r2, [r2, #18]
 80024b4:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ORIENT_CHANGE_INT == conf->type)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b05      	cmp	r3, #5
 80024bc:	d113      	bne.n	80024e6 <set_sensor_conf+0x13e>
    {
        /* Setting orient int configurations */
        rslt = set_orient_int(&conf->param.orient, dev);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3302      	adds	r3, #2
 80024c2:	2217      	movs	r2, #23
 80024c4:	18bc      	adds	r4, r7, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	0011      	movs	r1, r2
 80024ca:	0018      	movs	r0, r3
 80024cc:	f000 fdae 	bl	800302c <set_orient_int>
 80024d0:	0003      	movs	r3, r0
 80024d2:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ORIENT_CH_INT_MAP;
 80024d4:	2316      	movs	r3, #22
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	2206      	movs	r2, #6
 80024da:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.orient.int_chan;
 80024dc:	2315      	movs	r3, #21
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	7b92      	ldrb	r2, [r2, #14]
 80024e4:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_STEP_COUNTER_INT == conf->type)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b06      	cmp	r3, #6
 80024ec:	d10c      	bne.n	8002508 <set_sensor_conf+0x160>
    {
        rslt = BMA400_OK;
 80024ee:	2317      	movs	r3, #23
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
        int_enable = BMA400_STEP_INT_MAP;
 80024f6:	2316      	movs	r3, #22
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	220a      	movs	r2, #10
 80024fc:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.step_cnt.int_chan;
 80024fe:	2315      	movs	r3, #21
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	7892      	ldrb	r2, [r2, #2]
 8002506:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BMA400_OK)
 8002508:	2317      	movs	r3, #23
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b25b      	sxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <set_sensor_conf+0x180>
    {
        /* Int pin mapping settings */
        map_int_pin(data, int_enable, int_map);
 8002514:	2315      	movs	r3, #21
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	2316      	movs	r3, #22
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	7819      	ldrb	r1, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	0018      	movs	r0, r3
 8002524:	f000 fe1a 	bl	800315c <map_int_pin>
    }

    return rslt;
 8002528:	2317      	movs	r3, #23
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	b25b      	sxtb	r3, r3
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	b007      	add	sp, #28
 8002536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002538 <set_accel_conf>:

    return rslt;
}

static int8_t set_accel_conf(const struct bma400_acc_conf *accel_conf, struct bma400_dev *dev)
{
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 8002542:	250c      	movs	r5, #12
 8002544:	197b      	adds	r3, r7, r5
 8002546:	4a48      	ldr	r2, [pc, #288]	@ (8002668 <set_accel_conf+0x130>)
 8002548:	8811      	ldrh	r1, [r2, #0]
 800254a:	8019      	strh	r1, [r3, #0]
 800254c:	7892      	ldrb	r2, [r2, #2]
 800254e:	709a      	strb	r2, [r3, #2]

    /* Update the accel configurations from the user structure
     * accel_conf
     */
    rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8002550:	260f      	movs	r6, #15
 8002552:	19bc      	adds	r4, r7, r6
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	1979      	adds	r1, r7, r5
 8002558:	2203      	movs	r2, #3
 800255a:	2019      	movs	r0, #25
 800255c:	f7ff fc44 	bl	8001de8 <bma400_get_regs>
 8002560:	0003      	movs	r3, r0
 8002562:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8002564:	0034      	movs	r4, r6
 8002566:	193b      	adds	r3, r7, r4
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b25b      	sxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d173      	bne.n	8002658 <set_accel_conf+0x120>
    {
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8002570:	0028      	movs	r0, r5
 8002572:	183b      	adds	r3, r7, r0
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b25b      	sxtb	r3, r3
 8002578:	227f      	movs	r2, #127	@ 0x7f
 800257a:	4013      	ands	r3, r2
 800257c:	b25a      	sxtb	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	795b      	ldrb	r3, [r3, #5]
 8002582:	b25b      	sxtb	r3, r3
 8002584:	01db      	lsls	r3, r3, #7
 8002586:	b25b      	sxtb	r3, r3
 8002588:	4313      	orrs	r3, r2
 800258a:	b25b      	sxtb	r3, r3
 800258c:	b2da      	uxtb	r2, r3
 800258e:	183b      	adds	r3, r7, r0
 8002590:	701a      	strb	r2, [r3, #0]
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 8002592:	183b      	adds	r3, r7, r0
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	b25b      	sxtb	r3, r3
 8002598:	2260      	movs	r2, #96	@ 0x60
 800259a:	4393      	bics	r3, r2
 800259c:	b25a      	sxtb	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	791b      	ldrb	r3, [r3, #4]
 80025a2:	b25b      	sxtb	r3, r3
 80025a4:	015b      	lsls	r3, r3, #5
 80025a6:	b25b      	sxtb	r3, r3
 80025a8:	2160      	movs	r1, #96	@ 0x60
 80025aa:	400b      	ands	r3, r1
 80025ac:	b25b      	sxtb	r3, r3
 80025ae:	4313      	orrs	r3, r2
 80025b0:	b25b      	sxtb	r3, r3
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	183b      	adds	r3, r7, r0
 80025b6:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 80025b8:	183b      	adds	r3, r7, r0
 80025ba:	785b      	ldrb	r3, [r3, #1]
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	223f      	movs	r2, #63	@ 0x3f
 80025c0:	4013      	ands	r3, r2
 80025c2:	b25a      	sxtb	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	785b      	ldrb	r3, [r3, #1]
 80025c8:	b25b      	sxtb	r3, r3
 80025ca:	019b      	lsls	r3, r3, #6
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	4313      	orrs	r3, r2
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	183b      	adds	r3, r7, r0
 80025d6:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 80025d8:	183b      	adds	r3, r7, r0
 80025da:	785b      	ldrb	r3, [r3, #1]
 80025dc:	b25b      	sxtb	r3, r3
 80025de:	2230      	movs	r2, #48	@ 0x30
 80025e0:	4393      	bics	r3, r2
 80025e2:	b25a      	sxtb	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	78db      	ldrb	r3, [r3, #3]
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	2130      	movs	r1, #48	@ 0x30
 80025f0:	400b      	ands	r3, r1
 80025f2:	b25b      	sxtb	r3, r3
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b25b      	sxtb	r3, r3
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	183b      	adds	r3, r7, r0
 80025fc:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 80025fe:	183b      	adds	r3, r7, r0
 8002600:	785b      	ldrb	r3, [r3, #1]
 8002602:	b25b      	sxtb	r3, r3
 8002604:	220f      	movs	r2, #15
 8002606:	4393      	bics	r3, r2
 8002608:	b25a      	sxtb	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	b25b      	sxtb	r3, r3
 8002610:	210f      	movs	r1, #15
 8002612:	400b      	ands	r3, r1
 8002614:	b25b      	sxtb	r3, r3
 8002616:	4313      	orrs	r3, r2
 8002618:	b25b      	sxtb	r3, r3
 800261a:	b2da      	uxtb	r2, r3
 800261c:	183b      	adds	r3, r7, r0
 800261e:	705a      	strb	r2, [r3, #1]
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 8002620:	183b      	adds	r3, r7, r0
 8002622:	789b      	ldrb	r3, [r3, #2]
 8002624:	b25b      	sxtb	r3, r3
 8002626:	220c      	movs	r2, #12
 8002628:	4393      	bics	r3, r2
 800262a:	b25a      	sxtb	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	789b      	ldrb	r3, [r3, #2]
 8002630:	b25b      	sxtb	r3, r3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	b25b      	sxtb	r3, r3
 8002636:	210c      	movs	r1, #12
 8002638:	400b      	ands	r3, r1
 800263a:	b25b      	sxtb	r3, r3
 800263c:	4313      	orrs	r3, r2
 800263e:	b25b      	sxtb	r3, r3
 8002640:	b2da      	uxtb	r2, r3
 8002642:	183b      	adds	r3, r7, r0
 8002644:	709a      	strb	r2, [r3, #2]

        /* Set the accel configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8002646:	193c      	adds	r4, r7, r4
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	1839      	adds	r1, r7, r0
 800264c:	2203      	movs	r2, #3
 800264e:	2019      	movs	r0, #25
 8002650:	f7ff fb4c 	bl	8001cec <bma400_set_regs>
 8002654:	0003      	movs	r3, r0
 8002656:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002658:	230f      	movs	r3, #15
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	b25b      	sxtb	r3, r3
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b005      	add	sp, #20
 8002666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002668:	08007a64 	.word	0x08007a64

0800266c <get_accel_data>:

    return rslt;
}

static int8_t get_accel_data(uint8_t data_sel, struct bma400_sensor_data *accel, struct bma400_dev *dev)
{
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	b08a      	sub	sp, #40	@ 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	240f      	movs	r4, #15
 8002678:	193b      	adds	r3, r7, r4
 800267a:	1c02      	adds	r2, r0, #0
 800267c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t data_array[9] = { 0 };
 800267e:	2510      	movs	r5, #16
 8002680:	197b      	adds	r3, r7, r5
 8002682:	0018      	movs	r0, r3
 8002684:	2309      	movs	r3, #9
 8002686:	001a      	movs	r2, r3
 8002688:	2100      	movs	r1, #0
 800268a:	f004 fb1f 	bl	8006ccc <memset>
    uint8_t msb;
    uint8_t time_0;
    uint16_t time_1;
    uint32_t time_2;

    if (data_sel == BMA400_DATA_ONLY)
 800268e:	193b      	adds	r3, r7, r4
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <get_accel_data+0x40>
    {
        /* Read the sensor data registers only */
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 6, dev);
 8002696:	2327      	movs	r3, #39	@ 0x27
 8002698:	18fc      	adds	r4, r7, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	1979      	adds	r1, r7, r5
 800269e:	2206      	movs	r2, #6
 80026a0:	2004      	movs	r0, #4
 80026a2:	f7ff fba1 	bl	8001de8 <bma400_get_regs>
 80026a6:	0003      	movs	r3, r0
 80026a8:	7023      	strb	r3, [r4, #0]
 80026aa:	e014      	b.n	80026d6 <get_accel_data+0x6a>
    }
    else if (data_sel == BMA400_DATA_SENSOR_TIME)
 80026ac:	230f      	movs	r3, #15
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d10b      	bne.n	80026ce <get_accel_data+0x62>
    {
        /* Read the sensor data along with sensor time */
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 9, dev);
 80026b6:	2327      	movs	r3, #39	@ 0x27
 80026b8:	18fc      	adds	r4, r7, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2210      	movs	r2, #16
 80026be:	18b9      	adds	r1, r7, r2
 80026c0:	2209      	movs	r2, #9
 80026c2:	2004      	movs	r0, #4
 80026c4:	f7ff fb90 	bl	8001de8 <bma400_get_regs>
 80026c8:	0003      	movs	r3, r0
 80026ca:	7023      	strb	r3, [r4, #0]
 80026cc:	e003      	b.n	80026d6 <get_accel_data+0x6a>
    }
    else
    {
        /* Invalid use of "data_sel" */
        rslt = BMA400_E_INVALID_CONFIG;
 80026ce:	2327      	movs	r3, #39	@ 0x27
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	22fc      	movs	r2, #252	@ 0xfc
 80026d4:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BMA400_OK)
 80026d6:	2327      	movs	r3, #39	@ 0x27
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b25b      	sxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d000      	beq.n	80026e4 <get_accel_data+0x78>
 80026e2:	e0a3      	b.n	800282c <get_accel_data+0x1c0>
    {
        lsb = data_array[0];
 80026e4:	2110      	movs	r1, #16
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	2024      	movs	r0, #36	@ 0x24
 80026ec:	183b      	adds	r3, r7, r0
 80026ee:	801a      	strh	r2, [r3, #0]
        msb = data_array[1];
 80026f0:	2423      	movs	r4, #35	@ 0x23
 80026f2:	193b      	adds	r3, r7, r4
 80026f4:	187a      	adds	r2, r7, r1
 80026f6:	7852      	ldrb	r2, [r2, #1]
 80026f8:	701a      	strb	r2, [r3, #0]

        /* accel X axis data */
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 80026fa:	193b      	adds	r3, r7, r4
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	b29a      	uxth	r2, r3
 8002704:	183b      	adds	r3, r7, r0
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	18d3      	adds	r3, r2, r3
 800270a:	b29b      	uxth	r3, r3
 800270c:	b21a      	sxth	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	801a      	strh	r2, [r3, #0]
        if (accel->x > 2047)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2200      	movs	r2, #0
 8002716:	5e9a      	ldrsh	r2, [r3, r2]
 8002718:	2380      	movs	r3, #128	@ 0x80
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	429a      	cmp	r2, r3
 800271e:	db0a      	blt.n	8002736 <get_accel_data+0xca>
        {
            /* Computing accel data negative value */
            accel->x = accel->x - 4096;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2200      	movs	r2, #0
 8002724:	5e9b      	ldrsh	r3, [r3, r2]
 8002726:	b29b      	uxth	r3, r3
 8002728:	4a44      	ldr	r2, [pc, #272]	@ (800283c <get_accel_data+0x1d0>)
 800272a:	4694      	mov	ip, r2
 800272c:	4463      	add	r3, ip
 800272e:	b29b      	uxth	r3, r3
 8002730:	b21a      	sxth	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	801a      	strh	r2, [r3, #0]
        }

        lsb = data_array[2];
 8002736:	2110      	movs	r1, #16
 8002738:	187b      	adds	r3, r7, r1
 800273a:	789a      	ldrb	r2, [r3, #2]
 800273c:	2024      	movs	r0, #36	@ 0x24
 800273e:	183b      	adds	r3, r7, r0
 8002740:	801a      	strh	r2, [r3, #0]
        msb = data_array[3];
 8002742:	2423      	movs	r4, #35	@ 0x23
 8002744:	193b      	adds	r3, r7, r4
 8002746:	187a      	adds	r2, r7, r1
 8002748:	78d2      	ldrb	r2, [r2, #3]
 800274a:	701a      	strb	r2, [r3, #0]

        /* accel Y axis data */
        accel->y = (int16_t)(((uint16_t)msb * 256) | lsb);
 800274c:	193b      	adds	r3, r7, r4
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	b29b      	uxth	r3, r3
 8002756:	b21a      	sxth	r2, r3
 8002758:	183b      	adds	r3, r7, r0
 800275a:	2100      	movs	r1, #0
 800275c:	5e5b      	ldrsh	r3, [r3, r1]
 800275e:	4313      	orrs	r3, r2
 8002760:	b21a      	sxth	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	805a      	strh	r2, [r3, #2]
        if (accel->y > 2047)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2202      	movs	r2, #2
 800276a:	5e9a      	ldrsh	r2, [r3, r2]
 800276c:	2380      	movs	r3, #128	@ 0x80
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	429a      	cmp	r2, r3
 8002772:	db0a      	blt.n	800278a <get_accel_data+0x11e>
        {
            /* Computing accel data negative value */
            accel->y = accel->y - 4096;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2202      	movs	r2, #2
 8002778:	5e9b      	ldrsh	r3, [r3, r2]
 800277a:	b29b      	uxth	r3, r3
 800277c:	4a2f      	ldr	r2, [pc, #188]	@ (800283c <get_accel_data+0x1d0>)
 800277e:	4694      	mov	ip, r2
 8002780:	4463      	add	r3, ip
 8002782:	b29b      	uxth	r3, r3
 8002784:	b21a      	sxth	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	805a      	strh	r2, [r3, #2]
        }

        lsb = data_array[4];
 800278a:	2110      	movs	r1, #16
 800278c:	187b      	adds	r3, r7, r1
 800278e:	791a      	ldrb	r2, [r3, #4]
 8002790:	2024      	movs	r0, #36	@ 0x24
 8002792:	183b      	adds	r3, r7, r0
 8002794:	801a      	strh	r2, [r3, #0]
        msb = data_array[5];
 8002796:	2423      	movs	r4, #35	@ 0x23
 8002798:	193b      	adds	r3, r7, r4
 800279a:	187a      	adds	r2, r7, r1
 800279c:	7952      	ldrb	r2, [r2, #5]
 800279e:	701a      	strb	r2, [r3, #0]

        /* accel Z axis data */
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 80027a0:	193b      	adds	r3, r7, r4
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	b21a      	sxth	r2, r3
 80027ac:	183b      	adds	r3, r7, r0
 80027ae:	2100      	movs	r1, #0
 80027b0:	5e5b      	ldrsh	r3, [r3, r1]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	b21a      	sxth	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	809a      	strh	r2, [r3, #4]
        if (accel->z > 2047)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2204      	movs	r2, #4
 80027be:	5e9a      	ldrsh	r2, [r3, r2]
 80027c0:	2380      	movs	r3, #128	@ 0x80
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	429a      	cmp	r2, r3
 80027c6:	db0a      	blt.n	80027de <get_accel_data+0x172>
        {
            /* Computing accel data negative value */
            accel->z = accel->z - 4096;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2204      	movs	r2, #4
 80027cc:	5e9b      	ldrsh	r3, [r3, r2]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4a1a      	ldr	r2, [pc, #104]	@ (800283c <get_accel_data+0x1d0>)
 80027d2:	4694      	mov	ip, r2
 80027d4:	4463      	add	r3, ip
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	b21a      	sxth	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	809a      	strh	r2, [r3, #4]
        }

        if (data_sel == BMA400_DATA_ONLY)
 80027de:	230f      	movs	r3, #15
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <get_accel_data+0x182>
        {
            /* Update sensortime as 0 */
            accel->sensortime = 0;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
        }

        if (data_sel == BMA400_DATA_SENSOR_TIME)
 80027ee:	230f      	movs	r3, #15
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d119      	bne.n	800282c <get_accel_data+0x1c0>
        {
            /* Sensor-time data*/
            time_0 = data_array[6];
 80027f8:	2022      	movs	r0, #34	@ 0x22
 80027fa:	183b      	adds	r3, r7, r0
 80027fc:	2110      	movs	r1, #16
 80027fe:	187a      	adds	r2, r7, r1
 8002800:	7992      	ldrb	r2, [r2, #6]
 8002802:	701a      	strb	r2, [r3, #0]
            time_1 = ((uint16_t)data_array[7] << 8);
 8002804:	187b      	adds	r3, r7, r1
 8002806:	79db      	ldrb	r3, [r3, #7]
 8002808:	001a      	movs	r2, r3
 800280a:	2420      	movs	r4, #32
 800280c:	193b      	adds	r3, r7, r4
 800280e:	0212      	lsls	r2, r2, #8
 8002810:	801a      	strh	r2, [r3, #0]
            time_2 = ((uint32_t)data_array[8] << 16);
 8002812:	187b      	adds	r3, r7, r1
 8002814:	7a1b      	ldrb	r3, [r3, #8]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	61fb      	str	r3, [r7, #28]
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 800281a:	193b      	adds	r3, r7, r4
 800281c:	881a      	ldrh	r2, [r3, #0]
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	18d2      	adds	r2, r2, r3
 8002822:	183b      	adds	r3, r7, r0
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	18d2      	adds	r2, r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	609a      	str	r2, [r3, #8]
        }
    }

    return rslt;
 800282c:	2327      	movs	r3, #39	@ 0x27
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b25b      	sxtb	r3, r3
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b00a      	add	sp, #40	@ 0x28
 800283a:	bdb0      	pop	{r4, r5, r7, pc}
 800283c:	fffff000 	.word	0xfffff000

08002840 <set_autowakeup_timeout>:

static int8_t set_autowakeup_timeout(const struct bma400_auto_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 8002840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2];
    uint8_t lsb;
    uint8_t msb;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &data_array[1], 1, dev);
 800284a:	260f      	movs	r6, #15
 800284c:	19bc      	adds	r4, r7, r6
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	2508      	movs	r5, #8
 8002852:	197b      	adds	r3, r7, r5
 8002854:	1c59      	adds	r1, r3, #1
 8002856:	0013      	movs	r3, r2
 8002858:	2201      	movs	r2, #1
 800285a:	202d      	movs	r0, #45	@ 0x2d
 800285c:	f7ff fac4 	bl	8001de8 <bma400_get_regs>
 8002860:	0003      	movs	r3, r0
 8002862:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8002864:	0034      	movs	r4, r6
 8002866:	193b      	adds	r3, r7, r4
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	b25b      	sxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d13e      	bne.n	80028ee <set_autowakeup_timeout+0xae>
    {
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 8002870:	0028      	movs	r0, r5
 8002872:	183b      	adds	r3, r7, r0
 8002874:	785b      	ldrb	r3, [r3, #1]
 8002876:	b25b      	sxtb	r3, r3
 8002878:	2204      	movs	r2, #4
 800287a:	4393      	bics	r3, r2
 800287c:	b25a      	sxtb	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b25b      	sxtb	r3, r3
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	b25b      	sxtb	r3, r3
 8002888:	2104      	movs	r1, #4
 800288a:	400b      	ands	r3, r1
 800288c:	b25b      	sxtb	r3, r3
 800288e:	4313      	orrs	r3, r2
 8002890:	b25b      	sxtb	r3, r3
 8002892:	b2da      	uxtb	r2, r3
 8002894:	183b      	adds	r3, r7, r0
 8002896:	705a      	strb	r2, [r3, #1]

        /* LSB of timeout threshold */
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	885b      	ldrh	r3, [r3, #2]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	250e      	movs	r5, #14
 80028a0:	197b      	adds	r3, r7, r5
 80028a2:	210f      	movs	r1, #15
 80028a4:	400a      	ands	r2, r1
 80028a6:	701a      	strb	r2, [r3, #0]

        /* MSB of timeout threshold */
        msb = BMA400_GET_BITS(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_MSB);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	885b      	ldrh	r3, [r3, #2]
 80028ac:	111a      	asrs	r2, r3, #4
 80028ae:	210d      	movs	r1, #13
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	701a      	strb	r2, [r3, #0]

        /* Set the value in the data_array */
        data_array[0] = msb;
 80028b4:	183b      	adds	r3, r7, r0
 80028b6:	187a      	adds	r2, r7, r1
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT_THRES, lsb);
 80028bc:	183b      	adds	r3, r7, r0
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	b25b      	sxtb	r3, r3
 80028c2:	220f      	movs	r2, #15
 80028c4:	4013      	ands	r3, r2
 80028c6:	b25a      	sxtb	r2, r3
 80028c8:	197b      	adds	r3, r7, r5
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	4313      	orrs	r3, r2
 80028d4:	b25b      	sxtb	r3, r3
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	183b      	adds	r3, r7, r0
 80028da:	705a      	strb	r2, [r3, #1]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_0, data_array, 2, dev);
 80028dc:	193c      	adds	r4, r7, r4
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	1839      	adds	r1, r7, r0
 80028e2:	2202      	movs	r2, #2
 80028e4:	202c      	movs	r0, #44	@ 0x2c
 80028e6:	f7ff fa01 	bl	8001cec <bma400_set_regs>
 80028ea:	0003      	movs	r3, r0
 80028ec:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80028ee:	230f      	movs	r3, #15
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b25b      	sxtb	r3, r3
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b005      	add	sp, #20
 80028fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028fe <set_auto_wakeup>:

    return rslt;
}

int8_t set_auto_wakeup(uint8_t conf, struct bma400_dev *dev)
{
 80028fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	0002      	movs	r2, r0
 8002906:	6039      	str	r1, [r7, #0]
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 800290c:	260f      	movs	r6, #15
 800290e:	19bc      	adds	r4, r7, r6
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	250e      	movs	r5, #14
 8002914:	1979      	adds	r1, r7, r5
 8002916:	2201      	movs	r2, #1
 8002918:	202d      	movs	r0, #45	@ 0x2d
 800291a:	f7ff fa65 	bl	8001de8 <bma400_get_regs>
 800291e:	0003      	movs	r3, r0
 8002920:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8002922:	0034      	movs	r4, r6
 8002924:	193b      	adds	r3, r7, r4
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	b25b      	sxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11c      	bne.n	8002968 <set_auto_wakeup+0x6a>
    {
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 800292e:	0028      	movs	r0, r5
 8002930:	183b      	adds	r3, r7, r0
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	b25b      	sxtb	r3, r3
 8002936:	2202      	movs	r2, #2
 8002938:	4393      	bics	r3, r2
 800293a:	b25a      	sxtb	r2, r3
 800293c:	1dfb      	adds	r3, r7, #7
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b25b      	sxtb	r3, r3
 8002942:	18db      	adds	r3, r3, r3
 8002944:	b25b      	sxtb	r3, r3
 8002946:	2102      	movs	r1, #2
 8002948:	400b      	ands	r3, r1
 800294a:	b25b      	sxtb	r3, r3
 800294c:	4313      	orrs	r3, r2
 800294e:	b25b      	sxtb	r3, r3
 8002950:	b2da      	uxtb	r2, r3
 8002952:	183b      	adds	r3, r7, r0
 8002954:	701a      	strb	r2, [r3, #0]

        /* Enabling the Auto wakeup interrupt */
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 8002956:	193c      	adds	r4, r7, r4
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	1839      	adds	r1, r7, r0
 800295c:	2201      	movs	r2, #1
 800295e:	202d      	movs	r0, #45	@ 0x2d
 8002960:	f7ff f9c4 	bl	8001cec <bma400_set_regs>
 8002964:	0003      	movs	r3, r0
 8002966:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002968:	230f      	movs	r3, #15
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b25b      	sxtb	r3, r3
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	b005      	add	sp, #20
 8002976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002978 <set_autowakeup_interrupt>:

static int8_t set_autowakeup_interrupt(const struct bma400_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[5] = { 0 };
 8002982:	2408      	movs	r4, #8
 8002984:	193b      	adds	r3, r7, r4
 8002986:	0018      	movs	r0, r3
 8002988:	2305      	movs	r3, #5
 800298a:	001a      	movs	r2, r3
 800298c:	2100      	movs	r1, #0
 800298e:	f004 f99d 	bl	8006ccc <memset>

    /* Set the wakeup reference update */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 8002992:	0020      	movs	r0, r4
 8002994:	183b      	adds	r3, r7, r0
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b25b      	sxtb	r3, r3
 800299a:	2203      	movs	r2, #3
 800299c:	4393      	bics	r3, r2
 800299e:	b25a      	sxtb	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	2103      	movs	r1, #3
 80029a8:	400b      	ands	r3, r1
 80029aa:	b25b      	sxtb	r3, r3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b25b      	sxtb	r3, r3
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	183b      	adds	r3, r7, r0
 80029b4:	701a      	strb	r2, [r3, #0]

    /* Set the number of samples for interrupt condition evaluation */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 80029b6:	183b      	adds	r3, r7, r0
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b25b      	sxtb	r3, r3
 80029bc:	221c      	movs	r2, #28
 80029be:	4393      	bics	r3, r2
 80029c0:	b25a      	sxtb	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	211c      	movs	r1, #28
 80029ce:	400b      	ands	r3, r1
 80029d0:	b25b      	sxtb	r3, r3
 80029d2:	4313      	orrs	r3, r2
 80029d4:	b25b      	sxtb	r3, r3
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	183b      	adds	r3, r7, r0
 80029da:	701a      	strb	r2, [r3, #0]

    /* Enable low power wake-up interrupt for X,Y,Z axes*/
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 80029dc:	183b      	adds	r3, r7, r0
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	221f      	movs	r2, #31
 80029e4:	4013      	ands	r3, r2
 80029e6:	b25a      	sxtb	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	789b      	ldrb	r3, [r3, #2]
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	015b      	lsls	r3, r3, #5
 80029f0:	b25b      	sxtb	r3, r3
 80029f2:	4313      	orrs	r3, r2
 80029f4:	b25b      	sxtb	r3, r3
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	0001      	movs	r1, r0
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	701a      	strb	r2, [r3, #0]

    /* Set interrupt threshold configuration  */
    data_array[1] = wakeup_conf->int_wkup_threshold;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	78da      	ldrb	r2, [r3, #3]
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	705a      	strb	r2, [r3, #1]

    /* Set the reference acceleration x-axis for the wake-up interrupt */
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	791a      	ldrb	r2, [r3, #4]
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	709a      	strb	r2, [r3, #2]

    /* Set the reference acceleration y-axis for the wake-up interrupt */
    data_array[3] = wakeup_conf->int_wkup_ref_y;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	795a      	ldrb	r2, [r3, #5]
 8002a12:	187b      	adds	r3, r7, r1
 8002a14:	70da      	strb	r2, [r3, #3]

    /* Set the reference acceleration z-axis for the wake-up interrupt */
    data_array[4] = wakeup_conf->int_wkup_ref_z;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	799a      	ldrb	r2, [r3, #6]
 8002a1a:	187b      	adds	r3, r7, r1
 8002a1c:	711a      	strb	r2, [r3, #4]

    /* Set the wakeup interrupt configurations in the sensor */
    rslt = bma400_set_regs(BMA400_REG_WAKEUP_INT_CONF_0, data_array, 5, dev);
 8002a1e:	250f      	movs	r5, #15
 8002a20:	197c      	adds	r4, r7, r5
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	1879      	adds	r1, r7, r1
 8002a26:	2205      	movs	r2, #5
 8002a28:	202f      	movs	r0, #47	@ 0x2f
 8002a2a:	f7ff f95f 	bl	8001cec <bma400_set_regs>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	7023      	strb	r3, [r4, #0]

    return rslt;
 8002a32:	197b      	adds	r3, r7, r5
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b25b      	sxtb	r3, r3
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b004      	add	sp, #16
 8002a3e:	bdb0      	pop	{r4, r5, r7, pc}

08002a40 <set_auto_low_power>:

    return rslt;
}

static int8_t set_auto_low_power(const struct bma400_auto_lp_conf *auto_lp_conf, struct bma400_dev *dev)
{
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t timeout_msb;
    uint8_t timeout_lsb;

    rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8002a4a:	250f      	movs	r5, #15
 8002a4c:	197c      	adds	r4, r7, r5
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	260d      	movs	r6, #13
 8002a52:	19b9      	adds	r1, r7, r6
 8002a54:	2201      	movs	r2, #1
 8002a56:	202b      	movs	r0, #43	@ 0x2b
 8002a58:	f7ff f9c6 	bl	8001de8 <bma400_get_regs>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8002a60:	0028      	movs	r0, r5
 8002a62:	183b      	adds	r3, r7, r0
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d15f      	bne.n	8002b2c <set_auto_low_power+0xec>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_AUTO_LOW_POW, auto_lp_conf->auto_low_power_trigger);
 8002a6c:	19bb      	adds	r3, r7, r6
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b25b      	sxtb	r3, r3
 8002a72:	220f      	movs	r2, #15
 8002a74:	4393      	bics	r3, r2
 8002a76:	b25a      	sxtb	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b25b      	sxtb	r3, r3
 8002a7e:	210f      	movs	r1, #15
 8002a80:	400b      	ands	r3, r1
 8002a82:	b25b      	sxtb	r3, r3
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	19bb      	adds	r3, r7, r6
 8002a8c:	701a      	strb	r2, [r3, #0]

        /* If auto Low power timeout threshold is enabled */
        if (auto_lp_conf->auto_low_power_trigger & 0x0C)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	001a      	movs	r2, r3
 8002a94:	230c      	movs	r3, #12
 8002a96:	4013      	ands	r3, r2
 8002a98:	d038      	beq.n	8002b0c <set_auto_low_power+0xcc>
        {
            rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8002a9a:	0005      	movs	r5, r0
 8002a9c:	183c      	adds	r4, r7, r0
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	220c      	movs	r2, #12
 8002aa2:	18b9      	adds	r1, r7, r2
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	202a      	movs	r0, #42	@ 0x2a
 8002aa8:	f7ff f99e 	bl	8001de8 <bma400_get_regs>
 8002aac:	0003      	movs	r3, r0
 8002aae:	7023      	strb	r3, [r4, #0]
            if (rslt == BMA400_OK)
 8002ab0:	0028      	movs	r0, r5
 8002ab2:	183b      	adds	r3, r7, r0
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b25b      	sxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d127      	bne.n	8002b0c <set_auto_low_power+0xcc>
            {
                /* Compute the timeout threshold MSB value */
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	885b      	ldrh	r3, [r3, #2]
 8002ac0:	111b      	asrs	r3, r3, #4
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	250c      	movs	r5, #12
 8002ac6:	197b      	adds	r3, r7, r5
 8002ac8:	701a      	strb	r2, [r3, #0]

                /* Compute the timeout threshold LSB value */
                timeout_lsb = BMA400_GET_BITS_POS_0(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES_LSB);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	885b      	ldrh	r3, [r3, #2]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	240e      	movs	r4, #14
 8002ad2:	193b      	adds	r3, r7, r4
 8002ad4:	210f      	movs	r1, #15
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	701a      	strb	r2, [r3, #0]
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 8002ada:	19bb      	adds	r3, r7, r6
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	b25b      	sxtb	r3, r3
 8002ae0:	220f      	movs	r2, #15
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	b25a      	sxtb	r2, r3
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	4313      	orrs	r3, r2
 8002af2:	b25b      	sxtb	r3, r3
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	19bb      	adds	r3, r7, r6
 8002af8:	701a      	strb	r2, [r3, #0]

                /* Set the timeout threshold MSB value */
                rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8002afa:	183c      	adds	r4, r7, r0
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	1979      	adds	r1, r7, r5
 8002b00:	2201      	movs	r2, #1
 8002b02:	202a      	movs	r0, #42	@ 0x2a
 8002b04:	f7ff f8f2 	bl	8001cec <bma400_set_regs>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	7023      	strb	r3, [r4, #0]
            }
        }

        if (rslt == BMA400_OK)
 8002b0c:	220f      	movs	r2, #15
 8002b0e:	18bb      	adds	r3, r7, r2
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	b25b      	sxtb	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <set_auto_low_power+0xec>
        {
            /* Set the Auto low power configurations */
            rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8002b18:	18bc      	adds	r4, r7, r2
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	220d      	movs	r2, #13
 8002b1e:	18b9      	adds	r1, r7, r2
 8002b20:	2201      	movs	r2, #1
 8002b22:	202b      	movs	r0, #43	@ 0x2b
 8002b24:	f7ff f8e2 	bl	8001cec <bma400_set_regs>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8002b2c:	230f      	movs	r3, #15
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b25b      	sxtb	r3, r3
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b005      	add	sp, #20
 8002b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b3c <set_tap_conf>:

    return rslt;
}

static int8_t set_tap_conf(const struct bma400_tap_conf *tap_set, struct bma400_dev *dev)
{
 8002b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[2] = { 0, 0 };
 8002b46:	250c      	movs	r5, #12
 8002b48:	197b      	adds	r3, r7, r5
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	801a      	strh	r2, [r3, #0]

    rslt = bma400_get_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8002b4e:	260f      	movs	r6, #15
 8002b50:	19bc      	adds	r4, r7, r6
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	1979      	adds	r1, r7, r5
 8002b56:	2202      	movs	r2, #2
 8002b58:	2057      	movs	r0, #87	@ 0x57
 8002b5a:	f7ff f945 	bl	8001de8 <bma400_get_regs>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8002b62:	0034      	movs	r4, r6
 8002b64:	193b      	adds	r3, r7, r4
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d164      	bne.n	8002c38 <set_tap_conf+0xfc>
    {
        /* Set the axis to sense for tap */
        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_TAP_AXES_EN, tap_set->axes_sel);
 8002b6e:	0028      	movs	r0, r5
 8002b70:	183b      	adds	r3, r7, r0
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	2218      	movs	r2, #24
 8002b78:	4393      	bics	r3, r2
 8002b7a:	b25a      	sxtb	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	2118      	movs	r1, #24
 8002b88:	400b      	ands	r3, r1
 8002b8a:	b25b      	sxtb	r3, r3
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	183b      	adds	r3, r7, r0
 8002b94:	701a      	strb	r2, [r3, #0]

        /* Set the threshold for tap sensing */
        reg_data[0] = BMA400_SET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY, tap_set->sensitivity);
 8002b96:	183b      	adds	r3, r7, r0
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	4393      	bics	r3, r2
 8002ba0:	b25a      	sxtb	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	785b      	ldrb	r3, [r3, #1]
 8002ba6:	b25b      	sxtb	r3, r3
 8002ba8:	2107      	movs	r1, #7
 8002baa:	400b      	ands	r3, r1
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	183b      	adds	r3, r7, r0
 8002bb6:	701a      	strb	r2, [r3, #0]

        /* Set the Quiet_dt setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET_DT, tap_set->quiet_dt);
 8002bb8:	183b      	adds	r3, r7, r0
 8002bba:	785b      	ldrb	r3, [r3, #1]
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	2230      	movs	r2, #48	@ 0x30
 8002bc0:	4393      	bics	r3, r2
 8002bc2:	b25a      	sxtb	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	791b      	ldrb	r3, [r3, #4]
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	b25b      	sxtb	r3, r3
 8002bce:	2130      	movs	r1, #48	@ 0x30
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	183b      	adds	r3, r7, r0
 8002bdc:	705a      	strb	r2, [r3, #1]

        /* Set the Quiet setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET, tap_set->quiet);
 8002bde:	183b      	adds	r3, r7, r0
 8002be0:	785b      	ldrb	r3, [r3, #1]
 8002be2:	b25b      	sxtb	r3, r3
 8002be4:	220c      	movs	r2, #12
 8002be6:	4393      	bics	r3, r2
 8002be8:	b25a      	sxtb	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	78db      	ldrb	r3, [r3, #3]
 8002bee:	b25b      	sxtb	r3, r3
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	b25b      	sxtb	r3, r3
 8002bf4:	210c      	movs	r1, #12
 8002bf6:	400b      	ands	r3, r1
 8002bf8:	b25b      	sxtb	r3, r3
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	183b      	adds	r3, r7, r0
 8002c02:	705a      	strb	r2, [r3, #1]

        /* Set the tics_th setting */
        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH, tap_set->tics_th);
 8002c04:	183b      	adds	r3, r7, r0
 8002c06:	785b      	ldrb	r3, [r3, #1]
 8002c08:	b25b      	sxtb	r3, r3
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	b25a      	sxtb	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	789b      	ldrb	r3, [r3, #2]
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	2103      	movs	r1, #3
 8002c18:	400b      	ands	r3, r1
 8002c1a:	b25b      	sxtb	r3, r3
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b25b      	sxtb	r3, r3
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	183b      	adds	r3, r7, r0
 8002c24:	705a      	strb	r2, [r3, #1]

        /* Set the TAP configuration in the sensor*/
        rslt = bma400_set_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8002c26:	193c      	adds	r4, r7, r4
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	1839      	adds	r1, r7, r0
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	2057      	movs	r0, #87	@ 0x57
 8002c30:	f7ff f85c 	bl	8001cec <bma400_set_regs>
 8002c34:	0003      	movs	r3, r0
 8002c36:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002c38:	230f      	movs	r3, #15
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b25b      	sxtb	r3, r3
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b005      	add	sp, #20
 8002c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c48 <set_activity_change_conf>:

    return rslt;
}

static int8_t set_activity_change_conf(const struct bma400_act_ch_conf *act_ch_set, struct bma400_dev *dev)
{
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2] = { 0 };
 8002c52:	200c      	movs	r0, #12
 8002c54:	183b      	adds	r3, r7, r0
 8002c56:	2200      	movs	r2, #0
 8002c58:	801a      	strh	r2, [r3, #0]

    /* Set the activity change threshold */
    data_array[0] = act_ch_set->act_ch_thres;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	781a      	ldrb	r2, [r3, #0]
 8002c5e:	183b      	adds	r3, r7, r0
 8002c60:	701a      	strb	r2, [r3, #0]

    /* Set the axis to sense for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN, act_ch_set->axes_sel);
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	785b      	ldrb	r3, [r3, #1]
 8002c66:	b25b      	sxtb	r3, r3
 8002c68:	221f      	movs	r2, #31
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	b25a      	sxtb	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	015b      	lsls	r3, r3, #5
 8002c76:	b25b      	sxtb	r3, r3
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	183b      	adds	r3, r7, r0
 8002c80:	705a      	strb	r2, [r3, #1]

    /* Set the data source for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC, act_ch_set->data_source);
 8002c82:	183b      	adds	r3, r7, r0
 8002c84:	785b      	ldrb	r3, [r3, #1]
 8002c86:	b25b      	sxtb	r3, r3
 8002c88:	2210      	movs	r2, #16
 8002c8a:	4393      	bics	r3, r2
 8002c8c:	b25a      	sxtb	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	789b      	ldrb	r3, [r3, #2]
 8002c92:	b25b      	sxtb	r3, r3
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	b25b      	sxtb	r3, r3
 8002c98:	2110      	movs	r1, #16
 8002c9a:	400b      	ands	r3, r1
 8002c9c:	b25b      	sxtb	r3, r3
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	183b      	adds	r3, r7, r0
 8002ca6:	705a      	strb	r2, [r3, #1]

    /* Set the Number of sample points(NPTS)
     * for sensing activity change
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 8002ca8:	183b      	adds	r3, r7, r0
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	220f      	movs	r2, #15
 8002cb0:	4393      	bics	r3, r2
 8002cb2:	b25a      	sxtb	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	78db      	ldrb	r3, [r3, #3]
 8002cb8:	b25b      	sxtb	r3, r3
 8002cba:	210f      	movs	r1, #15
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	183b      	adds	r3, r7, r0
 8002cc8:	705a      	strb	r2, [r3, #1]

    /* Set the Activity change configuration in the sensor*/
    rslt = bma400_set_regs(BMA400_REG_ACT_CH_CONFIG_0, data_array, 2, dev);
 8002cca:	250f      	movs	r5, #15
 8002ccc:	197c      	adds	r4, r7, r5
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	1839      	adds	r1, r7, r0
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	2055      	movs	r0, #85	@ 0x55
 8002cd6:	f7ff f809 	bl	8001cec <bma400_set_regs>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	7023      	strb	r3, [r4, #0]

    return rslt;
 8002cde:	197b      	adds	r3, r7, r5
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b25b      	sxtb	r3, r3
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b004      	add	sp, #16
 8002cea:	bdb0      	pop	{r4, r5, r7, pc}

08002cec <set_gen1_int>:

    return rslt;
}

static int8_t set_gen1_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 8002cf6:	240c      	movs	r4, #12
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	230b      	movs	r3, #11
 8002cfe:	001a      	movs	r2, r3
 8002d00:	2100      	movs	r1, #0
 8002d02:	f003 ffe3 	bl	8006ccc <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8002d06:	0020      	movs	r0, r4
 8002d08:	183b      	adds	r3, r7, r0
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	221f      	movs	r2, #31
 8002d10:	4013      	ands	r3, r2
 8002d12:	b25a      	sxtb	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	791b      	ldrb	r3, [r3, #4]
 8002d18:	b25b      	sxtb	r3, r3
 8002d1a:	015b      	lsls	r3, r3, #5
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	183b      	adds	r3, r7, r0
 8002d26:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8002d28:	183b      	adds	r3, r7, r0
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	2210      	movs	r2, #16
 8002d30:	4393      	bics	r3, r2
 8002d32:	b25a      	sxtb	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	795b      	ldrb	r3, [r3, #5]
 8002d38:	b25b      	sxtb	r3, r3
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	b25b      	sxtb	r3, r3
 8002d3e:	2110      	movs	r1, #16
 8002d40:	400b      	ands	r3, r1
 8002d42:	b25b      	sxtb	r3, r3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	183b      	adds	r3, r7, r0
 8002d4c:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8002d4e:	183b      	adds	r3, r7, r0
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	220c      	movs	r2, #12
 8002d56:	4393      	bics	r3, r2
 8002d58:	b25a      	sxtb	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7a1b      	ldrb	r3, [r3, #8]
 8002d5e:	b25b      	sxtb	r3, r3
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	b25b      	sxtb	r3, r3
 8002d64:	210c      	movs	r1, #12
 8002d66:	400b      	ands	r3, r1
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	b25b      	sxtb	r3, r3
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	183b      	adds	r3, r7, r0
 8002d72:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8002d74:	183b      	adds	r3, r7, r0
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b25b      	sxtb	r3, r3
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	b25a      	sxtb	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7a5b      	ldrb	r3, [r3, #9]
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	2103      	movs	r1, #3
 8002d88:	400b      	ands	r3, r1
 8002d8a:	b25b      	sxtb	r3, r3
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	b25b      	sxtb	r3, r3
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	183b      	adds	r3, r7, r0
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8002d96:	183b      	adds	r3, r7, r0
 8002d98:	785b      	ldrb	r3, [r3, #1]
 8002d9a:	b25b      	sxtb	r3, r3
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	4393      	bics	r3, r2
 8002da0:	b25a      	sxtb	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	799b      	ldrb	r3, [r3, #6]
 8002da6:	b25b      	sxtb	r3, r3
 8002da8:	18db      	adds	r3, r3, r3
 8002daa:	b25b      	sxtb	r3, r3
 8002dac:	2102      	movs	r1, #2
 8002dae:	400b      	ands	r3, r1
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	4313      	orrs	r3, r2
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	183b      	adds	r3, r7, r0
 8002dba:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8002dbc:	183b      	adds	r3, r7, r0
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4393      	bics	r3, r2
 8002dc6:	b25a      	sxtb	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	79db      	ldrb	r3, [r3, #7]
 8002dcc:	b25b      	sxtb	r3, r3
 8002dce:	2101      	movs	r1, #1
 8002dd0:	400b      	ands	r3, r1
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	b25b      	sxtb	r3, r3
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	0001      	movs	r1, r0
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	885b      	ldrh	r3, [r3, #2]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	885b      	ldrh	r3, [r3, #2]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7a1b      	ldrb	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d12e      	bne.n	8002e66 <set_gen1_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	895b      	ldrh	r3, [r3, #10]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	187b      	adds	r3, r7, r1
 8002e10:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	895b      	ldrh	r3, [r3, #10]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	899b      	ldrh	r3, [r3, #12]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	187b      	adds	r3, r7, r1
 8002e28:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	899b      	ldrh	r3, [r3, #12]
 8002e2e:	0a1b      	lsrs	r3, r3, #8
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	89db      	ldrh	r3, [r3, #14]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	89db      	ldrh	r3, [r3, #14]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	187b      	adds	r3, r7, r1
 8002e4e:	729a      	strb	r2, [r3, #10]

        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 11, dev);
 8002e50:	2317      	movs	r3, #23
 8002e52:	18fc      	adds	r4, r7, r3
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	1879      	adds	r1, r7, r1
 8002e58:	220b      	movs	r2, #11
 8002e5a:	203f      	movs	r0, #63	@ 0x3f
 8002e5c:	f7fe ff46 	bl	8001cec <bma400_set_regs>
 8002e60:	0003      	movs	r3, r0
 8002e62:	7023      	strb	r3, [r4, #0]
 8002e64:	e00a      	b.n	8002e7c <set_gen1_int+0x190>
    }
    else
    {
        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 5, dev);
 8002e66:	2317      	movs	r3, #23
 8002e68:	18fc      	adds	r4, r7, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	220c      	movs	r2, #12
 8002e6e:	18b9      	adds	r1, r7, r2
 8002e70:	2205      	movs	r2, #5
 8002e72:	203f      	movs	r0, #63	@ 0x3f
 8002e74:	f7fe ff3a 	bl	8001cec <bma400_set_regs>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002e7c:	2317      	movs	r3, #23
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b25b      	sxtb	r3, r3
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b007      	add	sp, #28
 8002e8a:	bd90      	pop	{r4, r7, pc}

08002e8c <set_gen2_int>:

    return rslt;
}

static int8_t set_gen2_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 8002e96:	240c      	movs	r4, #12
 8002e98:	193b      	adds	r3, r7, r4
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	230b      	movs	r3, #11
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	f003 ff13 	bl	8006ccc <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8002ea6:	0020      	movs	r0, r4
 8002ea8:	183b      	adds	r3, r7, r0
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	b25b      	sxtb	r3, r3
 8002eae:	221f      	movs	r2, #31
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	b25a      	sxtb	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	791b      	ldrb	r3, [r3, #4]
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	015b      	lsls	r3, r3, #5
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	183b      	adds	r3, r7, r0
 8002ec6:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8002ec8:	183b      	adds	r3, r7, r0
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b25b      	sxtb	r3, r3
 8002ece:	2210      	movs	r2, #16
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	b25a      	sxtb	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	795b      	ldrb	r3, [r3, #5]
 8002ed8:	b25b      	sxtb	r3, r3
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	b25b      	sxtb	r3, r3
 8002ede:	2110      	movs	r1, #16
 8002ee0:	400b      	ands	r3, r1
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b25b      	sxtb	r3, r3
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	183b      	adds	r3, r7, r0
 8002eec:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8002eee:	183b      	adds	r3, r7, r0
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	b25b      	sxtb	r3, r3
 8002ef4:	220c      	movs	r2, #12
 8002ef6:	4393      	bics	r3, r2
 8002ef8:	b25a      	sxtb	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7a1b      	ldrb	r3, [r3, #8]
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	b25b      	sxtb	r3, r3
 8002f04:	210c      	movs	r1, #12
 8002f06:	400b      	ands	r3, r1
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	b25b      	sxtb	r3, r3
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	183b      	adds	r3, r7, r0
 8002f12:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8002f14:	183b      	adds	r3, r7, r0
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	4393      	bics	r3, r2
 8002f1e:	b25a      	sxtb	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7a5b      	ldrb	r3, [r3, #9]
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	2103      	movs	r1, #3
 8002f28:	400b      	ands	r3, r1
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	183b      	adds	r3, r7, r0
 8002f34:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8002f36:	183b      	adds	r3, r7, r0
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	b25b      	sxtb	r3, r3
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	4393      	bics	r3, r2
 8002f40:	b25a      	sxtb	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	799b      	ldrb	r3, [r3, #6]
 8002f46:	b25b      	sxtb	r3, r3
 8002f48:	18db      	adds	r3, r3, r3
 8002f4a:	b25b      	sxtb	r3, r3
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	400b      	ands	r3, r1
 8002f50:	b25b      	sxtb	r3, r3
 8002f52:	4313      	orrs	r3, r2
 8002f54:	b25b      	sxtb	r3, r3
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	183b      	adds	r3, r7, r0
 8002f5a:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8002f5c:	183b      	adds	r3, r7, r0
 8002f5e:	785b      	ldrb	r3, [r3, #1]
 8002f60:	b25b      	sxtb	r3, r3
 8002f62:	2201      	movs	r2, #1
 8002f64:	4393      	bics	r3, r2
 8002f66:	b25a      	sxtb	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	79db      	ldrb	r3, [r3, #7]
 8002f6c:	b25b      	sxtb	r3, r3
 8002f6e:	2101      	movs	r1, #1
 8002f70:	400b      	ands	r3, r1
 8002f72:	b25b      	sxtb	r3, r3
 8002f74:	4313      	orrs	r3, r2
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	0001      	movs	r1, r0
 8002f7c:	187b      	adds	r3, r7, r1
 8002f7e:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	187b      	adds	r3, r7, r1
 8002f86:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	885b      	ldrh	r3, [r3, #2]
 8002f8c:	0a1b      	lsrs	r3, r3, #8
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	187b      	adds	r3, r7, r1
 8002f94:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	885b      	ldrh	r3, [r3, #2]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	187b      	adds	r3, r7, r1
 8002f9e:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	7a1b      	ldrb	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d12e      	bne.n	8003006 <set_gen2_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	895b      	ldrh	r3, [r3, #10]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	187b      	adds	r3, r7, r1
 8002fb0:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	895b      	ldrh	r3, [r3, #10]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	899b      	ldrh	r3, [r3, #12]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	899b      	ldrh	r3, [r3, #12]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	89db      	ldrh	r3, [r3, #14]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	89db      	ldrh	r3, [r3, #14]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	729a      	strb	r2, [r3, #10]

        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 11, dev);
 8002ff0:	2317      	movs	r3, #23
 8002ff2:	18fc      	adds	r4, r7, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	1879      	adds	r1, r7, r1
 8002ff8:	220b      	movs	r2, #11
 8002ffa:	204a      	movs	r0, #74	@ 0x4a
 8002ffc:	f7fe fe76 	bl	8001cec <bma400_set_regs>
 8003000:	0003      	movs	r3, r0
 8003002:	7023      	strb	r3, [r4, #0]
 8003004:	e00a      	b.n	800301c <set_gen2_int+0x190>
    }
    else
    {
        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 5, dev);
 8003006:	2317      	movs	r3, #23
 8003008:	18fc      	adds	r4, r7, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	220c      	movs	r2, #12
 800300e:	18b9      	adds	r1, r7, r2
 8003010:	2205      	movs	r2, #5
 8003012:	204a      	movs	r0, #74	@ 0x4a
 8003014:	f7fe fe6a 	bl	8001cec <bma400_set_regs>
 8003018:	0003      	movs	r3, r0
 800301a:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800301c:	2317      	movs	r3, #23
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b25b      	sxtb	r3, r3
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b007      	add	sp, #28
 800302a:	bd90      	pop	{r4, r7, pc}

0800302c <set_orient_int>:

    return rslt;
}

static int8_t set_orient_int(const struct bma400_orient_int_conf *orient_conf, struct bma400_dev *dev)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[10] = { 0 };
 8003036:	240c      	movs	r4, #12
 8003038:	193b      	adds	r3, r7, r4
 800303a:	0018      	movs	r0, r3
 800303c:	230a      	movs	r3, #10
 800303e:	001a      	movs	r2, r3
 8003040:	2100      	movs	r1, #0
 8003042:	f003 fe43 	bl	8006ccc <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 8003046:	0020      	movs	r0, r4
 8003048:	183b      	adds	r3, r7, r0
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	b25b      	sxtb	r3, r3
 800304e:	221f      	movs	r2, #31
 8003050:	4013      	ands	r3, r2
 8003052:	b25a      	sxtb	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	b25b      	sxtb	r3, r3
 800305a:	015b      	lsls	r3, r3, #5
 800305c:	b25b      	sxtb	r3, r3
 800305e:	4313      	orrs	r3, r2
 8003060:	b25b      	sxtb	r3, r3
 8003062:	b2da      	uxtb	r2, r3
 8003064:	183b      	adds	r3, r7, r0
 8003066:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 8003068:	183b      	adds	r3, r7, r0
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	b25b      	sxtb	r3, r3
 800306e:	2210      	movs	r2, #16
 8003070:	4393      	bics	r3, r2
 8003072:	b25a      	sxtb	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	b25b      	sxtb	r3, r3
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	b25b      	sxtb	r3, r3
 800307e:	2110      	movs	r1, #16
 8003080:	400b      	ands	r3, r1
 8003082:	b25b      	sxtb	r3, r3
 8003084:	4313      	orrs	r3, r2
 8003086:	b25b      	sxtb	r3, r3
 8003088:	b2da      	uxtb	r2, r3
 800308a:	183b      	adds	r3, r7, r0
 800308c:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 800308e:	183b      	adds	r3, r7, r0
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b25b      	sxtb	r3, r3
 8003094:	220c      	movs	r2, #12
 8003096:	4393      	bics	r3, r2
 8003098:	b25a      	sxtb	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	789b      	ldrb	r3, [r3, #2]
 800309e:	b25b      	sxtb	r3, r3
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	b25b      	sxtb	r3, r3
 80030a4:	210c      	movs	r1, #12
 80030a6:	400b      	ands	r3, r1
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	4313      	orrs	r3, r2
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	0001      	movs	r1, r0
 80030b2:	187b      	adds	r3, r7, r1
 80030b4:	701a      	strb	r2, [r3, #0]

    /* Set the threshold for interrupt calculation */
    data_array[1] = orient_conf->orient_thres;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	78da      	ldrb	r2, [r3, #3]
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	705a      	strb	r2, [r3, #1]

    /* Set the stability threshold */
    data_array[2] = orient_conf->stability_thres;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	791a      	ldrb	r2, [r3, #4]
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	709a      	strb	r2, [r3, #2]

    /* Set the interrupt duration */
    data_array[3] = orient_conf->orient_int_dur;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	795a      	ldrb	r2, [r3, #5]
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	70da      	strb	r2, [r3, #3]

    /* Handling case of manual reference update */
    if (orient_conf->ref_update == BMA400_UPDATE_MANUAL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	789b      	ldrb	r3, [r3, #2]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d12e      	bne.n	8003134 <set_orient_int+0x108>
    {
        /* Set the LSB of reference x threshold */
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	88db      	ldrh	r3, [r3, #6]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	187b      	adds	r3, r7, r1
 80030de:	711a      	strb	r2, [r3, #4]

        /* Set the MSB of reference x threshold */
        data_array[5] = BMA400_GET_MSB(orient_conf->orient_ref_x);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	88db      	ldrh	r3, [r3, #6]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	891b      	ldrh	r3, [r3, #8]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_MSB(orient_conf->orient_ref_y);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	891b      	ldrh	r3, [r3, #8]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	b29b      	uxth	r3, r3
 8003100:	b2da      	uxtb	r2, r3
 8003102:	187b      	adds	r3, r7, r1
 8003104:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	895b      	ldrh	r3, [r3, #10]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	187b      	adds	r3, r7, r1
 800310e:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_MSB(orient_conf->orient_ref_z);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	895b      	ldrh	r3, [r3, #10]
 8003114:	0a1b      	lsrs	r3, r3, #8
 8003116:	b29b      	uxth	r3, r3
 8003118:	b2da      	uxtb	r2, r3
 800311a:	187b      	adds	r3, r7, r1
 800311c:	725a      	strb	r2, [r3, #9]

        /* Set the orient configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 10, dev);
 800311e:	2317      	movs	r3, #23
 8003120:	18fc      	adds	r4, r7, r3
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	1879      	adds	r1, r7, r1
 8003126:	220a      	movs	r2, #10
 8003128:	2035      	movs	r0, #53	@ 0x35
 800312a:	f7fe fddf 	bl	8001cec <bma400_set_regs>
 800312e:	0003      	movs	r3, r0
 8003130:	7023      	strb	r3, [r4, #0]
 8003132:	e00a      	b.n	800314a <set_orient_int+0x11e>
    else
    {
        /* Set the orient configurations in the sensor excluding
         * reference values of x,y,z
         */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 4, dev);
 8003134:	2317      	movs	r3, #23
 8003136:	18fc      	adds	r4, r7, r3
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	220c      	movs	r2, #12
 800313c:	18b9      	adds	r1, r7, r2
 800313e:	2204      	movs	r2, #4
 8003140:	2035      	movs	r0, #53	@ 0x35
 8003142:	f7fe fdd3 	bl	8001cec <bma400_set_regs>
 8003146:	0003      	movs	r3, r0
 8003148:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800314a:	2317      	movs	r3, #23
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	b25b      	sxtb	r3, r3
}
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	b007      	add	sp, #28
 8003158:	bd90      	pop	{r4, r7, pc}
	...

0800315c <map_int_pin>:

    return rslt;
}

static void map_int_pin(uint8_t *data_array, uint8_t int_enable, enum bma400_int_chan int_map)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	0008      	movs	r0, r1
 8003166:	0011      	movs	r1, r2
 8003168:	1cfb      	adds	r3, r7, #3
 800316a:	1c02      	adds	r2, r0, #0
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	1cbb      	adds	r3, r7, #2
 8003170:	1c0a      	adds	r2, r1, #0
 8003172:	701a      	strb	r2, [r3, #0]
    switch (int_enable)
 8003174:	1cfb      	adds	r3, r7, #3
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b0b      	cmp	r3, #11
 800317a:	d900      	bls.n	800317e <map_int_pin+0x22>
 800317c:	e2f3      	b.n	8003766 <map_int_pin+0x60a>
 800317e:	009a      	lsls	r2, r3, #2
 8003180:	4bc9      	ldr	r3, [pc, #804]	@ (80034a8 <map_int_pin+0x34c>)
 8003182:	18d3      	adds	r3, r2, r3
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	469f      	mov	pc, r3
    {
        case BMA400_DATA_READY_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003188:	1cbb      	adds	r3, r7, #2
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d107      	bne.n	80031a0 <map_int_pin+0x44>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2280      	movs	r2, #128	@ 0x80
 8003196:	4252      	negs	r2, r2
 8003198:	4313      	orrs	r3, r2
 800319a:	b2da      	uxtb	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80031a0:	1cbb      	adds	r3, r7, #2
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d109      	bne.n	80031bc <map_int_pin+0x60>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3301      	adds	r3, #1
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3301      	adds	r3, #1
 80031b2:	2180      	movs	r1, #128	@ 0x80
 80031b4:	4249      	negs	r1, r1
 80031b6:	430a      	orrs	r2, r1
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80031bc:	1cbb      	adds	r3, r7, #2
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10f      	bne.n	80031e4 <map_int_pin+0x88>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_DRDY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	227f      	movs	r2, #127	@ 0x7f
 80031ca:	4013      	ands	r3, r2
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_DRDY);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3301      	adds	r3, #1
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3301      	adds	r3, #1
 80031dc:	217f      	movs	r1, #127	@ 0x7f
 80031de:	400a      	ands	r2, r1
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80031e4:	1cbb      	adds	r3, r7, #2
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d000      	beq.n	80031ee <map_int_pin+0x92>
 80031ec:	e2bd      	b.n	800376a <map_int_pin+0x60e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2280      	movs	r2, #128	@ 0x80
 80031f4:	4252      	negs	r2, r2
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3301      	adds	r3, #1
 8003202:	781a      	ldrb	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3301      	adds	r3, #1
 8003208:	2180      	movs	r1, #128	@ 0x80
 800320a:	4249      	negs	r1, r1
 800320c:	430a      	orrs	r2, r1
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003212:	e2aa      	b.n	800376a <map_int_pin+0x60e>
        case BMA400_FIFO_WM_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003214:	1cbb      	adds	r3, r7, #2
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d106      	bne.n	800322a <map_int_pin+0xce>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2240      	movs	r2, #64	@ 0x40
 8003222:	4313      	orrs	r3, r2
 8003224:	b2da      	uxtb	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800322a:	1cbb      	adds	r3, r7, #2
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d108      	bne.n	8003244 <map_int_pin+0xe8>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3301      	adds	r3, #1
 8003236:	781a      	ldrb	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3301      	adds	r3, #1
 800323c:	2140      	movs	r1, #64	@ 0x40
 800323e:	430a      	orrs	r2, r1
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003244:	1cbb      	adds	r3, r7, #2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10f      	bne.n	800326c <map_int_pin+0x110>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_WM);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2240      	movs	r2, #64	@ 0x40
 8003252:	4393      	bics	r3, r2
 8003254:	b2da      	uxtb	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_WM);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3301      	adds	r3, #1
 800325e:	781a      	ldrb	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3301      	adds	r3, #1
 8003264:	2140      	movs	r1, #64	@ 0x40
 8003266:	438a      	bics	r2, r1
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800326c:	1cbb      	adds	r3, r7, #2
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d000      	beq.n	8003276 <map_int_pin+0x11a>
 8003274:	e27b      	b.n	800376e <map_int_pin+0x612>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2240      	movs	r2, #64	@ 0x40
 800327c:	4313      	orrs	r3, r2
 800327e:	b2da      	uxtb	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3301      	adds	r3, #1
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3301      	adds	r3, #1
 800328e:	2140      	movs	r1, #64	@ 0x40
 8003290:	430a      	orrs	r2, r1
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003296:	e26a      	b.n	800376e <map_int_pin+0x612>
        case BMA400_FIFO_FULL_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003298:	1cbb      	adds	r3, r7, #2
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d106      	bne.n	80032ae <map_int_pin+0x152>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2220      	movs	r2, #32
 80032a6:	4313      	orrs	r3, r2
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80032ae:	1cbb      	adds	r3, r7, #2
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d108      	bne.n	80032c8 <map_int_pin+0x16c>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3301      	adds	r3, #1
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3301      	adds	r3, #1
 80032c0:	2120      	movs	r1, #32
 80032c2:	430a      	orrs	r2, r1
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80032c8:	1cbb      	adds	r3, r7, #2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10f      	bne.n	80032f0 <map_int_pin+0x194>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2220      	movs	r2, #32
 80032d6:	4393      	bics	r3, r2
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_FULL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3301      	adds	r3, #1
 80032e2:	781a      	ldrb	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3301      	adds	r3, #1
 80032e8:	2120      	movs	r1, #32
 80032ea:	438a      	bics	r2, r1
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80032f0:	1cbb      	adds	r3, r7, #2
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d000      	beq.n	80032fa <map_int_pin+0x19e>
 80032f8:	e23b      	b.n	8003772 <map_int_pin+0x616>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2220      	movs	r2, #32
 8003300:	4313      	orrs	r3, r2
 8003302:	b2da      	uxtb	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3301      	adds	r3, #1
 800330c:	781a      	ldrb	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3301      	adds	r3, #1
 8003312:	2120      	movs	r1, #32
 8003314:	430a      	orrs	r2, r1
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]
            }

            break;
 800331a:	e22a      	b.n	8003772 <map_int_pin+0x616>
        case BMA400_INT_OVERRUN_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 800331c:	1cbb      	adds	r3, r7, #2
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d106      	bne.n	8003332 <map_int_pin+0x1d6>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2210      	movs	r2, #16
 800332a:	4313      	orrs	r3, r2
 800332c:	b2da      	uxtb	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8003332:	1cbb      	adds	r3, r7, #2
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d108      	bne.n	800334c <map_int_pin+0x1f0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3301      	adds	r3, #1
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3301      	adds	r3, #1
 8003344:	2110      	movs	r1, #16
 8003346:	430a      	orrs	r2, r1
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 800334c:	1cbb      	adds	r3, r7, #2
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10f      	bne.n	8003374 <map_int_pin+0x218>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_INT_OVERRUN);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2210      	movs	r2, #16
 800335a:	4393      	bics	r3, r2
 800335c:	b2da      	uxtb	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_INT_OVERRUN);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3301      	adds	r3, #1
 8003366:	781a      	ldrb	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3301      	adds	r3, #1
 800336c:	2110      	movs	r1, #16
 800336e:	438a      	bics	r2, r1
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003374:	1cbb      	adds	r3, r7, #2
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d000      	beq.n	800337e <map_int_pin+0x222>
 800337c:	e1fb      	b.n	8003776 <map_int_pin+0x61a>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2210      	movs	r2, #16
 8003384:	4313      	orrs	r3, r2
 8003386:	b2da      	uxtb	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3301      	adds	r3, #1
 8003390:	781a      	ldrb	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3301      	adds	r3, #1
 8003396:	2110      	movs	r1, #16
 8003398:	430a      	orrs	r2, r1
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]
            }

            break;
 800339e:	e1ea      	b.n	8003776 <map_int_pin+0x61a>
        case BMA400_GEN2_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80033a0:	1cbb      	adds	r3, r7, #2
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d106      	bne.n	80033b6 <map_int_pin+0x25a>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2208      	movs	r2, #8
 80033ae:	4313      	orrs	r3, r2
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80033b6:	1cbb      	adds	r3, r7, #2
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d108      	bne.n	80033d0 <map_int_pin+0x274>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3301      	adds	r3, #1
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3301      	adds	r3, #1
 80033c8:	2108      	movs	r1, #8
 80033ca:	430a      	orrs	r2, r1
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80033d0:	1cbb      	adds	r3, r7, #2
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10f      	bne.n	80033f8 <map_int_pin+0x29c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2208      	movs	r2, #8
 80033de:	4393      	bics	r3, r2
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3301      	adds	r3, #1
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3301      	adds	r3, #1
 80033f0:	2108      	movs	r1, #8
 80033f2:	438a      	bics	r2, r1
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80033f8:	1cbb      	adds	r3, r7, #2
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d000      	beq.n	8003402 <map_int_pin+0x2a6>
 8003400:	e1bb      	b.n	800377a <map_int_pin+0x61e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2208      	movs	r2, #8
 8003408:	4313      	orrs	r3, r2
 800340a:	b2da      	uxtb	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3301      	adds	r3, #1
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3301      	adds	r3, #1
 800341a:	2108      	movs	r1, #8
 800341c:	430a      	orrs	r2, r1
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003422:	e1aa      	b.n	800377a <map_int_pin+0x61e>
        case BMA400_GEN1_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003424:	1cbb      	adds	r3, r7, #2
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d106      	bne.n	800343a <map_int_pin+0x2de>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2204      	movs	r2, #4
 8003432:	4313      	orrs	r3, r2
 8003434:	b2da      	uxtb	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800343a:	1cbb      	adds	r3, r7, #2
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d108      	bne.n	8003454 <map_int_pin+0x2f8>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3301      	adds	r3, #1
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3301      	adds	r3, #1
 800344c:	2104      	movs	r1, #4
 800344e:	430a      	orrs	r2, r1
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003454:	1cbb      	adds	r3, r7, #2
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10f      	bne.n	800347c <map_int_pin+0x320>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2204      	movs	r2, #4
 8003462:	4393      	bics	r3, r2
 8003464:	b2da      	uxtb	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN1);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3301      	adds	r3, #1
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3301      	adds	r3, #1
 8003474:	2104      	movs	r1, #4
 8003476:	438a      	bics	r2, r1
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800347c:	1cbb      	adds	r3, r7, #2
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b03      	cmp	r3, #3
 8003482:	d000      	beq.n	8003486 <map_int_pin+0x32a>
 8003484:	e17b      	b.n	800377e <map_int_pin+0x622>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2204      	movs	r2, #4
 800348c:	4313      	orrs	r3, r2
 800348e:	b2da      	uxtb	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3301      	adds	r3, #1
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3301      	adds	r3, #1
 800349e:	2104      	movs	r1, #4
 80034a0:	430a      	orrs	r2, r1
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]
            }

            break;
 80034a6:	e16a      	b.n	800377e <map_int_pin+0x622>
 80034a8:	08007b00 	.word	0x08007b00
        case BMA400_ORIENT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80034ac:	1cbb      	adds	r3, r7, #2
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d106      	bne.n	80034c2 <map_int_pin+0x366>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2202      	movs	r2, #2
 80034ba:	4313      	orrs	r3, r2
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80034c2:	1cbb      	adds	r3, r7, #2
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d108      	bne.n	80034dc <map_int_pin+0x380>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3301      	adds	r3, #1
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3301      	adds	r3, #1
 80034d4:	2102      	movs	r1, #2
 80034d6:	430a      	orrs	r2, r1
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80034dc:	1cbb      	adds	r3, r7, #2
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10f      	bne.n	8003504 <map_int_pin+0x3a8>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2202      	movs	r2, #2
 80034ea:	4393      	bics	r3, r2
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_ORIENT_CH);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3301      	adds	r3, #1
 80034f6:	781a      	ldrb	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3301      	adds	r3, #1
 80034fc:	2102      	movs	r1, #2
 80034fe:	438a      	bics	r2, r1
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003504:	1cbb      	adds	r3, r7, #2
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d000      	beq.n	800350e <map_int_pin+0x3b2>
 800350c:	e139      	b.n	8003782 <map_int_pin+0x626>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2202      	movs	r2, #2
 8003514:	4313      	orrs	r3, r2
 8003516:	b2da      	uxtb	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3301      	adds	r3, #1
 8003520:	781a      	ldrb	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3301      	adds	r3, #1
 8003526:	2102      	movs	r1, #2
 8003528:	430a      	orrs	r2, r1
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]
            }

            break;
 800352e:	e128      	b.n	8003782 <map_int_pin+0x626>
        case BMA400_WAKEUP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003530:	1cbb      	adds	r3, r7, #2
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d106      	bne.n	8003546 <map_int_pin+0x3ea>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2201      	movs	r2, #1
 800353e:	4313      	orrs	r3, r2
 8003540:	b2da      	uxtb	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8003546:	1cbb      	adds	r3, r7, #2
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d108      	bne.n	8003560 <map_int_pin+0x404>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3301      	adds	r3, #1
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3301      	adds	r3, #1
 8003558:	2101      	movs	r1, #1
 800355a:	430a      	orrs	r2, r1
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003560:	1cbb      	adds	r3, r7, #2
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10f      	bne.n	8003588 <map_int_pin+0x42c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_WAKEUP_INT);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2201      	movs	r2, #1
 800356e:	4393      	bics	r3, r2
 8003570:	b2da      	uxtb	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_WAKEUP_INT);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3301      	adds	r3, #1
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3301      	adds	r3, #1
 8003580:	2101      	movs	r1, #1
 8003582:	438a      	bics	r2, r1
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003588:	1cbb      	adds	r3, r7, #2
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d000      	beq.n	8003592 <map_int_pin+0x436>
 8003590:	e0f9      	b.n	8003786 <map_int_pin+0x62a>
            {
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2201      	movs	r2, #1
 8003598:	4313      	orrs	r3, r2
 800359a:	b2da      	uxtb	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3301      	adds	r3, #1
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3301      	adds	r3, #1
 80035aa:	2101      	movs	r1, #1
 80035ac:	430a      	orrs	r2, r1
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
            }

            break;
 80035b2:	e0e8      	b.n	8003786 <map_int_pin+0x62a>
        case BMA400_ACT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80035b4:	1cbb      	adds	r3, r7, #2
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d108      	bne.n	80035ce <map_int_pin+0x472>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3302      	adds	r3, #2
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3302      	adds	r3, #2
 80035c6:	2108      	movs	r1, #8
 80035c8:	430a      	orrs	r2, r1
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80035ce:	1cbb      	adds	r3, r7, #2
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d109      	bne.n	80035ea <map_int_pin+0x48e>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3302      	adds	r3, #2
 80035da:	781a      	ldrb	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3302      	adds	r3, #2
 80035e0:	2180      	movs	r1, #128	@ 0x80
 80035e2:	4249      	negs	r1, r1
 80035e4:	430a      	orrs	r2, r1
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80035ea:	1cbb      	adds	r3, r7, #2
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d111      	bne.n	8003616 <map_int_pin+0x4ba>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3302      	adds	r3, #2
 80035f6:	781a      	ldrb	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3302      	adds	r3, #2
 80035fc:	2108      	movs	r1, #8
 80035fe:	438a      	bics	r2, r1
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT2);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3302      	adds	r3, #2
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3302      	adds	r3, #2
 800360e:	217f      	movs	r1, #127	@ 0x7f
 8003610:	400a      	ands	r2, r1
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003616:	1cbb      	adds	r3, r7, #2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d000      	beq.n	8003620 <map_int_pin+0x4c4>
 800361e:	e0b4      	b.n	800378a <map_int_pin+0x62e>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3302      	adds	r3, #2
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3302      	adds	r3, #2
 800362a:	2108      	movs	r1, #8
 800362c:	430a      	orrs	r2, r1
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3302      	adds	r3, #2
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3302      	adds	r3, #2
 800363c:	2180      	movs	r1, #128	@ 0x80
 800363e:	4249      	negs	r1, r1
 8003640:	430a      	orrs	r2, r1
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003646:	e0a0      	b.n	800378a <map_int_pin+0x62e>
        case BMA400_TAP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003648:	1cbb      	adds	r3, r7, #2
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d108      	bne.n	8003662 <map_int_pin+0x506>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3302      	adds	r3, #2
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3302      	adds	r3, #2
 800365a:	2104      	movs	r1, #4
 800365c:	430a      	orrs	r2, r1
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8003662:	1cbb      	adds	r3, r7, #2
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d108      	bne.n	800367c <map_int_pin+0x520>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3302      	adds	r3, #2
 800366e:	781a      	ldrb	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3302      	adds	r3, #2
 8003674:	2140      	movs	r1, #64	@ 0x40
 8003676:	430a      	orrs	r2, r1
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 800367c:	1cbb      	adds	r3, r7, #2
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d111      	bne.n	80036a8 <map_int_pin+0x54c>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3302      	adds	r3, #2
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3302      	adds	r3, #2
 800368e:	2104      	movs	r1, #4
 8003690:	438a      	bics	r2, r1
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT2);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3302      	adds	r3, #2
 800369a:	781a      	ldrb	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3302      	adds	r3, #2
 80036a0:	2140      	movs	r1, #64	@ 0x40
 80036a2:	438a      	bics	r2, r1
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80036a8:	1cbb      	adds	r3, r7, #2
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d000      	beq.n	80036b2 <map_int_pin+0x556>
 80036b0:	e06d      	b.n	800378e <map_int_pin+0x632>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3302      	adds	r3, #2
 80036b6:	781a      	ldrb	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3302      	adds	r3, #2
 80036bc:	2104      	movs	r1, #4
 80036be:	430a      	orrs	r2, r1
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3302      	adds	r3, #2
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3302      	adds	r3, #2
 80036ce:	2140      	movs	r1, #64	@ 0x40
 80036d0:	430a      	orrs	r2, r1
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]
            }

            break;
 80036d6:	e05a      	b.n	800378e <map_int_pin+0x632>
        case BMA400_STEP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80036d8:	1cbb      	adds	r3, r7, #2
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d108      	bne.n	80036f2 <map_int_pin+0x596>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3302      	adds	r3, #2
 80036e4:	781a      	ldrb	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3302      	adds	r3, #2
 80036ea:	2101      	movs	r1, #1
 80036ec:	430a      	orrs	r2, r1
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80036f2:	1cbb      	adds	r3, r7, #2
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d108      	bne.n	800370c <map_int_pin+0x5b0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3302      	adds	r3, #2
 80036fe:	781a      	ldrb	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3302      	adds	r3, #2
 8003704:	2110      	movs	r1, #16
 8003706:	430a      	orrs	r2, r1
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 800370c:	1cbb      	adds	r3, r7, #2
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d111      	bne.n	8003738 <map_int_pin+0x5dc>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_EN_STEP_INT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3302      	adds	r3, #2
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3302      	adds	r3, #2
 800371e:	2101      	movs	r1, #1
 8003720:	438a      	bics	r2, r1
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3302      	adds	r3, #2
 800372a:	781a      	ldrb	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3302      	adds	r3, #2
 8003730:	2110      	movs	r1, #16
 8003732:	438a      	bics	r2, r1
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003738:	1cbb      	adds	r3, r7, #2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d128      	bne.n	8003792 <map_int_pin+0x636>
            {
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3302      	adds	r3, #2
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3302      	adds	r3, #2
 800374a:	2101      	movs	r1, #1
 800374c:	430a      	orrs	r2, r1
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3302      	adds	r3, #2
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3302      	adds	r3, #2
 800375c:	2110      	movs	r1, #16
 800375e:	430a      	orrs	r2, r1
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003764:	e015      	b.n	8003792 <map_int_pin+0x636>
        default:
            break;
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	e014      	b.n	8003794 <map_int_pin+0x638>
            break;
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	e012      	b.n	8003794 <map_int_pin+0x638>
            break;
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	e010      	b.n	8003794 <map_int_pin+0x638>
            break;
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	e00e      	b.n	8003794 <map_int_pin+0x638>
            break;
 8003776:	46c0      	nop			@ (mov r8, r8)
 8003778:	e00c      	b.n	8003794 <map_int_pin+0x638>
            break;
 800377a:	46c0      	nop			@ (mov r8, r8)
 800377c:	e00a      	b.n	8003794 <map_int_pin+0x638>
            break;
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	e008      	b.n	8003794 <map_int_pin+0x638>
            break;
 8003782:	46c0      	nop			@ (mov r8, r8)
 8003784:	e006      	b.n	8003794 <map_int_pin+0x638>
            break;
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	e004      	b.n	8003794 <map_int_pin+0x638>
            break;
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	e002      	b.n	8003794 <map_int_pin+0x638>
            break;
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	e000      	b.n	8003794 <map_int_pin+0x638>
            break;
 8003792:	46c0      	nop			@ (mov r8, r8)
    }
}
 8003794:	46c0      	nop			@ (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}

0800379c <set_int_pin_conf>:
            break;
    }
}

static int8_t set_int_pin_conf(struct bma400_int_pin_conf int_conf, struct bma400_dev *dev)
{
 800379c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	8018      	strh	r0, [r3, #0]
 80037a6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 80037a8:	260f      	movs	r6, #15
 80037aa:	19bc      	adds	r4, r7, r6
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	250e      	movs	r5, #14
 80037b0:	1979      	adds	r1, r7, r5
 80037b2:	2201      	movs	r2, #1
 80037b4:	2024      	movs	r0, #36	@ 0x24
 80037b6:	f7fe fb17 	bl	8001de8 <bma400_get_regs>
 80037ba:	0003      	movs	r3, r0
 80037bc:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 80037be:	19bb      	adds	r3, r7, r6
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d13a      	bne.n	800383e <set_int_pin_conf+0xa2>
    {
        if (int_conf.int_chan == BMA400_INT_CHANNEL_1)
 80037c8:	1d3b      	adds	r3, r7, #4
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d113      	bne.n	80037f8 <set_int_pin_conf+0x5c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
 80037d0:	0028      	movs	r0, r5
 80037d2:	183b      	adds	r3, r7, r0
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b25b      	sxtb	r3, r3
 80037d8:	2206      	movs	r2, #6
 80037da:	4393      	bics	r3, r2
 80037dc:	b25a      	sxtb	r2, r3
 80037de:	1d3b      	adds	r3, r7, #4
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	b25b      	sxtb	r3, r3
 80037e4:	18db      	adds	r3, r3, r3
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	2106      	movs	r1, #6
 80037ea:	400b      	ands	r3, r1
 80037ec:	b25b      	sxtb	r3, r3
 80037ee:	4313      	orrs	r3, r2
 80037f0:	b25b      	sxtb	r3, r3
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	183b      	adds	r3, r7, r0
 80037f6:	701a      	strb	r2, [r3, #0]
        }

        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
 80037f8:	1d3b      	adds	r3, r7, #4
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d113      	bne.n	8003828 <set_int_pin_conf+0x8c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 8003800:	200e      	movs	r0, #14
 8003802:	183b      	adds	r3, r7, r0
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	b25b      	sxtb	r3, r3
 8003808:	2260      	movs	r2, #96	@ 0x60
 800380a:	4393      	bics	r3, r2
 800380c:	b25a      	sxtb	r2, r3
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	785b      	ldrb	r3, [r3, #1]
 8003812:	b25b      	sxtb	r3, r3
 8003814:	015b      	lsls	r3, r3, #5
 8003816:	b25b      	sxtb	r3, r3
 8003818:	2160      	movs	r1, #96	@ 0x60
 800381a:	400b      	ands	r3, r1
 800381c:	b25b      	sxtb	r3, r3
 800381e:	4313      	orrs	r3, r2
 8003820:	b25b      	sxtb	r3, r3
 8003822:	b2da      	uxtb	r2, r3
 8003824:	183b      	adds	r3, r7, r0
 8003826:	701a      	strb	r2, [r3, #0]
        }

        /* Set the configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8003828:	230f      	movs	r3, #15
 800382a:	18fc      	adds	r4, r7, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	220e      	movs	r2, #14
 8003830:	18b9      	adds	r1, r7, r2
 8003832:	2201      	movs	r2, #1
 8003834:	2024      	movs	r0, #36	@ 0x24
 8003836:	f7fe fa59 	bl	8001cec <bma400_set_regs>
 800383a:	0003      	movs	r3, r0
 800383c:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800383e:	230f      	movs	r3, #15
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b25b      	sxtb	r3, r3
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b005      	add	sp, #20
 800384c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800384e <set_fifo_conf>:

    return rslt;
}

static int8_t set_fifo_conf(const struct bma400_fifo_conf *fifo_conf, struct bma400_dev *dev)
{
 800384e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3];
    uint8_t sens_data[3];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8003858:	250f      	movs	r5, #15
 800385a:	197c      	adds	r4, r7, r5
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	0018      	movs	r0, r3
 8003860:	f7fe fd7e 	bl	8002360 <null_ptr_check>
 8003864:	0003      	movs	r3, r0
 8003866:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8003868:	197b      	adds	r3, r7, r5
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b25b      	sxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d15b      	bne.n	800392a <set_fifo_conf+0xdc>
    {
        /* Get the FIFO configurations and water-mark
         * values from the sensor
         */
        rslt = bma400_get_regs(BMA400_REG_FIFO_CONFIG_0, sens_data, 3, dev);
 8003872:	197c      	adds	r4, r7, r5
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2608      	movs	r6, #8
 8003878:	19b9      	adds	r1, r7, r6
 800387a:	2203      	movs	r2, #3
 800387c:	2026      	movs	r0, #38	@ 0x26
 800387e:	f7fe fab3 	bl	8001de8 <bma400_get_regs>
 8003882:	0003      	movs	r3, r0
 8003884:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8003886:	197b      	adds	r3, r7, r5
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b25b      	sxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d14c      	bne.n	800392a <set_fifo_conf+0xdc>
        {
            /* FIFO configurations */
            data_array[0] = fifo_conf->conf_regs;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	210c      	movs	r1, #12
 8003896:	187b      	adds	r3, r7, r1
 8003898:	701a      	strb	r2, [r3, #0]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	785b      	ldrb	r3, [r3, #1]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10c      	bne.n	80038bc <set_fifo_conf+0x6e>
            {
                /* Disable the selected interrupt status */
                data_array[0] = sens_data[0] & (~data_array[0]);
 80038a2:	19bb      	adds	r3, r7, r6
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b25b      	sxtb	r3, r3
 80038a8:	187a      	adds	r2, r7, r1
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	b252      	sxtb	r2, r2
 80038ae:	43d2      	mvns	r2, r2
 80038b0:	b252      	sxtb	r2, r2
 80038b2:	4013      	ands	r3, r2
 80038b4:	b25b      	sxtb	r3, r3
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	701a      	strb	r2, [r3, #0]
            }

            /* FIFO water-mark values */
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	885b      	ldrh	r3, [r3, #2]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	210c      	movs	r1, #12
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	705a      	strb	r2, [r3, #1]
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	885b      	ldrh	r3, [r3, #2]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	187b      	adds	r3, r7, r1
 80038d4:	709a      	strb	r2, [r3, #2]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 80038d6:	187b      	adds	r3, r7, r1
 80038d8:	789b      	ldrb	r3, [r3, #2]
 80038da:	2207      	movs	r2, #7
 80038dc:	4013      	ands	r3, r2
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	187b      	adds	r3, r7, r1
 80038e2:	709a      	strb	r2, [r3, #2]
            if ((data_array[1] == sens_data[1]) && (data_array[2] == sens_data[2]))
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	785a      	ldrb	r2, [r3, #1]
 80038e8:	2008      	movs	r0, #8
 80038ea:	183b      	adds	r3, r7, r0
 80038ec:	785b      	ldrb	r3, [r3, #1]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d110      	bne.n	8003914 <set_fifo_conf+0xc6>
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	789a      	ldrb	r2, [r3, #2]
 80038f6:	183b      	adds	r3, r7, r0
 80038f8:	789b      	ldrb	r3, [r3, #2]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d10a      	bne.n	8003914 <set_fifo_conf+0xc6>
            {
                /* Set the FIFO configurations in the
                 * sensor excluding the watermark value
                 */
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 1, dev);
 80038fe:	230f      	movs	r3, #15
 8003900:	18fc      	adds	r4, r7, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	1879      	adds	r1, r7, r1
 8003906:	2201      	movs	r2, #1
 8003908:	2026      	movs	r0, #38	@ 0x26
 800390a:	f7fe f9ef 	bl	8001cec <bma400_set_regs>
 800390e:	0003      	movs	r3, r0
 8003910:	7023      	strb	r3, [r4, #0]
 8003912:	e00a      	b.n	800392a <set_fifo_conf+0xdc>
            }
            else
            {
                /* Set the FIFO configurations in the sensor*/
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 3, dev);
 8003914:	230f      	movs	r3, #15
 8003916:	18fc      	adds	r4, r7, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	220c      	movs	r2, #12
 800391c:	18b9      	adds	r1, r7, r2
 800391e:	2203      	movs	r2, #3
 8003920:	2026      	movs	r0, #38	@ 0x26
 8003922:	f7fe f9e3 	bl	8001cec <bma400_set_regs>
 8003926:	0003      	movs	r3, r0
 8003928:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 800392a:	230f      	movs	r3, #15
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	b25b      	sxtb	r3, r3
}
 8003932:	0018      	movs	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	b005      	add	sp, #20
 8003938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800393a <user_i2c_read>:

    return rslt;
}

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b08a      	sub	sp, #40	@ 0x28
 800393e:	af04      	add	r7, sp, #16
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	210f      	movs	r1, #15
 8003948:	187b      	adds	r3, r7, r1
 800394a:	1c02      	adds	r2, r0, #0
 800394c:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Read(hi2c, BMA400_I2C_ADDR, reg_addr,
 8003952:	187b      	adds	r3, r7, r1
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b299      	uxth	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	b29b      	uxth	r3, r3
 800395c:	6978      	ldr	r0, [r7, #20]
 800395e:	2201      	movs	r2, #1
 8003960:	4252      	negs	r2, r2
 8003962:	9202      	str	r2, [sp, #8]
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2301      	movs	r3, #1
 800396c:	000a      	movs	r2, r1
 800396e:	2128      	movs	r1, #40	@ 0x28
 8003970:	f001 f99c 	bl	8004cac <HAL_I2C_Mem_Read>
 8003974:	1e03      	subs	r3, r0, #0
 8003976:	d101      	bne.n	800397c <user_i2c_read+0x42>
                         I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e001      	b.n	8003980 <user_i2c_read+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 800397c:	2302      	movs	r3, #2
 800397e:	425b      	negs	r3, r3
    }
}
 8003980:	0018      	movs	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	b006      	add	sp, #24
 8003986:	bd80      	pop	{r7, pc}

08003988 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	@ 0x28
 800398c:	af04      	add	r7, sp, #16
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	210f      	movs	r1, #15
 8003996:	187b      	adds	r3, r7, r1
 8003998:	1c02      	adds	r2, r0, #0
 800399a:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Write(hi2c, BMA400_I2C_ADDR, reg_addr,
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	b299      	uxth	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	6978      	ldr	r0, [r7, #20]
 80039ac:	2201      	movs	r2, #1
 80039ae:	4252      	negs	r2, r2
 80039b0:	9202      	str	r2, [sp, #8]
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2301      	movs	r3, #1
 80039ba:	000a      	movs	r2, r1
 80039bc:	2128      	movs	r1, #40	@ 0x28
 80039be:	f001 f847 	bl	8004a50 <HAL_I2C_Mem_Write>
 80039c2:	1e03      	subs	r3, r0, #0
 80039c4:	d101      	bne.n	80039ca <user_i2c_write+0x42>
                          I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	e001      	b.n	80039ce <user_i2c_write+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 80039ca:	2302      	movs	r3, #2
 80039cc:	425b      	negs	r3, r3
    }
}
 80039ce:	0018      	movs	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b006      	add	sp, #24
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
    // Zakładamy, że potrzebne opóźnienia mają ≥ 1000us (1ms)
    HAL_Delay(period / 1000);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	22fa      	movs	r2, #250	@ 0xfa
 80039e4:	0091      	lsls	r1, r2, #2
 80039e6:	0018      	movs	r0, r3
 80039e8:	f7fc fba0 	bl	800012c <__udivsi3>
 80039ec:	0003      	movs	r3, r0
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 fd18 	bl	8004424 <HAL_Delay>

    // Jeśli potrzebujesz dokładniejszych opóźnień — patrz niżej
}
 80039f4:	46c0      	nop			@ (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b002      	add	sp, #8
 80039fa:	bd80      	pop	{r7, pc}

080039fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b08b      	sub	sp, #44	@ 0x2c
 8003a00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a02:	2414      	movs	r4, #20
 8003a04:	193b      	adds	r3, r7, r4
 8003a06:	0018      	movs	r0, r3
 8003a08:	2314      	movs	r3, #20
 8003a0a:	001a      	movs	r2, r3
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	f003 f95d 	bl	8006ccc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a12:	4b38      	ldr	r3, [pc, #224]	@ (8003af4 <MX_GPIO_Init+0xf8>)
 8003a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a16:	4b37      	ldr	r3, [pc, #220]	@ (8003af4 <MX_GPIO_Init+0xf8>)
 8003a18:	2104      	movs	r1, #4
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a1e:	4b35      	ldr	r3, [pc, #212]	@ (8003af4 <MX_GPIO_Init+0xf8>)
 8003a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a22:	2204      	movs	r2, #4
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a2a:	4b32      	ldr	r3, [pc, #200]	@ (8003af4 <MX_GPIO_Init+0xf8>)
 8003a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a2e:	4b31      	ldr	r3, [pc, #196]	@ (8003af4 <MX_GPIO_Init+0xf8>)
 8003a30:	2120      	movs	r1, #32
 8003a32:	430a      	orrs	r2, r1
 8003a34:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a36:	4b2f      	ldr	r3, [pc, #188]	@ (8003af4 <MX_GPIO_Init+0xf8>)
 8003a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a42:	4b2c      	ldr	r3, [pc, #176]	@ (8003af4 <MX_GPIO_Init+0xf8>)
 8003a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a46:	4b2b      	ldr	r3, [pc, #172]	@ (8003af4 <MX_GPIO_Init+0xf8>)
 8003a48:	2101      	movs	r1, #1
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a4e:	4b29      	ldr	r3, [pc, #164]	@ (8003af4 <MX_GPIO_Init+0xf8>)
 8003a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a52:	2201      	movs	r2, #1
 8003a54:	4013      	ands	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5a:	4b26      	ldr	r3, [pc, #152]	@ (8003af4 <MX_GPIO_Init+0xf8>)
 8003a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a5e:	4b25      	ldr	r3, [pc, #148]	@ (8003af4 <MX_GPIO_Init+0xf8>)
 8003a60:	2102      	movs	r1, #2
 8003a62:	430a      	orrs	r2, r1
 8003a64:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a66:	4b23      	ldr	r3, [pc, #140]	@ (8003af4 <MX_GPIO_Init+0xf8>)
 8003a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_IO_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003a72:	23d0      	movs	r3, #208	@ 0xd0
 8003a74:	0059      	lsls	r1, r3, #1
 8003a76:	23a0      	movs	r3, #160	@ 0xa0
 8003a78:	05db      	lsls	r3, r3, #23
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f000 ff23 	bl	80048c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8003a82:	193b      	adds	r3, r7, r4
 8003a84:	2204      	movs	r2, #4
 8003a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a88:	193b      	adds	r3, r7, r4
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	193b      	adds	r3, r7, r4
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	4a18      	ldr	r2, [pc, #96]	@ (8003af8 <MX_GPIO_Init+0xfc>)
 8003a98:	0019      	movs	r1, r3
 8003a9a:	0010      	movs	r0, r2
 8003a9c:	f000 fdaa 	bl	80045f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_IO_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = EN_IO_Pin|LED1_Pin|LED2_Pin;
 8003aa0:	0021      	movs	r1, r4
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	22d0      	movs	r2, #208	@ 0xd0
 8003aa6:	0052      	lsls	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aaa:	000c      	movs	r4, r1
 8003aac:	193b      	adds	r3, r7, r4
 8003aae:	2201      	movs	r2, #1
 8003ab0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab2:	193b      	adds	r3, r7, r4
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab8:	193b      	adds	r3, r7, r4
 8003aba:	2200      	movs	r2, #0
 8003abc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003abe:	193a      	adds	r2, r7, r4
 8003ac0:	23a0      	movs	r3, #160	@ 0xa0
 8003ac2:	05db      	lsls	r3, r3, #23
 8003ac4:	0011      	movs	r1, r2
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 fd94 	bl	80045f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8003acc:	193b      	adds	r3, r7, r4
 8003ace:	2240      	movs	r2, #64	@ 0x40
 8003ad0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ad2:	193b      	adds	r3, r7, r4
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ad8:	193b      	adds	r3, r7, r4
 8003ada:	2201      	movs	r2, #1
 8003adc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8003ade:	193a      	adds	r2, r7, r4
 8003ae0:	23a0      	movs	r3, #160	@ 0xa0
 8003ae2:	05db      	lsls	r3, r3, #23
 8003ae4:	0011      	movs	r1, r2
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 fd84 	bl	80045f4 <HAL_GPIO_Init>

}
 8003aec:	46c0      	nop			@ (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b00b      	add	sp, #44	@ 0x2c
 8003af2:	bd90      	pop	{r4, r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	50001400 	.word	0x50001400

08003afc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b00:	4b1b      	ldr	r3, [pc, #108]	@ (8003b70 <MX_I2C1_Init+0x74>)
 8003b02:	4a1c      	ldr	r2, [pc, #112]	@ (8003b74 <MX_I2C1_Init+0x78>)
 8003b04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8003b06:	4b1a      	ldr	r3, [pc, #104]	@ (8003b70 <MX_I2C1_Init+0x74>)
 8003b08:	4a1b      	ldr	r2, [pc, #108]	@ (8003b78 <MX_I2C1_Init+0x7c>)
 8003b0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003b0c:	4b18      	ldr	r3, [pc, #96]	@ (8003b70 <MX_I2C1_Init+0x74>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b12:	4b17      	ldr	r3, [pc, #92]	@ (8003b70 <MX_I2C1_Init+0x74>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b18:	4b15      	ldr	r3, [pc, #84]	@ (8003b70 <MX_I2C1_Init+0x74>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003b1e:	4b14      	ldr	r3, [pc, #80]	@ (8003b70 <MX_I2C1_Init+0x74>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b24:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <MX_I2C1_Init+0x74>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b2a:	4b11      	ldr	r3, [pc, #68]	@ (8003b70 <MX_I2C1_Init+0x74>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b30:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <MX_I2C1_Init+0x74>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b36:	4b0e      	ldr	r3, [pc, #56]	@ (8003b70 <MX_I2C1_Init+0x74>)
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 fee3 	bl	8004904 <HAL_I2C_Init>
 8003b3e:	1e03      	subs	r3, r0, #0
 8003b40:	d001      	beq.n	8003b46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003b42:	f000 fa3f 	bl	8003fc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b46:	4b0a      	ldr	r3, [pc, #40]	@ (8003b70 <MX_I2C1_Init+0x74>)
 8003b48:	2100      	movs	r1, #0
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f001 fcde 	bl	800550c <HAL_I2CEx_ConfigAnalogFilter>
 8003b50:	1e03      	subs	r3, r0, #0
 8003b52:	d001      	beq.n	8003b58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003b54:	f000 fa36 	bl	8003fc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003b58:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <MX_I2C1_Init+0x74>)
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f001 fd21 	bl	80055a4 <HAL_I2CEx_ConfigDigitalFilter>
 8003b62:	1e03      	subs	r3, r0, #0
 8003b64:	d001      	beq.n	8003b6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003b66:	f000 fa2d 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000078 	.word	0x20000078
 8003b74:	40005400 	.word	0x40005400
 8003b78:	00402d41 	.word	0x00402d41

08003b7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b091      	sub	sp, #68	@ 0x44
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	232c      	movs	r3, #44	@ 0x2c
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	0018      	movs	r0, r3
 8003b8a:	2314      	movs	r3, #20
 8003b8c:	001a      	movs	r2, r3
 8003b8e:	2100      	movs	r1, #0
 8003b90:	f003 f89c 	bl	8006ccc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b94:	2410      	movs	r4, #16
 8003b96:	193b      	adds	r3, r7, r4
 8003b98:	0018      	movs	r0, r3
 8003b9a:	231c      	movs	r3, #28
 8003b9c:	001a      	movs	r2, r3
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	f003 f894 	bl	8006ccc <memset>
  if(i2cHandle->Instance==I2C1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a22      	ldr	r2, [pc, #136]	@ (8003c34 <HAL_I2C_MspInit+0xb8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d13d      	bne.n	8003c2a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003bae:	193b      	adds	r3, r7, r4
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bba:	193b      	adds	r3, r7, r4
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f002 f8d3 	bl	8005d68 <HAL_RCCEx_PeriphCLKConfig>
 8003bc2:	1e03      	subs	r3, r0, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003bc6:	f000 f9fd 	bl	8003fc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bca:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <HAL_I2C_MspInit+0xbc>)
 8003bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bce:	4b1a      	ldr	r3, [pc, #104]	@ (8003c38 <HAL_I2C_MspInit+0xbc>)
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bd6:	4b18      	ldr	r3, [pc, #96]	@ (8003c38 <HAL_I2C_MspInit+0xbc>)
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bda:	2202      	movs	r2, #2
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003be2:	212c      	movs	r1, #44	@ 0x2c
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	22c0      	movs	r2, #192	@ 0xc0
 8003be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	2212      	movs	r2, #18
 8003bee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bf0:	187b      	adds	r3, r7, r1
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	2206      	movs	r2, #6
 8003c00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	4a0d      	ldr	r2, [pc, #52]	@ (8003c3c <HAL_I2C_MspInit+0xc0>)
 8003c06:	0019      	movs	r1, r3
 8003c08:	0010      	movs	r0, r2
 8003c0a:	f000 fcf3 	bl	80045f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c38 <HAL_I2C_MspInit+0xbc>)
 8003c10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c12:	4b09      	ldr	r3, [pc, #36]	@ (8003c38 <HAL_I2C_MspInit+0xbc>)
 8003c14:	2180      	movs	r1, #128	@ 0x80
 8003c16:	0389      	lsls	r1, r1, #14
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c1c:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <HAL_I2C_MspInit+0xbc>)
 8003c1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c20:	2380      	movs	r3, #128	@ 0x80
 8003c22:	039b      	lsls	r3, r3, #14
 8003c24:	4013      	ands	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b011      	add	sp, #68	@ 0x44
 8003c30:	bd90      	pop	{r4, r7, pc}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	40005400 	.word	0x40005400
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	50000400 	.word	0x50000400

08003c40 <enterStandby>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enterStandby(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8003c44:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <enterStandby+0x1c>)
 8003c46:	4a06      	ldr	r2, [pc, #24]	@ (8003c60 <enterStandby+0x20>)
 8003c48:	619a      	str	r2, [r3, #24]
  	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f001 fcf6 	bl	800563c <HAL_PWR_EnableWakeUpPin>
    HAL_PWR_EnterSTANDBYMode();
 8003c50:	f001 fd14 	bl	800567c <HAL_PWR_EnterSTANDBYMode>
}
 8003c54:	46c0      	nop			@ (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			@ (mov r8, r8)
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	0001002f 	.word	0x0001002f

08003c64 <configureBMA400>:

void configureBMA400(struct bma400_dev *dev)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b090      	sub	sp, #64	@ 0x40
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
    uint8_t rslt;
    struct bma400_device_conf dev_conf[3];
    struct bma400_sensor_conf sensor_conf;

    // Set initial power mode to low power
    rslt = bma400_set_power_mode(BMA400_MODE_LOW_POWER, dev);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	0019      	movs	r1, r3
 8003c70:	2001      	movs	r0, #1
 8003c72:	f7fe f927 	bl	8001ec4 <bma400_set_power_mode>
 8003c76:	0003      	movs	r3, r0
 8003c78:	001a      	movs	r2, r3
 8003c7a:	213f      	movs	r1, #63	@ 0x3f
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <configureBMA400+0x28>
    {
        Error_Handler();
 8003c88:	f000 f99c 	bl	8003fc4 <Error_Handler>
    }

    // auto low power after movement stops (1 s)
    dev_conf[0].type = BMA400_AUTO_LOW_POWER;
 8003c8c:	2120      	movs	r1, #32
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	2202      	movs	r2, #2
 8003c92:	701a      	strb	r2, [r3, #0]
    dev_conf[0].param.auto_lp.auto_low_power_trigger =
 8003c94:	187b      	adds	r3, r7, r1
 8003c96:	220e      	movs	r2, #14
 8003c98:	709a      	strb	r2, [r3, #2]
        BMA400_AUTO_LP_GEN1_TRIGGER | BMA400_AUTO_LP_TIMEOUT_EN | BMA400_AUTO_LP_TIME_RESET_EN;
    dev_conf[0].param.auto_lp.auto_lp_timeout_threshold = 400; // 400 × 2.5 ms = 1 s
 8003c9a:	187b      	adds	r3, r7, r1
 8003c9c:	22c8      	movs	r2, #200	@ 0xc8
 8003c9e:	0052      	lsls	r2, r2, #1
 8003ca0:	809a      	strh	r2, [r3, #4]

    // wake-up interrupt on motion detection on Z axe
    dev_conf[1].type = BMA400_AUTOWAKEUP_INT;
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	729a      	strb	r2, [r3, #10]
    dev_conf[1].param.wakeup.wakeup_ref_update = BMA400_UPDATE_ONE_TIME;
 8003ca8:	187b      	adds	r3, r7, r1
 8003caa:	2201      	movs	r2, #1
 8003cac:	731a      	strb	r2, [r3, #12]
    dev_conf[1].param.wakeup.sample_count = BMA400_SAMPLE_COUNT_1;
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	735a      	strb	r2, [r3, #13]
    dev_conf[1].param.wakeup.wakeup_axes_en = BMA400_AXIS_Z_EN;
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	739a      	strb	r2, [r3, #14]
    dev_conf[1].param.wakeup.int_wkup_threshold = 3;	// mg threshold
 8003cba:	187b      	adds	r3, r7, r1
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	73da      	strb	r2, [r3, #15]
    dev_conf[1].param.wakeup.int_wkup_ref_z = 0;
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	749a      	strb	r2, [r3, #18]
    dev_conf[1].param.wakeup.int_chan = BMA400_INT_CHANNEL_1;
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	2201      	movs	r2, #1
 8003cca:	74da      	strb	r2, [r3, #19]

    dev_conf[2].type = BMA400_INT_PIN_CONF;
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	2203      	movs	r2, #3
 8003cd0:	751a      	strb	r2, [r3, #20]
    dev_conf[2].param.int_conf.int_chan = BMA400_INT_CHANNEL_1;
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	759a      	strb	r2, [r3, #22]
    dev_conf[2].param.int_conf.pin_conf = BMA400_INT_OPEN_DRAIN_ACTIVE_0;
 8003cd8:	187b      	adds	r3, r7, r1
 8003cda:	2202      	movs	r2, #2
 8003cdc:	75da      	strb	r2, [r3, #23]

    rslt = bma400_set_device_conf(dev_conf, 3, dev);
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	2103      	movs	r1, #3
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f7fe f9ff 	bl	80020e8 <bma400_set_device_conf>
 8003cea:	0003      	movs	r3, r0
 8003cec:	001a      	movs	r2, r3
 8003cee:	213f      	movs	r1, #63	@ 0x3f
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 8003cf4:	187b      	adds	r3, r7, r1
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <configureBMA400+0x9c>
    {
        Error_Handler();
 8003cfc:	f000 f962 	bl	8003fc4 <Error_Handler>
    }

    // configure accelerometer
    sensor_conf.type = BMA400_ACCEL;
 8003d00:	210c      	movs	r1, #12
 8003d02:	187b      	adds	r3, r7, r1
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
    sensor_conf.param.accel.odr = BMA400_ODR_100HZ;
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	709a      	strb	r2, [r3, #2]
    sensor_conf.param.accel.range = BMA400_RANGE_2G;
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	2200      	movs	r2, #0
 8003d12:	70da      	strb	r2, [r3, #3]
    sensor_conf.param.accel.data_src = BMA400_DATA_SRC_ACCEL_FILT_LP;
 8003d14:	187b      	adds	r3, r7, r1
 8003d16:	2202      	movs	r2, #2
 8003d18:	711a      	strb	r2, [r3, #4]
    sensor_conf.param.accel.osr = BMA400_ACCEL_OSR_SETTING_3;
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	2203      	movs	r2, #3
 8003d1e:	715a      	strb	r2, [r3, #5]
    sensor_conf.param.accel.filt1_bw = BMA400_ACCEL_FILT1_BW_0;
 8003d20:	187b      	adds	r3, r7, r1
 8003d22:	2200      	movs	r2, #0
 8003d24:	71da      	strb	r2, [r3, #7]

    rslt = bma400_set_sensor_conf(&sensor_conf, 1, dev);
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fe f95c 	bl	8001fea <bma400_set_sensor_conf>
 8003d32:	0003      	movs	r3, r0
 8003d34:	001a      	movs	r2, r3
 8003d36:	213f      	movs	r1, #63	@ 0x3f
 8003d38:	187b      	adds	r3, r7, r1
 8003d3a:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK) Error_Handler();
 8003d3c:	187b      	adds	r3, r7, r1
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <configureBMA400+0xe4>
 8003d44:	f000 f93e 	bl	8003fc4 <Error_Handler>

    // enable auto wakeup
    rslt = set_auto_wakeup(BMA400_ENABLE, dev);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	f7fe fdd6 	bl	80028fe <set_auto_wakeup>
 8003d52:	0003      	movs	r3, r0
 8003d54:	001a      	movs	r2, r3
 8003d56:	213f      	movs	r1, #63	@ 0x3f
 8003d58:	187b      	adds	r3, r7, r1
 8003d5a:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <configureBMA400+0x104>
    {
        Error_Handler();
 8003d64:	f000 f92e 	bl	8003fc4 <Error_Handler>
    }
}
 8003d68:	46c0      	nop			@ (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b010      	add	sp, #64	@ 0x40
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <calculatePosition>:

float calculatePosition(int16_t acc_z)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	0002      	movs	r2, r0
 8003d78:	1dbb      	adds	r3, r7, #6
 8003d7a:	801a      	strh	r2, [r3, #0]
    // normalize Z axis data to acceleration in g (+/-2g range, 12-bit res)
    float acc_z_g = (float)acc_z / 955.0f;				// theoretically should be 1024 for 1g, but 958 is the actual max value observed on acc_z
 8003d7c:	1dbb      	adds	r3, r7, #6
 8003d7e:	2200      	movs	r2, #0
 8003d80:	5e9b      	ldrsh	r3, [r3, r2]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7fd fb36 	bl	80013f4 <__aeabi_i2f>
 8003d88:	1c03      	adds	r3, r0, #0
 8003d8a:	4927      	ldr	r1, [pc, #156]	@ (8003e28 <calculatePosition+0xb8>)
 8003d8c:	1c18      	adds	r0, r3, #0
 8003d8e:	f7fc fd6f 	bl	8000870 <__aeabi_fdiv>
 8003d92:	1c03      	adds	r3, r0, #0
 8003d94:	613b      	str	r3, [r7, #16]
    acc_z_g = fmaxf(fminf(acc_z_g, 1.0f), -1.0f);		// set range (in case of noise)
 8003d96:	22fe      	movs	r2, #254	@ 0xfe
 8003d98:	0592      	lsls	r2, r2, #22
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1c11      	adds	r1, r2, #0
 8003d9e:	1c18      	adds	r0, r3, #0
 8003da0:	f003 fc4c 	bl	800763c <fminf>
 8003da4:	1c03      	adds	r3, r0, #0
 8003da6:	4a21      	ldr	r2, [pc, #132]	@ (8003e2c <calculatePosition+0xbc>)
 8003da8:	1c11      	adds	r1, r2, #0
 8003daa:	1c18      	adds	r0, r3, #0
 8003dac:	f003 fc30 	bl	8007610 <fmaxf>
 8003db0:	1c03      	adds	r3, r0, #0
 8003db2:	613b      	str	r3, [r7, #16]

    float angle_rad = acosf(acc_z_g);  					// angle = arccos(Z/g) - calculate angle in radians
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1c18      	adds	r0, r3, #0
 8003db8:	f003 fc02 	bl	80075c0 <acosf>
 8003dbc:	1c03      	adds	r3, r0, #0
 8003dbe:	60fb      	str	r3, [r7, #12]
    float angle_deg = angle_rad * (180.0f / M_PI);		// convert to degrees
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f7fd fe4d 	bl	8001a60 <__aeabi_f2d>
 8003dc6:	4a1a      	ldr	r2, [pc, #104]	@ (8003e30 <calculatePosition+0xc0>)
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e34 <calculatePosition+0xc4>)
 8003dca:	f7fd fb63 	bl	8001494 <__aeabi_dmul>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	000b      	movs	r3, r1
 8003dd2:	0010      	movs	r0, r2
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	f7fd fe8b 	bl	8001af0 <__aeabi_d2f>
 8003dda:	1c03      	adds	r3, r0, #0
 8003ddc:	617b      	str	r3, [r7, #20]
    if (angle_deg > 90.0f) angle_deg = 90.0f;			// limit to 0–90 degree
 8003dde:	4916      	ldr	r1, [pc, #88]	@ (8003e38 <calculatePosition+0xc8>)
 8003de0:	6978      	ldr	r0, [r7, #20]
 8003de2:	f7fc fb3f 	bl	8000464 <__aeabi_fcmpgt>
 8003de6:	1e03      	subs	r3, r0, #0
 8003de8:	d001      	beq.n	8003dee <calculatePosition+0x7e>
 8003dea:	4b13      	ldr	r3, [pc, #76]	@ (8003e38 <calculatePosition+0xc8>)
 8003dec:	617b      	str	r3, [r7, #20]

    return (int)((1.0f - angle_deg / 90.0f) * 100.0f);	// convert to %
 8003dee:	4912      	ldr	r1, [pc, #72]	@ (8003e38 <calculatePosition+0xc8>)
 8003df0:	6978      	ldr	r0, [r7, #20]
 8003df2:	f7fc fd3d 	bl	8000870 <__aeabi_fdiv>
 8003df6:	1c03      	adds	r3, r0, #0
 8003df8:	1c19      	adds	r1, r3, #0
 8003dfa:	20fe      	movs	r0, #254	@ 0xfe
 8003dfc:	0580      	lsls	r0, r0, #22
 8003dfe:	f7fd f85f 	bl	8000ec0 <__aeabi_fsub>
 8003e02:	1c03      	adds	r3, r0, #0
 8003e04:	490d      	ldr	r1, [pc, #52]	@ (8003e3c <calculatePosition+0xcc>)
 8003e06:	1c18      	adds	r0, r3, #0
 8003e08:	f7fc ff00 	bl	8000c0c <__aeabi_fmul>
 8003e0c:	1c03      	adds	r3, r0, #0
 8003e0e:	1c18      	adds	r0, r3, #0
 8003e10:	f7fd fad0 	bl	80013b4 <__aeabi_f2iz>
 8003e14:	0003      	movs	r3, r0
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7fd faec 	bl	80013f4 <__aeabi_i2f>
 8003e1c:	1c03      	adds	r3, r0, #0
}
 8003e1e:	1c18      	adds	r0, r3, #0
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b006      	add	sp, #24
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	446ec000 	.word	0x446ec000
 8003e2c:	bf800000 	.word	0xbf800000
 8003e30:	1a63c1f8 	.word	0x1a63c1f8
 8003e34:	404ca5dc 	.word	0x404ca5dc
 8003e38:	42b40000 	.word	0x42b40000
 8003e3c:	42c80000 	.word	0x42c80000

08003e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	b08f      	sub	sp, #60	@ 0x3c
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	struct bma400_dev bma400;

	bma400.intf = BMA400_I2C_INTF;
 8003e46:	2114      	movs	r1, #20
 8003e48:	187b      	adds	r3, r7, r1
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	705a      	strb	r2, [r3, #1]
	bma400.intf_ptr = &hi2c1;
 8003e4e:	000c      	movs	r4, r1
 8003e50:	193b      	adds	r3, r7, r4
 8003e52:	4a2e      	ldr	r2, [pc, #184]	@ (8003f0c <main+0xcc>)
 8003e54:	605a      	str	r2, [r3, #4]
	bma400.read = user_i2c_read;
 8003e56:	193b      	adds	r3, r7, r4
 8003e58:	4a2d      	ldr	r2, [pc, #180]	@ (8003f10 <main+0xd0>)
 8003e5a:	60da      	str	r2, [r3, #12]
	bma400.write = user_i2c_write;
 8003e5c:	193b      	adds	r3, r7, r4
 8003e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f14 <main+0xd4>)
 8003e60:	611a      	str	r2, [r3, #16]
	bma400.delay_us = user_delay_us;
 8003e62:	193b      	adds	r3, r7, r4
 8003e64:	4a2c      	ldr	r2, [pc, #176]	@ (8003f18 <main+0xd8>)
 8003e66:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e68:	f000 fa5f 	bl	800432a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e6c:	f000 f85e 	bl	8003f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e70:	f7ff fdc4 	bl	80039fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8003e74:	f7ff fe42 	bl	8003afc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003e78:	f000 f97a 	bl	8004170 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8003e7c:	f000 f934 	bl	80040e8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); // dbg
 8003e80:	4b26      	ldr	r3, [pc, #152]	@ (8003f1c <main+0xdc>)
 8003e82:	4a27      	ldr	r2, [pc, #156]	@ (8003f20 <main+0xe0>)
 8003e84:	619a      	str	r2, [r3, #24]
  bma400_init(&bma400);
 8003e86:	193b      	adds	r3, r7, r4
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7fd fed1 	bl	8001c30 <bma400_init>
  configureBMA400(&bma400);
 8003e8e:	193b      	adds	r3, r7, r4
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7ff fee7 	bl	8003c64 <configureBMA400>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  struct bma400_sensor_data data;	// structure for storing data
	  bma400_get_accel_data(BMA400_DATA_ONLY, &data, &bma400);
 8003e96:	2314      	movs	r3, #20
 8003e98:	18fa      	adds	r2, r7, r3
 8003e9a:	2408      	movs	r4, #8
 8003e9c:	193b      	adds	r3, r7, r4
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	f7fe f871 	bl	8001f88 <bma400_get_accel_data>

	  int percent_open = calculatePosition(data.z);
 8003ea6:	193b      	adds	r3, r7, r4
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	5e9b      	ldrsh	r3, [r3, r2]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7ff ff5f 	bl	8003d70 <calculatePosition>
 8003eb2:	1c03      	adds	r3, r0, #0
 8003eb4:	1c18      	adds	r0, r3, #0
 8003eb6:	f7fd fa7d 	bl	80013b4 <__aeabi_f2iz>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	637b      	str	r3, [r7, #52]	@ 0x34

	  HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, SET);	// activate ESP8266
 8003ebe:	23a0      	movs	r3, #160	@ 0xa0
 8003ec0:	05db      	lsls	r3, r3, #23
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	2120      	movs	r1, #32
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f000 fcfe 	bl	80048c8 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8003ecc:	20c8      	movs	r0, #200	@ 0xc8
 8003ece:	f000 faa9 	bl	8004424 <HAL_Delay>

	  char msg[5];
	  snprintf(msg, sizeof(msg), "%d\n", percent_open);
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed4:	4a13      	ldr	r2, [pc, #76]	@ (8003f24 <main+0xe4>)
 8003ed6:	0038      	movs	r0, r7
 8003ed8:	2105      	movs	r1, #5
 8003eda:	f002 fec1 	bl	8006c60 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// send data to esp
 8003ede:	003b      	movs	r3, r7
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7fc f911 	bl	8000108 <strlen>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	2301      	movs	r3, #1
 8003eec:	425b      	negs	r3, r3
 8003eee:	0039      	movs	r1, r7
 8003ef0:	480d      	ldr	r0, [pc, #52]	@ (8003f28 <main+0xe8>)
 8003ef2:	f002 f945 	bl	8006180 <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, RESET);
 8003ef6:	23a0      	movs	r3, #160	@ 0xa0
 8003ef8:	05db      	lsls	r3, r3, #23
 8003efa:	2200      	movs	r2, #0
 8003efc:	2120      	movs	r1, #32
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 fce2 	bl	80048c8 <HAL_GPIO_WritePin>

	  enterStandby();
 8003f04:	f7ff fe9c 	bl	8003c40 <enterStandby>
  {
 8003f08:	46c0      	nop			@ (mov r8, r8)
 8003f0a:	e7c4      	b.n	8003e96 <main+0x56>
 8003f0c:	20000078 	.word	0x20000078
 8003f10:	0800393b 	.word	0x0800393b
 8003f14:	08003989 	.word	0x08003989
 8003f18:	080039d7 	.word	0x080039d7
 8003f1c:	40007000 	.word	0x40007000
 8003f20:	00010100 	.word	0x00010100
 8003f24:	08007a68 	.word	0x08007a68
 8003f28:	2000011c 	.word	0x2000011c

08003f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b08d      	sub	sp, #52	@ 0x34
 8003f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f32:	2414      	movs	r4, #20
 8003f34:	193b      	adds	r3, r7, r4
 8003f36:	0018      	movs	r0, r3
 8003f38:	231c      	movs	r3, #28
 8003f3a:	001a      	movs	r2, r3
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	f002 fec5 	bl	8006ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f42:	003b      	movs	r3, r7
 8003f44:	0018      	movs	r0, r3
 8003f46:	2314      	movs	r3, #20
 8003f48:	001a      	movs	r2, r3
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	f002 febe 	bl	8006ccc <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003f50:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc0 <SystemClock_Config+0x94>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <SystemClock_Config+0x94>)
 8003f56:	2107      	movs	r1, #7
 8003f58:	438a      	bics	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f5c:	193b      	adds	r3, r7, r4
 8003f5e:	2202      	movs	r2, #2
 8003f60:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f62:	193b      	adds	r3, r7, r4
 8003f64:	2280      	movs	r2, #128	@ 0x80
 8003f66:	0052      	lsls	r2, r2, #1
 8003f68:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8003f6a:	193b      	adds	r3, r7, r4
 8003f6c:	2280      	movs	r2, #128	@ 0x80
 8003f6e:	0152      	lsls	r2, r2, #5
 8003f70:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f72:	193b      	adds	r3, r7, r4
 8003f74:	2240      	movs	r2, #64	@ 0x40
 8003f76:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f78:	193b      	adds	r3, r7, r4
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f001 fb98 	bl	80056b0 <HAL_RCC_OscConfig>
 8003f80:	1e03      	subs	r3, r0, #0
 8003f82:	d001      	beq.n	8003f88 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8003f84:	f000 f81e 	bl	8003fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f88:	003b      	movs	r3, r7
 8003f8a:	2207      	movs	r2, #7
 8003f8c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003f8e:	003b      	movs	r3, r7
 8003f90:	2200      	movs	r2, #0
 8003f92:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003f94:	003b      	movs	r3, r7
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003f9a:	003b      	movs	r3, r7
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8003fa0:	003b      	movs	r3, r7
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003fa6:	003b      	movs	r3, r7
 8003fa8:	2100      	movs	r1, #0
 8003faa:	0018      	movs	r0, r3
 8003fac:	f001 fd64 	bl	8005a78 <HAL_RCC_ClockConfig>
 8003fb0:	1e03      	subs	r3, r0, #0
 8003fb2:	d001      	beq.n	8003fb8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003fb4:	f000 f806 	bl	8003fc4 <Error_Handler>
  }
}
 8003fb8:	46c0      	nop			@ (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b00d      	add	sp, #52	@ 0x34
 8003fbe:	bd90      	pop	{r4, r7, pc}
 8003fc0:	40022000 	.word	0x40022000

08003fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8003fc8:	2380      	movs	r3, #128	@ 0x80
 8003fca:	0059      	lsls	r1, r3, #1
 8003fcc:	23a0      	movs	r3, #160	@ 0xa0
 8003fce:	05db      	lsls	r3, r3, #23
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f000 fc78 	bl	80048c8 <HAL_GPIO_WritePin>
  while (1)
 8003fd8:	46c0      	nop			@ (mov r8, r8)
 8003fda:	e7fd      	b.n	8003fd8 <Error_Handler+0x14>

08003fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe2:	4b12      	ldr	r3, [pc, #72]	@ (800402c <HAL_MspInit+0x50>)
 8003fe4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fe6:	4b11      	ldr	r3, [pc, #68]	@ (800402c <HAL_MspInit+0x50>)
 8003fe8:	2101      	movs	r1, #1
 8003fea:	430a      	orrs	r2, r1
 8003fec:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fee:	4b0f      	ldr	r3, [pc, #60]	@ (800402c <HAL_MspInit+0x50>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800402c <HAL_MspInit+0x50>)
 8003ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <HAL_MspInit+0x50>)
 8004000:	2180      	movs	r1, #128	@ 0x80
 8004002:	0549      	lsls	r1, r1, #21
 8004004:	430a      	orrs	r2, r1
 8004006:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004008:	4b08      	ldr	r3, [pc, #32]	@ (800402c <HAL_MspInit+0x50>)
 800400a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800400c:	2380      	movs	r3, #128	@ 0x80
 800400e:	055b      	lsls	r3, r3, #21
 8004010:	4013      	ands	r3, r2
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8004016:	2008      	movs	r0, #8
 8004018:	f000 fa28 	bl	800446c <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 800401c:	2010      	movs	r0, #16
 800401e:	f000 fa25 	bl	800446c <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b002      	add	sp, #8
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	40021000 	.word	0x40021000

08004030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004034:	46c0      	nop			@ (mov r8, r8)
 8004036:	e7fd      	b.n	8004034 <NMI_Handler+0x4>

08004038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800403c:	46c0      	nop			@ (mov r8, r8)
 800403e:	e7fd      	b.n	800403c <HardFault_Handler+0x4>

08004040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004044:	46c0      	nop			@ (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800404e:	46c0      	nop			@ (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004058:	f000 f9c8 	bl	80043ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800405c:	46c0      	nop			@ (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800406c:	4a14      	ldr	r2, [pc, #80]	@ (80040c0 <_sbrk+0x5c>)
 800406e:	4b15      	ldr	r3, [pc, #84]	@ (80040c4 <_sbrk+0x60>)
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004078:	4b13      	ldr	r3, [pc, #76]	@ (80040c8 <_sbrk+0x64>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004080:	4b11      	ldr	r3, [pc, #68]	@ (80040c8 <_sbrk+0x64>)
 8004082:	4a12      	ldr	r2, [pc, #72]	@ (80040cc <_sbrk+0x68>)
 8004084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004086:	4b10      	ldr	r3, [pc, #64]	@ (80040c8 <_sbrk+0x64>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	18d3      	adds	r3, r2, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	429a      	cmp	r2, r3
 8004092:	d207      	bcs.n	80040a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004094:	f002 fe22 	bl	8006cdc <__errno>
 8004098:	0003      	movs	r3, r0
 800409a:	220c      	movs	r2, #12
 800409c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800409e:	2301      	movs	r3, #1
 80040a0:	425b      	negs	r3, r3
 80040a2:	e009      	b.n	80040b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040a4:	4b08      	ldr	r3, [pc, #32]	@ (80040c8 <_sbrk+0x64>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040aa:	4b07      	ldr	r3, [pc, #28]	@ (80040c8 <_sbrk+0x64>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	18d2      	adds	r2, r2, r3
 80040b2:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <_sbrk+0x64>)
 80040b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80040b6:	68fb      	ldr	r3, [r7, #12]
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b006      	add	sp, #24
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20001800 	.word	0x20001800
 80040c4:	00000400 	.word	0x00000400
 80040c8:	200000cc 	.word	0x200000cc
 80040cc:	20000300 	.word	0x20000300

080040d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040d4:	4b03      	ldr	r3, [pc, #12]	@ (80040e4 <SystemInit+0x14>)
 80040d6:	2280      	movs	r2, #128	@ 0x80
 80040d8:	0512      	lsls	r2, r2, #20
 80040da:	609a      	str	r2, [r3, #8]
#endif
}
 80040dc:	46c0      	nop			@ (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	e000ed00 	.word	0xe000ed00

080040e8 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80040ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004128 <MX_TIM14_Init+0x40>)
 80040ee:	4a0f      	ldr	r2, [pc, #60]	@ (800412c <MX_TIM14_Init+0x44>)
 80040f0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 80040f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004128 <MX_TIM14_Init+0x40>)
 80040f4:	2263      	movs	r2, #99	@ 0x63
 80040f6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <MX_TIM14_Init+0x40>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 119;
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <MX_TIM14_Init+0x40>)
 8004100:	2277      	movs	r2, #119	@ 0x77
 8004102:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004104:	4b08      	ldr	r3, [pc, #32]	@ (8004128 <MX_TIM14_Init+0x40>)
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800410a:	4b07      	ldr	r3, [pc, #28]	@ (8004128 <MX_TIM14_Init+0x40>)
 800410c:	2200      	movs	r2, #0
 800410e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004110:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <MX_TIM14_Init+0x40>)
 8004112:	0018      	movs	r0, r3
 8004114:	f001 ff14 	bl	8005f40 <HAL_TIM_Base_Init>
 8004118:	1e03      	subs	r3, r0, #0
 800411a:	d001      	beq.n	8004120 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800411c:	f7ff ff52 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004120:	46c0      	nop			@ (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	200000d0 	.word	0x200000d0
 800412c:	40002000 	.word	0x40002000

08004130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0a      	ldr	r2, [pc, #40]	@ (8004168 <HAL_TIM_Base_MspInit+0x38>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d10d      	bne.n	800415e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004142:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <HAL_TIM_Base_MspInit+0x3c>)
 8004144:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004146:	4b09      	ldr	r3, [pc, #36]	@ (800416c <HAL_TIM_Base_MspInit+0x3c>)
 8004148:	2180      	movs	r1, #128	@ 0x80
 800414a:	0209      	lsls	r1, r1, #8
 800414c:	430a      	orrs	r2, r1
 800414e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004150:	4b06      	ldr	r3, [pc, #24]	@ (800416c <HAL_TIM_Base_MspInit+0x3c>)
 8004152:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004154:	2380      	movs	r3, #128	@ 0x80
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	b004      	add	sp, #16
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	40002000 	.word	0x40002000
 800416c:	40021000 	.word	0x40021000

08004170 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004174:	4b25      	ldr	r3, [pc, #148]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 8004176:	4a26      	ldr	r2, [pc, #152]	@ (8004210 <MX_USART1_UART_Init+0xa0>)
 8004178:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800417a:	4b24      	ldr	r3, [pc, #144]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 800417c:	22e1      	movs	r2, #225	@ 0xe1
 800417e:	0252      	lsls	r2, r2, #9
 8004180:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004182:	4b22      	ldr	r3, [pc, #136]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 8004184:	2200      	movs	r2, #0
 8004186:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004188:	4b20      	ldr	r3, [pc, #128]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 800418a:	2200      	movs	r2, #0
 800418c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800418e:	4b1f      	ldr	r3, [pc, #124]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 8004190:	2200      	movs	r2, #0
 8004192:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004194:	4b1d      	ldr	r3, [pc, #116]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 8004196:	220c      	movs	r2, #12
 8004198:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800419a:	4b1c      	ldr	r3, [pc, #112]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 800419c:	2200      	movs	r2, #0
 800419e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041a0:	4b1a      	ldr	r3, [pc, #104]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041a6:	4b19      	ldr	r3, [pc, #100]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041ac:	4b17      	ldr	r3, [pc, #92]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80041b2:	4b16      	ldr	r3, [pc, #88]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 80041b4:	2208      	movs	r2, #8
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80041b8:	4b14      	ldr	r3, [pc, #80]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 80041ba:	2280      	movs	r2, #128	@ 0x80
 80041bc:	0212      	lsls	r2, r2, #8
 80041be:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041c0:	4b12      	ldr	r3, [pc, #72]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 80041c2:	0018      	movs	r0, r3
 80041c4:	f001 ff86 	bl	80060d4 <HAL_UART_Init>
 80041c8:	1e03      	subs	r3, r0, #0
 80041ca:	d001      	beq.n	80041d0 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80041cc:	f7ff fefa 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041d0:	4b0e      	ldr	r3, [pc, #56]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 80041d2:	2100      	movs	r1, #0
 80041d4:	0018      	movs	r0, r3
 80041d6:	f002 fc63 	bl	8006aa0 <HAL_UARTEx_SetTxFifoThreshold>
 80041da:	1e03      	subs	r3, r0, #0
 80041dc:	d001      	beq.n	80041e2 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 80041de:	f7ff fef1 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041e2:	4b0a      	ldr	r3, [pc, #40]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 80041e4:	2100      	movs	r1, #0
 80041e6:	0018      	movs	r0, r3
 80041e8:	f002 fc9a 	bl	8006b20 <HAL_UARTEx_SetRxFifoThreshold>
 80041ec:	1e03      	subs	r3, r0, #0
 80041ee:	d001      	beq.n	80041f4 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 80041f0:	f7ff fee8 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80041f4:	4b05      	ldr	r3, [pc, #20]	@ (800420c <MX_USART1_UART_Init+0x9c>)
 80041f6:	0018      	movs	r0, r3
 80041f8:	f002 fc18 	bl	8006a2c <HAL_UARTEx_DisableFifoMode>
 80041fc:	1e03      	subs	r3, r0, #0
 80041fe:	d001      	beq.n	8004204 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8004200:	f7ff fee0 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004204:	46c0      	nop			@ (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	2000011c 	.word	0x2000011c
 8004210:	40013800 	.word	0x40013800

08004214 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b091      	sub	sp, #68	@ 0x44
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800421c:	232c      	movs	r3, #44	@ 0x2c
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	0018      	movs	r0, r3
 8004222:	2314      	movs	r3, #20
 8004224:	001a      	movs	r2, r3
 8004226:	2100      	movs	r1, #0
 8004228:	f002 fd50 	bl	8006ccc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800422c:	2410      	movs	r4, #16
 800422e:	193b      	adds	r3, r7, r4
 8004230:	0018      	movs	r0, r3
 8004232:	231c      	movs	r3, #28
 8004234:	001a      	movs	r2, r3
 8004236:	2100      	movs	r1, #0
 8004238:	f002 fd48 	bl	8006ccc <memset>
  if(uartHandle->Instance==USART1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a23      	ldr	r2, [pc, #140]	@ (80042d0 <HAL_UART_MspInit+0xbc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d13f      	bne.n	80042c6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004246:	193b      	adds	r3, r7, r4
 8004248:	2201      	movs	r2, #1
 800424a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800424c:	193b      	adds	r3, r7, r4
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004252:	193b      	adds	r3, r7, r4
 8004254:	0018      	movs	r0, r3
 8004256:	f001 fd87 	bl	8005d68 <HAL_RCCEx_PeriphCLKConfig>
 800425a:	1e03      	subs	r3, r0, #0
 800425c:	d001      	beq.n	8004262 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800425e:	f7ff feb1 	bl	8003fc4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004262:	4b1c      	ldr	r3, [pc, #112]	@ (80042d4 <HAL_UART_MspInit+0xc0>)
 8004264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004266:	4b1b      	ldr	r3, [pc, #108]	@ (80042d4 <HAL_UART_MspInit+0xc0>)
 8004268:	2180      	movs	r1, #128	@ 0x80
 800426a:	01c9      	lsls	r1, r1, #7
 800426c:	430a      	orrs	r2, r1
 800426e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004270:	4b18      	ldr	r3, [pc, #96]	@ (80042d4 <HAL_UART_MspInit+0xc0>)
 8004272:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004274:	2380      	movs	r3, #128	@ 0x80
 8004276:	01db      	lsls	r3, r3, #7
 8004278:	4013      	ands	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800427e:	4b15      	ldr	r3, [pc, #84]	@ (80042d4 <HAL_UART_MspInit+0xc0>)
 8004280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004282:	4b14      	ldr	r3, [pc, #80]	@ (80042d4 <HAL_UART_MspInit+0xc0>)
 8004284:	2101      	movs	r1, #1
 8004286:	430a      	orrs	r2, r1
 8004288:	635a      	str	r2, [r3, #52]	@ 0x34
 800428a:	4b12      	ldr	r3, [pc, #72]	@ (80042d4 <HAL_UART_MspInit+0xc0>)
 800428c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428e:	2201      	movs	r2, #1
 8004290:	4013      	ands	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004296:	212c      	movs	r1, #44	@ 0x2c
 8004298:	187b      	adds	r3, r7, r1
 800429a:	22c0      	movs	r2, #192	@ 0xc0
 800429c:	00d2      	lsls	r2, r2, #3
 800429e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a0:	187b      	adds	r3, r7, r1
 80042a2:	2202      	movs	r2, #2
 80042a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a6:	187b      	adds	r3, r7, r1
 80042a8:	2200      	movs	r2, #0
 80042aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ac:	187b      	adds	r3, r7, r1
 80042ae:	2200      	movs	r2, #0
 80042b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80042b2:	187b      	adds	r3, r7, r1
 80042b4:	2201      	movs	r2, #1
 80042b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b8:	187a      	adds	r2, r7, r1
 80042ba:	23a0      	movs	r3, #160	@ 0xa0
 80042bc:	05db      	lsls	r3, r3, #23
 80042be:	0011      	movs	r1, r2
 80042c0:	0018      	movs	r0, r3
 80042c2:	f000 f997 	bl	80045f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b011      	add	sp, #68	@ 0x44
 80042cc:	bd90      	pop	{r4, r7, pc}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	40013800 	.word	0x40013800
 80042d4:	40021000 	.word	0x40021000

080042d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042d8:	480d      	ldr	r0, [pc, #52]	@ (8004310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80042dc:	f7ff fef8 	bl	80040d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80042e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80042e2:	e003      	b.n	80042ec <LoopCopyDataInit>

080042e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80042e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004314 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80042e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80042e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80042ea:	3104      	adds	r1, #4

080042ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80042ec:	480a      	ldr	r0, [pc, #40]	@ (8004318 <LoopForever+0xa>)
  ldr r3, =_edata
 80042ee:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <LoopForever+0xe>)
  adds r2, r0, r1
 80042f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80042f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80042f4:	d3f6      	bcc.n	80042e4 <CopyDataInit>
  ldr r2, =_sbss
 80042f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004320 <LoopForever+0x12>)
  b LoopFillZerobss
 80042f8:	e002      	b.n	8004300 <LoopFillZerobss>

080042fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80042fa:	2300      	movs	r3, #0
  str  r3, [r2]
 80042fc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042fe:	3204      	adds	r2, #4

08004300 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004300:	4b08      	ldr	r3, [pc, #32]	@ (8004324 <LoopForever+0x16>)
  cmp r2, r3
 8004302:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004304:	d3f9      	bcc.n	80042fa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8004306:	f002 fcef 	bl	8006ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800430a:	f7ff fd99 	bl	8003e40 <main>

0800430e <LoopForever>:

LoopForever:
    b LoopForever
 800430e:	e7fe      	b.n	800430e <LoopForever>
  ldr   r0, =_estack
 8004310:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8004314:	08007bfc 	.word	0x08007bfc
  ldr r0, =_sdata
 8004318:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800431c:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8004320:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8004324:	200002fc 	.word	0x200002fc

08004328 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004328:	e7fe      	b.n	8004328 <ADC1_IRQHandler>

0800432a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004330:	1dfb      	adds	r3, r7, #7
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004336:	2003      	movs	r0, #3
 8004338:	f000 f80e 	bl	8004358 <HAL_InitTick>
 800433c:	1e03      	subs	r3, r0, #0
 800433e:	d003      	beq.n	8004348 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8004340:	1dfb      	adds	r3, r7, #7
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	e001      	b.n	800434c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004348:	f7ff fe48 	bl	8003fdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800434c:	1dfb      	adds	r3, r7, #7
 800434e:	781b      	ldrb	r3, [r3, #0]
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004360:	230f      	movs	r3, #15
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8004368:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <HAL_InitTick+0x88>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d02b      	beq.n	80043c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8004370:	4b1c      	ldr	r3, [pc, #112]	@ (80043e4 <HAL_InitTick+0x8c>)
 8004372:	681c      	ldr	r4, [r3, #0]
 8004374:	4b1a      	ldr	r3, [pc, #104]	@ (80043e0 <HAL_InitTick+0x88>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	0019      	movs	r1, r3
 800437a:	23fa      	movs	r3, #250	@ 0xfa
 800437c:	0098      	lsls	r0, r3, #2
 800437e:	f7fb fed5 	bl	800012c <__udivsi3>
 8004382:	0003      	movs	r3, r0
 8004384:	0019      	movs	r1, r3
 8004386:	0020      	movs	r0, r4
 8004388:	f7fb fed0 	bl	800012c <__udivsi3>
 800438c:	0003      	movs	r3, r0
 800438e:	0018      	movs	r0, r3
 8004390:	f000 f923 	bl	80045da <HAL_SYSTICK_Config>
 8004394:	1e03      	subs	r3, r0, #0
 8004396:	d112      	bne.n	80043be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b03      	cmp	r3, #3
 800439c:	d80a      	bhi.n	80043b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	2301      	movs	r3, #1
 80043a2:	425b      	negs	r3, r3
 80043a4:	2200      	movs	r2, #0
 80043a6:	0018      	movs	r0, r3
 80043a8:	f000 f902 	bl	80045b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043ac:	4b0e      	ldr	r3, [pc, #56]	@ (80043e8 <HAL_InitTick+0x90>)
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e00d      	b.n	80043d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80043b4:	230f      	movs	r3, #15
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	e008      	b.n	80043d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043be:	230f      	movs	r3, #15
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	e003      	b.n	80043d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043c8:	230f      	movs	r3, #15
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80043d0:	230f      	movs	r3, #15
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	781b      	ldrb	r3, [r3, #0]
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b005      	add	sp, #20
 80043dc:	bd90      	pop	{r4, r7, pc}
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	20000008 	.word	0x20000008
 80043e4:	20000000 	.word	0x20000000
 80043e8:	20000004 	.word	0x20000004

080043ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043f0:	4b05      	ldr	r3, [pc, #20]	@ (8004408 <HAL_IncTick+0x1c>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	001a      	movs	r2, r3
 80043f6:	4b05      	ldr	r3, [pc, #20]	@ (800440c <HAL_IncTick+0x20>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	18d2      	adds	r2, r2, r3
 80043fc:	4b03      	ldr	r3, [pc, #12]	@ (800440c <HAL_IncTick+0x20>)
 80043fe:	601a      	str	r2, [r3, #0]
}
 8004400:	46c0      	nop			@ (mov r8, r8)
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	20000008 	.word	0x20000008
 800440c:	200001b0 	.word	0x200001b0

08004410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  return uwTick;
 8004414:	4b02      	ldr	r3, [pc, #8]	@ (8004420 <HAL_GetTick+0x10>)
 8004416:	681b      	ldr	r3, [r3, #0]
}
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	200001b0 	.word	0x200001b0

08004424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800442c:	f7ff fff0 	bl	8004410 <HAL_GetTick>
 8004430:	0003      	movs	r3, r0
 8004432:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3301      	adds	r3, #1
 800443c:	d005      	beq.n	800444a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800443e:	4b0a      	ldr	r3, [pc, #40]	@ (8004468 <HAL_Delay+0x44>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	001a      	movs	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	189b      	adds	r3, r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	f7ff ffe0 	bl	8004410 <HAL_GetTick>
 8004450:	0002      	movs	r2, r0
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	429a      	cmp	r2, r3
 800445a:	d8f7      	bhi.n	800444c <HAL_Delay+0x28>
  {
  }
}
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	46bd      	mov	sp, r7
 8004462:	b004      	add	sp, #16
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	20000008 	.word	0x20000008

0800446c <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8004474:	4b04      	ldr	r3, [pc, #16]	@ (8004488 <HAL_SYSCFG_EnableRemap+0x1c>)
 8004476:	6819      	ldr	r1, [r3, #0]
 8004478:	4b03      	ldr	r3, [pc, #12]	@ (8004488 <HAL_SYSCFG_EnableRemap+0x1c>)
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]
}
 8004480:	46c0      	nop			@ (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b002      	add	sp, #8
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40010000 	.word	0x40010000

0800448c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800448c:	b590      	push	{r4, r7, lr}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	0002      	movs	r2, r0
 8004494:	6039      	str	r1, [r7, #0]
 8004496:	1dfb      	adds	r3, r7, #7
 8004498:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800449a:	1dfb      	adds	r3, r7, #7
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b7f      	cmp	r3, #127	@ 0x7f
 80044a0:	d828      	bhi.n	80044f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004560 <__NVIC_SetPriority+0xd4>)
 80044a4:	1dfb      	adds	r3, r7, #7
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	b25b      	sxtb	r3, r3
 80044aa:	089b      	lsrs	r3, r3, #2
 80044ac:	33c0      	adds	r3, #192	@ 0xc0
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	589b      	ldr	r3, [r3, r2]
 80044b2:	1dfa      	adds	r2, r7, #7
 80044b4:	7812      	ldrb	r2, [r2, #0]
 80044b6:	0011      	movs	r1, r2
 80044b8:	2203      	movs	r2, #3
 80044ba:	400a      	ands	r2, r1
 80044bc:	00d2      	lsls	r2, r2, #3
 80044be:	21ff      	movs	r1, #255	@ 0xff
 80044c0:	4091      	lsls	r1, r2
 80044c2:	000a      	movs	r2, r1
 80044c4:	43d2      	mvns	r2, r2
 80044c6:	401a      	ands	r2, r3
 80044c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	019b      	lsls	r3, r3, #6
 80044ce:	22ff      	movs	r2, #255	@ 0xff
 80044d0:	401a      	ands	r2, r3
 80044d2:	1dfb      	adds	r3, r7, #7
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	0018      	movs	r0, r3
 80044d8:	2303      	movs	r3, #3
 80044da:	4003      	ands	r3, r0
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044e0:	481f      	ldr	r0, [pc, #124]	@ (8004560 <__NVIC_SetPriority+0xd4>)
 80044e2:	1dfb      	adds	r3, r7, #7
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	b25b      	sxtb	r3, r3
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	430a      	orrs	r2, r1
 80044ec:	33c0      	adds	r3, #192	@ 0xc0
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80044f2:	e031      	b.n	8004558 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004564 <__NVIC_SetPriority+0xd8>)
 80044f6:	1dfb      	adds	r3, r7, #7
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	0019      	movs	r1, r3
 80044fc:	230f      	movs	r3, #15
 80044fe:	400b      	ands	r3, r1
 8004500:	3b08      	subs	r3, #8
 8004502:	089b      	lsrs	r3, r3, #2
 8004504:	3306      	adds	r3, #6
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	18d3      	adds	r3, r2, r3
 800450a:	3304      	adds	r3, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	1dfa      	adds	r2, r7, #7
 8004510:	7812      	ldrb	r2, [r2, #0]
 8004512:	0011      	movs	r1, r2
 8004514:	2203      	movs	r2, #3
 8004516:	400a      	ands	r2, r1
 8004518:	00d2      	lsls	r2, r2, #3
 800451a:	21ff      	movs	r1, #255	@ 0xff
 800451c:	4091      	lsls	r1, r2
 800451e:	000a      	movs	r2, r1
 8004520:	43d2      	mvns	r2, r2
 8004522:	401a      	ands	r2, r3
 8004524:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	019b      	lsls	r3, r3, #6
 800452a:	22ff      	movs	r2, #255	@ 0xff
 800452c:	401a      	ands	r2, r3
 800452e:	1dfb      	adds	r3, r7, #7
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	0018      	movs	r0, r3
 8004534:	2303      	movs	r3, #3
 8004536:	4003      	ands	r3, r0
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800453c:	4809      	ldr	r0, [pc, #36]	@ (8004564 <__NVIC_SetPriority+0xd8>)
 800453e:	1dfb      	adds	r3, r7, #7
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	001c      	movs	r4, r3
 8004544:	230f      	movs	r3, #15
 8004546:	4023      	ands	r3, r4
 8004548:	3b08      	subs	r3, #8
 800454a:	089b      	lsrs	r3, r3, #2
 800454c:	430a      	orrs	r2, r1
 800454e:	3306      	adds	r3, #6
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	18c3      	adds	r3, r0, r3
 8004554:	3304      	adds	r3, #4
 8004556:	601a      	str	r2, [r3, #0]
}
 8004558:	46c0      	nop			@ (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	b003      	add	sp, #12
 800455e:	bd90      	pop	{r4, r7, pc}
 8004560:	e000e100 	.word	0xe000e100
 8004564:	e000ed00 	.word	0xe000ed00

08004568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	1e5a      	subs	r2, r3, #1
 8004574:	2380      	movs	r3, #128	@ 0x80
 8004576:	045b      	lsls	r3, r3, #17
 8004578:	429a      	cmp	r2, r3
 800457a:	d301      	bcc.n	8004580 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800457c:	2301      	movs	r3, #1
 800457e:	e010      	b.n	80045a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004580:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <SysTick_Config+0x44>)
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	3a01      	subs	r2, #1
 8004586:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004588:	2301      	movs	r3, #1
 800458a:	425b      	negs	r3, r3
 800458c:	2103      	movs	r1, #3
 800458e:	0018      	movs	r0, r3
 8004590:	f7ff ff7c 	bl	800448c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004594:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <SysTick_Config+0x44>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800459a:	4b04      	ldr	r3, [pc, #16]	@ (80045ac <SysTick_Config+0x44>)
 800459c:	2207      	movs	r2, #7
 800459e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	0018      	movs	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b002      	add	sp, #8
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	e000e010 	.word	0xe000e010

080045b0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	210f      	movs	r1, #15
 80045bc:	187b      	adds	r3, r7, r1
 80045be:	1c02      	adds	r2, r0, #0
 80045c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	187b      	adds	r3, r7, r1
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	b25b      	sxtb	r3, r3
 80045ca:	0011      	movs	r1, r2
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7ff ff5d 	bl	800448c <__NVIC_SetPriority>
}
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b004      	add	sp, #16
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	0018      	movs	r0, r3
 80045e6:	f7ff ffbf 	bl	8004568 <SysTick_Config>
 80045ea:	0003      	movs	r3, r0
}
 80045ec:	0018      	movs	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b002      	add	sp, #8
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004602:	e14d      	b.n	80048a0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2101      	movs	r1, #1
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4091      	lsls	r1, r2
 800460e:	000a      	movs	r2, r1
 8004610:	4013      	ands	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d100      	bne.n	800461c <HAL_GPIO_Init+0x28>
 800461a:	e13e      	b.n	800489a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d003      	beq.n	800462c <HAL_GPIO_Init+0x38>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b12      	cmp	r3, #18
 800462a:	d125      	bne.n	8004678 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	08da      	lsrs	r2, r3, #3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3208      	adds	r2, #8
 8004634:	0092      	lsls	r2, r2, #2
 8004636:	58d3      	ldr	r3, [r2, r3]
 8004638:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2207      	movs	r2, #7
 800463e:	4013      	ands	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	220f      	movs	r2, #15
 8004644:	409a      	lsls	r2, r3
 8004646:	0013      	movs	r3, r2
 8004648:	43da      	mvns	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	4013      	ands	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	220f      	movs	r2, #15
 8004656:	401a      	ands	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2107      	movs	r1, #7
 800465c:	400b      	ands	r3, r1
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	409a      	lsls	r2, r3
 8004662:	0013      	movs	r3, r2
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	08da      	lsrs	r2, r3, #3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3208      	adds	r2, #8
 8004672:	0092      	lsls	r2, r2, #2
 8004674:	6979      	ldr	r1, [r7, #20]
 8004676:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	2203      	movs	r2, #3
 8004684:	409a      	lsls	r2, r3
 8004686:	0013      	movs	r3, r2
 8004688:	43da      	mvns	r2, r3
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	4013      	ands	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2203      	movs	r2, #3
 8004696:	401a      	ands	r2, r3
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	409a      	lsls	r2, r3
 800469e:	0013      	movs	r3, r2
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d00b      	beq.n	80046cc <HAL_GPIO_Init+0xd8>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d007      	beq.n	80046cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046c0:	2b11      	cmp	r3, #17
 80046c2:	d003      	beq.n	80046cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b12      	cmp	r3, #18
 80046ca:	d130      	bne.n	800472e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	2203      	movs	r2, #3
 80046d8:	409a      	lsls	r2, r3
 80046da:	0013      	movs	r3, r2
 80046dc:	43da      	mvns	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	4013      	ands	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	409a      	lsls	r2, r3
 80046ee:	0013      	movs	r3, r2
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004702:	2201      	movs	r2, #1
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	409a      	lsls	r2, r3
 8004708:	0013      	movs	r3, r2
 800470a:	43da      	mvns	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	4013      	ands	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	2201      	movs	r2, #1
 800471a:	401a      	ands	r2, r3
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	409a      	lsls	r2, r3
 8004720:	0013      	movs	r3, r2
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b03      	cmp	r3, #3
 8004734:	d017      	beq.n	8004766 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	2203      	movs	r2, #3
 8004742:	409a      	lsls	r2, r3
 8004744:	0013      	movs	r3, r2
 8004746:	43da      	mvns	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4013      	ands	r3, r2
 800474c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	409a      	lsls	r2, r3
 8004758:	0013      	movs	r3, r2
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	2380      	movs	r3, #128	@ 0x80
 800476c:	055b      	lsls	r3, r3, #21
 800476e:	4013      	ands	r3, r2
 8004770:	d100      	bne.n	8004774 <HAL_GPIO_Init+0x180>
 8004772:	e092      	b.n	800489a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004774:	4a50      	ldr	r2, [pc, #320]	@ (80048b8 <HAL_GPIO_Init+0x2c4>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	089b      	lsrs	r3, r3, #2
 800477a:	3318      	adds	r3, #24
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	589b      	ldr	r3, [r3, r2]
 8004780:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2203      	movs	r2, #3
 8004786:	4013      	ands	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	220f      	movs	r2, #15
 800478c:	409a      	lsls	r2, r3
 800478e:	0013      	movs	r3, r2
 8004790:	43da      	mvns	r2, r3
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	4013      	ands	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	23a0      	movs	r3, #160	@ 0xa0
 800479c:	05db      	lsls	r3, r3, #23
 800479e:	429a      	cmp	r2, r3
 80047a0:	d013      	beq.n	80047ca <HAL_GPIO_Init+0x1d6>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a45      	ldr	r2, [pc, #276]	@ (80048bc <HAL_GPIO_Init+0x2c8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00d      	beq.n	80047c6 <HAL_GPIO_Init+0x1d2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a44      	ldr	r2, [pc, #272]	@ (80048c0 <HAL_GPIO_Init+0x2cc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d007      	beq.n	80047c2 <HAL_GPIO_Init+0x1ce>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a43      	ldr	r2, [pc, #268]	@ (80048c4 <HAL_GPIO_Init+0x2d0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <HAL_GPIO_Init+0x1ca>
 80047ba:	2305      	movs	r3, #5
 80047bc:	e006      	b.n	80047cc <HAL_GPIO_Init+0x1d8>
 80047be:	2306      	movs	r3, #6
 80047c0:	e004      	b.n	80047cc <HAL_GPIO_Init+0x1d8>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e002      	b.n	80047cc <HAL_GPIO_Init+0x1d8>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <HAL_GPIO_Init+0x1d8>
 80047ca:	2300      	movs	r3, #0
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	2103      	movs	r1, #3
 80047d0:	400a      	ands	r2, r1
 80047d2:	00d2      	lsls	r2, r2, #3
 80047d4:	4093      	lsls	r3, r2
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80047dc:	4936      	ldr	r1, [pc, #216]	@ (80048b8 <HAL_GPIO_Init+0x2c4>)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	3318      	adds	r3, #24
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80047ea:	4a33      	ldr	r2, [pc, #204]	@ (80048b8 <HAL_GPIO_Init+0x2c4>)
 80047ec:	2380      	movs	r3, #128	@ 0x80
 80047ee:	58d3      	ldr	r3, [r2, r3]
 80047f0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	43da      	mvns	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	4013      	ands	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	2380      	movs	r3, #128	@ 0x80
 8004802:	025b      	lsls	r3, r3, #9
 8004804:	4013      	ands	r3, r2
 8004806:	d003      	beq.n	8004810 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004810:	4929      	ldr	r1, [pc, #164]	@ (80048b8 <HAL_GPIO_Init+0x2c4>)
 8004812:	2280      	movs	r2, #128	@ 0x80
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8004818:	4a27      	ldr	r2, [pc, #156]	@ (80048b8 <HAL_GPIO_Init+0x2c4>)
 800481a:	2384      	movs	r3, #132	@ 0x84
 800481c:	58d3      	ldr	r3, [r2, r3]
 800481e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	43da      	mvns	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	4013      	ands	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	2380      	movs	r3, #128	@ 0x80
 8004830:	029b      	lsls	r3, r3, #10
 8004832:	4013      	ands	r3, r2
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800483e:	491e      	ldr	r1, [pc, #120]	@ (80048b8 <HAL_GPIO_Init+0x2c4>)
 8004840:	2284      	movs	r2, #132	@ 0x84
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004846:	4b1c      	ldr	r3, [pc, #112]	@ (80048b8 <HAL_GPIO_Init+0x2c4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	43da      	mvns	r2, r3
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	4013      	ands	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	2380      	movs	r3, #128	@ 0x80
 800485c:	035b      	lsls	r3, r3, #13
 800485e:	4013      	ands	r3, r2
 8004860:	d003      	beq.n	800486a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800486a:	4b13      	ldr	r3, [pc, #76]	@ (80048b8 <HAL_GPIO_Init+0x2c4>)
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8004870:	4b11      	ldr	r3, [pc, #68]	@ (80048b8 <HAL_GPIO_Init+0x2c4>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	43da      	mvns	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	4013      	ands	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	2380      	movs	r3, #128	@ 0x80
 8004886:	039b      	lsls	r3, r3, #14
 8004888:	4013      	ands	r3, r2
 800488a:	d003      	beq.n	8004894 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004894:	4b08      	ldr	r3, [pc, #32]	@ (80048b8 <HAL_GPIO_Init+0x2c4>)
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3301      	adds	r3, #1
 800489e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	40da      	lsrs	r2, r3
 80048a8:	1e13      	subs	r3, r2, #0
 80048aa:	d000      	beq.n	80048ae <HAL_GPIO_Init+0x2ba>
 80048ac:	e6aa      	b.n	8004604 <HAL_GPIO_Init+0x10>
  }
}
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	46c0      	nop			@ (mov r8, r8)
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b006      	add	sp, #24
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021800 	.word	0x40021800
 80048bc:	50000400 	.word	0x50000400
 80048c0:	50000800 	.word	0x50000800
 80048c4:	50001400 	.word	0x50001400

080048c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	0008      	movs	r0, r1
 80048d2:	0011      	movs	r1, r2
 80048d4:	1cbb      	adds	r3, r7, #2
 80048d6:	1c02      	adds	r2, r0, #0
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	1c7b      	adds	r3, r7, #1
 80048dc:	1c0a      	adds	r2, r1, #0
 80048de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048e0:	1c7b      	adds	r3, r7, #1
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d004      	beq.n	80048f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048e8:	1cbb      	adds	r3, r7, #2
 80048ea:	881a      	ldrh	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048f0:	e003      	b.n	80048fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048f2:	1cbb      	adds	r3, r7, #2
 80048f4:	881a      	ldrh	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b002      	add	sp, #8
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e08f      	b.n	8004a36 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2241      	movs	r2, #65	@ 0x41
 800491a:	5c9b      	ldrb	r3, [r3, r2]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d107      	bne.n	8004932 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2240      	movs	r2, #64	@ 0x40
 8004926:	2100      	movs	r1, #0
 8004928:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0018      	movs	r0, r3
 800492e:	f7ff f925 	bl	8003b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2241      	movs	r2, #65	@ 0x41
 8004936:	2124      	movs	r1, #36	@ 0x24
 8004938:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2101      	movs	r1, #1
 8004946:	438a      	bics	r2, r1
 8004948:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	493b      	ldr	r1, [pc, #236]	@ (8004a40 <HAL_I2C_Init+0x13c>)
 8004954:	400a      	ands	r2, r1
 8004956:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4938      	ldr	r1, [pc, #224]	@ (8004a44 <HAL_I2C_Init+0x140>)
 8004964:	400a      	ands	r2, r1
 8004966:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d108      	bne.n	8004982 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2180      	movs	r1, #128	@ 0x80
 800497a:	0209      	lsls	r1, r1, #8
 800497c:	430a      	orrs	r2, r1
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	e007      	b.n	8004992 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2184      	movs	r1, #132	@ 0x84
 800498c:	0209      	lsls	r1, r1, #8
 800498e:	430a      	orrs	r2, r1
 8004990:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d109      	bne.n	80049ae <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2180      	movs	r1, #128	@ 0x80
 80049a6:	0109      	lsls	r1, r1, #4
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	e007      	b.n	80049be <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4923      	ldr	r1, [pc, #140]	@ (8004a48 <HAL_I2C_Init+0x144>)
 80049ba:	400a      	ands	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4920      	ldr	r1, [pc, #128]	@ (8004a4c <HAL_I2C_Init+0x148>)
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	491a      	ldr	r1, [pc, #104]	@ (8004a44 <HAL_I2C_Init+0x140>)
 80049da:	400a      	ands	r2, r1
 80049dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69d9      	ldr	r1, [r3, #28]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1a      	ldr	r2, [r3, #32]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2101      	movs	r1, #1
 8004a14:	430a      	orrs	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2241      	movs	r2, #65	@ 0x41
 8004a22:	2120      	movs	r1, #32
 8004a24:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2242      	movs	r2, #66	@ 0x42
 8004a30:	2100      	movs	r1, #0
 8004a32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b002      	add	sp, #8
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	46c0      	nop			@ (mov r8, r8)
 8004a40:	f0ffffff 	.word	0xf0ffffff
 8004a44:	ffff7fff 	.word	0xffff7fff
 8004a48:	fffff7ff 	.word	0xfffff7ff
 8004a4c:	02008000 	.word	0x02008000

08004a50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b089      	sub	sp, #36	@ 0x24
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	000c      	movs	r4, r1
 8004a5a:	0010      	movs	r0, r2
 8004a5c:	0019      	movs	r1, r3
 8004a5e:	230a      	movs	r3, #10
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	1c22      	adds	r2, r4, #0
 8004a64:	801a      	strh	r2, [r3, #0]
 8004a66:	2308      	movs	r3, #8
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	1c02      	adds	r2, r0, #0
 8004a6c:	801a      	strh	r2, [r3, #0]
 8004a6e:	1dbb      	adds	r3, r7, #6
 8004a70:	1c0a      	adds	r2, r1, #0
 8004a72:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2241      	movs	r2, #65	@ 0x41
 8004a78:	5c9b      	ldrb	r3, [r3, r2]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d000      	beq.n	8004a82 <HAL_I2C_Mem_Write+0x32>
 8004a80:	e10c      	b.n	8004c9c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d004      	beq.n	8004a92 <HAL_I2C_Mem_Write+0x42>
 8004a88:	232c      	movs	r3, #44	@ 0x2c
 8004a8a:	18fb      	adds	r3, r7, r3
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d105      	bne.n	8004a9e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2280      	movs	r2, #128	@ 0x80
 8004a96:	0092      	lsls	r2, r2, #2
 8004a98:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e0ff      	b.n	8004c9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2240      	movs	r2, #64	@ 0x40
 8004aa2:	5c9b      	ldrb	r3, [r3, r2]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_I2C_Mem_Write+0x5c>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e0f8      	b.n	8004c9e <HAL_I2C_Mem_Write+0x24e>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2240      	movs	r2, #64	@ 0x40
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ab4:	f7ff fcac 	bl	8004410 <HAL_GetTick>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004abc:	2380      	movs	r3, #128	@ 0x80
 8004abe:	0219      	lsls	r1, r3, #8
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	2319      	movs	r3, #25
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f000 fb0b 	bl	80050e4 <I2C_WaitOnFlagUntilTimeout>
 8004ace:	1e03      	subs	r3, r0, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e0e3      	b.n	8004c9e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2241      	movs	r2, #65	@ 0x41
 8004ada:	2121      	movs	r1, #33	@ 0x21
 8004adc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2242      	movs	r2, #66	@ 0x42
 8004ae2:	2140      	movs	r1, #64	@ 0x40
 8004ae4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004af0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	222c      	movs	r2, #44	@ 0x2c
 8004af6:	18ba      	adds	r2, r7, r2
 8004af8:	8812      	ldrh	r2, [r2, #0]
 8004afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b02:	1dbb      	adds	r3, r7, #6
 8004b04:	881c      	ldrh	r4, [r3, #0]
 8004b06:	2308      	movs	r3, #8
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	881a      	ldrh	r2, [r3, #0]
 8004b0c:	230a      	movs	r3, #10
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	8819      	ldrh	r1, [r3, #0]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	0023      	movs	r3, r4
 8004b1e:	f000 f9f9 	bl	8004f14 <I2C_RequestMemoryWrite>
 8004b22:	1e03      	subs	r3, r0, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2240      	movs	r2, #64	@ 0x40
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e0b5      	b.n	8004c9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2bff      	cmp	r3, #255	@ 0xff
 8004b3a:	d911      	bls.n	8004b60 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	22ff      	movs	r2, #255	@ 0xff
 8004b40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	2380      	movs	r3, #128	@ 0x80
 8004b4a:	045c      	lsls	r4, r3, #17
 8004b4c:	230a      	movs	r3, #10
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	8819      	ldrh	r1, [r3, #0]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	2300      	movs	r3, #0
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	0023      	movs	r3, r4
 8004b5a:	f000 fc9d 	bl	8005498 <I2C_TransferConfig>
 8004b5e:	e012      	b.n	8004b86 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	2380      	movs	r3, #128	@ 0x80
 8004b72:	049c      	lsls	r4, r3, #18
 8004b74:	230a      	movs	r3, #10
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	8819      	ldrh	r1, [r3, #0]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	0023      	movs	r3, r4
 8004b82:	f000 fc89 	bl	8005498 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f000 fb01 	bl	8005194 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b92:	1e03      	subs	r3, r0, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e081      	b.n	8004c9e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	781a      	ldrb	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d03a      	beq.n	8004c4a <HAL_I2C_Mem_Write+0x1fa>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d136      	bne.n	8004c4a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	0013      	movs	r3, r2
 8004be6:	2200      	movs	r2, #0
 8004be8:	2180      	movs	r1, #128	@ 0x80
 8004bea:	f000 fa7b 	bl	80050e4 <I2C_WaitOnFlagUntilTimeout>
 8004bee:	1e03      	subs	r3, r0, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e053      	b.n	8004c9e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2bff      	cmp	r3, #255	@ 0xff
 8004bfe:	d911      	bls.n	8004c24 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	22ff      	movs	r2, #255	@ 0xff
 8004c04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	2380      	movs	r3, #128	@ 0x80
 8004c0e:	045c      	lsls	r4, r3, #17
 8004c10:	230a      	movs	r3, #10
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	8819      	ldrh	r1, [r3, #0]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	0023      	movs	r3, r4
 8004c1e:	f000 fc3b 	bl	8005498 <I2C_TransferConfig>
 8004c22:	e012      	b.n	8004c4a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	2380      	movs	r3, #128	@ 0x80
 8004c36:	049c      	lsls	r4, r3, #18
 8004c38:	230a      	movs	r3, #10
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	8819      	ldrh	r1, [r3, #0]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	2300      	movs	r3, #0
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	0023      	movs	r3, r4
 8004c46:	f000 fc27 	bl	8005498 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d198      	bne.n	8004b86 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f000 fae0 	bl	8005220 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c60:	1e03      	subs	r3, r0, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e01a      	b.n	8004c9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	490b      	ldr	r1, [pc, #44]	@ (8004ca8 <HAL_I2C_Mem_Write+0x258>)
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2241      	movs	r2, #65	@ 0x41
 8004c84:	2120      	movs	r1, #32
 8004c86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2242      	movs	r2, #66	@ 0x42
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2240      	movs	r2, #64	@ 0x40
 8004c94:	2100      	movs	r1, #0
 8004c96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b007      	add	sp, #28
 8004ca4:	bd90      	pop	{r4, r7, pc}
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	fe00e800 	.word	0xfe00e800

08004cac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b089      	sub	sp, #36	@ 0x24
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	000c      	movs	r4, r1
 8004cb6:	0010      	movs	r0, r2
 8004cb8:	0019      	movs	r1, r3
 8004cba:	230a      	movs	r3, #10
 8004cbc:	18fb      	adds	r3, r7, r3
 8004cbe:	1c22      	adds	r2, r4, #0
 8004cc0:	801a      	strh	r2, [r3, #0]
 8004cc2:	2308      	movs	r3, #8
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	1c02      	adds	r2, r0, #0
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	1dbb      	adds	r3, r7, #6
 8004ccc:	1c0a      	adds	r2, r1, #0
 8004cce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2241      	movs	r2, #65	@ 0x41
 8004cd4:	5c9b      	ldrb	r3, [r3, r2]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d000      	beq.n	8004cde <HAL_I2C_Mem_Read+0x32>
 8004cdc:	e110      	b.n	8004f00 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d004      	beq.n	8004cee <HAL_I2C_Mem_Read+0x42>
 8004ce4:	232c      	movs	r3, #44	@ 0x2c
 8004ce6:	18fb      	adds	r3, r7, r3
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2280      	movs	r2, #128	@ 0x80
 8004cf2:	0092      	lsls	r2, r2, #2
 8004cf4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e103      	b.n	8004f02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2240      	movs	r2, #64	@ 0x40
 8004cfe:	5c9b      	ldrb	r3, [r3, r2]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_I2C_Mem_Read+0x5c>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e0fc      	b.n	8004f02 <HAL_I2C_Mem_Read+0x256>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2240      	movs	r2, #64	@ 0x40
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d10:	f7ff fb7e 	bl	8004410 <HAL_GetTick>
 8004d14:	0003      	movs	r3, r0
 8004d16:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d18:	2380      	movs	r3, #128	@ 0x80
 8004d1a:	0219      	lsls	r1, r3, #8
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	2319      	movs	r3, #25
 8004d24:	2201      	movs	r2, #1
 8004d26:	f000 f9dd 	bl	80050e4 <I2C_WaitOnFlagUntilTimeout>
 8004d2a:	1e03      	subs	r3, r0, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0e7      	b.n	8004f02 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2241      	movs	r2, #65	@ 0x41
 8004d36:	2122      	movs	r1, #34	@ 0x22
 8004d38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2242      	movs	r2, #66	@ 0x42
 8004d3e:	2140      	movs	r1, #64	@ 0x40
 8004d40:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	222c      	movs	r2, #44	@ 0x2c
 8004d52:	18ba      	adds	r2, r7, r2
 8004d54:	8812      	ldrh	r2, [r2, #0]
 8004d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d5e:	1dbb      	adds	r3, r7, #6
 8004d60:	881c      	ldrh	r4, [r3, #0]
 8004d62:	2308      	movs	r3, #8
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	881a      	ldrh	r2, [r3, #0]
 8004d68:	230a      	movs	r3, #10
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	8819      	ldrh	r1, [r3, #0]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	0023      	movs	r3, r4
 8004d7a:	f000 f92f 	bl	8004fdc <I2C_RequestMemoryRead>
 8004d7e:	1e03      	subs	r3, r0, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2240      	movs	r2, #64	@ 0x40
 8004d86:	2100      	movs	r1, #0
 8004d88:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e0b9      	b.n	8004f02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2bff      	cmp	r3, #255	@ 0xff
 8004d96:	d911      	bls.n	8004dbc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	22ff      	movs	r2, #255	@ 0xff
 8004d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	2380      	movs	r3, #128	@ 0x80
 8004da6:	045c      	lsls	r4, r3, #17
 8004da8:	230a      	movs	r3, #10
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	8819      	ldrh	r1, [r3, #0]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	4b56      	ldr	r3, [pc, #344]	@ (8004f0c <HAL_I2C_Mem_Read+0x260>)
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	0023      	movs	r3, r4
 8004db6:	f000 fb6f 	bl	8005498 <I2C_TransferConfig>
 8004dba:	e012      	b.n	8004de2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	2380      	movs	r3, #128	@ 0x80
 8004dce:	049c      	lsls	r4, r3, #18
 8004dd0:	230a      	movs	r3, #10
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	8819      	ldrh	r1, [r3, #0]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8004f0c <HAL_I2C_Mem_Read+0x260>)
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	0023      	movs	r3, r4
 8004dde:	f000 fb5b 	bl	8005498 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	0013      	movs	r3, r2
 8004dec:	2200      	movs	r2, #0
 8004dee:	2104      	movs	r1, #4
 8004df0:	f000 f978 	bl	80050e4 <I2C_WaitOnFlagUntilTimeout>
 8004df4:	1e03      	subs	r3, r0, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e082      	b.n	8004f02 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d03a      	beq.n	8004eae <HAL_I2C_Mem_Read+0x202>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d136      	bne.n	8004eae <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	0013      	movs	r3, r2
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2180      	movs	r1, #128	@ 0x80
 8004e4e:	f000 f949 	bl	80050e4 <I2C_WaitOnFlagUntilTimeout>
 8004e52:	1e03      	subs	r3, r0, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e053      	b.n	8004f02 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2bff      	cmp	r3, #255	@ 0xff
 8004e62:	d911      	bls.n	8004e88 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	22ff      	movs	r2, #255	@ 0xff
 8004e68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	2380      	movs	r3, #128	@ 0x80
 8004e72:	045c      	lsls	r4, r3, #17
 8004e74:	230a      	movs	r3, #10
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	8819      	ldrh	r1, [r3, #0]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	0023      	movs	r3, r4
 8004e82:	f000 fb09 	bl	8005498 <I2C_TransferConfig>
 8004e86:	e012      	b.n	8004eae <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	2380      	movs	r3, #128	@ 0x80
 8004e9a:	049c      	lsls	r4, r3, #18
 8004e9c:	230a      	movs	r3, #10
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	8819      	ldrh	r1, [r3, #0]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	0023      	movs	r3, r4
 8004eaa:	f000 faf5 	bl	8005498 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d194      	bne.n	8004de2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f000 f9ae 	bl	8005220 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ec4:	1e03      	subs	r3, r0, #0
 8004ec6:	d001      	beq.n	8004ecc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e01a      	b.n	8004f02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	490c      	ldr	r1, [pc, #48]	@ (8004f10 <HAL_I2C_Mem_Read+0x264>)
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2241      	movs	r2, #65	@ 0x41
 8004ee8:	2120      	movs	r1, #32
 8004eea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2242      	movs	r2, #66	@ 0x42
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2240      	movs	r2, #64	@ 0x40
 8004ef8:	2100      	movs	r1, #0
 8004efa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e000      	b.n	8004f02 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004f00:	2302      	movs	r3, #2
  }
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b007      	add	sp, #28
 8004f08:	bd90      	pop	{r4, r7, pc}
 8004f0a:	46c0      	nop			@ (mov r8, r8)
 8004f0c:	80002400 	.word	0x80002400
 8004f10:	fe00e800 	.word	0xfe00e800

08004f14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f14:	b5b0      	push	{r4, r5, r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	000c      	movs	r4, r1
 8004f1e:	0010      	movs	r0, r2
 8004f20:	0019      	movs	r1, r3
 8004f22:	250a      	movs	r5, #10
 8004f24:	197b      	adds	r3, r7, r5
 8004f26:	1c22      	adds	r2, r4, #0
 8004f28:	801a      	strh	r2, [r3, #0]
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	1c02      	adds	r2, r0, #0
 8004f30:	801a      	strh	r2, [r3, #0]
 8004f32:	1dbb      	adds	r3, r7, #6
 8004f34:	1c0a      	adds	r2, r1, #0
 8004f36:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f38:	1dbb      	adds	r3, r7, #6
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	2380      	movs	r3, #128	@ 0x80
 8004f40:	045c      	lsls	r4, r3, #17
 8004f42:	197b      	adds	r3, r7, r5
 8004f44:	8819      	ldrh	r1, [r3, #0]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	4b23      	ldr	r3, [pc, #140]	@ (8004fd8 <I2C_RequestMemoryWrite+0xc4>)
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	0023      	movs	r3, r4
 8004f4e:	f000 faa3 	bl	8005498 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f54:	6a39      	ldr	r1, [r7, #32]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f000 f91b 	bl	8005194 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f5e:	1e03      	subs	r3, r0, #0
 8004f60:	d001      	beq.n	8004f66 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e033      	b.n	8004fce <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f66:	1dbb      	adds	r3, r7, #6
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d107      	bne.n	8004f7e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f6e:	2308      	movs	r3, #8
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f7c:	e019      	b.n	8004fb2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f7e:	2308      	movs	r3, #8
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	0a1b      	lsrs	r3, r3, #8
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f92:	6a39      	ldr	r1, [r7, #32]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f000 f8fc 	bl	8005194 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f9c:	1e03      	subs	r3, r0, #0
 8004f9e:	d001      	beq.n	8004fa4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e014      	b.n	8004fce <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb2:	6a3a      	ldr	r2, [r7, #32]
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	0013      	movs	r3, r2
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2180      	movs	r1, #128	@ 0x80
 8004fc0:	f000 f890 	bl	80050e4 <I2C_WaitOnFlagUntilTimeout>
 8004fc4:	1e03      	subs	r3, r0, #0
 8004fc6:	d001      	beq.n	8004fcc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	0018      	movs	r0, r3
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	b004      	add	sp, #16
 8004fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8004fd6:	46c0      	nop			@ (mov r8, r8)
 8004fd8:	80002000 	.word	0x80002000

08004fdc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004fdc:	b5b0      	push	{r4, r5, r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af02      	add	r7, sp, #8
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	000c      	movs	r4, r1
 8004fe6:	0010      	movs	r0, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	250a      	movs	r5, #10
 8004fec:	197b      	adds	r3, r7, r5
 8004fee:	1c22      	adds	r2, r4, #0
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	1c02      	adds	r2, r0, #0
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	1dbb      	adds	r3, r7, #6
 8004ffc:	1c0a      	adds	r2, r1, #0
 8004ffe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005000:	1dbb      	adds	r3, r7, #6
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	197b      	adds	r3, r7, r5
 8005008:	8819      	ldrh	r1, [r3, #0]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	4b23      	ldr	r3, [pc, #140]	@ (800509c <I2C_RequestMemoryRead+0xc0>)
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	2300      	movs	r3, #0
 8005012:	f000 fa41 	bl	8005498 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005018:	6a39      	ldr	r1, [r7, #32]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	0018      	movs	r0, r3
 800501e:	f000 f8b9 	bl	8005194 <I2C_WaitOnTXISFlagUntilTimeout>
 8005022:	1e03      	subs	r3, r0, #0
 8005024:	d001      	beq.n	800502a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e033      	b.n	8005092 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800502a:	1dbb      	adds	r3, r7, #6
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d107      	bne.n	8005042 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005032:	2308      	movs	r3, #8
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b2da      	uxtb	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005040:	e019      	b.n	8005076 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005042:	2308      	movs	r3, #8
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	0a1b      	lsrs	r3, r3, #8
 800504a:	b29b      	uxth	r3, r3
 800504c:	b2da      	uxtb	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005056:	6a39      	ldr	r1, [r7, #32]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	0018      	movs	r0, r3
 800505c:	f000 f89a 	bl	8005194 <I2C_WaitOnTXISFlagUntilTimeout>
 8005060:	1e03      	subs	r3, r0, #0
 8005062:	d001      	beq.n	8005068 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e014      	b.n	8005092 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005068:	2308      	movs	r3, #8
 800506a:	18fb      	adds	r3, r7, r3
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005076:	6a3a      	ldr	r2, [r7, #32]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	0013      	movs	r3, r2
 8005080:	2200      	movs	r2, #0
 8005082:	2140      	movs	r1, #64	@ 0x40
 8005084:	f000 f82e 	bl	80050e4 <I2C_WaitOnFlagUntilTimeout>
 8005088:	1e03      	subs	r3, r0, #0
 800508a:	d001      	beq.n	8005090 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	0018      	movs	r0, r3
 8005094:	46bd      	mov	sp, r7
 8005096:	b004      	add	sp, #16
 8005098:	bdb0      	pop	{r4, r5, r7, pc}
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	80002000 	.word	0x80002000

080050a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2202      	movs	r2, #2
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d103      	bne.n	80050be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2200      	movs	r2, #0
 80050bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2201      	movs	r2, #1
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d007      	beq.n	80050dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2101      	movs	r1, #1
 80050d8:	430a      	orrs	r2, r1
 80050da:	619a      	str	r2, [r3, #24]
  }
}
 80050dc:	46c0      	nop			@ (mov r8, r8)
 80050de:	46bd      	mov	sp, r7
 80050e0:	b002      	add	sp, #8
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	1dfb      	adds	r3, r7, #7
 80050f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050f4:	e03a      	b.n	800516c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	0018      	movs	r0, r3
 80050fe:	f000 f8d3 	bl	80052a8 <I2C_IsErrorOccurred>
 8005102:	1e03      	subs	r3, r0, #0
 8005104:	d001      	beq.n	800510a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e040      	b.n	800518c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	3301      	adds	r3, #1
 800510e:	d02d      	beq.n	800516c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005110:	f7ff f97e 	bl	8004410 <HAL_GetTick>
 8005114:	0002      	movs	r2, r0
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d302      	bcc.n	8005126 <I2C_WaitOnFlagUntilTimeout+0x42>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d122      	bne.n	800516c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	4013      	ands	r3, r2
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	425a      	negs	r2, r3
 8005136:	4153      	adcs	r3, r2
 8005138:	b2db      	uxtb	r3, r3
 800513a:	001a      	movs	r2, r3
 800513c:	1dfb      	adds	r3, r7, #7
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d113      	bne.n	800516c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005148:	2220      	movs	r2, #32
 800514a:	431a      	orrs	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2241      	movs	r2, #65	@ 0x41
 8005154:	2120      	movs	r1, #32
 8005156:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2242      	movs	r2, #66	@ 0x42
 800515c:	2100      	movs	r1, #0
 800515e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2240      	movs	r2, #64	@ 0x40
 8005164:	2100      	movs	r1, #0
 8005166:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e00f      	b.n	800518c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	4013      	ands	r3, r2
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	425a      	negs	r2, r3
 800517c:	4153      	adcs	r3, r2
 800517e:	b2db      	uxtb	r3, r3
 8005180:	001a      	movs	r2, r3
 8005182:	1dfb      	adds	r3, r7, #7
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d0b5      	beq.n	80050f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	0018      	movs	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	b004      	add	sp, #16
 8005192:	bd80      	pop	{r7, pc}

08005194 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051a0:	e032      	b.n	8005208 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 f87d 	bl	80052a8 <I2C_IsErrorOccurred>
 80051ae:	1e03      	subs	r3, r0, #0
 80051b0:	d001      	beq.n	80051b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e030      	b.n	8005218 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	3301      	adds	r3, #1
 80051ba:	d025      	beq.n	8005208 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051bc:	f7ff f928 	bl	8004410 <HAL_GetTick>
 80051c0:	0002      	movs	r2, r0
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d302      	bcc.n	80051d2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d11a      	bne.n	8005208 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	2202      	movs	r2, #2
 80051da:	4013      	ands	r3, r2
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d013      	beq.n	8005208 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e4:	2220      	movs	r2, #32
 80051e6:	431a      	orrs	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2241      	movs	r2, #65	@ 0x41
 80051f0:	2120      	movs	r1, #32
 80051f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2242      	movs	r2, #66	@ 0x42
 80051f8:	2100      	movs	r1, #0
 80051fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2240      	movs	r2, #64	@ 0x40
 8005200:	2100      	movs	r1, #0
 8005202:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e007      	b.n	8005218 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2202      	movs	r2, #2
 8005210:	4013      	ands	r3, r2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d1c5      	bne.n	80051a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	0018      	movs	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	b004      	add	sp, #16
 800521e:	bd80      	pop	{r7, pc}

08005220 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800522c:	e02f      	b.n	800528e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	0018      	movs	r0, r3
 8005236:	f000 f837 	bl	80052a8 <I2C_IsErrorOccurred>
 800523a:	1e03      	subs	r3, r0, #0
 800523c:	d001      	beq.n	8005242 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e02d      	b.n	800529e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7ff f8e5 	bl	8004410 <HAL_GetTick>
 8005246:	0002      	movs	r2, r0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d11a      	bne.n	800528e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	2220      	movs	r2, #32
 8005260:	4013      	ands	r3, r2
 8005262:	2b20      	cmp	r3, #32
 8005264:	d013      	beq.n	800528e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	2220      	movs	r2, #32
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2241      	movs	r2, #65	@ 0x41
 8005276:	2120      	movs	r1, #32
 8005278:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2242      	movs	r2, #66	@ 0x42
 800527e:	2100      	movs	r1, #0
 8005280:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2240      	movs	r2, #64	@ 0x40
 8005286:	2100      	movs	r1, #0
 8005288:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e007      	b.n	800529e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	2220      	movs	r2, #32
 8005296:	4013      	ands	r3, r2
 8005298:	2b20      	cmp	r3, #32
 800529a:	d1c8      	bne.n	800522e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	0018      	movs	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b004      	add	sp, #16
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	@ 0x28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b4:	2327      	movs	r3, #39	@ 0x27
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2210      	movs	r2, #16
 80052d0:	4013      	ands	r3, r2
 80052d2:	d100      	bne.n	80052d6 <I2C_IsErrorOccurred+0x2e>
 80052d4:	e079      	b.n	80053ca <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2210      	movs	r2, #16
 80052dc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052de:	e057      	b.n	8005390 <I2C_IsErrorOccurred+0xe8>
 80052e0:	2227      	movs	r2, #39	@ 0x27
 80052e2:	18bb      	adds	r3, r7, r2
 80052e4:	18ba      	adds	r2, r7, r2
 80052e6:	7812      	ldrb	r2, [r2, #0]
 80052e8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	3301      	adds	r3, #1
 80052ee:	d04f      	beq.n	8005390 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052f0:	f7ff f88e 	bl	8004410 <HAL_GetTick>
 80052f4:	0002      	movs	r2, r0
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d302      	bcc.n	8005306 <I2C_IsErrorOccurred+0x5e>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d144      	bne.n	8005390 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	2380      	movs	r3, #128	@ 0x80
 800530e:	01db      	lsls	r3, r3, #7
 8005310:	4013      	ands	r3, r2
 8005312:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005314:	2013      	movs	r0, #19
 8005316:	183b      	adds	r3, r7, r0
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	2142      	movs	r1, #66	@ 0x42
 800531c:	5c52      	ldrb	r2, [r2, r1]
 800531e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	2380      	movs	r3, #128	@ 0x80
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	401a      	ands	r2, r3
 800532c:	2380      	movs	r3, #128	@ 0x80
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	429a      	cmp	r2, r3
 8005332:	d126      	bne.n	8005382 <I2C_IsErrorOccurred+0xda>
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	2380      	movs	r3, #128	@ 0x80
 8005338:	01db      	lsls	r3, r3, #7
 800533a:	429a      	cmp	r2, r3
 800533c:	d021      	beq.n	8005382 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800533e:	183b      	adds	r3, r7, r0
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b20      	cmp	r3, #32
 8005344:	d01d      	beq.n	8005382 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2180      	movs	r1, #128	@ 0x80
 8005352:	01c9      	lsls	r1, r1, #7
 8005354:	430a      	orrs	r2, r1
 8005356:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005358:	f7ff f85a 	bl	8004410 <HAL_GetTick>
 800535c:	0003      	movs	r3, r0
 800535e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005360:	e00f      	b.n	8005382 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005362:	f7ff f855 	bl	8004410 <HAL_GetTick>
 8005366:	0002      	movs	r2, r0
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b19      	cmp	r3, #25
 800536e:	d908      	bls.n	8005382 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2220      	movs	r2, #32
 8005374:	4313      	orrs	r3, r2
 8005376:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005378:	2327      	movs	r3, #39	@ 0x27
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	2201      	movs	r2, #1
 800537e:	701a      	strb	r2, [r3, #0]

              break;
 8005380:	e006      	b.n	8005390 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2220      	movs	r2, #32
 800538a:	4013      	ands	r3, r2
 800538c:	2b20      	cmp	r3, #32
 800538e:	d1e8      	bne.n	8005362 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2220      	movs	r2, #32
 8005398:	4013      	ands	r3, r2
 800539a:	2b20      	cmp	r3, #32
 800539c:	d004      	beq.n	80053a8 <I2C_IsErrorOccurred+0x100>
 800539e:	2327      	movs	r3, #39	@ 0x27
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d09b      	beq.n	80052e0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80053a8:	2327      	movs	r3, #39	@ 0x27
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2220      	movs	r2, #32
 80053b8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	2204      	movs	r2, #4
 80053be:	4313      	orrs	r3, r2
 80053c0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053c2:	2327      	movs	r3, #39	@ 0x27
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	2201      	movs	r2, #1
 80053c8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	2380      	movs	r3, #128	@ 0x80
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	4013      	ands	r3, r2
 80053da:	d00c      	beq.n	80053f6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	2201      	movs	r2, #1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2280      	movs	r2, #128	@ 0x80
 80053ea:	0052      	lsls	r2, r2, #1
 80053ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053ee:	2327      	movs	r3, #39	@ 0x27
 80053f0:	18fb      	adds	r3, r7, r3
 80053f2:	2201      	movs	r2, #1
 80053f4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	2380      	movs	r3, #128	@ 0x80
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4013      	ands	r3, r2
 80053fe:	d00c      	beq.n	800541a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	2208      	movs	r2, #8
 8005404:	4313      	orrs	r3, r2
 8005406:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2280      	movs	r2, #128	@ 0x80
 800540e:	00d2      	lsls	r2, r2, #3
 8005410:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005412:	2327      	movs	r3, #39	@ 0x27
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	2201      	movs	r2, #1
 8005418:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	2380      	movs	r3, #128	@ 0x80
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4013      	ands	r3, r2
 8005422:	d00c      	beq.n	800543e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	2202      	movs	r2, #2
 8005428:	4313      	orrs	r3, r2
 800542a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2280      	movs	r2, #128	@ 0x80
 8005432:	0092      	lsls	r2, r2, #2
 8005434:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005436:	2327      	movs	r3, #39	@ 0x27
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800543e:	2327      	movs	r3, #39	@ 0x27
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01d      	beq.n	8005484 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	0018      	movs	r0, r3
 800544c:	f7ff fe28 	bl	80050a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	490e      	ldr	r1, [pc, #56]	@ (8005494 <I2C_IsErrorOccurred+0x1ec>)
 800545c:	400a      	ands	r2, r1
 800545e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	431a      	orrs	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2241      	movs	r2, #65	@ 0x41
 8005470:	2120      	movs	r1, #32
 8005472:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2242      	movs	r2, #66	@ 0x42
 8005478:	2100      	movs	r1, #0
 800547a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2240      	movs	r2, #64	@ 0x40
 8005480:	2100      	movs	r1, #0
 8005482:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005484:	2327      	movs	r3, #39	@ 0x27
 8005486:	18fb      	adds	r3, r7, r3
 8005488:	781b      	ldrb	r3, [r3, #0]
}
 800548a:	0018      	movs	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	b00a      	add	sp, #40	@ 0x28
 8005490:	bd80      	pop	{r7, pc}
 8005492:	46c0      	nop			@ (mov r8, r8)
 8005494:	fe00e800 	.word	0xfe00e800

08005498 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	0008      	movs	r0, r1
 80054a2:	0011      	movs	r1, r2
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	240a      	movs	r4, #10
 80054a8:	193b      	adds	r3, r7, r4
 80054aa:	1c02      	adds	r2, r0, #0
 80054ac:	801a      	strh	r2, [r3, #0]
 80054ae:	2009      	movs	r0, #9
 80054b0:	183b      	adds	r3, r7, r0
 80054b2:	1c0a      	adds	r2, r1, #0
 80054b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054b6:	193b      	adds	r3, r7, r4
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	059b      	lsls	r3, r3, #22
 80054bc:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054be:	183b      	adds	r3, r7, r0
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	0419      	lsls	r1, r3, #16
 80054c4:	23ff      	movs	r3, #255	@ 0xff
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054ca:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	4313      	orrs	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	085b      	lsrs	r3, r3, #1
 80054d8:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054e2:	0d51      	lsrs	r1, r2, #21
 80054e4:	2280      	movs	r2, #128	@ 0x80
 80054e6:	00d2      	lsls	r2, r2, #3
 80054e8:	400a      	ands	r2, r1
 80054ea:	4907      	ldr	r1, [pc, #28]	@ (8005508 <I2C_TransferConfig+0x70>)
 80054ec:	430a      	orrs	r2, r1
 80054ee:	43d2      	mvns	r2, r2
 80054f0:	401a      	ands	r2, r3
 80054f2:	0011      	movs	r1, r2
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054fe:	46c0      	nop			@ (mov r8, r8)
 8005500:	46bd      	mov	sp, r7
 8005502:	b007      	add	sp, #28
 8005504:	bd90      	pop	{r4, r7, pc}
 8005506:	46c0      	nop			@ (mov r8, r8)
 8005508:	03ff63ff 	.word	0x03ff63ff

0800550c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2241      	movs	r2, #65	@ 0x41
 800551a:	5c9b      	ldrb	r3, [r3, r2]
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b20      	cmp	r3, #32
 8005520:	d138      	bne.n	8005594 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2240      	movs	r2, #64	@ 0x40
 8005526:	5c9b      	ldrb	r3, [r3, r2]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800552c:	2302      	movs	r3, #2
 800552e:	e032      	b.n	8005596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2240      	movs	r2, #64	@ 0x40
 8005534:	2101      	movs	r1, #1
 8005536:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2241      	movs	r2, #65	@ 0x41
 800553c:	2124      	movs	r1, #36	@ 0x24
 800553e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2101      	movs	r1, #1
 800554c:	438a      	bics	r2, r1
 800554e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4911      	ldr	r1, [pc, #68]	@ (80055a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800555c:	400a      	ands	r2, r1
 800555e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6819      	ldr	r1, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2101      	movs	r1, #1
 800557c:	430a      	orrs	r2, r1
 800557e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2241      	movs	r2, #65	@ 0x41
 8005584:	2120      	movs	r1, #32
 8005586:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2240      	movs	r2, #64	@ 0x40
 800558c:	2100      	movs	r1, #0
 800558e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	0018      	movs	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	b002      	add	sp, #8
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	ffffefff 	.word	0xffffefff

080055a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2241      	movs	r2, #65	@ 0x41
 80055b2:	5c9b      	ldrb	r3, [r3, r2]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d139      	bne.n	800562e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2240      	movs	r2, #64	@ 0x40
 80055be:	5c9b      	ldrb	r3, [r3, r2]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e033      	b.n	8005630 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2240      	movs	r2, #64	@ 0x40
 80055cc:	2101      	movs	r1, #1
 80055ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2241      	movs	r2, #65	@ 0x41
 80055d4:	2124      	movs	r1, #36	@ 0x24
 80055d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2101      	movs	r1, #1
 80055e4:	438a      	bics	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a11      	ldr	r2, [pc, #68]	@ (8005638 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2101      	movs	r1, #1
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2241      	movs	r2, #65	@ 0x41
 800561e:	2120      	movs	r1, #32
 8005620:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2240      	movs	r2, #64	@ 0x40
 8005626:	2100      	movs	r1, #0
 8005628:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e000      	b.n	8005630 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
  }
}
 8005630:	0018      	movs	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	b004      	add	sp, #16
 8005636:	bd80      	pop	{r7, pc}
 8005638:	fffff0ff 	.word	0xfffff0ff

0800563c <HAL_PWR_EnableWakeUpPin>:
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @note  (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR4_WP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8005644:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	212f      	movs	r1, #47	@ 0x2f
 800564c:	400a      	ands	r2, r1
 800564e:	43d2      	mvns	r2, r2
 8005650:	401a      	ands	r2, r3
 8005652:	0011      	movs	r1, r2
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	0a1a      	lsrs	r2, r3, #8
 8005658:	4b07      	ldr	r3, [pc, #28]	@ (8005678 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800565a:	430a      	orrs	r2, r1
 800565c:	60da      	str	r2, [r3, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 800565e:	4b06      	ldr	r3, [pc, #24]	@ (8005678 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8005660:	6899      	ldr	r1, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	222f      	movs	r2, #47	@ 0x2f
 8005666:	401a      	ands	r2, r3
 8005668:	4b03      	ldr	r3, [pc, #12]	@ (8005678 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800566a:	430a      	orrs	r2, r1
 800566c:	609a      	str	r2, [r3, #8]
}
 800566e:	46c0      	nop			@ (mov r8, r8)
 8005670:	46bd      	mov	sp, r7
 8005672:	b002      	add	sp, #8
 8005674:	bd80      	pop	{r7, pc}
 8005676:	46c0      	nop			@ (mov r8, r8)
 8005678:	40007000 	.word	0x40007000

0800567c <HAL_PWR_EnterSTANDBYMode>:
  *         disable the same. These states are effective in Standby mode only if
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8005680:	4b09      	ldr	r3, [pc, #36]	@ (80056a8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2207      	movs	r2, #7
 8005686:	4393      	bics	r3, r2
 8005688:	001a      	movs	r2, r3
 800568a:	4b07      	ldr	r3, [pc, #28]	@ (80056a8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800568c:	2103      	movs	r1, #3
 800568e:	430a      	orrs	r2, r1
 8005690:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005692:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <HAL_PWR_EnterSTANDBYMode+0x30>)
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	4b05      	ldr	r3, [pc, #20]	@ (80056ac <HAL_PWR_EnterSTANDBYMode+0x30>)
 8005698:	2104      	movs	r1, #4
 800569a:	430a      	orrs	r2, r1
 800569c:	611a      	str	r2, [r3, #16]

  /* Request Wait For Interrupt */
  __WFI();
 800569e:	bf30      	wfi
}
 80056a0:	46c0      	nop			@ (mov r8, r8)
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	40007000 	.word	0x40007000
 80056ac:	e000ed00 	.word	0xe000ed00

080056b0 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e1d0      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2201      	movs	r2, #1
 80056c8:	4013      	ands	r3, r2
 80056ca:	d100      	bne.n	80056ce <HAL_RCC_OscConfig+0x1e>
 80056cc:	e069      	b.n	80057a2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ce:	4bc8      	ldr	r3, [pc, #800]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2238      	movs	r2, #56	@ 0x38
 80056d4:	4013      	ands	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d105      	bne.n	80056ea <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d15d      	bne.n	80057a2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e1bc      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	2380      	movs	r3, #128	@ 0x80
 80056f0:	025b      	lsls	r3, r3, #9
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d107      	bne.n	8005706 <HAL_RCC_OscConfig+0x56>
 80056f6:	4bbe      	ldr	r3, [pc, #760]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4bbd      	ldr	r3, [pc, #756]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80056fc:	2180      	movs	r1, #128	@ 0x80
 80056fe:	0249      	lsls	r1, r1, #9
 8005700:	430a      	orrs	r2, r1
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	e020      	b.n	8005748 <HAL_RCC_OscConfig+0x98>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	23a0      	movs	r3, #160	@ 0xa0
 800570c:	02db      	lsls	r3, r3, #11
 800570e:	429a      	cmp	r2, r3
 8005710:	d10e      	bne.n	8005730 <HAL_RCC_OscConfig+0x80>
 8005712:	4bb7      	ldr	r3, [pc, #732]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4bb6      	ldr	r3, [pc, #728]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005718:	2180      	movs	r1, #128	@ 0x80
 800571a:	02c9      	lsls	r1, r1, #11
 800571c:	430a      	orrs	r2, r1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	4bb3      	ldr	r3, [pc, #716]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	4bb2      	ldr	r3, [pc, #712]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005726:	2180      	movs	r1, #128	@ 0x80
 8005728:	0249      	lsls	r1, r1, #9
 800572a:	430a      	orrs	r2, r1
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e00b      	b.n	8005748 <HAL_RCC_OscConfig+0x98>
 8005730:	4baf      	ldr	r3, [pc, #700]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4bae      	ldr	r3, [pc, #696]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005736:	49af      	ldr	r1, [pc, #700]	@ (80059f4 <HAL_RCC_OscConfig+0x344>)
 8005738:	400a      	ands	r2, r1
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	4bac      	ldr	r3, [pc, #688]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4bab      	ldr	r3, [pc, #684]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005742:	49ad      	ldr	r1, [pc, #692]	@ (80059f8 <HAL_RCC_OscConfig+0x348>)
 8005744:	400a      	ands	r2, r1
 8005746:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d014      	beq.n	800577a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fe fe5e 	bl	8004410 <HAL_GetTick>
 8005754:	0003      	movs	r3, r0
 8005756:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800575a:	f7fe fe59 	bl	8004410 <HAL_GetTick>
 800575e:	0002      	movs	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b64      	cmp	r3, #100	@ 0x64
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e17b      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800576c:	4ba0      	ldr	r3, [pc, #640]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	2380      	movs	r3, #128	@ 0x80
 8005772:	029b      	lsls	r3, r3, #10
 8005774:	4013      	ands	r3, r2
 8005776:	d0f0      	beq.n	800575a <HAL_RCC_OscConfig+0xaa>
 8005778:	e013      	b.n	80057a2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577a:	f7fe fe49 	bl	8004410 <HAL_GetTick>
 800577e:	0003      	movs	r3, r0
 8005780:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005784:	f7fe fe44 	bl	8004410 <HAL_GetTick>
 8005788:	0002      	movs	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	@ 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e166      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005796:	4b96      	ldr	r3, [pc, #600]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	2380      	movs	r3, #128	@ 0x80
 800579c:	029b      	lsls	r3, r3, #10
 800579e:	4013      	ands	r3, r2
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2202      	movs	r2, #2
 80057a8:	4013      	ands	r3, r2
 80057aa:	d100      	bne.n	80057ae <HAL_RCC_OscConfig+0xfe>
 80057ac:	e086      	b.n	80058bc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ae:	4b90      	ldr	r3, [pc, #576]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2238      	movs	r2, #56	@ 0x38
 80057b4:	4013      	ands	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d12f      	bne.n	800581e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e14c      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ca:	4b89      	ldr	r3, [pc, #548]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	4a8b      	ldr	r2, [pc, #556]	@ (80059fc <HAL_RCC_OscConfig+0x34c>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	0019      	movs	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	021a      	lsls	r2, r3, #8
 80057da:	4b85      	ldr	r3, [pc, #532]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d112      	bne.n	800580c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80057e6:	4b82      	ldr	r3, [pc, #520]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a85      	ldr	r2, [pc, #532]	@ (8005a00 <HAL_RCC_OscConfig+0x350>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	0019      	movs	r1, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	4b7e      	ldr	r3, [pc, #504]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80057f6:	430a      	orrs	r2, r1
 80057f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80057fa:	4b7d      	ldr	r3, [pc, #500]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	0adb      	lsrs	r3, r3, #11
 8005800:	2207      	movs	r2, #7
 8005802:	4013      	ands	r3, r2
 8005804:	4a7f      	ldr	r2, [pc, #508]	@ (8005a04 <HAL_RCC_OscConfig+0x354>)
 8005806:	40da      	lsrs	r2, r3
 8005808:	4b7f      	ldr	r3, [pc, #508]	@ (8005a08 <HAL_RCC_OscConfig+0x358>)
 800580a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800580c:	4b7f      	ldr	r3, [pc, #508]	@ (8005a0c <HAL_RCC_OscConfig+0x35c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	0018      	movs	r0, r3
 8005812:	f7fe fda1 	bl	8004358 <HAL_InitTick>
 8005816:	1e03      	subs	r3, r0, #0
 8005818:	d050      	beq.n	80058bc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e122      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d030      	beq.n	8005888 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005826:	4b72      	ldr	r3, [pc, #456]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a75      	ldr	r2, [pc, #468]	@ (8005a00 <HAL_RCC_OscConfig+0x350>)
 800582c:	4013      	ands	r3, r2
 800582e:	0019      	movs	r1, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	4b6e      	ldr	r3, [pc, #440]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005836:	430a      	orrs	r2, r1
 8005838:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800583a:	4b6d      	ldr	r3, [pc, #436]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b6c      	ldr	r3, [pc, #432]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005840:	2180      	movs	r1, #128	@ 0x80
 8005842:	0049      	lsls	r1, r1, #1
 8005844:	430a      	orrs	r2, r1
 8005846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005848:	f7fe fde2 	bl	8004410 <HAL_GetTick>
 800584c:	0003      	movs	r3, r0
 800584e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005852:	f7fe fddd 	bl	8004410 <HAL_GetTick>
 8005856:	0002      	movs	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e0ff      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005864:	4b62      	ldr	r3, [pc, #392]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	2380      	movs	r3, #128	@ 0x80
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4013      	ands	r3, r2
 800586e:	d0f0      	beq.n	8005852 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005870:	4b5f      	ldr	r3, [pc, #380]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4a61      	ldr	r2, [pc, #388]	@ (80059fc <HAL_RCC_OscConfig+0x34c>)
 8005876:	4013      	ands	r3, r2
 8005878:	0019      	movs	r1, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	021a      	lsls	r2, r3, #8
 8005880:	4b5b      	ldr	r3, [pc, #364]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	e019      	b.n	80058bc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8005888:	4b59      	ldr	r3, [pc, #356]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	4b58      	ldr	r3, [pc, #352]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 800588e:	4960      	ldr	r1, [pc, #384]	@ (8005a10 <HAL_RCC_OscConfig+0x360>)
 8005890:	400a      	ands	r2, r1
 8005892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005894:	f7fe fdbc 	bl	8004410 <HAL_GetTick>
 8005898:	0003      	movs	r3, r0
 800589a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800589e:	f7fe fdb7 	bl	8004410 <HAL_GetTick>
 80058a2:	0002      	movs	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e0d9      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058b0:	4b4f      	ldr	r3, [pc, #316]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	2380      	movs	r3, #128	@ 0x80
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4013      	ands	r3, r2
 80058ba:	d1f0      	bne.n	800589e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2208      	movs	r2, #8
 80058c2:	4013      	ands	r3, r2
 80058c4:	d042      	beq.n	800594c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80058c6:	4b4a      	ldr	r3, [pc, #296]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	2238      	movs	r2, #56	@ 0x38
 80058cc:	4013      	ands	r3, r2
 80058ce:	2b18      	cmp	r3, #24
 80058d0:	d105      	bne.n	80058de <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d138      	bne.n	800594c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e0c2      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d019      	beq.n	800591a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80058e6:	4b42      	ldr	r3, [pc, #264]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80058e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80058ea:	4b41      	ldr	r3, [pc, #260]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80058ec:	2101      	movs	r1, #1
 80058ee:	430a      	orrs	r2, r1
 80058f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f2:	f7fe fd8d 	bl	8004410 <HAL_GetTick>
 80058f6:	0003      	movs	r3, r0
 80058f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80058fc:	f7fe fd88 	bl	8004410 <HAL_GetTick>
 8005900:	0002      	movs	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e0aa      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800590e:	4b38      	ldr	r3, [pc, #224]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005912:	2202      	movs	r2, #2
 8005914:	4013      	ands	r3, r2
 8005916:	d0f1      	beq.n	80058fc <HAL_RCC_OscConfig+0x24c>
 8005918:	e018      	b.n	800594c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800591a:	4b35      	ldr	r3, [pc, #212]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 800591c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800591e:	4b34      	ldr	r3, [pc, #208]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005920:	2101      	movs	r1, #1
 8005922:	438a      	bics	r2, r1
 8005924:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005926:	f7fe fd73 	bl	8004410 <HAL_GetTick>
 800592a:	0003      	movs	r3, r0
 800592c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005930:	f7fe fd6e 	bl	8004410 <HAL_GetTick>
 8005934:	0002      	movs	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e090      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005942:	4b2b      	ldr	r3, [pc, #172]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005946:	2202      	movs	r2, #2
 8005948:	4013      	ands	r3, r2
 800594a:	d1f1      	bne.n	8005930 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2204      	movs	r2, #4
 8005952:	4013      	ands	r3, r2
 8005954:	d100      	bne.n	8005958 <HAL_RCC_OscConfig+0x2a8>
 8005956:	e084      	b.n	8005a62 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005958:	230f      	movs	r3, #15
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005960:	4b23      	ldr	r3, [pc, #140]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2238      	movs	r2, #56	@ 0x38
 8005966:	4013      	ands	r3, r2
 8005968:	2b20      	cmp	r3, #32
 800596a:	d106      	bne.n	800597a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d000      	beq.n	8005976 <HAL_RCC_OscConfig+0x2c6>
 8005974:	e075      	b.n	8005a62 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e074      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d106      	bne.n	8005990 <HAL_RCC_OscConfig+0x2e0>
 8005982:	4b1b      	ldr	r3, [pc, #108]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005984:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005986:	4b1a      	ldr	r3, [pc, #104]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 8005988:	2101      	movs	r1, #1
 800598a:	430a      	orrs	r2, r1
 800598c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800598e:	e01c      	b.n	80059ca <HAL_RCC_OscConfig+0x31a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b05      	cmp	r3, #5
 8005996:	d10c      	bne.n	80059b2 <HAL_RCC_OscConfig+0x302>
 8005998:	4b15      	ldr	r3, [pc, #84]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 800599a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800599c:	4b14      	ldr	r3, [pc, #80]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 800599e:	2104      	movs	r1, #4
 80059a0:	430a      	orrs	r2, r1
 80059a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80059a4:	4b12      	ldr	r3, [pc, #72]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80059a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059a8:	4b11      	ldr	r3, [pc, #68]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80059aa:	2101      	movs	r1, #1
 80059ac:	430a      	orrs	r2, r1
 80059ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80059b0:	e00b      	b.n	80059ca <HAL_RCC_OscConfig+0x31a>
 80059b2:	4b0f      	ldr	r3, [pc, #60]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80059b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059b6:	4b0e      	ldr	r3, [pc, #56]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80059b8:	2101      	movs	r1, #1
 80059ba:	438a      	bics	r2, r1
 80059bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80059be:	4b0c      	ldr	r3, [pc, #48]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80059c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059c2:	4b0b      	ldr	r3, [pc, #44]	@ (80059f0 <HAL_RCC_OscConfig+0x340>)
 80059c4:	2104      	movs	r1, #4
 80059c6:	438a      	bics	r2, r1
 80059c8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d028      	beq.n	8005a24 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d2:	f7fe fd1d 	bl	8004410 <HAL_GetTick>
 80059d6:	0003      	movs	r3, r0
 80059d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80059da:	e01d      	b.n	8005a18 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059dc:	f7fe fd18 	bl	8004410 <HAL_GetTick>
 80059e0:	0002      	movs	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	4a0b      	ldr	r2, [pc, #44]	@ (8005a14 <HAL_RCC_OscConfig+0x364>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d915      	bls.n	8005a18 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e039      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
 80059f0:	40021000 	.word	0x40021000
 80059f4:	fffeffff 	.word	0xfffeffff
 80059f8:	fffbffff 	.word	0xfffbffff
 80059fc:	ffff80ff 	.word	0xffff80ff
 8005a00:	ffffc7ff 	.word	0xffffc7ff
 8005a04:	02dc6c00 	.word	0x02dc6c00
 8005a08:	20000000 	.word	0x20000000
 8005a0c:	20000004 	.word	0x20000004
 8005a10:	fffffeff 	.word	0xfffffeff
 8005a14:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005a18:	4b14      	ldr	r3, [pc, #80]	@ (8005a6c <HAL_RCC_OscConfig+0x3bc>)
 8005a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d0dc      	beq.n	80059dc <HAL_RCC_OscConfig+0x32c>
 8005a22:	e013      	b.n	8005a4c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a24:	f7fe fcf4 	bl	8004410 <HAL_GetTick>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005a2c:	e009      	b.n	8005a42 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2e:	f7fe fcef 	bl	8004410 <HAL_GetTick>
 8005a32:	0002      	movs	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	4a0d      	ldr	r2, [pc, #52]	@ (8005a70 <HAL_RCC_OscConfig+0x3c0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e010      	b.n	8005a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005a42:	4b0a      	ldr	r3, [pc, #40]	@ (8005a6c <HAL_RCC_OscConfig+0x3bc>)
 8005a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a46:	2202      	movs	r2, #2
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d1f0      	bne.n	8005a2e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005a4c:	230f      	movs	r3, #15
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d105      	bne.n	8005a62 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005a56:	4b05      	ldr	r3, [pc, #20]	@ (8005a6c <HAL_RCC_OscConfig+0x3bc>)
 8005a58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a5a:	4b04      	ldr	r3, [pc, #16]	@ (8005a6c <HAL_RCC_OscConfig+0x3bc>)
 8005a5c:	4905      	ldr	r1, [pc, #20]	@ (8005a74 <HAL_RCC_OscConfig+0x3c4>)
 8005a5e:	400a      	ands	r2, r1
 8005a60:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	0018      	movs	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b006      	add	sp, #24
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	00001388 	.word	0x00001388
 8005a74:	efffffff 	.word	0xefffffff

08005a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0df      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a8c:	4b71      	ldr	r3, [pc, #452]	@ (8005c54 <HAL_RCC_ClockConfig+0x1dc>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2207      	movs	r2, #7
 8005a92:	4013      	ands	r3, r2
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d91e      	bls.n	8005ad8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9a:	4b6e      	ldr	r3, [pc, #440]	@ (8005c54 <HAL_RCC_ClockConfig+0x1dc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2207      	movs	r2, #7
 8005aa0:	4393      	bics	r3, r2
 8005aa2:	0019      	movs	r1, r3
 8005aa4:	4b6b      	ldr	r3, [pc, #428]	@ (8005c54 <HAL_RCC_ClockConfig+0x1dc>)
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005aac:	f7fe fcb0 	bl	8004410 <HAL_GetTick>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ab4:	e009      	b.n	8005aca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab6:	f7fe fcab 	bl	8004410 <HAL_GetTick>
 8005aba:	0002      	movs	r2, r0
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	4a65      	ldr	r2, [pc, #404]	@ (8005c58 <HAL_RCC_ClockConfig+0x1e0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e0c0      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005aca:	4b62      	ldr	r3, [pc, #392]	@ (8005c54 <HAL_RCC_ClockConfig+0x1dc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2207      	movs	r2, #7
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d1ee      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2202      	movs	r2, #2
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d017      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d008      	beq.n	8005afe <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005aec:	4b5b      	ldr	r3, [pc, #364]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	4a5b      	ldr	r2, [pc, #364]	@ (8005c60 <HAL_RCC_ClockConfig+0x1e8>)
 8005af2:	401a      	ands	r2, r3
 8005af4:	4b59      	ldr	r3, [pc, #356]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005af6:	21b0      	movs	r1, #176	@ 0xb0
 8005af8:	0109      	lsls	r1, r1, #4
 8005afa:	430a      	orrs	r2, r1
 8005afc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005afe:	4b57      	ldr	r3, [pc, #348]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	4a58      	ldr	r2, [pc, #352]	@ (8005c64 <HAL_RCC_ClockConfig+0x1ec>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	0019      	movs	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	4b53      	ldr	r3, [pc, #332]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2201      	movs	r2, #1
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d04b      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d107      	bne.n	8005b34 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b24:	4b4d      	ldr	r3, [pc, #308]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	2380      	movs	r3, #128	@ 0x80
 8005b2a:	029b      	lsls	r3, r3, #10
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d11f      	bne.n	8005b70 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e08b      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d107      	bne.n	8005b4c <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b3c:	4b47      	ldr	r3, [pc, #284]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	2380      	movs	r3, #128	@ 0x80
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4013      	ands	r3, r2
 8005b46:	d113      	bne.n	8005b70 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e07f      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d106      	bne.n	8005b62 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005b54:	4b41      	ldr	r3, [pc, #260]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b58:	2202      	movs	r2, #2
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d108      	bne.n	8005b70 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e074      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005b62:	4b3e      	ldr	r3, [pc, #248]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b66:	2202      	movs	r2, #2
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d101      	bne.n	8005b70 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e06d      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b70:	4b3a      	ldr	r3, [pc, #232]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2207      	movs	r2, #7
 8005b76:	4393      	bics	r3, r2
 8005b78:	0019      	movs	r1, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	4b37      	ldr	r3, [pc, #220]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005b80:	430a      	orrs	r2, r1
 8005b82:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b84:	f7fe fc44 	bl	8004410 <HAL_GetTick>
 8005b88:	0003      	movs	r3, r0
 8005b8a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8c:	e009      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005b8e:	f7fe fc3f 	bl	8004410 <HAL_GetTick>
 8005b92:	0002      	movs	r2, r0
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	4a2f      	ldr	r2, [pc, #188]	@ (8005c58 <HAL_RCC_ClockConfig+0x1e0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e054      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2238      	movs	r2, #56	@ 0x38
 8005ba8:	401a      	ands	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d1ec      	bne.n	8005b8e <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb4:	4b27      	ldr	r3, [pc, #156]	@ (8005c54 <HAL_RCC_ClockConfig+0x1dc>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2207      	movs	r2, #7
 8005bba:	4013      	ands	r3, r2
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d21e      	bcs.n	8005c00 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc2:	4b24      	ldr	r3, [pc, #144]	@ (8005c54 <HAL_RCC_ClockConfig+0x1dc>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2207      	movs	r2, #7
 8005bc8:	4393      	bics	r3, r2
 8005bca:	0019      	movs	r1, r3
 8005bcc:	4b21      	ldr	r3, [pc, #132]	@ (8005c54 <HAL_RCC_ClockConfig+0x1dc>)
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bd4:	f7fe fc1c 	bl	8004410 <HAL_GetTick>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bdc:	e009      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005bde:	f7fe fc17 	bl	8004410 <HAL_GetTick>
 8005be2:	0002      	movs	r2, r0
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c58 <HAL_RCC_ClockConfig+0x1e0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e02c      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bf2:	4b18      	ldr	r3, [pc, #96]	@ (8005c54 <HAL_RCC_ClockConfig+0x1dc>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2207      	movs	r2, #7
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d1ee      	bne.n	8005bde <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2204      	movs	r2, #4
 8005c06:	4013      	ands	r3, r2
 8005c08:	d009      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005c0a:	4b14      	ldr	r3, [pc, #80]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	4a16      	ldr	r2, [pc, #88]	@ (8005c68 <HAL_RCC_ClockConfig+0x1f0>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	0019      	movs	r1, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	4b10      	ldr	r3, [pc, #64]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005c1e:	f000 f82b 	bl	8005c78 <HAL_RCC_GetSysClockFreq>
 8005c22:	0001      	movs	r1, r0
 8005c24:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <HAL_RCC_ClockConfig+0x1e4>)
 8005c26:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c28:	0a1b      	lsrs	r3, r3, #8
 8005c2a:	220f      	movs	r2, #15
 8005c2c:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005c6c <HAL_RCC_ClockConfig+0x1f4>)
 8005c30:	0092      	lsls	r2, r2, #2
 8005c32:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c34:	221f      	movs	r2, #31
 8005c36:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005c38:	000a      	movs	r2, r1
 8005c3a:	40da      	lsrs	r2, r3
 8005c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c70 <HAL_RCC_ClockConfig+0x1f8>)
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c40:	4b0c      	ldr	r3, [pc, #48]	@ (8005c74 <HAL_RCC_ClockConfig+0x1fc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7fe fb87 	bl	8004358 <HAL_InitTick>
 8005c4a:	0003      	movs	r3, r0
}
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	b004      	add	sp, #16
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40022000 	.word	0x40022000
 8005c58:	00001388 	.word	0x00001388
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	ffff84ff 	.word	0xffff84ff
 8005c64:	fffff0ff 	.word	0xfffff0ff
 8005c68:	ffff8fff 	.word	0xffff8fff
 8005c6c:	08007b30 	.word	0x08007b30
 8005c70:	20000000 	.word	0x20000000
 8005c74:	20000004 	.word	0x20000004

08005c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x78>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2238      	movs	r2, #56	@ 0x38
 8005c84:	4013      	ands	r3, r2
 8005c86:	d10f      	bne.n	8005ca8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005c88:	4b19      	ldr	r3, [pc, #100]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x78>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	0adb      	lsrs	r3, r3, #11
 8005c8e:	2207      	movs	r2, #7
 8005c90:	4013      	ands	r3, r2
 8005c92:	2201      	movs	r2, #1
 8005c94:	409a      	lsls	r2, r3
 8005c96:	0013      	movs	r3, r2
 8005c98:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	4815      	ldr	r0, [pc, #84]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005c9e:	f7fa fa45 	bl	800012c <__udivsi3>
 8005ca2:	0003      	movs	r3, r0
 8005ca4:	607b      	str	r3, [r7, #4]
 8005ca6:	e01e      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ca8:	4b11      	ldr	r3, [pc, #68]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x78>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2238      	movs	r2, #56	@ 0x38
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d102      	bne.n	8005cba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cb4:	4b10      	ldr	r3, [pc, #64]	@ (8005cf8 <HAL_RCC_GetSysClockFreq+0x80>)
 8005cb6:	607b      	str	r3, [r7, #4]
 8005cb8:	e015      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005cba:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x78>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2238      	movs	r2, #56	@ 0x38
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d103      	bne.n	8005cce <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005cc6:	2380      	movs	r3, #128	@ 0x80
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	607b      	str	r3, [r7, #4]
 8005ccc:	e00b      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005cce:	4b08      	ldr	r3, [pc, #32]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x78>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2238      	movs	r2, #56	@ 0x38
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	2b18      	cmp	r3, #24
 8005cd8:	d103      	bne.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005cda:	23fa      	movs	r3, #250	@ 0xfa
 8005cdc:	01db      	lsls	r3, r3, #7
 8005cde:	607b      	str	r3, [r7, #4]
 8005ce0:	e001      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8005ce6:	687b      	ldr	r3, [r7, #4]
}
 8005ce8:	0018      	movs	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b002      	add	sp, #8
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	02dc6c00 	.word	0x02dc6c00
 8005cf8:	007a1200 	.word	0x007a1200

08005cfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005d00:	f7ff ffba 	bl	8005c78 <HAL_RCC_GetSysClockFreq>
 8005d04:	0001      	movs	r1, r0
 8005d06:	4b09      	ldr	r3, [pc, #36]	@ (8005d2c <HAL_RCC_GetHCLKFreq+0x30>)
 8005d08:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005d0a:	0a1b      	lsrs	r3, r3, #8
 8005d0c:	220f      	movs	r2, #15
 8005d0e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005d10:	4b07      	ldr	r3, [pc, #28]	@ (8005d30 <HAL_RCC_GetHCLKFreq+0x34>)
 8005d12:	0092      	lsls	r2, r2, #2
 8005d14:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005d16:	221f      	movs	r2, #31
 8005d18:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005d1a:	000a      	movs	r2, r1
 8005d1c:	40da      	lsrs	r2, r3
 8005d1e:	4b05      	ldr	r3, [pc, #20]	@ (8005d34 <HAL_RCC_GetHCLKFreq+0x38>)
 8005d20:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8005d22:	4b04      	ldr	r3, [pc, #16]	@ (8005d34 <HAL_RCC_GetHCLKFreq+0x38>)
 8005d24:	681b      	ldr	r3, [r3, #0]
}
 8005d26:	0018      	movs	r0, r3
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	08007b30 	.word	0x08007b30
 8005d34:	20000000 	.word	0x20000000

08005d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8005d3c:	f7ff ffde 	bl	8005cfc <HAL_RCC_GetHCLKFreq>
 8005d40:	0001      	movs	r1, r0
 8005d42:	4b07      	ldr	r3, [pc, #28]	@ (8005d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	0b1b      	lsrs	r3, r3, #12
 8005d48:	2207      	movs	r2, #7
 8005d4a:	401a      	ands	r2, r3
 8005d4c:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005d4e:	0092      	lsls	r2, r2, #2
 8005d50:	58d3      	ldr	r3, [r2, r3]
 8005d52:	221f      	movs	r2, #31
 8005d54:	4013      	ands	r3, r2
 8005d56:	40d9      	lsrs	r1, r3
 8005d58:	000b      	movs	r3, r1
}
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	40021000 	.word	0x40021000
 8005d64:	08007b70 	.word	0x08007b70

08005d68 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005d70:	2313      	movs	r3, #19
 8005d72:	18fb      	adds	r3, r7, r3
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d78:	2312      	movs	r3, #18
 8005d7a:	18fb      	adds	r3, r7, r3
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2240      	movs	r2, #64	@ 0x40
 8005d86:	4013      	ands	r3, r2
 8005d88:	d100      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005d8a:	e079      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d8c:	2011      	movs	r0, #17
 8005d8e:	183b      	adds	r3, r7, r0
 8005d90:	2200      	movs	r2, #0
 8005d92:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d94:	4b63      	ldr	r3, [pc, #396]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d98:	2380      	movs	r3, #128	@ 0x80
 8005d9a:	055b      	lsls	r3, r3, #21
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d110      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da0:	4b60      	ldr	r3, [pc, #384]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005da2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005da4:	4b5f      	ldr	r3, [pc, #380]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005da6:	2180      	movs	r1, #128	@ 0x80
 8005da8:	0549      	lsls	r1, r1, #21
 8005daa:	430a      	orrs	r2, r1
 8005dac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005dae:	4b5d      	ldr	r3, [pc, #372]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005db0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005db2:	2380      	movs	r3, #128	@ 0x80
 8005db4:	055b      	lsls	r3, r3, #21
 8005db6:	4013      	ands	r3, r2
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dbc:	183b      	adds	r3, r7, r0
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8005dc2:	4b58      	ldr	r3, [pc, #352]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dc6:	23c0      	movs	r3, #192	@ 0xc0
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4013      	ands	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d019      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d014      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8005dde:	4b51      	ldr	r3, [pc, #324]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de2:	4a51      	ldr	r2, [pc, #324]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005de8:	4b4e      	ldr	r3, [pc, #312]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dec:	4b4d      	ldr	r3, [pc, #308]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dee:	2180      	movs	r1, #128	@ 0x80
 8005df0:	0249      	lsls	r1, r1, #9
 8005df2:	430a      	orrs	r2, r1
 8005df4:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005df6:	4b4b      	ldr	r3, [pc, #300]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005df8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dfc:	494b      	ldr	r1, [pc, #300]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005dfe:	400a      	ands	r2, r1
 8005e00:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8005e02:	4b48      	ldr	r3, [pc, #288]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d016      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e10:	f7fe fafe 	bl	8004410 <HAL_GetTick>
 8005e14:	0003      	movs	r3, r0
 8005e16:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005e18:	e00c      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1a:	f7fe faf9 	bl	8004410 <HAL_GetTick>
 8005e1e:	0002      	movs	r2, r0
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	4a42      	ldr	r2, [pc, #264]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d904      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8005e2a:	2313      	movs	r3, #19
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	2203      	movs	r2, #3
 8005e30:	701a      	strb	r2, [r3, #0]
          break;
 8005e32:	e004      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005e34:	4b3b      	ldr	r3, [pc, #236]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e38:	2202      	movs	r2, #2
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d0ed      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8005e3e:	2313      	movs	r3, #19
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e48:	4b36      	ldr	r3, [pc, #216]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4c:	4a36      	ldr	r2, [pc, #216]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	0019      	movs	r1, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	4b33      	ldr	r3, [pc, #204]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e5c:	e005      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5e:	2312      	movs	r3, #18
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	2213      	movs	r2, #19
 8005e64:	18ba      	adds	r2, r7, r2
 8005e66:	7812      	ldrb	r2, [r2, #0]
 8005e68:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e6a:	2311      	movs	r3, #17
 8005e6c:	18fb      	adds	r3, r7, r3
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d105      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e74:	4b2b      	ldr	r3, [pc, #172]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e78:	4b2a      	ldr	r3, [pc, #168]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e7a:	492e      	ldr	r1, [pc, #184]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e7c:	400a      	ands	r2, r1
 8005e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2201      	movs	r2, #1
 8005e86:	4013      	ands	r3, r2
 8005e88:	d009      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e8a:	4b26      	ldr	r3, [pc, #152]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8e:	2203      	movs	r2, #3
 8005e90:	4393      	bics	r3, r2
 8005e92:	0019      	movs	r1, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	4b22      	ldr	r3, [pc, #136]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d009      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eac:	4a22      	ldr	r2, [pc, #136]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eae:	4013      	ands	r3, r2
 8005eb0:	0019      	movs	r1, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d008      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ec6:	4b17      	ldr	r3, [pc, #92]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	0899      	lsrs	r1, r3, #2
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695a      	ldr	r2, [r3, #20]
 8005ed2:	4b14      	ldr	r3, [pc, #80]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2204      	movs	r2, #4
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d009      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005ee2:	4b10      	ldr	r3, [pc, #64]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee6:	4a15      	ldr	r2, [pc, #84]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	0019      	movs	r1, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2280      	movs	r2, #128	@ 0x80
 8005efc:	4013      	ands	r3, r2
 8005efe:	d009      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8005f00:	4b08      	ldr	r3, [pc, #32]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	22e0      	movs	r2, #224	@ 0xe0
 8005f06:	4393      	bics	r3, r2
 8005f08:	0019      	movs	r1, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	4b05      	ldr	r3, [pc, #20]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f10:	430a      	orrs	r2, r1
 8005f12:	601a      	str	r2, [r3, #0]
  }
  return status;
 8005f14:	2312      	movs	r3, #18
 8005f16:	18fb      	adds	r3, r7, r3
 8005f18:	781b      	ldrb	r3, [r3, #0]
}
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b006      	add	sp, #24
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	46c0      	nop			@ (mov r8, r8)
 8005f24:	40021000 	.word	0x40021000
 8005f28:	fffffcff 	.word	0xfffffcff
 8005f2c:	fffeffff 	.word	0xfffeffff
 8005f30:	00001388 	.word	0x00001388
 8005f34:	efffffff 	.word	0xefffffff
 8005f38:	ffffcfff 	.word	0xffffcfff
 8005f3c:	ffff3fff 	.word	0xffff3fff

08005f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e04a      	b.n	8005fe8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	223d      	movs	r2, #61	@ 0x3d
 8005f56:	5c9b      	ldrb	r3, [r3, r2]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d107      	bne.n	8005f6e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	223c      	movs	r2, #60	@ 0x3c
 8005f62:	2100      	movs	r1, #0
 8005f64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f7fe f8e1 	bl	8004130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	223d      	movs	r2, #61	@ 0x3d
 8005f72:	2102      	movs	r1, #2
 8005f74:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	0019      	movs	r1, r3
 8005f80:	0010      	movs	r0, r2
 8005f82:	f000 f835 	bl	8005ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2248      	movs	r2, #72	@ 0x48
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	223e      	movs	r2, #62	@ 0x3e
 8005f92:	2101      	movs	r1, #1
 8005f94:	5499      	strb	r1, [r3, r2]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	223f      	movs	r2, #63	@ 0x3f
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	5499      	strb	r1, [r3, r2]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2240      	movs	r2, #64	@ 0x40
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	5499      	strb	r1, [r3, r2]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2241      	movs	r2, #65	@ 0x41
 8005faa:	2101      	movs	r1, #1
 8005fac:	5499      	strb	r1, [r3, r2]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2242      	movs	r2, #66	@ 0x42
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	5499      	strb	r1, [r3, r2]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2243      	movs	r2, #67	@ 0x43
 8005fba:	2101      	movs	r1, #1
 8005fbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2244      	movs	r2, #68	@ 0x44
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	5499      	strb	r1, [r3, r2]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2245      	movs	r2, #69	@ 0x45
 8005fca:	2101      	movs	r1, #1
 8005fcc:	5499      	strb	r1, [r3, r2]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2246      	movs	r2, #70	@ 0x46
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	5499      	strb	r1, [r3, r2]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2247      	movs	r2, #71	@ 0x47
 8005fda:	2101      	movs	r1, #1
 8005fdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	223d      	movs	r2, #61	@ 0x3d
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	0018      	movs	r0, r3
 8005fea:	46bd      	mov	sp, r7
 8005fec:	b002      	add	sp, #8
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a2e      	ldr	r2, [pc, #184]	@ (80060bc <TIM_Base_SetConfig+0xcc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_Base_SetConfig+0x20>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a2d      	ldr	r2, [pc, #180]	@ (80060c0 <TIM_Base_SetConfig+0xd0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2270      	movs	r2, #112	@ 0x70
 8006014:	4393      	bics	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a25      	ldr	r2, [pc, #148]	@ (80060bc <TIM_Base_SetConfig+0xcc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00f      	beq.n	800604a <TIM_Base_SetConfig+0x5a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a24      	ldr	r2, [pc, #144]	@ (80060c0 <TIM_Base_SetConfig+0xd0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00b      	beq.n	800604a <TIM_Base_SetConfig+0x5a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a23      	ldr	r2, [pc, #140]	@ (80060c4 <TIM_Base_SetConfig+0xd4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d007      	beq.n	800604a <TIM_Base_SetConfig+0x5a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a22      	ldr	r2, [pc, #136]	@ (80060c8 <TIM_Base_SetConfig+0xd8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d003      	beq.n	800604a <TIM_Base_SetConfig+0x5a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a21      	ldr	r2, [pc, #132]	@ (80060cc <TIM_Base_SetConfig+0xdc>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d108      	bne.n	800605c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4a20      	ldr	r2, [pc, #128]	@ (80060d0 <TIM_Base_SetConfig+0xe0>)
 800604e:	4013      	ands	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2280      	movs	r2, #128	@ 0x80
 8006060:	4393      	bics	r3, r2
 8006062:	001a      	movs	r2, r3
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a0f      	ldr	r2, [pc, #60]	@ (80060bc <TIM_Base_SetConfig+0xcc>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d007      	beq.n	8006094 <TIM_Base_SetConfig+0xa4>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a10      	ldr	r2, [pc, #64]	@ (80060c8 <TIM_Base_SetConfig+0xd8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_Base_SetConfig+0xa4>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a0f      	ldr	r2, [pc, #60]	@ (80060cc <TIM_Base_SetConfig+0xdc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d103      	bne.n	800609c <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2204      	movs	r2, #4
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	46c0      	nop			@ (mov r8, r8)
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b004      	add	sp, #16
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40012c00 	.word	0x40012c00
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40002000 	.word	0x40002000
 80060c8:	40014400 	.word	0x40014400
 80060cc:	40014800 	.word	0x40014800
 80060d0:	fffffcff 	.word	0xfffffcff

080060d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e046      	b.n	8006174 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2288      	movs	r2, #136	@ 0x88
 80060ea:	589b      	ldr	r3, [r3, r2]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d107      	bne.n	8006100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2284      	movs	r2, #132	@ 0x84
 80060f4:	2100      	movs	r1, #0
 80060f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	0018      	movs	r0, r3
 80060fc:	f7fe f88a 	bl	8004214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2288      	movs	r2, #136	@ 0x88
 8006104:	2124      	movs	r1, #36	@ 0x24
 8006106:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2101      	movs	r1, #1
 8006114:	438a      	bics	r2, r1
 8006116:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	0018      	movs	r0, r3
 8006124:	f000 fa4e 	bl	80065c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	0018      	movs	r0, r3
 800612c:	f000 f8cc 	bl	80062c8 <UART_SetConfig>
 8006130:	0003      	movs	r3, r0
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e01c      	b.n	8006174 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	490d      	ldr	r1, [pc, #52]	@ (800617c <HAL_UART_Init+0xa8>)
 8006146:	400a      	ands	r2, r1
 8006148:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	212a      	movs	r1, #42	@ 0x2a
 8006156:	438a      	bics	r2, r1
 8006158:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2101      	movs	r1, #1
 8006166:	430a      	orrs	r2, r1
 8006168:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	0018      	movs	r0, r3
 800616e:	f000 fadd 	bl	800672c <UART_CheckIdleState>
 8006172:	0003      	movs	r3, r0
}
 8006174:	0018      	movs	r0, r3
 8006176:	46bd      	mov	sp, r7
 8006178:	b002      	add	sp, #8
 800617a:	bd80      	pop	{r7, pc}
 800617c:	ffffb7ff 	.word	0xffffb7ff

08006180 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	@ 0x28
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	1dbb      	adds	r3, r7, #6
 800618e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2288      	movs	r2, #136	@ 0x88
 8006194:	589b      	ldr	r3, [r3, r2]
 8006196:	2b20      	cmp	r3, #32
 8006198:	d000      	beq.n	800619c <HAL_UART_Transmit+0x1c>
 800619a:	e090      	b.n	80062be <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_UART_Transmit+0x2a>
 80061a2:	1dbb      	adds	r3, r7, #6
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e088      	b.n	80062c0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	2380      	movs	r3, #128	@ 0x80
 80061b4:	015b      	lsls	r3, r3, #5
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d109      	bne.n	80061ce <HAL_UART_Transmit+0x4e>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d105      	bne.n	80061ce <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2201      	movs	r2, #1
 80061c6:	4013      	ands	r3, r2
 80061c8:	d001      	beq.n	80061ce <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e078      	b.n	80062c0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2290      	movs	r2, #144	@ 0x90
 80061d2:	2100      	movs	r1, #0
 80061d4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2288      	movs	r2, #136	@ 0x88
 80061da:	2121      	movs	r1, #33	@ 0x21
 80061dc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061de:	f7fe f917 	bl	8004410 <HAL_GetTick>
 80061e2:	0003      	movs	r3, r0
 80061e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1dba      	adds	r2, r7, #6
 80061ea:	2154      	movs	r1, #84	@ 0x54
 80061ec:	8812      	ldrh	r2, [r2, #0]
 80061ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	1dba      	adds	r2, r7, #6
 80061f4:	2156      	movs	r1, #86	@ 0x56
 80061f6:	8812      	ldrh	r2, [r2, #0]
 80061f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	2380      	movs	r3, #128	@ 0x80
 8006200:	015b      	lsls	r3, r3, #5
 8006202:	429a      	cmp	r2, r3
 8006204:	d108      	bne.n	8006218 <HAL_UART_Transmit+0x98>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e003      	b.n	8006220 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800621c:	2300      	movs	r3, #0
 800621e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006220:	e030      	b.n	8006284 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	0013      	movs	r3, r2
 800622c:	2200      	movs	r2, #0
 800622e:	2180      	movs	r1, #128	@ 0x80
 8006230:	f000 fb26 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 8006234:	1e03      	subs	r3, r0, #0
 8006236:	d005      	beq.n	8006244 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2288      	movs	r2, #136	@ 0x88
 800623c:	2120      	movs	r1, #32
 800623e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e03d      	b.n	80062c0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	001a      	movs	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	05d2      	lsls	r2, r2, #23
 8006256:	0dd2      	lsrs	r2, r2, #23
 8006258:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	3302      	adds	r3, #2
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e007      	b.n	8006272 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	781a      	ldrb	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3301      	adds	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2256      	movs	r2, #86	@ 0x56
 8006276:	5a9b      	ldrh	r3, [r3, r2]
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b299      	uxth	r1, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2256      	movs	r2, #86	@ 0x56
 8006282:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2256      	movs	r2, #86	@ 0x56
 8006288:	5a9b      	ldrh	r3, [r3, r2]
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1c8      	bne.n	8006222 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	0013      	movs	r3, r2
 800629a:	2200      	movs	r2, #0
 800629c:	2140      	movs	r1, #64	@ 0x40
 800629e:	f000 faef 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 80062a2:	1e03      	subs	r3, r0, #0
 80062a4:	d005      	beq.n	80062b2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2288      	movs	r2, #136	@ 0x88
 80062aa:	2120      	movs	r1, #32
 80062ac:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e006      	b.n	80062c0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2288      	movs	r2, #136	@ 0x88
 80062b6:	2120      	movs	r1, #32
 80062b8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	e000      	b.n	80062c0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80062be:	2302      	movs	r3, #2
  }
}
 80062c0:	0018      	movs	r0, r3
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b008      	add	sp, #32
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062d0:	231e      	movs	r3, #30
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	2200      	movs	r2, #0
 80062d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4aab      	ldr	r2, [pc, #684]	@ (80065a4 <UART_SetConfig+0x2dc>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	0019      	movs	r1, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	430a      	orrs	r2, r1
 8006304:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	4aa6      	ldr	r2, [pc, #664]	@ (80065a8 <UART_SetConfig+0x2e0>)
 800630e:	4013      	ands	r3, r2
 8006310:	0019      	movs	r1, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	4a9d      	ldr	r2, [pc, #628]	@ (80065ac <UART_SetConfig+0x2e4>)
 8006336:	4013      	ands	r3, r2
 8006338:	0019      	movs	r1, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	430a      	orrs	r2, r1
 8006342:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634a:	220f      	movs	r2, #15
 800634c:	4393      	bics	r3, r2
 800634e:	0019      	movs	r1, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a93      	ldr	r2, [pc, #588]	@ (80065b0 <UART_SetConfig+0x2e8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d127      	bne.n	80063b6 <UART_SetConfig+0xee>
 8006366:	4b93      	ldr	r3, [pc, #588]	@ (80065b4 <UART_SetConfig+0x2ec>)
 8006368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636a:	2203      	movs	r2, #3
 800636c:	4013      	ands	r3, r2
 800636e:	2b03      	cmp	r3, #3
 8006370:	d017      	beq.n	80063a2 <UART_SetConfig+0xda>
 8006372:	d81b      	bhi.n	80063ac <UART_SetConfig+0xe4>
 8006374:	2b02      	cmp	r3, #2
 8006376:	d00a      	beq.n	800638e <UART_SetConfig+0xc6>
 8006378:	d818      	bhi.n	80063ac <UART_SetConfig+0xe4>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <UART_SetConfig+0xbc>
 800637e:	2b01      	cmp	r3, #1
 8006380:	d00a      	beq.n	8006398 <UART_SetConfig+0xd0>
 8006382:	e013      	b.n	80063ac <UART_SetConfig+0xe4>
 8006384:	231f      	movs	r3, #31
 8006386:	18fb      	adds	r3, r7, r3
 8006388:	2200      	movs	r2, #0
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	e021      	b.n	80063d2 <UART_SetConfig+0x10a>
 800638e:	231f      	movs	r3, #31
 8006390:	18fb      	adds	r3, r7, r3
 8006392:	2202      	movs	r2, #2
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e01c      	b.n	80063d2 <UART_SetConfig+0x10a>
 8006398:	231f      	movs	r3, #31
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	2204      	movs	r2, #4
 800639e:	701a      	strb	r2, [r3, #0]
 80063a0:	e017      	b.n	80063d2 <UART_SetConfig+0x10a>
 80063a2:	231f      	movs	r3, #31
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	2208      	movs	r2, #8
 80063a8:	701a      	strb	r2, [r3, #0]
 80063aa:	e012      	b.n	80063d2 <UART_SetConfig+0x10a>
 80063ac:	231f      	movs	r3, #31
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	2210      	movs	r2, #16
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	e00d      	b.n	80063d2 <UART_SetConfig+0x10a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a7f      	ldr	r2, [pc, #508]	@ (80065b8 <UART_SetConfig+0x2f0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d104      	bne.n	80063ca <UART_SetConfig+0x102>
 80063c0:	231f      	movs	r3, #31
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	e003      	b.n	80063d2 <UART_SetConfig+0x10a>
 80063ca:	231f      	movs	r3, #31
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	2210      	movs	r2, #16
 80063d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	69da      	ldr	r2, [r3, #28]
 80063d6:	2380      	movs	r3, #128	@ 0x80
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	429a      	cmp	r2, r3
 80063dc:	d000      	beq.n	80063e0 <UART_SetConfig+0x118>
 80063de:	e06f      	b.n	80064c0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80063e0:	231f      	movs	r3, #31
 80063e2:	18fb      	adds	r3, r7, r3
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d01f      	beq.n	800642a <UART_SetConfig+0x162>
 80063ea:	dc22      	bgt.n	8006432 <UART_SetConfig+0x16a>
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d017      	beq.n	8006420 <UART_SetConfig+0x158>
 80063f0:	dc1f      	bgt.n	8006432 <UART_SetConfig+0x16a>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <UART_SetConfig+0x134>
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d005      	beq.n	8006406 <UART_SetConfig+0x13e>
 80063fa:	e01a      	b.n	8006432 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063fc:	f7ff fc9c 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 8006400:	0003      	movs	r3, r0
 8006402:	61bb      	str	r3, [r7, #24]
        break;
 8006404:	e01c      	b.n	8006440 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8006406:	4b6b      	ldr	r3, [pc, #428]	@ (80065b4 <UART_SetConfig+0x2ec>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	2207      	movs	r2, #7
 800640e:	4013      	ands	r3, r2
 8006410:	3301      	adds	r3, #1
 8006412:	0019      	movs	r1, r3
 8006414:	4869      	ldr	r0, [pc, #420]	@ (80065bc <UART_SetConfig+0x2f4>)
 8006416:	f7f9 fe89 	bl	800012c <__udivsi3>
 800641a:	0003      	movs	r3, r0
 800641c:	61bb      	str	r3, [r7, #24]
        break;
 800641e:	e00f      	b.n	8006440 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006420:	f7ff fc2a 	bl	8005c78 <HAL_RCC_GetSysClockFreq>
 8006424:	0003      	movs	r3, r0
 8006426:	61bb      	str	r3, [r7, #24]
        break;
 8006428:	e00a      	b.n	8006440 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642a:	2380      	movs	r3, #128	@ 0x80
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	61bb      	str	r3, [r7, #24]
        break;
 8006430:	e006      	b.n	8006440 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006436:	231e      	movs	r3, #30
 8006438:	18fb      	adds	r3, r7, r3
 800643a:	2201      	movs	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
        break;
 800643e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d100      	bne.n	8006448 <UART_SetConfig+0x180>
 8006446:	e097      	b.n	8006578 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800644c:	4b5c      	ldr	r3, [pc, #368]	@ (80065c0 <UART_SetConfig+0x2f8>)
 800644e:	0052      	lsls	r2, r2, #1
 8006450:	5ad3      	ldrh	r3, [r2, r3]
 8006452:	0019      	movs	r1, r3
 8006454:	69b8      	ldr	r0, [r7, #24]
 8006456:	f7f9 fe69 	bl	800012c <__udivsi3>
 800645a:	0003      	movs	r3, r0
 800645c:	005a      	lsls	r2, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	18d2      	adds	r2, r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	0019      	movs	r1, r3
 800646c:	0010      	movs	r0, r2
 800646e:	f7f9 fe5d 	bl	800012c <__udivsi3>
 8006472:	0003      	movs	r3, r0
 8006474:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b0f      	cmp	r3, #15
 800647a:	d91c      	bls.n	80064b6 <UART_SetConfig+0x1ee>
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	2380      	movs	r3, #128	@ 0x80
 8006480:	025b      	lsls	r3, r3, #9
 8006482:	429a      	cmp	r2, r3
 8006484:	d217      	bcs.n	80064b6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	b29a      	uxth	r2, r3
 800648a:	200e      	movs	r0, #14
 800648c:	183b      	adds	r3, r7, r0
 800648e:	210f      	movs	r1, #15
 8006490:	438a      	bics	r2, r1
 8006492:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	b29b      	uxth	r3, r3
 800649a:	2207      	movs	r2, #7
 800649c:	4013      	ands	r3, r2
 800649e:	b299      	uxth	r1, r3
 80064a0:	183b      	adds	r3, r7, r0
 80064a2:	183a      	adds	r2, r7, r0
 80064a4:	8812      	ldrh	r2, [r2, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	183a      	adds	r2, r7, r0
 80064b0:	8812      	ldrh	r2, [r2, #0]
 80064b2:	60da      	str	r2, [r3, #12]
 80064b4:	e060      	b.n	8006578 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80064b6:	231e      	movs	r3, #30
 80064b8:	18fb      	adds	r3, r7, r3
 80064ba:	2201      	movs	r2, #1
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e05b      	b.n	8006578 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064c0:	231f      	movs	r3, #31
 80064c2:	18fb      	adds	r3, r7, r3
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d01f      	beq.n	800650a <UART_SetConfig+0x242>
 80064ca:	dc22      	bgt.n	8006512 <UART_SetConfig+0x24a>
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d017      	beq.n	8006500 <UART_SetConfig+0x238>
 80064d0:	dc1f      	bgt.n	8006512 <UART_SetConfig+0x24a>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <UART_SetConfig+0x214>
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d005      	beq.n	80064e6 <UART_SetConfig+0x21e>
 80064da:	e01a      	b.n	8006512 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064dc:	f7ff fc2c 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 80064e0:	0003      	movs	r3, r0
 80064e2:	61bb      	str	r3, [r7, #24]
        break;
 80064e4:	e01c      	b.n	8006520 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80064e6:	4b33      	ldr	r3, [pc, #204]	@ (80065b4 <UART_SetConfig+0x2ec>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	2207      	movs	r2, #7
 80064ee:	4013      	ands	r3, r2
 80064f0:	3301      	adds	r3, #1
 80064f2:	0019      	movs	r1, r3
 80064f4:	4831      	ldr	r0, [pc, #196]	@ (80065bc <UART_SetConfig+0x2f4>)
 80064f6:	f7f9 fe19 	bl	800012c <__udivsi3>
 80064fa:	0003      	movs	r3, r0
 80064fc:	61bb      	str	r3, [r7, #24]
        break;
 80064fe:	e00f      	b.n	8006520 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006500:	f7ff fbba 	bl	8005c78 <HAL_RCC_GetSysClockFreq>
 8006504:	0003      	movs	r3, r0
 8006506:	61bb      	str	r3, [r7, #24]
        break;
 8006508:	e00a      	b.n	8006520 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650a:	2380      	movs	r3, #128	@ 0x80
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	61bb      	str	r3, [r7, #24]
        break;
 8006510:	e006      	b.n	8006520 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006516:	231e      	movs	r3, #30
 8006518:	18fb      	adds	r3, r7, r3
 800651a:	2201      	movs	r2, #1
 800651c:	701a      	strb	r2, [r3, #0]
        break;
 800651e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d028      	beq.n	8006578 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800652a:	4b25      	ldr	r3, [pc, #148]	@ (80065c0 <UART_SetConfig+0x2f8>)
 800652c:	0052      	lsls	r2, r2, #1
 800652e:	5ad3      	ldrh	r3, [r2, r3]
 8006530:	0019      	movs	r1, r3
 8006532:	69b8      	ldr	r0, [r7, #24]
 8006534:	f7f9 fdfa 	bl	800012c <__udivsi3>
 8006538:	0003      	movs	r3, r0
 800653a:	001a      	movs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	18d2      	adds	r2, r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	0019      	movs	r1, r3
 800654a:	0010      	movs	r0, r2
 800654c:	f7f9 fdee 	bl	800012c <__udivsi3>
 8006550:	0003      	movs	r3, r0
 8006552:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b0f      	cmp	r3, #15
 8006558:	d90a      	bls.n	8006570 <UART_SetConfig+0x2a8>
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	2380      	movs	r3, #128	@ 0x80
 800655e:	025b      	lsls	r3, r3, #9
 8006560:	429a      	cmp	r2, r3
 8006562:	d205      	bcs.n	8006570 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	e003      	b.n	8006578 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006570:	231e      	movs	r3, #30
 8006572:	18fb      	adds	r3, r7, r3
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	226a      	movs	r2, #106	@ 0x6a
 800657c:	2101      	movs	r1, #1
 800657e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2268      	movs	r2, #104	@ 0x68
 8006584:	2101      	movs	r1, #1
 8006586:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006594:	231e      	movs	r3, #30
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	781b      	ldrb	r3, [r3, #0]
}
 800659a:	0018      	movs	r0, r3
 800659c:	46bd      	mov	sp, r7
 800659e:	b008      	add	sp, #32
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	46c0      	nop			@ (mov r8, r8)
 80065a4:	cfff69f3 	.word	0xcfff69f3
 80065a8:	ffffcfff 	.word	0xffffcfff
 80065ac:	11fff4ff 	.word	0x11fff4ff
 80065b0:	40013800 	.word	0x40013800
 80065b4:	40021000 	.word	0x40021000
 80065b8:	40004400 	.word	0x40004400
 80065bc:	02dc6c00 	.word	0x02dc6c00
 80065c0:	08007b90 	.word	0x08007b90

080065c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d0:	2208      	movs	r2, #8
 80065d2:	4013      	ands	r3, r2
 80065d4:	d00b      	beq.n	80065ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4a4a      	ldr	r2, [pc, #296]	@ (8006708 <UART_AdvFeatureConfig+0x144>)
 80065de:	4013      	ands	r3, r2
 80065e0:	0019      	movs	r1, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f2:	2201      	movs	r2, #1
 80065f4:	4013      	ands	r3, r2
 80065f6:	d00b      	beq.n	8006610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	4a43      	ldr	r2, [pc, #268]	@ (800670c <UART_AdvFeatureConfig+0x148>)
 8006600:	4013      	ands	r3, r2
 8006602:	0019      	movs	r1, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006614:	2202      	movs	r2, #2
 8006616:	4013      	ands	r3, r2
 8006618:	d00b      	beq.n	8006632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4a3b      	ldr	r2, [pc, #236]	@ (8006710 <UART_AdvFeatureConfig+0x14c>)
 8006622:	4013      	ands	r3, r2
 8006624:	0019      	movs	r1, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006636:	2204      	movs	r2, #4
 8006638:	4013      	ands	r3, r2
 800663a:	d00b      	beq.n	8006654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	4a34      	ldr	r2, [pc, #208]	@ (8006714 <UART_AdvFeatureConfig+0x150>)
 8006644:	4013      	ands	r3, r2
 8006646:	0019      	movs	r1, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006658:	2210      	movs	r2, #16
 800665a:	4013      	ands	r3, r2
 800665c:	d00b      	beq.n	8006676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	4a2c      	ldr	r2, [pc, #176]	@ (8006718 <UART_AdvFeatureConfig+0x154>)
 8006666:	4013      	ands	r3, r2
 8006668:	0019      	movs	r1, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667a:	2220      	movs	r2, #32
 800667c:	4013      	ands	r3, r2
 800667e:	d00b      	beq.n	8006698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	4a25      	ldr	r2, [pc, #148]	@ (800671c <UART_AdvFeatureConfig+0x158>)
 8006688:	4013      	ands	r3, r2
 800668a:	0019      	movs	r1, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669c:	2240      	movs	r2, #64	@ 0x40
 800669e:	4013      	ands	r3, r2
 80066a0:	d01d      	beq.n	80066de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006720 <UART_AdvFeatureConfig+0x15c>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	0019      	movs	r1, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066be:	2380      	movs	r3, #128	@ 0x80
 80066c0:	035b      	lsls	r3, r3, #13
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d10b      	bne.n	80066de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	4a15      	ldr	r2, [pc, #84]	@ (8006724 <UART_AdvFeatureConfig+0x160>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	0019      	movs	r1, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e2:	2280      	movs	r2, #128	@ 0x80
 80066e4:	4013      	ands	r3, r2
 80066e6:	d00b      	beq.n	8006700 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	4a0e      	ldr	r2, [pc, #56]	@ (8006728 <UART_AdvFeatureConfig+0x164>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	0019      	movs	r1, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	605a      	str	r2, [r3, #4]
  }
}
 8006700:	46c0      	nop			@ (mov r8, r8)
 8006702:	46bd      	mov	sp, r7
 8006704:	b002      	add	sp, #8
 8006706:	bd80      	pop	{r7, pc}
 8006708:	ffff7fff 	.word	0xffff7fff
 800670c:	fffdffff 	.word	0xfffdffff
 8006710:	fffeffff 	.word	0xfffeffff
 8006714:	fffbffff 	.word	0xfffbffff
 8006718:	ffffefff 	.word	0xffffefff
 800671c:	ffffdfff 	.word	0xffffdfff
 8006720:	ffefffff 	.word	0xffefffff
 8006724:	ff9fffff 	.word	0xff9fffff
 8006728:	fff7ffff 	.word	0xfff7ffff

0800672c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b092      	sub	sp, #72	@ 0x48
 8006730:	af02      	add	r7, sp, #8
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2290      	movs	r2, #144	@ 0x90
 8006738:	2100      	movs	r1, #0
 800673a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800673c:	f7fd fe68 	bl	8004410 <HAL_GetTick>
 8006740:	0003      	movs	r3, r0
 8006742:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2208      	movs	r2, #8
 800674c:	4013      	ands	r3, r2
 800674e:	2b08      	cmp	r3, #8
 8006750:	d12d      	bne.n	80067ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006754:	2280      	movs	r2, #128	@ 0x80
 8006756:	0391      	lsls	r1, r2, #14
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	4a47      	ldr	r2, [pc, #284]	@ (8006878 <UART_CheckIdleState+0x14c>)
 800675c:	9200      	str	r2, [sp, #0]
 800675e:	2200      	movs	r2, #0
 8006760:	f000 f88e 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 8006764:	1e03      	subs	r3, r0, #0
 8006766:	d022      	beq.n	80067ae <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006768:	f3ef 8310 	mrs	r3, PRIMASK
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006770:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006772:	2301      	movs	r3, #1
 8006774:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006778:	f383 8810 	msr	PRIMASK, r3
}
 800677c:	46c0      	nop			@ (mov r8, r8)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2180      	movs	r1, #128	@ 0x80
 800678a:	438a      	bics	r2, r1
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006790:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	f383 8810 	msr	PRIMASK, r3
}
 8006798:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2288      	movs	r2, #136	@ 0x88
 800679e:	2120      	movs	r1, #32
 80067a0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2284      	movs	r2, #132	@ 0x84
 80067a6:	2100      	movs	r1, #0
 80067a8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e060      	b.n	8006870 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2204      	movs	r2, #4
 80067b6:	4013      	ands	r3, r2
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d146      	bne.n	800684a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067be:	2280      	movs	r2, #128	@ 0x80
 80067c0:	03d1      	lsls	r1, r2, #15
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006878 <UART_CheckIdleState+0x14c>)
 80067c6:	9200      	str	r2, [sp, #0]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f000 f859 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 80067ce:	1e03      	subs	r3, r0, #0
 80067d0:	d03b      	beq.n	800684a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80067d2:	f3ef 8310 	mrs	r3, PRIMASK
 80067d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80067d8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067da:	637b      	str	r3, [r7, #52]	@ 0x34
 80067dc:	2301      	movs	r3, #1
 80067de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f383 8810 	msr	PRIMASK, r3
}
 80067e6:	46c0      	nop			@ (mov r8, r8)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4922      	ldr	r1, [pc, #136]	@ (800687c <UART_CheckIdleState+0x150>)
 80067f4:	400a      	ands	r2, r1
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f383 8810 	msr	PRIMASK, r3
}
 8006802:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006804:	f3ef 8310 	mrs	r3, PRIMASK
 8006808:	61bb      	str	r3, [r7, #24]
  return(result);
 800680a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680c:	633b      	str	r3, [r7, #48]	@ 0x30
 800680e:	2301      	movs	r3, #1
 8006810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f383 8810 	msr	PRIMASK, r3
}
 8006818:	46c0      	nop			@ (mov r8, r8)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2101      	movs	r1, #1
 8006826:	438a      	bics	r2, r1
 8006828:	609a      	str	r2, [r3, #8]
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	f383 8810 	msr	PRIMASK, r3
}
 8006834:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	228c      	movs	r2, #140	@ 0x8c
 800683a:	2120      	movs	r1, #32
 800683c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2284      	movs	r2, #132	@ 0x84
 8006842:	2100      	movs	r1, #0
 8006844:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e012      	b.n	8006870 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2288      	movs	r2, #136	@ 0x88
 800684e:	2120      	movs	r1, #32
 8006850:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	228c      	movs	r2, #140	@ 0x8c
 8006856:	2120      	movs	r1, #32
 8006858:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2284      	movs	r2, #132	@ 0x84
 800686a:	2100      	movs	r1, #0
 800686c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	0018      	movs	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	b010      	add	sp, #64	@ 0x40
 8006876:	bd80      	pop	{r7, pc}
 8006878:	01ffffff 	.word	0x01ffffff
 800687c:	fffffedf 	.word	0xfffffedf

08006880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	1dfb      	adds	r3, r7, #7
 800688e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006890:	e051      	b.n	8006936 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	3301      	adds	r3, #1
 8006896:	d04e      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006898:	f7fd fdba 	bl	8004410 <HAL_GetTick>
 800689c:	0002      	movs	r2, r0
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d302      	bcc.n	80068ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e051      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2204      	movs	r2, #4
 80068ba:	4013      	ands	r3, r2
 80068bc:	d03b      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0xb6>
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b80      	cmp	r3, #128	@ 0x80
 80068c2:	d038      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0xb6>
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2b40      	cmp	r3, #64	@ 0x40
 80068c8:	d035      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	2208      	movs	r2, #8
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d111      	bne.n	80068fc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2208      	movs	r2, #8
 80068de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	0018      	movs	r0, r3
 80068e4:	f000 f83c 	bl	8006960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2290      	movs	r2, #144	@ 0x90
 80068ec:	2108      	movs	r1, #8
 80068ee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2284      	movs	r2, #132	@ 0x84
 80068f4:	2100      	movs	r1, #0
 80068f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e02c      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69da      	ldr	r2, [r3, #28]
 8006902:	2380      	movs	r3, #128	@ 0x80
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	401a      	ands	r2, r3
 8006908:	2380      	movs	r3, #128	@ 0x80
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	429a      	cmp	r2, r3
 800690e:	d112      	bne.n	8006936 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2280      	movs	r2, #128	@ 0x80
 8006916:	0112      	lsls	r2, r2, #4
 8006918:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	0018      	movs	r0, r3
 800691e:	f000 f81f 	bl	8006960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2290      	movs	r2, #144	@ 0x90
 8006926:	2120      	movs	r1, #32
 8006928:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2284      	movs	r2, #132	@ 0x84
 800692e:	2100      	movs	r1, #0
 8006930:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e00f      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	4013      	ands	r3, r2
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	425a      	negs	r2, r3
 8006946:	4153      	adcs	r3, r2
 8006948:	b2db      	uxtb	r3, r3
 800694a:	001a      	movs	r2, r3
 800694c:	1dfb      	adds	r3, r7, #7
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d09e      	beq.n	8006892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	0018      	movs	r0, r3
 8006958:	46bd      	mov	sp, r7
 800695a:	b004      	add	sp, #16
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08e      	sub	sp, #56	@ 0x38
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006968:	f3ef 8310 	mrs	r3, PRIMASK
 800696c:	617b      	str	r3, [r7, #20]
  return(result);
 800696e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006970:	637b      	str	r3, [r7, #52]	@ 0x34
 8006972:	2301      	movs	r3, #1
 8006974:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	f383 8810 	msr	PRIMASK, r3
}
 800697c:	46c0      	nop			@ (mov r8, r8)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4926      	ldr	r1, [pc, #152]	@ (8006a24 <UART_EndRxTransfer+0xc4>)
 800698a:	400a      	ands	r2, r1
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006990:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	f383 8810 	msr	PRIMASK, r3
}
 8006998:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800699a:	f3ef 8310 	mrs	r3, PRIMASK
 800699e:	623b      	str	r3, [r7, #32]
  return(result);
 80069a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80069a4:	2301      	movs	r3, #1
 80069a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069aa:	f383 8810 	msr	PRIMASK, r3
}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	491b      	ldr	r1, [pc, #108]	@ (8006a28 <UART_EndRxTransfer+0xc8>)
 80069bc:	400a      	ands	r2, r1
 80069be:	609a      	str	r2, [r3, #8]
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c6:	f383 8810 	msr	PRIMASK, r3
}
 80069ca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d118      	bne.n	8006a06 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80069d4:	f3ef 8310 	mrs	r3, PRIMASK
 80069d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80069da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069de:	2301      	movs	r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f383 8810 	msr	PRIMASK, r3
}
 80069e8:	46c0      	nop			@ (mov r8, r8)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2110      	movs	r1, #16
 80069f6:	438a      	bics	r2, r1
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f383 8810 	msr	PRIMASK, r3
}
 8006a04:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	228c      	movs	r2, #140	@ 0x8c
 8006a0a:	2120      	movs	r1, #32
 8006a0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a1a:	46c0      	nop			@ (mov r8, r8)
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b00e      	add	sp, #56	@ 0x38
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	46c0      	nop			@ (mov r8, r8)
 8006a24:	fffffedf 	.word	0xfffffedf
 8006a28:	effffffe 	.word	0xeffffffe

08006a2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2284      	movs	r2, #132	@ 0x84
 8006a38:	5c9b      	ldrb	r3, [r3, r2]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e027      	b.n	8006a92 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2284      	movs	r2, #132	@ 0x84
 8006a46:	2101      	movs	r1, #1
 8006a48:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2288      	movs	r2, #136	@ 0x88
 8006a4e:	2124      	movs	r1, #36	@ 0x24
 8006a50:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2101      	movs	r1, #1
 8006a66:	438a      	bics	r2, r1
 8006a68:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8006a9c <HAL_UARTEx_DisableFifoMode+0x70>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2288      	movs	r2, #136	@ 0x88
 8006a84:	2120      	movs	r1, #32
 8006a86:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2284      	movs	r2, #132	@ 0x84
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	0018      	movs	r0, r3
 8006a94:	46bd      	mov	sp, r7
 8006a96:	b004      	add	sp, #16
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	46c0      	nop			@ (mov r8, r8)
 8006a9c:	dfffffff 	.word	0xdfffffff

08006aa0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2284      	movs	r2, #132	@ 0x84
 8006aae:	5c9b      	ldrb	r3, [r3, r2]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e02e      	b.n	8006b16 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2284      	movs	r2, #132	@ 0x84
 8006abc:	2101      	movs	r1, #1
 8006abe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2288      	movs	r2, #136	@ 0x88
 8006ac4:	2124      	movs	r1, #36	@ 0x24
 8006ac6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2101      	movs	r1, #1
 8006adc:	438a      	bics	r2, r1
 8006ade:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	08d9      	lsrs	r1, r3, #3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	0018      	movs	r0, r3
 8006af8:	f000 f854 	bl	8006ba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2288      	movs	r2, #136	@ 0x88
 8006b08:	2120      	movs	r1, #32
 8006b0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2284      	movs	r2, #132	@ 0x84
 8006b10:	2100      	movs	r1, #0
 8006b12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	0018      	movs	r0, r3
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b004      	add	sp, #16
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2284      	movs	r2, #132	@ 0x84
 8006b2e:	5c9b      	ldrb	r3, [r3, r2]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e02f      	b.n	8006b98 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2284      	movs	r2, #132	@ 0x84
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2288      	movs	r2, #136	@ 0x88
 8006b44:	2124      	movs	r1, #36	@ 0x24
 8006b46:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	438a      	bics	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	4a0e      	ldr	r2, [pc, #56]	@ (8006ba0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	0019      	movs	r1, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f000 f813 	bl	8006ba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2288      	movs	r2, #136	@ 0x88
 8006b8a:	2120      	movs	r1, #32
 8006b8c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2284      	movs	r2, #132	@ 0x84
 8006b92:	2100      	movs	r1, #0
 8006b94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	0018      	movs	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b004      	add	sp, #16
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	f1ffffff 	.word	0xf1ffffff

08006ba4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d108      	bne.n	8006bc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	226a      	movs	r2, #106	@ 0x6a
 8006bb8:	2101      	movs	r1, #1
 8006bba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2268      	movs	r2, #104	@ 0x68
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bc4:	e043      	b.n	8006c4e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bc6:	260f      	movs	r6, #15
 8006bc8:	19bb      	adds	r3, r7, r6
 8006bca:	2208      	movs	r2, #8
 8006bcc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bce:	200e      	movs	r0, #14
 8006bd0:	183b      	adds	r3, r7, r0
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	0e5b      	lsrs	r3, r3, #25
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	240d      	movs	r4, #13
 8006be2:	193b      	adds	r3, r7, r4
 8006be4:	2107      	movs	r1, #7
 8006be6:	400a      	ands	r2, r1
 8006be8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	0f5b      	lsrs	r3, r3, #29
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	250c      	movs	r5, #12
 8006bf6:	197b      	adds	r3, r7, r5
 8006bf8:	2107      	movs	r1, #7
 8006bfa:	400a      	ands	r2, r1
 8006bfc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bfe:	183b      	adds	r3, r7, r0
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	197a      	adds	r2, r7, r5
 8006c04:	7812      	ldrb	r2, [r2, #0]
 8006c06:	4914      	ldr	r1, [pc, #80]	@ (8006c58 <UARTEx_SetNbDataToProcess+0xb4>)
 8006c08:	5c8a      	ldrb	r2, [r1, r2]
 8006c0a:	435a      	muls	r2, r3
 8006c0c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c0e:	197b      	adds	r3, r7, r5
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	4a12      	ldr	r2, [pc, #72]	@ (8006c5c <UARTEx_SetNbDataToProcess+0xb8>)
 8006c14:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c16:	0019      	movs	r1, r3
 8006c18:	f7f9 fb12 	bl	8000240 <__divsi3>
 8006c1c:	0003      	movs	r3, r0
 8006c1e:	b299      	uxth	r1, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	226a      	movs	r2, #106	@ 0x6a
 8006c24:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c26:	19bb      	adds	r3, r7, r6
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	193a      	adds	r2, r7, r4
 8006c2c:	7812      	ldrb	r2, [r2, #0]
 8006c2e:	490a      	ldr	r1, [pc, #40]	@ (8006c58 <UARTEx_SetNbDataToProcess+0xb4>)
 8006c30:	5c8a      	ldrb	r2, [r1, r2]
 8006c32:	435a      	muls	r2, r3
 8006c34:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c36:	193b      	adds	r3, r7, r4
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	4a08      	ldr	r2, [pc, #32]	@ (8006c5c <UARTEx_SetNbDataToProcess+0xb8>)
 8006c3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c3e:	0019      	movs	r1, r3
 8006c40:	f7f9 fafe 	bl	8000240 <__divsi3>
 8006c44:	0003      	movs	r3, r0
 8006c46:	b299      	uxth	r1, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2268      	movs	r2, #104	@ 0x68
 8006c4c:	5299      	strh	r1, [r3, r2]
}
 8006c4e:	46c0      	nop			@ (mov r8, r8)
 8006c50:	46bd      	mov	sp, r7
 8006c52:	b005      	add	sp, #20
 8006c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c56:	46c0      	nop			@ (mov r8, r8)
 8006c58:	08007ba8 	.word	0x08007ba8
 8006c5c:	08007bb0 	.word	0x08007bb0

08006c60 <sniprintf>:
 8006c60:	b40c      	push	{r2, r3}
 8006c62:	b530      	push	{r4, r5, lr}
 8006c64:	4b18      	ldr	r3, [pc, #96]	@ (8006cc8 <sniprintf+0x68>)
 8006c66:	000c      	movs	r4, r1
 8006c68:	681d      	ldr	r5, [r3, #0]
 8006c6a:	b09d      	sub	sp, #116	@ 0x74
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	da08      	bge.n	8006c82 <sniprintf+0x22>
 8006c70:	238b      	movs	r3, #139	@ 0x8b
 8006c72:	2001      	movs	r0, #1
 8006c74:	602b      	str	r3, [r5, #0]
 8006c76:	4240      	negs	r0, r0
 8006c78:	b01d      	add	sp, #116	@ 0x74
 8006c7a:	bc30      	pop	{r4, r5}
 8006c7c:	bc08      	pop	{r3}
 8006c7e:	b002      	add	sp, #8
 8006c80:	4718      	bx	r3
 8006c82:	2382      	movs	r3, #130	@ 0x82
 8006c84:	466a      	mov	r2, sp
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	8293      	strh	r3, [r2, #20]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9002      	str	r0, [sp, #8]
 8006c8e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006c90:	9006      	str	r0, [sp, #24]
 8006c92:	4299      	cmp	r1, r3
 8006c94:	d000      	beq.n	8006c98 <sniprintf+0x38>
 8006c96:	1e4b      	subs	r3, r1, #1
 8006c98:	9304      	str	r3, [sp, #16]
 8006c9a:	9307      	str	r3, [sp, #28]
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	466a      	mov	r2, sp
 8006ca0:	425b      	negs	r3, r3
 8006ca2:	82d3      	strh	r3, [r2, #22]
 8006ca4:	0028      	movs	r0, r5
 8006ca6:	ab21      	add	r3, sp, #132	@ 0x84
 8006ca8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006caa:	a902      	add	r1, sp, #8
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	f000 f99d 	bl	8006fec <_svfiprintf_r>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	da01      	bge.n	8006cba <sniprintf+0x5a>
 8006cb6:	238b      	movs	r3, #139	@ 0x8b
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	2c00      	cmp	r4, #0
 8006cbc:	d0dc      	beq.n	8006c78 <sniprintf+0x18>
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	9b02      	ldr	r3, [sp, #8]
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	e7d8      	b.n	8006c78 <sniprintf+0x18>
 8006cc6:	46c0      	nop			@ (mov r8, r8)
 8006cc8:	2000000c 	.word	0x2000000c

08006ccc <memset>:
 8006ccc:	0003      	movs	r3, r0
 8006cce:	1882      	adds	r2, r0, r2
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d100      	bne.n	8006cd6 <memset+0xa>
 8006cd4:	4770      	bx	lr
 8006cd6:	7019      	strb	r1, [r3, #0]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	e7f9      	b.n	8006cd0 <memset+0x4>

08006cdc <__errno>:
 8006cdc:	4b01      	ldr	r3, [pc, #4]	@ (8006ce4 <__errno+0x8>)
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	4770      	bx	lr
 8006ce2:	46c0      	nop			@ (mov r8, r8)
 8006ce4:	2000000c 	.word	0x2000000c

08006ce8 <__libc_init_array>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	2600      	movs	r6, #0
 8006cec:	4c0c      	ldr	r4, [pc, #48]	@ (8006d20 <__libc_init_array+0x38>)
 8006cee:	4d0d      	ldr	r5, [pc, #52]	@ (8006d24 <__libc_init_array+0x3c>)
 8006cf0:	1b64      	subs	r4, r4, r5
 8006cf2:	10a4      	asrs	r4, r4, #2
 8006cf4:	42a6      	cmp	r6, r4
 8006cf6:	d109      	bne.n	8006d0c <__libc_init_array+0x24>
 8006cf8:	2600      	movs	r6, #0
 8006cfa:	f000 fea7 	bl	8007a4c <_init>
 8006cfe:	4c0a      	ldr	r4, [pc, #40]	@ (8006d28 <__libc_init_array+0x40>)
 8006d00:	4d0a      	ldr	r5, [pc, #40]	@ (8006d2c <__libc_init_array+0x44>)
 8006d02:	1b64      	subs	r4, r4, r5
 8006d04:	10a4      	asrs	r4, r4, #2
 8006d06:	42a6      	cmp	r6, r4
 8006d08:	d105      	bne.n	8006d16 <__libc_init_array+0x2e>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	00b3      	lsls	r3, r6, #2
 8006d0e:	58eb      	ldr	r3, [r5, r3]
 8006d10:	4798      	blx	r3
 8006d12:	3601      	adds	r6, #1
 8006d14:	e7ee      	b.n	8006cf4 <__libc_init_array+0xc>
 8006d16:	00b3      	lsls	r3, r6, #2
 8006d18:	58eb      	ldr	r3, [r5, r3]
 8006d1a:	4798      	blx	r3
 8006d1c:	3601      	adds	r6, #1
 8006d1e:	e7f2      	b.n	8006d06 <__libc_init_array+0x1e>
 8006d20:	08007bf4 	.word	0x08007bf4
 8006d24:	08007bf4 	.word	0x08007bf4
 8006d28:	08007bf8 	.word	0x08007bf8
 8006d2c:	08007bf4 	.word	0x08007bf4

08006d30 <__retarget_lock_acquire_recursive>:
 8006d30:	4770      	bx	lr

08006d32 <__retarget_lock_release_recursive>:
 8006d32:	4770      	bx	lr

08006d34 <_free_r>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	0005      	movs	r5, r0
 8006d38:	1e0c      	subs	r4, r1, #0
 8006d3a:	d010      	beq.n	8006d5e <_free_r+0x2a>
 8006d3c:	3c04      	subs	r4, #4
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	da00      	bge.n	8006d46 <_free_r+0x12>
 8006d44:	18e4      	adds	r4, r4, r3
 8006d46:	0028      	movs	r0, r5
 8006d48:	f000 f8e0 	bl	8006f0c <__malloc_lock>
 8006d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc4 <_free_r+0x90>)
 8006d4e:	6813      	ldr	r3, [r2, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d105      	bne.n	8006d60 <_free_r+0x2c>
 8006d54:	6063      	str	r3, [r4, #4]
 8006d56:	6014      	str	r4, [r2, #0]
 8006d58:	0028      	movs	r0, r5
 8006d5a:	f000 f8df 	bl	8006f1c <__malloc_unlock>
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	d908      	bls.n	8006d76 <_free_r+0x42>
 8006d64:	6820      	ldr	r0, [r4, #0]
 8006d66:	1821      	adds	r1, r4, r0
 8006d68:	428b      	cmp	r3, r1
 8006d6a:	d1f3      	bne.n	8006d54 <_free_r+0x20>
 8006d6c:	6819      	ldr	r1, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	1809      	adds	r1, r1, r0
 8006d72:	6021      	str	r1, [r4, #0]
 8006d74:	e7ee      	b.n	8006d54 <_free_r+0x20>
 8006d76:	001a      	movs	r2, r3
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <_free_r+0x4e>
 8006d7e:	42a3      	cmp	r3, r4
 8006d80:	d9f9      	bls.n	8006d76 <_free_r+0x42>
 8006d82:	6811      	ldr	r1, [r2, #0]
 8006d84:	1850      	adds	r0, r2, r1
 8006d86:	42a0      	cmp	r0, r4
 8006d88:	d10b      	bne.n	8006da2 <_free_r+0x6e>
 8006d8a:	6820      	ldr	r0, [r4, #0]
 8006d8c:	1809      	adds	r1, r1, r0
 8006d8e:	1850      	adds	r0, r2, r1
 8006d90:	6011      	str	r1, [r2, #0]
 8006d92:	4283      	cmp	r3, r0
 8006d94:	d1e0      	bne.n	8006d58 <_free_r+0x24>
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	1841      	adds	r1, r0, r1
 8006d9c:	6011      	str	r1, [r2, #0]
 8006d9e:	6053      	str	r3, [r2, #4]
 8006da0:	e7da      	b.n	8006d58 <_free_r+0x24>
 8006da2:	42a0      	cmp	r0, r4
 8006da4:	d902      	bls.n	8006dac <_free_r+0x78>
 8006da6:	230c      	movs	r3, #12
 8006da8:	602b      	str	r3, [r5, #0]
 8006daa:	e7d5      	b.n	8006d58 <_free_r+0x24>
 8006dac:	6820      	ldr	r0, [r4, #0]
 8006dae:	1821      	adds	r1, r4, r0
 8006db0:	428b      	cmp	r3, r1
 8006db2:	d103      	bne.n	8006dbc <_free_r+0x88>
 8006db4:	6819      	ldr	r1, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	1809      	adds	r1, r1, r0
 8006dba:	6021      	str	r1, [r4, #0]
 8006dbc:	6063      	str	r3, [r4, #4]
 8006dbe:	6054      	str	r4, [r2, #4]
 8006dc0:	e7ca      	b.n	8006d58 <_free_r+0x24>
 8006dc2:	46c0      	nop			@ (mov r8, r8)
 8006dc4:	200002f8 	.word	0x200002f8

08006dc8 <sbrk_aligned>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	4e0f      	ldr	r6, [pc, #60]	@ (8006e08 <sbrk_aligned+0x40>)
 8006dcc:	000d      	movs	r5, r1
 8006dce:	6831      	ldr	r1, [r6, #0]
 8006dd0:	0004      	movs	r4, r0
 8006dd2:	2900      	cmp	r1, #0
 8006dd4:	d102      	bne.n	8006ddc <sbrk_aligned+0x14>
 8006dd6:	f000 fb95 	bl	8007504 <_sbrk_r>
 8006dda:	6030      	str	r0, [r6, #0]
 8006ddc:	0029      	movs	r1, r5
 8006dde:	0020      	movs	r0, r4
 8006de0:	f000 fb90 	bl	8007504 <_sbrk_r>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d103      	bne.n	8006df0 <sbrk_aligned+0x28>
 8006de8:	2501      	movs	r5, #1
 8006dea:	426d      	negs	r5, r5
 8006dec:	0028      	movs	r0, r5
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
 8006df0:	2303      	movs	r3, #3
 8006df2:	1cc5      	adds	r5, r0, #3
 8006df4:	439d      	bics	r5, r3
 8006df6:	42a8      	cmp	r0, r5
 8006df8:	d0f8      	beq.n	8006dec <sbrk_aligned+0x24>
 8006dfa:	1a29      	subs	r1, r5, r0
 8006dfc:	0020      	movs	r0, r4
 8006dfe:	f000 fb81 	bl	8007504 <_sbrk_r>
 8006e02:	3001      	adds	r0, #1
 8006e04:	d1f2      	bne.n	8006dec <sbrk_aligned+0x24>
 8006e06:	e7ef      	b.n	8006de8 <sbrk_aligned+0x20>
 8006e08:	200002f4 	.word	0x200002f4

08006e0c <_malloc_r>:
 8006e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e0e:	2203      	movs	r2, #3
 8006e10:	1ccb      	adds	r3, r1, #3
 8006e12:	4393      	bics	r3, r2
 8006e14:	3308      	adds	r3, #8
 8006e16:	0005      	movs	r5, r0
 8006e18:	001f      	movs	r7, r3
 8006e1a:	2b0c      	cmp	r3, #12
 8006e1c:	d234      	bcs.n	8006e88 <_malloc_r+0x7c>
 8006e1e:	270c      	movs	r7, #12
 8006e20:	42b9      	cmp	r1, r7
 8006e22:	d833      	bhi.n	8006e8c <_malloc_r+0x80>
 8006e24:	0028      	movs	r0, r5
 8006e26:	f000 f871 	bl	8006f0c <__malloc_lock>
 8006e2a:	4e37      	ldr	r6, [pc, #220]	@ (8006f08 <_malloc_r+0xfc>)
 8006e2c:	6833      	ldr	r3, [r6, #0]
 8006e2e:	001c      	movs	r4, r3
 8006e30:	2c00      	cmp	r4, #0
 8006e32:	d12f      	bne.n	8006e94 <_malloc_r+0x88>
 8006e34:	0039      	movs	r1, r7
 8006e36:	0028      	movs	r0, r5
 8006e38:	f7ff ffc6 	bl	8006dc8 <sbrk_aligned>
 8006e3c:	0004      	movs	r4, r0
 8006e3e:	1c43      	adds	r3, r0, #1
 8006e40:	d15f      	bne.n	8006f02 <_malloc_r+0xf6>
 8006e42:	6834      	ldr	r4, [r6, #0]
 8006e44:	9400      	str	r4, [sp, #0]
 8006e46:	9b00      	ldr	r3, [sp, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d14a      	bne.n	8006ee2 <_malloc_r+0xd6>
 8006e4c:	2c00      	cmp	r4, #0
 8006e4e:	d052      	beq.n	8006ef6 <_malloc_r+0xea>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	0028      	movs	r0, r5
 8006e54:	18e3      	adds	r3, r4, r3
 8006e56:	9900      	ldr	r1, [sp, #0]
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	f000 fb53 	bl	8007504 <_sbrk_r>
 8006e5e:	9b01      	ldr	r3, [sp, #4]
 8006e60:	4283      	cmp	r3, r0
 8006e62:	d148      	bne.n	8006ef6 <_malloc_r+0xea>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	0028      	movs	r0, r5
 8006e68:	1aff      	subs	r7, r7, r3
 8006e6a:	0039      	movs	r1, r7
 8006e6c:	f7ff ffac 	bl	8006dc8 <sbrk_aligned>
 8006e70:	3001      	adds	r0, #1
 8006e72:	d040      	beq.n	8006ef6 <_malloc_r+0xea>
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	19db      	adds	r3, r3, r7
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	6833      	ldr	r3, [r6, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	2a00      	cmp	r2, #0
 8006e80:	d133      	bne.n	8006eea <_malloc_r+0xde>
 8006e82:	9b00      	ldr	r3, [sp, #0]
 8006e84:	6033      	str	r3, [r6, #0]
 8006e86:	e019      	b.n	8006ebc <_malloc_r+0xb0>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	dac9      	bge.n	8006e20 <_malloc_r+0x14>
 8006e8c:	230c      	movs	r3, #12
 8006e8e:	602b      	str	r3, [r5, #0]
 8006e90:	2000      	movs	r0, #0
 8006e92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e94:	6821      	ldr	r1, [r4, #0]
 8006e96:	1bc9      	subs	r1, r1, r7
 8006e98:	d420      	bmi.n	8006edc <_malloc_r+0xd0>
 8006e9a:	290b      	cmp	r1, #11
 8006e9c:	d90a      	bls.n	8006eb4 <_malloc_r+0xa8>
 8006e9e:	19e2      	adds	r2, r4, r7
 8006ea0:	6027      	str	r7, [r4, #0]
 8006ea2:	42a3      	cmp	r3, r4
 8006ea4:	d104      	bne.n	8006eb0 <_malloc_r+0xa4>
 8006ea6:	6032      	str	r2, [r6, #0]
 8006ea8:	6863      	ldr	r3, [r4, #4]
 8006eaa:	6011      	str	r1, [r2, #0]
 8006eac:	6053      	str	r3, [r2, #4]
 8006eae:	e005      	b.n	8006ebc <_malloc_r+0xb0>
 8006eb0:	605a      	str	r2, [r3, #4]
 8006eb2:	e7f9      	b.n	8006ea8 <_malloc_r+0x9c>
 8006eb4:	6862      	ldr	r2, [r4, #4]
 8006eb6:	42a3      	cmp	r3, r4
 8006eb8:	d10e      	bne.n	8006ed8 <_malloc_r+0xcc>
 8006eba:	6032      	str	r2, [r6, #0]
 8006ebc:	0028      	movs	r0, r5
 8006ebe:	f000 f82d 	bl	8006f1c <__malloc_unlock>
 8006ec2:	0020      	movs	r0, r4
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	300b      	adds	r0, #11
 8006ec8:	1d23      	adds	r3, r4, #4
 8006eca:	4390      	bics	r0, r2
 8006ecc:	1ac2      	subs	r2, r0, r3
 8006ece:	4298      	cmp	r0, r3
 8006ed0:	d0df      	beq.n	8006e92 <_malloc_r+0x86>
 8006ed2:	1a1b      	subs	r3, r3, r0
 8006ed4:	50a3      	str	r3, [r4, r2]
 8006ed6:	e7dc      	b.n	8006e92 <_malloc_r+0x86>
 8006ed8:	605a      	str	r2, [r3, #4]
 8006eda:	e7ef      	b.n	8006ebc <_malloc_r+0xb0>
 8006edc:	0023      	movs	r3, r4
 8006ede:	6864      	ldr	r4, [r4, #4]
 8006ee0:	e7a6      	b.n	8006e30 <_malloc_r+0x24>
 8006ee2:	9c00      	ldr	r4, [sp, #0]
 8006ee4:	6863      	ldr	r3, [r4, #4]
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	e7ad      	b.n	8006e46 <_malloc_r+0x3a>
 8006eea:	001a      	movs	r2, r3
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	42a3      	cmp	r3, r4
 8006ef0:	d1fb      	bne.n	8006eea <_malloc_r+0xde>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e7da      	b.n	8006eac <_malloc_r+0xa0>
 8006ef6:	230c      	movs	r3, #12
 8006ef8:	0028      	movs	r0, r5
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	f000 f80e 	bl	8006f1c <__malloc_unlock>
 8006f00:	e7c6      	b.n	8006e90 <_malloc_r+0x84>
 8006f02:	6007      	str	r7, [r0, #0]
 8006f04:	e7da      	b.n	8006ebc <_malloc_r+0xb0>
 8006f06:	46c0      	nop			@ (mov r8, r8)
 8006f08:	200002f8 	.word	0x200002f8

08006f0c <__malloc_lock>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	4802      	ldr	r0, [pc, #8]	@ (8006f18 <__malloc_lock+0xc>)
 8006f10:	f7ff ff0e 	bl	8006d30 <__retarget_lock_acquire_recursive>
 8006f14:	bd10      	pop	{r4, pc}
 8006f16:	46c0      	nop			@ (mov r8, r8)
 8006f18:	200002f0 	.word	0x200002f0

08006f1c <__malloc_unlock>:
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	4802      	ldr	r0, [pc, #8]	@ (8006f28 <__malloc_unlock+0xc>)
 8006f20:	f7ff ff07 	bl	8006d32 <__retarget_lock_release_recursive>
 8006f24:	bd10      	pop	{r4, pc}
 8006f26:	46c0      	nop			@ (mov r8, r8)
 8006f28:	200002f0 	.word	0x200002f0

08006f2c <__ssputs_r>:
 8006f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f2e:	688e      	ldr	r6, [r1, #8]
 8006f30:	b085      	sub	sp, #20
 8006f32:	001f      	movs	r7, r3
 8006f34:	000c      	movs	r4, r1
 8006f36:	680b      	ldr	r3, [r1, #0]
 8006f38:	9002      	str	r0, [sp, #8]
 8006f3a:	9203      	str	r2, [sp, #12]
 8006f3c:	42be      	cmp	r6, r7
 8006f3e:	d830      	bhi.n	8006fa2 <__ssputs_r+0x76>
 8006f40:	210c      	movs	r1, #12
 8006f42:	5e62      	ldrsh	r2, [r4, r1]
 8006f44:	2190      	movs	r1, #144	@ 0x90
 8006f46:	00c9      	lsls	r1, r1, #3
 8006f48:	420a      	tst	r2, r1
 8006f4a:	d028      	beq.n	8006f9e <__ssputs_r+0x72>
 8006f4c:	2003      	movs	r0, #3
 8006f4e:	6921      	ldr	r1, [r4, #16]
 8006f50:	1a5b      	subs	r3, r3, r1
 8006f52:	9301      	str	r3, [sp, #4]
 8006f54:	6963      	ldr	r3, [r4, #20]
 8006f56:	4343      	muls	r3, r0
 8006f58:	9801      	ldr	r0, [sp, #4]
 8006f5a:	0fdd      	lsrs	r5, r3, #31
 8006f5c:	18ed      	adds	r5, r5, r3
 8006f5e:	1c7b      	adds	r3, r7, #1
 8006f60:	181b      	adds	r3, r3, r0
 8006f62:	106d      	asrs	r5, r5, #1
 8006f64:	42ab      	cmp	r3, r5
 8006f66:	d900      	bls.n	8006f6a <__ssputs_r+0x3e>
 8006f68:	001d      	movs	r5, r3
 8006f6a:	0552      	lsls	r2, r2, #21
 8006f6c:	d528      	bpl.n	8006fc0 <__ssputs_r+0x94>
 8006f6e:	0029      	movs	r1, r5
 8006f70:	9802      	ldr	r0, [sp, #8]
 8006f72:	f7ff ff4b 	bl	8006e0c <_malloc_r>
 8006f76:	1e06      	subs	r6, r0, #0
 8006f78:	d02c      	beq.n	8006fd4 <__ssputs_r+0xa8>
 8006f7a:	9a01      	ldr	r2, [sp, #4]
 8006f7c:	6921      	ldr	r1, [r4, #16]
 8006f7e:	f000 fade 	bl	800753e <memcpy>
 8006f82:	89a2      	ldrh	r2, [r4, #12]
 8006f84:	4b18      	ldr	r3, [pc, #96]	@ (8006fe8 <__ssputs_r+0xbc>)
 8006f86:	401a      	ands	r2, r3
 8006f88:	2380      	movs	r3, #128	@ 0x80
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	81a3      	strh	r3, [r4, #12]
 8006f8e:	9b01      	ldr	r3, [sp, #4]
 8006f90:	6126      	str	r6, [r4, #16]
 8006f92:	18f6      	adds	r6, r6, r3
 8006f94:	6026      	str	r6, [r4, #0]
 8006f96:	003e      	movs	r6, r7
 8006f98:	6165      	str	r5, [r4, #20]
 8006f9a:	1aed      	subs	r5, r5, r3
 8006f9c:	60a5      	str	r5, [r4, #8]
 8006f9e:	42be      	cmp	r6, r7
 8006fa0:	d900      	bls.n	8006fa4 <__ssputs_r+0x78>
 8006fa2:	003e      	movs	r6, r7
 8006fa4:	0032      	movs	r2, r6
 8006fa6:	9903      	ldr	r1, [sp, #12]
 8006fa8:	6820      	ldr	r0, [r4, #0]
 8006faa:	f000 fa99 	bl	80074e0 <memmove>
 8006fae:	2000      	movs	r0, #0
 8006fb0:	68a3      	ldr	r3, [r4, #8]
 8006fb2:	1b9b      	subs	r3, r3, r6
 8006fb4:	60a3      	str	r3, [r4, #8]
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	199b      	adds	r3, r3, r6
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	b005      	add	sp, #20
 8006fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc0:	002a      	movs	r2, r5
 8006fc2:	9802      	ldr	r0, [sp, #8]
 8006fc4:	f000 fac4 	bl	8007550 <_realloc_r>
 8006fc8:	1e06      	subs	r6, r0, #0
 8006fca:	d1e0      	bne.n	8006f8e <__ssputs_r+0x62>
 8006fcc:	6921      	ldr	r1, [r4, #16]
 8006fce:	9802      	ldr	r0, [sp, #8]
 8006fd0:	f7ff feb0 	bl	8006d34 <_free_r>
 8006fd4:	230c      	movs	r3, #12
 8006fd6:	2001      	movs	r0, #1
 8006fd8:	9a02      	ldr	r2, [sp, #8]
 8006fda:	4240      	negs	r0, r0
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	89a2      	ldrh	r2, [r4, #12]
 8006fe0:	3334      	adds	r3, #52	@ 0x34
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	81a3      	strh	r3, [r4, #12]
 8006fe6:	e7e9      	b.n	8006fbc <__ssputs_r+0x90>
 8006fe8:	fffffb7f 	.word	0xfffffb7f

08006fec <_svfiprintf_r>:
 8006fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fee:	b0a1      	sub	sp, #132	@ 0x84
 8006ff0:	9003      	str	r0, [sp, #12]
 8006ff2:	001d      	movs	r5, r3
 8006ff4:	898b      	ldrh	r3, [r1, #12]
 8006ff6:	000f      	movs	r7, r1
 8006ff8:	0016      	movs	r6, r2
 8006ffa:	061b      	lsls	r3, r3, #24
 8006ffc:	d511      	bpl.n	8007022 <_svfiprintf_r+0x36>
 8006ffe:	690b      	ldr	r3, [r1, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10e      	bne.n	8007022 <_svfiprintf_r+0x36>
 8007004:	2140      	movs	r1, #64	@ 0x40
 8007006:	f7ff ff01 	bl	8006e0c <_malloc_r>
 800700a:	6038      	str	r0, [r7, #0]
 800700c:	6138      	str	r0, [r7, #16]
 800700e:	2800      	cmp	r0, #0
 8007010:	d105      	bne.n	800701e <_svfiprintf_r+0x32>
 8007012:	230c      	movs	r3, #12
 8007014:	9a03      	ldr	r2, [sp, #12]
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	2001      	movs	r0, #1
 800701a:	4240      	negs	r0, r0
 800701c:	e0cf      	b.n	80071be <_svfiprintf_r+0x1d2>
 800701e:	2340      	movs	r3, #64	@ 0x40
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	2300      	movs	r3, #0
 8007024:	ac08      	add	r4, sp, #32
 8007026:	6163      	str	r3, [r4, #20]
 8007028:	3320      	adds	r3, #32
 800702a:	7663      	strb	r3, [r4, #25]
 800702c:	3310      	adds	r3, #16
 800702e:	76a3      	strb	r3, [r4, #26]
 8007030:	9507      	str	r5, [sp, #28]
 8007032:	0035      	movs	r5, r6
 8007034:	782b      	ldrb	r3, [r5, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <_svfiprintf_r+0x52>
 800703a:	2b25      	cmp	r3, #37	@ 0x25
 800703c:	d148      	bne.n	80070d0 <_svfiprintf_r+0xe4>
 800703e:	1bab      	subs	r3, r5, r6
 8007040:	9305      	str	r3, [sp, #20]
 8007042:	42b5      	cmp	r5, r6
 8007044:	d00b      	beq.n	800705e <_svfiprintf_r+0x72>
 8007046:	0032      	movs	r2, r6
 8007048:	0039      	movs	r1, r7
 800704a:	9803      	ldr	r0, [sp, #12]
 800704c:	f7ff ff6e 	bl	8006f2c <__ssputs_r>
 8007050:	3001      	adds	r0, #1
 8007052:	d100      	bne.n	8007056 <_svfiprintf_r+0x6a>
 8007054:	e0ae      	b.n	80071b4 <_svfiprintf_r+0x1c8>
 8007056:	6963      	ldr	r3, [r4, #20]
 8007058:	9a05      	ldr	r2, [sp, #20]
 800705a:	189b      	adds	r3, r3, r2
 800705c:	6163      	str	r3, [r4, #20]
 800705e:	782b      	ldrb	r3, [r5, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d100      	bne.n	8007066 <_svfiprintf_r+0x7a>
 8007064:	e0a6      	b.n	80071b4 <_svfiprintf_r+0x1c8>
 8007066:	2201      	movs	r2, #1
 8007068:	2300      	movs	r3, #0
 800706a:	4252      	negs	r2, r2
 800706c:	6062      	str	r2, [r4, #4]
 800706e:	a904      	add	r1, sp, #16
 8007070:	3254      	adds	r2, #84	@ 0x54
 8007072:	1852      	adds	r2, r2, r1
 8007074:	1c6e      	adds	r6, r5, #1
 8007076:	6023      	str	r3, [r4, #0]
 8007078:	60e3      	str	r3, [r4, #12]
 800707a:	60a3      	str	r3, [r4, #8]
 800707c:	7013      	strb	r3, [r2, #0]
 800707e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007080:	4b54      	ldr	r3, [pc, #336]	@ (80071d4 <_svfiprintf_r+0x1e8>)
 8007082:	2205      	movs	r2, #5
 8007084:	0018      	movs	r0, r3
 8007086:	7831      	ldrb	r1, [r6, #0]
 8007088:	9305      	str	r3, [sp, #20]
 800708a:	f000 fa4d 	bl	8007528 <memchr>
 800708e:	1c75      	adds	r5, r6, #1
 8007090:	2800      	cmp	r0, #0
 8007092:	d11f      	bne.n	80070d4 <_svfiprintf_r+0xe8>
 8007094:	6822      	ldr	r2, [r4, #0]
 8007096:	06d3      	lsls	r3, r2, #27
 8007098:	d504      	bpl.n	80070a4 <_svfiprintf_r+0xb8>
 800709a:	2353      	movs	r3, #83	@ 0x53
 800709c:	a904      	add	r1, sp, #16
 800709e:	185b      	adds	r3, r3, r1
 80070a0:	2120      	movs	r1, #32
 80070a2:	7019      	strb	r1, [r3, #0]
 80070a4:	0713      	lsls	r3, r2, #28
 80070a6:	d504      	bpl.n	80070b2 <_svfiprintf_r+0xc6>
 80070a8:	2353      	movs	r3, #83	@ 0x53
 80070aa:	a904      	add	r1, sp, #16
 80070ac:	185b      	adds	r3, r3, r1
 80070ae:	212b      	movs	r1, #43	@ 0x2b
 80070b0:	7019      	strb	r1, [r3, #0]
 80070b2:	7833      	ldrb	r3, [r6, #0]
 80070b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80070b6:	d016      	beq.n	80070e6 <_svfiprintf_r+0xfa>
 80070b8:	0035      	movs	r5, r6
 80070ba:	2100      	movs	r1, #0
 80070bc:	200a      	movs	r0, #10
 80070be:	68e3      	ldr	r3, [r4, #12]
 80070c0:	782a      	ldrb	r2, [r5, #0]
 80070c2:	1c6e      	adds	r6, r5, #1
 80070c4:	3a30      	subs	r2, #48	@ 0x30
 80070c6:	2a09      	cmp	r2, #9
 80070c8:	d950      	bls.n	800716c <_svfiprintf_r+0x180>
 80070ca:	2900      	cmp	r1, #0
 80070cc:	d111      	bne.n	80070f2 <_svfiprintf_r+0x106>
 80070ce:	e017      	b.n	8007100 <_svfiprintf_r+0x114>
 80070d0:	3501      	adds	r5, #1
 80070d2:	e7af      	b.n	8007034 <_svfiprintf_r+0x48>
 80070d4:	9b05      	ldr	r3, [sp, #20]
 80070d6:	6822      	ldr	r2, [r4, #0]
 80070d8:	1ac0      	subs	r0, r0, r3
 80070da:	2301      	movs	r3, #1
 80070dc:	4083      	lsls	r3, r0
 80070de:	4313      	orrs	r3, r2
 80070e0:	002e      	movs	r6, r5
 80070e2:	6023      	str	r3, [r4, #0]
 80070e4:	e7cc      	b.n	8007080 <_svfiprintf_r+0x94>
 80070e6:	9b07      	ldr	r3, [sp, #28]
 80070e8:	1d19      	adds	r1, r3, #4
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	9107      	str	r1, [sp, #28]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	db01      	blt.n	80070f6 <_svfiprintf_r+0x10a>
 80070f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070f4:	e004      	b.n	8007100 <_svfiprintf_r+0x114>
 80070f6:	425b      	negs	r3, r3
 80070f8:	60e3      	str	r3, [r4, #12]
 80070fa:	2302      	movs	r3, #2
 80070fc:	4313      	orrs	r3, r2
 80070fe:	6023      	str	r3, [r4, #0]
 8007100:	782b      	ldrb	r3, [r5, #0]
 8007102:	2b2e      	cmp	r3, #46	@ 0x2e
 8007104:	d10c      	bne.n	8007120 <_svfiprintf_r+0x134>
 8007106:	786b      	ldrb	r3, [r5, #1]
 8007108:	2b2a      	cmp	r3, #42	@ 0x2a
 800710a:	d134      	bne.n	8007176 <_svfiprintf_r+0x18a>
 800710c:	9b07      	ldr	r3, [sp, #28]
 800710e:	3502      	adds	r5, #2
 8007110:	1d1a      	adds	r2, r3, #4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	9207      	str	r2, [sp, #28]
 8007116:	2b00      	cmp	r3, #0
 8007118:	da01      	bge.n	800711e <_svfiprintf_r+0x132>
 800711a:	2301      	movs	r3, #1
 800711c:	425b      	negs	r3, r3
 800711e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007120:	4e2d      	ldr	r6, [pc, #180]	@ (80071d8 <_svfiprintf_r+0x1ec>)
 8007122:	2203      	movs	r2, #3
 8007124:	0030      	movs	r0, r6
 8007126:	7829      	ldrb	r1, [r5, #0]
 8007128:	f000 f9fe 	bl	8007528 <memchr>
 800712c:	2800      	cmp	r0, #0
 800712e:	d006      	beq.n	800713e <_svfiprintf_r+0x152>
 8007130:	2340      	movs	r3, #64	@ 0x40
 8007132:	1b80      	subs	r0, r0, r6
 8007134:	4083      	lsls	r3, r0
 8007136:	6822      	ldr	r2, [r4, #0]
 8007138:	3501      	adds	r5, #1
 800713a:	4313      	orrs	r3, r2
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	7829      	ldrb	r1, [r5, #0]
 8007140:	2206      	movs	r2, #6
 8007142:	4826      	ldr	r0, [pc, #152]	@ (80071dc <_svfiprintf_r+0x1f0>)
 8007144:	1c6e      	adds	r6, r5, #1
 8007146:	7621      	strb	r1, [r4, #24]
 8007148:	f000 f9ee 	bl	8007528 <memchr>
 800714c:	2800      	cmp	r0, #0
 800714e:	d038      	beq.n	80071c2 <_svfiprintf_r+0x1d6>
 8007150:	4b23      	ldr	r3, [pc, #140]	@ (80071e0 <_svfiprintf_r+0x1f4>)
 8007152:	2b00      	cmp	r3, #0
 8007154:	d122      	bne.n	800719c <_svfiprintf_r+0x1b0>
 8007156:	2207      	movs	r2, #7
 8007158:	9b07      	ldr	r3, [sp, #28]
 800715a:	3307      	adds	r3, #7
 800715c:	4393      	bics	r3, r2
 800715e:	3308      	adds	r3, #8
 8007160:	9307      	str	r3, [sp, #28]
 8007162:	6963      	ldr	r3, [r4, #20]
 8007164:	9a04      	ldr	r2, [sp, #16]
 8007166:	189b      	adds	r3, r3, r2
 8007168:	6163      	str	r3, [r4, #20]
 800716a:	e762      	b.n	8007032 <_svfiprintf_r+0x46>
 800716c:	4343      	muls	r3, r0
 800716e:	0035      	movs	r5, r6
 8007170:	2101      	movs	r1, #1
 8007172:	189b      	adds	r3, r3, r2
 8007174:	e7a4      	b.n	80070c0 <_svfiprintf_r+0xd4>
 8007176:	2300      	movs	r3, #0
 8007178:	200a      	movs	r0, #10
 800717a:	0019      	movs	r1, r3
 800717c:	3501      	adds	r5, #1
 800717e:	6063      	str	r3, [r4, #4]
 8007180:	782a      	ldrb	r2, [r5, #0]
 8007182:	1c6e      	adds	r6, r5, #1
 8007184:	3a30      	subs	r2, #48	@ 0x30
 8007186:	2a09      	cmp	r2, #9
 8007188:	d903      	bls.n	8007192 <_svfiprintf_r+0x1a6>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0c8      	beq.n	8007120 <_svfiprintf_r+0x134>
 800718e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007190:	e7c6      	b.n	8007120 <_svfiprintf_r+0x134>
 8007192:	4341      	muls	r1, r0
 8007194:	0035      	movs	r5, r6
 8007196:	2301      	movs	r3, #1
 8007198:	1889      	adds	r1, r1, r2
 800719a:	e7f1      	b.n	8007180 <_svfiprintf_r+0x194>
 800719c:	aa07      	add	r2, sp, #28
 800719e:	9200      	str	r2, [sp, #0]
 80071a0:	0021      	movs	r1, r4
 80071a2:	003a      	movs	r2, r7
 80071a4:	4b0f      	ldr	r3, [pc, #60]	@ (80071e4 <_svfiprintf_r+0x1f8>)
 80071a6:	9803      	ldr	r0, [sp, #12]
 80071a8:	e000      	b.n	80071ac <_svfiprintf_r+0x1c0>
 80071aa:	bf00      	nop
 80071ac:	9004      	str	r0, [sp, #16]
 80071ae:	9b04      	ldr	r3, [sp, #16]
 80071b0:	3301      	adds	r3, #1
 80071b2:	d1d6      	bne.n	8007162 <_svfiprintf_r+0x176>
 80071b4:	89bb      	ldrh	r3, [r7, #12]
 80071b6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80071b8:	065b      	lsls	r3, r3, #25
 80071ba:	d500      	bpl.n	80071be <_svfiprintf_r+0x1d2>
 80071bc:	e72c      	b.n	8007018 <_svfiprintf_r+0x2c>
 80071be:	b021      	add	sp, #132	@ 0x84
 80071c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c2:	aa07      	add	r2, sp, #28
 80071c4:	9200      	str	r2, [sp, #0]
 80071c6:	0021      	movs	r1, r4
 80071c8:	003a      	movs	r2, r7
 80071ca:	4b06      	ldr	r3, [pc, #24]	@ (80071e4 <_svfiprintf_r+0x1f8>)
 80071cc:	9803      	ldr	r0, [sp, #12]
 80071ce:	f000 f87b 	bl	80072c8 <_printf_i>
 80071d2:	e7eb      	b.n	80071ac <_svfiprintf_r+0x1c0>
 80071d4:	08007bb8 	.word	0x08007bb8
 80071d8:	08007bbe 	.word	0x08007bbe
 80071dc:	08007bc2 	.word	0x08007bc2
 80071e0:	00000000 	.word	0x00000000
 80071e4:	08006f2d 	.word	0x08006f2d

080071e8 <_printf_common>:
 80071e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ea:	0016      	movs	r6, r2
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	688a      	ldr	r2, [r1, #8]
 80071f0:	690b      	ldr	r3, [r1, #16]
 80071f2:	000c      	movs	r4, r1
 80071f4:	9000      	str	r0, [sp, #0]
 80071f6:	4293      	cmp	r3, r2
 80071f8:	da00      	bge.n	80071fc <_printf_common+0x14>
 80071fa:	0013      	movs	r3, r2
 80071fc:	0022      	movs	r2, r4
 80071fe:	6033      	str	r3, [r6, #0]
 8007200:	3243      	adds	r2, #67	@ 0x43
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	2a00      	cmp	r2, #0
 8007206:	d001      	beq.n	800720c <_printf_common+0x24>
 8007208:	3301      	adds	r3, #1
 800720a:	6033      	str	r3, [r6, #0]
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	069b      	lsls	r3, r3, #26
 8007210:	d502      	bpl.n	8007218 <_printf_common+0x30>
 8007212:	6833      	ldr	r3, [r6, #0]
 8007214:	3302      	adds	r3, #2
 8007216:	6033      	str	r3, [r6, #0]
 8007218:	6822      	ldr	r2, [r4, #0]
 800721a:	2306      	movs	r3, #6
 800721c:	0015      	movs	r5, r2
 800721e:	401d      	ands	r5, r3
 8007220:	421a      	tst	r2, r3
 8007222:	d027      	beq.n	8007274 <_printf_common+0x8c>
 8007224:	0023      	movs	r3, r4
 8007226:	3343      	adds	r3, #67	@ 0x43
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	1e5a      	subs	r2, r3, #1
 800722c:	4193      	sbcs	r3, r2
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	0692      	lsls	r2, r2, #26
 8007232:	d430      	bmi.n	8007296 <_printf_common+0xae>
 8007234:	0022      	movs	r2, r4
 8007236:	9901      	ldr	r1, [sp, #4]
 8007238:	9800      	ldr	r0, [sp, #0]
 800723a:	9d08      	ldr	r5, [sp, #32]
 800723c:	3243      	adds	r2, #67	@ 0x43
 800723e:	47a8      	blx	r5
 8007240:	3001      	adds	r0, #1
 8007242:	d025      	beq.n	8007290 <_printf_common+0xa8>
 8007244:	2206      	movs	r2, #6
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	2500      	movs	r5, #0
 800724a:	4013      	ands	r3, r2
 800724c:	2b04      	cmp	r3, #4
 800724e:	d105      	bne.n	800725c <_printf_common+0x74>
 8007250:	6833      	ldr	r3, [r6, #0]
 8007252:	68e5      	ldr	r5, [r4, #12]
 8007254:	1aed      	subs	r5, r5, r3
 8007256:	43eb      	mvns	r3, r5
 8007258:	17db      	asrs	r3, r3, #31
 800725a:	401d      	ands	r5, r3
 800725c:	68a3      	ldr	r3, [r4, #8]
 800725e:	6922      	ldr	r2, [r4, #16]
 8007260:	4293      	cmp	r3, r2
 8007262:	dd01      	ble.n	8007268 <_printf_common+0x80>
 8007264:	1a9b      	subs	r3, r3, r2
 8007266:	18ed      	adds	r5, r5, r3
 8007268:	2600      	movs	r6, #0
 800726a:	42b5      	cmp	r5, r6
 800726c:	d120      	bne.n	80072b0 <_printf_common+0xc8>
 800726e:	2000      	movs	r0, #0
 8007270:	e010      	b.n	8007294 <_printf_common+0xac>
 8007272:	3501      	adds	r5, #1
 8007274:	68e3      	ldr	r3, [r4, #12]
 8007276:	6832      	ldr	r2, [r6, #0]
 8007278:	1a9b      	subs	r3, r3, r2
 800727a:	42ab      	cmp	r3, r5
 800727c:	ddd2      	ble.n	8007224 <_printf_common+0x3c>
 800727e:	0022      	movs	r2, r4
 8007280:	2301      	movs	r3, #1
 8007282:	9901      	ldr	r1, [sp, #4]
 8007284:	9800      	ldr	r0, [sp, #0]
 8007286:	9f08      	ldr	r7, [sp, #32]
 8007288:	3219      	adds	r2, #25
 800728a:	47b8      	blx	r7
 800728c:	3001      	adds	r0, #1
 800728e:	d1f0      	bne.n	8007272 <_printf_common+0x8a>
 8007290:	2001      	movs	r0, #1
 8007292:	4240      	negs	r0, r0
 8007294:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007296:	2030      	movs	r0, #48	@ 0x30
 8007298:	18e1      	adds	r1, r4, r3
 800729a:	3143      	adds	r1, #67	@ 0x43
 800729c:	7008      	strb	r0, [r1, #0]
 800729e:	0021      	movs	r1, r4
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	3145      	adds	r1, #69	@ 0x45
 80072a4:	7809      	ldrb	r1, [r1, #0]
 80072a6:	18a2      	adds	r2, r4, r2
 80072a8:	3243      	adds	r2, #67	@ 0x43
 80072aa:	3302      	adds	r3, #2
 80072ac:	7011      	strb	r1, [r2, #0]
 80072ae:	e7c1      	b.n	8007234 <_printf_common+0x4c>
 80072b0:	0022      	movs	r2, r4
 80072b2:	2301      	movs	r3, #1
 80072b4:	9901      	ldr	r1, [sp, #4]
 80072b6:	9800      	ldr	r0, [sp, #0]
 80072b8:	9f08      	ldr	r7, [sp, #32]
 80072ba:	321a      	adds	r2, #26
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	d0e6      	beq.n	8007290 <_printf_common+0xa8>
 80072c2:	3601      	adds	r6, #1
 80072c4:	e7d1      	b.n	800726a <_printf_common+0x82>
	...

080072c8 <_printf_i>:
 80072c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ca:	b08b      	sub	sp, #44	@ 0x2c
 80072cc:	9206      	str	r2, [sp, #24]
 80072ce:	000a      	movs	r2, r1
 80072d0:	3243      	adds	r2, #67	@ 0x43
 80072d2:	9307      	str	r3, [sp, #28]
 80072d4:	9005      	str	r0, [sp, #20]
 80072d6:	9203      	str	r2, [sp, #12]
 80072d8:	7e0a      	ldrb	r2, [r1, #24]
 80072da:	000c      	movs	r4, r1
 80072dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072de:	2a78      	cmp	r2, #120	@ 0x78
 80072e0:	d809      	bhi.n	80072f6 <_printf_i+0x2e>
 80072e2:	2a62      	cmp	r2, #98	@ 0x62
 80072e4:	d80b      	bhi.n	80072fe <_printf_i+0x36>
 80072e6:	2a00      	cmp	r2, #0
 80072e8:	d100      	bne.n	80072ec <_printf_i+0x24>
 80072ea:	e0ba      	b.n	8007462 <_printf_i+0x19a>
 80072ec:	497a      	ldr	r1, [pc, #488]	@ (80074d8 <_printf_i+0x210>)
 80072ee:	9104      	str	r1, [sp, #16]
 80072f0:	2a58      	cmp	r2, #88	@ 0x58
 80072f2:	d100      	bne.n	80072f6 <_printf_i+0x2e>
 80072f4:	e08e      	b.n	8007414 <_printf_i+0x14c>
 80072f6:	0025      	movs	r5, r4
 80072f8:	3542      	adds	r5, #66	@ 0x42
 80072fa:	702a      	strb	r2, [r5, #0]
 80072fc:	e022      	b.n	8007344 <_printf_i+0x7c>
 80072fe:	0010      	movs	r0, r2
 8007300:	3863      	subs	r0, #99	@ 0x63
 8007302:	2815      	cmp	r0, #21
 8007304:	d8f7      	bhi.n	80072f6 <_printf_i+0x2e>
 8007306:	f7f8 ff07 	bl	8000118 <__gnu_thumb1_case_shi>
 800730a:	0016      	.short	0x0016
 800730c:	fff6001f 	.word	0xfff6001f
 8007310:	fff6fff6 	.word	0xfff6fff6
 8007314:	001ffff6 	.word	0x001ffff6
 8007318:	fff6fff6 	.word	0xfff6fff6
 800731c:	fff6fff6 	.word	0xfff6fff6
 8007320:	0036009f 	.word	0x0036009f
 8007324:	fff6007e 	.word	0xfff6007e
 8007328:	00b0fff6 	.word	0x00b0fff6
 800732c:	0036fff6 	.word	0x0036fff6
 8007330:	fff6fff6 	.word	0xfff6fff6
 8007334:	0082      	.short	0x0082
 8007336:	0025      	movs	r5, r4
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	3542      	adds	r5, #66	@ 0x42
 800733c:	1d11      	adds	r1, r2, #4
 800733e:	6019      	str	r1, [r3, #0]
 8007340:	6813      	ldr	r3, [r2, #0]
 8007342:	702b      	strb	r3, [r5, #0]
 8007344:	2301      	movs	r3, #1
 8007346:	e09e      	b.n	8007486 <_printf_i+0x1be>
 8007348:	6818      	ldr	r0, [r3, #0]
 800734a:	6809      	ldr	r1, [r1, #0]
 800734c:	1d02      	adds	r2, r0, #4
 800734e:	060d      	lsls	r5, r1, #24
 8007350:	d50b      	bpl.n	800736a <_printf_i+0xa2>
 8007352:	6806      	ldr	r6, [r0, #0]
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	2e00      	cmp	r6, #0
 8007358:	da03      	bge.n	8007362 <_printf_i+0x9a>
 800735a:	232d      	movs	r3, #45	@ 0x2d
 800735c:	9a03      	ldr	r2, [sp, #12]
 800735e:	4276      	negs	r6, r6
 8007360:	7013      	strb	r3, [r2, #0]
 8007362:	4b5d      	ldr	r3, [pc, #372]	@ (80074d8 <_printf_i+0x210>)
 8007364:	270a      	movs	r7, #10
 8007366:	9304      	str	r3, [sp, #16]
 8007368:	e018      	b.n	800739c <_printf_i+0xd4>
 800736a:	6806      	ldr	r6, [r0, #0]
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	0649      	lsls	r1, r1, #25
 8007370:	d5f1      	bpl.n	8007356 <_printf_i+0x8e>
 8007372:	b236      	sxth	r6, r6
 8007374:	e7ef      	b.n	8007356 <_printf_i+0x8e>
 8007376:	6808      	ldr	r0, [r1, #0]
 8007378:	6819      	ldr	r1, [r3, #0]
 800737a:	c940      	ldmia	r1!, {r6}
 800737c:	0605      	lsls	r5, r0, #24
 800737e:	d402      	bmi.n	8007386 <_printf_i+0xbe>
 8007380:	0640      	lsls	r0, r0, #25
 8007382:	d500      	bpl.n	8007386 <_printf_i+0xbe>
 8007384:	b2b6      	uxth	r6, r6
 8007386:	6019      	str	r1, [r3, #0]
 8007388:	4b53      	ldr	r3, [pc, #332]	@ (80074d8 <_printf_i+0x210>)
 800738a:	270a      	movs	r7, #10
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	2a6f      	cmp	r2, #111	@ 0x6f
 8007390:	d100      	bne.n	8007394 <_printf_i+0xcc>
 8007392:	3f02      	subs	r7, #2
 8007394:	0023      	movs	r3, r4
 8007396:	2200      	movs	r2, #0
 8007398:	3343      	adds	r3, #67	@ 0x43
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	6863      	ldr	r3, [r4, #4]
 800739e:	60a3      	str	r3, [r4, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	db06      	blt.n	80073b2 <_printf_i+0xea>
 80073a4:	2104      	movs	r1, #4
 80073a6:	6822      	ldr	r2, [r4, #0]
 80073a8:	9d03      	ldr	r5, [sp, #12]
 80073aa:	438a      	bics	r2, r1
 80073ac:	6022      	str	r2, [r4, #0]
 80073ae:	4333      	orrs	r3, r6
 80073b0:	d00c      	beq.n	80073cc <_printf_i+0x104>
 80073b2:	9d03      	ldr	r5, [sp, #12]
 80073b4:	0030      	movs	r0, r6
 80073b6:	0039      	movs	r1, r7
 80073b8:	f7f8 ff3e 	bl	8000238 <__aeabi_uidivmod>
 80073bc:	9b04      	ldr	r3, [sp, #16]
 80073be:	3d01      	subs	r5, #1
 80073c0:	5c5b      	ldrb	r3, [r3, r1]
 80073c2:	702b      	strb	r3, [r5, #0]
 80073c4:	0033      	movs	r3, r6
 80073c6:	0006      	movs	r6, r0
 80073c8:	429f      	cmp	r7, r3
 80073ca:	d9f3      	bls.n	80073b4 <_printf_i+0xec>
 80073cc:	2f08      	cmp	r7, #8
 80073ce:	d109      	bne.n	80073e4 <_printf_i+0x11c>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	07db      	lsls	r3, r3, #31
 80073d4:	d506      	bpl.n	80073e4 <_printf_i+0x11c>
 80073d6:	6862      	ldr	r2, [r4, #4]
 80073d8:	6923      	ldr	r3, [r4, #16]
 80073da:	429a      	cmp	r2, r3
 80073dc:	dc02      	bgt.n	80073e4 <_printf_i+0x11c>
 80073de:	2330      	movs	r3, #48	@ 0x30
 80073e0:	3d01      	subs	r5, #1
 80073e2:	702b      	strb	r3, [r5, #0]
 80073e4:	9b03      	ldr	r3, [sp, #12]
 80073e6:	1b5b      	subs	r3, r3, r5
 80073e8:	6123      	str	r3, [r4, #16]
 80073ea:	9b07      	ldr	r3, [sp, #28]
 80073ec:	0021      	movs	r1, r4
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	9805      	ldr	r0, [sp, #20]
 80073f2:	9b06      	ldr	r3, [sp, #24]
 80073f4:	aa09      	add	r2, sp, #36	@ 0x24
 80073f6:	f7ff fef7 	bl	80071e8 <_printf_common>
 80073fa:	3001      	adds	r0, #1
 80073fc:	d148      	bne.n	8007490 <_printf_i+0x1c8>
 80073fe:	2001      	movs	r0, #1
 8007400:	4240      	negs	r0, r0
 8007402:	b00b      	add	sp, #44	@ 0x2c
 8007404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007406:	2220      	movs	r2, #32
 8007408:	6809      	ldr	r1, [r1, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	6022      	str	r2, [r4, #0]
 800740e:	2278      	movs	r2, #120	@ 0x78
 8007410:	4932      	ldr	r1, [pc, #200]	@ (80074dc <_printf_i+0x214>)
 8007412:	9104      	str	r1, [sp, #16]
 8007414:	0021      	movs	r1, r4
 8007416:	3145      	adds	r1, #69	@ 0x45
 8007418:	700a      	strb	r2, [r1, #0]
 800741a:	6819      	ldr	r1, [r3, #0]
 800741c:	6822      	ldr	r2, [r4, #0]
 800741e:	c940      	ldmia	r1!, {r6}
 8007420:	0610      	lsls	r0, r2, #24
 8007422:	d402      	bmi.n	800742a <_printf_i+0x162>
 8007424:	0650      	lsls	r0, r2, #25
 8007426:	d500      	bpl.n	800742a <_printf_i+0x162>
 8007428:	b2b6      	uxth	r6, r6
 800742a:	6019      	str	r1, [r3, #0]
 800742c:	07d3      	lsls	r3, r2, #31
 800742e:	d502      	bpl.n	8007436 <_printf_i+0x16e>
 8007430:	2320      	movs	r3, #32
 8007432:	4313      	orrs	r3, r2
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	2e00      	cmp	r6, #0
 8007438:	d001      	beq.n	800743e <_printf_i+0x176>
 800743a:	2710      	movs	r7, #16
 800743c:	e7aa      	b.n	8007394 <_printf_i+0xcc>
 800743e:	2220      	movs	r2, #32
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	4393      	bics	r3, r2
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	e7f8      	b.n	800743a <_printf_i+0x172>
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	680d      	ldr	r5, [r1, #0]
 800744c:	1d10      	adds	r0, r2, #4
 800744e:	6949      	ldr	r1, [r1, #20]
 8007450:	6018      	str	r0, [r3, #0]
 8007452:	6813      	ldr	r3, [r2, #0]
 8007454:	062e      	lsls	r6, r5, #24
 8007456:	d501      	bpl.n	800745c <_printf_i+0x194>
 8007458:	6019      	str	r1, [r3, #0]
 800745a:	e002      	b.n	8007462 <_printf_i+0x19a>
 800745c:	066d      	lsls	r5, r5, #25
 800745e:	d5fb      	bpl.n	8007458 <_printf_i+0x190>
 8007460:	8019      	strh	r1, [r3, #0]
 8007462:	2300      	movs	r3, #0
 8007464:	9d03      	ldr	r5, [sp, #12]
 8007466:	6123      	str	r3, [r4, #16]
 8007468:	e7bf      	b.n	80073ea <_printf_i+0x122>
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	1d11      	adds	r1, r2, #4
 800746e:	6019      	str	r1, [r3, #0]
 8007470:	6815      	ldr	r5, [r2, #0]
 8007472:	2100      	movs	r1, #0
 8007474:	0028      	movs	r0, r5
 8007476:	6862      	ldr	r2, [r4, #4]
 8007478:	f000 f856 	bl	8007528 <memchr>
 800747c:	2800      	cmp	r0, #0
 800747e:	d001      	beq.n	8007484 <_printf_i+0x1bc>
 8007480:	1b40      	subs	r0, r0, r5
 8007482:	6060      	str	r0, [r4, #4]
 8007484:	6863      	ldr	r3, [r4, #4]
 8007486:	6123      	str	r3, [r4, #16]
 8007488:	2300      	movs	r3, #0
 800748a:	9a03      	ldr	r2, [sp, #12]
 800748c:	7013      	strb	r3, [r2, #0]
 800748e:	e7ac      	b.n	80073ea <_printf_i+0x122>
 8007490:	002a      	movs	r2, r5
 8007492:	6923      	ldr	r3, [r4, #16]
 8007494:	9906      	ldr	r1, [sp, #24]
 8007496:	9805      	ldr	r0, [sp, #20]
 8007498:	9d07      	ldr	r5, [sp, #28]
 800749a:	47a8      	blx	r5
 800749c:	3001      	adds	r0, #1
 800749e:	d0ae      	beq.n	80073fe <_printf_i+0x136>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	079b      	lsls	r3, r3, #30
 80074a4:	d415      	bmi.n	80074d2 <_printf_i+0x20a>
 80074a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a8:	68e0      	ldr	r0, [r4, #12]
 80074aa:	4298      	cmp	r0, r3
 80074ac:	daa9      	bge.n	8007402 <_printf_i+0x13a>
 80074ae:	0018      	movs	r0, r3
 80074b0:	e7a7      	b.n	8007402 <_printf_i+0x13a>
 80074b2:	0022      	movs	r2, r4
 80074b4:	2301      	movs	r3, #1
 80074b6:	9906      	ldr	r1, [sp, #24]
 80074b8:	9805      	ldr	r0, [sp, #20]
 80074ba:	9e07      	ldr	r6, [sp, #28]
 80074bc:	3219      	adds	r2, #25
 80074be:	47b0      	blx	r6
 80074c0:	3001      	adds	r0, #1
 80074c2:	d09c      	beq.n	80073fe <_printf_i+0x136>
 80074c4:	3501      	adds	r5, #1
 80074c6:	68e3      	ldr	r3, [r4, #12]
 80074c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074ca:	1a9b      	subs	r3, r3, r2
 80074cc:	42ab      	cmp	r3, r5
 80074ce:	dcf0      	bgt.n	80074b2 <_printf_i+0x1ea>
 80074d0:	e7e9      	b.n	80074a6 <_printf_i+0x1de>
 80074d2:	2500      	movs	r5, #0
 80074d4:	e7f7      	b.n	80074c6 <_printf_i+0x1fe>
 80074d6:	46c0      	nop			@ (mov r8, r8)
 80074d8:	08007bc9 	.word	0x08007bc9
 80074dc:	08007bda 	.word	0x08007bda

080074e0 <memmove>:
 80074e0:	b510      	push	{r4, lr}
 80074e2:	4288      	cmp	r0, r1
 80074e4:	d902      	bls.n	80074ec <memmove+0xc>
 80074e6:	188b      	adds	r3, r1, r2
 80074e8:	4298      	cmp	r0, r3
 80074ea:	d308      	bcc.n	80074fe <memmove+0x1e>
 80074ec:	2300      	movs	r3, #0
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d007      	beq.n	8007502 <memmove+0x22>
 80074f2:	5ccc      	ldrb	r4, [r1, r3]
 80074f4:	54c4      	strb	r4, [r0, r3]
 80074f6:	3301      	adds	r3, #1
 80074f8:	e7f9      	b.n	80074ee <memmove+0xe>
 80074fa:	5c8b      	ldrb	r3, [r1, r2]
 80074fc:	5483      	strb	r3, [r0, r2]
 80074fe:	3a01      	subs	r2, #1
 8007500:	d2fb      	bcs.n	80074fa <memmove+0x1a>
 8007502:	bd10      	pop	{r4, pc}

08007504 <_sbrk_r>:
 8007504:	2300      	movs	r3, #0
 8007506:	b570      	push	{r4, r5, r6, lr}
 8007508:	4d06      	ldr	r5, [pc, #24]	@ (8007524 <_sbrk_r+0x20>)
 800750a:	0004      	movs	r4, r0
 800750c:	0008      	movs	r0, r1
 800750e:	602b      	str	r3, [r5, #0]
 8007510:	f7fc fda8 	bl	8004064 <_sbrk>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d103      	bne.n	8007520 <_sbrk_r+0x1c>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d000      	beq.n	8007520 <_sbrk_r+0x1c>
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	bd70      	pop	{r4, r5, r6, pc}
 8007522:	46c0      	nop			@ (mov r8, r8)
 8007524:	200002ec 	.word	0x200002ec

08007528 <memchr>:
 8007528:	b2c9      	uxtb	r1, r1
 800752a:	1882      	adds	r2, r0, r2
 800752c:	4290      	cmp	r0, r2
 800752e:	d101      	bne.n	8007534 <memchr+0xc>
 8007530:	2000      	movs	r0, #0
 8007532:	4770      	bx	lr
 8007534:	7803      	ldrb	r3, [r0, #0]
 8007536:	428b      	cmp	r3, r1
 8007538:	d0fb      	beq.n	8007532 <memchr+0xa>
 800753a:	3001      	adds	r0, #1
 800753c:	e7f6      	b.n	800752c <memchr+0x4>

0800753e <memcpy>:
 800753e:	2300      	movs	r3, #0
 8007540:	b510      	push	{r4, lr}
 8007542:	429a      	cmp	r2, r3
 8007544:	d100      	bne.n	8007548 <memcpy+0xa>
 8007546:	bd10      	pop	{r4, pc}
 8007548:	5ccc      	ldrb	r4, [r1, r3]
 800754a:	54c4      	strb	r4, [r0, r3]
 800754c:	3301      	adds	r3, #1
 800754e:	e7f8      	b.n	8007542 <memcpy+0x4>

08007550 <_realloc_r>:
 8007550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007552:	0006      	movs	r6, r0
 8007554:	000c      	movs	r4, r1
 8007556:	0015      	movs	r5, r2
 8007558:	2900      	cmp	r1, #0
 800755a:	d105      	bne.n	8007568 <_realloc_r+0x18>
 800755c:	0011      	movs	r1, r2
 800755e:	f7ff fc55 	bl	8006e0c <_malloc_r>
 8007562:	0004      	movs	r4, r0
 8007564:	0020      	movs	r0, r4
 8007566:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007568:	2a00      	cmp	r2, #0
 800756a:	d103      	bne.n	8007574 <_realloc_r+0x24>
 800756c:	f7ff fbe2 	bl	8006d34 <_free_r>
 8007570:	002c      	movs	r4, r5
 8007572:	e7f7      	b.n	8007564 <_realloc_r+0x14>
 8007574:	f000 f81c 	bl	80075b0 <_malloc_usable_size_r>
 8007578:	0007      	movs	r7, r0
 800757a:	4285      	cmp	r5, r0
 800757c:	d802      	bhi.n	8007584 <_realloc_r+0x34>
 800757e:	0843      	lsrs	r3, r0, #1
 8007580:	42ab      	cmp	r3, r5
 8007582:	d3ef      	bcc.n	8007564 <_realloc_r+0x14>
 8007584:	0029      	movs	r1, r5
 8007586:	0030      	movs	r0, r6
 8007588:	f7ff fc40 	bl	8006e0c <_malloc_r>
 800758c:	9001      	str	r0, [sp, #4]
 800758e:	2800      	cmp	r0, #0
 8007590:	d101      	bne.n	8007596 <_realloc_r+0x46>
 8007592:	9c01      	ldr	r4, [sp, #4]
 8007594:	e7e6      	b.n	8007564 <_realloc_r+0x14>
 8007596:	002a      	movs	r2, r5
 8007598:	42bd      	cmp	r5, r7
 800759a:	d900      	bls.n	800759e <_realloc_r+0x4e>
 800759c:	003a      	movs	r2, r7
 800759e:	0021      	movs	r1, r4
 80075a0:	9801      	ldr	r0, [sp, #4]
 80075a2:	f7ff ffcc 	bl	800753e <memcpy>
 80075a6:	0021      	movs	r1, r4
 80075a8:	0030      	movs	r0, r6
 80075aa:	f7ff fbc3 	bl	8006d34 <_free_r>
 80075ae:	e7f0      	b.n	8007592 <_realloc_r+0x42>

080075b0 <_malloc_usable_size_r>:
 80075b0:	1f0b      	subs	r3, r1, #4
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	1f18      	subs	r0, r3, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	da01      	bge.n	80075be <_malloc_usable_size_r+0xe>
 80075ba:	580b      	ldr	r3, [r1, r0]
 80075bc:	18c0      	adds	r0, r0, r3
 80075be:	4770      	bx	lr

080075c0 <acosf>:
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	1c05      	adds	r5, r0, #0
 80075c4:	f000 f86c 	bl	80076a0 <__ieee754_acosf>
 80075c8:	1c29      	adds	r1, r5, #0
 80075ca:	1c04      	adds	r4, r0, #0
 80075cc:	1c28      	adds	r0, r5, #0
 80075ce:	f7f9 fedb 	bl	8001388 <__aeabi_fcmpun>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d110      	bne.n	80075f8 <acosf+0x38>
 80075d6:	1c28      	adds	r0, r5, #0
 80075d8:	f000 f812 	bl	8007600 <fabsf>
 80075dc:	21fe      	movs	r1, #254	@ 0xfe
 80075de:	0589      	lsls	r1, r1, #22
 80075e0:	f7f8 ff40 	bl	8000464 <__aeabi_fcmpgt>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d007      	beq.n	80075f8 <acosf+0x38>
 80075e8:	f7ff fb78 	bl	8006cdc <__errno>
 80075ec:	2321      	movs	r3, #33	@ 0x21
 80075ee:	6003      	str	r3, [r0, #0]
 80075f0:	4802      	ldr	r0, [pc, #8]	@ (80075fc <acosf+0x3c>)
 80075f2:	f000 f809 	bl	8007608 <nanf>
 80075f6:	1c04      	adds	r4, r0, #0
 80075f8:	1c20      	adds	r0, r4, #0
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	08007bbd 	.word	0x08007bbd

08007600 <fabsf>:
 8007600:	0040      	lsls	r0, r0, #1
 8007602:	0840      	lsrs	r0, r0, #1
 8007604:	4770      	bx	lr
	...

08007608 <nanf>:
 8007608:	4800      	ldr	r0, [pc, #0]	@ (800760c <nanf+0x4>)
 800760a:	4770      	bx	lr
 800760c:	7fc00000 	.word	0x7fc00000

08007610 <fmaxf>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	1c04      	adds	r4, r0, #0
 8007614:	1c0d      	adds	r5, r1, #0
 8007616:	f000 f827 	bl	8007668 <__fpclassifyf>
 800761a:	2800      	cmp	r0, #0
 800761c:	d102      	bne.n	8007624 <fmaxf+0x14>
 800761e:	1c2c      	adds	r4, r5, #0
 8007620:	1c20      	adds	r0, r4, #0
 8007622:	bd70      	pop	{r4, r5, r6, pc}
 8007624:	1c28      	adds	r0, r5, #0
 8007626:	f000 f81f 	bl	8007668 <__fpclassifyf>
 800762a:	2800      	cmp	r0, #0
 800762c:	d0f8      	beq.n	8007620 <fmaxf+0x10>
 800762e:	1c29      	adds	r1, r5, #0
 8007630:	1c20      	adds	r0, r4, #0
 8007632:	f7f8 ff17 	bl	8000464 <__aeabi_fcmpgt>
 8007636:	2800      	cmp	r0, #0
 8007638:	d0f1      	beq.n	800761e <fmaxf+0xe>
 800763a:	e7f1      	b.n	8007620 <fmaxf+0x10>

0800763c <fminf>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	1c04      	adds	r4, r0, #0
 8007640:	1c0d      	adds	r5, r1, #0
 8007642:	f000 f811 	bl	8007668 <__fpclassifyf>
 8007646:	2800      	cmp	r0, #0
 8007648:	d102      	bne.n	8007650 <fminf+0x14>
 800764a:	1c2c      	adds	r4, r5, #0
 800764c:	1c20      	adds	r0, r4, #0
 800764e:	bd70      	pop	{r4, r5, r6, pc}
 8007650:	1c28      	adds	r0, r5, #0
 8007652:	f000 f809 	bl	8007668 <__fpclassifyf>
 8007656:	2800      	cmp	r0, #0
 8007658:	d0f8      	beq.n	800764c <fminf+0x10>
 800765a:	1c29      	adds	r1, r5, #0
 800765c:	1c20      	adds	r0, r4, #0
 800765e:	f7f8 feed 	bl	800043c <__aeabi_fcmplt>
 8007662:	2800      	cmp	r0, #0
 8007664:	d0f1      	beq.n	800764a <fminf+0xe>
 8007666:	e7f1      	b.n	800764c <fminf+0x10>

08007668 <__fpclassifyf>:
 8007668:	0043      	lsls	r3, r0, #1
 800766a:	085a      	lsrs	r2, r3, #1
 800766c:	2002      	movs	r0, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00f      	beq.n	8007692 <__fpclassifyf+0x2a>
 8007672:	21fe      	movs	r1, #254	@ 0xfe
 8007674:	4b07      	ldr	r3, [pc, #28]	@ (8007694 <__fpclassifyf+0x2c>)
 8007676:	05c9      	lsls	r1, r1, #23
 8007678:	18d3      	adds	r3, r2, r3
 800767a:	1800      	adds	r0, r0, r0
 800767c:	428b      	cmp	r3, r1
 800767e:	d308      	bcc.n	8007692 <__fpclassifyf+0x2a>
 8007680:	4905      	ldr	r1, [pc, #20]	@ (8007698 <__fpclassifyf+0x30>)
 8007682:	1e53      	subs	r3, r2, #1
 8007684:	3801      	subs	r0, #1
 8007686:	428b      	cmp	r3, r1
 8007688:	d903      	bls.n	8007692 <__fpclassifyf+0x2a>
 800768a:	4b04      	ldr	r3, [pc, #16]	@ (800769c <__fpclassifyf+0x34>)
 800768c:	18d0      	adds	r0, r2, r3
 800768e:	4243      	negs	r3, r0
 8007690:	4158      	adcs	r0, r3
 8007692:	4770      	bx	lr
 8007694:	ff800000 	.word	0xff800000
 8007698:	007ffffe 	.word	0x007ffffe
 800769c:	80800000 	.word	0x80800000

080076a0 <__ieee754_acosf>:
 80076a0:	21fe      	movs	r1, #254	@ 0xfe
 80076a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a4:	0043      	lsls	r3, r0, #1
 80076a6:	1c04      	adds	r4, r0, #0
 80076a8:	085b      	lsrs	r3, r3, #1
 80076aa:	0589      	lsls	r1, r1, #22
 80076ac:	428b      	cmp	r3, r1
 80076ae:	d104      	bne.n	80076ba <__ieee754_acosf+0x1a>
 80076b0:	2000      	movs	r0, #0
 80076b2:	2c00      	cmp	r4, #0
 80076b4:	dc09      	bgt.n	80076ca <__ieee754_acosf+0x2a>
 80076b6:	489c      	ldr	r0, [pc, #624]	@ (8007928 <__ieee754_acosf+0x288>)
 80076b8:	e007      	b.n	80076ca <__ieee754_acosf+0x2a>
 80076ba:	428b      	cmp	r3, r1
 80076bc:	d906      	bls.n	80076cc <__ieee754_acosf+0x2c>
 80076be:	1c01      	adds	r1, r0, #0
 80076c0:	f7f9 fbfe 	bl	8000ec0 <__aeabi_fsub>
 80076c4:	1c01      	adds	r1, r0, #0
 80076c6:	f7f9 f8d3 	bl	8000870 <__aeabi_fdiv>
 80076ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076cc:	21fc      	movs	r1, #252	@ 0xfc
 80076ce:	0589      	lsls	r1, r1, #22
 80076d0:	428b      	cmp	r3, r1
 80076d2:	d258      	bcs.n	8007786 <__ieee754_acosf+0xe6>
 80076d4:	228c      	movs	r2, #140	@ 0x8c
 80076d6:	0592      	lsls	r2, r2, #22
 80076d8:	4293      	cmp	r3, r2
 80076da:	d800      	bhi.n	80076de <__ieee754_acosf+0x3e>
 80076dc:	e122      	b.n	8007924 <__ieee754_acosf+0x284>
 80076de:	1c01      	adds	r1, r0, #0
 80076e0:	f7f9 fa94 	bl	8000c0c <__aeabi_fmul>
 80076e4:	4991      	ldr	r1, [pc, #580]	@ (800792c <__ieee754_acosf+0x28c>)
 80076e6:	1c05      	adds	r5, r0, #0
 80076e8:	f7f9 fa90 	bl	8000c0c <__aeabi_fmul>
 80076ec:	4990      	ldr	r1, [pc, #576]	@ (8007930 <__ieee754_acosf+0x290>)
 80076ee:	f7f8 fecd 	bl	800048c <__aeabi_fadd>
 80076f2:	1c29      	adds	r1, r5, #0
 80076f4:	f7f9 fa8a 	bl	8000c0c <__aeabi_fmul>
 80076f8:	498e      	ldr	r1, [pc, #568]	@ (8007934 <__ieee754_acosf+0x294>)
 80076fa:	f7f9 fbe1 	bl	8000ec0 <__aeabi_fsub>
 80076fe:	1c29      	adds	r1, r5, #0
 8007700:	f7f9 fa84 	bl	8000c0c <__aeabi_fmul>
 8007704:	498c      	ldr	r1, [pc, #560]	@ (8007938 <__ieee754_acosf+0x298>)
 8007706:	f7f8 fec1 	bl	800048c <__aeabi_fadd>
 800770a:	1c29      	adds	r1, r5, #0
 800770c:	f7f9 fa7e 	bl	8000c0c <__aeabi_fmul>
 8007710:	498a      	ldr	r1, [pc, #552]	@ (800793c <__ieee754_acosf+0x29c>)
 8007712:	f7f9 fbd5 	bl	8000ec0 <__aeabi_fsub>
 8007716:	1c29      	adds	r1, r5, #0
 8007718:	f7f9 fa78 	bl	8000c0c <__aeabi_fmul>
 800771c:	4988      	ldr	r1, [pc, #544]	@ (8007940 <__ieee754_acosf+0x2a0>)
 800771e:	f7f8 feb5 	bl	800048c <__aeabi_fadd>
 8007722:	1c29      	adds	r1, r5, #0
 8007724:	f7f9 fa72 	bl	8000c0c <__aeabi_fmul>
 8007728:	4986      	ldr	r1, [pc, #536]	@ (8007944 <__ieee754_acosf+0x2a4>)
 800772a:	1c06      	adds	r6, r0, #0
 800772c:	1c28      	adds	r0, r5, #0
 800772e:	f7f9 fa6d 	bl	8000c0c <__aeabi_fmul>
 8007732:	4985      	ldr	r1, [pc, #532]	@ (8007948 <__ieee754_acosf+0x2a8>)
 8007734:	f7f9 fbc4 	bl	8000ec0 <__aeabi_fsub>
 8007738:	1c29      	adds	r1, r5, #0
 800773a:	f7f9 fa67 	bl	8000c0c <__aeabi_fmul>
 800773e:	4983      	ldr	r1, [pc, #524]	@ (800794c <__ieee754_acosf+0x2ac>)
 8007740:	f7f8 fea4 	bl	800048c <__aeabi_fadd>
 8007744:	1c29      	adds	r1, r5, #0
 8007746:	f7f9 fa61 	bl	8000c0c <__aeabi_fmul>
 800774a:	4981      	ldr	r1, [pc, #516]	@ (8007950 <__ieee754_acosf+0x2b0>)
 800774c:	f7f9 fbb8 	bl	8000ec0 <__aeabi_fsub>
 8007750:	1c29      	adds	r1, r5, #0
 8007752:	f7f9 fa5b 	bl	8000c0c <__aeabi_fmul>
 8007756:	21fe      	movs	r1, #254	@ 0xfe
 8007758:	0589      	lsls	r1, r1, #22
 800775a:	f7f8 fe97 	bl	800048c <__aeabi_fadd>
 800775e:	1c01      	adds	r1, r0, #0
 8007760:	1c30      	adds	r0, r6, #0
 8007762:	f7f9 f885 	bl	8000870 <__aeabi_fdiv>
 8007766:	1c21      	adds	r1, r4, #0
 8007768:	f7f9 fa50 	bl	8000c0c <__aeabi_fmul>
 800776c:	1c01      	adds	r1, r0, #0
 800776e:	4879      	ldr	r0, [pc, #484]	@ (8007954 <__ieee754_acosf+0x2b4>)
 8007770:	f7f9 fba6 	bl	8000ec0 <__aeabi_fsub>
 8007774:	1c01      	adds	r1, r0, #0
 8007776:	1c20      	adds	r0, r4, #0
 8007778:	f7f9 fba2 	bl	8000ec0 <__aeabi_fsub>
 800777c:	1c01      	adds	r1, r0, #0
 800777e:	4876      	ldr	r0, [pc, #472]	@ (8007958 <__ieee754_acosf+0x2b8>)
 8007780:	f7f9 fb9e 	bl	8000ec0 <__aeabi_fsub>
 8007784:	e7a1      	b.n	80076ca <__ieee754_acosf+0x2a>
 8007786:	2800      	cmp	r0, #0
 8007788:	da5c      	bge.n	8007844 <__ieee754_acosf+0x1a4>
 800778a:	21fe      	movs	r1, #254	@ 0xfe
 800778c:	0589      	lsls	r1, r1, #22
 800778e:	f7f8 fe7d 	bl	800048c <__aeabi_fadd>
 8007792:	21fc      	movs	r1, #252	@ 0xfc
 8007794:	0589      	lsls	r1, r1, #22
 8007796:	f7f9 fa39 	bl	8000c0c <__aeabi_fmul>
 800779a:	4964      	ldr	r1, [pc, #400]	@ (800792c <__ieee754_acosf+0x28c>)
 800779c:	1c04      	adds	r4, r0, #0
 800779e:	f7f9 fa35 	bl	8000c0c <__aeabi_fmul>
 80077a2:	4963      	ldr	r1, [pc, #396]	@ (8007930 <__ieee754_acosf+0x290>)
 80077a4:	f7f8 fe72 	bl	800048c <__aeabi_fadd>
 80077a8:	1c21      	adds	r1, r4, #0
 80077aa:	f7f9 fa2f 	bl	8000c0c <__aeabi_fmul>
 80077ae:	4961      	ldr	r1, [pc, #388]	@ (8007934 <__ieee754_acosf+0x294>)
 80077b0:	f7f9 fb86 	bl	8000ec0 <__aeabi_fsub>
 80077b4:	1c21      	adds	r1, r4, #0
 80077b6:	f7f9 fa29 	bl	8000c0c <__aeabi_fmul>
 80077ba:	495f      	ldr	r1, [pc, #380]	@ (8007938 <__ieee754_acosf+0x298>)
 80077bc:	f7f8 fe66 	bl	800048c <__aeabi_fadd>
 80077c0:	1c21      	adds	r1, r4, #0
 80077c2:	f7f9 fa23 	bl	8000c0c <__aeabi_fmul>
 80077c6:	495d      	ldr	r1, [pc, #372]	@ (800793c <__ieee754_acosf+0x29c>)
 80077c8:	f7f9 fb7a 	bl	8000ec0 <__aeabi_fsub>
 80077cc:	1c21      	adds	r1, r4, #0
 80077ce:	f7f9 fa1d 	bl	8000c0c <__aeabi_fmul>
 80077d2:	495b      	ldr	r1, [pc, #364]	@ (8007940 <__ieee754_acosf+0x2a0>)
 80077d4:	f7f8 fe5a 	bl	800048c <__aeabi_fadd>
 80077d8:	1c21      	adds	r1, r4, #0
 80077da:	f7f9 fa17 	bl	8000c0c <__aeabi_fmul>
 80077de:	4959      	ldr	r1, [pc, #356]	@ (8007944 <__ieee754_acosf+0x2a4>)
 80077e0:	1c05      	adds	r5, r0, #0
 80077e2:	1c20      	adds	r0, r4, #0
 80077e4:	f7f9 fa12 	bl	8000c0c <__aeabi_fmul>
 80077e8:	4957      	ldr	r1, [pc, #348]	@ (8007948 <__ieee754_acosf+0x2a8>)
 80077ea:	f7f9 fb69 	bl	8000ec0 <__aeabi_fsub>
 80077ee:	1c21      	adds	r1, r4, #0
 80077f0:	f7f9 fa0c 	bl	8000c0c <__aeabi_fmul>
 80077f4:	4955      	ldr	r1, [pc, #340]	@ (800794c <__ieee754_acosf+0x2ac>)
 80077f6:	f7f8 fe49 	bl	800048c <__aeabi_fadd>
 80077fa:	1c21      	adds	r1, r4, #0
 80077fc:	f7f9 fa06 	bl	8000c0c <__aeabi_fmul>
 8007800:	4953      	ldr	r1, [pc, #332]	@ (8007950 <__ieee754_acosf+0x2b0>)
 8007802:	f7f9 fb5d 	bl	8000ec0 <__aeabi_fsub>
 8007806:	1c21      	adds	r1, r4, #0
 8007808:	f7f9 fa00 	bl	8000c0c <__aeabi_fmul>
 800780c:	21fe      	movs	r1, #254	@ 0xfe
 800780e:	0589      	lsls	r1, r1, #22
 8007810:	f7f8 fe3c 	bl	800048c <__aeabi_fadd>
 8007814:	1c06      	adds	r6, r0, #0
 8007816:	1c20      	adds	r0, r4, #0
 8007818:	f000 f8a4 	bl	8007964 <__ieee754_sqrtf>
 800781c:	1c31      	adds	r1, r6, #0
 800781e:	1c04      	adds	r4, r0, #0
 8007820:	1c28      	adds	r0, r5, #0
 8007822:	f7f9 f825 	bl	8000870 <__aeabi_fdiv>
 8007826:	1c21      	adds	r1, r4, #0
 8007828:	f7f9 f9f0 	bl	8000c0c <__aeabi_fmul>
 800782c:	4949      	ldr	r1, [pc, #292]	@ (8007954 <__ieee754_acosf+0x2b4>)
 800782e:	f7f9 fb47 	bl	8000ec0 <__aeabi_fsub>
 8007832:	1c21      	adds	r1, r4, #0
 8007834:	f7f8 fe2a 	bl	800048c <__aeabi_fadd>
 8007838:	1c01      	adds	r1, r0, #0
 800783a:	f7f8 fe27 	bl	800048c <__aeabi_fadd>
 800783e:	1c01      	adds	r1, r0, #0
 8007840:	4846      	ldr	r0, [pc, #280]	@ (800795c <__ieee754_acosf+0x2bc>)
 8007842:	e79d      	b.n	8007780 <__ieee754_acosf+0xe0>
 8007844:	1c01      	adds	r1, r0, #0
 8007846:	20fe      	movs	r0, #254	@ 0xfe
 8007848:	0580      	lsls	r0, r0, #22
 800784a:	f7f9 fb39 	bl	8000ec0 <__aeabi_fsub>
 800784e:	21fc      	movs	r1, #252	@ 0xfc
 8007850:	0589      	lsls	r1, r1, #22
 8007852:	f7f9 f9db 	bl	8000c0c <__aeabi_fmul>
 8007856:	1c04      	adds	r4, r0, #0
 8007858:	f000 f884 	bl	8007964 <__ieee754_sqrtf>
 800785c:	4933      	ldr	r1, [pc, #204]	@ (800792c <__ieee754_acosf+0x28c>)
 800785e:	1c06      	adds	r6, r0, #0
 8007860:	0b05      	lsrs	r5, r0, #12
 8007862:	1c20      	adds	r0, r4, #0
 8007864:	f7f9 f9d2 	bl	8000c0c <__aeabi_fmul>
 8007868:	4931      	ldr	r1, [pc, #196]	@ (8007930 <__ieee754_acosf+0x290>)
 800786a:	f7f8 fe0f 	bl	800048c <__aeabi_fadd>
 800786e:	1c21      	adds	r1, r4, #0
 8007870:	f7f9 f9cc 	bl	8000c0c <__aeabi_fmul>
 8007874:	492f      	ldr	r1, [pc, #188]	@ (8007934 <__ieee754_acosf+0x294>)
 8007876:	f7f9 fb23 	bl	8000ec0 <__aeabi_fsub>
 800787a:	1c21      	adds	r1, r4, #0
 800787c:	f7f9 f9c6 	bl	8000c0c <__aeabi_fmul>
 8007880:	492d      	ldr	r1, [pc, #180]	@ (8007938 <__ieee754_acosf+0x298>)
 8007882:	f7f8 fe03 	bl	800048c <__aeabi_fadd>
 8007886:	1c21      	adds	r1, r4, #0
 8007888:	f7f9 f9c0 	bl	8000c0c <__aeabi_fmul>
 800788c:	492b      	ldr	r1, [pc, #172]	@ (800793c <__ieee754_acosf+0x29c>)
 800788e:	f7f9 fb17 	bl	8000ec0 <__aeabi_fsub>
 8007892:	1c21      	adds	r1, r4, #0
 8007894:	f7f9 f9ba 	bl	8000c0c <__aeabi_fmul>
 8007898:	4929      	ldr	r1, [pc, #164]	@ (8007940 <__ieee754_acosf+0x2a0>)
 800789a:	f7f8 fdf7 	bl	800048c <__aeabi_fadd>
 800789e:	1c21      	adds	r1, r4, #0
 80078a0:	f7f9 f9b4 	bl	8000c0c <__aeabi_fmul>
 80078a4:	4927      	ldr	r1, [pc, #156]	@ (8007944 <__ieee754_acosf+0x2a4>)
 80078a6:	1c07      	adds	r7, r0, #0
 80078a8:	1c20      	adds	r0, r4, #0
 80078aa:	f7f9 f9af 	bl	8000c0c <__aeabi_fmul>
 80078ae:	4926      	ldr	r1, [pc, #152]	@ (8007948 <__ieee754_acosf+0x2a8>)
 80078b0:	f7f9 fb06 	bl	8000ec0 <__aeabi_fsub>
 80078b4:	1c21      	adds	r1, r4, #0
 80078b6:	f7f9 f9a9 	bl	8000c0c <__aeabi_fmul>
 80078ba:	4924      	ldr	r1, [pc, #144]	@ (800794c <__ieee754_acosf+0x2ac>)
 80078bc:	f7f8 fde6 	bl	800048c <__aeabi_fadd>
 80078c0:	1c21      	adds	r1, r4, #0
 80078c2:	f7f9 f9a3 	bl	8000c0c <__aeabi_fmul>
 80078c6:	4922      	ldr	r1, [pc, #136]	@ (8007950 <__ieee754_acosf+0x2b0>)
 80078c8:	f7f9 fafa 	bl	8000ec0 <__aeabi_fsub>
 80078cc:	1c21      	adds	r1, r4, #0
 80078ce:	f7f9 f99d 	bl	8000c0c <__aeabi_fmul>
 80078d2:	21fe      	movs	r1, #254	@ 0xfe
 80078d4:	0589      	lsls	r1, r1, #22
 80078d6:	f7f8 fdd9 	bl	800048c <__aeabi_fadd>
 80078da:	1c01      	adds	r1, r0, #0
 80078dc:	1c38      	adds	r0, r7, #0
 80078de:	f7f8 ffc7 	bl	8000870 <__aeabi_fdiv>
 80078e2:	1c31      	adds	r1, r6, #0
 80078e4:	f7f9 f992 	bl	8000c0c <__aeabi_fmul>
 80078e8:	032d      	lsls	r5, r5, #12
 80078ea:	1c07      	adds	r7, r0, #0
 80078ec:	1c29      	adds	r1, r5, #0
 80078ee:	1c28      	adds	r0, r5, #0
 80078f0:	f7f9 f98c 	bl	8000c0c <__aeabi_fmul>
 80078f4:	1c01      	adds	r1, r0, #0
 80078f6:	1c20      	adds	r0, r4, #0
 80078f8:	f7f9 fae2 	bl	8000ec0 <__aeabi_fsub>
 80078fc:	1c29      	adds	r1, r5, #0
 80078fe:	1c04      	adds	r4, r0, #0
 8007900:	1c30      	adds	r0, r6, #0
 8007902:	f7f8 fdc3 	bl	800048c <__aeabi_fadd>
 8007906:	1c01      	adds	r1, r0, #0
 8007908:	1c20      	adds	r0, r4, #0
 800790a:	f7f8 ffb1 	bl	8000870 <__aeabi_fdiv>
 800790e:	1c01      	adds	r1, r0, #0
 8007910:	1c38      	adds	r0, r7, #0
 8007912:	f7f8 fdbb 	bl	800048c <__aeabi_fadd>
 8007916:	1c29      	adds	r1, r5, #0
 8007918:	f7f8 fdb8 	bl	800048c <__aeabi_fadd>
 800791c:	1c01      	adds	r1, r0, #0
 800791e:	f7f8 fdb5 	bl	800048c <__aeabi_fadd>
 8007922:	e6d2      	b.n	80076ca <__ieee754_acosf+0x2a>
 8007924:	480e      	ldr	r0, [pc, #56]	@ (8007960 <__ieee754_acosf+0x2c0>)
 8007926:	e6d0      	b.n	80076ca <__ieee754_acosf+0x2a>
 8007928:	40490fdb 	.word	0x40490fdb
 800792c:	3811ef08 	.word	0x3811ef08
 8007930:	3a4f7f04 	.word	0x3a4f7f04
 8007934:	3d241146 	.word	0x3d241146
 8007938:	3e4e0aa8 	.word	0x3e4e0aa8
 800793c:	3ea6b090 	.word	0x3ea6b090
 8007940:	3e2aaaab 	.word	0x3e2aaaab
 8007944:	3d9dc62e 	.word	0x3d9dc62e
 8007948:	3f303361 	.word	0x3f303361
 800794c:	4001572d 	.word	0x4001572d
 8007950:	4019d139 	.word	0x4019d139
 8007954:	33a22168 	.word	0x33a22168
 8007958:	3fc90fda 	.word	0x3fc90fda
 800795c:	40490fda 	.word	0x40490fda
 8007960:	3fc90fdb 	.word	0x3fc90fdb

08007964 <__ieee754_sqrtf>:
 8007964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007966:	21ff      	movs	r1, #255	@ 0xff
 8007968:	0042      	lsls	r2, r0, #1
 800796a:	0003      	movs	r3, r0
 800796c:	1c04      	adds	r4, r0, #0
 800796e:	0852      	lsrs	r2, r2, #1
 8007970:	05c9      	lsls	r1, r1, #23
 8007972:	428a      	cmp	r2, r1
 8007974:	d309      	bcc.n	800798a <__ieee754_sqrtf+0x26>
 8007976:	1c01      	adds	r1, r0, #0
 8007978:	f7f9 f948 	bl	8000c0c <__aeabi_fmul>
 800797c:	1c01      	adds	r1, r0, #0
 800797e:	1c20      	adds	r0, r4, #0
 8007980:	f7f8 fd84 	bl	800048c <__aeabi_fadd>
 8007984:	1c04      	adds	r4, r0, #0
 8007986:	1c20      	adds	r0, r4, #0
 8007988:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800798a:	2a00      	cmp	r2, #0
 800798c:	d0fb      	beq.n	8007986 <__ieee754_sqrtf+0x22>
 800798e:	2800      	cmp	r0, #0
 8007990:	da06      	bge.n	80079a0 <__ieee754_sqrtf+0x3c>
 8007992:	1c01      	adds	r1, r0, #0
 8007994:	f7f9 fa94 	bl	8000ec0 <__aeabi_fsub>
 8007998:	1c01      	adds	r1, r0, #0
 800799a:	f7f8 ff69 	bl	8000870 <__aeabi_fdiv>
 800799e:	e7f1      	b.n	8007984 <__ieee754_sqrtf+0x20>
 80079a0:	0002      	movs	r2, r0
 80079a2:	400a      	ands	r2, r1
 80079a4:	4208      	tst	r0, r1
 80079a6:	d040      	beq.n	8007a2a <__ieee754_sqrtf+0xc6>
 80079a8:	15c1      	asrs	r1, r0, #23
 80079aa:	2280      	movs	r2, #128	@ 0x80
 80079ac:	000f      	movs	r7, r1
 80079ae:	025b      	lsls	r3, r3, #9
 80079b0:	0a5b      	lsrs	r3, r3, #9
 80079b2:	0412      	lsls	r2, r2, #16
 80079b4:	3f7f      	subs	r7, #127	@ 0x7f
 80079b6:	4313      	orrs	r3, r2
 80079b8:	07c9      	lsls	r1, r1, #31
 80079ba:	d400      	bmi.n	80079be <__ieee754_sqrtf+0x5a>
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	2400      	movs	r4, #0
 80079c0:	2180      	movs	r1, #128	@ 0x80
 80079c2:	2019      	movs	r0, #25
 80079c4:	0026      	movs	r6, r4
 80079c6:	107f      	asrs	r7, r7, #1
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	0449      	lsls	r1, r1, #17
 80079cc:	1875      	adds	r5, r6, r1
 80079ce:	001a      	movs	r2, r3
 80079d0:	429d      	cmp	r5, r3
 80079d2:	dc02      	bgt.n	80079da <__ieee754_sqrtf+0x76>
 80079d4:	186e      	adds	r6, r5, r1
 80079d6:	1b5a      	subs	r2, r3, r5
 80079d8:	1864      	adds	r4, r4, r1
 80079da:	3801      	subs	r0, #1
 80079dc:	0053      	lsls	r3, r2, #1
 80079de:	0849      	lsrs	r1, r1, #1
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d1f3      	bne.n	80079cc <__ieee754_sqrtf+0x68>
 80079e4:	2a00      	cmp	r2, #0
 80079e6:	d019      	beq.n	8007a1c <__ieee754_sqrtf+0xb8>
 80079e8:	4d16      	ldr	r5, [pc, #88]	@ (8007a44 <__ieee754_sqrtf+0xe0>)
 80079ea:	4e17      	ldr	r6, [pc, #92]	@ (8007a48 <__ieee754_sqrtf+0xe4>)
 80079ec:	6828      	ldr	r0, [r5, #0]
 80079ee:	6831      	ldr	r1, [r6, #0]
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	9301      	str	r3, [sp, #4]
 80079f4:	f7f9 fa64 	bl	8000ec0 <__aeabi_fsub>
 80079f8:	1c01      	adds	r1, r0, #0
 80079fa:	9801      	ldr	r0, [sp, #4]
 80079fc:	f7f8 fd28 	bl	8000450 <__aeabi_fcmple>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d00b      	beq.n	8007a1c <__ieee754_sqrtf+0xb8>
 8007a04:	6828      	ldr	r0, [r5, #0]
 8007a06:	6831      	ldr	r1, [r6, #0]
 8007a08:	f7f8 fd40 	bl	800048c <__aeabi_fadd>
 8007a0c:	682d      	ldr	r5, [r5, #0]
 8007a0e:	1c01      	adds	r1, r0, #0
 8007a10:	1c28      	adds	r0, r5, #0
 8007a12:	f7f8 fd13 	bl	800043c <__aeabi_fcmplt>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d010      	beq.n	8007a3c <__ieee754_sqrtf+0xd8>
 8007a1a:	3402      	adds	r4, #2
 8007a1c:	23fc      	movs	r3, #252	@ 0xfc
 8007a1e:	1064      	asrs	r4, r4, #1
 8007a20:	059b      	lsls	r3, r3, #22
 8007a22:	18e3      	adds	r3, r4, r3
 8007a24:	05fc      	lsls	r4, r7, #23
 8007a26:	18e4      	adds	r4, r4, r3
 8007a28:	e7ad      	b.n	8007986 <__ieee754_sqrtf+0x22>
 8007a2a:	2080      	movs	r0, #128	@ 0x80
 8007a2c:	0400      	lsls	r0, r0, #16
 8007a2e:	005b      	lsls	r3, r3, #1
 8007a30:	0011      	movs	r1, r2
 8007a32:	3201      	adds	r2, #1
 8007a34:	4203      	tst	r3, r0
 8007a36:	d0fa      	beq.n	8007a2e <__ieee754_sqrtf+0xca>
 8007a38:	4249      	negs	r1, r1
 8007a3a:	e7b6      	b.n	80079aa <__ieee754_sqrtf+0x46>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	3401      	adds	r4, #1
 8007a40:	439c      	bics	r4, r3
 8007a42:	e7eb      	b.n	8007a1c <__ieee754_sqrtf+0xb8>
 8007a44:	08007bf0 	.word	0x08007bf0
 8007a48:	08007bec 	.word	0x08007bec

08007a4c <_init>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	46c0      	nop			@ (mov r8, r8)
 8007a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a52:	bc08      	pop	{r3}
 8007a54:	469e      	mov	lr, r3
 8007a56:	4770      	bx	lr

08007a58 <_fini>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	46c0      	nop			@ (mov r8, r8)
 8007a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5e:	bc08      	pop	{r3}
 8007a60:	469e      	mov	lr, r3
 8007a62:	4770      	bx	lr
