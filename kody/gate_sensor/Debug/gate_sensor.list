
gate_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b5c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007c1c  08007c1c  00008c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dac  08007dac  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007dac  08007dac  0000905c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007dac  08007dac  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dac  08007dac  00008dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007db0  08007db0  00008db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007db4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000005c  08007e10  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08007e10  00009300  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a42  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bde  00000000  00000000  0001dac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  000206a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d96  00000000  00000000  000217e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b34  00000000  00000000  0002257e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017248  00000000  00000000  000380b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085422  00000000  00000000  0004f2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d471c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004760  00000000  00000000  000d4760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d8ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007c04 	.word	0x08007c04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08007c04 	.word	0x08007c04

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cfrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0008      	movs	r0, r1
 800041c:	4661      	mov	r1, ip
 800041e:	e7ff      	b.n	8000420 <__aeabi_cfcmpeq>

08000420 <__aeabi_cfcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 fbab 	bl	8000b7c <__lesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cfcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_fcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 fb33 	bl	8000a9c <__eqsf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_fcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fb9d 	bl	8000b7c <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_fcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fb93 	bl	8000b7c <__lesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_fcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_fcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fb41 	bl	8000aec <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_fcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_fcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fb37 	bl	8000aec <__gesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_fcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_fadd>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	024b      	lsls	r3, r1, #9
 8000490:	0a5a      	lsrs	r2, r3, #9
 8000492:	4694      	mov	ip, r2
 8000494:	004a      	lsls	r2, r1, #1
 8000496:	0fc9      	lsrs	r1, r1, #31
 8000498:	46ce      	mov	lr, r9
 800049a:	4647      	mov	r7, r8
 800049c:	4689      	mov	r9, r1
 800049e:	0045      	lsls	r5, r0, #1
 80004a0:	0246      	lsls	r6, r0, #9
 80004a2:	0e2d      	lsrs	r5, r5, #24
 80004a4:	0e12      	lsrs	r2, r2, #24
 80004a6:	b580      	push	{r7, lr}
 80004a8:	0999      	lsrs	r1, r3, #6
 80004aa:	0a77      	lsrs	r7, r6, #9
 80004ac:	0fc4      	lsrs	r4, r0, #31
 80004ae:	09b6      	lsrs	r6, r6, #6
 80004b0:	1aab      	subs	r3, r5, r2
 80004b2:	454c      	cmp	r4, r9
 80004b4:	d020      	beq.n	80004f8 <__aeabi_fadd+0x6c>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	dd0c      	ble.n	80004d4 <__aeabi_fadd+0x48>
 80004ba:	2a00      	cmp	r2, #0
 80004bc:	d134      	bne.n	8000528 <__aeabi_fadd+0x9c>
 80004be:	2900      	cmp	r1, #0
 80004c0:	d02a      	beq.n	8000518 <__aeabi_fadd+0x8c>
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d100      	bne.n	80004ca <__aeabi_fadd+0x3e>
 80004c8:	e08f      	b.n	80005ea <__aeabi_fadd+0x15e>
 80004ca:	2bff      	cmp	r3, #255	@ 0xff
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x44>
 80004ce:	e0cd      	b.n	800066c <__aeabi_fadd+0x1e0>
 80004d0:	0013      	movs	r3, r2
 80004d2:	e02f      	b.n	8000534 <__aeabi_fadd+0xa8>
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d060      	beq.n	800059a <__aeabi_fadd+0x10e>
 80004d8:	1b53      	subs	r3, r2, r5
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d000      	beq.n	80004e0 <__aeabi_fadd+0x54>
 80004de:	e0ee      	b.n	80006be <__aeabi_fadd+0x232>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fadd+0x5a>
 80004e4:	e13e      	b.n	8000764 <__aeabi_fadd+0x2d8>
 80004e6:	1e5c      	subs	r4, r3, #1
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x62>
 80004ec:	e16b      	b.n	80007c6 <__aeabi_fadd+0x33a>
 80004ee:	2bff      	cmp	r3, #255	@ 0xff
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x68>
 80004f2:	e0b9      	b.n	8000668 <__aeabi_fadd+0x1dc>
 80004f4:	0023      	movs	r3, r4
 80004f6:	e0e7      	b.n	80006c8 <__aeabi_fadd+0x23c>
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	dc00      	bgt.n	80004fe <__aeabi_fadd+0x72>
 80004fc:	e0a4      	b.n	8000648 <__aeabi_fadd+0x1bc>
 80004fe:	2a00      	cmp	r2, #0
 8000500:	d069      	beq.n	80005d6 <__aeabi_fadd+0x14a>
 8000502:	2dff      	cmp	r5, #255	@ 0xff
 8000504:	d100      	bne.n	8000508 <__aeabi_fadd+0x7c>
 8000506:	e0b1      	b.n	800066c <__aeabi_fadd+0x1e0>
 8000508:	2280      	movs	r2, #128	@ 0x80
 800050a:	04d2      	lsls	r2, r2, #19
 800050c:	4311      	orrs	r1, r2
 800050e:	2b1b      	cmp	r3, #27
 8000510:	dc00      	bgt.n	8000514 <__aeabi_fadd+0x88>
 8000512:	e0e9      	b.n	80006e8 <__aeabi_fadd+0x25c>
 8000514:	002b      	movs	r3, r5
 8000516:	3605      	adds	r6, #5
 8000518:	08f7      	lsrs	r7, r6, #3
 800051a:	2bff      	cmp	r3, #255	@ 0xff
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x94>
 800051e:	e0a5      	b.n	800066c <__aeabi_fadd+0x1e0>
 8000520:	027a      	lsls	r2, r7, #9
 8000522:	0a52      	lsrs	r2, r2, #9
 8000524:	b2d8      	uxtb	r0, r3
 8000526:	e030      	b.n	800058a <__aeabi_fadd+0xfe>
 8000528:	2dff      	cmp	r5, #255	@ 0xff
 800052a:	d100      	bne.n	800052e <__aeabi_fadd+0xa2>
 800052c:	e09e      	b.n	800066c <__aeabi_fadd+0x1e0>
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	04d2      	lsls	r2, r2, #19
 8000532:	4311      	orrs	r1, r2
 8000534:	2001      	movs	r0, #1
 8000536:	2b1b      	cmp	r3, #27
 8000538:	dc08      	bgt.n	800054c <__aeabi_fadd+0xc0>
 800053a:	0008      	movs	r0, r1
 800053c:	2220      	movs	r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	4099      	lsls	r1, r3
 8000544:	000b      	movs	r3, r1
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	4193      	sbcs	r3, r2
 800054a:	4318      	orrs	r0, r3
 800054c:	1a36      	subs	r6, r6, r0
 800054e:	0173      	lsls	r3, r6, #5
 8000550:	d400      	bmi.n	8000554 <__aeabi_fadd+0xc8>
 8000552:	e071      	b.n	8000638 <__aeabi_fadd+0x1ac>
 8000554:	01b6      	lsls	r6, r6, #6
 8000556:	09b7      	lsrs	r7, r6, #6
 8000558:	0038      	movs	r0, r7
 800055a:	f001 fb4b 	bl	8001bf4 <__clzsi2>
 800055e:	003b      	movs	r3, r7
 8000560:	3805      	subs	r0, #5
 8000562:	4083      	lsls	r3, r0
 8000564:	4285      	cmp	r5, r0
 8000566:	dd4d      	ble.n	8000604 <__aeabi_fadd+0x178>
 8000568:	4eb4      	ldr	r6, [pc, #720]	@ (800083c <__aeabi_fadd+0x3b0>)
 800056a:	1a2d      	subs	r5, r5, r0
 800056c:	401e      	ands	r6, r3
 800056e:	075a      	lsls	r2, r3, #29
 8000570:	d068      	beq.n	8000644 <__aeabi_fadd+0x1b8>
 8000572:	220f      	movs	r2, #15
 8000574:	4013      	ands	r3, r2
 8000576:	2b04      	cmp	r3, #4
 8000578:	d064      	beq.n	8000644 <__aeabi_fadd+0x1b8>
 800057a:	3604      	adds	r6, #4
 800057c:	0173      	lsls	r3, r6, #5
 800057e:	d561      	bpl.n	8000644 <__aeabi_fadd+0x1b8>
 8000580:	1c68      	adds	r0, r5, #1
 8000582:	2dfe      	cmp	r5, #254	@ 0xfe
 8000584:	d154      	bne.n	8000630 <__aeabi_fadd+0x1a4>
 8000586:	20ff      	movs	r0, #255	@ 0xff
 8000588:	2200      	movs	r2, #0
 800058a:	05c0      	lsls	r0, r0, #23
 800058c:	4310      	orrs	r0, r2
 800058e:	07e4      	lsls	r4, r4, #31
 8000590:	4320      	orrs	r0, r4
 8000592:	bcc0      	pop	{r6, r7}
 8000594:	46b9      	mov	r9, r7
 8000596:	46b0      	mov	r8, r6
 8000598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800059a:	22fe      	movs	r2, #254	@ 0xfe
 800059c:	4690      	mov	r8, r2
 800059e:	1c68      	adds	r0, r5, #1
 80005a0:	0002      	movs	r2, r0
 80005a2:	4640      	mov	r0, r8
 80005a4:	4210      	tst	r0, r2
 80005a6:	d16b      	bne.n	8000680 <__aeabi_fadd+0x1f4>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_fadd+0x122>
 80005ac:	e0dd      	b.n	800076a <__aeabi_fadd+0x2de>
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d100      	bne.n	80005b4 <__aeabi_fadd+0x128>
 80005b2:	e102      	b.n	80007ba <__aeabi_fadd+0x32e>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	d0b3      	beq.n	8000520 <__aeabi_fadd+0x94>
 80005b8:	2280      	movs	r2, #128	@ 0x80
 80005ba:	1a77      	subs	r7, r6, r1
 80005bc:	04d2      	lsls	r2, r2, #19
 80005be:	4217      	tst	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x138>
 80005c2:	e136      	b.n	8000832 <__aeabi_fadd+0x3a6>
 80005c4:	464c      	mov	r4, r9
 80005c6:	1b8e      	subs	r6, r1, r6
 80005c8:	d061      	beq.n	800068e <__aeabi_fadd+0x202>
 80005ca:	2001      	movs	r0, #1
 80005cc:	4216      	tst	r6, r2
 80005ce:	d130      	bne.n	8000632 <__aeabi_fadd+0x1a6>
 80005d0:	2300      	movs	r3, #0
 80005d2:	08f7      	lsrs	r7, r6, #3
 80005d4:	e7a4      	b.n	8000520 <__aeabi_fadd+0x94>
 80005d6:	2900      	cmp	r1, #0
 80005d8:	d09e      	beq.n	8000518 <__aeabi_fadd+0x8c>
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d100      	bne.n	80005e2 <__aeabi_fadd+0x156>
 80005e0:	e0ca      	b.n	8000778 <__aeabi_fadd+0x2ec>
 80005e2:	2bff      	cmp	r3, #255	@ 0xff
 80005e4:	d042      	beq.n	800066c <__aeabi_fadd+0x1e0>
 80005e6:	0013      	movs	r3, r2
 80005e8:	e791      	b.n	800050e <__aeabi_fadd+0x82>
 80005ea:	1a71      	subs	r1, r6, r1
 80005ec:	014b      	lsls	r3, r1, #5
 80005ee:	d400      	bmi.n	80005f2 <__aeabi_fadd+0x166>
 80005f0:	e0d1      	b.n	8000796 <__aeabi_fadd+0x30a>
 80005f2:	018f      	lsls	r7, r1, #6
 80005f4:	09bf      	lsrs	r7, r7, #6
 80005f6:	0038      	movs	r0, r7
 80005f8:	f001 fafc 	bl	8001bf4 <__clzsi2>
 80005fc:	003b      	movs	r3, r7
 80005fe:	3805      	subs	r0, #5
 8000600:	4083      	lsls	r3, r0
 8000602:	2501      	movs	r5, #1
 8000604:	2220      	movs	r2, #32
 8000606:	1b40      	subs	r0, r0, r5
 8000608:	3001      	adds	r0, #1
 800060a:	1a12      	subs	r2, r2, r0
 800060c:	001e      	movs	r6, r3
 800060e:	4093      	lsls	r3, r2
 8000610:	40c6      	lsrs	r6, r0
 8000612:	1e5a      	subs	r2, r3, #1
 8000614:	4193      	sbcs	r3, r2
 8000616:	431e      	orrs	r6, r3
 8000618:	d039      	beq.n	800068e <__aeabi_fadd+0x202>
 800061a:	0773      	lsls	r3, r6, #29
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x194>
 800061e:	e11b      	b.n	8000858 <__aeabi_fadd+0x3cc>
 8000620:	230f      	movs	r3, #15
 8000622:	2500      	movs	r5, #0
 8000624:	4033      	ands	r3, r6
 8000626:	2b04      	cmp	r3, #4
 8000628:	d1a7      	bne.n	800057a <__aeabi_fadd+0xee>
 800062a:	2001      	movs	r0, #1
 800062c:	0172      	lsls	r2, r6, #5
 800062e:	d57c      	bpl.n	800072a <__aeabi_fadd+0x29e>
 8000630:	b2c0      	uxtb	r0, r0
 8000632:	01b2      	lsls	r2, r6, #6
 8000634:	0a52      	lsrs	r2, r2, #9
 8000636:	e7a8      	b.n	800058a <__aeabi_fadd+0xfe>
 8000638:	0773      	lsls	r3, r6, #29
 800063a:	d003      	beq.n	8000644 <__aeabi_fadd+0x1b8>
 800063c:	230f      	movs	r3, #15
 800063e:	4033      	ands	r3, r6
 8000640:	2b04      	cmp	r3, #4
 8000642:	d19a      	bne.n	800057a <__aeabi_fadd+0xee>
 8000644:	002b      	movs	r3, r5
 8000646:	e767      	b.n	8000518 <__aeabi_fadd+0x8c>
 8000648:	2b00      	cmp	r3, #0
 800064a:	d023      	beq.n	8000694 <__aeabi_fadd+0x208>
 800064c:	1b53      	subs	r3, r2, r5
 800064e:	2d00      	cmp	r5, #0
 8000650:	d17b      	bne.n	800074a <__aeabi_fadd+0x2be>
 8000652:	2e00      	cmp	r6, #0
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x1cc>
 8000656:	e086      	b.n	8000766 <__aeabi_fadd+0x2da>
 8000658:	1e5d      	subs	r5, r3, #1
 800065a:	2b01      	cmp	r3, #1
 800065c:	d100      	bne.n	8000660 <__aeabi_fadd+0x1d4>
 800065e:	e08b      	b.n	8000778 <__aeabi_fadd+0x2ec>
 8000660:	2bff      	cmp	r3, #255	@ 0xff
 8000662:	d002      	beq.n	800066a <__aeabi_fadd+0x1de>
 8000664:	002b      	movs	r3, r5
 8000666:	e075      	b.n	8000754 <__aeabi_fadd+0x2c8>
 8000668:	464c      	mov	r4, r9
 800066a:	4667      	mov	r7, ip
 800066c:	2f00      	cmp	r7, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0x1e6>
 8000670:	e789      	b.n	8000586 <__aeabi_fadd+0xfa>
 8000672:	2280      	movs	r2, #128	@ 0x80
 8000674:	03d2      	lsls	r2, r2, #15
 8000676:	433a      	orrs	r2, r7
 8000678:	0252      	lsls	r2, r2, #9
 800067a:	20ff      	movs	r0, #255	@ 0xff
 800067c:	0a52      	lsrs	r2, r2, #9
 800067e:	e784      	b.n	800058a <__aeabi_fadd+0xfe>
 8000680:	1a77      	subs	r7, r6, r1
 8000682:	017b      	lsls	r3, r7, #5
 8000684:	d46b      	bmi.n	800075e <__aeabi_fadd+0x2d2>
 8000686:	2f00      	cmp	r7, #0
 8000688:	d000      	beq.n	800068c <__aeabi_fadd+0x200>
 800068a:	e765      	b.n	8000558 <__aeabi_fadd+0xcc>
 800068c:	2400      	movs	r4, #0
 800068e:	2000      	movs	r0, #0
 8000690:	2200      	movs	r2, #0
 8000692:	e77a      	b.n	800058a <__aeabi_fadd+0xfe>
 8000694:	22fe      	movs	r2, #254	@ 0xfe
 8000696:	1c6b      	adds	r3, r5, #1
 8000698:	421a      	tst	r2, r3
 800069a:	d149      	bne.n	8000730 <__aeabi_fadd+0x2a4>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0x216>
 80006a0:	e09f      	b.n	80007e2 <__aeabi_fadd+0x356>
 80006a2:	2e00      	cmp	r6, #0
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x21c>
 80006a6:	e0ba      	b.n	800081e <__aeabi_fadd+0x392>
 80006a8:	2900      	cmp	r1, #0
 80006aa:	d100      	bne.n	80006ae <__aeabi_fadd+0x222>
 80006ac:	e0cf      	b.n	800084e <__aeabi_fadd+0x3c2>
 80006ae:	1872      	adds	r2, r6, r1
 80006b0:	0153      	lsls	r3, r2, #5
 80006b2:	d400      	bmi.n	80006b6 <__aeabi_fadd+0x22a>
 80006b4:	e0cd      	b.n	8000852 <__aeabi_fadd+0x3c6>
 80006b6:	0192      	lsls	r2, r2, #6
 80006b8:	2001      	movs	r0, #1
 80006ba:	0a52      	lsrs	r2, r2, #9
 80006bc:	e765      	b.n	800058a <__aeabi_fadd+0xfe>
 80006be:	2aff      	cmp	r2, #255	@ 0xff
 80006c0:	d0d2      	beq.n	8000668 <__aeabi_fadd+0x1dc>
 80006c2:	2080      	movs	r0, #128	@ 0x80
 80006c4:	04c0      	lsls	r0, r0, #19
 80006c6:	4306      	orrs	r6, r0
 80006c8:	2001      	movs	r0, #1
 80006ca:	2b1b      	cmp	r3, #27
 80006cc:	dc08      	bgt.n	80006e0 <__aeabi_fadd+0x254>
 80006ce:	0030      	movs	r0, r6
 80006d0:	2420      	movs	r4, #32
 80006d2:	40d8      	lsrs	r0, r3
 80006d4:	1ae3      	subs	r3, r4, r3
 80006d6:	409e      	lsls	r6, r3
 80006d8:	0033      	movs	r3, r6
 80006da:	1e5c      	subs	r4, r3, #1
 80006dc:	41a3      	sbcs	r3, r4
 80006de:	4318      	orrs	r0, r3
 80006e0:	464c      	mov	r4, r9
 80006e2:	0015      	movs	r5, r2
 80006e4:	1a0e      	subs	r6, r1, r0
 80006e6:	e732      	b.n	800054e <__aeabi_fadd+0xc2>
 80006e8:	0008      	movs	r0, r1
 80006ea:	2220      	movs	r2, #32
 80006ec:	40d8      	lsrs	r0, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	4099      	lsls	r1, r3
 80006f2:	000b      	movs	r3, r1
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	4193      	sbcs	r3, r2
 80006f8:	4303      	orrs	r3, r0
 80006fa:	18f6      	adds	r6, r6, r3
 80006fc:	0173      	lsls	r3, r6, #5
 80006fe:	d59b      	bpl.n	8000638 <__aeabi_fadd+0x1ac>
 8000700:	3501      	adds	r5, #1
 8000702:	2dff      	cmp	r5, #255	@ 0xff
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x27c>
 8000706:	e73e      	b.n	8000586 <__aeabi_fadd+0xfa>
 8000708:	2301      	movs	r3, #1
 800070a:	494d      	ldr	r1, [pc, #308]	@ (8000840 <__aeabi_fadd+0x3b4>)
 800070c:	0872      	lsrs	r2, r6, #1
 800070e:	4033      	ands	r3, r6
 8000710:	400a      	ands	r2, r1
 8000712:	431a      	orrs	r2, r3
 8000714:	0016      	movs	r6, r2
 8000716:	0753      	lsls	r3, r2, #29
 8000718:	d004      	beq.n	8000724 <__aeabi_fadd+0x298>
 800071a:	230f      	movs	r3, #15
 800071c:	4013      	ands	r3, r2
 800071e:	2b04      	cmp	r3, #4
 8000720:	d000      	beq.n	8000724 <__aeabi_fadd+0x298>
 8000722:	e72a      	b.n	800057a <__aeabi_fadd+0xee>
 8000724:	0173      	lsls	r3, r6, #5
 8000726:	d500      	bpl.n	800072a <__aeabi_fadd+0x29e>
 8000728:	e72a      	b.n	8000580 <__aeabi_fadd+0xf4>
 800072a:	002b      	movs	r3, r5
 800072c:	08f7      	lsrs	r7, r6, #3
 800072e:	e6f7      	b.n	8000520 <__aeabi_fadd+0x94>
 8000730:	2bff      	cmp	r3, #255	@ 0xff
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x2aa>
 8000734:	e727      	b.n	8000586 <__aeabi_fadd+0xfa>
 8000736:	1871      	adds	r1, r6, r1
 8000738:	0849      	lsrs	r1, r1, #1
 800073a:	074a      	lsls	r2, r1, #29
 800073c:	d02f      	beq.n	800079e <__aeabi_fadd+0x312>
 800073e:	220f      	movs	r2, #15
 8000740:	400a      	ands	r2, r1
 8000742:	2a04      	cmp	r2, #4
 8000744:	d02b      	beq.n	800079e <__aeabi_fadd+0x312>
 8000746:	1d0e      	adds	r6, r1, #4
 8000748:	e6e6      	b.n	8000518 <__aeabi_fadd+0x8c>
 800074a:	2aff      	cmp	r2, #255	@ 0xff
 800074c:	d08d      	beq.n	800066a <__aeabi_fadd+0x1de>
 800074e:	2080      	movs	r0, #128	@ 0x80
 8000750:	04c0      	lsls	r0, r0, #19
 8000752:	4306      	orrs	r6, r0
 8000754:	2b1b      	cmp	r3, #27
 8000756:	dd24      	ble.n	80007a2 <__aeabi_fadd+0x316>
 8000758:	0013      	movs	r3, r2
 800075a:	1d4e      	adds	r6, r1, #5
 800075c:	e6dc      	b.n	8000518 <__aeabi_fadd+0x8c>
 800075e:	464c      	mov	r4, r9
 8000760:	1b8f      	subs	r7, r1, r6
 8000762:	e6f9      	b.n	8000558 <__aeabi_fadd+0xcc>
 8000764:	464c      	mov	r4, r9
 8000766:	000e      	movs	r6, r1
 8000768:	e6d6      	b.n	8000518 <__aeabi_fadd+0x8c>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d149      	bne.n	8000802 <__aeabi_fadd+0x376>
 800076e:	2900      	cmp	r1, #0
 8000770:	d068      	beq.n	8000844 <__aeabi_fadd+0x3b8>
 8000772:	4667      	mov	r7, ip
 8000774:	464c      	mov	r4, r9
 8000776:	e77c      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000778:	1870      	adds	r0, r6, r1
 800077a:	0143      	lsls	r3, r0, #5
 800077c:	d574      	bpl.n	8000868 <__aeabi_fadd+0x3dc>
 800077e:	4930      	ldr	r1, [pc, #192]	@ (8000840 <__aeabi_fadd+0x3b4>)
 8000780:	0840      	lsrs	r0, r0, #1
 8000782:	4001      	ands	r1, r0
 8000784:	0743      	lsls	r3, r0, #29
 8000786:	d009      	beq.n	800079c <__aeabi_fadd+0x310>
 8000788:	230f      	movs	r3, #15
 800078a:	4003      	ands	r3, r0
 800078c:	2b04      	cmp	r3, #4
 800078e:	d005      	beq.n	800079c <__aeabi_fadd+0x310>
 8000790:	2302      	movs	r3, #2
 8000792:	1d0e      	adds	r6, r1, #4
 8000794:	e6c0      	b.n	8000518 <__aeabi_fadd+0x8c>
 8000796:	2301      	movs	r3, #1
 8000798:	08cf      	lsrs	r7, r1, #3
 800079a:	e6c1      	b.n	8000520 <__aeabi_fadd+0x94>
 800079c:	2302      	movs	r3, #2
 800079e:	08cf      	lsrs	r7, r1, #3
 80007a0:	e6be      	b.n	8000520 <__aeabi_fadd+0x94>
 80007a2:	2520      	movs	r5, #32
 80007a4:	0030      	movs	r0, r6
 80007a6:	40d8      	lsrs	r0, r3
 80007a8:	1aeb      	subs	r3, r5, r3
 80007aa:	409e      	lsls	r6, r3
 80007ac:	0033      	movs	r3, r6
 80007ae:	1e5d      	subs	r5, r3, #1
 80007b0:	41ab      	sbcs	r3, r5
 80007b2:	4303      	orrs	r3, r0
 80007b4:	0015      	movs	r5, r2
 80007b6:	185e      	adds	r6, r3, r1
 80007b8:	e7a0      	b.n	80006fc <__aeabi_fadd+0x270>
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fadd+0x334>
 80007be:	e765      	b.n	800068c <__aeabi_fadd+0x200>
 80007c0:	464c      	mov	r4, r9
 80007c2:	4667      	mov	r7, ip
 80007c4:	e6ac      	b.n	8000520 <__aeabi_fadd+0x94>
 80007c6:	1b8f      	subs	r7, r1, r6
 80007c8:	017b      	lsls	r3, r7, #5
 80007ca:	d52e      	bpl.n	800082a <__aeabi_fadd+0x39e>
 80007cc:	01bf      	lsls	r7, r7, #6
 80007ce:	09bf      	lsrs	r7, r7, #6
 80007d0:	0038      	movs	r0, r7
 80007d2:	f001 fa0f 	bl	8001bf4 <__clzsi2>
 80007d6:	003b      	movs	r3, r7
 80007d8:	3805      	subs	r0, #5
 80007da:	4083      	lsls	r3, r0
 80007dc:	464c      	mov	r4, r9
 80007de:	3501      	adds	r5, #1
 80007e0:	e710      	b.n	8000604 <__aeabi_fadd+0x178>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x35c>
 80007e6:	e740      	b.n	800066a <__aeabi_fadd+0x1de>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x362>
 80007ec:	e741      	b.n	8000672 <__aeabi_fadd+0x1e6>
 80007ee:	2380      	movs	r3, #128	@ 0x80
 80007f0:	03db      	lsls	r3, r3, #15
 80007f2:	429f      	cmp	r7, r3
 80007f4:	d200      	bcs.n	80007f8 <__aeabi_fadd+0x36c>
 80007f6:	e73c      	b.n	8000672 <__aeabi_fadd+0x1e6>
 80007f8:	459c      	cmp	ip, r3
 80007fa:	d300      	bcc.n	80007fe <__aeabi_fadd+0x372>
 80007fc:	e739      	b.n	8000672 <__aeabi_fadd+0x1e6>
 80007fe:	4667      	mov	r7, ip
 8000800:	e737      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000802:	2900      	cmp	r1, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x37c>
 8000806:	e734      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000808:	2380      	movs	r3, #128	@ 0x80
 800080a:	03db      	lsls	r3, r3, #15
 800080c:	429f      	cmp	r7, r3
 800080e:	d200      	bcs.n	8000812 <__aeabi_fadd+0x386>
 8000810:	e72f      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000812:	459c      	cmp	ip, r3
 8000814:	d300      	bcc.n	8000818 <__aeabi_fadd+0x38c>
 8000816:	e72c      	b.n	8000672 <__aeabi_fadd+0x1e6>
 8000818:	464c      	mov	r4, r9
 800081a:	4667      	mov	r7, ip
 800081c:	e729      	b.n	8000672 <__aeabi_fadd+0x1e6>
 800081e:	2900      	cmp	r1, #0
 8000820:	d100      	bne.n	8000824 <__aeabi_fadd+0x398>
 8000822:	e734      	b.n	800068e <__aeabi_fadd+0x202>
 8000824:	2300      	movs	r3, #0
 8000826:	08cf      	lsrs	r7, r1, #3
 8000828:	e67a      	b.n	8000520 <__aeabi_fadd+0x94>
 800082a:	464c      	mov	r4, r9
 800082c:	2301      	movs	r3, #1
 800082e:	08ff      	lsrs	r7, r7, #3
 8000830:	e676      	b.n	8000520 <__aeabi_fadd+0x94>
 8000832:	2f00      	cmp	r7, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x3ac>
 8000836:	e729      	b.n	800068c <__aeabi_fadd+0x200>
 8000838:	08ff      	lsrs	r7, r7, #3
 800083a:	e671      	b.n	8000520 <__aeabi_fadd+0x94>
 800083c:	fbffffff 	.word	0xfbffffff
 8000840:	7dffffff 	.word	0x7dffffff
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	2400      	movs	r4, #0
 8000848:	20ff      	movs	r0, #255	@ 0xff
 800084a:	03d2      	lsls	r2, r2, #15
 800084c:	e69d      	b.n	800058a <__aeabi_fadd+0xfe>
 800084e:	2300      	movs	r3, #0
 8000850:	e666      	b.n	8000520 <__aeabi_fadd+0x94>
 8000852:	2300      	movs	r3, #0
 8000854:	08d7      	lsrs	r7, r2, #3
 8000856:	e663      	b.n	8000520 <__aeabi_fadd+0x94>
 8000858:	2001      	movs	r0, #1
 800085a:	0172      	lsls	r2, r6, #5
 800085c:	d500      	bpl.n	8000860 <__aeabi_fadd+0x3d4>
 800085e:	e6e7      	b.n	8000630 <__aeabi_fadd+0x1a4>
 8000860:	0031      	movs	r1, r6
 8000862:	2300      	movs	r3, #0
 8000864:	08cf      	lsrs	r7, r1, #3
 8000866:	e65b      	b.n	8000520 <__aeabi_fadd+0x94>
 8000868:	2301      	movs	r3, #1
 800086a:	08c7      	lsrs	r7, r0, #3
 800086c:	e658      	b.n	8000520 <__aeabi_fadd+0x94>
 800086e:	46c0      	nop			@ (mov r8, r8)

08000870 <__aeabi_fdiv>:
 8000870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000872:	4646      	mov	r6, r8
 8000874:	464f      	mov	r7, r9
 8000876:	46d6      	mov	lr, sl
 8000878:	0245      	lsls	r5, r0, #9
 800087a:	b5c0      	push	{r6, r7, lr}
 800087c:	0fc3      	lsrs	r3, r0, #31
 800087e:	0047      	lsls	r7, r0, #1
 8000880:	4698      	mov	r8, r3
 8000882:	1c0e      	adds	r6, r1, #0
 8000884:	0a6d      	lsrs	r5, r5, #9
 8000886:	0e3f      	lsrs	r7, r7, #24
 8000888:	d05b      	beq.n	8000942 <__aeabi_fdiv+0xd2>
 800088a:	2fff      	cmp	r7, #255	@ 0xff
 800088c:	d021      	beq.n	80008d2 <__aeabi_fdiv+0x62>
 800088e:	2380      	movs	r3, #128	@ 0x80
 8000890:	00ed      	lsls	r5, r5, #3
 8000892:	04db      	lsls	r3, r3, #19
 8000894:	431d      	orrs	r5, r3
 8000896:	2300      	movs	r3, #0
 8000898:	4699      	mov	r9, r3
 800089a:	469a      	mov	sl, r3
 800089c:	3f7f      	subs	r7, #127	@ 0x7f
 800089e:	0274      	lsls	r4, r6, #9
 80008a0:	0073      	lsls	r3, r6, #1
 80008a2:	0a64      	lsrs	r4, r4, #9
 80008a4:	0e1b      	lsrs	r3, r3, #24
 80008a6:	0ff6      	lsrs	r6, r6, #31
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d020      	beq.n	80008ee <__aeabi_fdiv+0x7e>
 80008ac:	2bff      	cmp	r3, #255	@ 0xff
 80008ae:	d043      	beq.n	8000938 <__aeabi_fdiv+0xc8>
 80008b0:	2280      	movs	r2, #128	@ 0x80
 80008b2:	2000      	movs	r0, #0
 80008b4:	00e4      	lsls	r4, r4, #3
 80008b6:	04d2      	lsls	r2, r2, #19
 80008b8:	4314      	orrs	r4, r2
 80008ba:	3b7f      	subs	r3, #127	@ 0x7f
 80008bc:	4642      	mov	r2, r8
 80008be:	1aff      	subs	r7, r7, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	4072      	eors	r2, r6
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d900      	bls.n	80008ca <__aeabi_fdiv+0x5a>
 80008c8:	e09d      	b.n	8000a06 <__aeabi_fdiv+0x196>
 80008ca:	4971      	ldr	r1, [pc, #452]	@ (8000a90 <__aeabi_fdiv+0x220>)
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	58cb      	ldr	r3, [r1, r3]
 80008d0:	469f      	mov	pc, r3
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d15a      	bne.n	800098c <__aeabi_fdiv+0x11c>
 80008d6:	2308      	movs	r3, #8
 80008d8:	4699      	mov	r9, r3
 80008da:	3b06      	subs	r3, #6
 80008dc:	0274      	lsls	r4, r6, #9
 80008de:	469a      	mov	sl, r3
 80008e0:	0073      	lsls	r3, r6, #1
 80008e2:	27ff      	movs	r7, #255	@ 0xff
 80008e4:	0a64      	lsrs	r4, r4, #9
 80008e6:	0e1b      	lsrs	r3, r3, #24
 80008e8:	0ff6      	lsrs	r6, r6, #31
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1de      	bne.n	80008ac <__aeabi_fdiv+0x3c>
 80008ee:	2c00      	cmp	r4, #0
 80008f0:	d13b      	bne.n	800096a <__aeabi_fdiv+0xfa>
 80008f2:	2301      	movs	r3, #1
 80008f4:	4642      	mov	r2, r8
 80008f6:	4649      	mov	r1, r9
 80008f8:	4072      	eors	r2, r6
 80008fa:	4319      	orrs	r1, r3
 80008fc:	290e      	cmp	r1, #14
 80008fe:	d818      	bhi.n	8000932 <__aeabi_fdiv+0xc2>
 8000900:	4864      	ldr	r0, [pc, #400]	@ (8000a94 <__aeabi_fdiv+0x224>)
 8000902:	0089      	lsls	r1, r1, #2
 8000904:	5841      	ldr	r1, [r0, r1]
 8000906:	468f      	mov	pc, r1
 8000908:	4653      	mov	r3, sl
 800090a:	2b02      	cmp	r3, #2
 800090c:	d100      	bne.n	8000910 <__aeabi_fdiv+0xa0>
 800090e:	e0b8      	b.n	8000a82 <__aeabi_fdiv+0x212>
 8000910:	2b03      	cmp	r3, #3
 8000912:	d06e      	beq.n	80009f2 <__aeabi_fdiv+0x182>
 8000914:	4642      	mov	r2, r8
 8000916:	002c      	movs	r4, r5
 8000918:	2b01      	cmp	r3, #1
 800091a:	d140      	bne.n	800099e <__aeabi_fdiv+0x12e>
 800091c:	2000      	movs	r0, #0
 800091e:	2400      	movs	r4, #0
 8000920:	05c0      	lsls	r0, r0, #23
 8000922:	4320      	orrs	r0, r4
 8000924:	07d2      	lsls	r2, r2, #31
 8000926:	4310      	orrs	r0, r2
 8000928:	bce0      	pop	{r5, r6, r7}
 800092a:	46ba      	mov	sl, r7
 800092c:	46b1      	mov	r9, r6
 800092e:	46a8      	mov	r8, r5
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000932:	20ff      	movs	r0, #255	@ 0xff
 8000934:	2400      	movs	r4, #0
 8000936:	e7f3      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d120      	bne.n	800097e <__aeabi_fdiv+0x10e>
 800093c:	2302      	movs	r3, #2
 800093e:	3fff      	subs	r7, #255	@ 0xff
 8000940:	e7d8      	b.n	80008f4 <__aeabi_fdiv+0x84>
 8000942:	2d00      	cmp	r5, #0
 8000944:	d105      	bne.n	8000952 <__aeabi_fdiv+0xe2>
 8000946:	2304      	movs	r3, #4
 8000948:	4699      	mov	r9, r3
 800094a:	3b03      	subs	r3, #3
 800094c:	2700      	movs	r7, #0
 800094e:	469a      	mov	sl, r3
 8000950:	e7a5      	b.n	800089e <__aeabi_fdiv+0x2e>
 8000952:	0028      	movs	r0, r5
 8000954:	f001 f94e 	bl	8001bf4 <__clzsi2>
 8000958:	2776      	movs	r7, #118	@ 0x76
 800095a:	1f43      	subs	r3, r0, #5
 800095c:	409d      	lsls	r5, r3
 800095e:	2300      	movs	r3, #0
 8000960:	427f      	negs	r7, r7
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	1a3f      	subs	r7, r7, r0
 8000968:	e799      	b.n	800089e <__aeabi_fdiv+0x2e>
 800096a:	0020      	movs	r0, r4
 800096c:	f001 f942 	bl	8001bf4 <__clzsi2>
 8000970:	1f43      	subs	r3, r0, #5
 8000972:	409c      	lsls	r4, r3
 8000974:	2376      	movs	r3, #118	@ 0x76
 8000976:	425b      	negs	r3, r3
 8000978:	1a1b      	subs	r3, r3, r0
 800097a:	2000      	movs	r0, #0
 800097c:	e79e      	b.n	80008bc <__aeabi_fdiv+0x4c>
 800097e:	2303      	movs	r3, #3
 8000980:	464a      	mov	r2, r9
 8000982:	431a      	orrs	r2, r3
 8000984:	4691      	mov	r9, r2
 8000986:	2003      	movs	r0, #3
 8000988:	33fc      	adds	r3, #252	@ 0xfc
 800098a:	e797      	b.n	80008bc <__aeabi_fdiv+0x4c>
 800098c:	230c      	movs	r3, #12
 800098e:	4699      	mov	r9, r3
 8000990:	3b09      	subs	r3, #9
 8000992:	27ff      	movs	r7, #255	@ 0xff
 8000994:	469a      	mov	sl, r3
 8000996:	e782      	b.n	800089e <__aeabi_fdiv+0x2e>
 8000998:	2803      	cmp	r0, #3
 800099a:	d02c      	beq.n	80009f6 <__aeabi_fdiv+0x186>
 800099c:	0032      	movs	r2, r6
 800099e:	0038      	movs	r0, r7
 80009a0:	307f      	adds	r0, #127	@ 0x7f
 80009a2:	2800      	cmp	r0, #0
 80009a4:	dd47      	ble.n	8000a36 <__aeabi_fdiv+0x1c6>
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d004      	beq.n	80009b4 <__aeabi_fdiv+0x144>
 80009aa:	230f      	movs	r3, #15
 80009ac:	4023      	ands	r3, r4
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fdiv+0x144>
 80009b2:	3404      	adds	r4, #4
 80009b4:	0123      	lsls	r3, r4, #4
 80009b6:	d503      	bpl.n	80009c0 <__aeabi_fdiv+0x150>
 80009b8:	0038      	movs	r0, r7
 80009ba:	4b37      	ldr	r3, [pc, #220]	@ (8000a98 <__aeabi_fdiv+0x228>)
 80009bc:	3080      	adds	r0, #128	@ 0x80
 80009be:	401c      	ands	r4, r3
 80009c0:	28fe      	cmp	r0, #254	@ 0xfe
 80009c2:	dcb6      	bgt.n	8000932 <__aeabi_fdiv+0xc2>
 80009c4:	01a4      	lsls	r4, r4, #6
 80009c6:	0a64      	lsrs	r4, r4, #9
 80009c8:	b2c0      	uxtb	r0, r0
 80009ca:	e7a9      	b.n	8000920 <__aeabi_fdiv+0xb0>
 80009cc:	2480      	movs	r4, #128	@ 0x80
 80009ce:	2200      	movs	r2, #0
 80009d0:	20ff      	movs	r0, #255	@ 0xff
 80009d2:	03e4      	lsls	r4, r4, #15
 80009d4:	e7a4      	b.n	8000920 <__aeabi_fdiv+0xb0>
 80009d6:	2380      	movs	r3, #128	@ 0x80
 80009d8:	03db      	lsls	r3, r3, #15
 80009da:	421d      	tst	r5, r3
 80009dc:	d001      	beq.n	80009e2 <__aeabi_fdiv+0x172>
 80009de:	421c      	tst	r4, r3
 80009e0:	d00b      	beq.n	80009fa <__aeabi_fdiv+0x18a>
 80009e2:	2480      	movs	r4, #128	@ 0x80
 80009e4:	03e4      	lsls	r4, r4, #15
 80009e6:	432c      	orrs	r4, r5
 80009e8:	0264      	lsls	r4, r4, #9
 80009ea:	4642      	mov	r2, r8
 80009ec:	20ff      	movs	r0, #255	@ 0xff
 80009ee:	0a64      	lsrs	r4, r4, #9
 80009f0:	e796      	b.n	8000920 <__aeabi_fdiv+0xb0>
 80009f2:	4646      	mov	r6, r8
 80009f4:	002c      	movs	r4, r5
 80009f6:	2380      	movs	r3, #128	@ 0x80
 80009f8:	03db      	lsls	r3, r3, #15
 80009fa:	431c      	orrs	r4, r3
 80009fc:	0264      	lsls	r4, r4, #9
 80009fe:	0032      	movs	r2, r6
 8000a00:	20ff      	movs	r0, #255	@ 0xff
 8000a02:	0a64      	lsrs	r4, r4, #9
 8000a04:	e78c      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a06:	016d      	lsls	r5, r5, #5
 8000a08:	0160      	lsls	r0, r4, #5
 8000a0a:	4285      	cmp	r5, r0
 8000a0c:	d22d      	bcs.n	8000a6a <__aeabi_fdiv+0x1fa>
 8000a0e:	231b      	movs	r3, #27
 8000a10:	2400      	movs	r4, #0
 8000a12:	3f01      	subs	r7, #1
 8000a14:	2601      	movs	r6, #1
 8000a16:	0029      	movs	r1, r5
 8000a18:	0064      	lsls	r4, r4, #1
 8000a1a:	006d      	lsls	r5, r5, #1
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	db01      	blt.n	8000a24 <__aeabi_fdiv+0x1b4>
 8000a20:	4285      	cmp	r5, r0
 8000a22:	d301      	bcc.n	8000a28 <__aeabi_fdiv+0x1b8>
 8000a24:	1a2d      	subs	r5, r5, r0
 8000a26:	4334      	orrs	r4, r6
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1f3      	bne.n	8000a16 <__aeabi_fdiv+0x1a6>
 8000a2e:	1e6b      	subs	r3, r5, #1
 8000a30:	419d      	sbcs	r5, r3
 8000a32:	432c      	orrs	r4, r5
 8000a34:	e7b3      	b.n	800099e <__aeabi_fdiv+0x12e>
 8000a36:	2301      	movs	r3, #1
 8000a38:	1a1b      	subs	r3, r3, r0
 8000a3a:	2b1b      	cmp	r3, #27
 8000a3c:	dd00      	ble.n	8000a40 <__aeabi_fdiv+0x1d0>
 8000a3e:	e76d      	b.n	800091c <__aeabi_fdiv+0xac>
 8000a40:	0021      	movs	r1, r4
 8000a42:	379e      	adds	r7, #158	@ 0x9e
 8000a44:	40d9      	lsrs	r1, r3
 8000a46:	40bc      	lsls	r4, r7
 8000a48:	000b      	movs	r3, r1
 8000a4a:	1e61      	subs	r1, r4, #1
 8000a4c:	418c      	sbcs	r4, r1
 8000a4e:	4323      	orrs	r3, r4
 8000a50:	0759      	lsls	r1, r3, #29
 8000a52:	d004      	beq.n	8000a5e <__aeabi_fdiv+0x1ee>
 8000a54:	210f      	movs	r1, #15
 8000a56:	4019      	ands	r1, r3
 8000a58:	2904      	cmp	r1, #4
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_fdiv+0x1ee>
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	0159      	lsls	r1, r3, #5
 8000a60:	d413      	bmi.n	8000a8a <__aeabi_fdiv+0x21a>
 8000a62:	019b      	lsls	r3, r3, #6
 8000a64:	2000      	movs	r0, #0
 8000a66:	0a5c      	lsrs	r4, r3, #9
 8000a68:	e75a      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a6a:	231a      	movs	r3, #26
 8000a6c:	2401      	movs	r4, #1
 8000a6e:	1a2d      	subs	r5, r5, r0
 8000a70:	e7d0      	b.n	8000a14 <__aeabi_fdiv+0x1a4>
 8000a72:	1e98      	subs	r0, r3, #2
 8000a74:	4243      	negs	r3, r0
 8000a76:	4158      	adcs	r0, r3
 8000a78:	4240      	negs	r0, r0
 8000a7a:	0032      	movs	r2, r6
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	b2c0      	uxtb	r0, r0
 8000a80:	e74e      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a82:	4642      	mov	r2, r8
 8000a84:	20ff      	movs	r0, #255	@ 0xff
 8000a86:	2400      	movs	r4, #0
 8000a88:	e74a      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	e747      	b.n	8000920 <__aeabi_fdiv+0xb0>
 8000a90:	08007c24 	.word	0x08007c24
 8000a94:	08007c64 	.word	0x08007c64
 8000a98:	f7ffffff 	.word	0xf7ffffff

08000a9c <__eqsf2>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	0042      	lsls	r2, r0, #1
 8000aa0:	024e      	lsls	r6, r1, #9
 8000aa2:	004c      	lsls	r4, r1, #1
 8000aa4:	0245      	lsls	r5, r0, #9
 8000aa6:	0a6d      	lsrs	r5, r5, #9
 8000aa8:	0e12      	lsrs	r2, r2, #24
 8000aaa:	0fc3      	lsrs	r3, r0, #31
 8000aac:	0a76      	lsrs	r6, r6, #9
 8000aae:	0e24      	lsrs	r4, r4, #24
 8000ab0:	0fc9      	lsrs	r1, r1, #31
 8000ab2:	2aff      	cmp	r2, #255	@ 0xff
 8000ab4:	d010      	beq.n	8000ad8 <__eqsf2+0x3c>
 8000ab6:	2cff      	cmp	r4, #255	@ 0xff
 8000ab8:	d00c      	beq.n	8000ad4 <__eqsf2+0x38>
 8000aba:	2001      	movs	r0, #1
 8000abc:	42a2      	cmp	r2, r4
 8000abe:	d10a      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ac0:	42b5      	cmp	r5, r6
 8000ac2:	d108      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	d00f      	beq.n	8000ae8 <__eqsf2+0x4c>
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	d104      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000acc:	0028      	movs	r0, r5
 8000ace:	1e43      	subs	r3, r0, #1
 8000ad0:	4198      	sbcs	r0, r3
 8000ad2:	e000      	b.n	8000ad6 <__eqsf2+0x3a>
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
 8000ad8:	2001      	movs	r0, #1
 8000ada:	2cff      	cmp	r4, #255	@ 0xff
 8000adc:	d1fb      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ade:	4335      	orrs	r5, r6
 8000ae0:	d1f9      	bne.n	8000ad6 <__eqsf2+0x3a>
 8000ae2:	404b      	eors	r3, r1
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	e7f6      	b.n	8000ad6 <__eqsf2+0x3a>
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e7f4      	b.n	8000ad6 <__eqsf2+0x3a>

08000aec <__gesf2>:
 8000aec:	b530      	push	{r4, r5, lr}
 8000aee:	0042      	lsls	r2, r0, #1
 8000af0:	0244      	lsls	r4, r0, #9
 8000af2:	024d      	lsls	r5, r1, #9
 8000af4:	0fc3      	lsrs	r3, r0, #31
 8000af6:	0048      	lsls	r0, r1, #1
 8000af8:	0a64      	lsrs	r4, r4, #9
 8000afa:	0e12      	lsrs	r2, r2, #24
 8000afc:	0a6d      	lsrs	r5, r5, #9
 8000afe:	0e00      	lsrs	r0, r0, #24
 8000b00:	0fc9      	lsrs	r1, r1, #31
 8000b02:	2aff      	cmp	r2, #255	@ 0xff
 8000b04:	d018      	beq.n	8000b38 <__gesf2+0x4c>
 8000b06:	28ff      	cmp	r0, #255	@ 0xff
 8000b08:	d00a      	beq.n	8000b20 <__gesf2+0x34>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d11e      	bne.n	8000b4c <__gesf2+0x60>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d10a      	bne.n	8000b28 <__gesf2+0x3c>
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d029      	beq.n	8000b6a <__gesf2+0x7e>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d12d      	bne.n	8000b76 <__gesf2+0x8a>
 8000b1a:	0048      	lsls	r0, r1, #1
 8000b1c:	3801      	subs	r0, #1
 8000b1e:	bd30      	pop	{r4, r5, pc}
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d125      	bne.n	8000b70 <__gesf2+0x84>
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	d101      	bne.n	8000b2c <__gesf2+0x40>
 8000b28:	2c00      	cmp	r4, #0
 8000b2a:	d0f6      	beq.n	8000b1a <__gesf2+0x2e>
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	d019      	beq.n	8000b64 <__gesf2+0x78>
 8000b30:	2001      	movs	r0, #1
 8000b32:	425b      	negs	r3, r3
 8000b34:	4318      	orrs	r0, r3
 8000b36:	e7f2      	b.n	8000b1e <__gesf2+0x32>
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	d119      	bne.n	8000b70 <__gesf2+0x84>
 8000b3c:	28ff      	cmp	r0, #255	@ 0xff
 8000b3e:	d1f7      	bne.n	8000b30 <__gesf2+0x44>
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d115      	bne.n	8000b70 <__gesf2+0x84>
 8000b44:	2000      	movs	r0, #0
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d1f2      	bne.n	8000b30 <__gesf2+0x44>
 8000b4a:	e7e8      	b.n	8000b1e <__gesf2+0x32>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d0ef      	beq.n	8000b30 <__gesf2+0x44>
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d1ed      	bne.n	8000b30 <__gesf2+0x44>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	dceb      	bgt.n	8000b30 <__gesf2+0x44>
 8000b58:	db04      	blt.n	8000b64 <__gesf2+0x78>
 8000b5a:	42ac      	cmp	r4, r5
 8000b5c:	d8e8      	bhi.n	8000b30 <__gesf2+0x44>
 8000b5e:	2000      	movs	r0, #0
 8000b60:	42ac      	cmp	r4, r5
 8000b62:	d2dc      	bcs.n	8000b1e <__gesf2+0x32>
 8000b64:	0058      	lsls	r0, r3, #1
 8000b66:	3801      	subs	r0, #1
 8000b68:	e7d9      	b.n	8000b1e <__gesf2+0x32>
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d0d7      	beq.n	8000b1e <__gesf2+0x32>
 8000b6e:	e7df      	b.n	8000b30 <__gesf2+0x44>
 8000b70:	2002      	movs	r0, #2
 8000b72:	4240      	negs	r0, r0
 8000b74:	e7d3      	b.n	8000b1e <__gesf2+0x32>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d1da      	bne.n	8000b30 <__gesf2+0x44>
 8000b7a:	e7ee      	b.n	8000b5a <__gesf2+0x6e>

08000b7c <__lesf2>:
 8000b7c:	b530      	push	{r4, r5, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0244      	lsls	r4, r0, #9
 8000b82:	024d      	lsls	r5, r1, #9
 8000b84:	0fc3      	lsrs	r3, r0, #31
 8000b86:	0048      	lsls	r0, r1, #1
 8000b88:	0a64      	lsrs	r4, r4, #9
 8000b8a:	0e12      	lsrs	r2, r2, #24
 8000b8c:	0a6d      	lsrs	r5, r5, #9
 8000b8e:	0e00      	lsrs	r0, r0, #24
 8000b90:	0fc9      	lsrs	r1, r1, #31
 8000b92:	2aff      	cmp	r2, #255	@ 0xff
 8000b94:	d017      	beq.n	8000bc6 <__lesf2+0x4a>
 8000b96:	28ff      	cmp	r0, #255	@ 0xff
 8000b98:	d00a      	beq.n	8000bb0 <__lesf2+0x34>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d11b      	bne.n	8000bd6 <__lesf2+0x5a>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d10a      	bne.n	8000bb8 <__lesf2+0x3c>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d01d      	beq.n	8000be2 <__lesf2+0x66>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d12d      	bne.n	8000c06 <__lesf2+0x8a>
 8000baa:	0048      	lsls	r0, r1, #1
 8000bac:	3801      	subs	r0, #1
 8000bae:	e011      	b.n	8000bd4 <__lesf2+0x58>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d10e      	bne.n	8000bd2 <__lesf2+0x56>
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d101      	bne.n	8000bbc <__lesf2+0x40>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d0f6      	beq.n	8000baa <__lesf2+0x2e>
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d10c      	bne.n	8000bda <__lesf2+0x5e>
 8000bc0:	0058      	lsls	r0, r3, #1
 8000bc2:	3801      	subs	r0, #1
 8000bc4:	e006      	b.n	8000bd4 <__lesf2+0x58>
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	d103      	bne.n	8000bd2 <__lesf2+0x56>
 8000bca:	28ff      	cmp	r0, #255	@ 0xff
 8000bcc:	d105      	bne.n	8000bda <__lesf2+0x5e>
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d015      	beq.n	8000bfe <__lesf2+0x82>
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	bd30      	pop	{r4, r5, pc}
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d106      	bne.n	8000be8 <__lesf2+0x6c>
 8000bda:	2001      	movs	r0, #1
 8000bdc:	425b      	negs	r3, r3
 8000bde:	4318      	orrs	r0, r3
 8000be0:	e7f8      	b.n	8000bd4 <__lesf2+0x58>
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	d0f6      	beq.n	8000bd4 <__lesf2+0x58>
 8000be6:	e7f8      	b.n	8000bda <__lesf2+0x5e>
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d1f6      	bne.n	8000bda <__lesf2+0x5e>
 8000bec:	4282      	cmp	r2, r0
 8000bee:	dcf4      	bgt.n	8000bda <__lesf2+0x5e>
 8000bf0:	dbe6      	blt.n	8000bc0 <__lesf2+0x44>
 8000bf2:	42ac      	cmp	r4, r5
 8000bf4:	d8f1      	bhi.n	8000bda <__lesf2+0x5e>
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	42ac      	cmp	r4, r5
 8000bfa:	d2eb      	bcs.n	8000bd4 <__lesf2+0x58>
 8000bfc:	e7e0      	b.n	8000bc0 <__lesf2+0x44>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d1ea      	bne.n	8000bda <__lesf2+0x5e>
 8000c04:	e7e6      	b.n	8000bd4 <__lesf2+0x58>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d1e7      	bne.n	8000bda <__lesf2+0x5e>
 8000c0a:	e7f2      	b.n	8000bf2 <__lesf2+0x76>

08000c0c <__aeabi_fmul>:
 8000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0e:	464f      	mov	r7, r9
 8000c10:	4646      	mov	r6, r8
 8000c12:	46d6      	mov	lr, sl
 8000c14:	0044      	lsls	r4, r0, #1
 8000c16:	b5c0      	push	{r6, r7, lr}
 8000c18:	0246      	lsls	r6, r0, #9
 8000c1a:	1c0f      	adds	r7, r1, #0
 8000c1c:	0a76      	lsrs	r6, r6, #9
 8000c1e:	0e24      	lsrs	r4, r4, #24
 8000c20:	0fc5      	lsrs	r5, r0, #31
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_fmul+0x1c>
 8000c26:	e0da      	b.n	8000dde <__aeabi_fmul+0x1d2>
 8000c28:	2cff      	cmp	r4, #255	@ 0xff
 8000c2a:	d074      	beq.n	8000d16 <__aeabi_fmul+0x10a>
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	00f6      	lsls	r6, r6, #3
 8000c30:	04db      	lsls	r3, r3, #19
 8000c32:	431e      	orrs	r6, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	4699      	mov	r9, r3
 8000c38:	469a      	mov	sl, r3
 8000c3a:	3c7f      	subs	r4, #127	@ 0x7f
 8000c3c:	027b      	lsls	r3, r7, #9
 8000c3e:	0a5b      	lsrs	r3, r3, #9
 8000c40:	4698      	mov	r8, r3
 8000c42:	007b      	lsls	r3, r7, #1
 8000c44:	0e1b      	lsrs	r3, r3, #24
 8000c46:	0fff      	lsrs	r7, r7, #31
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d074      	beq.n	8000d36 <__aeabi_fmul+0x12a>
 8000c4c:	2bff      	cmp	r3, #255	@ 0xff
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fmul+0x46>
 8000c50:	e08e      	b.n	8000d70 <__aeabi_fmul+0x164>
 8000c52:	4642      	mov	r2, r8
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	00d2      	lsls	r2, r2, #3
 8000c58:	04c9      	lsls	r1, r1, #19
 8000c5a:	4311      	orrs	r1, r2
 8000c5c:	3b7f      	subs	r3, #127	@ 0x7f
 8000c5e:	002a      	movs	r2, r5
 8000c60:	18e4      	adds	r4, r4, r3
 8000c62:	464b      	mov	r3, r9
 8000c64:	407a      	eors	r2, r7
 8000c66:	4688      	mov	r8, r1
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	2b0a      	cmp	r3, #10
 8000c6c:	dc75      	bgt.n	8000d5a <__aeabi_fmul+0x14e>
 8000c6e:	464b      	mov	r3, r9
 8000c70:	2000      	movs	r0, #0
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	dd0f      	ble.n	8000c96 <__aeabi_fmul+0x8a>
 8000c76:	4649      	mov	r1, r9
 8000c78:	2301      	movs	r3, #1
 8000c7a:	408b      	lsls	r3, r1
 8000c7c:	21a6      	movs	r1, #166	@ 0xa6
 8000c7e:	00c9      	lsls	r1, r1, #3
 8000c80:	420b      	tst	r3, r1
 8000c82:	d169      	bne.n	8000d58 <__aeabi_fmul+0x14c>
 8000c84:	2190      	movs	r1, #144	@ 0x90
 8000c86:	0089      	lsls	r1, r1, #2
 8000c88:	420b      	tst	r3, r1
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fmul+0x82>
 8000c8c:	e100      	b.n	8000e90 <__aeabi_fmul+0x284>
 8000c8e:	2188      	movs	r1, #136	@ 0x88
 8000c90:	4219      	tst	r1, r3
 8000c92:	d000      	beq.n	8000c96 <__aeabi_fmul+0x8a>
 8000c94:	e0f5      	b.n	8000e82 <__aeabi_fmul+0x276>
 8000c96:	4641      	mov	r1, r8
 8000c98:	0409      	lsls	r1, r1, #16
 8000c9a:	0c09      	lsrs	r1, r1, #16
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	0008      	movs	r0, r1
 8000ca0:	0c35      	lsrs	r5, r6, #16
 8000ca2:	0436      	lsls	r6, r6, #16
 8000ca4:	0c1b      	lsrs	r3, r3, #16
 8000ca6:	0c36      	lsrs	r6, r6, #16
 8000ca8:	4370      	muls	r0, r6
 8000caa:	4369      	muls	r1, r5
 8000cac:	435e      	muls	r6, r3
 8000cae:	435d      	muls	r5, r3
 8000cb0:	1876      	adds	r6, r6, r1
 8000cb2:	0c03      	lsrs	r3, r0, #16
 8000cb4:	199b      	adds	r3, r3, r6
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	d903      	bls.n	8000cc2 <__aeabi_fmul+0xb6>
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	0249      	lsls	r1, r1, #9
 8000cbe:	468c      	mov	ip, r1
 8000cc0:	4465      	add	r5, ip
 8000cc2:	0400      	lsls	r0, r0, #16
 8000cc4:	0419      	lsls	r1, r3, #16
 8000cc6:	0c00      	lsrs	r0, r0, #16
 8000cc8:	1809      	adds	r1, r1, r0
 8000cca:	018e      	lsls	r6, r1, #6
 8000ccc:	1e70      	subs	r0, r6, #1
 8000cce:	4186      	sbcs	r6, r0
 8000cd0:	0c1b      	lsrs	r3, r3, #16
 8000cd2:	0e89      	lsrs	r1, r1, #26
 8000cd4:	195b      	adds	r3, r3, r5
 8000cd6:	430e      	orrs	r6, r1
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	431e      	orrs	r6, r3
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	d46c      	bmi.n	8000dba <__aeabi_fmul+0x1ae>
 8000ce0:	0023      	movs	r3, r4
 8000ce2:	337f      	adds	r3, #127	@ 0x7f
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	dc00      	bgt.n	8000cea <__aeabi_fmul+0xde>
 8000ce8:	e0b1      	b.n	8000e4e <__aeabi_fmul+0x242>
 8000cea:	0015      	movs	r5, r2
 8000cec:	0771      	lsls	r1, r6, #29
 8000cee:	d00b      	beq.n	8000d08 <__aeabi_fmul+0xfc>
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	0021      	movs	r1, r4
 8000cf4:	4030      	ands	r0, r6
 8000cf6:	2804      	cmp	r0, #4
 8000cf8:	d006      	beq.n	8000d08 <__aeabi_fmul+0xfc>
 8000cfa:	3604      	adds	r6, #4
 8000cfc:	0132      	lsls	r2, r6, #4
 8000cfe:	d503      	bpl.n	8000d08 <__aeabi_fmul+0xfc>
 8000d00:	4b6e      	ldr	r3, [pc, #440]	@ (8000ebc <__aeabi_fmul+0x2b0>)
 8000d02:	401e      	ands	r6, r3
 8000d04:	000b      	movs	r3, r1
 8000d06:	3380      	adds	r3, #128	@ 0x80
 8000d08:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d0a:	dd00      	ble.n	8000d0e <__aeabi_fmul+0x102>
 8000d0c:	e0bd      	b.n	8000e8a <__aeabi_fmul+0x27e>
 8000d0e:	01b2      	lsls	r2, r6, #6
 8000d10:	0a52      	lsrs	r2, r2, #9
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	e048      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d000      	beq.n	8000d1c <__aeabi_fmul+0x110>
 8000d1a:	e092      	b.n	8000e42 <__aeabi_fmul+0x236>
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	4699      	mov	r9, r3
 8000d20:	3b06      	subs	r3, #6
 8000d22:	469a      	mov	sl, r3
 8000d24:	027b      	lsls	r3, r7, #9
 8000d26:	0a5b      	lsrs	r3, r3, #9
 8000d28:	4698      	mov	r8, r3
 8000d2a:	007b      	lsls	r3, r7, #1
 8000d2c:	24ff      	movs	r4, #255	@ 0xff
 8000d2e:	0e1b      	lsrs	r3, r3, #24
 8000d30:	0fff      	lsrs	r7, r7, #31
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d18a      	bne.n	8000c4c <__aeabi_fmul+0x40>
 8000d36:	4642      	mov	r2, r8
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d164      	bne.n	8000e06 <__aeabi_fmul+0x1fa>
 8000d3c:	4649      	mov	r1, r9
 8000d3e:	3201      	adds	r2, #1
 8000d40:	4311      	orrs	r1, r2
 8000d42:	4689      	mov	r9, r1
 8000d44:	290a      	cmp	r1, #10
 8000d46:	dc08      	bgt.n	8000d5a <__aeabi_fmul+0x14e>
 8000d48:	407d      	eors	r5, r7
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	b2ea      	uxtb	r2, r5
 8000d4e:	2902      	cmp	r1, #2
 8000d50:	dc91      	bgt.n	8000c76 <__aeabi_fmul+0x6a>
 8000d52:	0015      	movs	r5, r2
 8000d54:	2200      	movs	r2, #0
 8000d56:	e027      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000d58:	0015      	movs	r5, r2
 8000d5a:	4653      	mov	r3, sl
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_fmul+0x156>
 8000d60:	e093      	b.n	8000e8a <__aeabi_fmul+0x27e>
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d01a      	beq.n	8000d9c <__aeabi_fmul+0x190>
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d12c      	bne.n	8000dc4 <__aeabi_fmul+0x1b8>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	e01b      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000d70:	4643      	mov	r3, r8
 8000d72:	34ff      	adds	r4, #255	@ 0xff
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d055      	beq.n	8000e24 <__aeabi_fmul+0x218>
 8000d78:	2103      	movs	r1, #3
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	0019      	movs	r1, r3
 8000d80:	2b0a      	cmp	r3, #10
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_fmul+0x17a>
 8000d84:	e092      	b.n	8000eac <__aeabi_fmul+0x2a0>
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d000      	beq.n	8000d8c <__aeabi_fmul+0x180>
 8000d8a:	e08c      	b.n	8000ea6 <__aeabi_fmul+0x29a>
 8000d8c:	2280      	movs	r2, #128	@ 0x80
 8000d8e:	03d2      	lsls	r2, r2, #15
 8000d90:	4216      	tst	r6, r2
 8000d92:	d003      	beq.n	8000d9c <__aeabi_fmul+0x190>
 8000d94:	4643      	mov	r3, r8
 8000d96:	4213      	tst	r3, r2
 8000d98:	d100      	bne.n	8000d9c <__aeabi_fmul+0x190>
 8000d9a:	e07d      	b.n	8000e98 <__aeabi_fmul+0x28c>
 8000d9c:	2280      	movs	r2, #128	@ 0x80
 8000d9e:	03d2      	lsls	r2, r2, #15
 8000da0:	4332      	orrs	r2, r6
 8000da2:	0252      	lsls	r2, r2, #9
 8000da4:	0a52      	lsrs	r2, r2, #9
 8000da6:	23ff      	movs	r3, #255	@ 0xff
 8000da8:	05d8      	lsls	r0, r3, #23
 8000daa:	07ed      	lsls	r5, r5, #31
 8000dac:	4310      	orrs	r0, r2
 8000dae:	4328      	orrs	r0, r5
 8000db0:	bce0      	pop	{r5, r6, r7}
 8000db2:	46ba      	mov	sl, r7
 8000db4:	46b1      	mov	r9, r6
 8000db6:	46a8      	mov	r8, r5
 8000db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dba:	2301      	movs	r3, #1
 8000dbc:	0015      	movs	r5, r2
 8000dbe:	0871      	lsrs	r1, r6, #1
 8000dc0:	401e      	ands	r6, r3
 8000dc2:	430e      	orrs	r6, r1
 8000dc4:	0023      	movs	r3, r4
 8000dc6:	3380      	adds	r3, #128	@ 0x80
 8000dc8:	1c61      	adds	r1, r4, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dd41      	ble.n	8000e52 <__aeabi_fmul+0x246>
 8000dce:	0772      	lsls	r2, r6, #29
 8000dd0:	d094      	beq.n	8000cfc <__aeabi_fmul+0xf0>
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	4032      	ands	r2, r6
 8000dd6:	2a04      	cmp	r2, #4
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_fmul+0x1d0>
 8000dda:	e78e      	b.n	8000cfa <__aeabi_fmul+0xee>
 8000ddc:	e78e      	b.n	8000cfc <__aeabi_fmul+0xf0>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	d105      	bne.n	8000dee <__aeabi_fmul+0x1e2>
 8000de2:	2304      	movs	r3, #4
 8000de4:	4699      	mov	r9, r3
 8000de6:	3b03      	subs	r3, #3
 8000de8:	2400      	movs	r4, #0
 8000dea:	469a      	mov	sl, r3
 8000dec:	e726      	b.n	8000c3c <__aeabi_fmul+0x30>
 8000dee:	0030      	movs	r0, r6
 8000df0:	f000 ff00 	bl	8001bf4 <__clzsi2>
 8000df4:	2476      	movs	r4, #118	@ 0x76
 8000df6:	1f43      	subs	r3, r0, #5
 8000df8:	409e      	lsls	r6, r3
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	4264      	negs	r4, r4
 8000dfe:	4699      	mov	r9, r3
 8000e00:	469a      	mov	sl, r3
 8000e02:	1a24      	subs	r4, r4, r0
 8000e04:	e71a      	b.n	8000c3c <__aeabi_fmul+0x30>
 8000e06:	4640      	mov	r0, r8
 8000e08:	f000 fef4 	bl	8001bf4 <__clzsi2>
 8000e0c:	464b      	mov	r3, r9
 8000e0e:	1a24      	subs	r4, r4, r0
 8000e10:	3c76      	subs	r4, #118	@ 0x76
 8000e12:	2b0a      	cmp	r3, #10
 8000e14:	dca1      	bgt.n	8000d5a <__aeabi_fmul+0x14e>
 8000e16:	4643      	mov	r3, r8
 8000e18:	3805      	subs	r0, #5
 8000e1a:	4083      	lsls	r3, r0
 8000e1c:	407d      	eors	r5, r7
 8000e1e:	4698      	mov	r8, r3
 8000e20:	b2ea      	uxtb	r2, r5
 8000e22:	e724      	b.n	8000c6e <__aeabi_fmul+0x62>
 8000e24:	464a      	mov	r2, r9
 8000e26:	3302      	adds	r3, #2
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	002a      	movs	r2, r5
 8000e2c:	407a      	eors	r2, r7
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	2b0a      	cmp	r3, #10
 8000e32:	dc92      	bgt.n	8000d5a <__aeabi_fmul+0x14e>
 8000e34:	4649      	mov	r1, r9
 8000e36:	0015      	movs	r5, r2
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	d026      	beq.n	8000e8a <__aeabi_fmul+0x27e>
 8000e3c:	4699      	mov	r9, r3
 8000e3e:	2002      	movs	r0, #2
 8000e40:	e719      	b.n	8000c76 <__aeabi_fmul+0x6a>
 8000e42:	230c      	movs	r3, #12
 8000e44:	4699      	mov	r9, r3
 8000e46:	3b09      	subs	r3, #9
 8000e48:	24ff      	movs	r4, #255	@ 0xff
 8000e4a:	469a      	mov	sl, r3
 8000e4c:	e6f6      	b.n	8000c3c <__aeabi_fmul+0x30>
 8000e4e:	0015      	movs	r5, r2
 8000e50:	0021      	movs	r1, r4
 8000e52:	2201      	movs	r2, #1
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b1b      	cmp	r3, #27
 8000e58:	dd00      	ble.n	8000e5c <__aeabi_fmul+0x250>
 8000e5a:	e786      	b.n	8000d6a <__aeabi_fmul+0x15e>
 8000e5c:	319e      	adds	r1, #158	@ 0x9e
 8000e5e:	0032      	movs	r2, r6
 8000e60:	408e      	lsls	r6, r1
 8000e62:	40da      	lsrs	r2, r3
 8000e64:	1e73      	subs	r3, r6, #1
 8000e66:	419e      	sbcs	r6, r3
 8000e68:	4332      	orrs	r2, r6
 8000e6a:	0753      	lsls	r3, r2, #29
 8000e6c:	d004      	beq.n	8000e78 <__aeabi_fmul+0x26c>
 8000e6e:	230f      	movs	r3, #15
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d000      	beq.n	8000e78 <__aeabi_fmul+0x26c>
 8000e76:	3204      	adds	r2, #4
 8000e78:	0153      	lsls	r3, r2, #5
 8000e7a:	d510      	bpl.n	8000e9e <__aeabi_fmul+0x292>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	e792      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000e82:	003d      	movs	r5, r7
 8000e84:	4646      	mov	r6, r8
 8000e86:	4682      	mov	sl, r0
 8000e88:	e767      	b.n	8000d5a <__aeabi_fmul+0x14e>
 8000e8a:	23ff      	movs	r3, #255	@ 0xff
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e78b      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000e90:	2280      	movs	r2, #128	@ 0x80
 8000e92:	2500      	movs	r5, #0
 8000e94:	03d2      	lsls	r2, r2, #15
 8000e96:	e786      	b.n	8000da6 <__aeabi_fmul+0x19a>
 8000e98:	003d      	movs	r5, r7
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	e783      	b.n	8000da6 <__aeabi_fmul+0x19a>
 8000e9e:	0192      	lsls	r2, r2, #6
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	0a52      	lsrs	r2, r2, #9
 8000ea4:	e780      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000ea6:	003d      	movs	r5, r7
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e777      	b.n	8000d9c <__aeabi_fmul+0x190>
 8000eac:	002a      	movs	r2, r5
 8000eae:	2301      	movs	r3, #1
 8000eb0:	407a      	eors	r2, r7
 8000eb2:	408b      	lsls	r3, r1
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	e6e9      	b.n	8000c8e <__aeabi_fmul+0x82>
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	f7ffffff 	.word	0xf7ffffff

08000ec0 <__aeabi_fsub>:
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	4647      	mov	r7, r8
 8000ec4:	46ce      	mov	lr, r9
 8000ec6:	0243      	lsls	r3, r0, #9
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	0a5f      	lsrs	r7, r3, #9
 8000ecc:	099b      	lsrs	r3, r3, #6
 8000ece:	0045      	lsls	r5, r0, #1
 8000ed0:	004a      	lsls	r2, r1, #1
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	024b      	lsls	r3, r1, #9
 8000ed6:	0fc4      	lsrs	r4, r0, #31
 8000ed8:	0fce      	lsrs	r6, r1, #31
 8000eda:	0e2d      	lsrs	r5, r5, #24
 8000edc:	0a58      	lsrs	r0, r3, #9
 8000ede:	0e12      	lsrs	r2, r2, #24
 8000ee0:	0999      	lsrs	r1, r3, #6
 8000ee2:	2aff      	cmp	r2, #255	@ 0xff
 8000ee4:	d06b      	beq.n	8000fbe <__aeabi_fsub+0xfe>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	405e      	eors	r6, r3
 8000eea:	1aab      	subs	r3, r5, r2
 8000eec:	42b4      	cmp	r4, r6
 8000eee:	d04b      	beq.n	8000f88 <__aeabi_fsub+0xc8>
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dc00      	bgt.n	8000ef6 <__aeabi_fsub+0x36>
 8000ef4:	e0ff      	b.n	80010f6 <__aeabi_fsub+0x236>
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x3c>
 8000efa:	e088      	b.n	800100e <__aeabi_fsub+0x14e>
 8000efc:	2dff      	cmp	r5, #255	@ 0xff
 8000efe:	d100      	bne.n	8000f02 <__aeabi_fsub+0x42>
 8000f00:	e0ef      	b.n	80010e2 <__aeabi_fsub+0x222>
 8000f02:	2280      	movs	r2, #128	@ 0x80
 8000f04:	04d2      	lsls	r2, r2, #19
 8000f06:	4311      	orrs	r1, r2
 8000f08:	2001      	movs	r0, #1
 8000f0a:	2b1b      	cmp	r3, #27
 8000f0c:	dc08      	bgt.n	8000f20 <__aeabi_fsub+0x60>
 8000f0e:	0008      	movs	r0, r1
 8000f10:	2220      	movs	r2, #32
 8000f12:	40d8      	lsrs	r0, r3
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4099      	lsls	r1, r3
 8000f18:	000b      	movs	r3, r1
 8000f1a:	1e5a      	subs	r2, r3, #1
 8000f1c:	4193      	sbcs	r3, r2
 8000f1e:	4318      	orrs	r0, r3
 8000f20:	4663      	mov	r3, ip
 8000f22:	1a1b      	subs	r3, r3, r0
 8000f24:	469c      	mov	ip, r3
 8000f26:	4663      	mov	r3, ip
 8000f28:	015b      	lsls	r3, r3, #5
 8000f2a:	d400      	bmi.n	8000f2e <__aeabi_fsub+0x6e>
 8000f2c:	e0cd      	b.n	80010ca <__aeabi_fsub+0x20a>
 8000f2e:	4663      	mov	r3, ip
 8000f30:	019f      	lsls	r7, r3, #6
 8000f32:	09bf      	lsrs	r7, r7, #6
 8000f34:	0038      	movs	r0, r7
 8000f36:	f000 fe5d 	bl	8001bf4 <__clzsi2>
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	3805      	subs	r0, #5
 8000f3e:	4083      	lsls	r3, r0
 8000f40:	4285      	cmp	r5, r0
 8000f42:	dc00      	bgt.n	8000f46 <__aeabi_fsub+0x86>
 8000f44:	e0a2      	b.n	800108c <__aeabi_fsub+0x1cc>
 8000f46:	4ab7      	ldr	r2, [pc, #732]	@ (8001224 <__aeabi_fsub+0x364>)
 8000f48:	1a2d      	subs	r5, r5, r0
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	4694      	mov	ip, r2
 8000f4e:	075a      	lsls	r2, r3, #29
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x94>
 8000f52:	e0c3      	b.n	80010dc <__aeabi_fsub+0x21c>
 8000f54:	220f      	movs	r2, #15
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_fsub+0x9e>
 8000f5c:	e0be      	b.n	80010dc <__aeabi_fsub+0x21c>
 8000f5e:	2304      	movs	r3, #4
 8000f60:	4698      	mov	r8, r3
 8000f62:	44c4      	add	ip, r8
 8000f64:	4663      	mov	r3, ip
 8000f66:	015b      	lsls	r3, r3, #5
 8000f68:	d400      	bmi.n	8000f6c <__aeabi_fsub+0xac>
 8000f6a:	e0b7      	b.n	80010dc <__aeabi_fsub+0x21c>
 8000f6c:	1c68      	adds	r0, r5, #1
 8000f6e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f70:	d000      	beq.n	8000f74 <__aeabi_fsub+0xb4>
 8000f72:	e0a5      	b.n	80010c0 <__aeabi_fsub+0x200>
 8000f74:	20ff      	movs	r0, #255	@ 0xff
 8000f76:	2200      	movs	r2, #0
 8000f78:	05c0      	lsls	r0, r0, #23
 8000f7a:	4310      	orrs	r0, r2
 8000f7c:	07e4      	lsls	r4, r4, #31
 8000f7e:	4320      	orrs	r0, r4
 8000f80:	bcc0      	pop	{r6, r7}
 8000f82:	46b9      	mov	r9, r7
 8000f84:	46b0      	mov	r8, r6
 8000f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dc00      	bgt.n	8000f8e <__aeabi_fsub+0xce>
 8000f8c:	e1eb      	b.n	8001366 <__aeabi_fsub+0x4a6>
 8000f8e:	2a00      	cmp	r2, #0
 8000f90:	d046      	beq.n	8001020 <__aeabi_fsub+0x160>
 8000f92:	2dff      	cmp	r5, #255	@ 0xff
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0xd8>
 8000f96:	e0a4      	b.n	80010e2 <__aeabi_fsub+0x222>
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	04d2      	lsls	r2, r2, #19
 8000f9c:	4311      	orrs	r1, r2
 8000f9e:	2b1b      	cmp	r3, #27
 8000fa0:	dc00      	bgt.n	8000fa4 <__aeabi_fsub+0xe4>
 8000fa2:	e0fb      	b.n	800119c <__aeabi_fsub+0x2dc>
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	4698      	mov	r8, r3
 8000fa8:	002b      	movs	r3, r5
 8000faa:	44c4      	add	ip, r8
 8000fac:	4662      	mov	r2, ip
 8000fae:	08d7      	lsrs	r7, r2, #3
 8000fb0:	2bff      	cmp	r3, #255	@ 0xff
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_fsub+0xf6>
 8000fb4:	e095      	b.n	80010e2 <__aeabi_fsub+0x222>
 8000fb6:	027a      	lsls	r2, r7, #9
 8000fb8:	0a52      	lsrs	r2, r2, #9
 8000fba:	b2d8      	uxtb	r0, r3
 8000fbc:	e7dc      	b.n	8000f78 <__aeabi_fsub+0xb8>
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	3bff      	subs	r3, #255	@ 0xff
 8000fc2:	4699      	mov	r9, r3
 8000fc4:	2900      	cmp	r1, #0
 8000fc6:	d118      	bne.n	8000ffa <__aeabi_fsub+0x13a>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	405e      	eors	r6, r3
 8000fcc:	42b4      	cmp	r4, r6
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_fsub+0x112>
 8000fd0:	e0ca      	b.n	8001168 <__aeabi_fsub+0x2a8>
 8000fd2:	464b      	mov	r3, r9
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d02d      	beq.n	8001034 <__aeabi_fsub+0x174>
 8000fd8:	2d00      	cmp	r5, #0
 8000fda:	d000      	beq.n	8000fde <__aeabi_fsub+0x11e>
 8000fdc:	e13c      	b.n	8001258 <__aeabi_fsub+0x398>
 8000fde:	23ff      	movs	r3, #255	@ 0xff
 8000fe0:	4664      	mov	r4, ip
 8000fe2:	2c00      	cmp	r4, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_fsub+0x128>
 8000fe6:	e15f      	b.n	80012a8 <__aeabi_fsub+0x3e8>
 8000fe8:	1e5d      	subs	r5, r3, #1
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_fsub+0x130>
 8000fee:	e174      	b.n	80012da <__aeabi_fsub+0x41a>
 8000ff0:	0034      	movs	r4, r6
 8000ff2:	2bff      	cmp	r3, #255	@ 0xff
 8000ff4:	d074      	beq.n	80010e0 <__aeabi_fsub+0x220>
 8000ff6:	002b      	movs	r3, r5
 8000ff8:	e103      	b.n	8001202 <__aeabi_fsub+0x342>
 8000ffa:	42b4      	cmp	r4, r6
 8000ffc:	d100      	bne.n	8001000 <__aeabi_fsub+0x140>
 8000ffe:	e09c      	b.n	800113a <__aeabi_fsub+0x27a>
 8001000:	2b00      	cmp	r3, #0
 8001002:	d017      	beq.n	8001034 <__aeabi_fsub+0x174>
 8001004:	2d00      	cmp	r5, #0
 8001006:	d0ea      	beq.n	8000fde <__aeabi_fsub+0x11e>
 8001008:	0007      	movs	r7, r0
 800100a:	0034      	movs	r4, r6
 800100c:	e06c      	b.n	80010e8 <__aeabi_fsub+0x228>
 800100e:	2900      	cmp	r1, #0
 8001010:	d0cc      	beq.n	8000fac <__aeabi_fsub+0xec>
 8001012:	1e5a      	subs	r2, r3, #1
 8001014:	2b01      	cmp	r3, #1
 8001016:	d02b      	beq.n	8001070 <__aeabi_fsub+0x1b0>
 8001018:	2bff      	cmp	r3, #255	@ 0xff
 800101a:	d062      	beq.n	80010e2 <__aeabi_fsub+0x222>
 800101c:	0013      	movs	r3, r2
 800101e:	e773      	b.n	8000f08 <__aeabi_fsub+0x48>
 8001020:	2900      	cmp	r1, #0
 8001022:	d0c3      	beq.n	8000fac <__aeabi_fsub+0xec>
 8001024:	1e5a      	subs	r2, r3, #1
 8001026:	2b01      	cmp	r3, #1
 8001028:	d100      	bne.n	800102c <__aeabi_fsub+0x16c>
 800102a:	e11e      	b.n	800126a <__aeabi_fsub+0x3aa>
 800102c:	2bff      	cmp	r3, #255	@ 0xff
 800102e:	d058      	beq.n	80010e2 <__aeabi_fsub+0x222>
 8001030:	0013      	movs	r3, r2
 8001032:	e7b4      	b.n	8000f9e <__aeabi_fsub+0xde>
 8001034:	22fe      	movs	r2, #254	@ 0xfe
 8001036:	1c6b      	adds	r3, r5, #1
 8001038:	421a      	tst	r2, r3
 800103a:	d10d      	bne.n	8001058 <__aeabi_fsub+0x198>
 800103c:	2d00      	cmp	r5, #0
 800103e:	d060      	beq.n	8001102 <__aeabi_fsub+0x242>
 8001040:	4663      	mov	r3, ip
 8001042:	2b00      	cmp	r3, #0
 8001044:	d000      	beq.n	8001048 <__aeabi_fsub+0x188>
 8001046:	e120      	b.n	800128a <__aeabi_fsub+0x3ca>
 8001048:	2900      	cmp	r1, #0
 800104a:	d000      	beq.n	800104e <__aeabi_fsub+0x18e>
 800104c:	e128      	b.n	80012a0 <__aeabi_fsub+0x3e0>
 800104e:	2280      	movs	r2, #128	@ 0x80
 8001050:	2400      	movs	r4, #0
 8001052:	20ff      	movs	r0, #255	@ 0xff
 8001054:	03d2      	lsls	r2, r2, #15
 8001056:	e78f      	b.n	8000f78 <__aeabi_fsub+0xb8>
 8001058:	4663      	mov	r3, ip
 800105a:	1a5f      	subs	r7, r3, r1
 800105c:	017b      	lsls	r3, r7, #5
 800105e:	d500      	bpl.n	8001062 <__aeabi_fsub+0x1a2>
 8001060:	e0fe      	b.n	8001260 <__aeabi_fsub+0x3a0>
 8001062:	2f00      	cmp	r7, #0
 8001064:	d000      	beq.n	8001068 <__aeabi_fsub+0x1a8>
 8001066:	e765      	b.n	8000f34 <__aeabi_fsub+0x74>
 8001068:	2400      	movs	r4, #0
 800106a:	2000      	movs	r0, #0
 800106c:	2200      	movs	r2, #0
 800106e:	e783      	b.n	8000f78 <__aeabi_fsub+0xb8>
 8001070:	4663      	mov	r3, ip
 8001072:	1a59      	subs	r1, r3, r1
 8001074:	014b      	lsls	r3, r1, #5
 8001076:	d400      	bmi.n	800107a <__aeabi_fsub+0x1ba>
 8001078:	e119      	b.n	80012ae <__aeabi_fsub+0x3ee>
 800107a:	018f      	lsls	r7, r1, #6
 800107c:	09bf      	lsrs	r7, r7, #6
 800107e:	0038      	movs	r0, r7
 8001080:	f000 fdb8 	bl	8001bf4 <__clzsi2>
 8001084:	003b      	movs	r3, r7
 8001086:	3805      	subs	r0, #5
 8001088:	4083      	lsls	r3, r0
 800108a:	2501      	movs	r5, #1
 800108c:	2220      	movs	r2, #32
 800108e:	1b40      	subs	r0, r0, r5
 8001090:	3001      	adds	r0, #1
 8001092:	1a12      	subs	r2, r2, r0
 8001094:	0019      	movs	r1, r3
 8001096:	4093      	lsls	r3, r2
 8001098:	40c1      	lsrs	r1, r0
 800109a:	1e5a      	subs	r2, r3, #1
 800109c:	4193      	sbcs	r3, r2
 800109e:	4319      	orrs	r1, r3
 80010a0:	468c      	mov	ip, r1
 80010a2:	1e0b      	subs	r3, r1, #0
 80010a4:	d0e1      	beq.n	800106a <__aeabi_fsub+0x1aa>
 80010a6:	075b      	lsls	r3, r3, #29
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x1ec>
 80010aa:	e152      	b.n	8001352 <__aeabi_fsub+0x492>
 80010ac:	230f      	movs	r3, #15
 80010ae:	2500      	movs	r5, #0
 80010b0:	400b      	ands	r3, r1
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d000      	beq.n	80010b8 <__aeabi_fsub+0x1f8>
 80010b6:	e752      	b.n	8000f5e <__aeabi_fsub+0x9e>
 80010b8:	2001      	movs	r0, #1
 80010ba:	014a      	lsls	r2, r1, #5
 80010bc:	d400      	bmi.n	80010c0 <__aeabi_fsub+0x200>
 80010be:	e092      	b.n	80011e6 <__aeabi_fsub+0x326>
 80010c0:	b2c0      	uxtb	r0, r0
 80010c2:	4663      	mov	r3, ip
 80010c4:	019a      	lsls	r2, r3, #6
 80010c6:	0a52      	lsrs	r2, r2, #9
 80010c8:	e756      	b.n	8000f78 <__aeabi_fsub+0xb8>
 80010ca:	4663      	mov	r3, ip
 80010cc:	075b      	lsls	r3, r3, #29
 80010ce:	d005      	beq.n	80010dc <__aeabi_fsub+0x21c>
 80010d0:	230f      	movs	r3, #15
 80010d2:	4662      	mov	r2, ip
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d000      	beq.n	80010dc <__aeabi_fsub+0x21c>
 80010da:	e740      	b.n	8000f5e <__aeabi_fsub+0x9e>
 80010dc:	002b      	movs	r3, r5
 80010de:	e765      	b.n	8000fac <__aeabi_fsub+0xec>
 80010e0:	0007      	movs	r7, r0
 80010e2:	2f00      	cmp	r7, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_fsub+0x228>
 80010e6:	e745      	b.n	8000f74 <__aeabi_fsub+0xb4>
 80010e8:	2280      	movs	r2, #128	@ 0x80
 80010ea:	03d2      	lsls	r2, r2, #15
 80010ec:	433a      	orrs	r2, r7
 80010ee:	0252      	lsls	r2, r2, #9
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	0a52      	lsrs	r2, r2, #9
 80010f4:	e740      	b.n	8000f78 <__aeabi_fsub+0xb8>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d179      	bne.n	80011ee <__aeabi_fsub+0x32e>
 80010fa:	22fe      	movs	r2, #254	@ 0xfe
 80010fc:	1c6b      	adds	r3, r5, #1
 80010fe:	421a      	tst	r2, r3
 8001100:	d1aa      	bne.n	8001058 <__aeabi_fsub+0x198>
 8001102:	4663      	mov	r3, ip
 8001104:	2b00      	cmp	r3, #0
 8001106:	d100      	bne.n	800110a <__aeabi_fsub+0x24a>
 8001108:	e0f5      	b.n	80012f6 <__aeabi_fsub+0x436>
 800110a:	2900      	cmp	r1, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_fsub+0x250>
 800110e:	e0d1      	b.n	80012b4 <__aeabi_fsub+0x3f4>
 8001110:	1a5f      	subs	r7, r3, r1
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	04db      	lsls	r3, r3, #19
 8001116:	421f      	tst	r7, r3
 8001118:	d100      	bne.n	800111c <__aeabi_fsub+0x25c>
 800111a:	e10e      	b.n	800133a <__aeabi_fsub+0x47a>
 800111c:	4662      	mov	r2, ip
 800111e:	2401      	movs	r4, #1
 8001120:	1a8a      	subs	r2, r1, r2
 8001122:	4694      	mov	ip, r2
 8001124:	2000      	movs	r0, #0
 8001126:	4034      	ands	r4, r6
 8001128:	2a00      	cmp	r2, #0
 800112a:	d100      	bne.n	800112e <__aeabi_fsub+0x26e>
 800112c:	e724      	b.n	8000f78 <__aeabi_fsub+0xb8>
 800112e:	2001      	movs	r0, #1
 8001130:	421a      	tst	r2, r3
 8001132:	d1c6      	bne.n	80010c2 <__aeabi_fsub+0x202>
 8001134:	2300      	movs	r3, #0
 8001136:	08d7      	lsrs	r7, r2, #3
 8001138:	e73d      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d017      	beq.n	800116e <__aeabi_fsub+0x2ae>
 800113e:	2d00      	cmp	r5, #0
 8001140:	d000      	beq.n	8001144 <__aeabi_fsub+0x284>
 8001142:	e0af      	b.n	80012a4 <__aeabi_fsub+0x3e4>
 8001144:	23ff      	movs	r3, #255	@ 0xff
 8001146:	4665      	mov	r5, ip
 8001148:	2d00      	cmp	r5, #0
 800114a:	d100      	bne.n	800114e <__aeabi_fsub+0x28e>
 800114c:	e0ad      	b.n	80012aa <__aeabi_fsub+0x3ea>
 800114e:	1e5e      	subs	r6, r3, #1
 8001150:	2b01      	cmp	r3, #1
 8001152:	d100      	bne.n	8001156 <__aeabi_fsub+0x296>
 8001154:	e089      	b.n	800126a <__aeabi_fsub+0x3aa>
 8001156:	2bff      	cmp	r3, #255	@ 0xff
 8001158:	d0c2      	beq.n	80010e0 <__aeabi_fsub+0x220>
 800115a:	2e1b      	cmp	r6, #27
 800115c:	dc00      	bgt.n	8001160 <__aeabi_fsub+0x2a0>
 800115e:	e0ab      	b.n	80012b8 <__aeabi_fsub+0x3f8>
 8001160:	1d4b      	adds	r3, r1, #5
 8001162:	469c      	mov	ip, r3
 8001164:	0013      	movs	r3, r2
 8001166:	e721      	b.n	8000fac <__aeabi_fsub+0xec>
 8001168:	464b      	mov	r3, r9
 800116a:	2b00      	cmp	r3, #0
 800116c:	d170      	bne.n	8001250 <__aeabi_fsub+0x390>
 800116e:	22fe      	movs	r2, #254	@ 0xfe
 8001170:	1c6b      	adds	r3, r5, #1
 8001172:	421a      	tst	r2, r3
 8001174:	d15e      	bne.n	8001234 <__aeabi_fsub+0x374>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d000      	beq.n	800117c <__aeabi_fsub+0x2bc>
 800117a:	e0c3      	b.n	8001304 <__aeabi_fsub+0x444>
 800117c:	4663      	mov	r3, ip
 800117e:	2b00      	cmp	r3, #0
 8001180:	d100      	bne.n	8001184 <__aeabi_fsub+0x2c4>
 8001182:	e0d0      	b.n	8001326 <__aeabi_fsub+0x466>
 8001184:	2900      	cmp	r1, #0
 8001186:	d100      	bne.n	800118a <__aeabi_fsub+0x2ca>
 8001188:	e094      	b.n	80012b4 <__aeabi_fsub+0x3f4>
 800118a:	000a      	movs	r2, r1
 800118c:	4462      	add	r2, ip
 800118e:	0153      	lsls	r3, r2, #5
 8001190:	d400      	bmi.n	8001194 <__aeabi_fsub+0x2d4>
 8001192:	e0d8      	b.n	8001346 <__aeabi_fsub+0x486>
 8001194:	0192      	lsls	r2, r2, #6
 8001196:	2001      	movs	r0, #1
 8001198:	0a52      	lsrs	r2, r2, #9
 800119a:	e6ed      	b.n	8000f78 <__aeabi_fsub+0xb8>
 800119c:	0008      	movs	r0, r1
 800119e:	2220      	movs	r2, #32
 80011a0:	40d8      	lsrs	r0, r3
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	4099      	lsls	r1, r3
 80011a6:	000b      	movs	r3, r1
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	4193      	sbcs	r3, r2
 80011ac:	4303      	orrs	r3, r0
 80011ae:	449c      	add	ip, r3
 80011b0:	4663      	mov	r3, ip
 80011b2:	015b      	lsls	r3, r3, #5
 80011b4:	d589      	bpl.n	80010ca <__aeabi_fsub+0x20a>
 80011b6:	3501      	adds	r5, #1
 80011b8:	2dff      	cmp	r5, #255	@ 0xff
 80011ba:	d100      	bne.n	80011be <__aeabi_fsub+0x2fe>
 80011bc:	e6da      	b.n	8000f74 <__aeabi_fsub+0xb4>
 80011be:	4662      	mov	r2, ip
 80011c0:	2301      	movs	r3, #1
 80011c2:	4919      	ldr	r1, [pc, #100]	@ (8001228 <__aeabi_fsub+0x368>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	0852      	lsrs	r2, r2, #1
 80011c8:	400a      	ands	r2, r1
 80011ca:	431a      	orrs	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	4694      	mov	ip, r2
 80011d0:	075b      	lsls	r3, r3, #29
 80011d2:	d004      	beq.n	80011de <__aeabi_fsub+0x31e>
 80011d4:	230f      	movs	r3, #15
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d000      	beq.n	80011de <__aeabi_fsub+0x31e>
 80011dc:	e6bf      	b.n	8000f5e <__aeabi_fsub+0x9e>
 80011de:	4663      	mov	r3, ip
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	d500      	bpl.n	80011e6 <__aeabi_fsub+0x326>
 80011e4:	e6c2      	b.n	8000f6c <__aeabi_fsub+0xac>
 80011e6:	4663      	mov	r3, ip
 80011e8:	08df      	lsrs	r7, r3, #3
 80011ea:	002b      	movs	r3, r5
 80011ec:	e6e3      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 80011ee:	1b53      	subs	r3, r2, r5
 80011f0:	2d00      	cmp	r5, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_fsub+0x336>
 80011f4:	e6f4      	b.n	8000fe0 <__aeabi_fsub+0x120>
 80011f6:	2080      	movs	r0, #128	@ 0x80
 80011f8:	4664      	mov	r4, ip
 80011fa:	04c0      	lsls	r0, r0, #19
 80011fc:	4304      	orrs	r4, r0
 80011fe:	46a4      	mov	ip, r4
 8001200:	0034      	movs	r4, r6
 8001202:	2001      	movs	r0, #1
 8001204:	2b1b      	cmp	r3, #27
 8001206:	dc09      	bgt.n	800121c <__aeabi_fsub+0x35c>
 8001208:	2520      	movs	r5, #32
 800120a:	4660      	mov	r0, ip
 800120c:	40d8      	lsrs	r0, r3
 800120e:	1aeb      	subs	r3, r5, r3
 8001210:	4665      	mov	r5, ip
 8001212:	409d      	lsls	r5, r3
 8001214:	002b      	movs	r3, r5
 8001216:	1e5d      	subs	r5, r3, #1
 8001218:	41ab      	sbcs	r3, r5
 800121a:	4318      	orrs	r0, r3
 800121c:	1a0b      	subs	r3, r1, r0
 800121e:	469c      	mov	ip, r3
 8001220:	0015      	movs	r5, r2
 8001222:	e680      	b.n	8000f26 <__aeabi_fsub+0x66>
 8001224:	fbffffff 	.word	0xfbffffff
 8001228:	7dffffff 	.word	0x7dffffff
 800122c:	22fe      	movs	r2, #254	@ 0xfe
 800122e:	1c6b      	adds	r3, r5, #1
 8001230:	4213      	tst	r3, r2
 8001232:	d0a3      	beq.n	800117c <__aeabi_fsub+0x2bc>
 8001234:	2bff      	cmp	r3, #255	@ 0xff
 8001236:	d100      	bne.n	800123a <__aeabi_fsub+0x37a>
 8001238:	e69c      	b.n	8000f74 <__aeabi_fsub+0xb4>
 800123a:	4461      	add	r1, ip
 800123c:	0849      	lsrs	r1, r1, #1
 800123e:	074a      	lsls	r2, r1, #29
 8001240:	d049      	beq.n	80012d6 <__aeabi_fsub+0x416>
 8001242:	220f      	movs	r2, #15
 8001244:	400a      	ands	r2, r1
 8001246:	2a04      	cmp	r2, #4
 8001248:	d045      	beq.n	80012d6 <__aeabi_fsub+0x416>
 800124a:	1d0a      	adds	r2, r1, #4
 800124c:	4694      	mov	ip, r2
 800124e:	e6ad      	b.n	8000fac <__aeabi_fsub+0xec>
 8001250:	2d00      	cmp	r5, #0
 8001252:	d100      	bne.n	8001256 <__aeabi_fsub+0x396>
 8001254:	e776      	b.n	8001144 <__aeabi_fsub+0x284>
 8001256:	e68d      	b.n	8000f74 <__aeabi_fsub+0xb4>
 8001258:	0034      	movs	r4, r6
 800125a:	20ff      	movs	r0, #255	@ 0xff
 800125c:	2200      	movs	r2, #0
 800125e:	e68b      	b.n	8000f78 <__aeabi_fsub+0xb8>
 8001260:	4663      	mov	r3, ip
 8001262:	2401      	movs	r4, #1
 8001264:	1acf      	subs	r7, r1, r3
 8001266:	4034      	ands	r4, r6
 8001268:	e664      	b.n	8000f34 <__aeabi_fsub+0x74>
 800126a:	4461      	add	r1, ip
 800126c:	014b      	lsls	r3, r1, #5
 800126e:	d56d      	bpl.n	800134c <__aeabi_fsub+0x48c>
 8001270:	0848      	lsrs	r0, r1, #1
 8001272:	4944      	ldr	r1, [pc, #272]	@ (8001384 <__aeabi_fsub+0x4c4>)
 8001274:	4001      	ands	r1, r0
 8001276:	0743      	lsls	r3, r0, #29
 8001278:	d02c      	beq.n	80012d4 <__aeabi_fsub+0x414>
 800127a:	230f      	movs	r3, #15
 800127c:	4003      	ands	r3, r0
 800127e:	2b04      	cmp	r3, #4
 8001280:	d028      	beq.n	80012d4 <__aeabi_fsub+0x414>
 8001282:	1d0b      	adds	r3, r1, #4
 8001284:	469c      	mov	ip, r3
 8001286:	2302      	movs	r3, #2
 8001288:	e690      	b.n	8000fac <__aeabi_fsub+0xec>
 800128a:	2900      	cmp	r1, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_fsub+0x3d0>
 800128e:	e72b      	b.n	80010e8 <__aeabi_fsub+0x228>
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	03db      	lsls	r3, r3, #15
 8001294:	429f      	cmp	r7, r3
 8001296:	d200      	bcs.n	800129a <__aeabi_fsub+0x3da>
 8001298:	e726      	b.n	80010e8 <__aeabi_fsub+0x228>
 800129a:	4298      	cmp	r0, r3
 800129c:	d300      	bcc.n	80012a0 <__aeabi_fsub+0x3e0>
 800129e:	e723      	b.n	80010e8 <__aeabi_fsub+0x228>
 80012a0:	2401      	movs	r4, #1
 80012a2:	4034      	ands	r4, r6
 80012a4:	0007      	movs	r7, r0
 80012a6:	e71f      	b.n	80010e8 <__aeabi_fsub+0x228>
 80012a8:	0034      	movs	r4, r6
 80012aa:	468c      	mov	ip, r1
 80012ac:	e67e      	b.n	8000fac <__aeabi_fsub+0xec>
 80012ae:	2301      	movs	r3, #1
 80012b0:	08cf      	lsrs	r7, r1, #3
 80012b2:	e680      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 80012b4:	2300      	movs	r3, #0
 80012b6:	e67e      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 80012b8:	2020      	movs	r0, #32
 80012ba:	4665      	mov	r5, ip
 80012bc:	1b80      	subs	r0, r0, r6
 80012be:	4085      	lsls	r5, r0
 80012c0:	4663      	mov	r3, ip
 80012c2:	0028      	movs	r0, r5
 80012c4:	40f3      	lsrs	r3, r6
 80012c6:	1e45      	subs	r5, r0, #1
 80012c8:	41a8      	sbcs	r0, r5
 80012ca:	4303      	orrs	r3, r0
 80012cc:	469c      	mov	ip, r3
 80012ce:	0015      	movs	r5, r2
 80012d0:	448c      	add	ip, r1
 80012d2:	e76d      	b.n	80011b0 <__aeabi_fsub+0x2f0>
 80012d4:	2302      	movs	r3, #2
 80012d6:	08cf      	lsrs	r7, r1, #3
 80012d8:	e66d      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 80012da:	1b0f      	subs	r7, r1, r4
 80012dc:	017b      	lsls	r3, r7, #5
 80012de:	d528      	bpl.n	8001332 <__aeabi_fsub+0x472>
 80012e0:	01bf      	lsls	r7, r7, #6
 80012e2:	09bf      	lsrs	r7, r7, #6
 80012e4:	0038      	movs	r0, r7
 80012e6:	f000 fc85 	bl	8001bf4 <__clzsi2>
 80012ea:	003b      	movs	r3, r7
 80012ec:	3805      	subs	r0, #5
 80012ee:	4083      	lsls	r3, r0
 80012f0:	0034      	movs	r4, r6
 80012f2:	2501      	movs	r5, #1
 80012f4:	e6ca      	b.n	800108c <__aeabi_fsub+0x1cc>
 80012f6:	2900      	cmp	r1, #0
 80012f8:	d100      	bne.n	80012fc <__aeabi_fsub+0x43c>
 80012fa:	e6b5      	b.n	8001068 <__aeabi_fsub+0x1a8>
 80012fc:	2401      	movs	r4, #1
 80012fe:	0007      	movs	r7, r0
 8001300:	4034      	ands	r4, r6
 8001302:	e658      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001304:	4663      	mov	r3, ip
 8001306:	2b00      	cmp	r3, #0
 8001308:	d100      	bne.n	800130c <__aeabi_fsub+0x44c>
 800130a:	e6e9      	b.n	80010e0 <__aeabi_fsub+0x220>
 800130c:	2900      	cmp	r1, #0
 800130e:	d100      	bne.n	8001312 <__aeabi_fsub+0x452>
 8001310:	e6ea      	b.n	80010e8 <__aeabi_fsub+0x228>
 8001312:	2380      	movs	r3, #128	@ 0x80
 8001314:	03db      	lsls	r3, r3, #15
 8001316:	429f      	cmp	r7, r3
 8001318:	d200      	bcs.n	800131c <__aeabi_fsub+0x45c>
 800131a:	e6e5      	b.n	80010e8 <__aeabi_fsub+0x228>
 800131c:	4298      	cmp	r0, r3
 800131e:	d300      	bcc.n	8001322 <__aeabi_fsub+0x462>
 8001320:	e6e2      	b.n	80010e8 <__aeabi_fsub+0x228>
 8001322:	0007      	movs	r7, r0
 8001324:	e6e0      	b.n	80010e8 <__aeabi_fsub+0x228>
 8001326:	2900      	cmp	r1, #0
 8001328:	d100      	bne.n	800132c <__aeabi_fsub+0x46c>
 800132a:	e69e      	b.n	800106a <__aeabi_fsub+0x1aa>
 800132c:	2300      	movs	r3, #0
 800132e:	08cf      	lsrs	r7, r1, #3
 8001330:	e641      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001332:	0034      	movs	r4, r6
 8001334:	2301      	movs	r3, #1
 8001336:	08ff      	lsrs	r7, r7, #3
 8001338:	e63d      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 800133a:	2f00      	cmp	r7, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_fsub+0x480>
 800133e:	e693      	b.n	8001068 <__aeabi_fsub+0x1a8>
 8001340:	2300      	movs	r3, #0
 8001342:	08ff      	lsrs	r7, r7, #3
 8001344:	e637      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001346:	2300      	movs	r3, #0
 8001348:	08d7      	lsrs	r7, r2, #3
 800134a:	e634      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 800134c:	2301      	movs	r3, #1
 800134e:	08cf      	lsrs	r7, r1, #3
 8001350:	e631      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001352:	2280      	movs	r2, #128	@ 0x80
 8001354:	000b      	movs	r3, r1
 8001356:	04d2      	lsls	r2, r2, #19
 8001358:	2001      	movs	r0, #1
 800135a:	4013      	ands	r3, r2
 800135c:	4211      	tst	r1, r2
 800135e:	d000      	beq.n	8001362 <__aeabi_fsub+0x4a2>
 8001360:	e6ae      	b.n	80010c0 <__aeabi_fsub+0x200>
 8001362:	08cf      	lsrs	r7, r1, #3
 8001364:	e627      	b.n	8000fb6 <__aeabi_fsub+0xf6>
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <__aeabi_fsub+0x4ac>
 800136a:	e75f      	b.n	800122c <__aeabi_fsub+0x36c>
 800136c:	1b56      	subs	r6, r2, r5
 800136e:	2d00      	cmp	r5, #0
 8001370:	d101      	bne.n	8001376 <__aeabi_fsub+0x4b6>
 8001372:	0033      	movs	r3, r6
 8001374:	e6e7      	b.n	8001146 <__aeabi_fsub+0x286>
 8001376:	2380      	movs	r3, #128	@ 0x80
 8001378:	4660      	mov	r0, ip
 800137a:	04db      	lsls	r3, r3, #19
 800137c:	4318      	orrs	r0, r3
 800137e:	4684      	mov	ip, r0
 8001380:	e6eb      	b.n	800115a <__aeabi_fsub+0x29a>
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	7dffffff 	.word	0x7dffffff

08001388 <__aeabi_fcmpun>:
 8001388:	0243      	lsls	r3, r0, #9
 800138a:	024a      	lsls	r2, r1, #9
 800138c:	0040      	lsls	r0, r0, #1
 800138e:	0049      	lsls	r1, r1, #1
 8001390:	0a5b      	lsrs	r3, r3, #9
 8001392:	0a52      	lsrs	r2, r2, #9
 8001394:	0e09      	lsrs	r1, r1, #24
 8001396:	0e00      	lsrs	r0, r0, #24
 8001398:	28ff      	cmp	r0, #255	@ 0xff
 800139a:	d006      	beq.n	80013aa <__aeabi_fcmpun+0x22>
 800139c:	2000      	movs	r0, #0
 800139e:	29ff      	cmp	r1, #255	@ 0xff
 80013a0:	d102      	bne.n	80013a8 <__aeabi_fcmpun+0x20>
 80013a2:	1e53      	subs	r3, r2, #1
 80013a4:	419a      	sbcs	r2, r3
 80013a6:	0010      	movs	r0, r2
 80013a8:	4770      	bx	lr
 80013aa:	38fe      	subs	r0, #254	@ 0xfe
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1fb      	bne.n	80013a8 <__aeabi_fcmpun+0x20>
 80013b0:	e7f4      	b.n	800139c <__aeabi_fcmpun+0x14>
 80013b2:	46c0      	nop			@ (mov r8, r8)

080013b4 <__aeabi_f2iz>:
 80013b4:	0241      	lsls	r1, r0, #9
 80013b6:	0042      	lsls	r2, r0, #1
 80013b8:	0fc3      	lsrs	r3, r0, #31
 80013ba:	0a49      	lsrs	r1, r1, #9
 80013bc:	2000      	movs	r0, #0
 80013be:	0e12      	lsrs	r2, r2, #24
 80013c0:	2a7e      	cmp	r2, #126	@ 0x7e
 80013c2:	dd03      	ble.n	80013cc <__aeabi_f2iz+0x18>
 80013c4:	2a9d      	cmp	r2, #157	@ 0x9d
 80013c6:	dd02      	ble.n	80013ce <__aeabi_f2iz+0x1a>
 80013c8:	4a09      	ldr	r2, [pc, #36]	@ (80013f0 <__aeabi_f2iz+0x3c>)
 80013ca:	1898      	adds	r0, r3, r2
 80013cc:	4770      	bx	lr
 80013ce:	2080      	movs	r0, #128	@ 0x80
 80013d0:	0400      	lsls	r0, r0, #16
 80013d2:	4301      	orrs	r1, r0
 80013d4:	2a95      	cmp	r2, #149	@ 0x95
 80013d6:	dc07      	bgt.n	80013e8 <__aeabi_f2iz+0x34>
 80013d8:	2096      	movs	r0, #150	@ 0x96
 80013da:	1a82      	subs	r2, r0, r2
 80013dc:	40d1      	lsrs	r1, r2
 80013de:	4248      	negs	r0, r1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f3      	bne.n	80013cc <__aeabi_f2iz+0x18>
 80013e4:	0008      	movs	r0, r1
 80013e6:	e7f1      	b.n	80013cc <__aeabi_f2iz+0x18>
 80013e8:	3a96      	subs	r2, #150	@ 0x96
 80013ea:	4091      	lsls	r1, r2
 80013ec:	e7f7      	b.n	80013de <__aeabi_f2iz+0x2a>
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	7fffffff 	.word	0x7fffffff

080013f4 <__aeabi_i2f>:
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d012      	beq.n	8001420 <__aeabi_i2f+0x2c>
 80013fa:	17c3      	asrs	r3, r0, #31
 80013fc:	18c5      	adds	r5, r0, r3
 80013fe:	405d      	eors	r5, r3
 8001400:	0fc4      	lsrs	r4, r0, #31
 8001402:	0028      	movs	r0, r5
 8001404:	f000 fbf6 	bl	8001bf4 <__clzsi2>
 8001408:	239e      	movs	r3, #158	@ 0x9e
 800140a:	1a1b      	subs	r3, r3, r0
 800140c:	2b96      	cmp	r3, #150	@ 0x96
 800140e:	dc0f      	bgt.n	8001430 <__aeabi_i2f+0x3c>
 8001410:	2808      	cmp	r0, #8
 8001412:	d038      	beq.n	8001486 <__aeabi_i2f+0x92>
 8001414:	3808      	subs	r0, #8
 8001416:	4085      	lsls	r5, r0
 8001418:	026d      	lsls	r5, r5, #9
 800141a:	0a6d      	lsrs	r5, r5, #9
 800141c:	b2d8      	uxtb	r0, r3
 800141e:	e002      	b.n	8001426 <__aeabi_i2f+0x32>
 8001420:	2400      	movs	r4, #0
 8001422:	2000      	movs	r0, #0
 8001424:	2500      	movs	r5, #0
 8001426:	05c0      	lsls	r0, r0, #23
 8001428:	4328      	orrs	r0, r5
 800142a:	07e4      	lsls	r4, r4, #31
 800142c:	4320      	orrs	r0, r4
 800142e:	bd70      	pop	{r4, r5, r6, pc}
 8001430:	2b99      	cmp	r3, #153	@ 0x99
 8001432:	dc14      	bgt.n	800145e <__aeabi_i2f+0x6a>
 8001434:	1f42      	subs	r2, r0, #5
 8001436:	4095      	lsls	r5, r2
 8001438:	002a      	movs	r2, r5
 800143a:	4915      	ldr	r1, [pc, #84]	@ (8001490 <__aeabi_i2f+0x9c>)
 800143c:	4011      	ands	r1, r2
 800143e:	0755      	lsls	r5, r2, #29
 8001440:	d01c      	beq.n	800147c <__aeabi_i2f+0x88>
 8001442:	250f      	movs	r5, #15
 8001444:	402a      	ands	r2, r5
 8001446:	2a04      	cmp	r2, #4
 8001448:	d018      	beq.n	800147c <__aeabi_i2f+0x88>
 800144a:	3104      	adds	r1, #4
 800144c:	08ca      	lsrs	r2, r1, #3
 800144e:	0149      	lsls	r1, r1, #5
 8001450:	d515      	bpl.n	800147e <__aeabi_i2f+0x8a>
 8001452:	239f      	movs	r3, #159	@ 0x9f
 8001454:	0252      	lsls	r2, r2, #9
 8001456:	1a18      	subs	r0, r3, r0
 8001458:	0a55      	lsrs	r5, r2, #9
 800145a:	b2c0      	uxtb	r0, r0
 800145c:	e7e3      	b.n	8001426 <__aeabi_i2f+0x32>
 800145e:	2205      	movs	r2, #5
 8001460:	0029      	movs	r1, r5
 8001462:	1a12      	subs	r2, r2, r0
 8001464:	40d1      	lsrs	r1, r2
 8001466:	0002      	movs	r2, r0
 8001468:	321b      	adds	r2, #27
 800146a:	4095      	lsls	r5, r2
 800146c:	002a      	movs	r2, r5
 800146e:	1e55      	subs	r5, r2, #1
 8001470:	41aa      	sbcs	r2, r5
 8001472:	430a      	orrs	r2, r1
 8001474:	4906      	ldr	r1, [pc, #24]	@ (8001490 <__aeabi_i2f+0x9c>)
 8001476:	4011      	ands	r1, r2
 8001478:	0755      	lsls	r5, r2, #29
 800147a:	d1e2      	bne.n	8001442 <__aeabi_i2f+0x4e>
 800147c:	08ca      	lsrs	r2, r1, #3
 800147e:	0252      	lsls	r2, r2, #9
 8001480:	0a55      	lsrs	r5, r2, #9
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	e7cf      	b.n	8001426 <__aeabi_i2f+0x32>
 8001486:	026d      	lsls	r5, r5, #9
 8001488:	0a6d      	lsrs	r5, r5, #9
 800148a:	308e      	adds	r0, #142	@ 0x8e
 800148c:	e7cb      	b.n	8001426 <__aeabi_i2f+0x32>
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	fbffffff 	.word	0xfbffffff

08001494 <__aeabi_dmul>:
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	4657      	mov	r7, sl
 8001498:	464e      	mov	r6, r9
 800149a:	46de      	mov	lr, fp
 800149c:	4645      	mov	r5, r8
 800149e:	b5e0      	push	{r5, r6, r7, lr}
 80014a0:	001f      	movs	r7, r3
 80014a2:	030b      	lsls	r3, r1, #12
 80014a4:	0b1b      	lsrs	r3, r3, #12
 80014a6:	0016      	movs	r6, r2
 80014a8:	469a      	mov	sl, r3
 80014aa:	0fca      	lsrs	r2, r1, #31
 80014ac:	004b      	lsls	r3, r1, #1
 80014ae:	0004      	movs	r4, r0
 80014b0:	4691      	mov	r9, r2
 80014b2:	b085      	sub	sp, #20
 80014b4:	0d5b      	lsrs	r3, r3, #21
 80014b6:	d100      	bne.n	80014ba <__aeabi_dmul+0x26>
 80014b8:	e1cf      	b.n	800185a <__aeabi_dmul+0x3c6>
 80014ba:	4acd      	ldr	r2, [pc, #820]	@ (80017f0 <__aeabi_dmul+0x35c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d055      	beq.n	800156c <__aeabi_dmul+0xd8>
 80014c0:	4651      	mov	r1, sl
 80014c2:	0f42      	lsrs	r2, r0, #29
 80014c4:	00c9      	lsls	r1, r1, #3
 80014c6:	430a      	orrs	r2, r1
 80014c8:	2180      	movs	r1, #128	@ 0x80
 80014ca:	0409      	lsls	r1, r1, #16
 80014cc:	4311      	orrs	r1, r2
 80014ce:	00c2      	lsls	r2, r0, #3
 80014d0:	4690      	mov	r8, r2
 80014d2:	4ac8      	ldr	r2, [pc, #800]	@ (80017f4 <__aeabi_dmul+0x360>)
 80014d4:	468a      	mov	sl, r1
 80014d6:	4693      	mov	fp, r2
 80014d8:	449b      	add	fp, r3
 80014da:	2300      	movs	r3, #0
 80014dc:	2500      	movs	r5, #0
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	033c      	lsls	r4, r7, #12
 80014e2:	007b      	lsls	r3, r7, #1
 80014e4:	0ffa      	lsrs	r2, r7, #31
 80014e6:	9601      	str	r6, [sp, #4]
 80014e8:	0b24      	lsrs	r4, r4, #12
 80014ea:	0d5b      	lsrs	r3, r3, #21
 80014ec:	9200      	str	r2, [sp, #0]
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dmul+0x5e>
 80014f0:	e188      	b.n	8001804 <__aeabi_dmul+0x370>
 80014f2:	4abf      	ldr	r2, [pc, #764]	@ (80017f0 <__aeabi_dmul+0x35c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d100      	bne.n	80014fa <__aeabi_dmul+0x66>
 80014f8:	e092      	b.n	8001620 <__aeabi_dmul+0x18c>
 80014fa:	4abe      	ldr	r2, [pc, #760]	@ (80017f4 <__aeabi_dmul+0x360>)
 80014fc:	4694      	mov	ip, r2
 80014fe:	4463      	add	r3, ip
 8001500:	449b      	add	fp, r3
 8001502:	2d0a      	cmp	r5, #10
 8001504:	dc42      	bgt.n	800158c <__aeabi_dmul+0xf8>
 8001506:	00e4      	lsls	r4, r4, #3
 8001508:	0f73      	lsrs	r3, r6, #29
 800150a:	4323      	orrs	r3, r4
 800150c:	2480      	movs	r4, #128	@ 0x80
 800150e:	4649      	mov	r1, r9
 8001510:	0424      	lsls	r4, r4, #16
 8001512:	431c      	orrs	r4, r3
 8001514:	00f3      	lsls	r3, r6, #3
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	9b00      	ldr	r3, [sp, #0]
 800151a:	2000      	movs	r0, #0
 800151c:	4059      	eors	r1, r3
 800151e:	b2cb      	uxtb	r3, r1
 8001520:	9303      	str	r3, [sp, #12]
 8001522:	2d02      	cmp	r5, #2
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x94>
 8001526:	e094      	b.n	8001652 <__aeabi_dmul+0x1be>
 8001528:	2301      	movs	r3, #1
 800152a:	40ab      	lsls	r3, r5
 800152c:	001d      	movs	r5, r3
 800152e:	23a6      	movs	r3, #166	@ 0xa6
 8001530:	002a      	movs	r2, r5
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	401a      	ands	r2, r3
 8001536:	421d      	tst	r5, r3
 8001538:	d000      	beq.n	800153c <__aeabi_dmul+0xa8>
 800153a:	e229      	b.n	8001990 <__aeabi_dmul+0x4fc>
 800153c:	2390      	movs	r3, #144	@ 0x90
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	421d      	tst	r5, r3
 8001542:	d100      	bne.n	8001546 <__aeabi_dmul+0xb2>
 8001544:	e24d      	b.n	80019e2 <__aeabi_dmul+0x54e>
 8001546:	2300      	movs	r3, #0
 8001548:	2480      	movs	r4, #128	@ 0x80
 800154a:	4699      	mov	r9, r3
 800154c:	0324      	lsls	r4, r4, #12
 800154e:	4ba8      	ldr	r3, [pc, #672]	@ (80017f0 <__aeabi_dmul+0x35c>)
 8001550:	0010      	movs	r0, r2
 8001552:	464a      	mov	r2, r9
 8001554:	051b      	lsls	r3, r3, #20
 8001556:	4323      	orrs	r3, r4
 8001558:	07d2      	lsls	r2, r2, #31
 800155a:	4313      	orrs	r3, r2
 800155c:	0019      	movs	r1, r3
 800155e:	b005      	add	sp, #20
 8001560:	bcf0      	pop	{r4, r5, r6, r7}
 8001562:	46bb      	mov	fp, r7
 8001564:	46b2      	mov	sl, r6
 8001566:	46a9      	mov	r9, r5
 8001568:	46a0      	mov	r8, r4
 800156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156c:	4652      	mov	r2, sl
 800156e:	4302      	orrs	r2, r0
 8001570:	4690      	mov	r8, r2
 8001572:	d000      	beq.n	8001576 <__aeabi_dmul+0xe2>
 8001574:	e1ac      	b.n	80018d0 <__aeabi_dmul+0x43c>
 8001576:	469b      	mov	fp, r3
 8001578:	2302      	movs	r3, #2
 800157a:	4692      	mov	sl, r2
 800157c:	2508      	movs	r5, #8
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	e7ae      	b.n	80014e0 <__aeabi_dmul+0x4c>
 8001582:	9b00      	ldr	r3, [sp, #0]
 8001584:	46a2      	mov	sl, r4
 8001586:	4699      	mov	r9, r3
 8001588:	9b01      	ldr	r3, [sp, #4]
 800158a:	4698      	mov	r8, r3
 800158c:	9b02      	ldr	r3, [sp, #8]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d100      	bne.n	8001594 <__aeabi_dmul+0x100>
 8001592:	e1ca      	b.n	800192a <__aeabi_dmul+0x496>
 8001594:	2b03      	cmp	r3, #3
 8001596:	d100      	bne.n	800159a <__aeabi_dmul+0x106>
 8001598:	e192      	b.n	80018c0 <__aeabi_dmul+0x42c>
 800159a:	2b01      	cmp	r3, #1
 800159c:	d110      	bne.n	80015c0 <__aeabi_dmul+0x12c>
 800159e:	2300      	movs	r3, #0
 80015a0:	2400      	movs	r4, #0
 80015a2:	2200      	movs	r2, #0
 80015a4:	e7d4      	b.n	8001550 <__aeabi_dmul+0xbc>
 80015a6:	2201      	movs	r2, #1
 80015a8:	087b      	lsrs	r3, r7, #1
 80015aa:	403a      	ands	r2, r7
 80015ac:	4313      	orrs	r3, r2
 80015ae:	4652      	mov	r2, sl
 80015b0:	07d2      	lsls	r2, r2, #31
 80015b2:	4313      	orrs	r3, r2
 80015b4:	4698      	mov	r8, r3
 80015b6:	4653      	mov	r3, sl
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	469a      	mov	sl, r3
 80015bc:	9b03      	ldr	r3, [sp, #12]
 80015be:	4699      	mov	r9, r3
 80015c0:	465b      	mov	r3, fp
 80015c2:	1c58      	adds	r0, r3, #1
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	445b      	add	r3, fp
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	dc00      	bgt.n	80015d0 <__aeabi_dmul+0x13c>
 80015ce:	e1b1      	b.n	8001934 <__aeabi_dmul+0x4a0>
 80015d0:	4642      	mov	r2, r8
 80015d2:	0752      	lsls	r2, r2, #29
 80015d4:	d00b      	beq.n	80015ee <__aeabi_dmul+0x15a>
 80015d6:	220f      	movs	r2, #15
 80015d8:	4641      	mov	r1, r8
 80015da:	400a      	ands	r2, r1
 80015dc:	2a04      	cmp	r2, #4
 80015de:	d006      	beq.n	80015ee <__aeabi_dmul+0x15a>
 80015e0:	4642      	mov	r2, r8
 80015e2:	1d11      	adds	r1, r2, #4
 80015e4:	4541      	cmp	r1, r8
 80015e6:	4192      	sbcs	r2, r2
 80015e8:	4688      	mov	r8, r1
 80015ea:	4252      	negs	r2, r2
 80015ec:	4492      	add	sl, r2
 80015ee:	4652      	mov	r2, sl
 80015f0:	01d2      	lsls	r2, r2, #7
 80015f2:	d506      	bpl.n	8001602 <__aeabi_dmul+0x16e>
 80015f4:	4652      	mov	r2, sl
 80015f6:	4b80      	ldr	r3, [pc, #512]	@ (80017f8 <__aeabi_dmul+0x364>)
 80015f8:	401a      	ands	r2, r3
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	4692      	mov	sl, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	18c3      	adds	r3, r0, r3
 8001602:	4a7e      	ldr	r2, [pc, #504]	@ (80017fc <__aeabi_dmul+0x368>)
 8001604:	4293      	cmp	r3, r2
 8001606:	dd00      	ble.n	800160a <__aeabi_dmul+0x176>
 8001608:	e18f      	b.n	800192a <__aeabi_dmul+0x496>
 800160a:	4642      	mov	r2, r8
 800160c:	08d1      	lsrs	r1, r2, #3
 800160e:	4652      	mov	r2, sl
 8001610:	0752      	lsls	r2, r2, #29
 8001612:	430a      	orrs	r2, r1
 8001614:	4651      	mov	r1, sl
 8001616:	055b      	lsls	r3, r3, #21
 8001618:	024c      	lsls	r4, r1, #9
 800161a:	0b24      	lsrs	r4, r4, #12
 800161c:	0d5b      	lsrs	r3, r3, #21
 800161e:	e797      	b.n	8001550 <__aeabi_dmul+0xbc>
 8001620:	4b73      	ldr	r3, [pc, #460]	@ (80017f0 <__aeabi_dmul+0x35c>)
 8001622:	4326      	orrs	r6, r4
 8001624:	469c      	mov	ip, r3
 8001626:	44e3      	add	fp, ip
 8001628:	2e00      	cmp	r6, #0
 800162a:	d100      	bne.n	800162e <__aeabi_dmul+0x19a>
 800162c:	e16f      	b.n	800190e <__aeabi_dmul+0x47a>
 800162e:	2303      	movs	r3, #3
 8001630:	4649      	mov	r1, r9
 8001632:	431d      	orrs	r5, r3
 8001634:	9b00      	ldr	r3, [sp, #0]
 8001636:	4059      	eors	r1, r3
 8001638:	b2cb      	uxtb	r3, r1
 800163a:	9303      	str	r3, [sp, #12]
 800163c:	2d0a      	cmp	r5, #10
 800163e:	dd00      	ble.n	8001642 <__aeabi_dmul+0x1ae>
 8001640:	e133      	b.n	80018aa <__aeabi_dmul+0x416>
 8001642:	2301      	movs	r3, #1
 8001644:	40ab      	lsls	r3, r5
 8001646:	001d      	movs	r5, r3
 8001648:	2303      	movs	r3, #3
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	2288      	movs	r2, #136	@ 0x88
 800164e:	422a      	tst	r2, r5
 8001650:	d197      	bne.n	8001582 <__aeabi_dmul+0xee>
 8001652:	4642      	mov	r2, r8
 8001654:	4643      	mov	r3, r8
 8001656:	0412      	lsls	r2, r2, #16
 8001658:	0c12      	lsrs	r2, r2, #16
 800165a:	0016      	movs	r6, r2
 800165c:	9801      	ldr	r0, [sp, #4]
 800165e:	0c1d      	lsrs	r5, r3, #16
 8001660:	0c03      	lsrs	r3, r0, #16
 8001662:	0400      	lsls	r0, r0, #16
 8001664:	0c00      	lsrs	r0, r0, #16
 8001666:	4346      	muls	r6, r0
 8001668:	46b4      	mov	ip, r6
 800166a:	001e      	movs	r6, r3
 800166c:	436e      	muls	r6, r5
 800166e:	9600      	str	r6, [sp, #0]
 8001670:	0016      	movs	r6, r2
 8001672:	0007      	movs	r7, r0
 8001674:	435e      	muls	r6, r3
 8001676:	4661      	mov	r1, ip
 8001678:	46b0      	mov	r8, r6
 800167a:	436f      	muls	r7, r5
 800167c:	0c0e      	lsrs	r6, r1, #16
 800167e:	44b8      	add	r8, r7
 8001680:	4446      	add	r6, r8
 8001682:	42b7      	cmp	r7, r6
 8001684:	d905      	bls.n	8001692 <__aeabi_dmul+0x1fe>
 8001686:	2180      	movs	r1, #128	@ 0x80
 8001688:	0249      	lsls	r1, r1, #9
 800168a:	4688      	mov	r8, r1
 800168c:	9f00      	ldr	r7, [sp, #0]
 800168e:	4447      	add	r7, r8
 8001690:	9700      	str	r7, [sp, #0]
 8001692:	4661      	mov	r1, ip
 8001694:	0409      	lsls	r1, r1, #16
 8001696:	0c09      	lsrs	r1, r1, #16
 8001698:	0c37      	lsrs	r7, r6, #16
 800169a:	0436      	lsls	r6, r6, #16
 800169c:	468c      	mov	ip, r1
 800169e:	0031      	movs	r1, r6
 80016a0:	4461      	add	r1, ip
 80016a2:	9101      	str	r1, [sp, #4]
 80016a4:	0011      	movs	r1, r2
 80016a6:	0c26      	lsrs	r6, r4, #16
 80016a8:	0424      	lsls	r4, r4, #16
 80016aa:	0c24      	lsrs	r4, r4, #16
 80016ac:	4361      	muls	r1, r4
 80016ae:	468c      	mov	ip, r1
 80016b0:	0021      	movs	r1, r4
 80016b2:	4369      	muls	r1, r5
 80016b4:	4689      	mov	r9, r1
 80016b6:	4661      	mov	r1, ip
 80016b8:	0c09      	lsrs	r1, r1, #16
 80016ba:	4688      	mov	r8, r1
 80016bc:	4372      	muls	r2, r6
 80016be:	444a      	add	r2, r9
 80016c0:	4442      	add	r2, r8
 80016c2:	4375      	muls	r5, r6
 80016c4:	4591      	cmp	r9, r2
 80016c6:	d903      	bls.n	80016d0 <__aeabi_dmul+0x23c>
 80016c8:	2180      	movs	r1, #128	@ 0x80
 80016ca:	0249      	lsls	r1, r1, #9
 80016cc:	4688      	mov	r8, r1
 80016ce:	4445      	add	r5, r8
 80016d0:	0c11      	lsrs	r1, r2, #16
 80016d2:	4688      	mov	r8, r1
 80016d4:	4661      	mov	r1, ip
 80016d6:	0409      	lsls	r1, r1, #16
 80016d8:	0c09      	lsrs	r1, r1, #16
 80016da:	468c      	mov	ip, r1
 80016dc:	0412      	lsls	r2, r2, #16
 80016de:	4462      	add	r2, ip
 80016e0:	18b9      	adds	r1, r7, r2
 80016e2:	9102      	str	r1, [sp, #8]
 80016e4:	4651      	mov	r1, sl
 80016e6:	0c09      	lsrs	r1, r1, #16
 80016e8:	468c      	mov	ip, r1
 80016ea:	4651      	mov	r1, sl
 80016ec:	040f      	lsls	r7, r1, #16
 80016ee:	0c3f      	lsrs	r7, r7, #16
 80016f0:	0039      	movs	r1, r7
 80016f2:	4341      	muls	r1, r0
 80016f4:	4445      	add	r5, r8
 80016f6:	4688      	mov	r8, r1
 80016f8:	4661      	mov	r1, ip
 80016fa:	4341      	muls	r1, r0
 80016fc:	468a      	mov	sl, r1
 80016fe:	4641      	mov	r1, r8
 8001700:	4660      	mov	r0, ip
 8001702:	0c09      	lsrs	r1, r1, #16
 8001704:	4689      	mov	r9, r1
 8001706:	4358      	muls	r0, r3
 8001708:	437b      	muls	r3, r7
 800170a:	4453      	add	r3, sl
 800170c:	444b      	add	r3, r9
 800170e:	459a      	cmp	sl, r3
 8001710:	d903      	bls.n	800171a <__aeabi_dmul+0x286>
 8001712:	2180      	movs	r1, #128	@ 0x80
 8001714:	0249      	lsls	r1, r1, #9
 8001716:	4689      	mov	r9, r1
 8001718:	4448      	add	r0, r9
 800171a:	0c19      	lsrs	r1, r3, #16
 800171c:	4689      	mov	r9, r1
 800171e:	4641      	mov	r1, r8
 8001720:	0409      	lsls	r1, r1, #16
 8001722:	0c09      	lsrs	r1, r1, #16
 8001724:	4688      	mov	r8, r1
 8001726:	0039      	movs	r1, r7
 8001728:	4361      	muls	r1, r4
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	4443      	add	r3, r8
 800172e:	4688      	mov	r8, r1
 8001730:	4661      	mov	r1, ip
 8001732:	434c      	muls	r4, r1
 8001734:	4371      	muls	r1, r6
 8001736:	468c      	mov	ip, r1
 8001738:	4641      	mov	r1, r8
 800173a:	4377      	muls	r7, r6
 800173c:	0c0e      	lsrs	r6, r1, #16
 800173e:	193f      	adds	r7, r7, r4
 8001740:	19f6      	adds	r6, r6, r7
 8001742:	4448      	add	r0, r9
 8001744:	42b4      	cmp	r4, r6
 8001746:	d903      	bls.n	8001750 <__aeabi_dmul+0x2bc>
 8001748:	2180      	movs	r1, #128	@ 0x80
 800174a:	0249      	lsls	r1, r1, #9
 800174c:	4689      	mov	r9, r1
 800174e:	44cc      	add	ip, r9
 8001750:	9902      	ldr	r1, [sp, #8]
 8001752:	9f00      	ldr	r7, [sp, #0]
 8001754:	4689      	mov	r9, r1
 8001756:	0431      	lsls	r1, r6, #16
 8001758:	444f      	add	r7, r9
 800175a:	4689      	mov	r9, r1
 800175c:	4641      	mov	r1, r8
 800175e:	4297      	cmp	r7, r2
 8001760:	4192      	sbcs	r2, r2
 8001762:	040c      	lsls	r4, r1, #16
 8001764:	0c24      	lsrs	r4, r4, #16
 8001766:	444c      	add	r4, r9
 8001768:	18ff      	adds	r7, r7, r3
 800176a:	4252      	negs	r2, r2
 800176c:	1964      	adds	r4, r4, r5
 800176e:	18a1      	adds	r1, r4, r2
 8001770:	429f      	cmp	r7, r3
 8001772:	419b      	sbcs	r3, r3
 8001774:	4688      	mov	r8, r1
 8001776:	4682      	mov	sl, r0
 8001778:	425b      	negs	r3, r3
 800177a:	4699      	mov	r9, r3
 800177c:	4590      	cmp	r8, r2
 800177e:	4192      	sbcs	r2, r2
 8001780:	42ac      	cmp	r4, r5
 8001782:	41a4      	sbcs	r4, r4
 8001784:	44c2      	add	sl, r8
 8001786:	44d1      	add	r9, sl
 8001788:	4252      	negs	r2, r2
 800178a:	4264      	negs	r4, r4
 800178c:	4314      	orrs	r4, r2
 800178e:	4599      	cmp	r9, r3
 8001790:	419b      	sbcs	r3, r3
 8001792:	4582      	cmp	sl, r0
 8001794:	4192      	sbcs	r2, r2
 8001796:	425b      	negs	r3, r3
 8001798:	4252      	negs	r2, r2
 800179a:	4313      	orrs	r3, r2
 800179c:	464a      	mov	r2, r9
 800179e:	0c36      	lsrs	r6, r6, #16
 80017a0:	19a4      	adds	r4, r4, r6
 80017a2:	18e3      	adds	r3, r4, r3
 80017a4:	4463      	add	r3, ip
 80017a6:	025b      	lsls	r3, r3, #9
 80017a8:	0dd2      	lsrs	r2, r2, #23
 80017aa:	431a      	orrs	r2, r3
 80017ac:	9901      	ldr	r1, [sp, #4]
 80017ae:	4692      	mov	sl, r2
 80017b0:	027a      	lsls	r2, r7, #9
 80017b2:	430a      	orrs	r2, r1
 80017b4:	1e50      	subs	r0, r2, #1
 80017b6:	4182      	sbcs	r2, r0
 80017b8:	0dff      	lsrs	r7, r7, #23
 80017ba:	4317      	orrs	r7, r2
 80017bc:	464a      	mov	r2, r9
 80017be:	0252      	lsls	r2, r2, #9
 80017c0:	4317      	orrs	r7, r2
 80017c2:	46b8      	mov	r8, r7
 80017c4:	01db      	lsls	r3, r3, #7
 80017c6:	d500      	bpl.n	80017ca <__aeabi_dmul+0x336>
 80017c8:	e6ed      	b.n	80015a6 <__aeabi_dmul+0x112>
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <__aeabi_dmul+0x36c>)
 80017cc:	9a03      	ldr	r2, [sp, #12]
 80017ce:	445b      	add	r3, fp
 80017d0:	4691      	mov	r9, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	dc00      	bgt.n	80017d8 <__aeabi_dmul+0x344>
 80017d6:	e0ac      	b.n	8001932 <__aeabi_dmul+0x49e>
 80017d8:	003a      	movs	r2, r7
 80017da:	0752      	lsls	r2, r2, #29
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dmul+0x34c>
 80017de:	e710      	b.n	8001602 <__aeabi_dmul+0x16e>
 80017e0:	220f      	movs	r2, #15
 80017e2:	4658      	mov	r0, fp
 80017e4:	403a      	ands	r2, r7
 80017e6:	2a04      	cmp	r2, #4
 80017e8:	d000      	beq.n	80017ec <__aeabi_dmul+0x358>
 80017ea:	e6f9      	b.n	80015e0 <__aeabi_dmul+0x14c>
 80017ec:	e709      	b.n	8001602 <__aeabi_dmul+0x16e>
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	fffffc01 	.word	0xfffffc01
 80017f8:	feffffff 	.word	0xfeffffff
 80017fc:	000007fe 	.word	0x000007fe
 8001800:	000003ff 	.word	0x000003ff
 8001804:	0022      	movs	r2, r4
 8001806:	4332      	orrs	r2, r6
 8001808:	d06f      	beq.n	80018ea <__aeabi_dmul+0x456>
 800180a:	2c00      	cmp	r4, #0
 800180c:	d100      	bne.n	8001810 <__aeabi_dmul+0x37c>
 800180e:	e0c2      	b.n	8001996 <__aeabi_dmul+0x502>
 8001810:	0020      	movs	r0, r4
 8001812:	f000 f9ef 	bl	8001bf4 <__clzsi2>
 8001816:	0002      	movs	r2, r0
 8001818:	0003      	movs	r3, r0
 800181a:	3a0b      	subs	r2, #11
 800181c:	201d      	movs	r0, #29
 800181e:	1a82      	subs	r2, r0, r2
 8001820:	0030      	movs	r0, r6
 8001822:	0019      	movs	r1, r3
 8001824:	40d0      	lsrs	r0, r2
 8001826:	3908      	subs	r1, #8
 8001828:	408c      	lsls	r4, r1
 800182a:	0002      	movs	r2, r0
 800182c:	4322      	orrs	r2, r4
 800182e:	0034      	movs	r4, r6
 8001830:	408c      	lsls	r4, r1
 8001832:	4659      	mov	r1, fp
 8001834:	1acb      	subs	r3, r1, r3
 8001836:	4986      	ldr	r1, [pc, #536]	@ (8001a50 <__aeabi_dmul+0x5bc>)
 8001838:	468b      	mov	fp, r1
 800183a:	449b      	add	fp, r3
 800183c:	2d0a      	cmp	r5, #10
 800183e:	dd00      	ble.n	8001842 <__aeabi_dmul+0x3ae>
 8001840:	e6a4      	b.n	800158c <__aeabi_dmul+0xf8>
 8001842:	4649      	mov	r1, r9
 8001844:	9b00      	ldr	r3, [sp, #0]
 8001846:	9401      	str	r4, [sp, #4]
 8001848:	4059      	eors	r1, r3
 800184a:	b2cb      	uxtb	r3, r1
 800184c:	0014      	movs	r4, r2
 800184e:	2000      	movs	r0, #0
 8001850:	9303      	str	r3, [sp, #12]
 8001852:	2d02      	cmp	r5, #2
 8001854:	dd00      	ble.n	8001858 <__aeabi_dmul+0x3c4>
 8001856:	e667      	b.n	8001528 <__aeabi_dmul+0x94>
 8001858:	e6fb      	b.n	8001652 <__aeabi_dmul+0x1be>
 800185a:	4653      	mov	r3, sl
 800185c:	4303      	orrs	r3, r0
 800185e:	4698      	mov	r8, r3
 8001860:	d03c      	beq.n	80018dc <__aeabi_dmul+0x448>
 8001862:	4653      	mov	r3, sl
 8001864:	2b00      	cmp	r3, #0
 8001866:	d100      	bne.n	800186a <__aeabi_dmul+0x3d6>
 8001868:	e0a3      	b.n	80019b2 <__aeabi_dmul+0x51e>
 800186a:	4650      	mov	r0, sl
 800186c:	f000 f9c2 	bl	8001bf4 <__clzsi2>
 8001870:	230b      	movs	r3, #11
 8001872:	425b      	negs	r3, r3
 8001874:	469c      	mov	ip, r3
 8001876:	0002      	movs	r2, r0
 8001878:	4484      	add	ip, r0
 800187a:	0011      	movs	r1, r2
 800187c:	4650      	mov	r0, sl
 800187e:	3908      	subs	r1, #8
 8001880:	4088      	lsls	r0, r1
 8001882:	231d      	movs	r3, #29
 8001884:	4680      	mov	r8, r0
 8001886:	4660      	mov	r0, ip
 8001888:	1a1b      	subs	r3, r3, r0
 800188a:	0020      	movs	r0, r4
 800188c:	40d8      	lsrs	r0, r3
 800188e:	0003      	movs	r3, r0
 8001890:	4640      	mov	r0, r8
 8001892:	4303      	orrs	r3, r0
 8001894:	469a      	mov	sl, r3
 8001896:	0023      	movs	r3, r4
 8001898:	408b      	lsls	r3, r1
 800189a:	4698      	mov	r8, r3
 800189c:	4b6c      	ldr	r3, [pc, #432]	@ (8001a50 <__aeabi_dmul+0x5bc>)
 800189e:	2500      	movs	r5, #0
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	469b      	mov	fp, r3
 80018a4:	2300      	movs	r3, #0
 80018a6:	9302      	str	r3, [sp, #8]
 80018a8:	e61a      	b.n	80014e0 <__aeabi_dmul+0x4c>
 80018aa:	2d0f      	cmp	r5, #15
 80018ac:	d000      	beq.n	80018b0 <__aeabi_dmul+0x41c>
 80018ae:	e0c9      	b.n	8001a44 <__aeabi_dmul+0x5b0>
 80018b0:	2380      	movs	r3, #128	@ 0x80
 80018b2:	4652      	mov	r2, sl
 80018b4:	031b      	lsls	r3, r3, #12
 80018b6:	421a      	tst	r2, r3
 80018b8:	d002      	beq.n	80018c0 <__aeabi_dmul+0x42c>
 80018ba:	421c      	tst	r4, r3
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dmul+0x42c>
 80018be:	e092      	b.n	80019e6 <__aeabi_dmul+0x552>
 80018c0:	2480      	movs	r4, #128	@ 0x80
 80018c2:	4653      	mov	r3, sl
 80018c4:	0324      	lsls	r4, r4, #12
 80018c6:	431c      	orrs	r4, r3
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	4642      	mov	r2, r8
 80018cc:	0b24      	lsrs	r4, r4, #12
 80018ce:	e63e      	b.n	800154e <__aeabi_dmul+0xba>
 80018d0:	469b      	mov	fp, r3
 80018d2:	2303      	movs	r3, #3
 80018d4:	4680      	mov	r8, r0
 80018d6:	250c      	movs	r5, #12
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	e601      	b.n	80014e0 <__aeabi_dmul+0x4c>
 80018dc:	2300      	movs	r3, #0
 80018de:	469a      	mov	sl, r3
 80018e0:	469b      	mov	fp, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	2504      	movs	r5, #4
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	e5fa      	b.n	80014e0 <__aeabi_dmul+0x4c>
 80018ea:	2101      	movs	r1, #1
 80018ec:	430d      	orrs	r5, r1
 80018ee:	2d0a      	cmp	r5, #10
 80018f0:	dd00      	ble.n	80018f4 <__aeabi_dmul+0x460>
 80018f2:	e64b      	b.n	800158c <__aeabi_dmul+0xf8>
 80018f4:	4649      	mov	r1, r9
 80018f6:	9800      	ldr	r0, [sp, #0]
 80018f8:	4041      	eors	r1, r0
 80018fa:	b2c9      	uxtb	r1, r1
 80018fc:	9103      	str	r1, [sp, #12]
 80018fe:	2d02      	cmp	r5, #2
 8001900:	dc00      	bgt.n	8001904 <__aeabi_dmul+0x470>
 8001902:	e096      	b.n	8001a32 <__aeabi_dmul+0x59e>
 8001904:	2300      	movs	r3, #0
 8001906:	2400      	movs	r4, #0
 8001908:	2001      	movs	r0, #1
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	e60c      	b.n	8001528 <__aeabi_dmul+0x94>
 800190e:	4649      	mov	r1, r9
 8001910:	2302      	movs	r3, #2
 8001912:	9a00      	ldr	r2, [sp, #0]
 8001914:	432b      	orrs	r3, r5
 8001916:	4051      	eors	r1, r2
 8001918:	b2ca      	uxtb	r2, r1
 800191a:	9203      	str	r2, [sp, #12]
 800191c:	2b0a      	cmp	r3, #10
 800191e:	dd00      	ble.n	8001922 <__aeabi_dmul+0x48e>
 8001920:	e634      	b.n	800158c <__aeabi_dmul+0xf8>
 8001922:	2d00      	cmp	r5, #0
 8001924:	d157      	bne.n	80019d6 <__aeabi_dmul+0x542>
 8001926:	9b03      	ldr	r3, [sp, #12]
 8001928:	4699      	mov	r9, r3
 800192a:	2400      	movs	r4, #0
 800192c:	2200      	movs	r2, #0
 800192e:	4b49      	ldr	r3, [pc, #292]	@ (8001a54 <__aeabi_dmul+0x5c0>)
 8001930:	e60e      	b.n	8001550 <__aeabi_dmul+0xbc>
 8001932:	4658      	mov	r0, fp
 8001934:	2101      	movs	r1, #1
 8001936:	1ac9      	subs	r1, r1, r3
 8001938:	2938      	cmp	r1, #56	@ 0x38
 800193a:	dd00      	ble.n	800193e <__aeabi_dmul+0x4aa>
 800193c:	e62f      	b.n	800159e <__aeabi_dmul+0x10a>
 800193e:	291f      	cmp	r1, #31
 8001940:	dd56      	ble.n	80019f0 <__aeabi_dmul+0x55c>
 8001942:	221f      	movs	r2, #31
 8001944:	4654      	mov	r4, sl
 8001946:	4252      	negs	r2, r2
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	40dc      	lsrs	r4, r3
 800194c:	2920      	cmp	r1, #32
 800194e:	d007      	beq.n	8001960 <__aeabi_dmul+0x4cc>
 8001950:	4b41      	ldr	r3, [pc, #260]	@ (8001a58 <__aeabi_dmul+0x5c4>)
 8001952:	4642      	mov	r2, r8
 8001954:	469c      	mov	ip, r3
 8001956:	4653      	mov	r3, sl
 8001958:	4460      	add	r0, ip
 800195a:	4083      	lsls	r3, r0
 800195c:	431a      	orrs	r2, r3
 800195e:	4690      	mov	r8, r2
 8001960:	4642      	mov	r2, r8
 8001962:	2107      	movs	r1, #7
 8001964:	1e53      	subs	r3, r2, #1
 8001966:	419a      	sbcs	r2, r3
 8001968:	000b      	movs	r3, r1
 800196a:	4322      	orrs	r2, r4
 800196c:	4013      	ands	r3, r2
 800196e:	2400      	movs	r4, #0
 8001970:	4211      	tst	r1, r2
 8001972:	d009      	beq.n	8001988 <__aeabi_dmul+0x4f4>
 8001974:	230f      	movs	r3, #15
 8001976:	4013      	ands	r3, r2
 8001978:	2b04      	cmp	r3, #4
 800197a:	d05d      	beq.n	8001a38 <__aeabi_dmul+0x5a4>
 800197c:	1d11      	adds	r1, r2, #4
 800197e:	4291      	cmp	r1, r2
 8001980:	419b      	sbcs	r3, r3
 8001982:	000a      	movs	r2, r1
 8001984:	425b      	negs	r3, r3
 8001986:	075b      	lsls	r3, r3, #29
 8001988:	08d2      	lsrs	r2, r2, #3
 800198a:	431a      	orrs	r2, r3
 800198c:	2300      	movs	r3, #0
 800198e:	e5df      	b.n	8001550 <__aeabi_dmul+0xbc>
 8001990:	9b03      	ldr	r3, [sp, #12]
 8001992:	4699      	mov	r9, r3
 8001994:	e5fa      	b.n	800158c <__aeabi_dmul+0xf8>
 8001996:	9801      	ldr	r0, [sp, #4]
 8001998:	f000 f92c 	bl	8001bf4 <__clzsi2>
 800199c:	0002      	movs	r2, r0
 800199e:	0003      	movs	r3, r0
 80019a0:	3215      	adds	r2, #21
 80019a2:	3320      	adds	r3, #32
 80019a4:	2a1c      	cmp	r2, #28
 80019a6:	dc00      	bgt.n	80019aa <__aeabi_dmul+0x516>
 80019a8:	e738      	b.n	800181c <__aeabi_dmul+0x388>
 80019aa:	9a01      	ldr	r2, [sp, #4]
 80019ac:	3808      	subs	r0, #8
 80019ae:	4082      	lsls	r2, r0
 80019b0:	e73f      	b.n	8001832 <__aeabi_dmul+0x39e>
 80019b2:	f000 f91f 	bl	8001bf4 <__clzsi2>
 80019b6:	2315      	movs	r3, #21
 80019b8:	469c      	mov	ip, r3
 80019ba:	4484      	add	ip, r0
 80019bc:	0002      	movs	r2, r0
 80019be:	4663      	mov	r3, ip
 80019c0:	3220      	adds	r2, #32
 80019c2:	2b1c      	cmp	r3, #28
 80019c4:	dc00      	bgt.n	80019c8 <__aeabi_dmul+0x534>
 80019c6:	e758      	b.n	800187a <__aeabi_dmul+0x3e6>
 80019c8:	2300      	movs	r3, #0
 80019ca:	4698      	mov	r8, r3
 80019cc:	0023      	movs	r3, r4
 80019ce:	3808      	subs	r0, #8
 80019d0:	4083      	lsls	r3, r0
 80019d2:	469a      	mov	sl, r3
 80019d4:	e762      	b.n	800189c <__aeabi_dmul+0x408>
 80019d6:	001d      	movs	r5, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	2400      	movs	r4, #0
 80019dc:	2002      	movs	r0, #2
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	e5a2      	b.n	8001528 <__aeabi_dmul+0x94>
 80019e2:	9002      	str	r0, [sp, #8]
 80019e4:	e632      	b.n	800164c <__aeabi_dmul+0x1b8>
 80019e6:	431c      	orrs	r4, r3
 80019e8:	9b00      	ldr	r3, [sp, #0]
 80019ea:	9a01      	ldr	r2, [sp, #4]
 80019ec:	4699      	mov	r9, r3
 80019ee:	e5ae      	b.n	800154e <__aeabi_dmul+0xba>
 80019f0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <__aeabi_dmul+0x5c8>)
 80019f2:	4652      	mov	r2, sl
 80019f4:	18c3      	adds	r3, r0, r3
 80019f6:	4640      	mov	r0, r8
 80019f8:	409a      	lsls	r2, r3
 80019fa:	40c8      	lsrs	r0, r1
 80019fc:	4302      	orrs	r2, r0
 80019fe:	4640      	mov	r0, r8
 8001a00:	4098      	lsls	r0, r3
 8001a02:	0003      	movs	r3, r0
 8001a04:	1e58      	subs	r0, r3, #1
 8001a06:	4183      	sbcs	r3, r0
 8001a08:	4654      	mov	r4, sl
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	40cc      	lsrs	r4, r1
 8001a0e:	0753      	lsls	r3, r2, #29
 8001a10:	d009      	beq.n	8001a26 <__aeabi_dmul+0x592>
 8001a12:	230f      	movs	r3, #15
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d005      	beq.n	8001a26 <__aeabi_dmul+0x592>
 8001a1a:	1d13      	adds	r3, r2, #4
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	4192      	sbcs	r2, r2
 8001a20:	4252      	negs	r2, r2
 8001a22:	18a4      	adds	r4, r4, r2
 8001a24:	001a      	movs	r2, r3
 8001a26:	0223      	lsls	r3, r4, #8
 8001a28:	d508      	bpl.n	8001a3c <__aeabi_dmul+0x5a8>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	2400      	movs	r4, #0
 8001a2e:	2200      	movs	r2, #0
 8001a30:	e58e      	b.n	8001550 <__aeabi_dmul+0xbc>
 8001a32:	4689      	mov	r9, r1
 8001a34:	2400      	movs	r4, #0
 8001a36:	e58b      	b.n	8001550 <__aeabi_dmul+0xbc>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e7a5      	b.n	8001988 <__aeabi_dmul+0x4f4>
 8001a3c:	0763      	lsls	r3, r4, #29
 8001a3e:	0264      	lsls	r4, r4, #9
 8001a40:	0b24      	lsrs	r4, r4, #12
 8001a42:	e7a1      	b.n	8001988 <__aeabi_dmul+0x4f4>
 8001a44:	9b00      	ldr	r3, [sp, #0]
 8001a46:	46a2      	mov	sl, r4
 8001a48:	4699      	mov	r9, r3
 8001a4a:	9b01      	ldr	r3, [sp, #4]
 8001a4c:	4698      	mov	r8, r3
 8001a4e:	e737      	b.n	80018c0 <__aeabi_dmul+0x42c>
 8001a50:	fffffc0d 	.word	0xfffffc0d
 8001a54:	000007ff 	.word	0x000007ff
 8001a58:	0000043e 	.word	0x0000043e
 8001a5c:	0000041e 	.word	0x0000041e

08001a60 <__aeabi_f2d>:
 8001a60:	b570      	push	{r4, r5, r6, lr}
 8001a62:	0242      	lsls	r2, r0, #9
 8001a64:	0043      	lsls	r3, r0, #1
 8001a66:	0fc4      	lsrs	r4, r0, #31
 8001a68:	20fe      	movs	r0, #254	@ 0xfe
 8001a6a:	0e1b      	lsrs	r3, r3, #24
 8001a6c:	1c59      	adds	r1, r3, #1
 8001a6e:	0a55      	lsrs	r5, r2, #9
 8001a70:	4208      	tst	r0, r1
 8001a72:	d00c      	beq.n	8001a8e <__aeabi_f2d+0x2e>
 8001a74:	21e0      	movs	r1, #224	@ 0xe0
 8001a76:	0089      	lsls	r1, r1, #2
 8001a78:	468c      	mov	ip, r1
 8001a7a:	076d      	lsls	r5, r5, #29
 8001a7c:	0b12      	lsrs	r2, r2, #12
 8001a7e:	4463      	add	r3, ip
 8001a80:	051b      	lsls	r3, r3, #20
 8001a82:	4313      	orrs	r3, r2
 8001a84:	07e4      	lsls	r4, r4, #31
 8001a86:	4323      	orrs	r3, r4
 8001a88:	0028      	movs	r0, r5
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	bd70      	pop	{r4, r5, r6, pc}
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d114      	bne.n	8001abc <__aeabi_f2d+0x5c>
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	d01b      	beq.n	8001ace <__aeabi_f2d+0x6e>
 8001a96:	0028      	movs	r0, r5
 8001a98:	f000 f8ac 	bl	8001bf4 <__clzsi2>
 8001a9c:	280a      	cmp	r0, #10
 8001a9e:	dc1c      	bgt.n	8001ada <__aeabi_f2d+0x7a>
 8001aa0:	230b      	movs	r3, #11
 8001aa2:	002a      	movs	r2, r5
 8001aa4:	1a1b      	subs	r3, r3, r0
 8001aa6:	40da      	lsrs	r2, r3
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	3315      	adds	r3, #21
 8001aac:	409d      	lsls	r5, r3
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <__aeabi_f2d+0x88>)
 8001ab0:	0312      	lsls	r2, r2, #12
 8001ab2:	1a1b      	subs	r3, r3, r0
 8001ab4:	055b      	lsls	r3, r3, #21
 8001ab6:	0b12      	lsrs	r2, r2, #12
 8001ab8:	0d5b      	lsrs	r3, r3, #21
 8001aba:	e7e1      	b.n	8001a80 <__aeabi_f2d+0x20>
 8001abc:	2d00      	cmp	r5, #0
 8001abe:	d009      	beq.n	8001ad4 <__aeabi_f2d+0x74>
 8001ac0:	0b13      	lsrs	r3, r2, #12
 8001ac2:	2280      	movs	r2, #128	@ 0x80
 8001ac4:	0312      	lsls	r2, r2, #12
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	076d      	lsls	r5, r5, #29
 8001aca:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <__aeabi_f2d+0x8c>)
 8001acc:	e7d8      	b.n	8001a80 <__aeabi_f2d+0x20>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	e7d5      	b.n	8001a80 <__aeabi_f2d+0x20>
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <__aeabi_f2d+0x8c>)
 8001ad8:	e7d2      	b.n	8001a80 <__aeabi_f2d+0x20>
 8001ada:	0003      	movs	r3, r0
 8001adc:	002a      	movs	r2, r5
 8001ade:	3b0b      	subs	r3, #11
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	2500      	movs	r5, #0
 8001ae4:	e7e3      	b.n	8001aae <__aeabi_f2d+0x4e>
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	00000389 	.word	0x00000389
 8001aec:	000007ff 	.word	0x000007ff

08001af0 <__aeabi_d2f>:
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af2:	004b      	lsls	r3, r1, #1
 8001af4:	030f      	lsls	r7, r1, #12
 8001af6:	0d5b      	lsrs	r3, r3, #21
 8001af8:	4c3a      	ldr	r4, [pc, #232]	@ (8001be4 <__aeabi_d2f+0xf4>)
 8001afa:	0f45      	lsrs	r5, r0, #29
 8001afc:	b083      	sub	sp, #12
 8001afe:	0a7f      	lsrs	r7, r7, #9
 8001b00:	1c5e      	adds	r6, r3, #1
 8001b02:	432f      	orrs	r7, r5
 8001b04:	9000      	str	r0, [sp, #0]
 8001b06:	9101      	str	r1, [sp, #4]
 8001b08:	0fca      	lsrs	r2, r1, #31
 8001b0a:	00c5      	lsls	r5, r0, #3
 8001b0c:	4226      	tst	r6, r4
 8001b0e:	d00b      	beq.n	8001b28 <__aeabi_d2f+0x38>
 8001b10:	4935      	ldr	r1, [pc, #212]	@ (8001be8 <__aeabi_d2f+0xf8>)
 8001b12:	185c      	adds	r4, r3, r1
 8001b14:	2cfe      	cmp	r4, #254	@ 0xfe
 8001b16:	dd13      	ble.n	8001b40 <__aeabi_d2f+0x50>
 8001b18:	20ff      	movs	r0, #255	@ 0xff
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	05c0      	lsls	r0, r0, #23
 8001b1e:	4318      	orrs	r0, r3
 8001b20:	07d2      	lsls	r2, r2, #31
 8001b22:	4310      	orrs	r0, r2
 8001b24:	b003      	add	sp, #12
 8001b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b28:	433d      	orrs	r5, r7
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <__aeabi_d2f+0x42>
 8001b2e:	2000      	movs	r0, #0
 8001b30:	e7f4      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001b32:	2d00      	cmp	r5, #0
 8001b34:	d0f0      	beq.n	8001b18 <__aeabi_d2f+0x28>
 8001b36:	2380      	movs	r3, #128	@ 0x80
 8001b38:	03db      	lsls	r3, r3, #15
 8001b3a:	20ff      	movs	r0, #255	@ 0xff
 8001b3c:	433b      	orrs	r3, r7
 8001b3e:	e7ed      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001b40:	2c00      	cmp	r4, #0
 8001b42:	dd0c      	ble.n	8001b5e <__aeabi_d2f+0x6e>
 8001b44:	9b00      	ldr	r3, [sp, #0]
 8001b46:	00ff      	lsls	r7, r7, #3
 8001b48:	019b      	lsls	r3, r3, #6
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	4183      	sbcs	r3, r0
 8001b4e:	0f69      	lsrs	r1, r5, #29
 8001b50:	433b      	orrs	r3, r7
 8001b52:	430b      	orrs	r3, r1
 8001b54:	0759      	lsls	r1, r3, #29
 8001b56:	d127      	bne.n	8001ba8 <__aeabi_d2f+0xb8>
 8001b58:	08db      	lsrs	r3, r3, #3
 8001b5a:	b2e0      	uxtb	r0, r4
 8001b5c:	e7de      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001b5e:	0021      	movs	r1, r4
 8001b60:	3117      	adds	r1, #23
 8001b62:	db31      	blt.n	8001bc8 <__aeabi_d2f+0xd8>
 8001b64:	2180      	movs	r1, #128	@ 0x80
 8001b66:	201e      	movs	r0, #30
 8001b68:	0409      	lsls	r1, r1, #16
 8001b6a:	4339      	orrs	r1, r7
 8001b6c:	1b00      	subs	r0, r0, r4
 8001b6e:	281f      	cmp	r0, #31
 8001b70:	dd2d      	ble.n	8001bce <__aeabi_d2f+0xde>
 8001b72:	2602      	movs	r6, #2
 8001b74:	4276      	negs	r6, r6
 8001b76:	1b34      	subs	r4, r6, r4
 8001b78:	000e      	movs	r6, r1
 8001b7a:	40e6      	lsrs	r6, r4
 8001b7c:	0034      	movs	r4, r6
 8001b7e:	2820      	cmp	r0, #32
 8001b80:	d004      	beq.n	8001b8c <__aeabi_d2f+0x9c>
 8001b82:	481a      	ldr	r0, [pc, #104]	@ (8001bec <__aeabi_d2f+0xfc>)
 8001b84:	4684      	mov	ip, r0
 8001b86:	4463      	add	r3, ip
 8001b88:	4099      	lsls	r1, r3
 8001b8a:	430d      	orrs	r5, r1
 8001b8c:	002b      	movs	r3, r5
 8001b8e:	1e59      	subs	r1, r3, #1
 8001b90:	418b      	sbcs	r3, r1
 8001b92:	4323      	orrs	r3, r4
 8001b94:	0759      	lsls	r1, r3, #29
 8001b96:	d003      	beq.n	8001ba0 <__aeabi_d2f+0xb0>
 8001b98:	210f      	movs	r1, #15
 8001b9a:	4019      	ands	r1, r3
 8001b9c:	2904      	cmp	r1, #4
 8001b9e:	d10b      	bne.n	8001bb8 <__aeabi_d2f+0xc8>
 8001ba0:	019b      	lsls	r3, r3, #6
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	0a5b      	lsrs	r3, r3, #9
 8001ba6:	e7b9      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001ba8:	210f      	movs	r1, #15
 8001baa:	4019      	ands	r1, r3
 8001bac:	2904      	cmp	r1, #4
 8001bae:	d104      	bne.n	8001bba <__aeabi_d2f+0xca>
 8001bb0:	019b      	lsls	r3, r3, #6
 8001bb2:	0a5b      	lsrs	r3, r3, #9
 8001bb4:	b2e0      	uxtb	r0, r4
 8001bb6:	e7b1      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001bb8:	2400      	movs	r4, #0
 8001bba:	3304      	adds	r3, #4
 8001bbc:	0159      	lsls	r1, r3, #5
 8001bbe:	d5f7      	bpl.n	8001bb0 <__aeabi_d2f+0xc0>
 8001bc0:	3401      	adds	r4, #1
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	b2e0      	uxtb	r0, r4
 8001bc6:	e7a9      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001bc8:	2000      	movs	r0, #0
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e7a6      	b.n	8001b1c <__aeabi_d2f+0x2c>
 8001bce:	4c08      	ldr	r4, [pc, #32]	@ (8001bf0 <__aeabi_d2f+0x100>)
 8001bd0:	191c      	adds	r4, r3, r4
 8001bd2:	002b      	movs	r3, r5
 8001bd4:	40a5      	lsls	r5, r4
 8001bd6:	40c3      	lsrs	r3, r0
 8001bd8:	40a1      	lsls	r1, r4
 8001bda:	1e68      	subs	r0, r5, #1
 8001bdc:	4185      	sbcs	r5, r0
 8001bde:	4329      	orrs	r1, r5
 8001be0:	430b      	orrs	r3, r1
 8001be2:	e7d7      	b.n	8001b94 <__aeabi_d2f+0xa4>
 8001be4:	000007fe 	.word	0x000007fe
 8001be8:	fffffc80 	.word	0xfffffc80
 8001bec:	fffffca2 	.word	0xfffffca2
 8001bf0:	fffffc82 	.word	0xfffffc82

08001bf4 <__clzsi2>:
 8001bf4:	211c      	movs	r1, #28
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	041b      	lsls	r3, r3, #16
 8001bfa:	4298      	cmp	r0, r3
 8001bfc:	d301      	bcc.n	8001c02 <__clzsi2+0xe>
 8001bfe:	0c00      	lsrs	r0, r0, #16
 8001c00:	3910      	subs	r1, #16
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	4298      	cmp	r0, r3
 8001c06:	d301      	bcc.n	8001c0c <__clzsi2+0x18>
 8001c08:	0a00      	lsrs	r0, r0, #8
 8001c0a:	3908      	subs	r1, #8
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	4298      	cmp	r0, r3
 8001c10:	d301      	bcc.n	8001c16 <__clzsi2+0x22>
 8001c12:	0900      	lsrs	r0, r0, #4
 8001c14:	3904      	subs	r1, #4
 8001c16:	a202      	add	r2, pc, #8	@ (adr r2, 8001c20 <__clzsi2+0x2c>)
 8001c18:	5c10      	ldrb	r0, [r2, r0]
 8001c1a:	1840      	adds	r0, r0, r1
 8001c1c:	4770      	bx	lr
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	02020304 	.word	0x02020304
 8001c24:	01010101 	.word	0x01010101
	...

08001c30 <bma400_init>:
/************************************************************************************/
/*********************** User function definitions **********************************/
/************************************************************************************/

int8_t bma400_init(struct bma400_dev *dev)
{
 8001c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001c38:	260e      	movs	r6, #14
 8001c3a:	19bb      	adds	r3, r7, r6
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001c40:	250f      	movs	r5, #15
 8001c42:	197c      	adds	r4, r7, r5
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 fbc0 	bl	80023cc <null_ptr_check>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8001c50:	002c      	movs	r4, r5
 8001c52:	193b      	adds	r3, r7, r4
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d13c      	bne.n	8001cd6 <bma400_init+0xa6>
    {
        /* Initial power-up time */
        dev->delay_us(5000, dev->intf_ptr);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4820      	ldr	r0, [pc, #128]	@ (8001ce8 <bma400_init+0xb8>)
 8001c66:	0019      	movs	r1, r3
 8001c68:	4790      	blx	r2

        /* Assigning dummy byte value */
        if (dev->intf == BMA400_SPI_INTF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	785b      	ldrb	r3, [r3, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10c      	bne.n	8001c8c <bma400_init+0x5c>
        {
            /* Dummy Byte availability */
            dev->dummy_byte = 1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	721a      	strb	r2, [r3, #8]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8001c78:	193c      	adds	r4, r7, r4
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	19b9      	adds	r1, r7, r6
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2000      	movs	r0, #0
 8001c82:	f000 f8b1 	bl	8001de8 <bma400_get_regs>
 8001c86:	0003      	movs	r3, r0
 8001c88:	7023      	strb	r3, [r4, #0]
 8001c8a:	e002      	b.n	8001c92 <bma400_init+0x62>
        }
        else
        {
            dev->dummy_byte = 0;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	721a      	strb	r2, [r3, #8]
        }

        if (rslt == BMA400_OK)
 8001c92:	250f      	movs	r5, #15
 8001c94:	197b      	adds	r3, r7, r5
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11b      	bne.n	8001cd6 <bma400_init+0xa6>
        {
            /* Chip ID of the sensor is read */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8001c9e:	197c      	adds	r4, r7, r5
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	260e      	movs	r6, #14
 8001ca4:	19b9      	adds	r1, r7, r6
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f000 f89d 	bl	8001de8 <bma400_get_regs>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	7023      	strb	r3, [r4, #0]

            /* Proceed if everything is fine until now */
            if (rslt == BMA400_OK)
 8001cb2:	197b      	adds	r3, r7, r5
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10c      	bne.n	8001cd6 <bma400_init+0xa6>
            {
                /* Check for chip id validity */
                if (chip_id == BMA400_CHIP_ID)
 8001cbc:	19bb      	adds	r3, r7, r6
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b90      	cmp	r3, #144	@ 0x90
 8001cc2:	d104      	bne.n	8001cce <bma400_init+0x9e>
                {
                    /* Store the chip ID in dev structure */
                    dev->chip_id = chip_id;
 8001cc4:	19bb      	adds	r3, r7, r6
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	e003      	b.n	8001cd6 <bma400_init+0xa6>
                }
                else
                {
                    rslt = BMA400_E_DEV_NOT_FOUND;
 8001cce:	230f      	movs	r3, #15
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	22fd      	movs	r2, #253	@ 0xfd
 8001cd4:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    return rslt;
 8001cd6:	230f      	movs	r3, #15
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b25b      	sxtb	r3, r3
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b005      	add	sp, #20
 8001ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	00001388 	.word	0x00001388

08001cec <bma400_set_regs>:

int8_t bma400_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 8001cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	1c02      	adds	r2, r0, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t count;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001d00:	2617      	movs	r6, #23
 8001d02:	19bc      	adds	r4, r7, r6
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f000 fb60 	bl	80023cc <null_ptr_check>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8001d10:	19bb      	adds	r3, r7, r6
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d158      	bne.n	8001dcc <bma400_set_regs+0xe0>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d055      	beq.n	8001dcc <bma400_set_regs+0xe0>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        if (len == 1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d116      	bne.n	8001d54 <bma400_set_regs+0x68>
        {
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691c      	ldr	r4, [r3, #16]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685d      	ldr	r5, [r3, #4]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	230f      	movs	r3, #15
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	7818      	ldrb	r0, [r3, #0]
 8001d38:	002b      	movs	r3, r5
 8001d3a:	47a0      	blx	r4
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	001a      	movs	r2, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	771a      	strb	r2, [r3, #28]
            if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	7f1b      	ldrb	r3, [r3, #28]
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <bma400_set_regs+0x68>
            {
                /* Failure case */
                rslt = BMA400_E_COM_FAIL;
 8001d4e:	19bb      	adds	r3, r7, r6
 8001d50:	22fe      	movs	r2, #254	@ 0xfe
 8001d52:	701a      	strb	r2, [r3, #0]

        /* Burst write is not allowed thus we split burst case write
         * into single byte writes Thus user can write multiple bytes
         * with ease
         */
        if (len > 1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d93d      	bls.n	8001dd6 <bma400_set_regs+0xea>
        {
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8001d5a:	2316      	movs	r3, #22
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e026      	b.n	8001db2 <bma400_set_regs+0xc6>
            {
                dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691c      	ldr	r4, [r3, #16]
 8001d68:	2316      	movs	r3, #22
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	18d1      	adds	r1, r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	250f      	movs	r5, #15
 8001d78:	197b      	adds	r3, r7, r5
 8001d7a:	7818      	ldrb	r0, [r3, #0]
 8001d7c:	0013      	movs	r3, r2
 8001d7e:	2201      	movs	r2, #1
 8001d80:	47a0      	blx	r4
 8001d82:	0003      	movs	r3, r0
 8001d84:	001a      	movs	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	771a      	strb	r2, [r3, #28]
                reg_addr++;
 8001d8a:	197b      	adds	r3, r7, r5
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	197b      	adds	r3, r7, r5
 8001d90:	3201      	adds	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
                if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	7f1b      	ldrb	r3, [r3, #28]
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <bma400_set_regs+0xba>
                {
                    /* Failure case */
                    rslt = BMA400_E_COM_FAIL;
 8001d9e:	2317      	movs	r3, #23
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	22fe      	movs	r2, #254	@ 0xfe
 8001da4:	701a      	strb	r2, [r3, #0]
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8001da6:	2116      	movs	r1, #22
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	3201      	adds	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	2316      	movs	r3, #22
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d90b      	bls.n	8001dd6 <bma400_set_regs+0xea>
 8001dbe:	2317      	movs	r3, #23
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b25b      	sxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0cc      	beq.n	8001d64 <bma400_set_regs+0x78>
        if (len > 1)
 8001dca:	e004      	b.n	8001dd6 <bma400_set_regs+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001dcc:	2317      	movs	r3, #23
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	22ff      	movs	r2, #255	@ 0xff
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e000      	b.n	8001dd8 <bma400_set_regs+0xec>
        if (len > 1)
 8001dd6:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 8001dd8:	2317      	movs	r3, #23
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b25b      	sxtb	r3, r3
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b007      	add	sp, #28
 8001de6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001de8 <bma400_get_regs>:

int8_t bma400_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	b0a7      	sub	sp, #156	@ 0x9c
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	250f      	movs	r5, #15
 8001df6:	197b      	adds	r3, r7, r5
 8001df8:	1c02      	adds	r2, r0, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t index;
    uint8_t temp_buff[BMA400_MAX_LEN];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001dfc:	2697      	movs	r6, #151	@ 0x97
 8001dfe:	19bc      	adds	r4, r7, r6
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 fae2 	bl	80023cc <null_ptr_check>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8001e0c:	19bb      	adds	r3, r7, r6
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d14a      	bne.n	8001eac <bma400_get_regs+0xc4>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d047      	beq.n	8001eac <bma400_get_regs+0xc4>
    {
        if (dev->intf != BMA400_I2C_INTF)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	785b      	ldrb	r3, [r3, #1]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d006      	beq.n	8001e32 <bma400_get_regs+0x4a>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 8001e24:	197b      	adds	r3, r7, r5
 8001e26:	197a      	adds	r2, r7, r5
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	2180      	movs	r1, #128	@ 0x80
 8001e2c:	4249      	negs	r1, r1
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68dc      	ldr	r4, [r3, #12]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	7a1b      	ldrb	r3, [r3, #8]
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	18d2      	adds	r2, r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685d      	ldr	r5, [r3, #4]
 8001e44:	2314      	movs	r3, #20
 8001e46:	18f9      	adds	r1, r7, r3
 8001e48:	230f      	movs	r3, #15
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	7818      	ldrb	r0, [r3, #0]
 8001e4e:	002b      	movs	r3, r5
 8001e50:	47a0      	blx	r4
 8001e52:	0003      	movs	r3, r0
 8001e54:	001a      	movs	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	771a      	strb	r2, [r3, #28]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	7f1b      	ldrb	r3, [r3, #28]
 8001e5e:	b25b      	sxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d11e      	bne.n	8001ea2 <bma400_get_regs+0xba>
        {
            for (index = 0; index < len; index++)
 8001e64:	2394      	movs	r3, #148	@ 0x94
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2200      	movs	r2, #0
 8001e6a:	801a      	strh	r2, [r3, #0]
 8001e6c:	e012      	b.n	8001e94 <bma400_get_regs+0xac>
            {
                /* Parse the data read and store in "reg_data"
                 * buffer so that the dummy byte is removed
                 * and user will get only valid data
                 */
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 8001e6e:	2094      	movs	r0, #148	@ 0x94
 8001e70:	183b      	adds	r3, r7, r0
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	7a12      	ldrb	r2, [r2, #8]
 8001e78:	189a      	adds	r2, r3, r2
 8001e7a:	183b      	adds	r3, r7, r0
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	18cb      	adds	r3, r1, r3
 8001e82:	2114      	movs	r1, #20
 8001e84:	1879      	adds	r1, r7, r1
 8001e86:	5c8a      	ldrb	r2, [r1, r2]
 8001e88:	701a      	strb	r2, [r3, #0]
            for (index = 0; index < len; index++)
 8001e8a:	183b      	adds	r3, r7, r0
 8001e8c:	881a      	ldrh	r2, [r3, #0]
 8001e8e:	183b      	adds	r3, r7, r0
 8001e90:	3201      	adds	r2, #1
 8001e92:	801a      	strh	r2, [r3, #0]
 8001e94:	2394      	movs	r3, #148	@ 0x94
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8e6      	bhi.n	8001e6e <bma400_get_regs+0x86>
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8001ea0:	e008      	b.n	8001eb4 <bma400_get_regs+0xcc>
            }
        }
        else
        {
            /* Failure case */
            rslt = BMA400_E_COM_FAIL;
 8001ea2:	2397      	movs	r3, #151	@ 0x97
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	22fe      	movs	r2, #254	@ 0xfe
 8001ea8:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8001eaa:	e003      	b.n	8001eb4 <bma400_get_regs+0xcc>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001eac:	2397      	movs	r3, #151	@ 0x97
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	22ff      	movs	r2, #255	@ 0xff
 8001eb2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001eb4:	2397      	movs	r3, #151	@ 0x97
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	b25b      	sxtb	r3, r3
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b027      	add	sp, #156	@ 0x9c
 8001ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ec4 <bma400_set_power_mode>:

    return rslt;
}

int8_t bma400_set_power_mode(uint8_t power_mode, struct bma400_dev *dev)
{
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	0002      	movs	r2, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	1dfb      	adds	r3, r7, #7
 8001ed0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data = 0;
 8001ed2:	260e      	movs	r6, #14
 8001ed4:	19bb      	adds	r3, r7, r6
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]

    rslt = null_ptr_check(dev);
 8001eda:	250f      	movs	r5, #15
 8001edc:	197c      	adds	r4, r7, r5
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f000 fa73 	bl	80023cc <null_ptr_check>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8001eea:	197b      	adds	r3, r7, r5
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d108      	bne.n	8001f06 <bma400_set_power_mode+0x42>
    {
        rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 8001ef4:	197c      	adds	r4, r7, r5
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	19b9      	adds	r1, r7, r6
 8001efa:	2201      	movs	r2, #1
 8001efc:	2019      	movs	r0, #25
 8001efe:	f7ff ff73 	bl	8001de8 <bma400_get_regs>
 8001f02:	0003      	movs	r3, r0
 8001f04:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BMA400_OK)
 8001f06:	240f      	movs	r4, #15
 8001f08:	193b      	adds	r3, r7, r4
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d12d      	bne.n	8001f6e <bma400_set_power_mode+0xaa>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 8001f12:	200e      	movs	r0, #14
 8001f14:	183b      	adds	r3, r7, r0
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b25b      	sxtb	r3, r3
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	4393      	bics	r3, r2
 8001f1e:	b25a      	sxtb	r2, r3
 8001f20:	1dfb      	adds	r3, r7, #7
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b25b      	sxtb	r3, r3
 8001f26:	2103      	movs	r1, #3
 8001f28:	400b      	ands	r3, r1
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b25b      	sxtb	r3, r3
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	183b      	adds	r3, r7, r0
 8001f34:	701a      	strb	r2, [r3, #0]

        /* Set the power mode of sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 8001f36:	193c      	adds	r4, r7, r4
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	1839      	adds	r1, r7, r0
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2019      	movs	r0, #25
 8001f40:	f7ff fed4 	bl	8001cec <bma400_set_regs>
 8001f44:	0003      	movs	r3, r0
 8001f46:	7023      	strb	r3, [r4, #0]
        if (power_mode == BMA400_MODE_LOW_POWER)
 8001f48:	1dfb      	adds	r3, r7, #7
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <bma400_set_power_mode+0x9c>
        {
            /* A delay of 1/ODR is required to switch power modes
             * Low power mode has 25Hz frequency and hence it needs
             * 40ms delay to enter low power mode
             */
            dev->delay_us(40000, dev->intf_ptr);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4809      	ldr	r0, [pc, #36]	@ (8001f80 <bma400_set_power_mode+0xbc>)
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	4790      	blx	r2
 8001f5e:	e006      	b.n	8001f6e <bma400_set_power_mode+0xaa>
        }
        else
        {
            dev->delay_us(10000, dev->intf_ptr); /* TBC */
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4806      	ldr	r0, [pc, #24]	@ (8001f84 <bma400_set_power_mode+0xc0>)
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	4790      	blx	r2
        }
    }

    return rslt;
 8001f6e:	230f      	movs	r3, #15
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	b25b      	sxtb	r3, r3
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b005      	add	sp, #20
 8001f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	00009c40 	.word	0x00009c40
 8001f84:	00002710 	.word	0x00002710

08001f88 <bma400_get_power_mode>:

int8_t bma400_get_power_mode(uint8_t *power_mode, struct bma400_dev *dev)
{
 8001f88:	b5b0      	push	{r4, r5, r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001f92:	250f      	movs	r5, #15
 8001f94:	197c      	adds	r4, r7, r5
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f000 fa17 	bl	80023cc <null_ptr_check>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (power_mode != NULL))
 8001fa2:	002a      	movs	r2, r5
 8001fa4:	18bb      	adds	r3, r7, r2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <bma400_get_power_mode+0x54>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <bma400_get_power_mode+0x54>
    {
        rslt = bma400_get_regs(BMA400_REG_STATUS, &reg_data, 1, dev);
 8001fb4:	18bc      	adds	r4, r7, r2
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	250e      	movs	r5, #14
 8001fba:	1979      	adds	r1, r7, r5
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f7ff ff12 	bl	8001de8 <bma400_get_regs>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	7023      	strb	r3, [r4, #0]
        *power_mode = BMA400_GET_BITS(reg_data, BMA400_POWER_MODE_STATUS);
 8001fc8:	197b      	adds	r3, r7, r5
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	105b      	asrs	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e003      	b.n	8001fe4 <bma400_get_power_mode+0x5c>
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001fdc:	230f      	movs	r3, #15
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	22ff      	movs	r2, #255	@ 0xff
 8001fe2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001fe4:	230f      	movs	r3, #15
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25b      	sxtb	r3, r3
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b004      	add	sp, #16
 8001ff2:	bdb0      	pop	{r4, r5, r7, pc}

08001ff4 <bma400_get_accel_data>:

int8_t bma400_get_accel_data(uint8_t data_sel, struct bma400_sensor_data *accel, struct bma400_dev *dev)
{
 8001ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	260f      	movs	r6, #15
 8002000:	19bb      	adds	r3, r7, r6
 8002002:	1c02      	adds	r2, r0, #0
 8002004:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002006:	2517      	movs	r5, #23
 8002008:	197c      	adds	r4, r7, r5
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 f9dd 	bl	80023cc <null_ptr_check>
 8002012:	0003      	movs	r3, r0
 8002014:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (accel != NULL))
 8002016:	002a      	movs	r2, r5
 8002018:	18bb      	adds	r3, r7, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	b25b      	sxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10d      	bne.n	800203e <bma400_get_accel_data+0x4a>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <bma400_get_accel_data+0x4a>
    {
        /* Read and store the accel data */
        rslt = get_accel_data(data_sel, accel, dev);
 8002028:	18bc      	adds	r4, r7, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	19bb      	adds	r3, r7, r6
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	0018      	movs	r0, r3
 8002034:	f000 fb50 	bl	80026d8 <get_accel_data>
 8002038:	0003      	movs	r3, r0
 800203a:	7023      	strb	r3, [r4, #0]
 800203c:	e003      	b.n	8002046 <bma400_get_accel_data+0x52>
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 800203e:	2317      	movs	r3, #23
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	22ff      	movs	r2, #255	@ 0xff
 8002044:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002046:	2317      	movs	r3, #23
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b25b      	sxtb	r3, r3
}
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b007      	add	sp, #28
 8002054:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002056 <bma400_set_sensor_conf>:

int8_t bma400_set_sensor_conf(const struct bma400_sensor_conf *conf, uint16_t n_sett, struct bma400_dev *dev)
{
 8002056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002058:	b087      	sub	sp, #28
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	230a      	movs	r3, #10
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	1c0a      	adds	r2, r1, #0
 8002066:	801a      	strh	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx = 0;
 8002068:	2614      	movs	r6, #20
 800206a:	19bb      	adds	r3, r7, r6
 800206c:	2200      	movs	r2, #0
 800206e:	801a      	strh	r2, [r3, #0]
    uint8_t data_array[3] = { 0 };
 8002070:	2310      	movs	r3, #16
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	0018      	movs	r0, r3
 8002076:	2303      	movs	r3, #3
 8002078:	001a      	movs	r2, r3
 800207a:	2100      	movs	r1, #0
 800207c:	f004 ff02 	bl	8006e84 <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002080:	2517      	movs	r5, #23
 8002082:	197c      	adds	r4, r7, r5
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	0018      	movs	r0, r3
 8002088:	f000 f9a0 	bl	80023cc <null_ptr_check>
 800208c:	0003      	movs	r3, r0
 800208e:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (conf != NULL))
 8002090:	197b      	adds	r3, r7, r5
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b25b      	sxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d14d      	bne.n	8002136 <bma400_set_sensor_conf+0xe0>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d04a      	beq.n	8002136 <bma400_set_sensor_conf+0xe0>
    {
        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 80020a0:	197c      	adds	r4, r7, r5
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2210      	movs	r2, #16
 80020a6:	18b9      	adds	r1, r7, r2
 80020a8:	2203      	movs	r2, #3
 80020aa:	2021      	movs	r0, #33	@ 0x21
 80020ac:	f7ff fe9c 	bl	8001de8 <bma400_get_regs>
 80020b0:	0003      	movs	r3, r0
 80020b2:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 80020b4:	197b      	adds	r3, r7, r5
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b25b      	sxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d140      	bne.n	8002140 <bma400_set_sensor_conf+0xea>
        {
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80020be:	19bb      	adds	r3, r7, r6
 80020c0:	2200      	movs	r2, #0
 80020c2:	801a      	strh	r2, [r3, #0]
 80020c4:	e018      	b.n	80020f8 <bma400_set_sensor_conf+0xa2>
            {
                rslt = set_sensor_conf(data_array, conf + idx, dev);
 80020c6:	2514      	movs	r5, #20
 80020c8:	197b      	adds	r3, r7, r5
 80020ca:	881a      	ldrh	r2, [r3, #0]
 80020cc:	0013      	movs	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	189b      	adds	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	001a      	movs	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1899      	adds	r1, r3, r2
 80020da:	2317      	movs	r3, #23
 80020dc:	18fc      	adds	r4, r7, r3
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	2310      	movs	r3, #16
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 f995 	bl	8002414 <set_sensor_conf>
 80020ea:	0003      	movs	r3, r0
 80020ec:	7023      	strb	r3, [r4, #0]
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80020ee:	197b      	adds	r3, r7, r5
 80020f0:	881a      	ldrh	r2, [r3, #0]
 80020f2:	197b      	adds	r3, r7, r5
 80020f4:	3201      	adds	r2, #1
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	2314      	movs	r3, #20
 80020fa:	18fa      	adds	r2, r7, r3
 80020fc:	230a      	movs	r3, #10
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	8812      	ldrh	r2, [r2, #0]
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d205      	bcs.n	8002114 <bma400_set_sensor_conf+0xbe>
 8002108:	2317      	movs	r3, #23
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b25b      	sxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0d8      	beq.n	80020c6 <bma400_set_sensor_conf+0x70>
            }

            if (rslt == BMA400_OK)
 8002114:	2217      	movs	r2, #23
 8002116:	18bb      	adds	r3, r7, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b25b      	sxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10f      	bne.n	8002140 <bma400_set_sensor_conf+0xea>
            {
                /* Set the interrupt pin mapping configurations */
                rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8002120:	18bc      	adds	r4, r7, r2
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2210      	movs	r2, #16
 8002126:	18b9      	adds	r1, r7, r2
 8002128:	2203      	movs	r2, #3
 800212a:	2021      	movs	r0, #33	@ 0x21
 800212c:	f7ff fdde 	bl	8001cec <bma400_set_regs>
 8002130:	0003      	movs	r3, r0
 8002132:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8002134:	e004      	b.n	8002140 <bma400_set_sensor_conf+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8002136:	2317      	movs	r3, #23
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	22ff      	movs	r2, #255	@ 0xff
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e000      	b.n	8002142 <bma400_set_sensor_conf+0xec>
        if (rslt == BMA400_OK)
 8002140:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 8002142:	2317      	movs	r3, #23
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b25b      	sxtb	r3, r3
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b007      	add	sp, #28
 8002150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002154 <bma400_set_device_conf>:

    return rslt;
}

int8_t bma400_set_device_conf(const struct bma400_device_conf *conf, uint8_t n_sett, struct bma400_dev *dev)
{
 8002154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	230b      	movs	r3, #11
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	1c0a      	adds	r2, r1, #0
 8002164:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx;
    uint8_t data_array[3] = { 0 };
 8002166:	2610      	movs	r6, #16
 8002168:	19bb      	adds	r3, r7, r6
 800216a:	0018      	movs	r0, r3
 800216c:	2303      	movs	r3, #3
 800216e:	001a      	movs	r2, r3
 8002170:	2100      	movs	r1, #0
 8002172:	f004 fe87 	bl	8006e84 <memset>

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8002176:	2517      	movs	r5, #23
 8002178:	197c      	adds	r4, r7, r5
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	f000 f925 	bl	80023cc <null_ptr_check>
 8002182:	0003      	movs	r3, r0
 8002184:	7023      	strb	r3, [r4, #0]

    if ((rslt == BMA400_OK) && (conf != NULL))
 8002186:	197b      	adds	r3, r7, r5
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b25b      	sxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d000      	beq.n	8002192 <bma400_set_device_conf+0x3e>
 8002190:	e10e      	b.n	80023b0 <bma400_set_device_conf+0x25c>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d100      	bne.n	800219a <bma400_set_device_conf+0x46>
 8002198:	e10a      	b.n	80023b0 <bma400_set_device_conf+0x25c>
    {

        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 800219a:	197c      	adds	r4, r7, r5
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	19b9      	adds	r1, r7, r6
 80021a0:	2203      	movs	r2, #3
 80021a2:	2021      	movs	r0, #33	@ 0x21
 80021a4:	f7ff fe20 	bl	8001de8 <bma400_get_regs>
 80021a8:	0003      	movs	r3, r0
 80021aa:	7023      	strb	r3, [r4, #0]

        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80021ac:	2314      	movs	r3, #20
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	2200      	movs	r2, #0
 80021b2:	801a      	strh	r2, [r3, #0]
 80021b4:	e0db      	b.n	800236e <bma400_set_device_conf+0x21a>
        {
            switch (conf[idx].type)
 80021b6:	2314      	movs	r3, #20
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	881a      	ldrh	r2, [r3, #0]
 80021bc:	0013      	movs	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	189b      	adds	r3, r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	001a      	movs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	189b      	adds	r3, r3, r2
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d900      	bls.n	80021d2 <bma400_set_device_conf+0x7e>
 80021d0:	e0bf      	b.n	8002352 <bma400_set_device_conf+0x1fe>
 80021d2:	009a      	lsls	r2, r3, #2
 80021d4:	4b7c      	ldr	r3, [pc, #496]	@ (80023c8 <bma400_set_device_conf+0x274>)
 80021d6:	18d3      	adds	r3, r2, r3
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	469f      	mov	pc, r3
            {
                case BMA400_AUTOWAKEUP_TIMEOUT:
                    rslt = set_autowakeup_timeout(&conf[idx].param.auto_wakeup, dev);
 80021dc:	2314      	movs	r3, #20
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	881a      	ldrh	r2, [r3, #0]
 80021e2:	0013      	movs	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	189b      	adds	r3, r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	001a      	movs	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	189b      	adds	r3, r3, r2
 80021f0:	3302      	adds	r3, #2
 80021f2:	2217      	movs	r2, #23
 80021f4:	18bc      	adds	r4, r7, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	0011      	movs	r1, r2
 80021fa:	0018      	movs	r0, r3
 80021fc:	f000 fb56 	bl	80028ac <set_autowakeup_timeout>
 8002200:	0003      	movs	r3, r0
 8002202:	7023      	strb	r3, [r4, #0]
                    break;
 8002204:	e0ad      	b.n	8002362 <bma400_set_device_conf+0x20e>
                case BMA400_AUTOWAKEUP_INT:
                    rslt = set_autowakeup_interrupt(&conf[idx].param.wakeup, dev);
 8002206:	2514      	movs	r5, #20
 8002208:	197b      	adds	r3, r7, r5
 800220a:	881a      	ldrh	r2, [r3, #0]
 800220c:	0013      	movs	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	189b      	adds	r3, r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	001a      	movs	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	189b      	adds	r3, r3, r2
 800221a:	3302      	adds	r3, #2
 800221c:	2617      	movs	r6, #23
 800221e:	19bc      	adds	r4, r7, r6
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	0011      	movs	r1, r2
 8002224:	0018      	movs	r0, r3
 8002226:	f000 fbdd 	bl	80029e4 <set_autowakeup_interrupt>
 800222a:	0003      	movs	r3, r0
 800222c:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 800222e:	19bb      	adds	r3, r7, r6
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b25b      	sxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d000      	beq.n	800223a <bma400_set_device_conf+0xe6>
 8002238:	e090      	b.n	800235c <bma400_set_device_conf+0x208>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_WAKEUP_INT_MAP, conf[idx].param.wakeup.int_chan);
 800223a:	197b      	adds	r3, r7, r5
 800223c:	881a      	ldrh	r2, [r3, #0]
 800223e:	0013      	movs	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	189b      	adds	r3, r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	001a      	movs	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	189b      	adds	r3, r3, r2
 800224c:	7a5a      	ldrb	r2, [r3, #9]
 800224e:	2310      	movs	r3, #16
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2107      	movs	r1, #7
 8002254:	0018      	movs	r0, r3
 8002256:	f000 ffb7 	bl	80031c8 <map_int_pin>
                    }

                    break;
 800225a:	e07f      	b.n	800235c <bma400_set_device_conf+0x208>
                case BMA400_AUTO_LOW_POWER:
                    rslt = set_auto_low_power(&conf[idx].param.auto_lp, dev);
 800225c:	2314      	movs	r3, #20
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	881a      	ldrh	r2, [r3, #0]
 8002262:	0013      	movs	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	189b      	adds	r3, r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	001a      	movs	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	189b      	adds	r3, r3, r2
 8002270:	3302      	adds	r3, #2
 8002272:	2217      	movs	r2, #23
 8002274:	18bc      	adds	r4, r7, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	0011      	movs	r1, r2
 800227a:	0018      	movs	r0, r3
 800227c:	f000 fc16 	bl	8002aac <set_auto_low_power>
 8002280:	0003      	movs	r3, r0
 8002282:	7023      	strb	r3, [r4, #0]
                    break;
 8002284:	e06d      	b.n	8002362 <bma400_set_device_conf+0x20e>
                case BMA400_INT_PIN_CONF:
                    rslt = set_int_pin_conf(conf[idx].param.int_conf, dev);
 8002286:	2314      	movs	r3, #20
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	881a      	ldrh	r2, [r3, #0]
 800228c:	0013      	movs	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	189b      	adds	r3, r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	001a      	movs	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	189b      	adds	r3, r3, r2
 800229a:	2217      	movs	r2, #23
 800229c:	18bc      	adds	r4, r7, r2
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	5a9a      	ldrh	r2, [r3, r2]
 80022a4:	2300      	movs	r3, #0
 80022a6:	0412      	lsls	r2, r2, #16
 80022a8:	0c12      	lsrs	r2, r2, #16
 80022aa:	0c1b      	lsrs	r3, r3, #16
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	4313      	orrs	r3, r2
 80022b0:	0018      	movs	r0, r3
 80022b2:	f001 faa9 	bl	8003808 <set_int_pin_conf>
 80022b6:	0003      	movs	r3, r0
 80022b8:	7023      	strb	r3, [r4, #0]
                    break;
 80022ba:	e052      	b.n	8002362 <bma400_set_device_conf+0x20e>
                case BMA400_INT_OVERRUN_CONF:

                    /* Interrupt pin mapping */
                    map_int_pin(data_array, BMA400_INT_OVERRUN_MAP, conf[idx].param.overrun_int.int_chan);
 80022bc:	2314      	movs	r3, #20
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	881a      	ldrh	r2, [r3, #0]
 80022c2:	0013      	movs	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	189b      	adds	r3, r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	001a      	movs	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	189b      	adds	r3, r3, r2
 80022d0:	789a      	ldrb	r2, [r3, #2]
 80022d2:	2310      	movs	r3, #16
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	210b      	movs	r1, #11
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 ff75 	bl	80031c8 <map_int_pin>
                    break;
 80022de:	e040      	b.n	8002362 <bma400_set_device_conf+0x20e>
                case BMA400_FIFO_CONF:
                    rslt = set_fifo_conf(&conf[idx].param.fifo_conf, dev);
 80022e0:	2514      	movs	r5, #20
 80022e2:	197b      	adds	r3, r7, r5
 80022e4:	881a      	ldrh	r2, [r3, #0]
 80022e6:	0013      	movs	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	189b      	adds	r3, r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	001a      	movs	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	189b      	adds	r3, r3, r2
 80022f4:	3302      	adds	r3, #2
 80022f6:	2617      	movs	r6, #23
 80022f8:	19bc      	adds	r4, r7, r6
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	0011      	movs	r1, r2
 80022fe:	0018      	movs	r0, r3
 8002300:	f001 fadb 	bl	80038ba <set_fifo_conf>
 8002304:	0003      	movs	r3, r0
 8002306:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 8002308:	19bb      	adds	r3, r7, r6
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	b25b      	sxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d126      	bne.n	8002360 <bma400_set_device_conf+0x20c>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_FIFO_WM_INT_MAP, conf[idx].param.fifo_conf.fifo_wm_channel);
 8002312:	197b      	adds	r3, r7, r5
 8002314:	881a      	ldrh	r2, [r3, #0]
 8002316:	0013      	movs	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	189b      	adds	r3, r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	001a      	movs	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	189b      	adds	r3, r3, r2
 8002324:	79da      	ldrb	r2, [r3, #7]
 8002326:	2410      	movs	r4, #16
 8002328:	193b      	adds	r3, r7, r4
 800232a:	2102      	movs	r1, #2
 800232c:	0018      	movs	r0, r3
 800232e:	f000 ff4b 	bl	80031c8 <map_int_pin>
                        map_int_pin(data_array, BMA400_FIFO_FULL_INT_MAP, conf[idx].param.fifo_conf.fifo_full_channel);
 8002332:	197b      	adds	r3, r7, r5
 8002334:	881a      	ldrh	r2, [r3, #0]
 8002336:	0013      	movs	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	189b      	adds	r3, r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	001a      	movs	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	189b      	adds	r3, r3, r2
 8002344:	799a      	ldrb	r2, [r3, #6]
 8002346:	193b      	adds	r3, r7, r4
 8002348:	2103      	movs	r1, #3
 800234a:	0018      	movs	r0, r3
 800234c:	f000 ff3c 	bl	80031c8 <map_int_pin>
                    }

                    break;
 8002350:	e006      	b.n	8002360 <bma400_set_device_conf+0x20c>
                default:
                    rslt = BMA400_E_INVALID_CONFIG;
 8002352:	2317      	movs	r3, #23
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	22fc      	movs	r2, #252	@ 0xfc
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e002      	b.n	8002362 <bma400_set_device_conf+0x20e>
                    break;
 800235c:	46c0      	nop			@ (mov r8, r8)
 800235e:	e000      	b.n	8002362 <bma400_set_device_conf+0x20e>
                    break;
 8002360:	46c0      	nop			@ (mov r8, r8)
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8002362:	2114      	movs	r1, #20
 8002364:	187b      	adds	r3, r7, r1
 8002366:	881a      	ldrh	r2, [r3, #0]
 8002368:	187b      	adds	r3, r7, r1
 800236a:	3201      	adds	r2, #1
 800236c:	801a      	strh	r2, [r3, #0]
 800236e:	230b      	movs	r3, #11
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	2214      	movs	r2, #20
 8002378:	18ba      	adds	r2, r7, r2
 800237a:	8812      	ldrh	r2, [r2, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d206      	bcs.n	800238e <bma400_set_device_conf+0x23a>
 8002380:	2317      	movs	r3, #23
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b25b      	sxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d100      	bne.n	800238e <bma400_set_device_conf+0x23a>
 800238c:	e713      	b.n	80021b6 <bma400_set_device_conf+0x62>
            }
        }

        if (rslt == BMA400_OK)
 800238e:	2217      	movs	r2, #23
 8002390:	18bb      	adds	r3, r7, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b25b      	sxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10e      	bne.n	80023b8 <bma400_set_device_conf+0x264>
        {
            /* Set the interrupt pin mapping configurations */
            rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 800239a:	18bc      	adds	r4, r7, r2
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2210      	movs	r2, #16
 80023a0:	18b9      	adds	r1, r7, r2
 80023a2:	2203      	movs	r2, #3
 80023a4:	2021      	movs	r0, #33	@ 0x21
 80023a6:	f7ff fca1 	bl	8001cec <bma400_set_regs>
 80023aa:	0003      	movs	r3, r0
 80023ac:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 80023ae:	e003      	b.n	80023b8 <bma400_set_device_conf+0x264>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 80023b0:	2317      	movs	r3, #23
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	22ff      	movs	r2, #255	@ 0xff
 80023b6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80023b8:	2317      	movs	r3, #23
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	b25b      	sxtb	r3, r3
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b007      	add	sp, #28
 80023c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c8:	08007ca0 	.word	0x08007ca0

080023cc <null_ptr_check>:
/************************************************************************************/
/*********************** Static function definitions **********************************/
/************************************************************************************/

static int8_t null_ptr_check(const struct bma400_dev *dev)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->intf_ptr == NULL))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00b      	beq.n	80023f2 <null_ptr_check+0x26>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <null_ptr_check+0x26>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <null_ptr_check+0x26>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d104      	bne.n	80023fc <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BMA400_E_NULL_PTR;
 80023f2:	230f      	movs	r3, #15
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	22ff      	movs	r2, #255	@ 0xff
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	e003      	b.n	8002404 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMA400_OK;
 80023fc:	230f      	movs	r3, #15
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002404:	230f      	movs	r3, #15
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b25b      	sxtb	r3, r3
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}

08002414 <set_sensor_conf>:

static int8_t set_sensor_conf(uint8_t *data, const struct bma400_sensor_conf *conf, struct bma400_dev *dev)
{
 8002414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMA400_E_INVALID_CONFIG;
 8002420:	2117      	movs	r1, #23
 8002422:	187b      	adds	r3, r7, r1
 8002424:	22fc      	movs	r2, #252	@ 0xfc
 8002426:	701a      	strb	r2, [r3, #0]
    uint8_t int_enable = 0;
 8002428:	2516      	movs	r5, #22
 800242a:	197b      	adds	r3, r7, r5
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
    enum bma400_int_chan int_map = BMA400_UNMAP_INT_PIN;
 8002430:	2615      	movs	r6, #21
 8002432:	19bb      	adds	r3, r7, r6
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]

    if (BMA400_ACCEL == conf->type)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d110      	bne.n	8002462 <set_sensor_conf+0x4e>
    {
        /* Setting Accel configurations */
        rslt = set_accel_conf(&conf->param.accel, dev);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3302      	adds	r3, #2
 8002444:	187c      	adds	r4, r7, r1
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	0011      	movs	r1, r2
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f8aa 	bl	80025a4 <set_accel_conf>
 8002450:	0003      	movs	r3, r0
 8002452:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_DATA_READY_INT_MAP;
 8002454:	197b      	adds	r3, r7, r5
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.accel.int_chan;
 800245a:	19bb      	adds	r3, r7, r6
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	7a12      	ldrb	r2, [r2, #8]
 8002460:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_TAP_INT == conf->type)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d113      	bne.n	8002492 <set_sensor_conf+0x7e>
    {
        /* Setting tap configurations */
        rslt = set_tap_conf(&conf->param.tap, dev);
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3302      	adds	r3, #2
 800246e:	2217      	movs	r2, #23
 8002470:	18bc      	adds	r4, r7, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	0011      	movs	r1, r2
 8002476:	0018      	movs	r0, r3
 8002478:	f000 fb96 	bl	8002ba8 <set_tap_conf>
 800247c:	0003      	movs	r3, r0
 800247e:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_TAP_INT_MAP;
 8002480:	2316      	movs	r3, #22
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	2209      	movs	r2, #9
 8002486:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.tap.int_chan;
 8002488:	2315      	movs	r3, #21
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	79d2      	ldrb	r2, [r2, #7]
 8002490:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ACTIVITY_CHANGE_INT == conf->type)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d113      	bne.n	80024c2 <set_sensor_conf+0xae>
    {
        /* Setting activity change configurations */
        rslt = set_activity_change_conf(&conf->param.act_ch, dev);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3302      	adds	r3, #2
 800249e:	2217      	movs	r2, #23
 80024a0:	18bc      	adds	r4, r7, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	0011      	movs	r1, r2
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 fc04 	bl	8002cb4 <set_activity_change_conf>
 80024ac:	0003      	movs	r3, r0
 80024ae:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ACT_CH_INT_MAP;
 80024b0:	2316      	movs	r3, #22
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	2208      	movs	r2, #8
 80024b6:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.act_ch.int_chan;
 80024b8:	2315      	movs	r3, #21
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	7992      	ldrb	r2, [r2, #6]
 80024c0:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN1_INT == conf->type)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d113      	bne.n	80024f2 <set_sensor_conf+0xde>
    {
        /* Setting generic int 1 configurations */
        rslt = set_gen1_int(&conf->param.gen_int, dev);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3302      	adds	r3, #2
 80024ce:	2217      	movs	r2, #23
 80024d0:	18bc      	adds	r4, r7, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	0011      	movs	r1, r2
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 fc3e 	bl	8002d58 <set_gen1_int>
 80024dc:	0003      	movs	r3, r0
 80024de:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN1_INT_MAP;
 80024e0:	2316      	movs	r3, #22
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2205      	movs	r2, #5
 80024e6:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 80024e8:	2315      	movs	r3, #21
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	7c92      	ldrb	r2, [r2, #18]
 80024f0:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN2_INT == conf->type)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d113      	bne.n	8002522 <set_sensor_conf+0x10e>
    {
        /* Setting generic int 2 configurations */
        rslt = set_gen2_int(&conf->param.gen_int, dev);
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3302      	adds	r3, #2
 80024fe:	2217      	movs	r2, #23
 8002500:	18bc      	adds	r4, r7, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	0011      	movs	r1, r2
 8002506:	0018      	movs	r0, r3
 8002508:	f000 fcf6 	bl	8002ef8 <set_gen2_int>
 800250c:	0003      	movs	r3, r0
 800250e:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN2_INT_MAP;
 8002510:	2316      	movs	r3, #22
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2204      	movs	r2, #4
 8002516:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 8002518:	2315      	movs	r3, #21
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	7c92      	ldrb	r2, [r2, #18]
 8002520:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ORIENT_CHANGE_INT == conf->type)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b05      	cmp	r3, #5
 8002528:	d113      	bne.n	8002552 <set_sensor_conf+0x13e>
    {
        /* Setting orient int configurations */
        rslt = set_orient_int(&conf->param.orient, dev);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3302      	adds	r3, #2
 800252e:	2217      	movs	r2, #23
 8002530:	18bc      	adds	r4, r7, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	0011      	movs	r1, r2
 8002536:	0018      	movs	r0, r3
 8002538:	f000 fdae 	bl	8003098 <set_orient_int>
 800253c:	0003      	movs	r3, r0
 800253e:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ORIENT_CH_INT_MAP;
 8002540:	2316      	movs	r3, #22
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	2206      	movs	r2, #6
 8002546:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.orient.int_chan;
 8002548:	2315      	movs	r3, #21
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	7b92      	ldrb	r2, [r2, #14]
 8002550:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_STEP_COUNTER_INT == conf->type)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d10c      	bne.n	8002574 <set_sensor_conf+0x160>
    {
        rslt = BMA400_OK;
 800255a:	2317      	movs	r3, #23
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
        int_enable = BMA400_STEP_INT_MAP;
 8002562:	2316      	movs	r3, #22
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	220a      	movs	r2, #10
 8002568:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.step_cnt.int_chan;
 800256a:	2315      	movs	r3, #21
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	7892      	ldrb	r2, [r2, #2]
 8002572:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BMA400_OK)
 8002574:	2317      	movs	r3, #23
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b25b      	sxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <set_sensor_conf+0x180>
    {
        /* Int pin mapping settings */
        map_int_pin(data, int_enable, int_map);
 8002580:	2315      	movs	r3, #21
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	2316      	movs	r3, #22
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	7819      	ldrb	r1, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	0018      	movs	r0, r3
 8002590:	f000 fe1a 	bl	80031c8 <map_int_pin>
    }

    return rslt;
 8002594:	2317      	movs	r3, #23
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b25b      	sxtb	r3, r3
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b007      	add	sp, #28
 80025a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025a4 <set_accel_conf>:

    return rslt;
}

static int8_t set_accel_conf(const struct bma400_acc_conf *accel_conf, struct bma400_dev *dev)
{
 80025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 80025ae:	250c      	movs	r5, #12
 80025b0:	197b      	adds	r3, r7, r5
 80025b2:	4a48      	ldr	r2, [pc, #288]	@ (80026d4 <set_accel_conf+0x130>)
 80025b4:	8811      	ldrh	r1, [r2, #0]
 80025b6:	8019      	strh	r1, [r3, #0]
 80025b8:	7892      	ldrb	r2, [r2, #2]
 80025ba:	709a      	strb	r2, [r3, #2]

    /* Update the accel configurations from the user structure
     * accel_conf
     */
    rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 80025bc:	260f      	movs	r6, #15
 80025be:	19bc      	adds	r4, r7, r6
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	1979      	adds	r1, r7, r5
 80025c4:	2203      	movs	r2, #3
 80025c6:	2019      	movs	r0, #25
 80025c8:	f7ff fc0e 	bl	8001de8 <bma400_get_regs>
 80025cc:	0003      	movs	r3, r0
 80025ce:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 80025d0:	0034      	movs	r4, r6
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	b25b      	sxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d173      	bne.n	80026c4 <set_accel_conf+0x120>
    {
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 80025dc:	0028      	movs	r0, r5
 80025de:	183b      	adds	r3, r7, r0
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	227f      	movs	r2, #127	@ 0x7f
 80025e6:	4013      	ands	r3, r2
 80025e8:	b25a      	sxtb	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	795b      	ldrb	r3, [r3, #5]
 80025ee:	b25b      	sxtb	r3, r3
 80025f0:	01db      	lsls	r3, r3, #7
 80025f2:	b25b      	sxtb	r3, r3
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b25b      	sxtb	r3, r3
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	183b      	adds	r3, r7, r0
 80025fc:	701a      	strb	r2, [r3, #0]
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 80025fe:	183b      	adds	r3, r7, r0
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b25b      	sxtb	r3, r3
 8002604:	2260      	movs	r2, #96	@ 0x60
 8002606:	4393      	bics	r3, r2
 8002608:	b25a      	sxtb	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	791b      	ldrb	r3, [r3, #4]
 800260e:	b25b      	sxtb	r3, r3
 8002610:	015b      	lsls	r3, r3, #5
 8002612:	b25b      	sxtb	r3, r3
 8002614:	2160      	movs	r1, #96	@ 0x60
 8002616:	400b      	ands	r3, r1
 8002618:	b25b      	sxtb	r3, r3
 800261a:	4313      	orrs	r3, r2
 800261c:	b25b      	sxtb	r3, r3
 800261e:	b2da      	uxtb	r2, r3
 8002620:	183b      	adds	r3, r7, r0
 8002622:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 8002624:	183b      	adds	r3, r7, r0
 8002626:	785b      	ldrb	r3, [r3, #1]
 8002628:	b25b      	sxtb	r3, r3
 800262a:	223f      	movs	r2, #63	@ 0x3f
 800262c:	4013      	ands	r3, r2
 800262e:	b25a      	sxtb	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	b25b      	sxtb	r3, r3
 8002636:	019b      	lsls	r3, r3, #6
 8002638:	b25b      	sxtb	r3, r3
 800263a:	4313      	orrs	r3, r2
 800263c:	b25b      	sxtb	r3, r3
 800263e:	b2da      	uxtb	r2, r3
 8002640:	183b      	adds	r3, r7, r0
 8002642:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 8002644:	183b      	adds	r3, r7, r0
 8002646:	785b      	ldrb	r3, [r3, #1]
 8002648:	b25b      	sxtb	r3, r3
 800264a:	2230      	movs	r2, #48	@ 0x30
 800264c:	4393      	bics	r3, r2
 800264e:	b25a      	sxtb	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	78db      	ldrb	r3, [r3, #3]
 8002654:	b25b      	sxtb	r3, r3
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	b25b      	sxtb	r3, r3
 800265a:	2130      	movs	r1, #48	@ 0x30
 800265c:	400b      	ands	r3, r1
 800265e:	b25b      	sxtb	r3, r3
 8002660:	4313      	orrs	r3, r2
 8002662:	b25b      	sxtb	r3, r3
 8002664:	b2da      	uxtb	r2, r3
 8002666:	183b      	adds	r3, r7, r0
 8002668:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 800266a:	183b      	adds	r3, r7, r0
 800266c:	785b      	ldrb	r3, [r3, #1]
 800266e:	b25b      	sxtb	r3, r3
 8002670:	220f      	movs	r2, #15
 8002672:	4393      	bics	r3, r2
 8002674:	b25a      	sxtb	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b25b      	sxtb	r3, r3
 800267c:	210f      	movs	r1, #15
 800267e:	400b      	ands	r3, r1
 8002680:	b25b      	sxtb	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b25b      	sxtb	r3, r3
 8002686:	b2da      	uxtb	r2, r3
 8002688:	183b      	adds	r3, r7, r0
 800268a:	705a      	strb	r2, [r3, #1]
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 800268c:	183b      	adds	r3, r7, r0
 800268e:	789b      	ldrb	r3, [r3, #2]
 8002690:	b25b      	sxtb	r3, r3
 8002692:	220c      	movs	r2, #12
 8002694:	4393      	bics	r3, r2
 8002696:	b25a      	sxtb	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	789b      	ldrb	r3, [r3, #2]
 800269c:	b25b      	sxtb	r3, r3
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	b25b      	sxtb	r3, r3
 80026a2:	210c      	movs	r1, #12
 80026a4:	400b      	ands	r3, r1
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	4313      	orrs	r3, r2
 80026aa:	b25b      	sxtb	r3, r3
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	183b      	adds	r3, r7, r0
 80026b0:	709a      	strb	r2, [r3, #2]

        /* Set the accel configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 80026b2:	193c      	adds	r4, r7, r4
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	1839      	adds	r1, r7, r0
 80026b8:	2203      	movs	r2, #3
 80026ba:	2019      	movs	r0, #25
 80026bc:	f7ff fb16 	bl	8001cec <bma400_set_regs>
 80026c0:	0003      	movs	r3, r0
 80026c2:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80026c4:	230f      	movs	r3, #15
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	b25b      	sxtb	r3, r3
}
 80026cc:	0018      	movs	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b005      	add	sp, #20
 80026d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d4:	08007c1c 	.word	0x08007c1c

080026d8 <get_accel_data>:

    return rslt;
}

static int8_t get_accel_data(uint8_t data_sel, struct bma400_sensor_data *accel, struct bma400_dev *dev)
{
 80026d8:	b5b0      	push	{r4, r5, r7, lr}
 80026da:	b08a      	sub	sp, #40	@ 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	240f      	movs	r4, #15
 80026e4:	193b      	adds	r3, r7, r4
 80026e6:	1c02      	adds	r2, r0, #0
 80026e8:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t data_array[9] = { 0 };
 80026ea:	2510      	movs	r5, #16
 80026ec:	197b      	adds	r3, r7, r5
 80026ee:	0018      	movs	r0, r3
 80026f0:	2309      	movs	r3, #9
 80026f2:	001a      	movs	r2, r3
 80026f4:	2100      	movs	r1, #0
 80026f6:	f004 fbc5 	bl	8006e84 <memset>
    uint8_t msb;
    uint8_t time_0;
    uint16_t time_1;
    uint32_t time_2;

    if (data_sel == BMA400_DATA_ONLY)
 80026fa:	193b      	adds	r3, r7, r4
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10a      	bne.n	8002718 <get_accel_data+0x40>
    {
        /* Read the sensor data registers only */
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 6, dev);
 8002702:	2327      	movs	r3, #39	@ 0x27
 8002704:	18fc      	adds	r4, r7, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	1979      	adds	r1, r7, r5
 800270a:	2206      	movs	r2, #6
 800270c:	2004      	movs	r0, #4
 800270e:	f7ff fb6b 	bl	8001de8 <bma400_get_regs>
 8002712:	0003      	movs	r3, r0
 8002714:	7023      	strb	r3, [r4, #0]
 8002716:	e014      	b.n	8002742 <get_accel_data+0x6a>
    }
    else if (data_sel == BMA400_DATA_SENSOR_TIME)
 8002718:	230f      	movs	r3, #15
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10b      	bne.n	800273a <get_accel_data+0x62>
    {
        /* Read the sensor data along with sensor time */
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 9, dev);
 8002722:	2327      	movs	r3, #39	@ 0x27
 8002724:	18fc      	adds	r4, r7, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2210      	movs	r2, #16
 800272a:	18b9      	adds	r1, r7, r2
 800272c:	2209      	movs	r2, #9
 800272e:	2004      	movs	r0, #4
 8002730:	f7ff fb5a 	bl	8001de8 <bma400_get_regs>
 8002734:	0003      	movs	r3, r0
 8002736:	7023      	strb	r3, [r4, #0]
 8002738:	e003      	b.n	8002742 <get_accel_data+0x6a>
    }
    else
    {
        /* Invalid use of "data_sel" */
        rslt = BMA400_E_INVALID_CONFIG;
 800273a:	2327      	movs	r3, #39	@ 0x27
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	22fc      	movs	r2, #252	@ 0xfc
 8002740:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BMA400_OK)
 8002742:	2327      	movs	r3, #39	@ 0x27
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	b25b      	sxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d000      	beq.n	8002750 <get_accel_data+0x78>
 800274e:	e0a3      	b.n	8002898 <get_accel_data+0x1c0>
    {
        lsb = data_array[0];
 8002750:	2110      	movs	r1, #16
 8002752:	187b      	adds	r3, r7, r1
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	2024      	movs	r0, #36	@ 0x24
 8002758:	183b      	adds	r3, r7, r0
 800275a:	801a      	strh	r2, [r3, #0]
        msb = data_array[1];
 800275c:	2423      	movs	r4, #35	@ 0x23
 800275e:	193b      	adds	r3, r7, r4
 8002760:	187a      	adds	r2, r7, r1
 8002762:	7852      	ldrb	r2, [r2, #1]
 8002764:	701a      	strb	r2, [r3, #0]

        /* accel X axis data */
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 8002766:	193b      	adds	r3, r7, r4
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	b29a      	uxth	r2, r3
 8002770:	183b      	adds	r3, r7, r0
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	b29b      	uxth	r3, r3
 8002778:	b21a      	sxth	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	801a      	strh	r2, [r3, #0]
        if (accel->x > 2047)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2200      	movs	r2, #0
 8002782:	5e9a      	ldrsh	r2, [r3, r2]
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	429a      	cmp	r2, r3
 800278a:	db0a      	blt.n	80027a2 <get_accel_data+0xca>
        {
            /* Computing accel data negative value */
            accel->x = accel->x - 4096;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2200      	movs	r2, #0
 8002790:	5e9b      	ldrsh	r3, [r3, r2]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4a44      	ldr	r2, [pc, #272]	@ (80028a8 <get_accel_data+0x1d0>)
 8002796:	4694      	mov	ip, r2
 8002798:	4463      	add	r3, ip
 800279a:	b29b      	uxth	r3, r3
 800279c:	b21a      	sxth	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	801a      	strh	r2, [r3, #0]
        }

        lsb = data_array[2];
 80027a2:	2110      	movs	r1, #16
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	789a      	ldrb	r2, [r3, #2]
 80027a8:	2024      	movs	r0, #36	@ 0x24
 80027aa:	183b      	adds	r3, r7, r0
 80027ac:	801a      	strh	r2, [r3, #0]
        msb = data_array[3];
 80027ae:	2423      	movs	r4, #35	@ 0x23
 80027b0:	193b      	adds	r3, r7, r4
 80027b2:	187a      	adds	r2, r7, r1
 80027b4:	78d2      	ldrb	r2, [r2, #3]
 80027b6:	701a      	strb	r2, [r3, #0]

        /* accel Y axis data */
        accel->y = (int16_t)(((uint16_t)msb * 256) | lsb);
 80027b8:	193b      	adds	r3, r7, r4
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b21a      	sxth	r2, r3
 80027c4:	183b      	adds	r3, r7, r0
 80027c6:	2100      	movs	r1, #0
 80027c8:	5e5b      	ldrsh	r3, [r3, r1]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	b21a      	sxth	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	805a      	strh	r2, [r3, #2]
        if (accel->y > 2047)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2202      	movs	r2, #2
 80027d6:	5e9a      	ldrsh	r2, [r3, r2]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	429a      	cmp	r2, r3
 80027de:	db0a      	blt.n	80027f6 <get_accel_data+0x11e>
        {
            /* Computing accel data negative value */
            accel->y = accel->y - 4096;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2202      	movs	r2, #2
 80027e4:	5e9b      	ldrsh	r3, [r3, r2]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4a2f      	ldr	r2, [pc, #188]	@ (80028a8 <get_accel_data+0x1d0>)
 80027ea:	4694      	mov	ip, r2
 80027ec:	4463      	add	r3, ip
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	b21a      	sxth	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	805a      	strh	r2, [r3, #2]
        }

        lsb = data_array[4];
 80027f6:	2110      	movs	r1, #16
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	791a      	ldrb	r2, [r3, #4]
 80027fc:	2024      	movs	r0, #36	@ 0x24
 80027fe:	183b      	adds	r3, r7, r0
 8002800:	801a      	strh	r2, [r3, #0]
        msb = data_array[5];
 8002802:	2423      	movs	r4, #35	@ 0x23
 8002804:	193b      	adds	r3, r7, r4
 8002806:	187a      	adds	r2, r7, r1
 8002808:	7952      	ldrb	r2, [r2, #5]
 800280a:	701a      	strb	r2, [r3, #0]

        /* accel Z axis data */
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 800280c:	193b      	adds	r3, r7, r4
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b29b      	uxth	r3, r3
 8002816:	b21a      	sxth	r2, r3
 8002818:	183b      	adds	r3, r7, r0
 800281a:	2100      	movs	r1, #0
 800281c:	5e5b      	ldrsh	r3, [r3, r1]
 800281e:	4313      	orrs	r3, r2
 8002820:	b21a      	sxth	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	809a      	strh	r2, [r3, #4]
        if (accel->z > 2047)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2204      	movs	r2, #4
 800282a:	5e9a      	ldrsh	r2, [r3, r2]
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	429a      	cmp	r2, r3
 8002832:	db0a      	blt.n	800284a <get_accel_data+0x172>
        {
            /* Computing accel data negative value */
            accel->z = accel->z - 4096;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2204      	movs	r2, #4
 8002838:	5e9b      	ldrsh	r3, [r3, r2]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4a1a      	ldr	r2, [pc, #104]	@ (80028a8 <get_accel_data+0x1d0>)
 800283e:	4694      	mov	ip, r2
 8002840:	4463      	add	r3, ip
 8002842:	b29b      	uxth	r3, r3
 8002844:	b21a      	sxth	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	809a      	strh	r2, [r3, #4]
        }

        if (data_sel == BMA400_DATA_ONLY)
 800284a:	230f      	movs	r3, #15
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d102      	bne.n	800285a <get_accel_data+0x182>
        {
            /* Update sensortime as 0 */
            accel->sensortime = 0;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
        }

        if (data_sel == BMA400_DATA_SENSOR_TIME)
 800285a:	230f      	movs	r3, #15
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d119      	bne.n	8002898 <get_accel_data+0x1c0>
        {
            /* Sensor-time data*/
            time_0 = data_array[6];
 8002864:	2022      	movs	r0, #34	@ 0x22
 8002866:	183b      	adds	r3, r7, r0
 8002868:	2110      	movs	r1, #16
 800286a:	187a      	adds	r2, r7, r1
 800286c:	7992      	ldrb	r2, [r2, #6]
 800286e:	701a      	strb	r2, [r3, #0]
            time_1 = ((uint16_t)data_array[7] << 8);
 8002870:	187b      	adds	r3, r7, r1
 8002872:	79db      	ldrb	r3, [r3, #7]
 8002874:	001a      	movs	r2, r3
 8002876:	2420      	movs	r4, #32
 8002878:	193b      	adds	r3, r7, r4
 800287a:	0212      	lsls	r2, r2, #8
 800287c:	801a      	strh	r2, [r3, #0]
            time_2 = ((uint32_t)data_array[8] << 16);
 800287e:	187b      	adds	r3, r7, r1
 8002880:	7a1b      	ldrb	r3, [r3, #8]
 8002882:	041b      	lsls	r3, r3, #16
 8002884:	61fb      	str	r3, [r7, #28]
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 8002886:	193b      	adds	r3, r7, r4
 8002888:	881a      	ldrh	r2, [r3, #0]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	18d2      	adds	r2, r2, r3
 800288e:	183b      	adds	r3, r7, r0
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	18d2      	adds	r2, r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	609a      	str	r2, [r3, #8]
        }
    }

    return rslt;
 8002898:	2327      	movs	r3, #39	@ 0x27
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	b25b      	sxtb	r3, r3
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b00a      	add	sp, #40	@ 0x28
 80028a6:	bdb0      	pop	{r4, r5, r7, pc}
 80028a8:	fffff000 	.word	0xfffff000

080028ac <set_autowakeup_timeout>:

static int8_t set_autowakeup_timeout(const struct bma400_auto_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 80028ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2];
    uint8_t lsb;
    uint8_t msb;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &data_array[1], 1, dev);
 80028b6:	260f      	movs	r6, #15
 80028b8:	19bc      	adds	r4, r7, r6
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	2508      	movs	r5, #8
 80028be:	197b      	adds	r3, r7, r5
 80028c0:	1c59      	adds	r1, r3, #1
 80028c2:	0013      	movs	r3, r2
 80028c4:	2201      	movs	r2, #1
 80028c6:	202d      	movs	r0, #45	@ 0x2d
 80028c8:	f7ff fa8e 	bl	8001de8 <bma400_get_regs>
 80028cc:	0003      	movs	r3, r0
 80028ce:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 80028d0:	0034      	movs	r4, r6
 80028d2:	193b      	adds	r3, r7, r4
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d13e      	bne.n	800295a <set_autowakeup_timeout+0xae>
    {
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 80028dc:	0028      	movs	r0, r5
 80028de:	183b      	adds	r3, r7, r0
 80028e0:	785b      	ldrb	r3, [r3, #1]
 80028e2:	b25b      	sxtb	r3, r3
 80028e4:	2204      	movs	r2, #4
 80028e6:	4393      	bics	r3, r2
 80028e8:	b25a      	sxtb	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b25b      	sxtb	r3, r3
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	2104      	movs	r1, #4
 80028f6:	400b      	ands	r3, r1
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	183b      	adds	r3, r7, r0
 8002902:	705a      	strb	r2, [r3, #1]

        /* LSB of timeout threshold */
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	885b      	ldrh	r3, [r3, #2]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	250e      	movs	r5, #14
 800290c:	197b      	adds	r3, r7, r5
 800290e:	210f      	movs	r1, #15
 8002910:	400a      	ands	r2, r1
 8002912:	701a      	strb	r2, [r3, #0]

        /* MSB of timeout threshold */
        msb = BMA400_GET_BITS(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_MSB);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	885b      	ldrh	r3, [r3, #2]
 8002918:	111a      	asrs	r2, r3, #4
 800291a:	210d      	movs	r1, #13
 800291c:	187b      	adds	r3, r7, r1
 800291e:	701a      	strb	r2, [r3, #0]

        /* Set the value in the data_array */
        data_array[0] = msb;
 8002920:	183b      	adds	r3, r7, r0
 8002922:	187a      	adds	r2, r7, r1
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT_THRES, lsb);
 8002928:	183b      	adds	r3, r7, r0
 800292a:	785b      	ldrb	r3, [r3, #1]
 800292c:	b25b      	sxtb	r3, r3
 800292e:	220f      	movs	r2, #15
 8002930:	4013      	ands	r3, r2
 8002932:	b25a      	sxtb	r2, r3
 8002934:	197b      	adds	r3, r7, r5
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b25b      	sxtb	r3, r3
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	b25b      	sxtb	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b25b      	sxtb	r3, r3
 8002942:	b2da      	uxtb	r2, r3
 8002944:	183b      	adds	r3, r7, r0
 8002946:	705a      	strb	r2, [r3, #1]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_0, data_array, 2, dev);
 8002948:	193c      	adds	r4, r7, r4
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	1839      	adds	r1, r7, r0
 800294e:	2202      	movs	r2, #2
 8002950:	202c      	movs	r0, #44	@ 0x2c
 8002952:	f7ff f9cb 	bl	8001cec <bma400_set_regs>
 8002956:	0003      	movs	r3, r0
 8002958:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800295a:	230f      	movs	r3, #15
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b25b      	sxtb	r3, r3
}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	b005      	add	sp, #20
 8002968:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800296a <set_auto_wakeup>:

    return rslt;
}

int8_t set_auto_wakeup(uint8_t conf, struct bma400_dev *dev)
{
 800296a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296c:	b085      	sub	sp, #20
 800296e:	af00      	add	r7, sp, #0
 8002970:	0002      	movs	r2, r0
 8002972:	6039      	str	r1, [r7, #0]
 8002974:	1dfb      	adds	r3, r7, #7
 8002976:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 8002978:	260f      	movs	r6, #15
 800297a:	19bc      	adds	r4, r7, r6
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	250e      	movs	r5, #14
 8002980:	1979      	adds	r1, r7, r5
 8002982:	2201      	movs	r2, #1
 8002984:	202d      	movs	r0, #45	@ 0x2d
 8002986:	f7ff fa2f 	bl	8001de8 <bma400_get_regs>
 800298a:	0003      	movs	r3, r0
 800298c:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800298e:	0034      	movs	r4, r6
 8002990:	193b      	adds	r3, r7, r4
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b25b      	sxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d11c      	bne.n	80029d4 <set_auto_wakeup+0x6a>
    {
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 800299a:	0028      	movs	r0, r5
 800299c:	183b      	adds	r3, r7, r0
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	b25b      	sxtb	r3, r3
 80029a2:	2202      	movs	r2, #2
 80029a4:	4393      	bics	r3, r2
 80029a6:	b25a      	sxtb	r2, r3
 80029a8:	1dfb      	adds	r3, r7, #7
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	18db      	adds	r3, r3, r3
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	2102      	movs	r1, #2
 80029b4:	400b      	ands	r3, r1
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	4313      	orrs	r3, r2
 80029ba:	b25b      	sxtb	r3, r3
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	183b      	adds	r3, r7, r0
 80029c0:	701a      	strb	r2, [r3, #0]

        /* Enabling the Auto wakeup interrupt */
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 80029c2:	193c      	adds	r4, r7, r4
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	1839      	adds	r1, r7, r0
 80029c8:	2201      	movs	r2, #1
 80029ca:	202d      	movs	r0, #45	@ 0x2d
 80029cc:	f7ff f98e 	bl	8001cec <bma400_set_regs>
 80029d0:	0003      	movs	r3, r0
 80029d2:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80029d4:	230f      	movs	r3, #15
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b25b      	sxtb	r3, r3
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b005      	add	sp, #20
 80029e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029e4 <set_autowakeup_interrupt>:

static int8_t set_autowakeup_interrupt(const struct bma400_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 80029e4:	b5b0      	push	{r4, r5, r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[5] = { 0 };
 80029ee:	2408      	movs	r4, #8
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	0018      	movs	r0, r3
 80029f4:	2305      	movs	r3, #5
 80029f6:	001a      	movs	r2, r3
 80029f8:	2100      	movs	r1, #0
 80029fa:	f004 fa43 	bl	8006e84 <memset>

    /* Set the wakeup reference update */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 80029fe:	0020      	movs	r0, r4
 8002a00:	183b      	adds	r3, r7, r0
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	b25b      	sxtb	r3, r3
 8002a06:	2203      	movs	r2, #3
 8002a08:	4393      	bics	r3, r2
 8002a0a:	b25a      	sxtb	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	2103      	movs	r1, #3
 8002a14:	400b      	ands	r3, r1
 8002a16:	b25b      	sxtb	r3, r3
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	b25b      	sxtb	r3, r3
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	701a      	strb	r2, [r3, #0]

    /* Set the number of samples for interrupt condition evaluation */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 8002a22:	183b      	adds	r3, r7, r0
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b25b      	sxtb	r3, r3
 8002a28:	221c      	movs	r2, #28
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	b25a      	sxtb	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	785b      	ldrb	r3, [r3, #1]
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	b25b      	sxtb	r3, r3
 8002a38:	211c      	movs	r1, #28
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	b25b      	sxtb	r3, r3
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	183b      	adds	r3, r7, r0
 8002a46:	701a      	strb	r2, [r3, #0]

    /* Enable low power wake-up interrupt for X,Y,Z axes*/
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 8002a48:	183b      	adds	r3, r7, r0
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	b25b      	sxtb	r3, r3
 8002a4e:	221f      	movs	r2, #31
 8002a50:	4013      	ands	r3, r2
 8002a52:	b25a      	sxtb	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	789b      	ldrb	r3, [r3, #2]
 8002a58:	b25b      	sxtb	r3, r3
 8002a5a:	015b      	lsls	r3, r3, #5
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	b25b      	sxtb	r3, r3
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	0001      	movs	r1, r0
 8002a66:	187b      	adds	r3, r7, r1
 8002a68:	701a      	strb	r2, [r3, #0]

    /* Set interrupt threshold configuration  */
    data_array[1] = wakeup_conf->int_wkup_threshold;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	78da      	ldrb	r2, [r3, #3]
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	705a      	strb	r2, [r3, #1]

    /* Set the reference acceleration x-axis for the wake-up interrupt */
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	791a      	ldrb	r2, [r3, #4]
 8002a76:	187b      	adds	r3, r7, r1
 8002a78:	709a      	strb	r2, [r3, #2]

    /* Set the reference acceleration y-axis for the wake-up interrupt */
    data_array[3] = wakeup_conf->int_wkup_ref_y;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	795a      	ldrb	r2, [r3, #5]
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	70da      	strb	r2, [r3, #3]

    /* Set the reference acceleration z-axis for the wake-up interrupt */
    data_array[4] = wakeup_conf->int_wkup_ref_z;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	799a      	ldrb	r2, [r3, #6]
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	711a      	strb	r2, [r3, #4]

    /* Set the wakeup interrupt configurations in the sensor */
    rslt = bma400_set_regs(BMA400_REG_WAKEUP_INT_CONF_0, data_array, 5, dev);
 8002a8a:	250f      	movs	r5, #15
 8002a8c:	197c      	adds	r4, r7, r5
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	1879      	adds	r1, r7, r1
 8002a92:	2205      	movs	r2, #5
 8002a94:	202f      	movs	r0, #47	@ 0x2f
 8002a96:	f7ff f929 	bl	8001cec <bma400_set_regs>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	7023      	strb	r3, [r4, #0]

    return rslt;
 8002a9e:	197b      	adds	r3, r7, r5
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	b25b      	sxtb	r3, r3
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b004      	add	sp, #16
 8002aaa:	bdb0      	pop	{r4, r5, r7, pc}

08002aac <set_auto_low_power>:

    return rslt;
}

static int8_t set_auto_low_power(const struct bma400_auto_lp_conf *auto_lp_conf, struct bma400_dev *dev)
{
 8002aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t timeout_msb;
    uint8_t timeout_lsb;

    rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8002ab6:	250f      	movs	r5, #15
 8002ab8:	197c      	adds	r4, r7, r5
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	260d      	movs	r6, #13
 8002abe:	19b9      	adds	r1, r7, r6
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	202b      	movs	r0, #43	@ 0x2b
 8002ac4:	f7ff f990 	bl	8001de8 <bma400_get_regs>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8002acc:	0028      	movs	r0, r5
 8002ace:	183b      	adds	r3, r7, r0
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	b25b      	sxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d15f      	bne.n	8002b98 <set_auto_low_power+0xec>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_AUTO_LOW_POW, auto_lp_conf->auto_low_power_trigger);
 8002ad8:	19bb      	adds	r3, r7, r6
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	220f      	movs	r2, #15
 8002ae0:	4393      	bics	r3, r2
 8002ae2:	b25a      	sxtb	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b25b      	sxtb	r3, r3
 8002aea:	210f      	movs	r1, #15
 8002aec:	400b      	ands	r3, r1
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	4313      	orrs	r3, r2
 8002af2:	b25b      	sxtb	r3, r3
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	19bb      	adds	r3, r7, r6
 8002af8:	701a      	strb	r2, [r3, #0]

        /* If auto Low power timeout threshold is enabled */
        if (auto_lp_conf->auto_low_power_trigger & 0x0C)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	001a      	movs	r2, r3
 8002b00:	230c      	movs	r3, #12
 8002b02:	4013      	ands	r3, r2
 8002b04:	d038      	beq.n	8002b78 <set_auto_low_power+0xcc>
        {
            rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8002b06:	0005      	movs	r5, r0
 8002b08:	183c      	adds	r4, r7, r0
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	220c      	movs	r2, #12
 8002b0e:	18b9      	adds	r1, r7, r2
 8002b10:	2201      	movs	r2, #1
 8002b12:	202a      	movs	r0, #42	@ 0x2a
 8002b14:	f7ff f968 	bl	8001de8 <bma400_get_regs>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	7023      	strb	r3, [r4, #0]
            if (rslt == BMA400_OK)
 8002b1c:	0028      	movs	r0, r5
 8002b1e:	183b      	adds	r3, r7, r0
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b25b      	sxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d127      	bne.n	8002b78 <set_auto_low_power+0xcc>
            {
                /* Compute the timeout threshold MSB value */
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	885b      	ldrh	r3, [r3, #2]
 8002b2c:	111b      	asrs	r3, r3, #4
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	250c      	movs	r5, #12
 8002b32:	197b      	adds	r3, r7, r5
 8002b34:	701a      	strb	r2, [r3, #0]

                /* Compute the timeout threshold LSB value */
                timeout_lsb = BMA400_GET_BITS_POS_0(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES_LSB);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	885b      	ldrh	r3, [r3, #2]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	240e      	movs	r4, #14
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	210f      	movs	r1, #15
 8002b42:	400a      	ands	r2, r1
 8002b44:	701a      	strb	r2, [r3, #0]
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 8002b46:	19bb      	adds	r3, r7, r6
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b25b      	sxtb	r3, r3
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	4013      	ands	r3, r2
 8002b50:	b25a      	sxtb	r2, r3
 8002b52:	193b      	adds	r3, r7, r4
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	b25b      	sxtb	r3, r3
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	19bb      	adds	r3, r7, r6
 8002b64:	701a      	strb	r2, [r3, #0]

                /* Set the timeout threshold MSB value */
                rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8002b66:	183c      	adds	r4, r7, r0
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	1979      	adds	r1, r7, r5
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	202a      	movs	r0, #42	@ 0x2a
 8002b70:	f7ff f8bc 	bl	8001cec <bma400_set_regs>
 8002b74:	0003      	movs	r3, r0
 8002b76:	7023      	strb	r3, [r4, #0]
            }
        }

        if (rslt == BMA400_OK)
 8002b78:	220f      	movs	r2, #15
 8002b7a:	18bb      	adds	r3, r7, r2
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b25b      	sxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <set_auto_low_power+0xec>
        {
            /* Set the Auto low power configurations */
            rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8002b84:	18bc      	adds	r4, r7, r2
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	220d      	movs	r2, #13
 8002b8a:	18b9      	adds	r1, r7, r2
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	202b      	movs	r0, #43	@ 0x2b
 8002b90:	f7ff f8ac 	bl	8001cec <bma400_set_regs>
 8002b94:	0003      	movs	r3, r0
 8002b96:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8002b98:	230f      	movs	r3, #15
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b25b      	sxtb	r3, r3
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b005      	add	sp, #20
 8002ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ba8 <set_tap_conf>:

    return rslt;
}

static int8_t set_tap_conf(const struct bma400_tap_conf *tap_set, struct bma400_dev *dev)
{
 8002ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[2] = { 0, 0 };
 8002bb2:	250c      	movs	r5, #12
 8002bb4:	197b      	adds	r3, r7, r5
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	801a      	strh	r2, [r3, #0]

    rslt = bma400_get_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8002bba:	260f      	movs	r6, #15
 8002bbc:	19bc      	adds	r4, r7, r6
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	1979      	adds	r1, r7, r5
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	2057      	movs	r0, #87	@ 0x57
 8002bc6:	f7ff f90f 	bl	8001de8 <bma400_get_regs>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8002bce:	0034      	movs	r4, r6
 8002bd0:	193b      	adds	r3, r7, r4
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b25b      	sxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d164      	bne.n	8002ca4 <set_tap_conf+0xfc>
    {
        /* Set the axis to sense for tap */
        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_TAP_AXES_EN, tap_set->axes_sel);
 8002bda:	0028      	movs	r0, r5
 8002bdc:	183b      	adds	r3, r7, r0
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	2218      	movs	r2, #24
 8002be4:	4393      	bics	r3, r2
 8002be6:	b25a      	sxtb	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	2118      	movs	r1, #24
 8002bf4:	400b      	ands	r3, r1
 8002bf6:	b25b      	sxtb	r3, r3
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	b25b      	sxtb	r3, r3
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	183b      	adds	r3, r7, r0
 8002c00:	701a      	strb	r2, [r3, #0]

        /* Set the threshold for tap sensing */
        reg_data[0] = BMA400_SET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY, tap_set->sensitivity);
 8002c02:	183b      	adds	r3, r7, r0
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b25b      	sxtb	r3, r3
 8002c08:	2207      	movs	r2, #7
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	b25a      	sxtb	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	b25b      	sxtb	r3, r3
 8002c14:	2107      	movs	r1, #7
 8002c16:	400b      	ands	r3, r1
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	183b      	adds	r3, r7, r0
 8002c22:	701a      	strb	r2, [r3, #0]

        /* Set the Quiet_dt setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET_DT, tap_set->quiet_dt);
 8002c24:	183b      	adds	r3, r7, r0
 8002c26:	785b      	ldrb	r3, [r3, #1]
 8002c28:	b25b      	sxtb	r3, r3
 8002c2a:	2230      	movs	r2, #48	@ 0x30
 8002c2c:	4393      	bics	r3, r2
 8002c2e:	b25a      	sxtb	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	791b      	ldrb	r3, [r3, #4]
 8002c34:	b25b      	sxtb	r3, r3
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	2130      	movs	r1, #48	@ 0x30
 8002c3c:	400b      	ands	r3, r1
 8002c3e:	b25b      	sxtb	r3, r3
 8002c40:	4313      	orrs	r3, r2
 8002c42:	b25b      	sxtb	r3, r3
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	183b      	adds	r3, r7, r0
 8002c48:	705a      	strb	r2, [r3, #1]

        /* Set the Quiet setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET, tap_set->quiet);
 8002c4a:	183b      	adds	r3, r7, r0
 8002c4c:	785b      	ldrb	r3, [r3, #1]
 8002c4e:	b25b      	sxtb	r3, r3
 8002c50:	220c      	movs	r2, #12
 8002c52:	4393      	bics	r3, r2
 8002c54:	b25a      	sxtb	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	78db      	ldrb	r3, [r3, #3]
 8002c5a:	b25b      	sxtb	r3, r3
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	210c      	movs	r1, #12
 8002c62:	400b      	ands	r3, r1
 8002c64:	b25b      	sxtb	r3, r3
 8002c66:	4313      	orrs	r3, r2
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	183b      	adds	r3, r7, r0
 8002c6e:	705a      	strb	r2, [r3, #1]

        /* Set the tics_th setting */
        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH, tap_set->tics_th);
 8002c70:	183b      	adds	r3, r7, r0
 8002c72:	785b      	ldrb	r3, [r3, #1]
 8002c74:	b25b      	sxtb	r3, r3
 8002c76:	2203      	movs	r2, #3
 8002c78:	4393      	bics	r3, r2
 8002c7a:	b25a      	sxtb	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	789b      	ldrb	r3, [r3, #2]
 8002c80:	b25b      	sxtb	r3, r3
 8002c82:	2103      	movs	r1, #3
 8002c84:	400b      	ands	r3, r1
 8002c86:	b25b      	sxtb	r3, r3
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	183b      	adds	r3, r7, r0
 8002c90:	705a      	strb	r2, [r3, #1]

        /* Set the TAP configuration in the sensor*/
        rslt = bma400_set_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8002c92:	193c      	adds	r4, r7, r4
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	1839      	adds	r1, r7, r0
 8002c98:	2202      	movs	r2, #2
 8002c9a:	2057      	movs	r0, #87	@ 0x57
 8002c9c:	f7ff f826 	bl	8001cec <bma400_set_regs>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002ca4:	230f      	movs	r3, #15
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	b25b      	sxtb	r3, r3
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b005      	add	sp, #20
 8002cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cb4 <set_activity_change_conf>:

    return rslt;
}

static int8_t set_activity_change_conf(const struct bma400_act_ch_conf *act_ch_set, struct bma400_dev *dev)
{
 8002cb4:	b5b0      	push	{r4, r5, r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2] = { 0 };
 8002cbe:	200c      	movs	r0, #12
 8002cc0:	183b      	adds	r3, r7, r0
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	801a      	strh	r2, [r3, #0]

    /* Set the activity change threshold */
    data_array[0] = act_ch_set->act_ch_thres;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	183b      	adds	r3, r7, r0
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Set the axis to sense for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN, act_ch_set->axes_sel);
 8002cce:	183b      	adds	r3, r7, r0
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	b25b      	sxtb	r3, r3
 8002cd4:	221f      	movs	r2, #31
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	b25a      	sxtb	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	785b      	ldrb	r3, [r3, #1]
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	015b      	lsls	r3, r3, #5
 8002ce2:	b25b      	sxtb	r3, r3
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b25b      	sxtb	r3, r3
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	183b      	adds	r3, r7, r0
 8002cec:	705a      	strb	r2, [r3, #1]

    /* Set the data source for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC, act_ch_set->data_source);
 8002cee:	183b      	adds	r3, r7, r0
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	b25b      	sxtb	r3, r3
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	b25a      	sxtb	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	789b      	ldrb	r3, [r3, #2]
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	b25b      	sxtb	r3, r3
 8002d04:	2110      	movs	r1, #16
 8002d06:	400b      	ands	r3, r1
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	183b      	adds	r3, r7, r0
 8002d12:	705a      	strb	r2, [r3, #1]

    /* Set the Number of sample points(NPTS)
     * for sensing activity change
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 8002d14:	183b      	adds	r3, r7, r0
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	b25b      	sxtb	r3, r3
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	4393      	bics	r3, r2
 8002d1e:	b25a      	sxtb	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	78db      	ldrb	r3, [r3, #3]
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	210f      	movs	r1, #15
 8002d28:	400b      	ands	r3, r1
 8002d2a:	b25b      	sxtb	r3, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	705a      	strb	r2, [r3, #1]

    /* Set the Activity change configuration in the sensor*/
    rslt = bma400_set_regs(BMA400_REG_ACT_CH_CONFIG_0, data_array, 2, dev);
 8002d36:	250f      	movs	r5, #15
 8002d38:	197c      	adds	r4, r7, r5
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	1839      	adds	r1, r7, r0
 8002d3e:	2202      	movs	r2, #2
 8002d40:	2055      	movs	r0, #85	@ 0x55
 8002d42:	f7fe ffd3 	bl	8001cec <bma400_set_regs>
 8002d46:	0003      	movs	r3, r0
 8002d48:	7023      	strb	r3, [r4, #0]

    return rslt;
 8002d4a:	197b      	adds	r3, r7, r5
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	b25b      	sxtb	r3, r3
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b004      	add	sp, #16
 8002d56:	bdb0      	pop	{r4, r5, r7, pc}

08002d58 <set_gen1_int>:

    return rslt;
}

static int8_t set_gen1_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 8002d62:	240c      	movs	r4, #12
 8002d64:	193b      	adds	r3, r7, r4
 8002d66:	0018      	movs	r0, r3
 8002d68:	230b      	movs	r3, #11
 8002d6a:	001a      	movs	r2, r3
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	f004 f889 	bl	8006e84 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8002d72:	0020      	movs	r0, r4
 8002d74:	183b      	adds	r3, r7, r0
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b25b      	sxtb	r3, r3
 8002d7a:	221f      	movs	r2, #31
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b25a      	sxtb	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	791b      	ldrb	r3, [r3, #4]
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	015b      	lsls	r3, r3, #5
 8002d88:	b25b      	sxtb	r3, r3
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	b25b      	sxtb	r3, r3
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	183b      	adds	r3, r7, r0
 8002d92:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8002d94:	183b      	adds	r3, r7, r0
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b25b      	sxtb	r3, r3
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	4393      	bics	r3, r2
 8002d9e:	b25a      	sxtb	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	795b      	ldrb	r3, [r3, #5]
 8002da4:	b25b      	sxtb	r3, r3
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	b25b      	sxtb	r3, r3
 8002daa:	2110      	movs	r1, #16
 8002dac:	400b      	ands	r3, r1
 8002dae:	b25b      	sxtb	r3, r3
 8002db0:	4313      	orrs	r3, r2
 8002db2:	b25b      	sxtb	r3, r3
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	183b      	adds	r3, r7, r0
 8002db8:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8002dba:	183b      	adds	r3, r7, r0
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	b25b      	sxtb	r3, r3
 8002dc0:	220c      	movs	r2, #12
 8002dc2:	4393      	bics	r3, r2
 8002dc4:	b25a      	sxtb	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7a1b      	ldrb	r3, [r3, #8]
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	b25b      	sxtb	r3, r3
 8002dd0:	210c      	movs	r1, #12
 8002dd2:	400b      	ands	r3, r1
 8002dd4:	b25b      	sxtb	r3, r3
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	b25b      	sxtb	r3, r3
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	183b      	adds	r3, r7, r0
 8002dde:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8002de0:	183b      	adds	r3, r7, r0
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b25b      	sxtb	r3, r3
 8002de6:	2203      	movs	r2, #3
 8002de8:	4393      	bics	r3, r2
 8002dea:	b25a      	sxtb	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7a5b      	ldrb	r3, [r3, #9]
 8002df0:	b25b      	sxtb	r3, r3
 8002df2:	2103      	movs	r1, #3
 8002df4:	400b      	ands	r3, r1
 8002df6:	b25b      	sxtb	r3, r3
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b25b      	sxtb	r3, r3
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	183b      	adds	r3, r7, r0
 8002e00:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8002e02:	183b      	adds	r3, r7, r0
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	b25b      	sxtb	r3, r3
 8002e08:	2202      	movs	r2, #2
 8002e0a:	4393      	bics	r3, r2
 8002e0c:	b25a      	sxtb	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	799b      	ldrb	r3, [r3, #6]
 8002e12:	b25b      	sxtb	r3, r3
 8002e14:	18db      	adds	r3, r3, r3
 8002e16:	b25b      	sxtb	r3, r3
 8002e18:	2102      	movs	r1, #2
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	b25b      	sxtb	r3, r3
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	b25b      	sxtb	r3, r3
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	183b      	adds	r3, r7, r0
 8002e26:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8002e28:	183b      	adds	r3, r7, r0
 8002e2a:	785b      	ldrb	r3, [r3, #1]
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4393      	bics	r3, r2
 8002e32:	b25a      	sxtb	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	79db      	ldrb	r3, [r3, #7]
 8002e38:	b25b      	sxtb	r3, r3
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	400b      	ands	r3, r1
 8002e3e:	b25b      	sxtb	r3, r3
 8002e40:	4313      	orrs	r3, r2
 8002e42:	b25b      	sxtb	r3, r3
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	0001      	movs	r1, r0
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	885b      	ldrh	r3, [r3, #2]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	187b      	adds	r3, r7, r1
 8002e60:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	885b      	ldrh	r3, [r3, #2]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	7a1b      	ldrb	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d12e      	bne.n	8002ed2 <set_gen1_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	895b      	ldrh	r3, [r3, #10]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	895b      	ldrh	r3, [r3, #10]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	899b      	ldrh	r3, [r3, #12]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	899b      	ldrh	r3, [r3, #12]
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	89db      	ldrh	r3, [r3, #14]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	187b      	adds	r3, r7, r1
 8002eac:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	89db      	ldrh	r3, [r3, #14]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	729a      	strb	r2, [r3, #10]

        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 11, dev);
 8002ebc:	2317      	movs	r3, #23
 8002ebe:	18fc      	adds	r4, r7, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	1879      	adds	r1, r7, r1
 8002ec4:	220b      	movs	r2, #11
 8002ec6:	203f      	movs	r0, #63	@ 0x3f
 8002ec8:	f7fe ff10 	bl	8001cec <bma400_set_regs>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	7023      	strb	r3, [r4, #0]
 8002ed0:	e00a      	b.n	8002ee8 <set_gen1_int+0x190>
    }
    else
    {
        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 5, dev);
 8002ed2:	2317      	movs	r3, #23
 8002ed4:	18fc      	adds	r4, r7, r3
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	220c      	movs	r2, #12
 8002eda:	18b9      	adds	r1, r7, r2
 8002edc:	2205      	movs	r2, #5
 8002ede:	203f      	movs	r0, #63	@ 0x3f
 8002ee0:	f7fe ff04 	bl	8001cec <bma400_set_regs>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002ee8:	2317      	movs	r3, #23
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	b25b      	sxtb	r3, r3
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b007      	add	sp, #28
 8002ef6:	bd90      	pop	{r4, r7, pc}

08002ef8 <set_gen2_int>:

    return rslt;
}

static int8_t set_gen2_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 8002f02:	240c      	movs	r4, #12
 8002f04:	193b      	adds	r3, r7, r4
 8002f06:	0018      	movs	r0, r3
 8002f08:	230b      	movs	r3, #11
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	f003 ffb9 	bl	8006e84 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8002f12:	0020      	movs	r0, r4
 8002f14:	183b      	adds	r3, r7, r0
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	221f      	movs	r2, #31
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	b25a      	sxtb	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	791b      	ldrb	r3, [r3, #4]
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	015b      	lsls	r3, r3, #5
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	b25b      	sxtb	r3, r3
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	183b      	adds	r3, r7, r0
 8002f32:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8002f34:	183b      	adds	r3, r7, r0
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	4393      	bics	r3, r2
 8002f3e:	b25a      	sxtb	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	795b      	ldrb	r3, [r3, #5]
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	b25b      	sxtb	r3, r3
 8002f4a:	2110      	movs	r1, #16
 8002f4c:	400b      	ands	r3, r1
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	4313      	orrs	r3, r2
 8002f52:	b25b      	sxtb	r3, r3
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	183b      	adds	r3, r7, r0
 8002f58:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8002f5a:	183b      	adds	r3, r7, r0
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b25b      	sxtb	r3, r3
 8002f60:	220c      	movs	r2, #12
 8002f62:	4393      	bics	r3, r2
 8002f64:	b25a      	sxtb	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7a1b      	ldrb	r3, [r3, #8]
 8002f6a:	b25b      	sxtb	r3, r3
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	210c      	movs	r1, #12
 8002f72:	400b      	ands	r3, r1
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b25b      	sxtb	r3, r3
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	183b      	adds	r3, r7, r0
 8002f7e:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8002f80:	183b      	adds	r3, r7, r0
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	2203      	movs	r2, #3
 8002f88:	4393      	bics	r3, r2
 8002f8a:	b25a      	sxtb	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7a5b      	ldrb	r3, [r3, #9]
 8002f90:	b25b      	sxtb	r3, r3
 8002f92:	2103      	movs	r1, #3
 8002f94:	400b      	ands	r3, r1
 8002f96:	b25b      	sxtb	r3, r3
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	183b      	adds	r3, r7, r0
 8002fa0:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8002fa2:	183b      	adds	r3, r7, r0
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	b25b      	sxtb	r3, r3
 8002fa8:	2202      	movs	r2, #2
 8002faa:	4393      	bics	r3, r2
 8002fac:	b25a      	sxtb	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	799b      	ldrb	r3, [r3, #6]
 8002fb2:	b25b      	sxtb	r3, r3
 8002fb4:	18db      	adds	r3, r3, r3
 8002fb6:	b25b      	sxtb	r3, r3
 8002fb8:	2102      	movs	r1, #2
 8002fba:	400b      	ands	r3, r1
 8002fbc:	b25b      	sxtb	r3, r3
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	183b      	adds	r3, r7, r0
 8002fc6:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8002fc8:	183b      	adds	r3, r7, r0
 8002fca:	785b      	ldrb	r3, [r3, #1]
 8002fcc:	b25b      	sxtb	r3, r3
 8002fce:	2201      	movs	r2, #1
 8002fd0:	4393      	bics	r3, r2
 8002fd2:	b25a      	sxtb	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	79db      	ldrb	r3, [r3, #7]
 8002fd8:	b25b      	sxtb	r3, r3
 8002fda:	2101      	movs	r1, #1
 8002fdc:	400b      	ands	r3, r1
 8002fde:	b25b      	sxtb	r3, r3
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	b25b      	sxtb	r3, r3
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	0001      	movs	r1, r0
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	781a      	ldrb	r2, [r3, #0]
 8002ff0:	187b      	adds	r3, r7, r1
 8002ff2:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	885b      	ldrh	r3, [r3, #2]
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	187b      	adds	r3, r7, r1
 8003000:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	885b      	ldrh	r3, [r3, #2]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	187b      	adds	r3, r7, r1
 800300a:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	7a1b      	ldrb	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d12e      	bne.n	8003072 <set_gen2_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	895b      	ldrh	r3, [r3, #10]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	187b      	adds	r3, r7, r1
 800301c:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	895b      	ldrh	r3, [r3, #10]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	b29b      	uxth	r3, r3
 8003026:	b2da      	uxtb	r2, r3
 8003028:	187b      	adds	r3, r7, r1
 800302a:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	899b      	ldrh	r3, [r3, #12]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	187b      	adds	r3, r7, r1
 8003034:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	899b      	ldrh	r3, [r3, #12]
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	b29b      	uxth	r3, r3
 800303e:	b2da      	uxtb	r2, r3
 8003040:	187b      	adds	r3, r7, r1
 8003042:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	89db      	ldrh	r3, [r3, #14]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	187b      	adds	r3, r7, r1
 800304c:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	89db      	ldrh	r3, [r3, #14]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	b29b      	uxth	r3, r3
 8003056:	b2da      	uxtb	r2, r3
 8003058:	187b      	adds	r3, r7, r1
 800305a:	729a      	strb	r2, [r3, #10]

        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 11, dev);
 800305c:	2317      	movs	r3, #23
 800305e:	18fc      	adds	r4, r7, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	1879      	adds	r1, r7, r1
 8003064:	220b      	movs	r2, #11
 8003066:	204a      	movs	r0, #74	@ 0x4a
 8003068:	f7fe fe40 	bl	8001cec <bma400_set_regs>
 800306c:	0003      	movs	r3, r0
 800306e:	7023      	strb	r3, [r4, #0]
 8003070:	e00a      	b.n	8003088 <set_gen2_int+0x190>
    }
    else
    {
        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 5, dev);
 8003072:	2317      	movs	r3, #23
 8003074:	18fc      	adds	r4, r7, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	220c      	movs	r2, #12
 800307a:	18b9      	adds	r1, r7, r2
 800307c:	2205      	movs	r2, #5
 800307e:	204a      	movs	r0, #74	@ 0x4a
 8003080:	f7fe fe34 	bl	8001cec <bma400_set_regs>
 8003084:	0003      	movs	r3, r0
 8003086:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003088:	2317      	movs	r3, #23
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b25b      	sxtb	r3, r3
}
 8003090:	0018      	movs	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	b007      	add	sp, #28
 8003096:	bd90      	pop	{r4, r7, pc}

08003098 <set_orient_int>:

    return rslt;
}

static int8_t set_orient_int(const struct bma400_orient_int_conf *orient_conf, struct bma400_dev *dev)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[10] = { 0 };
 80030a2:	240c      	movs	r4, #12
 80030a4:	193b      	adds	r3, r7, r4
 80030a6:	0018      	movs	r0, r3
 80030a8:	230a      	movs	r3, #10
 80030aa:	001a      	movs	r2, r3
 80030ac:	2100      	movs	r1, #0
 80030ae:	f003 fee9 	bl	8006e84 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 80030b2:	0020      	movs	r0, r4
 80030b4:	183b      	adds	r3, r7, r0
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	b25b      	sxtb	r3, r3
 80030ba:	221f      	movs	r2, #31
 80030bc:	4013      	ands	r3, r2
 80030be:	b25a      	sxtb	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	b25b      	sxtb	r3, r3
 80030c6:	015b      	lsls	r3, r3, #5
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	4313      	orrs	r3, r2
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	183b      	adds	r3, r7, r0
 80030d2:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 80030d4:	183b      	adds	r3, r7, r0
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b25b      	sxtb	r3, r3
 80030da:	2210      	movs	r2, #16
 80030dc:	4393      	bics	r3, r2
 80030de:	b25a      	sxtb	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	785b      	ldrb	r3, [r3, #1]
 80030e4:	b25b      	sxtb	r3, r3
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	b25b      	sxtb	r3, r3
 80030ea:	2110      	movs	r1, #16
 80030ec:	400b      	ands	r3, r1
 80030ee:	b25b      	sxtb	r3, r3
 80030f0:	4313      	orrs	r3, r2
 80030f2:	b25b      	sxtb	r3, r3
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	183b      	adds	r3, r7, r0
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 80030fa:	183b      	adds	r3, r7, r0
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	b25b      	sxtb	r3, r3
 8003100:	220c      	movs	r2, #12
 8003102:	4393      	bics	r3, r2
 8003104:	b25a      	sxtb	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	789b      	ldrb	r3, [r3, #2]
 800310a:	b25b      	sxtb	r3, r3
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	b25b      	sxtb	r3, r3
 8003110:	210c      	movs	r1, #12
 8003112:	400b      	ands	r3, r1
 8003114:	b25b      	sxtb	r3, r3
 8003116:	4313      	orrs	r3, r2
 8003118:	b25b      	sxtb	r3, r3
 800311a:	b2da      	uxtb	r2, r3
 800311c:	0001      	movs	r1, r0
 800311e:	187b      	adds	r3, r7, r1
 8003120:	701a      	strb	r2, [r3, #0]

    /* Set the threshold for interrupt calculation */
    data_array[1] = orient_conf->orient_thres;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	78da      	ldrb	r2, [r3, #3]
 8003126:	187b      	adds	r3, r7, r1
 8003128:	705a      	strb	r2, [r3, #1]

    /* Set the stability threshold */
    data_array[2] = orient_conf->stability_thres;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	791a      	ldrb	r2, [r3, #4]
 800312e:	187b      	adds	r3, r7, r1
 8003130:	709a      	strb	r2, [r3, #2]

    /* Set the interrupt duration */
    data_array[3] = orient_conf->orient_int_dur;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	795a      	ldrb	r2, [r3, #5]
 8003136:	187b      	adds	r3, r7, r1
 8003138:	70da      	strb	r2, [r3, #3]

    /* Handling case of manual reference update */
    if (orient_conf->ref_update == BMA400_UPDATE_MANUAL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	789b      	ldrb	r3, [r3, #2]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d12e      	bne.n	80031a0 <set_orient_int+0x108>
    {
        /* Set the LSB of reference x threshold */
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	88db      	ldrh	r3, [r3, #6]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	187b      	adds	r3, r7, r1
 800314a:	711a      	strb	r2, [r3, #4]

        /* Set the MSB of reference x threshold */
        data_array[5] = BMA400_GET_MSB(orient_conf->orient_ref_x);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	88db      	ldrh	r3, [r3, #6]
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	b29b      	uxth	r3, r3
 8003154:	b2da      	uxtb	r2, r3
 8003156:	187b      	adds	r3, r7, r1
 8003158:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	891b      	ldrh	r3, [r3, #8]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	187b      	adds	r3, r7, r1
 8003162:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_MSB(orient_conf->orient_ref_y);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	891b      	ldrh	r3, [r3, #8]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	b29b      	uxth	r3, r3
 800316c:	b2da      	uxtb	r2, r3
 800316e:	187b      	adds	r3, r7, r1
 8003170:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	895b      	ldrh	r3, [r3, #10]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	187b      	adds	r3, r7, r1
 800317a:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_MSB(orient_conf->orient_ref_z);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	895b      	ldrh	r3, [r3, #10]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	b29b      	uxth	r3, r3
 8003184:	b2da      	uxtb	r2, r3
 8003186:	187b      	adds	r3, r7, r1
 8003188:	725a      	strb	r2, [r3, #9]

        /* Set the orient configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 10, dev);
 800318a:	2317      	movs	r3, #23
 800318c:	18fc      	adds	r4, r7, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	1879      	adds	r1, r7, r1
 8003192:	220a      	movs	r2, #10
 8003194:	2035      	movs	r0, #53	@ 0x35
 8003196:	f7fe fda9 	bl	8001cec <bma400_set_regs>
 800319a:	0003      	movs	r3, r0
 800319c:	7023      	strb	r3, [r4, #0]
 800319e:	e00a      	b.n	80031b6 <set_orient_int+0x11e>
    else
    {
        /* Set the orient configurations in the sensor excluding
         * reference values of x,y,z
         */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 4, dev);
 80031a0:	2317      	movs	r3, #23
 80031a2:	18fc      	adds	r4, r7, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	220c      	movs	r2, #12
 80031a8:	18b9      	adds	r1, r7, r2
 80031aa:	2204      	movs	r2, #4
 80031ac:	2035      	movs	r0, #53	@ 0x35
 80031ae:	f7fe fd9d 	bl	8001cec <bma400_set_regs>
 80031b2:	0003      	movs	r3, r0
 80031b4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80031b6:	2317      	movs	r3, #23
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b25b      	sxtb	r3, r3
}
 80031be:	0018      	movs	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b007      	add	sp, #28
 80031c4:	bd90      	pop	{r4, r7, pc}
	...

080031c8 <map_int_pin>:

    return rslt;
}

static void map_int_pin(uint8_t *data_array, uint8_t int_enable, enum bma400_int_chan int_map)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	0008      	movs	r0, r1
 80031d2:	0011      	movs	r1, r2
 80031d4:	1cfb      	adds	r3, r7, #3
 80031d6:	1c02      	adds	r2, r0, #0
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	1cbb      	adds	r3, r7, #2
 80031dc:	1c0a      	adds	r2, r1, #0
 80031de:	701a      	strb	r2, [r3, #0]
    switch (int_enable)
 80031e0:	1cfb      	adds	r3, r7, #3
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b0b      	cmp	r3, #11
 80031e6:	d900      	bls.n	80031ea <map_int_pin+0x22>
 80031e8:	e2f3      	b.n	80037d2 <map_int_pin+0x60a>
 80031ea:	009a      	lsls	r2, r3, #2
 80031ec:	4bc9      	ldr	r3, [pc, #804]	@ (8003514 <map_int_pin+0x34c>)
 80031ee:	18d3      	adds	r3, r2, r3
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	469f      	mov	pc, r3
    {
        case BMA400_DATA_READY_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80031f4:	1cbb      	adds	r3, r7, #2
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d107      	bne.n	800320c <map_int_pin+0x44>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2280      	movs	r2, #128	@ 0x80
 8003202:	4252      	negs	r2, r2
 8003204:	4313      	orrs	r3, r2
 8003206:	b2da      	uxtb	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800320c:	1cbb      	adds	r3, r7, #2
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d109      	bne.n	8003228 <map_int_pin+0x60>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3301      	adds	r3, #1
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3301      	adds	r3, #1
 800321e:	2180      	movs	r1, #128	@ 0x80
 8003220:	4249      	negs	r1, r1
 8003222:	430a      	orrs	r2, r1
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003228:	1cbb      	adds	r3, r7, #2
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10f      	bne.n	8003250 <map_int_pin+0x88>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_DRDY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	227f      	movs	r2, #127	@ 0x7f
 8003236:	4013      	ands	r3, r2
 8003238:	b2da      	uxtb	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_DRDY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3301      	adds	r3, #1
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3301      	adds	r3, #1
 8003248:	217f      	movs	r1, #127	@ 0x7f
 800324a:	400a      	ands	r2, r1
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003250:	1cbb      	adds	r3, r7, #2
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b03      	cmp	r3, #3
 8003256:	d000      	beq.n	800325a <map_int_pin+0x92>
 8003258:	e2bd      	b.n	80037d6 <map_int_pin+0x60e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2280      	movs	r2, #128	@ 0x80
 8003260:	4252      	negs	r2, r2
 8003262:	4313      	orrs	r3, r2
 8003264:	b2da      	uxtb	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3301      	adds	r3, #1
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3301      	adds	r3, #1
 8003274:	2180      	movs	r1, #128	@ 0x80
 8003276:	4249      	negs	r1, r1
 8003278:	430a      	orrs	r2, r1
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]
            }

            break;
 800327e:	e2aa      	b.n	80037d6 <map_int_pin+0x60e>
        case BMA400_FIFO_WM_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003280:	1cbb      	adds	r3, r7, #2
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d106      	bne.n	8003296 <map_int_pin+0xce>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2240      	movs	r2, #64	@ 0x40
 800328e:	4313      	orrs	r3, r2
 8003290:	b2da      	uxtb	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8003296:	1cbb      	adds	r3, r7, #2
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d108      	bne.n	80032b0 <map_int_pin+0xe8>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3301      	adds	r3, #1
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3301      	adds	r3, #1
 80032a8:	2140      	movs	r1, #64	@ 0x40
 80032aa:	430a      	orrs	r2, r1
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80032b0:	1cbb      	adds	r3, r7, #2
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10f      	bne.n	80032d8 <map_int_pin+0x110>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_WM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2240      	movs	r2, #64	@ 0x40
 80032be:	4393      	bics	r3, r2
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_WM);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3301      	adds	r3, #1
 80032ca:	781a      	ldrb	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3301      	adds	r3, #1
 80032d0:	2140      	movs	r1, #64	@ 0x40
 80032d2:	438a      	bics	r2, r1
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80032d8:	1cbb      	adds	r3, r7, #2
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d000      	beq.n	80032e2 <map_int_pin+0x11a>
 80032e0:	e27b      	b.n	80037da <map_int_pin+0x612>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2240      	movs	r2, #64	@ 0x40
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3301      	adds	r3, #1
 80032f4:	781a      	ldrb	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3301      	adds	r3, #1
 80032fa:	2140      	movs	r1, #64	@ 0x40
 80032fc:	430a      	orrs	r2, r1
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003302:	e26a      	b.n	80037da <map_int_pin+0x612>
        case BMA400_FIFO_FULL_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003304:	1cbb      	adds	r3, r7, #2
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d106      	bne.n	800331a <map_int_pin+0x152>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2220      	movs	r2, #32
 8003312:	4313      	orrs	r3, r2
 8003314:	b2da      	uxtb	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800331a:	1cbb      	adds	r3, r7, #2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d108      	bne.n	8003334 <map_int_pin+0x16c>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3301      	adds	r3, #1
 8003326:	781a      	ldrb	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3301      	adds	r3, #1
 800332c:	2120      	movs	r1, #32
 800332e:	430a      	orrs	r2, r1
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003334:	1cbb      	adds	r3, r7, #2
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10f      	bne.n	800335c <map_int_pin+0x194>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2220      	movs	r2, #32
 8003342:	4393      	bics	r3, r2
 8003344:	b2da      	uxtb	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_FULL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3301      	adds	r3, #1
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3301      	adds	r3, #1
 8003354:	2120      	movs	r1, #32
 8003356:	438a      	bics	r2, r1
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800335c:	1cbb      	adds	r3, r7, #2
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d000      	beq.n	8003366 <map_int_pin+0x19e>
 8003364:	e23b      	b.n	80037de <map_int_pin+0x616>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2220      	movs	r2, #32
 800336c:	4313      	orrs	r3, r2
 800336e:	b2da      	uxtb	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3301      	adds	r3, #1
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3301      	adds	r3, #1
 800337e:	2120      	movs	r1, #32
 8003380:	430a      	orrs	r2, r1
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003386:	e22a      	b.n	80037de <map_int_pin+0x616>
        case BMA400_INT_OVERRUN_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003388:	1cbb      	adds	r3, r7, #2
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d106      	bne.n	800339e <map_int_pin+0x1d6>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2210      	movs	r2, #16
 8003396:	4313      	orrs	r3, r2
 8003398:	b2da      	uxtb	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800339e:	1cbb      	adds	r3, r7, #2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d108      	bne.n	80033b8 <map_int_pin+0x1f0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3301      	adds	r3, #1
 80033aa:	781a      	ldrb	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3301      	adds	r3, #1
 80033b0:	2110      	movs	r1, #16
 80033b2:	430a      	orrs	r2, r1
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80033b8:	1cbb      	adds	r3, r7, #2
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10f      	bne.n	80033e0 <map_int_pin+0x218>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_INT_OVERRUN);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2210      	movs	r2, #16
 80033c6:	4393      	bics	r3, r2
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_INT_OVERRUN);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3301      	adds	r3, #1
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3301      	adds	r3, #1
 80033d8:	2110      	movs	r1, #16
 80033da:	438a      	bics	r2, r1
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80033e0:	1cbb      	adds	r3, r7, #2
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d000      	beq.n	80033ea <map_int_pin+0x222>
 80033e8:	e1fb      	b.n	80037e2 <map_int_pin+0x61a>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2210      	movs	r2, #16
 80033f0:	4313      	orrs	r3, r2
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3301      	adds	r3, #1
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3301      	adds	r3, #1
 8003402:	2110      	movs	r1, #16
 8003404:	430a      	orrs	r2, r1
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]
            }

            break;
 800340a:	e1ea      	b.n	80037e2 <map_int_pin+0x61a>
        case BMA400_GEN2_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 800340c:	1cbb      	adds	r3, r7, #2
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <map_int_pin+0x25a>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2208      	movs	r2, #8
 800341a:	4313      	orrs	r3, r2
 800341c:	b2da      	uxtb	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8003422:	1cbb      	adds	r3, r7, #2
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d108      	bne.n	800343c <map_int_pin+0x274>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3301      	adds	r3, #1
 800342e:	781a      	ldrb	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3301      	adds	r3, #1
 8003434:	2108      	movs	r1, #8
 8003436:	430a      	orrs	r2, r1
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 800343c:	1cbb      	adds	r3, r7, #2
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10f      	bne.n	8003464 <map_int_pin+0x29c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2208      	movs	r2, #8
 800344a:	4393      	bics	r3, r2
 800344c:	b2da      	uxtb	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3301      	adds	r3, #1
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3301      	adds	r3, #1
 800345c:	2108      	movs	r1, #8
 800345e:	438a      	bics	r2, r1
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003464:	1cbb      	adds	r3, r7, #2
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d000      	beq.n	800346e <map_int_pin+0x2a6>
 800346c:	e1bb      	b.n	80037e6 <map_int_pin+0x61e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2208      	movs	r2, #8
 8003474:	4313      	orrs	r3, r2
 8003476:	b2da      	uxtb	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3301      	adds	r3, #1
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3301      	adds	r3, #1
 8003486:	2108      	movs	r1, #8
 8003488:	430a      	orrs	r2, r1
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]
            }

            break;
 800348e:	e1aa      	b.n	80037e6 <map_int_pin+0x61e>
        case BMA400_GEN1_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003490:	1cbb      	adds	r3, r7, #2
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d106      	bne.n	80034a6 <map_int_pin+0x2de>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2204      	movs	r2, #4
 800349e:	4313      	orrs	r3, r2
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80034a6:	1cbb      	adds	r3, r7, #2
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d108      	bne.n	80034c0 <map_int_pin+0x2f8>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3301      	adds	r3, #1
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3301      	adds	r3, #1
 80034b8:	2104      	movs	r1, #4
 80034ba:	430a      	orrs	r2, r1
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80034c0:	1cbb      	adds	r3, r7, #2
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10f      	bne.n	80034e8 <map_int_pin+0x320>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN1);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2204      	movs	r2, #4
 80034ce:	4393      	bics	r3, r2
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3301      	adds	r3, #1
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3301      	adds	r3, #1
 80034e0:	2104      	movs	r1, #4
 80034e2:	438a      	bics	r2, r1
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80034e8:	1cbb      	adds	r3, r7, #2
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d000      	beq.n	80034f2 <map_int_pin+0x32a>
 80034f0:	e17b      	b.n	80037ea <map_int_pin+0x622>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2204      	movs	r2, #4
 80034f8:	4313      	orrs	r3, r2
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3301      	adds	r3, #1
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3301      	adds	r3, #1
 800350a:	2104      	movs	r1, #4
 800350c:	430a      	orrs	r2, r1
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003512:	e16a      	b.n	80037ea <map_int_pin+0x622>
 8003514:	08007cb8 	.word	0x08007cb8
        case BMA400_ORIENT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003518:	1cbb      	adds	r3, r7, #2
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d106      	bne.n	800352e <map_int_pin+0x366>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2202      	movs	r2, #2
 8003526:	4313      	orrs	r3, r2
 8003528:	b2da      	uxtb	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800352e:	1cbb      	adds	r3, r7, #2
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d108      	bne.n	8003548 <map_int_pin+0x380>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3301      	adds	r3, #1
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3301      	adds	r3, #1
 8003540:	2102      	movs	r1, #2
 8003542:	430a      	orrs	r2, r1
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003548:	1cbb      	adds	r3, r7, #2
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10f      	bne.n	8003570 <map_int_pin+0x3a8>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2202      	movs	r2, #2
 8003556:	4393      	bics	r3, r2
 8003558:	b2da      	uxtb	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_ORIENT_CH);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3301      	adds	r3, #1
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3301      	adds	r3, #1
 8003568:	2102      	movs	r1, #2
 800356a:	438a      	bics	r2, r1
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003570:	1cbb      	adds	r3, r7, #2
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d000      	beq.n	800357a <map_int_pin+0x3b2>
 8003578:	e139      	b.n	80037ee <map_int_pin+0x626>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2202      	movs	r2, #2
 8003580:	4313      	orrs	r3, r2
 8003582:	b2da      	uxtb	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3301      	adds	r3, #1
 800358c:	781a      	ldrb	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3301      	adds	r3, #1
 8003592:	2102      	movs	r1, #2
 8003594:	430a      	orrs	r2, r1
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
            }

            break;
 800359a:	e128      	b.n	80037ee <map_int_pin+0x626>
        case BMA400_WAKEUP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 800359c:	1cbb      	adds	r3, r7, #2
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d106      	bne.n	80035b2 <map_int_pin+0x3ea>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2201      	movs	r2, #1
 80035aa:	4313      	orrs	r3, r2
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80035b2:	1cbb      	adds	r3, r7, #2
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d108      	bne.n	80035cc <map_int_pin+0x404>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3301      	adds	r3, #1
 80035be:	781a      	ldrb	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3301      	adds	r3, #1
 80035c4:	2101      	movs	r1, #1
 80035c6:	430a      	orrs	r2, r1
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80035cc:	1cbb      	adds	r3, r7, #2
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10f      	bne.n	80035f4 <map_int_pin+0x42c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_WAKEUP_INT);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2201      	movs	r2, #1
 80035da:	4393      	bics	r3, r2
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_WAKEUP_INT);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3301      	adds	r3, #1
 80035e6:	781a      	ldrb	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3301      	adds	r3, #1
 80035ec:	2101      	movs	r1, #1
 80035ee:	438a      	bics	r2, r1
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80035f4:	1cbb      	adds	r3, r7, #2
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d000      	beq.n	80035fe <map_int_pin+0x436>
 80035fc:	e0f9      	b.n	80037f2 <map_int_pin+0x62a>
            {
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2201      	movs	r2, #1
 8003604:	4313      	orrs	r3, r2
 8003606:	b2da      	uxtb	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3301      	adds	r3, #1
 8003610:	781a      	ldrb	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3301      	adds	r3, #1
 8003616:	2101      	movs	r1, #1
 8003618:	430a      	orrs	r2, r1
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]
            }

            break;
 800361e:	e0e8      	b.n	80037f2 <map_int_pin+0x62a>
        case BMA400_ACT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003620:	1cbb      	adds	r3, r7, #2
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d108      	bne.n	800363a <map_int_pin+0x472>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3302      	adds	r3, #2
 800362c:	781a      	ldrb	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3302      	adds	r3, #2
 8003632:	2108      	movs	r1, #8
 8003634:	430a      	orrs	r2, r1
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800363a:	1cbb      	adds	r3, r7, #2
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d109      	bne.n	8003656 <map_int_pin+0x48e>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3302      	adds	r3, #2
 8003646:	781a      	ldrb	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3302      	adds	r3, #2
 800364c:	2180      	movs	r1, #128	@ 0x80
 800364e:	4249      	negs	r1, r1
 8003650:	430a      	orrs	r2, r1
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003656:	1cbb      	adds	r3, r7, #2
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d111      	bne.n	8003682 <map_int_pin+0x4ba>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3302      	adds	r3, #2
 8003662:	781a      	ldrb	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3302      	adds	r3, #2
 8003668:	2108      	movs	r1, #8
 800366a:	438a      	bics	r2, r1
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT2);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3302      	adds	r3, #2
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3302      	adds	r3, #2
 800367a:	217f      	movs	r1, #127	@ 0x7f
 800367c:	400a      	ands	r2, r1
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d000      	beq.n	800368c <map_int_pin+0x4c4>
 800368a:	e0b4      	b.n	80037f6 <map_int_pin+0x62e>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3302      	adds	r3, #2
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3302      	adds	r3, #2
 8003696:	2108      	movs	r1, #8
 8003698:	430a      	orrs	r2, r1
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3302      	adds	r3, #2
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3302      	adds	r3, #2
 80036a8:	2180      	movs	r1, #128	@ 0x80
 80036aa:	4249      	negs	r1, r1
 80036ac:	430a      	orrs	r2, r1
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]
            }

            break;
 80036b2:	e0a0      	b.n	80037f6 <map_int_pin+0x62e>
        case BMA400_TAP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80036b4:	1cbb      	adds	r3, r7, #2
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d108      	bne.n	80036ce <map_int_pin+0x506>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3302      	adds	r3, #2
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3302      	adds	r3, #2
 80036c6:	2104      	movs	r1, #4
 80036c8:	430a      	orrs	r2, r1
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80036ce:	1cbb      	adds	r3, r7, #2
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d108      	bne.n	80036e8 <map_int_pin+0x520>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3302      	adds	r3, #2
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3302      	adds	r3, #2
 80036e0:	2140      	movs	r1, #64	@ 0x40
 80036e2:	430a      	orrs	r2, r1
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80036e8:	1cbb      	adds	r3, r7, #2
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d111      	bne.n	8003714 <map_int_pin+0x54c>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT1);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3302      	adds	r3, #2
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3302      	adds	r3, #2
 80036fa:	2104      	movs	r1, #4
 80036fc:	438a      	bics	r2, r1
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT2);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3302      	adds	r3, #2
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3302      	adds	r3, #2
 800370c:	2140      	movs	r1, #64	@ 0x40
 800370e:	438a      	bics	r2, r1
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003714:	1cbb      	adds	r3, r7, #2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d000      	beq.n	800371e <map_int_pin+0x556>
 800371c:	e06d      	b.n	80037fa <map_int_pin+0x632>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3302      	adds	r3, #2
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3302      	adds	r3, #2
 8003728:	2104      	movs	r1, #4
 800372a:	430a      	orrs	r2, r1
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3302      	adds	r3, #2
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3302      	adds	r3, #2
 800373a:	2140      	movs	r1, #64	@ 0x40
 800373c:	430a      	orrs	r2, r1
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003742:	e05a      	b.n	80037fa <map_int_pin+0x632>
        case BMA400_STEP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003744:	1cbb      	adds	r3, r7, #2
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d108      	bne.n	800375e <map_int_pin+0x596>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3302      	adds	r3, #2
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3302      	adds	r3, #2
 8003756:	2101      	movs	r1, #1
 8003758:	430a      	orrs	r2, r1
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800375e:	1cbb      	adds	r3, r7, #2
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d108      	bne.n	8003778 <map_int_pin+0x5b0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3302      	adds	r3, #2
 800376a:	781a      	ldrb	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3302      	adds	r3, #2
 8003770:	2110      	movs	r1, #16
 8003772:	430a      	orrs	r2, r1
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003778:	1cbb      	adds	r3, r7, #2
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d111      	bne.n	80037a4 <map_int_pin+0x5dc>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_EN_STEP_INT);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3302      	adds	r3, #2
 8003784:	781a      	ldrb	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3302      	adds	r3, #2
 800378a:	2101      	movs	r1, #1
 800378c:	438a      	bics	r2, r1
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3302      	adds	r3, #2
 8003796:	781a      	ldrb	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3302      	adds	r3, #2
 800379c:	2110      	movs	r1, #16
 800379e:	438a      	bics	r2, r1
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80037a4:	1cbb      	adds	r3, r7, #2
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d128      	bne.n	80037fe <map_int_pin+0x636>
            {
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3302      	adds	r3, #2
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3302      	adds	r3, #2
 80037b6:	2101      	movs	r1, #1
 80037b8:	430a      	orrs	r2, r1
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3302      	adds	r3, #2
 80037c2:	781a      	ldrb	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3302      	adds	r3, #2
 80037c8:	2110      	movs	r1, #16
 80037ca:	430a      	orrs	r2, r1
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
            }

            break;
 80037d0:	e015      	b.n	80037fe <map_int_pin+0x636>
        default:
            break;
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	e014      	b.n	8003800 <map_int_pin+0x638>
            break;
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	e012      	b.n	8003800 <map_int_pin+0x638>
            break;
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	e010      	b.n	8003800 <map_int_pin+0x638>
            break;
 80037de:	46c0      	nop			@ (mov r8, r8)
 80037e0:	e00e      	b.n	8003800 <map_int_pin+0x638>
            break;
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	e00c      	b.n	8003800 <map_int_pin+0x638>
            break;
 80037e6:	46c0      	nop			@ (mov r8, r8)
 80037e8:	e00a      	b.n	8003800 <map_int_pin+0x638>
            break;
 80037ea:	46c0      	nop			@ (mov r8, r8)
 80037ec:	e008      	b.n	8003800 <map_int_pin+0x638>
            break;
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	e006      	b.n	8003800 <map_int_pin+0x638>
            break;
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	e004      	b.n	8003800 <map_int_pin+0x638>
            break;
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	e002      	b.n	8003800 <map_int_pin+0x638>
            break;
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	e000      	b.n	8003800 <map_int_pin+0x638>
            break;
 80037fe:	46c0      	nop			@ (mov r8, r8)
    }
}
 8003800:	46c0      	nop			@ (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b002      	add	sp, #8
 8003806:	bd80      	pop	{r7, pc}

08003808 <set_int_pin_conf>:
            break;
    }
}

static int8_t set_int_pin_conf(struct bma400_int_pin_conf int_conf, struct bma400_dev *dev)
{
 8003808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	8018      	strh	r0, [r3, #0]
 8003812:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8003814:	260f      	movs	r6, #15
 8003816:	19bc      	adds	r4, r7, r6
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	250e      	movs	r5, #14
 800381c:	1979      	adds	r1, r7, r5
 800381e:	2201      	movs	r2, #1
 8003820:	2024      	movs	r0, #36	@ 0x24
 8003822:	f7fe fae1 	bl	8001de8 <bma400_get_regs>
 8003826:	0003      	movs	r3, r0
 8003828:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800382a:	19bb      	adds	r3, r7, r6
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	b25b      	sxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d13a      	bne.n	80038aa <set_int_pin_conf+0xa2>
    {
        if (int_conf.int_chan == BMA400_INT_CHANNEL_1)
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d113      	bne.n	8003864 <set_int_pin_conf+0x5c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
 800383c:	0028      	movs	r0, r5
 800383e:	183b      	adds	r3, r7, r0
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b25b      	sxtb	r3, r3
 8003844:	2206      	movs	r2, #6
 8003846:	4393      	bics	r3, r2
 8003848:	b25a      	sxtb	r2, r3
 800384a:	1d3b      	adds	r3, r7, #4
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	b25b      	sxtb	r3, r3
 8003850:	18db      	adds	r3, r3, r3
 8003852:	b25b      	sxtb	r3, r3
 8003854:	2106      	movs	r1, #6
 8003856:	400b      	ands	r3, r1
 8003858:	b25b      	sxtb	r3, r3
 800385a:	4313      	orrs	r3, r2
 800385c:	b25b      	sxtb	r3, r3
 800385e:	b2da      	uxtb	r2, r3
 8003860:	183b      	adds	r3, r7, r0
 8003862:	701a      	strb	r2, [r3, #0]
        }

        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d113      	bne.n	8003894 <set_int_pin_conf+0x8c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 800386c:	200e      	movs	r0, #14
 800386e:	183b      	adds	r3, r7, r0
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	b25b      	sxtb	r3, r3
 8003874:	2260      	movs	r2, #96	@ 0x60
 8003876:	4393      	bics	r3, r2
 8003878:	b25a      	sxtb	r2, r3
 800387a:	1d3b      	adds	r3, r7, #4
 800387c:	785b      	ldrb	r3, [r3, #1]
 800387e:	b25b      	sxtb	r3, r3
 8003880:	015b      	lsls	r3, r3, #5
 8003882:	b25b      	sxtb	r3, r3
 8003884:	2160      	movs	r1, #96	@ 0x60
 8003886:	400b      	ands	r3, r1
 8003888:	b25b      	sxtb	r3, r3
 800388a:	4313      	orrs	r3, r2
 800388c:	b25b      	sxtb	r3, r3
 800388e:	b2da      	uxtb	r2, r3
 8003890:	183b      	adds	r3, r7, r0
 8003892:	701a      	strb	r2, [r3, #0]
        }

        /* Set the configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8003894:	230f      	movs	r3, #15
 8003896:	18fc      	adds	r4, r7, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	220e      	movs	r2, #14
 800389c:	18b9      	adds	r1, r7, r2
 800389e:	2201      	movs	r2, #1
 80038a0:	2024      	movs	r0, #36	@ 0x24
 80038a2:	f7fe fa23 	bl	8001cec <bma400_set_regs>
 80038a6:	0003      	movs	r3, r0
 80038a8:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80038aa:	230f      	movs	r3, #15
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	b25b      	sxtb	r3, r3
}
 80038b2:	0018      	movs	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b005      	add	sp, #20
 80038b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038ba <set_fifo_conf>:

    return rslt;
}

static int8_t set_fifo_conf(const struct bma400_fifo_conf *fifo_conf, struct bma400_dev *dev)
{
 80038ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3];
    uint8_t sens_data[3];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80038c4:	250f      	movs	r5, #15
 80038c6:	197c      	adds	r4, r7, r5
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	0018      	movs	r0, r3
 80038cc:	f7fe fd7e 	bl	80023cc <null_ptr_check>
 80038d0:	0003      	movs	r3, r0
 80038d2:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 80038d4:	197b      	adds	r3, r7, r5
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d15b      	bne.n	8003996 <set_fifo_conf+0xdc>
    {
        /* Get the FIFO configurations and water-mark
         * values from the sensor
         */
        rslt = bma400_get_regs(BMA400_REG_FIFO_CONFIG_0, sens_data, 3, dev);
 80038de:	197c      	adds	r4, r7, r5
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2608      	movs	r6, #8
 80038e4:	19b9      	adds	r1, r7, r6
 80038e6:	2203      	movs	r2, #3
 80038e8:	2026      	movs	r0, #38	@ 0x26
 80038ea:	f7fe fa7d 	bl	8001de8 <bma400_get_regs>
 80038ee:	0003      	movs	r3, r0
 80038f0:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 80038f2:	197b      	adds	r3, r7, r5
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b25b      	sxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d14c      	bne.n	8003996 <set_fifo_conf+0xdc>
        {
            /* FIFO configurations */
            data_array[0] = fifo_conf->conf_regs;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	781a      	ldrb	r2, [r3, #0]
 8003900:	210c      	movs	r1, #12
 8003902:	187b      	adds	r3, r7, r1
 8003904:	701a      	strb	r2, [r3, #0]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	785b      	ldrb	r3, [r3, #1]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10c      	bne.n	8003928 <set_fifo_conf+0x6e>
            {
                /* Disable the selected interrupt status */
                data_array[0] = sens_data[0] & (~data_array[0]);
 800390e:	19bb      	adds	r3, r7, r6
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b25b      	sxtb	r3, r3
 8003914:	187a      	adds	r2, r7, r1
 8003916:	7812      	ldrb	r2, [r2, #0]
 8003918:	b252      	sxtb	r2, r2
 800391a:	43d2      	mvns	r2, r2
 800391c:	b252      	sxtb	r2, r2
 800391e:	4013      	ands	r3, r2
 8003920:	b25b      	sxtb	r3, r3
 8003922:	b2da      	uxtb	r2, r3
 8003924:	187b      	adds	r3, r7, r1
 8003926:	701a      	strb	r2, [r3, #0]
            }

            /* FIFO water-mark values */
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	885b      	ldrh	r3, [r3, #2]
 800392c:	b2da      	uxtb	r2, r3
 800392e:	210c      	movs	r1, #12
 8003930:	187b      	adds	r3, r7, r1
 8003932:	705a      	strb	r2, [r3, #1]
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	885b      	ldrh	r3, [r3, #2]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	b29b      	uxth	r3, r3
 800393c:	b2da      	uxtb	r2, r3
 800393e:	187b      	adds	r3, r7, r1
 8003940:	709a      	strb	r2, [r3, #2]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 8003942:	187b      	adds	r3, r7, r1
 8003944:	789b      	ldrb	r3, [r3, #2]
 8003946:	2207      	movs	r2, #7
 8003948:	4013      	ands	r3, r2
 800394a:	b2da      	uxtb	r2, r3
 800394c:	187b      	adds	r3, r7, r1
 800394e:	709a      	strb	r2, [r3, #2]
            if ((data_array[1] == sens_data[1]) && (data_array[2] == sens_data[2]))
 8003950:	187b      	adds	r3, r7, r1
 8003952:	785a      	ldrb	r2, [r3, #1]
 8003954:	2008      	movs	r0, #8
 8003956:	183b      	adds	r3, r7, r0
 8003958:	785b      	ldrb	r3, [r3, #1]
 800395a:	429a      	cmp	r2, r3
 800395c:	d110      	bne.n	8003980 <set_fifo_conf+0xc6>
 800395e:	187b      	adds	r3, r7, r1
 8003960:	789a      	ldrb	r2, [r3, #2]
 8003962:	183b      	adds	r3, r7, r0
 8003964:	789b      	ldrb	r3, [r3, #2]
 8003966:	429a      	cmp	r2, r3
 8003968:	d10a      	bne.n	8003980 <set_fifo_conf+0xc6>
            {
                /* Set the FIFO configurations in the
                 * sensor excluding the watermark value
                 */
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 1, dev);
 800396a:	230f      	movs	r3, #15
 800396c:	18fc      	adds	r4, r7, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	1879      	adds	r1, r7, r1
 8003972:	2201      	movs	r2, #1
 8003974:	2026      	movs	r0, #38	@ 0x26
 8003976:	f7fe f9b9 	bl	8001cec <bma400_set_regs>
 800397a:	0003      	movs	r3, r0
 800397c:	7023      	strb	r3, [r4, #0]
 800397e:	e00a      	b.n	8003996 <set_fifo_conf+0xdc>
            }
            else
            {
                /* Set the FIFO configurations in the sensor*/
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 3, dev);
 8003980:	230f      	movs	r3, #15
 8003982:	18fc      	adds	r4, r7, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	220c      	movs	r2, #12
 8003988:	18b9      	adds	r1, r7, r2
 800398a:	2203      	movs	r2, #3
 800398c:	2026      	movs	r0, #38	@ 0x26
 800398e:	f7fe f9ad 	bl	8001cec <bma400_set_regs>
 8003992:	0003      	movs	r3, r0
 8003994:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8003996:	230f      	movs	r3, #15
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b25b      	sxtb	r3, r3
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b005      	add	sp, #20
 80039a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039a6 <user_i2c_read>:

    return rslt;
}

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b08a      	sub	sp, #40	@ 0x28
 80039aa:	af04      	add	r7, sp, #16
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	210f      	movs	r1, #15
 80039b4:	187b      	adds	r3, r7, r1
 80039b6:	1c02      	adds	r2, r0, #0
 80039b8:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Read(hi2c, BMA400_I2C_ADDR, reg_addr,
 80039be:	187b      	adds	r3, r7, r1
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b299      	uxth	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	6978      	ldr	r0, [r7, #20]
 80039ca:	2201      	movs	r2, #1
 80039cc:	4252      	negs	r2, r2
 80039ce:	9202      	str	r2, [sp, #8]
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2301      	movs	r3, #1
 80039d8:	000a      	movs	r2, r1
 80039da:	2128      	movs	r1, #40	@ 0x28
 80039dc:	f001 fa52 	bl	8004e84 <HAL_I2C_Mem_Read>
 80039e0:	1e03      	subs	r3, r0, #0
 80039e2:	d101      	bne.n	80039e8 <user_i2c_read+0x42>
                         I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e001      	b.n	80039ec <user_i2c_read+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 80039e8:	2302      	movs	r3, #2
 80039ea:	425b      	negs	r3, r3
    }
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b006      	add	sp, #24
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	@ 0x28
 80039f8:	af04      	add	r7, sp, #16
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	210f      	movs	r1, #15
 8003a02:	187b      	adds	r3, r7, r1
 8003a04:	1c02      	adds	r2, r0, #0
 8003a06:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Write(hi2c, BMA400_I2C_ADDR, reg_addr,
 8003a0c:	187b      	adds	r3, r7, r1
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	b299      	uxth	r1, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	6978      	ldr	r0, [r7, #20]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4252      	negs	r2, r2
 8003a1c:	9202      	str	r2, [sp, #8]
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	2301      	movs	r3, #1
 8003a26:	000a      	movs	r2, r1
 8003a28:	2128      	movs	r1, #40	@ 0x28
 8003a2a:	f001 f8fd 	bl	8004c28 <HAL_I2C_Mem_Write>
 8003a2e:	1e03      	subs	r3, r0, #0
 8003a30:	d101      	bne.n	8003a36 <user_i2c_write+0x42>
                          I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e001      	b.n	8003a3a <user_i2c_write+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 8003a36:	2302      	movs	r3, #2
 8003a38:	425b      	negs	r3, r3
    }
}
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b006      	add	sp, #24
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
    // Zakładamy, że potrzebne opóźnienia mają ≥ 1000us (1ms)
    HAL_Delay(period / 1000);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	22fa      	movs	r2, #250	@ 0xfa
 8003a50:	0091      	lsls	r1, r2, #2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fc fb6a 	bl	800012c <__udivsi3>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 fd88 	bl	8004570 <HAL_Delay>

    // Jeśli potrzebujesz dokładniejszych opóźnień — patrz niżej
}
 8003a60:	46c0      	nop			@ (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b002      	add	sp, #8
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b08b      	sub	sp, #44	@ 0x2c
 8003a6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6e:	2414      	movs	r4, #20
 8003a70:	193b      	adds	r3, r7, r4
 8003a72:	0018      	movs	r0, r3
 8003a74:	2314      	movs	r3, #20
 8003a76:	001a      	movs	r2, r3
 8003a78:	2100      	movs	r1, #0
 8003a7a:	f003 fa03 	bl	8006e84 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a7e:	4b44      	ldr	r3, [pc, #272]	@ (8003b90 <MX_GPIO_Init+0x128>)
 8003a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a82:	4b43      	ldr	r3, [pc, #268]	@ (8003b90 <MX_GPIO_Init+0x128>)
 8003a84:	2104      	movs	r1, #4
 8003a86:	430a      	orrs	r2, r1
 8003a88:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a8a:	4b41      	ldr	r3, [pc, #260]	@ (8003b90 <MX_GPIO_Init+0x128>)
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8e:	2204      	movs	r2, #4
 8003a90:	4013      	ands	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a96:	4b3e      	ldr	r3, [pc, #248]	@ (8003b90 <MX_GPIO_Init+0x128>)
 8003a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b90 <MX_GPIO_Init+0x128>)
 8003a9c:	2120      	movs	r1, #32
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8003b90 <MX_GPIO_Init+0x128>)
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aae:	4b38      	ldr	r3, [pc, #224]	@ (8003b90 <MX_GPIO_Init+0x128>)
 8003ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ab2:	4b37      	ldr	r3, [pc, #220]	@ (8003b90 <MX_GPIO_Init+0x128>)
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003aba:	4b35      	ldr	r3, [pc, #212]	@ (8003b90 <MX_GPIO_Init+0x128>)
 8003abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac6:	4b32      	ldr	r3, [pc, #200]	@ (8003b90 <MX_GPIO_Init+0x128>)
 8003ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aca:	4b31      	ldr	r3, [pc, #196]	@ (8003b90 <MX_GPIO_Init+0x128>)
 8003acc:	2102      	movs	r1, #2
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8003b90 <MX_GPIO_Init+0x128>)
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	4013      	ands	r3, r2
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_IO_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003ade:	23d0      	movs	r3, #208	@ 0xd0
 8003ae0:	0059      	lsls	r1, r3, #1
 8003ae2:	23a0      	movs	r3, #160	@ 0xa0
 8003ae4:	05db      	lsls	r3, r3, #23
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f000 ffd9 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8003aee:	193b      	adds	r3, r7, r4
 8003af0:	2204      	movs	r2, #4
 8003af2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003af4:	193b      	adds	r3, r7, r4
 8003af6:	2200      	movs	r2, #0
 8003af8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	193b      	adds	r3, r7, r4
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8003b00:	193b      	adds	r3, r7, r4
 8003b02:	4a24      	ldr	r2, [pc, #144]	@ (8003b94 <MX_GPIO_Init+0x12c>)
 8003b04:	0019      	movs	r1, r3
 8003b06:	0010      	movs	r0, r2
 8003b08:	f000 fe60 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pin : INT0_Pin */
  GPIO_InitStruct.Pin = INT0_Pin;
 8003b0c:	193b      	adds	r3, r7, r4
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b12:	193b      	adds	r3, r7, r4
 8003b14:	4a20      	ldr	r2, [pc, #128]	@ (8003b98 <MX_GPIO_Init+0x130>)
 8003b16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	193b      	adds	r3, r7, r4
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT0_GPIO_Port, &GPIO_InitStruct);
 8003b1e:	193a      	adds	r2, r7, r4
 8003b20:	23a0      	movs	r3, #160	@ 0xa0
 8003b22:	05db      	lsls	r3, r3, #23
 8003b24:	0011      	movs	r1, r2
 8003b26:	0018      	movs	r0, r3
 8003b28:	f000 fe50 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_IO_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = EN_IO_Pin|LED1_Pin|LED2_Pin;
 8003b2c:	0021      	movs	r1, r4
 8003b2e:	187b      	adds	r3, r7, r1
 8003b30:	22d0      	movs	r2, #208	@ 0xd0
 8003b32:	0052      	lsls	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b36:	000c      	movs	r4, r1
 8003b38:	193b      	adds	r3, r7, r4
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	193b      	adds	r3, r7, r4
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4a:	193a      	adds	r2, r7, r4
 8003b4c:	23a0      	movs	r3, #160	@ 0xa0
 8003b4e:	05db      	lsls	r3, r3, #23
 8003b50:	0011      	movs	r1, r2
 8003b52:	0018      	movs	r0, r3
 8003b54:	f000 fe3a 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8003b58:	193b      	adds	r3, r7, r4
 8003b5a:	2240      	movs	r2, #64	@ 0x40
 8003b5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b5e:	193b      	adds	r3, r7, r4
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b64:	193b      	adds	r3, r7, r4
 8003b66:	2201      	movs	r2, #1
 8003b68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8003b6a:	193a      	adds	r2, r7, r4
 8003b6c:	23a0      	movs	r3, #160	@ 0xa0
 8003b6e:	05db      	lsls	r3, r3, #23
 8003b70:	0011      	movs	r1, r2
 8003b72:	0018      	movs	r0, r3
 8003b74:	f000 fe2a 	bl	80047cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	2005      	movs	r0, #5
 8003b7e:	f000 fdf3 	bl	8004768 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003b82:	2005      	movs	r0, #5
 8003b84:	f000 fe05 	bl	8004792 <HAL_NVIC_EnableIRQ>

}
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b00b      	add	sp, #44	@ 0x2c
 8003b8e:	bd90      	pop	{r4, r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	50001400 	.word	0x50001400
 8003b98:	10110000 	.word	0x10110000

08003b9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c10 <MX_I2C1_Init+0x74>)
 8003ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c14 <MX_I2C1_Init+0x78>)
 8003ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8003ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c10 <MX_I2C1_Init+0x74>)
 8003ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c18 <MX_I2C1_Init+0x7c>)
 8003baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003bac:	4b18      	ldr	r3, [pc, #96]	@ (8003c10 <MX_I2C1_Init+0x74>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bb2:	4b17      	ldr	r3, [pc, #92]	@ (8003c10 <MX_I2C1_Init+0x74>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bb8:	4b15      	ldr	r3, [pc, #84]	@ (8003c10 <MX_I2C1_Init+0x74>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003bbe:	4b14      	ldr	r3, [pc, #80]	@ (8003c10 <MX_I2C1_Init+0x74>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003bc4:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <MX_I2C1_Init+0x74>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bca:	4b11      	ldr	r3, [pc, #68]	@ (8003c10 <MX_I2C1_Init+0x74>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <MX_I2C1_Init+0x74>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c10 <MX_I2C1_Init+0x74>)
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 ff7f 	bl	8004adc <HAL_I2C_Init>
 8003bde:	1e03      	subs	r3, r0, #0
 8003be0:	d001      	beq.n	8003be6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003be2:	f000 fa6b 	bl	80040bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003be6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c10 <MX_I2C1_Init+0x74>)
 8003be8:	2100      	movs	r1, #0
 8003bea:	0018      	movs	r0, r3
 8003bec:	f001 fd7a 	bl	80056e4 <HAL_I2CEx_ConfigAnalogFilter>
 8003bf0:	1e03      	subs	r3, r0, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003bf4:	f000 fa62 	bl	80040bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003bf8:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <MX_I2C1_Init+0x74>)
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f001 fdbd 	bl	800577c <HAL_I2CEx_ConfigDigitalFilter>
 8003c02:	1e03      	subs	r3, r0, #0
 8003c04:	d001      	beq.n	8003c0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003c06:	f000 fa59 	bl	80040bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000078 	.word	0x20000078
 8003c14:	40005400 	.word	0x40005400
 8003c18:	00402d41 	.word	0x00402d41

08003c1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b091      	sub	sp, #68	@ 0x44
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	232c      	movs	r3, #44	@ 0x2c
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	0018      	movs	r0, r3
 8003c2a:	2314      	movs	r3, #20
 8003c2c:	001a      	movs	r2, r3
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f003 f928 	bl	8006e84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c34:	2410      	movs	r4, #16
 8003c36:	193b      	adds	r3, r7, r4
 8003c38:	0018      	movs	r0, r3
 8003c3a:	231c      	movs	r3, #28
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	2100      	movs	r1, #0
 8003c40:	f003 f920 	bl	8006e84 <memset>
  if(i2cHandle->Instance==I2C1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a22      	ldr	r2, [pc, #136]	@ (8003cd4 <HAL_I2C_MspInit+0xb8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d13d      	bne.n	8003cca <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c4e:	193b      	adds	r3, r7, r4
 8003c50:	2202      	movs	r2, #2
 8003c52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c54:	193b      	adds	r3, r7, r4
 8003c56:	2200      	movs	r2, #0
 8003c58:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c5a:	193b      	adds	r3, r7, r4
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f002 f95f 	bl	8005f20 <HAL_RCCEx_PeriphCLKConfig>
 8003c62:	1e03      	subs	r3, r0, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003c66:	f000 fa29 	bl	80040bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd8 <HAL_I2C_MspInit+0xbc>)
 8003c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd8 <HAL_I2C_MspInit+0xbc>)
 8003c70:	2102      	movs	r1, #2
 8003c72:	430a      	orrs	r2, r1
 8003c74:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c76:	4b18      	ldr	r3, [pc, #96]	@ (8003cd8 <HAL_I2C_MspInit+0xbc>)
 8003c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c82:	212c      	movs	r1, #44	@ 0x2c
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	22c0      	movs	r2, #192	@ 0xc0
 8003c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	2212      	movs	r2, #18
 8003c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	2201      	movs	r2, #1
 8003c94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c96:	187b      	adds	r3, r7, r1
 8003c98:	2200      	movs	r2, #0
 8003c9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	2206      	movs	r2, #6
 8003ca0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8003cdc <HAL_I2C_MspInit+0xc0>)
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	0010      	movs	r0, r2
 8003caa:	f000 fd8f 	bl	80047cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cae:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd8 <HAL_I2C_MspInit+0xbc>)
 8003cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cb2:	4b09      	ldr	r3, [pc, #36]	@ (8003cd8 <HAL_I2C_MspInit+0xbc>)
 8003cb4:	2180      	movs	r1, #128	@ 0x80
 8003cb6:	0389      	lsls	r1, r1, #14
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <HAL_I2C_MspInit+0xbc>)
 8003cbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cc0:	2380      	movs	r3, #128	@ 0x80
 8003cc2:	039b      	lsls	r3, r3, #14
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b011      	add	sp, #68	@ 0x44
 8003cd0:	bd90      	pop	{r4, r7, pc}
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	40005400 	.word	0x40005400
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	50000400 	.word	0x50000400

08003ce0 <enter_stop_mode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enter_stop_mode(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
    HAL_SuspendTick();
 8003ce4:	f000 fc68 	bl	80045b8 <HAL_SuspendTick>
    HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003ce8:	2101      	movs	r1, #1
 8003cea:	2000      	movs	r0, #0
 8003cec:	f001 fd92 	bl	8005814 <HAL_PWR_EnterSTOPMode>
    HAL_ResumeTick();
 8003cf0:	f000 fc70 	bl	80045d4 <HAL_ResumeTick>

    was_in_stop = true;	// dbg
 8003cf4:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <enter_stop_mode+0x2c>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]

    // re-init peripherals
    MX_GPIO_Init();
 8003cfa:	f7ff feb5 	bl	8003a68 <MX_GPIO_Init>
    MX_I2C1_Init();
 8003cfe:	f7ff ff4d 	bl	8003b9c <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8003d02:	f000 fadb 	bl	80042bc <MX_USART1_UART_Init>
}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	200000cd 	.word	0x200000cd

08003d10 <configure_bma400>:

void configure_bma400(struct bma400_dev *dev)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b090      	sub	sp, #64	@ 0x40
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
    uint8_t rslt;
    struct bma400_device_conf dev_conf[3];
    struct bma400_sensor_conf sensor_conf;

    // Set initial power mode to low power
    rslt = bma400_set_power_mode(BMA400_MODE_LOW_POWER, dev);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f7fe f8d1 	bl	8001ec4 <bma400_set_power_mode>
 8003d22:	0003      	movs	r3, r0
 8003d24:	001a      	movs	r2, r3
 8003d26:	213f      	movs	r1, #63	@ 0x3f
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <configure_bma400+0x28>
    {
        Error_Handler();
 8003d34:	f000 f9c2 	bl	80040bc <Error_Handler>
    }

    // auto low power after movement stops (1 s)
    dev_conf[0].type = BMA400_AUTO_LOW_POWER;
 8003d38:	2120      	movs	r1, #32
 8003d3a:	187b      	adds	r3, r7, r1
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	701a      	strb	r2, [r3, #0]
    dev_conf[0].param.auto_lp.auto_low_power_trigger =
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	220e      	movs	r2, #14
 8003d44:	709a      	strb	r2, [r3, #2]
        BMA400_AUTO_LP_GEN1_TRIGGER | BMA400_AUTO_LP_TIMEOUT_EN | BMA400_AUTO_LP_TIME_RESET_EN;
    dev_conf[0].param.auto_lp.auto_lp_timeout_threshold = 400; // 400 × 2.5 ms = 1 s
 8003d46:	187b      	adds	r3, r7, r1
 8003d48:	22c8      	movs	r2, #200	@ 0xc8
 8003d4a:	0052      	lsls	r2, r2, #1
 8003d4c:	809a      	strh	r2, [r3, #4]

    // wake-up interrupt on motion detection on Z axe
    dev_conf[1].type = BMA400_AUTOWAKEUP_INT;
 8003d4e:	187b      	adds	r3, r7, r1
 8003d50:	2201      	movs	r2, #1
 8003d52:	729a      	strb	r2, [r3, #10]
    dev_conf[1].param.wakeup.wakeup_ref_update = BMA400_UPDATE_ONE_TIME;
 8003d54:	187b      	adds	r3, r7, r1
 8003d56:	2201      	movs	r2, #1
 8003d58:	731a      	strb	r2, [r3, #12]
    dev_conf[1].param.wakeup.sample_count = BMA400_SAMPLE_COUNT_1;
 8003d5a:	187b      	adds	r3, r7, r1
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	735a      	strb	r2, [r3, #13]
    dev_conf[1].param.wakeup.wakeup_axes_en = BMA400_AXIS_Z_EN;
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	2204      	movs	r2, #4
 8003d64:	739a      	strb	r2, [r3, #14]
    dev_conf[1].param.wakeup.int_wkup_threshold = 3;	// mg threshold
 8003d66:	187b      	adds	r3, r7, r1
 8003d68:	2203      	movs	r2, #3
 8003d6a:	73da      	strb	r2, [r3, #15]
    dev_conf[1].param.wakeup.int_wkup_ref_z = 0;
 8003d6c:	187b      	adds	r3, r7, r1
 8003d6e:	2200      	movs	r2, #0
 8003d70:	749a      	strb	r2, [r3, #18]
    dev_conf[1].param.wakeup.int_chan = BMA400_INT_CHANNEL_1;
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	2201      	movs	r2, #1
 8003d76:	74da      	strb	r2, [r3, #19]

    dev_conf[2].type = BMA400_INT_PIN_CONF;
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	751a      	strb	r2, [r3, #20]
    dev_conf[2].param.int_conf.int_chan = BMA400_INT_CHANNEL_1;
 8003d7e:	187b      	adds	r3, r7, r1
 8003d80:	2201      	movs	r2, #1
 8003d82:	759a      	strb	r2, [r3, #22]
    dev_conf[2].param.int_conf.pin_conf = BMA400_INT_OPEN_DRAIN_ACTIVE_0;
 8003d84:	187b      	adds	r3, r7, r1
 8003d86:	2202      	movs	r2, #2
 8003d88:	75da      	strb	r2, [r3, #23]

    rslt = bma400_set_device_conf(dev_conf, 3, dev);
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	2103      	movs	r1, #3
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7fe f9df 	bl	8002154 <bma400_set_device_conf>
 8003d96:	0003      	movs	r3, r0
 8003d98:	001a      	movs	r2, r3
 8003d9a:	213f      	movs	r1, #63	@ 0x3f
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <configure_bma400+0x9c>
    {
        Error_Handler();
 8003da8:	f000 f988 	bl	80040bc <Error_Handler>
    }

    // configure accelerometer
    sensor_conf.type = BMA400_ACCEL;
 8003dac:	210c      	movs	r1, #12
 8003dae:	187b      	adds	r3, r7, r1
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
    sensor_conf.param.accel.odr = BMA400_ODR_100HZ;
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	2208      	movs	r2, #8
 8003db8:	709a      	strb	r2, [r3, #2]
    sensor_conf.param.accel.range = BMA400_RANGE_2G;
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	70da      	strb	r2, [r3, #3]
    sensor_conf.param.accel.data_src = BMA400_DATA_SRC_ACCEL_FILT_LP;
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	711a      	strb	r2, [r3, #4]
    sensor_conf.param.accel.osr = BMA400_ACCEL_OSR_SETTING_3;
 8003dc6:	187b      	adds	r3, r7, r1
 8003dc8:	2203      	movs	r2, #3
 8003dca:	715a      	strb	r2, [r3, #5]
    sensor_conf.param.accel.filt1_bw = BMA400_ACCEL_FILT1_BW_0;
 8003dcc:	187b      	adds	r3, r7, r1
 8003dce:	2200      	movs	r2, #0
 8003dd0:	71da      	strb	r2, [r3, #7]

    rslt = bma400_set_sensor_conf(&sensor_conf, 1, dev);
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	187b      	adds	r3, r7, r1
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7fe f93c 	bl	8002056 <bma400_set_sensor_conf>
 8003dde:	0003      	movs	r3, r0
 8003de0:	001a      	movs	r2, r3
 8003de2:	213f      	movs	r1, #63	@ 0x3f
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK) Error_Handler();
 8003de8:	187b      	adds	r3, r7, r1
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <configure_bma400+0xe4>
 8003df0:	f000 f964 	bl	80040bc <Error_Handler>

    // enable auto wakeup
    rslt = set_auto_wakeup(BMA400_ENABLE, dev);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	0019      	movs	r1, r3
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f7fe fdb6 	bl	800296a <set_auto_wakeup>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	001a      	movs	r2, r3
 8003e02:	213f      	movs	r1, #63	@ 0x3f
 8003e04:	187b      	adds	r3, r7, r1
 8003e06:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <configure_bma400+0x104>
    {
        Error_Handler();
 8003e10:	f000 f954 	bl	80040bc <Error_Handler>
    }
}
 8003e14:	46c0      	nop			@ (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b010      	add	sp, #64	@ 0x40
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <calculate_gate_position>:

float calculate_gate_position(int16_t acc_z)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	0002      	movs	r2, r0
 8003e24:	1dbb      	adds	r3, r7, #6
 8003e26:	801a      	strh	r2, [r3, #0]
    // normalize Z axis data to acceleration in g (+/-2g range, 12-bit res)
    float acc_z_g = (float)acc_z / 955.0f;				// theoretically should be 1024 for 1g, but 958 is the actual max value observed on acc_z
 8003e28:	1dbb      	adds	r3, r7, #6
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	5e9b      	ldrsh	r3, [r3, r2]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7fd fae0 	bl	80013f4 <__aeabi_i2f>
 8003e34:	1c03      	adds	r3, r0, #0
 8003e36:	4927      	ldr	r1, [pc, #156]	@ (8003ed4 <calculate_gate_position+0xb8>)
 8003e38:	1c18      	adds	r0, r3, #0
 8003e3a:	f7fc fd19 	bl	8000870 <__aeabi_fdiv>
 8003e3e:	1c03      	adds	r3, r0, #0
 8003e40:	613b      	str	r3, [r7, #16]
    acc_z_g = fmaxf(fminf(acc_z_g, 1.0f), -1.0f);		// set range (in case of noise)
 8003e42:	22fe      	movs	r2, #254	@ 0xfe
 8003e44:	0592      	lsls	r2, r2, #22
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1c11      	adds	r1, r2, #0
 8003e4a:	1c18      	adds	r0, r3, #0
 8003e4c:	f003 fcd2 	bl	80077f4 <fminf>
 8003e50:	1c03      	adds	r3, r0, #0
 8003e52:	4a21      	ldr	r2, [pc, #132]	@ (8003ed8 <calculate_gate_position+0xbc>)
 8003e54:	1c11      	adds	r1, r2, #0
 8003e56:	1c18      	adds	r0, r3, #0
 8003e58:	f003 fcb6 	bl	80077c8 <fmaxf>
 8003e5c:	1c03      	adds	r3, r0, #0
 8003e5e:	613b      	str	r3, [r7, #16]

    float angle_rad = acosf(acc_z_g);  					// angle = arccos(Z/g) - calculate angle in radians
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1c18      	adds	r0, r3, #0
 8003e64:	f003 fc88 	bl	8007778 <acosf>
 8003e68:	1c03      	adds	r3, r0, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
    float angle_deg = angle_rad * (180.0f / M_PI);		// convert to degrees
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7fd fdf7 	bl	8001a60 <__aeabi_f2d>
 8003e72:	4a1a      	ldr	r2, [pc, #104]	@ (8003edc <calculate_gate_position+0xc0>)
 8003e74:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee0 <calculate_gate_position+0xc4>)
 8003e76:	f7fd fb0d 	bl	8001494 <__aeabi_dmul>
 8003e7a:	0002      	movs	r2, r0
 8003e7c:	000b      	movs	r3, r1
 8003e7e:	0010      	movs	r0, r2
 8003e80:	0019      	movs	r1, r3
 8003e82:	f7fd fe35 	bl	8001af0 <__aeabi_d2f>
 8003e86:	1c03      	adds	r3, r0, #0
 8003e88:	617b      	str	r3, [r7, #20]
    if (angle_deg > 90.0f) angle_deg = 90.0f;			// limit to 0–90 degree
 8003e8a:	4916      	ldr	r1, [pc, #88]	@ (8003ee4 <calculate_gate_position+0xc8>)
 8003e8c:	6978      	ldr	r0, [r7, #20]
 8003e8e:	f7fc fae9 	bl	8000464 <__aeabi_fcmpgt>
 8003e92:	1e03      	subs	r3, r0, #0
 8003e94:	d001      	beq.n	8003e9a <calculate_gate_position+0x7e>
 8003e96:	4b13      	ldr	r3, [pc, #76]	@ (8003ee4 <calculate_gate_position+0xc8>)
 8003e98:	617b      	str	r3, [r7, #20]

    return (int)((1.0f - angle_deg / 90.0f) * 100.0f);	// convert to %
 8003e9a:	4912      	ldr	r1, [pc, #72]	@ (8003ee4 <calculate_gate_position+0xc8>)
 8003e9c:	6978      	ldr	r0, [r7, #20]
 8003e9e:	f7fc fce7 	bl	8000870 <__aeabi_fdiv>
 8003ea2:	1c03      	adds	r3, r0, #0
 8003ea4:	1c19      	adds	r1, r3, #0
 8003ea6:	20fe      	movs	r0, #254	@ 0xfe
 8003ea8:	0580      	lsls	r0, r0, #22
 8003eaa:	f7fd f809 	bl	8000ec0 <__aeabi_fsub>
 8003eae:	1c03      	adds	r3, r0, #0
 8003eb0:	490d      	ldr	r1, [pc, #52]	@ (8003ee8 <calculate_gate_position+0xcc>)
 8003eb2:	1c18      	adds	r0, r3, #0
 8003eb4:	f7fc feaa 	bl	8000c0c <__aeabi_fmul>
 8003eb8:	1c03      	adds	r3, r0, #0
 8003eba:	1c18      	adds	r0, r3, #0
 8003ebc:	f7fd fa7a 	bl	80013b4 <__aeabi_f2iz>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7fd fa96 	bl	80013f4 <__aeabi_i2f>
 8003ec8:	1c03      	adds	r3, r0, #0
}
 8003eca:	1c18      	adds	r0, r3, #0
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b006      	add	sp, #24
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	46c0      	nop			@ (mov r8, r8)
 8003ed4:	446ec000 	.word	0x446ec000
 8003ed8:	bf800000 	.word	0xbf800000
 8003edc:	1a63c1f8 	.word	0x1a63c1f8
 8003ee0:	404ca5dc 	.word	0x404ca5dc
 8003ee4:	42b40000 	.word	0x42b40000
 8003ee8:	42c80000 	.word	0x42c80000

08003eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003eec:	b5b0      	push	{r4, r5, r7, lr}
 8003eee:	b08e      	sub	sp, #56	@ 0x38
 8003ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	struct bma400_dev bma400;

	bma400.intf = BMA400_I2C_INTF;
 8003ef2:	2114      	movs	r1, #20
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	705a      	strb	r2, [r3, #1]
	bma400.intf_ptr = &hi2c1;
 8003efa:	000c      	movs	r4, r1
 8003efc:	193b      	adds	r3, r7, r4
 8003efe:	4a37      	ldr	r2, [pc, #220]	@ (8003fdc <main+0xf0>)
 8003f00:	605a      	str	r2, [r3, #4]
	bma400.read = user_i2c_read;
 8003f02:	193b      	adds	r3, r7, r4
 8003f04:	4a36      	ldr	r2, [pc, #216]	@ (8003fe0 <main+0xf4>)
 8003f06:	60da      	str	r2, [r3, #12]
	bma400.write = user_i2c_write;
 8003f08:	193b      	adds	r3, r7, r4
 8003f0a:	4a36      	ldr	r2, [pc, #216]	@ (8003fe4 <main+0xf8>)
 8003f0c:	611a      	str	r2, [r3, #16]
	bma400.delay_us = user_delay_us;
 8003f0e:	193b      	adds	r3, r7, r4
 8003f10:	4a35      	ldr	r2, [pc, #212]	@ (8003fe8 <main+0xfc>)
 8003f12:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f14:	f000 faaf 	bl	8004476 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f18:	f000 f870 	bl	8003ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f1c:	f7ff fda4 	bl	8003a68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003f20:	f7ff fe3c 	bl	8003b9c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003f24:	f000 f9ca 	bl	80042bc <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8003f28:	f000 f97c 	bl	8004224 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  bma400_init(&bma400);
 8003f2c:	193b      	adds	r3, r7, r4
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7fd fe7e 	bl	8001c30 <bma400_init>
  configure_bma400(&bma400);
 8003f34:	193b      	adds	r3, r7, r4
 8003f36:	0018      	movs	r0, r3
 8003f38:	f7ff feea 	bl	8003d10 <configure_bma400>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bma400_get_power_mode(&power_mode, &bma400);	// dbg
 8003f3c:	2414      	movs	r4, #20
 8003f3e:	193a      	adds	r2, r7, r4
 8003f40:	4b2a      	ldr	r3, [pc, #168]	@ (8003fec <main+0x100>)
 8003f42:	0011      	movs	r1, r2
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7fe f81f 	bl	8001f88 <bma400_get_power_mode>

	  if (motion_detected)
 8003f4a:	4b29      	ldr	r3, [pc, #164]	@ (8003ff0 <main+0x104>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d03f      	beq.n	8003fd4 <main+0xe8>
	  {
		  struct bma400_sensor_data data;	// structure for storing data
		  bma400_get_accel_data(BMA400_DATA_ONLY, &data, &bma400);
 8003f54:	193a      	adds	r2, r7, r4
 8003f56:	2508      	movs	r5, #8
 8003f58:	197b      	adds	r3, r7, r5
 8003f5a:	0019      	movs	r1, r3
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f7fe f849 	bl	8001ff4 <bma400_get_accel_data>
		  bma400_get_power_mode(&power_mode, &bma400);	// dbg
 8003f62:	193a      	adds	r2, r7, r4
 8003f64:	4b21      	ldr	r3, [pc, #132]	@ (8003fec <main+0x100>)
 8003f66:	0011      	movs	r1, r2
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7fe f80d 	bl	8001f88 <bma400_get_power_mode>

		  int percent_open = calculate_gate_position(data.z);
 8003f6e:	197b      	adds	r3, r7, r5
 8003f70:	2204      	movs	r2, #4
 8003f72:	5e9b      	ldrsh	r3, [r3, r2]
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7ff ff51 	bl	8003e1c <calculate_gate_position>
 8003f7a:	1c03      	adds	r3, r0, #0
 8003f7c:	1c18      	adds	r0, r3, #0
 8003f7e:	f7fd fa19 	bl	80013b4 <__aeabi_f2iz>
 8003f82:	0003      	movs	r3, r0
 8003f84:	637b      	str	r3, [r7, #52]	@ 0x34

		  HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, SET);	// activate ESP8266
 8003f86:	23a0      	movs	r3, #160	@ 0xa0
 8003f88:	05db      	lsls	r3, r3, #23
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	2120      	movs	r1, #32
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 fd86 	bl	8004aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8003f94:	2064      	movs	r0, #100	@ 0x64
 8003f96:	f000 faeb 	bl	8004570 <HAL_Delay>

		  char msg[4];
		  snprintf(msg, sizeof(msg), "%d\n", percent_open);
 8003f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9c:	4a15      	ldr	r2, [pc, #84]	@ (8003ff4 <main+0x108>)
 8003f9e:	1d38      	adds	r0, r7, #4
 8003fa0:	2104      	movs	r1, #4
 8003fa2:	f002 ff39 	bl	8006e18 <sniprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// send data to esp
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7fc f8ad 	bl	8000108 <strlen>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	425b      	negs	r3, r3
 8003fb6:	1d39      	adds	r1, r7, #4
 8003fb8:	480f      	ldr	r0, [pc, #60]	@ (8003ff8 <main+0x10c>)
 8003fba:	f002 f9bd 	bl	8006338 <HAL_UART_Transmit>

		  HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, RESET);
 8003fbe:	23a0      	movs	r3, #160	@ 0xa0
 8003fc0:	05db      	lsls	r3, r3, #23
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2120      	movs	r1, #32
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f000 fd6a 	bl	8004aa0 <HAL_GPIO_WritePin>

	      motion_detected = false;
 8003fcc:	4b08      	ldr	r3, [pc, #32]	@ (8003ff0 <main+0x104>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e7b3      	b.n	8003f3c <main+0x50>
	  }
	  else
	  {
	      enter_stop_mode();
 8003fd4:	f7ff fe84 	bl	8003ce0 <enter_stop_mode>
	  bma400_get_power_mode(&power_mode, &bma400);	// dbg
 8003fd8:	e7b0      	b.n	8003f3c <main+0x50>
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	20000078 	.word	0x20000078
 8003fe0:	080039a7 	.word	0x080039a7
 8003fe4:	080039f5 	.word	0x080039f5
 8003fe8:	08003a43 	.word	0x08003a43
 8003fec:	200000ce 	.word	0x200000ce
 8003ff0:	200000cc 	.word	0x200000cc
 8003ff4:	08007c20 	.word	0x08007c20
 8003ff8:	20000120 	.word	0x20000120

08003ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b08d      	sub	sp, #52	@ 0x34
 8004000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004002:	2414      	movs	r4, #20
 8004004:	193b      	adds	r3, r7, r4
 8004006:	0018      	movs	r0, r3
 8004008:	231c      	movs	r3, #28
 800400a:	001a      	movs	r2, r3
 800400c:	2100      	movs	r1, #0
 800400e:	f002 ff39 	bl	8006e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004012:	003b      	movs	r3, r7
 8004014:	0018      	movs	r0, r3
 8004016:	2314      	movs	r3, #20
 8004018:	001a      	movs	r2, r3
 800401a:	2100      	movs	r1, #0
 800401c:	f002 ff32 	bl	8006e84 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8004020:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <SystemClock_Config+0x94>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4b1a      	ldr	r3, [pc, #104]	@ (8004090 <SystemClock_Config+0x94>)
 8004026:	2107      	movs	r1, #7
 8004028:	438a      	bics	r2, r1
 800402a:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800402c:	193b      	adds	r3, r7, r4
 800402e:	2202      	movs	r2, #2
 8004030:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004032:	193b      	adds	r3, r7, r4
 8004034:	2280      	movs	r2, #128	@ 0x80
 8004036:	0052      	lsls	r2, r2, #1
 8004038:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800403a:	193b      	adds	r3, r7, r4
 800403c:	2280      	movs	r2, #128	@ 0x80
 800403e:	0152      	lsls	r2, r2, #5
 8004040:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004042:	193b      	adds	r3, r7, r4
 8004044:	2240      	movs	r2, #64	@ 0x40
 8004046:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004048:	193b      	adds	r3, r7, r4
 800404a:	0018      	movs	r0, r3
 800404c:	f001 fc0c 	bl	8005868 <HAL_RCC_OscConfig>
 8004050:	1e03      	subs	r3, r0, #0
 8004052:	d001      	beq.n	8004058 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8004054:	f000 f832 	bl	80040bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004058:	003b      	movs	r3, r7
 800405a:	2207      	movs	r2, #7
 800405c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800405e:	003b      	movs	r3, r7
 8004060:	2200      	movs	r2, #0
 8004062:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004064:	003b      	movs	r3, r7
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800406a:	003b      	movs	r3, r7
 800406c:	2200      	movs	r2, #0
 800406e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8004070:	003b      	movs	r3, r7
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004076:	003b      	movs	r3, r7
 8004078:	2100      	movs	r1, #0
 800407a:	0018      	movs	r0, r3
 800407c:	f001 fdd8 	bl	8005c30 <HAL_RCC_ClockConfig>
 8004080:	1e03      	subs	r3, r0, #0
 8004082:	d001      	beq.n	8004088 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004084:	f000 f81a 	bl	80040bc <Error_Handler>
  }
}
 8004088:	46c0      	nop			@ (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	b00d      	add	sp, #52	@ 0x34
 800408e:	bd90      	pop	{r4, r7, pc}
 8004090:	40022000 	.word	0x40022000

08004094 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	0002      	movs	r2, r0
 800409c:	1dbb      	adds	r3, r7, #6
 800409e:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == GPIO_PIN_0)
 80040a0:	1dbb      	adds	r3, r7, #6
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d102      	bne.n	80040ae <HAL_GPIO_EXTI_Callback+0x1a>
    {
        motion_detected = true;
 80040a8:	4b03      	ldr	r3, [pc, #12]	@ (80040b8 <HAL_GPIO_EXTI_Callback+0x24>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
    }
}
 80040ae:	46c0      	nop			@ (mov r8, r8)
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b002      	add	sp, #8
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	46c0      	nop			@ (mov r8, r8)
 80040b8:	200000cc 	.word	0x200000cc

080040bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040c0:	b672      	cpsid	i
}
 80040c2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	0059      	lsls	r1, r3, #1
 80040c8:	23a0      	movs	r3, #160	@ 0xa0
 80040ca:	05db      	lsls	r3, r3, #23
 80040cc:	2201      	movs	r2, #1
 80040ce:	0018      	movs	r0, r3
 80040d0:	f000 fce6 	bl	8004aa0 <HAL_GPIO_WritePin>
  while (1)
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	e7fd      	b.n	80040d4 <Error_Handler+0x18>

080040d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040de:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <HAL_MspInit+0x50>)
 80040e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040e2:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <HAL_MspInit+0x50>)
 80040e4:	2101      	movs	r1, #1
 80040e6:	430a      	orrs	r2, r1
 80040e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80040ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004128 <HAL_MspInit+0x50>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	2201      	movs	r2, #1
 80040f0:	4013      	ands	r3, r2
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <HAL_MspInit+0x50>)
 80040f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_MspInit+0x50>)
 80040fc:	2180      	movs	r1, #128	@ 0x80
 80040fe:	0549      	lsls	r1, r1, #21
 8004100:	430a      	orrs	r2, r1
 8004102:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004104:	4b08      	ldr	r3, [pc, #32]	@ (8004128 <HAL_MspInit+0x50>)
 8004106:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004108:	2380      	movs	r3, #128	@ 0x80
 800410a:	055b      	lsls	r3, r3, #21
 800410c:	4013      	ands	r3, r2
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8004112:	2008      	movs	r0, #8
 8004114:	f000 fa6c 	bl	80045f0 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8004118:	2010      	movs	r0, #16
 800411a:	f000 fa69 	bl	80045f0 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b002      	add	sp, #8
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	40021000 	.word	0x40021000

0800412c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004130:	46c0      	nop			@ (mov r8, r8)
 8004132:	e7fd      	b.n	8004130 <NMI_Handler+0x4>

08004134 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004138:	46c0      	nop			@ (mov r8, r8)
 800413a:	e7fd      	b.n	8004138 <HardFault_Handler+0x4>

0800413c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004140:	46c0      	nop			@ (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004154:	f000 f9f0 	bl	8004538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004158:	46c0      	nop			@ (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI0_1_IRQn 0 */

  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
	// !!! DELETE LINE ABOVE !!! (automatically generated)
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8004164:	4b0d      	ldr	r3, [pc, #52]	@ (800419c <EXTI0_1_IRQHandler+0x3c>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	4013      	ands	r3, r2
 800416c:	d104      	bne.n	8004178 <EXTI0_1_IRQHandler+0x18>
 800416e:	4b0b      	ldr	r3, [pc, #44]	@ (800419c <EXTI0_1_IRQHandler+0x3c>)
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2201      	movs	r2, #1
 8004174:	4013      	ands	r3, r2
 8004176:	d001      	beq.n	800417c <EXTI0_1_IRQHandler+0x1c>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <EXTI0_1_IRQHandler+0x1e>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d008      	beq.n	8004194 <EXTI0_1_IRQHandler+0x34>
  {
      __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8004182:	4b06      	ldr	r3, [pc, #24]	@ (800419c <EXTI0_1_IRQHandler+0x3c>)
 8004184:	2201      	movs	r2, #1
 8004186:	60da      	str	r2, [r3, #12]
 8004188:	4b04      	ldr	r3, [pc, #16]	@ (800419c <EXTI0_1_IRQHandler+0x3c>)
 800418a:	2201      	movs	r2, #1
 800418c:	611a      	str	r2, [r3, #16]
      HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 800418e:	2001      	movs	r0, #1
 8004190:	f7ff ff80 	bl	8004094 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004194:	46c0      	nop			@ (mov r8, r8)
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	40021800 	.word	0x40021800

080041a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041a8:	4a14      	ldr	r2, [pc, #80]	@ (80041fc <_sbrk+0x5c>)
 80041aa:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <_sbrk+0x60>)
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041b4:	4b13      	ldr	r3, [pc, #76]	@ (8004204 <_sbrk+0x64>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d102      	bne.n	80041c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <_sbrk+0x64>)
 80041be:	4a12      	ldr	r2, [pc, #72]	@ (8004208 <_sbrk+0x68>)
 80041c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041c2:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <_sbrk+0x64>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	18d3      	adds	r3, r2, r3
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d207      	bcs.n	80041e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041d0:	f002 fe60 	bl	8006e94 <__errno>
 80041d4:	0003      	movs	r3, r0
 80041d6:	220c      	movs	r2, #12
 80041d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041da:	2301      	movs	r3, #1
 80041dc:	425b      	negs	r3, r3
 80041de:	e009      	b.n	80041f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041e0:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <_sbrk+0x64>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041e6:	4b07      	ldr	r3, [pc, #28]	@ (8004204 <_sbrk+0x64>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	18d2      	adds	r2, r2, r3
 80041ee:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <_sbrk+0x64>)
 80041f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	0018      	movs	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b006      	add	sp, #24
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20001800 	.word	0x20001800
 8004200:	00000400 	.word	0x00000400
 8004204:	200000d0 	.word	0x200000d0
 8004208:	20000300 	.word	0x20000300

0800420c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004210:	4b03      	ldr	r3, [pc, #12]	@ (8004220 <SystemInit+0x14>)
 8004212:	2280      	movs	r2, #128	@ 0x80
 8004214:	0512      	lsls	r2, r2, #20
 8004216:	609a      	str	r2, [r3, #8]
#endif
}
 8004218:	46c0      	nop			@ (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004228:	4b0e      	ldr	r3, [pc, #56]	@ (8004264 <MX_TIM14_Init+0x40>)
 800422a:	4a0f      	ldr	r2, [pc, #60]	@ (8004268 <MX_TIM14_Init+0x44>)
 800422c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 800422e:	4b0d      	ldr	r3, [pc, #52]	@ (8004264 <MX_TIM14_Init+0x40>)
 8004230:	2263      	movs	r2, #99	@ 0x63
 8004232:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004234:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <MX_TIM14_Init+0x40>)
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 119;
 800423a:	4b0a      	ldr	r3, [pc, #40]	@ (8004264 <MX_TIM14_Init+0x40>)
 800423c:	2277      	movs	r2, #119	@ 0x77
 800423e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004240:	4b08      	ldr	r3, [pc, #32]	@ (8004264 <MX_TIM14_Init+0x40>)
 8004242:	2200      	movs	r2, #0
 8004244:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004246:	4b07      	ldr	r3, [pc, #28]	@ (8004264 <MX_TIM14_Init+0x40>)
 8004248:	2200      	movs	r2, #0
 800424a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800424c:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <MX_TIM14_Init+0x40>)
 800424e:	0018      	movs	r0, r3
 8004250:	f001 ff52 	bl	80060f8 <HAL_TIM_Base_Init>
 8004254:	1e03      	subs	r3, r0, #0
 8004256:	d001      	beq.n	800425c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8004258:	f7ff ff30 	bl	80040bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800425c:	46c0      	nop			@ (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			@ (mov r8, r8)
 8004264:	200000d4 	.word	0x200000d4
 8004268:	40002000 	.word	0x40002000

0800426c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a0e      	ldr	r2, [pc, #56]	@ (80042b4 <HAL_TIM_Base_MspInit+0x48>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d115      	bne.n	80042aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800427e:	4b0e      	ldr	r3, [pc, #56]	@ (80042b8 <HAL_TIM_Base_MspInit+0x4c>)
 8004280:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004282:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <HAL_TIM_Base_MspInit+0x4c>)
 8004284:	2180      	movs	r1, #128	@ 0x80
 8004286:	0209      	lsls	r1, r1, #8
 8004288:	430a      	orrs	r2, r1
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40
 800428c:	4b0a      	ldr	r3, [pc, #40]	@ (80042b8 <HAL_TIM_Base_MspInit+0x4c>)
 800428e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004290:	2380      	movs	r3, #128	@ 0x80
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	4013      	ands	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800429a:	2200      	movs	r2, #0
 800429c:	2100      	movs	r1, #0
 800429e:	2013      	movs	r0, #19
 80042a0:	f000 fa62 	bl	8004768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80042a4:	2013      	movs	r0, #19
 80042a6:	f000 fa74 	bl	8004792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b004      	add	sp, #16
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	40002000 	.word	0x40002000
 80042b8:	40021000 	.word	0x40021000

080042bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042c0:	4b25      	ldr	r3, [pc, #148]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 80042c2:	4a26      	ldr	r2, [pc, #152]	@ (800435c <MX_USART1_UART_Init+0xa0>)
 80042c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042c6:	4b24      	ldr	r3, [pc, #144]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 80042c8:	22e1      	movs	r2, #225	@ 0xe1
 80042ca:	0252      	lsls	r2, r2, #9
 80042cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042ce:	4b22      	ldr	r3, [pc, #136]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042d4:	4b20      	ldr	r3, [pc, #128]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80042da:	4b1f      	ldr	r3, [pc, #124]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 80042dc:	2200      	movs	r2, #0
 80042de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 80042e2:	220c      	movs	r2, #12
 80042e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042f2:	4b19      	ldr	r3, [pc, #100]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80042f8:	4b17      	ldr	r3, [pc, #92]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80042fe:	4b16      	ldr	r3, [pc, #88]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 8004300:	2208      	movs	r2, #8
 8004302:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004304:	4b14      	ldr	r3, [pc, #80]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 8004306:	2280      	movs	r2, #128	@ 0x80
 8004308:	0212      	lsls	r2, r2, #8
 800430a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800430c:	4b12      	ldr	r3, [pc, #72]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 800430e:	0018      	movs	r0, r3
 8004310:	f001 ffbc 	bl	800628c <HAL_UART_Init>
 8004314:	1e03      	subs	r3, r0, #0
 8004316:	d001      	beq.n	800431c <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8004318:	f7ff fed0 	bl	80040bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800431c:	4b0e      	ldr	r3, [pc, #56]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 800431e:	2100      	movs	r1, #0
 8004320:	0018      	movs	r0, r3
 8004322:	f002 fc99 	bl	8006c58 <HAL_UARTEx_SetTxFifoThreshold>
 8004326:	1e03      	subs	r3, r0, #0
 8004328:	d001      	beq.n	800432e <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 800432a:	f7ff fec7 	bl	80040bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800432e:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 8004330:	2100      	movs	r1, #0
 8004332:	0018      	movs	r0, r3
 8004334:	f002 fcd0 	bl	8006cd8 <HAL_UARTEx_SetRxFifoThreshold>
 8004338:	1e03      	subs	r3, r0, #0
 800433a:	d001      	beq.n	8004340 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 800433c:	f7ff febe 	bl	80040bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004340:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <MX_USART1_UART_Init+0x9c>)
 8004342:	0018      	movs	r0, r3
 8004344:	f002 fc4e 	bl	8006be4 <HAL_UARTEx_DisableFifoMode>
 8004348:	1e03      	subs	r3, r0, #0
 800434a:	d001      	beq.n	8004350 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 800434c:	f7ff feb6 	bl	80040bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004350:	46c0      	nop			@ (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	20000120 	.word	0x20000120
 800435c:	40013800 	.word	0x40013800

08004360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004360:	b590      	push	{r4, r7, lr}
 8004362:	b091      	sub	sp, #68	@ 0x44
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004368:	232c      	movs	r3, #44	@ 0x2c
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	0018      	movs	r0, r3
 800436e:	2314      	movs	r3, #20
 8004370:	001a      	movs	r2, r3
 8004372:	2100      	movs	r1, #0
 8004374:	f002 fd86 	bl	8006e84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004378:	2410      	movs	r4, #16
 800437a:	193b      	adds	r3, r7, r4
 800437c:	0018      	movs	r0, r3
 800437e:	231c      	movs	r3, #28
 8004380:	001a      	movs	r2, r3
 8004382:	2100      	movs	r1, #0
 8004384:	f002 fd7e 	bl	8006e84 <memset>
  if(uartHandle->Instance==USART1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a23      	ldr	r2, [pc, #140]	@ (800441c <HAL_UART_MspInit+0xbc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d13f      	bne.n	8004412 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004392:	193b      	adds	r3, r7, r4
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004398:	193b      	adds	r3, r7, r4
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800439e:	193b      	adds	r3, r7, r4
 80043a0:	0018      	movs	r0, r3
 80043a2:	f001 fdbd 	bl	8005f20 <HAL_RCCEx_PeriphCLKConfig>
 80043a6:	1e03      	subs	r3, r0, #0
 80043a8:	d001      	beq.n	80043ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80043aa:	f7ff fe87 	bl	80040bc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004420 <HAL_UART_MspInit+0xc0>)
 80043b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <HAL_UART_MspInit+0xc0>)
 80043b4:	2180      	movs	r1, #128	@ 0x80
 80043b6:	01c9      	lsls	r1, r1, #7
 80043b8:	430a      	orrs	r2, r1
 80043ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80043bc:	4b18      	ldr	r3, [pc, #96]	@ (8004420 <HAL_UART_MspInit+0xc0>)
 80043be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043c0:	2380      	movs	r3, #128	@ 0x80
 80043c2:	01db      	lsls	r3, r3, #7
 80043c4:	4013      	ands	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ca:	4b15      	ldr	r3, [pc, #84]	@ (8004420 <HAL_UART_MspInit+0xc0>)
 80043cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043ce:	4b14      	ldr	r3, [pc, #80]	@ (8004420 <HAL_UART_MspInit+0xc0>)
 80043d0:	2101      	movs	r1, #1
 80043d2:	430a      	orrs	r2, r1
 80043d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80043d6:	4b12      	ldr	r3, [pc, #72]	@ (8004420 <HAL_UART_MspInit+0xc0>)
 80043d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043da:	2201      	movs	r2, #1
 80043dc:	4013      	ands	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043e2:	212c      	movs	r1, #44	@ 0x2c
 80043e4:	187b      	adds	r3, r7, r1
 80043e6:	22c0      	movs	r2, #192	@ 0xc0
 80043e8:	00d2      	lsls	r2, r2, #3
 80043ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ec:	187b      	adds	r3, r7, r1
 80043ee:	2202      	movs	r2, #2
 80043f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f2:	187b      	adds	r3, r7, r1
 80043f4:	2200      	movs	r2, #0
 80043f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f8:	187b      	adds	r3, r7, r1
 80043fa:	2200      	movs	r2, #0
 80043fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80043fe:	187b      	adds	r3, r7, r1
 8004400:	2201      	movs	r2, #1
 8004402:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004404:	187a      	adds	r2, r7, r1
 8004406:	23a0      	movs	r3, #160	@ 0xa0
 8004408:	05db      	lsls	r3, r3, #23
 800440a:	0011      	movs	r1, r2
 800440c:	0018      	movs	r0, r3
 800440e:	f000 f9dd 	bl	80047cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	46bd      	mov	sp, r7
 8004416:	b011      	add	sp, #68	@ 0x44
 8004418:	bd90      	pop	{r4, r7, pc}
 800441a:	46c0      	nop			@ (mov r8, r8)
 800441c:	40013800 	.word	0x40013800
 8004420:	40021000 	.word	0x40021000

08004424 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004424:	480d      	ldr	r0, [pc, #52]	@ (800445c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004426:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004428:	f7ff fef0 	bl	800420c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800442c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800442e:	e003      	b.n	8004438 <LoopCopyDataInit>

08004430 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004430:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8004432:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004434:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004436:	3104      	adds	r1, #4

08004438 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004438:	480a      	ldr	r0, [pc, #40]	@ (8004464 <LoopForever+0xa>)
  ldr r3, =_edata
 800443a:	4b0b      	ldr	r3, [pc, #44]	@ (8004468 <LoopForever+0xe>)
  adds r2, r0, r1
 800443c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800443e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004440:	d3f6      	bcc.n	8004430 <CopyDataInit>
  ldr r2, =_sbss
 8004442:	4a0a      	ldr	r2, [pc, #40]	@ (800446c <LoopForever+0x12>)
  b LoopFillZerobss
 8004444:	e002      	b.n	800444c <LoopFillZerobss>

08004446 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004446:	2300      	movs	r3, #0
  str  r3, [r2]
 8004448:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800444a:	3204      	adds	r2, #4

0800444c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800444c:	4b08      	ldr	r3, [pc, #32]	@ (8004470 <LoopForever+0x16>)
  cmp r2, r3
 800444e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004450:	d3f9      	bcc.n	8004446 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8004452:	f002 fd25 	bl	8006ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004456:	f7ff fd49 	bl	8003eec <main>

0800445a <LoopForever>:

LoopForever:
    b LoopForever
 800445a:	e7fe      	b.n	800445a <LoopForever>
  ldr   r0, =_estack
 800445c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8004460:	08007db4 	.word	0x08007db4
  ldr r0, =_sdata
 8004464:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004468:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 800446c:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8004470:	20000300 	.word	0x20000300

08004474 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004474:	e7fe      	b.n	8004474 <ADC1_IRQHandler>

08004476 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800447c:	1dfb      	adds	r3, r7, #7
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004482:	2003      	movs	r0, #3
 8004484:	f000 f80e 	bl	80044a4 <HAL_InitTick>
 8004488:	1e03      	subs	r3, r0, #0
 800448a:	d003      	beq.n	8004494 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800448c:	1dfb      	adds	r3, r7, #7
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	e001      	b.n	8004498 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004494:	f7ff fe20 	bl	80040d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	781b      	ldrb	r3, [r3, #0]
}
 800449c:	0018      	movs	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	b002      	add	sp, #8
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044a4:	b590      	push	{r4, r7, lr}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80044ac:	230f      	movs	r3, #15
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80044b4:	4b1d      	ldr	r3, [pc, #116]	@ (800452c <HAL_InitTick+0x88>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d02b      	beq.n	8004514 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80044bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004530 <HAL_InitTick+0x8c>)
 80044be:	681c      	ldr	r4, [r3, #0]
 80044c0:	4b1a      	ldr	r3, [pc, #104]	@ (800452c <HAL_InitTick+0x88>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	0019      	movs	r1, r3
 80044c6:	23fa      	movs	r3, #250	@ 0xfa
 80044c8:	0098      	lsls	r0, r3, #2
 80044ca:	f7fb fe2f 	bl	800012c <__udivsi3>
 80044ce:	0003      	movs	r3, r0
 80044d0:	0019      	movs	r1, r3
 80044d2:	0020      	movs	r0, r4
 80044d4:	f7fb fe2a 	bl	800012c <__udivsi3>
 80044d8:	0003      	movs	r3, r0
 80044da:	0018      	movs	r0, r3
 80044dc:	f000 f969 	bl	80047b2 <HAL_SYSTICK_Config>
 80044e0:	1e03      	subs	r3, r0, #0
 80044e2:	d112      	bne.n	800450a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d80a      	bhi.n	8004500 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	2301      	movs	r3, #1
 80044ee:	425b      	negs	r3, r3
 80044f0:	2200      	movs	r2, #0
 80044f2:	0018      	movs	r0, r3
 80044f4:	f000 f938 	bl	8004768 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004534 <HAL_InitTick+0x90>)
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e00d      	b.n	800451c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004500:	230f      	movs	r3, #15
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	e008      	b.n	800451c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800450a:	230f      	movs	r3, #15
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	2201      	movs	r2, #1
 8004510:	701a      	strb	r2, [r3, #0]
 8004512:	e003      	b.n	800451c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004514:	230f      	movs	r3, #15
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	2201      	movs	r2, #1
 800451a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800451c:	230f      	movs	r3, #15
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	781b      	ldrb	r3, [r3, #0]
}
 8004522:	0018      	movs	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	b005      	add	sp, #20
 8004528:	bd90      	pop	{r4, r7, pc}
 800452a:	46c0      	nop			@ (mov r8, r8)
 800452c:	20000008 	.word	0x20000008
 8004530:	20000000 	.word	0x20000000
 8004534:	20000004 	.word	0x20000004

08004538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800453c:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <HAL_IncTick+0x1c>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	001a      	movs	r2, r3
 8004542:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_IncTick+0x20>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	18d2      	adds	r2, r2, r3
 8004548:	4b03      	ldr	r3, [pc, #12]	@ (8004558 <HAL_IncTick+0x20>)
 800454a:	601a      	str	r2, [r3, #0]
}
 800454c:	46c0      	nop			@ (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	20000008 	.word	0x20000008
 8004558:	200001b4 	.word	0x200001b4

0800455c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  return uwTick;
 8004560:	4b02      	ldr	r3, [pc, #8]	@ (800456c <HAL_GetTick+0x10>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	0018      	movs	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	200001b4 	.word	0x200001b4

08004570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004578:	f7ff fff0 	bl	800455c <HAL_GetTick>
 800457c:	0003      	movs	r3, r0
 800457e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3301      	adds	r3, #1
 8004588:	d005      	beq.n	8004596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800458a:	4b0a      	ldr	r3, [pc, #40]	@ (80045b4 <HAL_Delay+0x44>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	001a      	movs	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	189b      	adds	r3, r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	f7ff ffe0 	bl	800455c <HAL_GetTick>
 800459c:	0002      	movs	r2, r0
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d8f7      	bhi.n	8004598 <HAL_Delay+0x28>
  {
  }
}
 80045a8:	46c0      	nop			@ (mov r8, r8)
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b004      	add	sp, #16
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	46c0      	nop			@ (mov r8, r8)
 80045b4:	20000008 	.word	0x20000008

080045b8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80045bc:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <HAL_SuspendTick+0x18>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b03      	ldr	r3, [pc, #12]	@ (80045d0 <HAL_SuspendTick+0x18>)
 80045c2:	2102      	movs	r1, #2
 80045c4:	438a      	bics	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]
}
 80045c8:	46c0      	nop			@ (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	46c0      	nop			@ (mov r8, r8)
 80045d0:	e000e010 	.word	0xe000e010

080045d4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80045d8:	4b04      	ldr	r3, [pc, #16]	@ (80045ec <HAL_ResumeTick+0x18>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b03      	ldr	r3, [pc, #12]	@ (80045ec <HAL_ResumeTick+0x18>)
 80045de:	2102      	movs	r1, #2
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	46c0      	nop			@ (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	e000e010 	.word	0xe000e010

080045f0 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 80045f8:	4b04      	ldr	r3, [pc, #16]	@ (800460c <HAL_SYSCFG_EnableRemap+0x1c>)
 80045fa:	6819      	ldr	r1, [r3, #0]
 80045fc:	4b03      	ldr	r3, [pc, #12]	@ (800460c <HAL_SYSCFG_EnableRemap+0x1c>)
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	430a      	orrs	r2, r1
 8004602:	601a      	str	r2, [r3, #0]
}
 8004604:	46c0      	nop			@ (mov r8, r8)
 8004606:	46bd      	mov	sp, r7
 8004608:	b002      	add	sp, #8
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40010000 	.word	0x40010000

08004610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	0002      	movs	r2, r0
 8004618:	1dfb      	adds	r3, r7, #7
 800461a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800461c:	1dfb      	adds	r3, r7, #7
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b7f      	cmp	r3, #127	@ 0x7f
 8004622:	d809      	bhi.n	8004638 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004624:	1dfb      	adds	r3, r7, #7
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	001a      	movs	r2, r3
 800462a:	231f      	movs	r3, #31
 800462c:	401a      	ands	r2, r3
 800462e:	4b04      	ldr	r3, [pc, #16]	@ (8004640 <__NVIC_EnableIRQ+0x30>)
 8004630:	2101      	movs	r1, #1
 8004632:	4091      	lsls	r1, r2
 8004634:	000a      	movs	r2, r1
 8004636:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004638:	46c0      	nop			@ (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	b002      	add	sp, #8
 800463e:	bd80      	pop	{r7, pc}
 8004640:	e000e100 	.word	0xe000e100

08004644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004644:	b590      	push	{r4, r7, lr}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	0002      	movs	r2, r0
 800464c:	6039      	str	r1, [r7, #0]
 800464e:	1dfb      	adds	r3, r7, #7
 8004650:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004652:	1dfb      	adds	r3, r7, #7
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b7f      	cmp	r3, #127	@ 0x7f
 8004658:	d828      	bhi.n	80046ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800465a:	4a2f      	ldr	r2, [pc, #188]	@ (8004718 <__NVIC_SetPriority+0xd4>)
 800465c:	1dfb      	adds	r3, r7, #7
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b25b      	sxtb	r3, r3
 8004662:	089b      	lsrs	r3, r3, #2
 8004664:	33c0      	adds	r3, #192	@ 0xc0
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	589b      	ldr	r3, [r3, r2]
 800466a:	1dfa      	adds	r2, r7, #7
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	0011      	movs	r1, r2
 8004670:	2203      	movs	r2, #3
 8004672:	400a      	ands	r2, r1
 8004674:	00d2      	lsls	r2, r2, #3
 8004676:	21ff      	movs	r1, #255	@ 0xff
 8004678:	4091      	lsls	r1, r2
 800467a:	000a      	movs	r2, r1
 800467c:	43d2      	mvns	r2, r2
 800467e:	401a      	ands	r2, r3
 8004680:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	019b      	lsls	r3, r3, #6
 8004686:	22ff      	movs	r2, #255	@ 0xff
 8004688:	401a      	ands	r2, r3
 800468a:	1dfb      	adds	r3, r7, #7
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	0018      	movs	r0, r3
 8004690:	2303      	movs	r3, #3
 8004692:	4003      	ands	r3, r0
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004698:	481f      	ldr	r0, [pc, #124]	@ (8004718 <__NVIC_SetPriority+0xd4>)
 800469a:	1dfb      	adds	r3, r7, #7
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b25b      	sxtb	r3, r3
 80046a0:	089b      	lsrs	r3, r3, #2
 80046a2:	430a      	orrs	r2, r1
 80046a4:	33c0      	adds	r3, #192	@ 0xc0
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80046aa:	e031      	b.n	8004710 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046ac:	4a1b      	ldr	r2, [pc, #108]	@ (800471c <__NVIC_SetPriority+0xd8>)
 80046ae:	1dfb      	adds	r3, r7, #7
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	0019      	movs	r1, r3
 80046b4:	230f      	movs	r3, #15
 80046b6:	400b      	ands	r3, r1
 80046b8:	3b08      	subs	r3, #8
 80046ba:	089b      	lsrs	r3, r3, #2
 80046bc:	3306      	adds	r3, #6
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	18d3      	adds	r3, r2, r3
 80046c2:	3304      	adds	r3, #4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	1dfa      	adds	r2, r7, #7
 80046c8:	7812      	ldrb	r2, [r2, #0]
 80046ca:	0011      	movs	r1, r2
 80046cc:	2203      	movs	r2, #3
 80046ce:	400a      	ands	r2, r1
 80046d0:	00d2      	lsls	r2, r2, #3
 80046d2:	21ff      	movs	r1, #255	@ 0xff
 80046d4:	4091      	lsls	r1, r2
 80046d6:	000a      	movs	r2, r1
 80046d8:	43d2      	mvns	r2, r2
 80046da:	401a      	ands	r2, r3
 80046dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	019b      	lsls	r3, r3, #6
 80046e2:	22ff      	movs	r2, #255	@ 0xff
 80046e4:	401a      	ands	r2, r3
 80046e6:	1dfb      	adds	r3, r7, #7
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	0018      	movs	r0, r3
 80046ec:	2303      	movs	r3, #3
 80046ee:	4003      	ands	r3, r0
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046f4:	4809      	ldr	r0, [pc, #36]	@ (800471c <__NVIC_SetPriority+0xd8>)
 80046f6:	1dfb      	adds	r3, r7, #7
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	001c      	movs	r4, r3
 80046fc:	230f      	movs	r3, #15
 80046fe:	4023      	ands	r3, r4
 8004700:	3b08      	subs	r3, #8
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	430a      	orrs	r2, r1
 8004706:	3306      	adds	r3, #6
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	18c3      	adds	r3, r0, r3
 800470c:	3304      	adds	r3, #4
 800470e:	601a      	str	r2, [r3, #0]
}
 8004710:	46c0      	nop			@ (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b003      	add	sp, #12
 8004716:	bd90      	pop	{r4, r7, pc}
 8004718:	e000e100 	.word	0xe000e100
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	1e5a      	subs	r2, r3, #1
 800472c:	2380      	movs	r3, #128	@ 0x80
 800472e:	045b      	lsls	r3, r3, #17
 8004730:	429a      	cmp	r2, r3
 8004732:	d301      	bcc.n	8004738 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004734:	2301      	movs	r3, #1
 8004736:	e010      	b.n	800475a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004738:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <SysTick_Config+0x44>)
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	3a01      	subs	r2, #1
 800473e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004740:	2301      	movs	r3, #1
 8004742:	425b      	negs	r3, r3
 8004744:	2103      	movs	r1, #3
 8004746:	0018      	movs	r0, r3
 8004748:	f7ff ff7c 	bl	8004644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800474c:	4b05      	ldr	r3, [pc, #20]	@ (8004764 <SysTick_Config+0x44>)
 800474e:	2200      	movs	r2, #0
 8004750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004752:	4b04      	ldr	r3, [pc, #16]	@ (8004764 <SysTick_Config+0x44>)
 8004754:	2207      	movs	r2, #7
 8004756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004758:	2300      	movs	r3, #0
}
 800475a:	0018      	movs	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	b002      	add	sp, #8
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			@ (mov r8, r8)
 8004764:	e000e010 	.word	0xe000e010

08004768 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	210f      	movs	r1, #15
 8004774:	187b      	adds	r3, r7, r1
 8004776:	1c02      	adds	r2, r0, #0
 8004778:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	187b      	adds	r3, r7, r1
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	b25b      	sxtb	r3, r3
 8004782:	0011      	movs	r1, r2
 8004784:	0018      	movs	r0, r3
 8004786:	f7ff ff5d 	bl	8004644 <__NVIC_SetPriority>
}
 800478a:	46c0      	nop			@ (mov r8, r8)
 800478c:	46bd      	mov	sp, r7
 800478e:	b004      	add	sp, #16
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	0002      	movs	r2, r0
 800479a:	1dfb      	adds	r3, r7, #7
 800479c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800479e:	1dfb      	adds	r3, r7, #7
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	b25b      	sxtb	r3, r3
 80047a4:	0018      	movs	r0, r3
 80047a6:	f7ff ff33 	bl	8004610 <__NVIC_EnableIRQ>
}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b002      	add	sp, #8
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0018      	movs	r0, r3
 80047be:	f7ff ffaf 	bl	8004720 <SysTick_Config>
 80047c2:	0003      	movs	r3, r0
}
 80047c4:	0018      	movs	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b002      	add	sp, #8
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80047da:	e14d      	b.n	8004a78 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2101      	movs	r1, #1
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4091      	lsls	r1, r2
 80047e6:	000a      	movs	r2, r1
 80047e8:	4013      	ands	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d100      	bne.n	80047f4 <HAL_GPIO_Init+0x28>
 80047f2:	e13e      	b.n	8004a72 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d003      	beq.n	8004804 <HAL_GPIO_Init+0x38>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b12      	cmp	r3, #18
 8004802:	d125      	bne.n	8004850 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	08da      	lsrs	r2, r3, #3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3208      	adds	r2, #8
 800480c:	0092      	lsls	r2, r2, #2
 800480e:	58d3      	ldr	r3, [r2, r3]
 8004810:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2207      	movs	r2, #7
 8004816:	4013      	ands	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	220f      	movs	r2, #15
 800481c:	409a      	lsls	r2, r3
 800481e:	0013      	movs	r3, r2
 8004820:	43da      	mvns	r2, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	4013      	ands	r3, r2
 8004826:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	220f      	movs	r2, #15
 800482e:	401a      	ands	r2, r3
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2107      	movs	r1, #7
 8004834:	400b      	ands	r3, r1
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	409a      	lsls	r2, r3
 800483a:	0013      	movs	r3, r2
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	08da      	lsrs	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3208      	adds	r2, #8
 800484a:	0092      	lsls	r2, r2, #2
 800484c:	6979      	ldr	r1, [r7, #20]
 800484e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	2203      	movs	r2, #3
 800485c:	409a      	lsls	r2, r3
 800485e:	0013      	movs	r3, r2
 8004860:	43da      	mvns	r2, r3
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	4013      	ands	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2203      	movs	r2, #3
 800486e:	401a      	ands	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	409a      	lsls	r2, r3
 8004876:	0013      	movs	r3, r2
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d00b      	beq.n	80048a4 <HAL_GPIO_Init+0xd8>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d007      	beq.n	80048a4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004898:	2b11      	cmp	r3, #17
 800489a:	d003      	beq.n	80048a4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b12      	cmp	r3, #18
 80048a2:	d130      	bne.n	8004906 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	2203      	movs	r2, #3
 80048b0:	409a      	lsls	r2, r3
 80048b2:	0013      	movs	r3, r2
 80048b4:	43da      	mvns	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	4013      	ands	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	409a      	lsls	r2, r3
 80048c6:	0013      	movs	r3, r2
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048da:	2201      	movs	r2, #1
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	409a      	lsls	r2, r3
 80048e0:	0013      	movs	r3, r2
 80048e2:	43da      	mvns	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4013      	ands	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	091b      	lsrs	r3, r3, #4
 80048f0:	2201      	movs	r2, #1
 80048f2:	401a      	ands	r2, r3
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	409a      	lsls	r2, r3
 80048f8:	0013      	movs	r3, r2
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b03      	cmp	r3, #3
 800490c:	d017      	beq.n	800493e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	2203      	movs	r2, #3
 800491a:	409a      	lsls	r2, r3
 800491c:	0013      	movs	r3, r2
 800491e:	43da      	mvns	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	4013      	ands	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	409a      	lsls	r2, r3
 8004930:	0013      	movs	r3, r2
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	2380      	movs	r3, #128	@ 0x80
 8004944:	055b      	lsls	r3, r3, #21
 8004946:	4013      	ands	r3, r2
 8004948:	d100      	bne.n	800494c <HAL_GPIO_Init+0x180>
 800494a:	e092      	b.n	8004a72 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800494c:	4a50      	ldr	r2, [pc, #320]	@ (8004a90 <HAL_GPIO_Init+0x2c4>)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	089b      	lsrs	r3, r3, #2
 8004952:	3318      	adds	r3, #24
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	589b      	ldr	r3, [r3, r2]
 8004958:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2203      	movs	r2, #3
 800495e:	4013      	ands	r3, r2
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	220f      	movs	r2, #15
 8004964:	409a      	lsls	r2, r3
 8004966:	0013      	movs	r3, r2
 8004968:	43da      	mvns	r2, r3
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	4013      	ands	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	23a0      	movs	r3, #160	@ 0xa0
 8004974:	05db      	lsls	r3, r3, #23
 8004976:	429a      	cmp	r2, r3
 8004978:	d013      	beq.n	80049a2 <HAL_GPIO_Init+0x1d6>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a45      	ldr	r2, [pc, #276]	@ (8004a94 <HAL_GPIO_Init+0x2c8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00d      	beq.n	800499e <HAL_GPIO_Init+0x1d2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a44      	ldr	r2, [pc, #272]	@ (8004a98 <HAL_GPIO_Init+0x2cc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <HAL_GPIO_Init+0x1ce>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a43      	ldr	r2, [pc, #268]	@ (8004a9c <HAL_GPIO_Init+0x2d0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d101      	bne.n	8004996 <HAL_GPIO_Init+0x1ca>
 8004992:	2305      	movs	r3, #5
 8004994:	e006      	b.n	80049a4 <HAL_GPIO_Init+0x1d8>
 8004996:	2306      	movs	r3, #6
 8004998:	e004      	b.n	80049a4 <HAL_GPIO_Init+0x1d8>
 800499a:	2302      	movs	r3, #2
 800499c:	e002      	b.n	80049a4 <HAL_GPIO_Init+0x1d8>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <HAL_GPIO_Init+0x1d8>
 80049a2:	2300      	movs	r3, #0
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	2103      	movs	r1, #3
 80049a8:	400a      	ands	r2, r1
 80049aa:	00d2      	lsls	r2, r2, #3
 80049ac:	4093      	lsls	r3, r2
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80049b4:	4936      	ldr	r1, [pc, #216]	@ (8004a90 <HAL_GPIO_Init+0x2c4>)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	089b      	lsrs	r3, r3, #2
 80049ba:	3318      	adds	r3, #24
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80049c2:	4a33      	ldr	r2, [pc, #204]	@ (8004a90 <HAL_GPIO_Init+0x2c4>)
 80049c4:	2380      	movs	r3, #128	@ 0x80
 80049c6:	58d3      	ldr	r3, [r2, r3]
 80049c8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	43da      	mvns	r2, r3
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	4013      	ands	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	2380      	movs	r3, #128	@ 0x80
 80049da:	025b      	lsls	r3, r3, #9
 80049dc:	4013      	ands	r3, r2
 80049de:	d003      	beq.n	80049e8 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80049e8:	4929      	ldr	r1, [pc, #164]	@ (8004a90 <HAL_GPIO_Init+0x2c4>)
 80049ea:	2280      	movs	r2, #128	@ 0x80
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80049f0:	4a27      	ldr	r2, [pc, #156]	@ (8004a90 <HAL_GPIO_Init+0x2c4>)
 80049f2:	2384      	movs	r3, #132	@ 0x84
 80049f4:	58d3      	ldr	r3, [r2, r3]
 80049f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	43da      	mvns	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	4013      	ands	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	2380      	movs	r3, #128	@ 0x80
 8004a08:	029b      	lsls	r3, r3, #10
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004a16:	491e      	ldr	r1, [pc, #120]	@ (8004a90 <HAL_GPIO_Init+0x2c4>)
 8004a18:	2284      	movs	r2, #132	@ 0x84
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8004a90 <HAL_GPIO_Init+0x2c4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	43da      	mvns	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	035b      	lsls	r3, r3, #13
 8004a36:	4013      	ands	r3, r2
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004a42:	4b13      	ldr	r3, [pc, #76]	@ (8004a90 <HAL_GPIO_Init+0x2c4>)
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8004a48:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <HAL_GPIO_Init+0x2c4>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	43da      	mvns	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	4013      	ands	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	2380      	movs	r3, #128	@ 0x80
 8004a5e:	039b      	lsls	r3, r3, #14
 8004a60:	4013      	ands	r3, r2
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004a6c:	4b08      	ldr	r3, [pc, #32]	@ (8004a90 <HAL_GPIO_Init+0x2c4>)
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	3301      	adds	r3, #1
 8004a76:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	40da      	lsrs	r2, r3
 8004a80:	1e13      	subs	r3, r2, #0
 8004a82:	d000      	beq.n	8004a86 <HAL_GPIO_Init+0x2ba>
 8004a84:	e6aa      	b.n	80047dc <HAL_GPIO_Init+0x10>
  }
}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	46c0      	nop			@ (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b006      	add	sp, #24
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021800 	.word	0x40021800
 8004a94:	50000400 	.word	0x50000400
 8004a98:	50000800 	.word	0x50000800
 8004a9c:	50001400 	.word	0x50001400

08004aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	0008      	movs	r0, r1
 8004aaa:	0011      	movs	r1, r2
 8004aac:	1cbb      	adds	r3, r7, #2
 8004aae:	1c02      	adds	r2, r0, #0
 8004ab0:	801a      	strh	r2, [r3, #0]
 8004ab2:	1c7b      	adds	r3, r7, #1
 8004ab4:	1c0a      	adds	r2, r1, #0
 8004ab6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ab8:	1c7b      	adds	r3, r7, #1
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ac0:	1cbb      	adds	r3, r7, #2
 8004ac2:	881a      	ldrh	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ac8:	e003      	b.n	8004ad2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004aca:	1cbb      	adds	r3, r7, #2
 8004acc:	881a      	ldrh	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b002      	add	sp, #8
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e08f      	b.n	8004c0e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2241      	movs	r2, #65	@ 0x41
 8004af2:	5c9b      	ldrb	r3, [r3, r2]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d107      	bne.n	8004b0a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2240      	movs	r2, #64	@ 0x40
 8004afe:	2100      	movs	r1, #0
 8004b00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f7ff f889 	bl	8003c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2241      	movs	r2, #65	@ 0x41
 8004b0e:	2124      	movs	r1, #36	@ 0x24
 8004b10:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	438a      	bics	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	493b      	ldr	r1, [pc, #236]	@ (8004c18 <HAL_I2C_Init+0x13c>)
 8004b2c:	400a      	ands	r2, r1
 8004b2e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4938      	ldr	r1, [pc, #224]	@ (8004c1c <HAL_I2C_Init+0x140>)
 8004b3c:	400a      	ands	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d108      	bne.n	8004b5a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2180      	movs	r1, #128	@ 0x80
 8004b52:	0209      	lsls	r1, r1, #8
 8004b54:	430a      	orrs	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
 8004b58:	e007      	b.n	8004b6a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2184      	movs	r1, #132	@ 0x84
 8004b64:	0209      	lsls	r1, r1, #8
 8004b66:	430a      	orrs	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d109      	bne.n	8004b86 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2180      	movs	r1, #128	@ 0x80
 8004b7e:	0109      	lsls	r1, r1, #4
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	e007      	b.n	8004b96 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4923      	ldr	r1, [pc, #140]	@ (8004c20 <HAL_I2C_Init+0x144>)
 8004b92:	400a      	ands	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4920      	ldr	r1, [pc, #128]	@ (8004c24 <HAL_I2C_Init+0x148>)
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	491a      	ldr	r1, [pc, #104]	@ (8004c1c <HAL_I2C_Init+0x140>)
 8004bb2:	400a      	ands	r2, r1
 8004bb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69d9      	ldr	r1, [r3, #28]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1a      	ldr	r2, [r3, #32]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2101      	movs	r1, #1
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2241      	movs	r2, #65	@ 0x41
 8004bfa:	2120      	movs	r1, #32
 8004bfc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2242      	movs	r2, #66	@ 0x42
 8004c08:	2100      	movs	r1, #0
 8004c0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	0018      	movs	r0, r3
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b002      	add	sp, #8
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	f0ffffff 	.word	0xf0ffffff
 8004c1c:	ffff7fff 	.word	0xffff7fff
 8004c20:	fffff7ff 	.word	0xfffff7ff
 8004c24:	02008000 	.word	0x02008000

08004c28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b089      	sub	sp, #36	@ 0x24
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	000c      	movs	r4, r1
 8004c32:	0010      	movs	r0, r2
 8004c34:	0019      	movs	r1, r3
 8004c36:	230a      	movs	r3, #10
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	1c22      	adds	r2, r4, #0
 8004c3c:	801a      	strh	r2, [r3, #0]
 8004c3e:	2308      	movs	r3, #8
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	1c02      	adds	r2, r0, #0
 8004c44:	801a      	strh	r2, [r3, #0]
 8004c46:	1dbb      	adds	r3, r7, #6
 8004c48:	1c0a      	adds	r2, r1, #0
 8004c4a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2241      	movs	r2, #65	@ 0x41
 8004c50:	5c9b      	ldrb	r3, [r3, r2]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d000      	beq.n	8004c5a <HAL_I2C_Mem_Write+0x32>
 8004c58:	e10c      	b.n	8004e74 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d004      	beq.n	8004c6a <HAL_I2C_Mem_Write+0x42>
 8004c60:	232c      	movs	r3, #44	@ 0x2c
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d105      	bne.n	8004c76 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2280      	movs	r2, #128	@ 0x80
 8004c6e:	0092      	lsls	r2, r2, #2
 8004c70:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e0ff      	b.n	8004e76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2240      	movs	r2, #64	@ 0x40
 8004c7a:	5c9b      	ldrb	r3, [r3, r2]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_I2C_Mem_Write+0x5c>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e0f8      	b.n	8004e76 <HAL_I2C_Mem_Write+0x24e>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2240      	movs	r2, #64	@ 0x40
 8004c88:	2101      	movs	r1, #1
 8004c8a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c8c:	f7ff fc66 	bl	800455c <HAL_GetTick>
 8004c90:	0003      	movs	r3, r0
 8004c92:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c94:	2380      	movs	r3, #128	@ 0x80
 8004c96:	0219      	lsls	r1, r3, #8
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2319      	movs	r3, #25
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f000 fb0b 	bl	80052bc <I2C_WaitOnFlagUntilTimeout>
 8004ca6:	1e03      	subs	r3, r0, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e0e3      	b.n	8004e76 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2241      	movs	r2, #65	@ 0x41
 8004cb2:	2121      	movs	r1, #33	@ 0x21
 8004cb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2242      	movs	r2, #66	@ 0x42
 8004cba:	2140      	movs	r1, #64	@ 0x40
 8004cbc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	222c      	movs	r2, #44	@ 0x2c
 8004cce:	18ba      	adds	r2, r7, r2
 8004cd0:	8812      	ldrh	r2, [r2, #0]
 8004cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cda:	1dbb      	adds	r3, r7, #6
 8004cdc:	881c      	ldrh	r4, [r3, #0]
 8004cde:	2308      	movs	r3, #8
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	881a      	ldrh	r2, [r3, #0]
 8004ce4:	230a      	movs	r3, #10
 8004ce6:	18fb      	adds	r3, r7, r3
 8004ce8:	8819      	ldrh	r1, [r3, #0]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	0023      	movs	r3, r4
 8004cf6:	f000 f9f9 	bl	80050ec <I2C_RequestMemoryWrite>
 8004cfa:	1e03      	subs	r3, r0, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2240      	movs	r2, #64	@ 0x40
 8004d02:	2100      	movs	r1, #0
 8004d04:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e0b5      	b.n	8004e76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2bff      	cmp	r3, #255	@ 0xff
 8004d12:	d911      	bls.n	8004d38 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	22ff      	movs	r2, #255	@ 0xff
 8004d18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	2380      	movs	r3, #128	@ 0x80
 8004d22:	045c      	lsls	r4, r3, #17
 8004d24:	230a      	movs	r3, #10
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	8819      	ldrh	r1, [r3, #0]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	0023      	movs	r3, r4
 8004d32:	f000 fc9d 	bl	8005670 <I2C_TransferConfig>
 8004d36:	e012      	b.n	8004d5e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	2380      	movs	r3, #128	@ 0x80
 8004d4a:	049c      	lsls	r4, r3, #18
 8004d4c:	230a      	movs	r3, #10
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	8819      	ldrh	r1, [r3, #0]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	2300      	movs	r3, #0
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	0023      	movs	r3, r4
 8004d5a:	f000 fc89 	bl	8005670 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f000 fb01 	bl	800536c <I2C_WaitOnTXISFlagUntilTimeout>
 8004d6a:	1e03      	subs	r3, r0, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e081      	b.n	8004e76 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	781a      	ldrb	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d03a      	beq.n	8004e22 <HAL_I2C_Mem_Write+0x1fa>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d136      	bne.n	8004e22 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	0013      	movs	r3, r2
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2180      	movs	r1, #128	@ 0x80
 8004dc2:	f000 fa7b 	bl	80052bc <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	1e03      	subs	r3, r0, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e053      	b.n	8004e76 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2bff      	cmp	r3, #255	@ 0xff
 8004dd6:	d911      	bls.n	8004dfc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	22ff      	movs	r2, #255	@ 0xff
 8004ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	2380      	movs	r3, #128	@ 0x80
 8004de6:	045c      	lsls	r4, r3, #17
 8004de8:	230a      	movs	r3, #10
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	8819      	ldrh	r1, [r3, #0]
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	2300      	movs	r3, #0
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	0023      	movs	r3, r4
 8004df6:	f000 fc3b 	bl	8005670 <I2C_TransferConfig>
 8004dfa:	e012      	b.n	8004e22 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	2380      	movs	r3, #128	@ 0x80
 8004e0e:	049c      	lsls	r4, r3, #18
 8004e10:	230a      	movs	r3, #10
 8004e12:	18fb      	adds	r3, r7, r3
 8004e14:	8819      	ldrh	r1, [r3, #0]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	0023      	movs	r3, r4
 8004e1e:	f000 fc27 	bl	8005670 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d198      	bne.n	8004d5e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 fae0 	bl	80053f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e38:	1e03      	subs	r3, r0, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e01a      	b.n	8004e76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2220      	movs	r2, #32
 8004e46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	490b      	ldr	r1, [pc, #44]	@ (8004e80 <HAL_I2C_Mem_Write+0x258>)
 8004e54:	400a      	ands	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2241      	movs	r2, #65	@ 0x41
 8004e5c:	2120      	movs	r1, #32
 8004e5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2242      	movs	r2, #66	@ 0x42
 8004e64:	2100      	movs	r1, #0
 8004e66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2240      	movs	r2, #64	@ 0x40
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	0018      	movs	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	b007      	add	sp, #28
 8004e7c:	bd90      	pop	{r4, r7, pc}
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	fe00e800 	.word	0xfe00e800

08004e84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e84:	b590      	push	{r4, r7, lr}
 8004e86:	b089      	sub	sp, #36	@ 0x24
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	000c      	movs	r4, r1
 8004e8e:	0010      	movs	r0, r2
 8004e90:	0019      	movs	r1, r3
 8004e92:	230a      	movs	r3, #10
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	1c22      	adds	r2, r4, #0
 8004e98:	801a      	strh	r2, [r3, #0]
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	1c02      	adds	r2, r0, #0
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	1dbb      	adds	r3, r7, #6
 8004ea4:	1c0a      	adds	r2, r1, #0
 8004ea6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2241      	movs	r2, #65	@ 0x41
 8004eac:	5c9b      	ldrb	r3, [r3, r2]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d000      	beq.n	8004eb6 <HAL_I2C_Mem_Read+0x32>
 8004eb4:	e110      	b.n	80050d8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d004      	beq.n	8004ec6 <HAL_I2C_Mem_Read+0x42>
 8004ebc:	232c      	movs	r3, #44	@ 0x2c
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d105      	bne.n	8004ed2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2280      	movs	r2, #128	@ 0x80
 8004eca:	0092      	lsls	r2, r2, #2
 8004ecc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e103      	b.n	80050da <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2240      	movs	r2, #64	@ 0x40
 8004ed6:	5c9b      	ldrb	r3, [r3, r2]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_I2C_Mem_Read+0x5c>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e0fc      	b.n	80050da <HAL_I2C_Mem_Read+0x256>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2240      	movs	r2, #64	@ 0x40
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ee8:	f7ff fb38 	bl	800455c <HAL_GetTick>
 8004eec:	0003      	movs	r3, r0
 8004eee:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ef0:	2380      	movs	r3, #128	@ 0x80
 8004ef2:	0219      	lsls	r1, r3, #8
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	2319      	movs	r3, #25
 8004efc:	2201      	movs	r2, #1
 8004efe:	f000 f9dd 	bl	80052bc <I2C_WaitOnFlagUntilTimeout>
 8004f02:	1e03      	subs	r3, r0, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e0e7      	b.n	80050da <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2241      	movs	r2, #65	@ 0x41
 8004f0e:	2122      	movs	r1, #34	@ 0x22
 8004f10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2242      	movs	r2, #66	@ 0x42
 8004f16:	2140      	movs	r1, #64	@ 0x40
 8004f18:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	222c      	movs	r2, #44	@ 0x2c
 8004f2a:	18ba      	adds	r2, r7, r2
 8004f2c:	8812      	ldrh	r2, [r2, #0]
 8004f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f36:	1dbb      	adds	r3, r7, #6
 8004f38:	881c      	ldrh	r4, [r3, #0]
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	881a      	ldrh	r2, [r3, #0]
 8004f40:	230a      	movs	r3, #10
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	8819      	ldrh	r1, [r3, #0]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	9301      	str	r3, [sp, #4]
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	0023      	movs	r3, r4
 8004f52:	f000 f92f 	bl	80051b4 <I2C_RequestMemoryRead>
 8004f56:	1e03      	subs	r3, r0, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2240      	movs	r2, #64	@ 0x40
 8004f5e:	2100      	movs	r1, #0
 8004f60:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e0b9      	b.n	80050da <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2bff      	cmp	r3, #255	@ 0xff
 8004f6e:	d911      	bls.n	8004f94 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	22ff      	movs	r2, #255	@ 0xff
 8004f74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	2380      	movs	r3, #128	@ 0x80
 8004f7e:	045c      	lsls	r4, r3, #17
 8004f80:	230a      	movs	r3, #10
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	8819      	ldrh	r1, [r3, #0]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	4b56      	ldr	r3, [pc, #344]	@ (80050e4 <HAL_I2C_Mem_Read+0x260>)
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	0023      	movs	r3, r4
 8004f8e:	f000 fb6f 	bl	8005670 <I2C_TransferConfig>
 8004f92:	e012      	b.n	8004fba <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	2380      	movs	r3, #128	@ 0x80
 8004fa6:	049c      	lsls	r4, r3, #18
 8004fa8:	230a      	movs	r3, #10
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	8819      	ldrh	r1, [r3, #0]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80050e4 <HAL_I2C_Mem_Read+0x260>)
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	0023      	movs	r3, r4
 8004fb6:	f000 fb5b 	bl	8005670 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	0013      	movs	r3, r2
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2104      	movs	r1, #4
 8004fc8:	f000 f978 	bl	80052bc <I2C_WaitOnFlagUntilTimeout>
 8004fcc:	1e03      	subs	r3, r0, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e082      	b.n	80050da <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500a:	b29b      	uxth	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d03a      	beq.n	8005086 <HAL_I2C_Mem_Read+0x202>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005014:	2b00      	cmp	r3, #0
 8005016:	d136      	bne.n	8005086 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	0013      	movs	r3, r2
 8005022:	2200      	movs	r2, #0
 8005024:	2180      	movs	r1, #128	@ 0x80
 8005026:	f000 f949 	bl	80052bc <I2C_WaitOnFlagUntilTimeout>
 800502a:	1e03      	subs	r3, r0, #0
 800502c:	d001      	beq.n	8005032 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e053      	b.n	80050da <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005036:	b29b      	uxth	r3, r3
 8005038:	2bff      	cmp	r3, #255	@ 0xff
 800503a:	d911      	bls.n	8005060 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	22ff      	movs	r2, #255	@ 0xff
 8005040:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005046:	b2da      	uxtb	r2, r3
 8005048:	2380      	movs	r3, #128	@ 0x80
 800504a:	045c      	lsls	r4, r3, #17
 800504c:	230a      	movs	r3, #10
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	8819      	ldrh	r1, [r3, #0]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	2300      	movs	r3, #0
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	0023      	movs	r3, r4
 800505a:	f000 fb09 	bl	8005670 <I2C_TransferConfig>
 800505e:	e012      	b.n	8005086 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506e:	b2da      	uxtb	r2, r3
 8005070:	2380      	movs	r3, #128	@ 0x80
 8005072:	049c      	lsls	r4, r3, #18
 8005074:	230a      	movs	r3, #10
 8005076:	18fb      	adds	r3, r7, r3
 8005078:	8819      	ldrh	r1, [r3, #0]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	2300      	movs	r3, #0
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	0023      	movs	r3, r4
 8005082:	f000 faf5 	bl	8005670 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d194      	bne.n	8004fba <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	0018      	movs	r0, r3
 8005098:	f000 f9ae 	bl	80053f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800509c:	1e03      	subs	r3, r0, #0
 800509e:	d001      	beq.n	80050a4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e01a      	b.n	80050da <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2220      	movs	r2, #32
 80050aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	490c      	ldr	r1, [pc, #48]	@ (80050e8 <HAL_I2C_Mem_Read+0x264>)
 80050b8:	400a      	ands	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2241      	movs	r2, #65	@ 0x41
 80050c0:	2120      	movs	r1, #32
 80050c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2242      	movs	r2, #66	@ 0x42
 80050c8:	2100      	movs	r1, #0
 80050ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2240      	movs	r2, #64	@ 0x40
 80050d0:	2100      	movs	r1, #0
 80050d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80050d8:	2302      	movs	r3, #2
  }
}
 80050da:	0018      	movs	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	b007      	add	sp, #28
 80050e0:	bd90      	pop	{r4, r7, pc}
 80050e2:	46c0      	nop			@ (mov r8, r8)
 80050e4:	80002400 	.word	0x80002400
 80050e8:	fe00e800 	.word	0xfe00e800

080050ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80050ec:	b5b0      	push	{r4, r5, r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	000c      	movs	r4, r1
 80050f6:	0010      	movs	r0, r2
 80050f8:	0019      	movs	r1, r3
 80050fa:	250a      	movs	r5, #10
 80050fc:	197b      	adds	r3, r7, r5
 80050fe:	1c22      	adds	r2, r4, #0
 8005100:	801a      	strh	r2, [r3, #0]
 8005102:	2308      	movs	r3, #8
 8005104:	18fb      	adds	r3, r7, r3
 8005106:	1c02      	adds	r2, r0, #0
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	1dbb      	adds	r3, r7, #6
 800510c:	1c0a      	adds	r2, r1, #0
 800510e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005110:	1dbb      	adds	r3, r7, #6
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	2380      	movs	r3, #128	@ 0x80
 8005118:	045c      	lsls	r4, r3, #17
 800511a:	197b      	adds	r3, r7, r5
 800511c:	8819      	ldrh	r1, [r3, #0]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	4b23      	ldr	r3, [pc, #140]	@ (80051b0 <I2C_RequestMemoryWrite+0xc4>)
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	0023      	movs	r3, r4
 8005126:	f000 faa3 	bl	8005670 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800512a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512c:	6a39      	ldr	r1, [r7, #32]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	0018      	movs	r0, r3
 8005132:	f000 f91b 	bl	800536c <I2C_WaitOnTXISFlagUntilTimeout>
 8005136:	1e03      	subs	r3, r0, #0
 8005138:	d001      	beq.n	800513e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e033      	b.n	80051a6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800513e:	1dbb      	adds	r3, r7, #6
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d107      	bne.n	8005156 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005146:	2308      	movs	r3, #8
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	629a      	str	r2, [r3, #40]	@ 0x28
 8005154:	e019      	b.n	800518a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005156:	2308      	movs	r3, #8
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	0a1b      	lsrs	r3, r3, #8
 800515e:	b29b      	uxth	r3, r3
 8005160:	b2da      	uxtb	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516a:	6a39      	ldr	r1, [r7, #32]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	0018      	movs	r0, r3
 8005170:	f000 f8fc 	bl	800536c <I2C_WaitOnTXISFlagUntilTimeout>
 8005174:	1e03      	subs	r3, r0, #0
 8005176:	d001      	beq.n	800517c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e014      	b.n	80051a6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800517c:	2308      	movs	r3, #8
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800518a:	6a3a      	ldr	r2, [r7, #32]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	0013      	movs	r3, r2
 8005194:	2200      	movs	r2, #0
 8005196:	2180      	movs	r1, #128	@ 0x80
 8005198:	f000 f890 	bl	80052bc <I2C_WaitOnFlagUntilTimeout>
 800519c:	1e03      	subs	r3, r0, #0
 800519e:	d001      	beq.n	80051a4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b004      	add	sp, #16
 80051ac:	bdb0      	pop	{r4, r5, r7, pc}
 80051ae:	46c0      	nop			@ (mov r8, r8)
 80051b0:	80002000 	.word	0x80002000

080051b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80051b4:	b5b0      	push	{r4, r5, r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	000c      	movs	r4, r1
 80051be:	0010      	movs	r0, r2
 80051c0:	0019      	movs	r1, r3
 80051c2:	250a      	movs	r5, #10
 80051c4:	197b      	adds	r3, r7, r5
 80051c6:	1c22      	adds	r2, r4, #0
 80051c8:	801a      	strh	r2, [r3, #0]
 80051ca:	2308      	movs	r3, #8
 80051cc:	18fb      	adds	r3, r7, r3
 80051ce:	1c02      	adds	r2, r0, #0
 80051d0:	801a      	strh	r2, [r3, #0]
 80051d2:	1dbb      	adds	r3, r7, #6
 80051d4:	1c0a      	adds	r2, r1, #0
 80051d6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80051d8:	1dbb      	adds	r3, r7, #6
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	197b      	adds	r3, r7, r5
 80051e0:	8819      	ldrh	r1, [r3, #0]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	4b23      	ldr	r3, [pc, #140]	@ (8005274 <I2C_RequestMemoryRead+0xc0>)
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	2300      	movs	r3, #0
 80051ea:	f000 fa41 	bl	8005670 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f0:	6a39      	ldr	r1, [r7, #32]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f000 f8b9 	bl	800536c <I2C_WaitOnTXISFlagUntilTimeout>
 80051fa:	1e03      	subs	r3, r0, #0
 80051fc:	d001      	beq.n	8005202 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e033      	b.n	800526a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005202:	1dbb      	adds	r3, r7, #6
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d107      	bne.n	800521a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800520a:	2308      	movs	r3, #8
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	629a      	str	r2, [r3, #40]	@ 0x28
 8005218:	e019      	b.n	800524e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800521a:	2308      	movs	r3, #8
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	0a1b      	lsrs	r3, r3, #8
 8005222:	b29b      	uxth	r3, r3
 8005224:	b2da      	uxtb	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800522e:	6a39      	ldr	r1, [r7, #32]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	0018      	movs	r0, r3
 8005234:	f000 f89a 	bl	800536c <I2C_WaitOnTXISFlagUntilTimeout>
 8005238:	1e03      	subs	r3, r0, #0
 800523a:	d001      	beq.n	8005240 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e014      	b.n	800526a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005240:	2308      	movs	r3, #8
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b2da      	uxtb	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800524e:	6a3a      	ldr	r2, [r7, #32]
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	0013      	movs	r3, r2
 8005258:	2200      	movs	r2, #0
 800525a:	2140      	movs	r1, #64	@ 0x40
 800525c:	f000 f82e 	bl	80052bc <I2C_WaitOnFlagUntilTimeout>
 8005260:	1e03      	subs	r3, r0, #0
 8005262:	d001      	beq.n	8005268 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	0018      	movs	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	b004      	add	sp, #16
 8005270:	bdb0      	pop	{r4, r5, r7, pc}
 8005272:	46c0      	nop			@ (mov r8, r8)
 8005274:	80002000 	.word	0x80002000

08005278 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	2202      	movs	r2, #2
 8005288:	4013      	ands	r3, r2
 800528a:	2b02      	cmp	r3, #2
 800528c:	d103      	bne.n	8005296 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	2201      	movs	r2, #1
 800529e:	4013      	ands	r3, r2
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d007      	beq.n	80052b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2101      	movs	r1, #1
 80052b0:	430a      	orrs	r2, r1
 80052b2:	619a      	str	r2, [r3, #24]
  }
}
 80052b4:	46c0      	nop			@ (mov r8, r8)
 80052b6:	46bd      	mov	sp, r7
 80052b8:	b002      	add	sp, #8
 80052ba:	bd80      	pop	{r7, pc}

080052bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	1dfb      	adds	r3, r7, #7
 80052ca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052cc:	e03a      	b.n	8005344 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	0018      	movs	r0, r3
 80052d6:	f000 f8d3 	bl	8005480 <I2C_IsErrorOccurred>
 80052da:	1e03      	subs	r3, r0, #0
 80052dc:	d001      	beq.n	80052e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e040      	b.n	8005364 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	3301      	adds	r3, #1
 80052e6:	d02d      	beq.n	8005344 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e8:	f7ff f938 	bl	800455c <HAL_GetTick>
 80052ec:	0002      	movs	r2, r0
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <I2C_WaitOnFlagUntilTimeout+0x42>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d122      	bne.n	8005344 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	4013      	ands	r3, r2
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	425a      	negs	r2, r3
 800530e:	4153      	adcs	r3, r2
 8005310:	b2db      	uxtb	r3, r3
 8005312:	001a      	movs	r2, r3
 8005314:	1dfb      	adds	r3, r7, #7
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d113      	bne.n	8005344 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005320:	2220      	movs	r2, #32
 8005322:	431a      	orrs	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2241      	movs	r2, #65	@ 0x41
 800532c:	2120      	movs	r1, #32
 800532e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2242      	movs	r2, #66	@ 0x42
 8005334:	2100      	movs	r1, #0
 8005336:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2240      	movs	r2, #64	@ 0x40
 800533c:	2100      	movs	r1, #0
 800533e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e00f      	b.n	8005364 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4013      	ands	r3, r2
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	425a      	negs	r2, r3
 8005354:	4153      	adcs	r3, r2
 8005356:	b2db      	uxtb	r3, r3
 8005358:	001a      	movs	r2, r3
 800535a:	1dfb      	adds	r3, r7, #7
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d0b5      	beq.n	80052ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b004      	add	sp, #16
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005378:	e032      	b.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	0018      	movs	r0, r3
 8005382:	f000 f87d 	bl	8005480 <I2C_IsErrorOccurred>
 8005386:	1e03      	subs	r3, r0, #0
 8005388:	d001      	beq.n	800538e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e030      	b.n	80053f0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	3301      	adds	r3, #1
 8005392:	d025      	beq.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005394:	f7ff f8e2 	bl	800455c <HAL_GetTick>
 8005398:	0002      	movs	r2, r0
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d302      	bcc.n	80053aa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d11a      	bne.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2202      	movs	r2, #2
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d013      	beq.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053bc:	2220      	movs	r2, #32
 80053be:	431a      	orrs	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2241      	movs	r2, #65	@ 0x41
 80053c8:	2120      	movs	r1, #32
 80053ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2242      	movs	r2, #66	@ 0x42
 80053d0:	2100      	movs	r1, #0
 80053d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2240      	movs	r2, #64	@ 0x40
 80053d8:	2100      	movs	r1, #0
 80053da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e007      	b.n	80053f0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2202      	movs	r2, #2
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d1c5      	bne.n	800537a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	0018      	movs	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b004      	add	sp, #16
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005404:	e02f      	b.n	8005466 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	0018      	movs	r0, r3
 800540e:	f000 f837 	bl	8005480 <I2C_IsErrorOccurred>
 8005412:	1e03      	subs	r3, r0, #0
 8005414:	d001      	beq.n	800541a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e02d      	b.n	8005476 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541a:	f7ff f89f 	bl	800455c <HAL_GetTick>
 800541e:	0002      	movs	r2, r0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d11a      	bne.n	8005466 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	2220      	movs	r2, #32
 8005438:	4013      	ands	r3, r2
 800543a:	2b20      	cmp	r3, #32
 800543c:	d013      	beq.n	8005466 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005442:	2220      	movs	r2, #32
 8005444:	431a      	orrs	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2241      	movs	r2, #65	@ 0x41
 800544e:	2120      	movs	r1, #32
 8005450:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2242      	movs	r2, #66	@ 0x42
 8005456:	2100      	movs	r1, #0
 8005458:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2240      	movs	r2, #64	@ 0x40
 800545e:	2100      	movs	r1, #0
 8005460:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e007      	b.n	8005476 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	2220      	movs	r2, #32
 800546e:	4013      	ands	r3, r2
 8005470:	2b20      	cmp	r3, #32
 8005472:	d1c8      	bne.n	8005406 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	0018      	movs	r0, r3
 8005478:	46bd      	mov	sp, r7
 800547a:	b004      	add	sp, #16
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	@ 0x28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800548c:	2327      	movs	r3, #39	@ 0x27
 800548e:	18fb      	adds	r3, r7, r3
 8005490:	2200      	movs	r2, #0
 8005492:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2210      	movs	r2, #16
 80054a8:	4013      	ands	r3, r2
 80054aa:	d100      	bne.n	80054ae <I2C_IsErrorOccurred+0x2e>
 80054ac:	e079      	b.n	80055a2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2210      	movs	r2, #16
 80054b4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054b6:	e057      	b.n	8005568 <I2C_IsErrorOccurred+0xe8>
 80054b8:	2227      	movs	r2, #39	@ 0x27
 80054ba:	18bb      	adds	r3, r7, r2
 80054bc:	18ba      	adds	r2, r7, r2
 80054be:	7812      	ldrb	r2, [r2, #0]
 80054c0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	3301      	adds	r3, #1
 80054c6:	d04f      	beq.n	8005568 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054c8:	f7ff f848 	bl	800455c <HAL_GetTick>
 80054cc:	0002      	movs	r2, r0
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <I2C_IsErrorOccurred+0x5e>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d144      	bne.n	8005568 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	2380      	movs	r3, #128	@ 0x80
 80054e6:	01db      	lsls	r3, r3, #7
 80054e8:	4013      	ands	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80054ec:	2013      	movs	r0, #19
 80054ee:	183b      	adds	r3, r7, r0
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	2142      	movs	r1, #66	@ 0x42
 80054f4:	5c52      	ldrb	r2, [r2, r1]
 80054f6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	2380      	movs	r3, #128	@ 0x80
 8005500:	021b      	lsls	r3, r3, #8
 8005502:	401a      	ands	r2, r3
 8005504:	2380      	movs	r3, #128	@ 0x80
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	429a      	cmp	r2, r3
 800550a:	d126      	bne.n	800555a <I2C_IsErrorOccurred+0xda>
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	2380      	movs	r3, #128	@ 0x80
 8005510:	01db      	lsls	r3, r3, #7
 8005512:	429a      	cmp	r2, r3
 8005514:	d021      	beq.n	800555a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005516:	183b      	adds	r3, r7, r0
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b20      	cmp	r3, #32
 800551c:	d01d      	beq.n	800555a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2180      	movs	r1, #128	@ 0x80
 800552a:	01c9      	lsls	r1, r1, #7
 800552c:	430a      	orrs	r2, r1
 800552e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005530:	f7ff f814 	bl	800455c <HAL_GetTick>
 8005534:	0003      	movs	r3, r0
 8005536:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005538:	e00f      	b.n	800555a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800553a:	f7ff f80f 	bl	800455c <HAL_GetTick>
 800553e:	0002      	movs	r2, r0
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b19      	cmp	r3, #25
 8005546:	d908      	bls.n	800555a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	2220      	movs	r2, #32
 800554c:	4313      	orrs	r3, r2
 800554e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005550:	2327      	movs	r3, #39	@ 0x27
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	2201      	movs	r2, #1
 8005556:	701a      	strb	r2, [r3, #0]

              break;
 8005558:	e006      	b.n	8005568 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	2220      	movs	r2, #32
 8005562:	4013      	ands	r3, r2
 8005564:	2b20      	cmp	r3, #32
 8005566:	d1e8      	bne.n	800553a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	2220      	movs	r2, #32
 8005570:	4013      	ands	r3, r2
 8005572:	2b20      	cmp	r3, #32
 8005574:	d004      	beq.n	8005580 <I2C_IsErrorOccurred+0x100>
 8005576:	2327      	movs	r3, #39	@ 0x27
 8005578:	18fb      	adds	r3, r7, r3
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d09b      	beq.n	80054b8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005580:	2327      	movs	r3, #39	@ 0x27
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d103      	bne.n	8005592 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2220      	movs	r2, #32
 8005590:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	2204      	movs	r2, #4
 8005596:	4313      	orrs	r3, r2
 8005598:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800559a:	2327      	movs	r3, #39	@ 0x27
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	2380      	movs	r3, #128	@ 0x80
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	4013      	ands	r3, r2
 80055b2:	d00c      	beq.n	80055ce <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2201      	movs	r2, #1
 80055b8:	4313      	orrs	r3, r2
 80055ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2280      	movs	r2, #128	@ 0x80
 80055c2:	0052      	lsls	r2, r2, #1
 80055c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055c6:	2327      	movs	r3, #39	@ 0x27
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	2201      	movs	r2, #1
 80055cc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	2380      	movs	r3, #128	@ 0x80
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4013      	ands	r3, r2
 80055d6:	d00c      	beq.n	80055f2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	2208      	movs	r2, #8
 80055dc:	4313      	orrs	r3, r2
 80055de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2280      	movs	r2, #128	@ 0x80
 80055e6:	00d2      	lsls	r2, r2, #3
 80055e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055ea:	2327      	movs	r3, #39	@ 0x27
 80055ec:	18fb      	adds	r3, r7, r3
 80055ee:	2201      	movs	r2, #1
 80055f0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	2380      	movs	r3, #128	@ 0x80
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4013      	ands	r3, r2
 80055fa:	d00c      	beq.n	8005616 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	2202      	movs	r2, #2
 8005600:	4313      	orrs	r3, r2
 8005602:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2280      	movs	r2, #128	@ 0x80
 800560a:	0092      	lsls	r2, r2, #2
 800560c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800560e:	2327      	movs	r3, #39	@ 0x27
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	2201      	movs	r2, #1
 8005614:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005616:	2327      	movs	r3, #39	@ 0x27
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01d      	beq.n	800565c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	0018      	movs	r0, r3
 8005624:	f7ff fe28 	bl	8005278 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	490e      	ldr	r1, [pc, #56]	@ (800566c <I2C_IsErrorOccurred+0x1ec>)
 8005634:	400a      	ands	r2, r1
 8005636:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	431a      	orrs	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2241      	movs	r2, #65	@ 0x41
 8005648:	2120      	movs	r1, #32
 800564a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2242      	movs	r2, #66	@ 0x42
 8005650:	2100      	movs	r1, #0
 8005652:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2240      	movs	r2, #64	@ 0x40
 8005658:	2100      	movs	r1, #0
 800565a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800565c:	2327      	movs	r3, #39	@ 0x27
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	781b      	ldrb	r3, [r3, #0]
}
 8005662:	0018      	movs	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	b00a      	add	sp, #40	@ 0x28
 8005668:	bd80      	pop	{r7, pc}
 800566a:	46c0      	nop			@ (mov r8, r8)
 800566c:	fe00e800 	.word	0xfe00e800

08005670 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005670:	b590      	push	{r4, r7, lr}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	0008      	movs	r0, r1
 800567a:	0011      	movs	r1, r2
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	240a      	movs	r4, #10
 8005680:	193b      	adds	r3, r7, r4
 8005682:	1c02      	adds	r2, r0, #0
 8005684:	801a      	strh	r2, [r3, #0]
 8005686:	2009      	movs	r0, #9
 8005688:	183b      	adds	r3, r7, r0
 800568a:	1c0a      	adds	r2, r1, #0
 800568c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800568e:	193b      	adds	r3, r7, r4
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	059b      	lsls	r3, r3, #22
 8005694:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005696:	183b      	adds	r3, r7, r0
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	0419      	lsls	r1, r3, #16
 800569c:	23ff      	movs	r3, #255	@ 0xff
 800569e:	041b      	lsls	r3, r3, #16
 80056a0:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056a2:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056aa:	4313      	orrs	r3, r2
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056ba:	0d51      	lsrs	r1, r2, #21
 80056bc:	2280      	movs	r2, #128	@ 0x80
 80056be:	00d2      	lsls	r2, r2, #3
 80056c0:	400a      	ands	r2, r1
 80056c2:	4907      	ldr	r1, [pc, #28]	@ (80056e0 <I2C_TransferConfig+0x70>)
 80056c4:	430a      	orrs	r2, r1
 80056c6:	43d2      	mvns	r2, r2
 80056c8:	401a      	ands	r2, r3
 80056ca:	0011      	movs	r1, r2
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	46bd      	mov	sp, r7
 80056da:	b007      	add	sp, #28
 80056dc:	bd90      	pop	{r4, r7, pc}
 80056de:	46c0      	nop			@ (mov r8, r8)
 80056e0:	03ff63ff 	.word	0x03ff63ff

080056e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2241      	movs	r2, #65	@ 0x41
 80056f2:	5c9b      	ldrb	r3, [r3, r2]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d138      	bne.n	800576c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2240      	movs	r2, #64	@ 0x40
 80056fe:	5c9b      	ldrb	r3, [r3, r2]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005704:	2302      	movs	r3, #2
 8005706:	e032      	b.n	800576e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2240      	movs	r2, #64	@ 0x40
 800570c:	2101      	movs	r1, #1
 800570e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2241      	movs	r2, #65	@ 0x41
 8005714:	2124      	movs	r1, #36	@ 0x24
 8005716:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2101      	movs	r1, #1
 8005724:	438a      	bics	r2, r1
 8005726:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4911      	ldr	r1, [pc, #68]	@ (8005778 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005734:	400a      	ands	r2, r1
 8005736:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6819      	ldr	r1, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2101      	movs	r1, #1
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2241      	movs	r2, #65	@ 0x41
 800575c:	2120      	movs	r1, #32
 800575e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2240      	movs	r2, #64	@ 0x40
 8005764:	2100      	movs	r1, #0
 8005766:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	0018      	movs	r0, r3
 8005770:	46bd      	mov	sp, r7
 8005772:	b002      	add	sp, #8
 8005774:	bd80      	pop	{r7, pc}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	ffffefff 	.word	0xffffefff

0800577c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2241      	movs	r2, #65	@ 0x41
 800578a:	5c9b      	ldrb	r3, [r3, r2]
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b20      	cmp	r3, #32
 8005790:	d139      	bne.n	8005806 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2240      	movs	r2, #64	@ 0x40
 8005796:	5c9b      	ldrb	r3, [r3, r2]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800579c:	2302      	movs	r3, #2
 800579e:	e033      	b.n	8005808 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2240      	movs	r2, #64	@ 0x40
 80057a4:	2101      	movs	r1, #1
 80057a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2241      	movs	r2, #65	@ 0x41
 80057ac:	2124      	movs	r1, #36	@ 0x24
 80057ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2101      	movs	r1, #1
 80057bc:	438a      	bics	r2, r1
 80057be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4a11      	ldr	r2, [pc, #68]	@ (8005810 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2101      	movs	r1, #1
 80057ee:	430a      	orrs	r2, r1
 80057f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2241      	movs	r2, #65	@ 0x41
 80057f6:	2120      	movs	r1, #32
 80057f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2240      	movs	r2, #64	@ 0x40
 80057fe:	2100      	movs	r1, #0
 8005800:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	e000      	b.n	8005808 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005806:	2302      	movs	r3, #2
  }
}
 8005808:	0018      	movs	r0, r3
 800580a:	46bd      	mov	sp, r7
 800580c:	b004      	add	sp, #16
 800580e:	bd80      	pop	{r7, pc}
 8005810:	fffff0ff 	.word	0xfffff0ff

08005814 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	000a      	movs	r2, r1
 800581e:	1cfb      	adds	r3, r7, #3
 8005820:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8005822:	4b0f      	ldr	r3, [pc, #60]	@ (8005860 <HAL_PWR_EnterSTOPMode+0x4c>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b0e      	ldr	r3, [pc, #56]	@ (8005860 <HAL_PWR_EnterSTOPMode+0x4c>)
 8005828:	2107      	movs	r1, #7
 800582a:	438a      	bics	r2, r1
 800582c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800582e:	4b0d      	ldr	r3, [pc, #52]	@ (8005864 <HAL_PWR_EnterSTOPMode+0x50>)
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	4b0c      	ldr	r3, [pc, #48]	@ (8005864 <HAL_PWR_EnterSTOPMode+0x50>)
 8005834:	2104      	movs	r1, #4
 8005836:	430a      	orrs	r2, r1
 8005838:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800583a:	1cfb      	adds	r3, r7, #3
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d101      	bne.n	8005846 <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005842:	bf30      	wfi
 8005844:	e002      	b.n	800584c <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005846:	bf40      	sev
    __WFE();
 8005848:	bf20      	wfe
    __WFE();
 800584a:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800584c:	4b05      	ldr	r3, [pc, #20]	@ (8005864 <HAL_PWR_EnterSTOPMode+0x50>)
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	4b04      	ldr	r3, [pc, #16]	@ (8005864 <HAL_PWR_EnterSTOPMode+0x50>)
 8005852:	2104      	movs	r1, #4
 8005854:	438a      	bics	r2, r1
 8005856:	611a      	str	r2, [r3, #16]
}
 8005858:	46c0      	nop			@ (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	b002      	add	sp, #8
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40007000 	.word	0x40007000
 8005864:	e000ed00 	.word	0xe000ed00

08005868 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e1d0      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2201      	movs	r2, #1
 8005880:	4013      	ands	r3, r2
 8005882:	d100      	bne.n	8005886 <HAL_RCC_OscConfig+0x1e>
 8005884:	e069      	b.n	800595a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005886:	4bc8      	ldr	r3, [pc, #800]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2238      	movs	r2, #56	@ 0x38
 800588c:	4013      	ands	r3, r2
 800588e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b08      	cmp	r3, #8
 8005894:	d105      	bne.n	80058a2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d15d      	bne.n	800595a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e1bc      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	2380      	movs	r3, #128	@ 0x80
 80058a8:	025b      	lsls	r3, r3, #9
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d107      	bne.n	80058be <HAL_RCC_OscConfig+0x56>
 80058ae:	4bbe      	ldr	r3, [pc, #760]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4bbd      	ldr	r3, [pc, #756]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80058b4:	2180      	movs	r1, #128	@ 0x80
 80058b6:	0249      	lsls	r1, r1, #9
 80058b8:	430a      	orrs	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e020      	b.n	8005900 <HAL_RCC_OscConfig+0x98>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	23a0      	movs	r3, #160	@ 0xa0
 80058c4:	02db      	lsls	r3, r3, #11
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d10e      	bne.n	80058e8 <HAL_RCC_OscConfig+0x80>
 80058ca:	4bb7      	ldr	r3, [pc, #732]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	4bb6      	ldr	r3, [pc, #728]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80058d0:	2180      	movs	r1, #128	@ 0x80
 80058d2:	02c9      	lsls	r1, r1, #11
 80058d4:	430a      	orrs	r2, r1
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	4bb3      	ldr	r3, [pc, #716]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4bb2      	ldr	r3, [pc, #712]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80058de:	2180      	movs	r1, #128	@ 0x80
 80058e0:	0249      	lsls	r1, r1, #9
 80058e2:	430a      	orrs	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	e00b      	b.n	8005900 <HAL_RCC_OscConfig+0x98>
 80058e8:	4baf      	ldr	r3, [pc, #700]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	4bae      	ldr	r3, [pc, #696]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80058ee:	49af      	ldr	r1, [pc, #700]	@ (8005bac <HAL_RCC_OscConfig+0x344>)
 80058f0:	400a      	ands	r2, r1
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	4bac      	ldr	r3, [pc, #688]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	4bab      	ldr	r3, [pc, #684]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80058fa:	49ad      	ldr	r1, [pc, #692]	@ (8005bb0 <HAL_RCC_OscConfig+0x348>)
 80058fc:	400a      	ands	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d014      	beq.n	8005932 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005908:	f7fe fe28 	bl	800455c <HAL_GetTick>
 800590c:	0003      	movs	r3, r0
 800590e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005912:	f7fe fe23 	bl	800455c <HAL_GetTick>
 8005916:	0002      	movs	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b64      	cmp	r3, #100	@ 0x64
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e17b      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005924:	4ba0      	ldr	r3, [pc, #640]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	2380      	movs	r3, #128	@ 0x80
 800592a:	029b      	lsls	r3, r3, #10
 800592c:	4013      	ands	r3, r2
 800592e:	d0f0      	beq.n	8005912 <HAL_RCC_OscConfig+0xaa>
 8005930:	e013      	b.n	800595a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005932:	f7fe fe13 	bl	800455c <HAL_GetTick>
 8005936:	0003      	movs	r3, r0
 8005938:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800593c:	f7fe fe0e 	bl	800455c <HAL_GetTick>
 8005940:	0002      	movs	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b64      	cmp	r3, #100	@ 0x64
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e166      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800594e:	4b96      	ldr	r3, [pc, #600]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	2380      	movs	r3, #128	@ 0x80
 8005954:	029b      	lsls	r3, r3, #10
 8005956:	4013      	ands	r3, r2
 8005958:	d1f0      	bne.n	800593c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2202      	movs	r2, #2
 8005960:	4013      	ands	r3, r2
 8005962:	d100      	bne.n	8005966 <HAL_RCC_OscConfig+0xfe>
 8005964:	e086      	b.n	8005a74 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005966:	4b90      	ldr	r3, [pc, #576]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2238      	movs	r2, #56	@ 0x38
 800596c:	4013      	ands	r3, r2
 800596e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d12f      	bne.n	80059d6 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e14c      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005982:	4b89      	ldr	r3, [pc, #548]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4a8b      	ldr	r2, [pc, #556]	@ (8005bb4 <HAL_RCC_OscConfig+0x34c>)
 8005988:	4013      	ands	r3, r2
 800598a:	0019      	movs	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	021a      	lsls	r2, r3, #8
 8005992:	4b85      	ldr	r3, [pc, #532]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d112      	bne.n	80059c4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800599e:	4b82      	ldr	r3, [pc, #520]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a85      	ldr	r2, [pc, #532]	@ (8005bb8 <HAL_RCC_OscConfig+0x350>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	0019      	movs	r1, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	4b7e      	ldr	r3, [pc, #504]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80059ae:	430a      	orrs	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80059b2:	4b7d      	ldr	r3, [pc, #500]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	0adb      	lsrs	r3, r3, #11
 80059b8:	2207      	movs	r2, #7
 80059ba:	4013      	ands	r3, r2
 80059bc:	4a7f      	ldr	r2, [pc, #508]	@ (8005bbc <HAL_RCC_OscConfig+0x354>)
 80059be:	40da      	lsrs	r2, r3
 80059c0:	4b7f      	ldr	r3, [pc, #508]	@ (8005bc0 <HAL_RCC_OscConfig+0x358>)
 80059c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059c4:	4b7f      	ldr	r3, [pc, #508]	@ (8005bc4 <HAL_RCC_OscConfig+0x35c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	0018      	movs	r0, r3
 80059ca:	f7fe fd6b 	bl	80044a4 <HAL_InitTick>
 80059ce:	1e03      	subs	r3, r0, #0
 80059d0:	d050      	beq.n	8005a74 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e122      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d030      	beq.n	8005a40 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80059de:	4b72      	ldr	r3, [pc, #456]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a75      	ldr	r2, [pc, #468]	@ (8005bb8 <HAL_RCC_OscConfig+0x350>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	0019      	movs	r1, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	4b6e      	ldr	r3, [pc, #440]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80059ee:	430a      	orrs	r2, r1
 80059f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80059f2:	4b6d      	ldr	r3, [pc, #436]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4b6c      	ldr	r3, [pc, #432]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 80059f8:	2180      	movs	r1, #128	@ 0x80
 80059fa:	0049      	lsls	r1, r1, #1
 80059fc:	430a      	orrs	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fe fdac 	bl	800455c <HAL_GetTick>
 8005a04:	0003      	movs	r3, r0
 8005a06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005a0a:	f7fe fda7 	bl	800455c <HAL_GetTick>
 8005a0e:	0002      	movs	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e0ff      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a1c:	4b62      	ldr	r3, [pc, #392]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	2380      	movs	r3, #128	@ 0x80
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4013      	ands	r3, r2
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a28:	4b5f      	ldr	r3, [pc, #380]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	4a61      	ldr	r2, [pc, #388]	@ (8005bb4 <HAL_RCC_OscConfig+0x34c>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	0019      	movs	r1, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	021a      	lsls	r2, r3, #8
 8005a38:	4b5b      	ldr	r3, [pc, #364]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	e019      	b.n	8005a74 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8005a40:	4b59      	ldr	r3, [pc, #356]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	4b58      	ldr	r3, [pc, #352]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005a46:	4960      	ldr	r1, [pc, #384]	@ (8005bc8 <HAL_RCC_OscConfig+0x360>)
 8005a48:	400a      	ands	r2, r1
 8005a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4c:	f7fe fd86 	bl	800455c <HAL_GetTick>
 8005a50:	0003      	movs	r3, r0
 8005a52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005a56:	f7fe fd81 	bl	800455c <HAL_GetTick>
 8005a5a:	0002      	movs	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e0d9      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a68:	4b4f      	ldr	r3, [pc, #316]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	2380      	movs	r3, #128	@ 0x80
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4013      	ands	r3, r2
 8005a72:	d1f0      	bne.n	8005a56 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2208      	movs	r2, #8
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d042      	beq.n	8005b04 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2238      	movs	r2, #56	@ 0x38
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b18      	cmp	r3, #24
 8005a88:	d105      	bne.n	8005a96 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d138      	bne.n	8005b04 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e0c2      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d019      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005a9e:	4b42      	ldr	r3, [pc, #264]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005aa0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005aa2:	4b41      	ldr	r3, [pc, #260]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aaa:	f7fe fd57 	bl	800455c <HAL_GetTick>
 8005aae:	0003      	movs	r3, r0
 8005ab0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005ab4:	f7fe fd52 	bl	800455c <HAL_GetTick>
 8005ab8:	0002      	movs	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e0aa      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005ac6:	4b38      	ldr	r3, [pc, #224]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aca:	2202      	movs	r2, #2
 8005acc:	4013      	ands	r3, r2
 8005ace:	d0f1      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x24c>
 8005ad0:	e018      	b.n	8005b04 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005ad2:	4b35      	ldr	r3, [pc, #212]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005ad4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ad6:	4b34      	ldr	r3, [pc, #208]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005ad8:	2101      	movs	r1, #1
 8005ada:	438a      	bics	r2, r1
 8005adc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ade:	f7fe fd3d 	bl	800455c <HAL_GetTick>
 8005ae2:	0003      	movs	r3, r0
 8005ae4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005ae8:	f7fe fd38 	bl	800455c <HAL_GetTick>
 8005aec:	0002      	movs	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e090      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005afa:	4b2b      	ldr	r3, [pc, #172]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005afe:	2202      	movs	r2, #2
 8005b00:	4013      	ands	r3, r2
 8005b02:	d1f1      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d100      	bne.n	8005b10 <HAL_RCC_OscConfig+0x2a8>
 8005b0e:	e084      	b.n	8005c1a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b10:	230f      	movs	r3, #15
 8005b12:	18fb      	adds	r3, r7, r3
 8005b14:	2200      	movs	r2, #0
 8005b16:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005b18:	4b23      	ldr	r3, [pc, #140]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2238      	movs	r2, #56	@ 0x38
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	d106      	bne.n	8005b32 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d000      	beq.n	8005b2e <HAL_RCC_OscConfig+0x2c6>
 8005b2c:	e075      	b.n	8005c1a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e074      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d106      	bne.n	8005b48 <HAL_RCC_OscConfig+0x2e0>
 8005b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005b3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005b40:	2101      	movs	r1, #1
 8005b42:	430a      	orrs	r2, r1
 8005b44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b46:	e01c      	b.n	8005b82 <HAL_RCC_OscConfig+0x31a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b05      	cmp	r3, #5
 8005b4e:	d10c      	bne.n	8005b6a <HAL_RCC_OscConfig+0x302>
 8005b50:	4b15      	ldr	r3, [pc, #84]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005b52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b54:	4b14      	ldr	r3, [pc, #80]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005b56:	2104      	movs	r1, #4
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b5c:	4b12      	ldr	r3, [pc, #72]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005b5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b60:	4b11      	ldr	r3, [pc, #68]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005b62:	2101      	movs	r1, #1
 8005b64:	430a      	orrs	r2, r1
 8005b66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b68:	e00b      	b.n	8005b82 <HAL_RCC_OscConfig+0x31a>
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005b6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005b70:	2101      	movs	r1, #1
 8005b72:	438a      	bics	r2, r1
 8005b74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b76:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005b78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba8 <HAL_RCC_OscConfig+0x340>)
 8005b7c:	2104      	movs	r1, #4
 8005b7e:	438a      	bics	r2, r1
 8005b80:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d028      	beq.n	8005bdc <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8a:	f7fe fce7 	bl	800455c <HAL_GetTick>
 8005b8e:	0003      	movs	r3, r0
 8005b90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005b92:	e01d      	b.n	8005bd0 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b94:	f7fe fce2 	bl	800455c <HAL_GetTick>
 8005b98:	0002      	movs	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8005bcc <HAL_RCC_OscConfig+0x364>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d915      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e039      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	fffeffff 	.word	0xfffeffff
 8005bb0:	fffbffff 	.word	0xfffbffff
 8005bb4:	ffff80ff 	.word	0xffff80ff
 8005bb8:	ffffc7ff 	.word	0xffffc7ff
 8005bbc:	02dc6c00 	.word	0x02dc6c00
 8005bc0:	20000000 	.word	0x20000000
 8005bc4:	20000004 	.word	0x20000004
 8005bc8:	fffffeff 	.word	0xfffffeff
 8005bcc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005bd0:	4b14      	ldr	r3, [pc, #80]	@ (8005c24 <HAL_RCC_OscConfig+0x3bc>)
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d0dc      	beq.n	8005b94 <HAL_RCC_OscConfig+0x32c>
 8005bda:	e013      	b.n	8005c04 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bdc:	f7fe fcbe 	bl	800455c <HAL_GetTick>
 8005be0:	0003      	movs	r3, r0
 8005be2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005be4:	e009      	b.n	8005bfa <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be6:	f7fe fcb9 	bl	800455c <HAL_GetTick>
 8005bea:	0002      	movs	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8005c28 <HAL_RCC_OscConfig+0x3c0>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e010      	b.n	8005c1c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8005c24 <HAL_RCC_OscConfig+0x3bc>)
 8005bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bfe:	2202      	movs	r2, #2
 8005c00:	4013      	ands	r3, r2
 8005c02:	d1f0      	bne.n	8005be6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005c04:	230f      	movs	r3, #15
 8005c06:	18fb      	adds	r3, r7, r3
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d105      	bne.n	8005c1a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005c0e:	4b05      	ldr	r3, [pc, #20]	@ (8005c24 <HAL_RCC_OscConfig+0x3bc>)
 8005c10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c12:	4b04      	ldr	r3, [pc, #16]	@ (8005c24 <HAL_RCC_OscConfig+0x3bc>)
 8005c14:	4905      	ldr	r1, [pc, #20]	@ (8005c2c <HAL_RCC_OscConfig+0x3c4>)
 8005c16:	400a      	ands	r2, r1
 8005c18:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b006      	add	sp, #24
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40021000 	.word	0x40021000
 8005c28:	00001388 	.word	0x00001388
 8005c2c:	efffffff 	.word	0xefffffff

08005c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0df      	b.n	8005e04 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c44:	4b71      	ldr	r3, [pc, #452]	@ (8005e0c <HAL_RCC_ClockConfig+0x1dc>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2207      	movs	r2, #7
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d91e      	bls.n	8005c90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c52:	4b6e      	ldr	r3, [pc, #440]	@ (8005e0c <HAL_RCC_ClockConfig+0x1dc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2207      	movs	r2, #7
 8005c58:	4393      	bics	r3, r2
 8005c5a:	0019      	movs	r1, r3
 8005c5c:	4b6b      	ldr	r3, [pc, #428]	@ (8005e0c <HAL_RCC_ClockConfig+0x1dc>)
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c64:	f7fe fc7a 	bl	800455c <HAL_GetTick>
 8005c68:	0003      	movs	r3, r0
 8005c6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c6c:	e009      	b.n	8005c82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005c6e:	f7fe fc75 	bl	800455c <HAL_GetTick>
 8005c72:	0002      	movs	r2, r0
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	4a65      	ldr	r2, [pc, #404]	@ (8005e10 <HAL_RCC_ClockConfig+0x1e0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e0c0      	b.n	8005e04 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c82:	4b62      	ldr	r3, [pc, #392]	@ (8005e0c <HAL_RCC_ClockConfig+0x1dc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2207      	movs	r2, #7
 8005c88:	4013      	ands	r3, r2
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d1ee      	bne.n	8005c6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2202      	movs	r2, #2
 8005c96:	4013      	ands	r3, r2
 8005c98:	d017      	beq.n	8005cca <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d008      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005ca4:	4b5b      	ldr	r3, [pc, #364]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	4a5b      	ldr	r2, [pc, #364]	@ (8005e18 <HAL_RCC_ClockConfig+0x1e8>)
 8005caa:	401a      	ands	r2, r3
 8005cac:	4b59      	ldr	r3, [pc, #356]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005cae:	21b0      	movs	r1, #176	@ 0xb0
 8005cb0:	0109      	lsls	r1, r1, #4
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb6:	4b57      	ldr	r3, [pc, #348]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	4a58      	ldr	r2, [pc, #352]	@ (8005e1c <HAL_RCC_ClockConfig+0x1ec>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	0019      	movs	r1, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	4b53      	ldr	r3, [pc, #332]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	d04b      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d107      	bne.n	8005cec <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	2380      	movs	r3, #128	@ 0x80
 8005ce2:	029b      	lsls	r3, r3, #10
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	d11f      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e08b      	b.n	8005e04 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cf4:	4b47      	ldr	r3, [pc, #284]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	2380      	movs	r3, #128	@ 0x80
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d113      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e07f      	b.n	8005e04 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d106      	bne.n	8005d1a <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005d0c:	4b41      	ldr	r3, [pc, #260]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d10:	2202      	movs	r2, #2
 8005d12:	4013      	ands	r3, r2
 8005d14:	d108      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e074      	b.n	8005e04 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d1e:	2202      	movs	r2, #2
 8005d20:	4013      	ands	r3, r2
 8005d22:	d101      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e06d      	b.n	8005e04 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d28:	4b3a      	ldr	r3, [pc, #232]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2207      	movs	r2, #7
 8005d2e:	4393      	bics	r3, r2
 8005d30:	0019      	movs	r1, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	4b37      	ldr	r3, [pc, #220]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3c:	f7fe fc0e 	bl	800455c <HAL_GetTick>
 8005d40:	0003      	movs	r3, r0
 8005d42:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d44:	e009      	b.n	8005d5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005d46:	f7fe fc09 	bl	800455c <HAL_GetTick>
 8005d4a:	0002      	movs	r2, r0
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	4a2f      	ldr	r2, [pc, #188]	@ (8005e10 <HAL_RCC_ClockConfig+0x1e0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e054      	b.n	8005e04 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2238      	movs	r2, #56	@ 0x38
 8005d60:	401a      	ands	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d1ec      	bne.n	8005d46 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d6c:	4b27      	ldr	r3, [pc, #156]	@ (8005e0c <HAL_RCC_ClockConfig+0x1dc>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2207      	movs	r2, #7
 8005d72:	4013      	ands	r3, r2
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d21e      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7a:	4b24      	ldr	r3, [pc, #144]	@ (8005e0c <HAL_RCC_ClockConfig+0x1dc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2207      	movs	r2, #7
 8005d80:	4393      	bics	r3, r2
 8005d82:	0019      	movs	r1, r3
 8005d84:	4b21      	ldr	r3, [pc, #132]	@ (8005e0c <HAL_RCC_ClockConfig+0x1dc>)
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d8c:	f7fe fbe6 	bl	800455c <HAL_GetTick>
 8005d90:	0003      	movs	r3, r0
 8005d92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d94:	e009      	b.n	8005daa <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005d96:	f7fe fbe1 	bl	800455c <HAL_GetTick>
 8005d9a:	0002      	movs	r2, r0
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e10 <HAL_RCC_ClockConfig+0x1e0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e02c      	b.n	8005e04 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005daa:	4b18      	ldr	r3, [pc, #96]	@ (8005e0c <HAL_RCC_ClockConfig+0x1dc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2207      	movs	r2, #7
 8005db0:	4013      	ands	r3, r2
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d1ee      	bne.n	8005d96 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc2:	4b14      	ldr	r3, [pc, #80]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	4a16      	ldr	r2, [pc, #88]	@ (8005e20 <HAL_RCC_ClockConfig+0x1f0>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	0019      	movs	r1, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	4b10      	ldr	r3, [pc, #64]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005dd6:	f000 f82b 	bl	8005e30 <HAL_RCC_GetSysClockFreq>
 8005dda:	0001      	movs	r1, r0
 8005ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8005e14 <HAL_RCC_ClockConfig+0x1e4>)
 8005dde:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005de0:	0a1b      	lsrs	r3, r3, #8
 8005de2:	220f      	movs	r2, #15
 8005de4:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005de6:	4b0f      	ldr	r3, [pc, #60]	@ (8005e24 <HAL_RCC_ClockConfig+0x1f4>)
 8005de8:	0092      	lsls	r2, r2, #2
 8005dea:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005dec:	221f      	movs	r2, #31
 8005dee:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005df0:	000a      	movs	r2, r1
 8005df2:	40da      	lsrs	r2, r3
 8005df4:	4b0c      	ldr	r3, [pc, #48]	@ (8005e28 <HAL_RCC_ClockConfig+0x1f8>)
 8005df6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005df8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e2c <HAL_RCC_ClockConfig+0x1fc>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f7fe fb51 	bl	80044a4 <HAL_InitTick>
 8005e02:	0003      	movs	r3, r0
}
 8005e04:	0018      	movs	r0, r3
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b004      	add	sp, #16
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40022000 	.word	0x40022000
 8005e10:	00001388 	.word	0x00001388
 8005e14:	40021000 	.word	0x40021000
 8005e18:	ffff84ff 	.word	0xffff84ff
 8005e1c:	fffff0ff 	.word	0xfffff0ff
 8005e20:	ffff8fff 	.word	0xffff8fff
 8005e24:	08007ce8 	.word	0x08007ce8
 8005e28:	20000000 	.word	0x20000000
 8005e2c:	20000004 	.word	0x20000004

08005e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e36:	4b1c      	ldr	r3, [pc, #112]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0x78>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	2238      	movs	r2, #56	@ 0x38
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d10f      	bne.n	8005e60 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005e40:	4b19      	ldr	r3, [pc, #100]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0x78>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	0adb      	lsrs	r3, r3, #11
 8005e46:	2207      	movs	r2, #7
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	409a      	lsls	r2, r3
 8005e4e:	0013      	movs	r3, r2
 8005e50:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	4815      	ldr	r0, [pc, #84]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x7c>)
 8005e56:	f7fa f969 	bl	800012c <__udivsi3>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	e01e      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e60:	4b11      	ldr	r3, [pc, #68]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0x78>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2238      	movs	r2, #56	@ 0x38
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d102      	bne.n	8005e72 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e6c:	4b10      	ldr	r3, [pc, #64]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x80>)
 8005e6e:	607b      	str	r3, [r7, #4]
 8005e70:	e015      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005e72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0x78>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2238      	movs	r2, #56	@ 0x38
 8005e78:	4013      	ands	r3, r2
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d103      	bne.n	8005e86 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005e7e:	2380      	movs	r3, #128	@ 0x80
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	607b      	str	r3, [r7, #4]
 8005e84:	e00b      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005e86:	4b08      	ldr	r3, [pc, #32]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0x78>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	2238      	movs	r2, #56	@ 0x38
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	2b18      	cmp	r3, #24
 8005e90:	d103      	bne.n	8005e9a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005e92:	23fa      	movs	r3, #250	@ 0xfa
 8005e94:	01db      	lsls	r3, r3, #7
 8005e96:	607b      	str	r3, [r7, #4]
 8005e98:	e001      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8005e9e:	687b      	ldr	r3, [r7, #4]
}
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b002      	add	sp, #8
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	02dc6c00 	.word	0x02dc6c00
 8005eb0:	007a1200 	.word	0x007a1200

08005eb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005eb8:	f7ff ffba 	bl	8005e30 <HAL_RCC_GetSysClockFreq>
 8005ebc:	0001      	movs	r1, r0
 8005ebe:	4b09      	ldr	r3, [pc, #36]	@ (8005ee4 <HAL_RCC_GetHCLKFreq+0x30>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	220f      	movs	r2, #15
 8005ec6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005ec8:	4b07      	ldr	r3, [pc, #28]	@ (8005ee8 <HAL_RCC_GetHCLKFreq+0x34>)
 8005eca:	0092      	lsls	r2, r2, #2
 8005ecc:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005ece:	221f      	movs	r2, #31
 8005ed0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005ed2:	000a      	movs	r2, r1
 8005ed4:	40da      	lsrs	r2, r3
 8005ed6:	4b05      	ldr	r3, [pc, #20]	@ (8005eec <HAL_RCC_GetHCLKFreq+0x38>)
 8005ed8:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8005eda:	4b04      	ldr	r3, [pc, #16]	@ (8005eec <HAL_RCC_GetHCLKFreq+0x38>)
 8005edc:	681b      	ldr	r3, [r3, #0]
}
 8005ede:	0018      	movs	r0, r3
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	08007ce8 	.word	0x08007ce8
 8005eec:	20000000 	.word	0x20000000

08005ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8005ef4:	f7ff ffde 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8005ef8:	0001      	movs	r1, r0
 8005efa:	4b07      	ldr	r3, [pc, #28]	@ (8005f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	0b1b      	lsrs	r3, r3, #12
 8005f00:	2207      	movs	r2, #7
 8005f02:	401a      	ands	r2, r3
 8005f04:	4b05      	ldr	r3, [pc, #20]	@ (8005f1c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005f06:	0092      	lsls	r2, r2, #2
 8005f08:	58d3      	ldr	r3, [r2, r3]
 8005f0a:	221f      	movs	r2, #31
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	40d9      	lsrs	r1, r3
 8005f10:	000b      	movs	r3, r1
}
 8005f12:	0018      	movs	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	08007d28 	.word	0x08007d28

08005f20 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005f28:	2313      	movs	r3, #19
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f30:	2312      	movs	r3, #18
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	2200      	movs	r2, #0
 8005f36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2240      	movs	r2, #64	@ 0x40
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d100      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005f42:	e079      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f44:	2011      	movs	r0, #17
 8005f46:	183b      	adds	r3, r7, r0
 8005f48:	2200      	movs	r2, #0
 8005f4a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f4c:	4b63      	ldr	r3, [pc, #396]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f50:	2380      	movs	r3, #128	@ 0x80
 8005f52:	055b      	lsls	r3, r3, #21
 8005f54:	4013      	ands	r3, r2
 8005f56:	d110      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f58:	4b60      	ldr	r3, [pc, #384]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f5c:	4b5f      	ldr	r3, [pc, #380]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f5e:	2180      	movs	r1, #128	@ 0x80
 8005f60:	0549      	lsls	r1, r1, #21
 8005f62:	430a      	orrs	r2, r1
 8005f64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005f66:	4b5d      	ldr	r3, [pc, #372]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f6a:	2380      	movs	r3, #128	@ 0x80
 8005f6c:	055b      	lsls	r3, r3, #21
 8005f6e:	4013      	ands	r3, r2
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f74:	183b      	adds	r3, r7, r0
 8005f76:	2201      	movs	r2, #1
 8005f78:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8005f7a:	4b58      	ldr	r3, [pc, #352]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f7e:	23c0      	movs	r3, #192	@ 0xc0
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4013      	ands	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d019      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d014      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8005f96:	4b51      	ldr	r3, [pc, #324]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f9a:	4a51      	ldr	r2, [pc, #324]	@ (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005fa2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005fa6:	2180      	movs	r1, #128	@ 0x80
 8005fa8:	0249      	lsls	r1, r1, #9
 8005faa:	430a      	orrs	r2, r1
 8005fac:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fae:	4b4b      	ldr	r3, [pc, #300]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005fb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005fb4:	494b      	ldr	r1, [pc, #300]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005fb6:	400a      	ands	r2, r1
 8005fb8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8005fba:	4b48      	ldr	r3, [pc, #288]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d016      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc8:	f7fe fac8 	bl	800455c <HAL_GetTick>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005fd0:	e00c      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd2:	f7fe fac3 	bl	800455c <HAL_GetTick>
 8005fd6:	0002      	movs	r2, r0
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	4a42      	ldr	r2, [pc, #264]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d904      	bls.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8005fe2:	2313      	movs	r3, #19
 8005fe4:	18fb      	adds	r3, r7, r3
 8005fe6:	2203      	movs	r2, #3
 8005fe8:	701a      	strb	r2, [r3, #0]
          break;
 8005fea:	e004      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005fec:	4b3b      	ldr	r3, [pc, #236]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d0ed      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8005ff6:	2313      	movs	r3, #19
 8005ff8:	18fb      	adds	r3, r7, r3
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006000:	4b36      	ldr	r3, [pc, #216]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006004:	4a36      	ldr	r2, [pc, #216]	@ (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006006:	4013      	ands	r3, r2
 8006008:	0019      	movs	r1, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	4b33      	ldr	r3, [pc, #204]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006010:	430a      	orrs	r2, r1
 8006012:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006014:	e005      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006016:	2312      	movs	r3, #18
 8006018:	18fb      	adds	r3, r7, r3
 800601a:	2213      	movs	r2, #19
 800601c:	18ba      	adds	r2, r7, r2
 800601e:	7812      	ldrb	r2, [r2, #0]
 8006020:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006022:	2311      	movs	r3, #17
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d105      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800602c:	4b2b      	ldr	r3, [pc, #172]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800602e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006030:	4b2a      	ldr	r3, [pc, #168]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006032:	492e      	ldr	r1, [pc, #184]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006034:	400a      	ands	r2, r1
 8006036:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2201      	movs	r2, #1
 800603e:	4013      	ands	r3, r2
 8006040:	d009      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006042:	4b26      	ldr	r3, [pc, #152]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006046:	2203      	movs	r2, #3
 8006048:	4393      	bics	r3, r2
 800604a:	0019      	movs	r1, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	4b22      	ldr	r3, [pc, #136]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006052:	430a      	orrs	r2, r1
 8006054:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2202      	movs	r2, #2
 800605c:	4013      	ands	r3, r2
 800605e:	d009      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006060:	4b1e      	ldr	r3, [pc, #120]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006064:	4a22      	ldr	r2, [pc, #136]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006066:	4013      	ands	r3, r2
 8006068:	0019      	movs	r1, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	4b1b      	ldr	r3, [pc, #108]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006070:	430a      	orrs	r2, r1
 8006072:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2220      	movs	r2, #32
 800607a:	4013      	ands	r3, r2
 800607c:	d008      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800607e:	4b17      	ldr	r3, [pc, #92]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	0899      	lsrs	r1, r3, #2
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695a      	ldr	r2, [r3, #20]
 800608a:	4b14      	ldr	r3, [pc, #80]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800608c:	430a      	orrs	r2, r1
 800608e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2204      	movs	r2, #4
 8006096:	4013      	ands	r3, r2
 8006098:	d009      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800609a:	4b10      	ldr	r3, [pc, #64]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800609c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609e:	4a15      	ldr	r2, [pc, #84]	@ (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	0019      	movs	r1, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	4b0c      	ldr	r3, [pc, #48]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060aa:	430a      	orrs	r2, r1
 80060ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2280      	movs	r2, #128	@ 0x80
 80060b4:	4013      	ands	r3, r2
 80060b6:	d009      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80060b8:	4b08      	ldr	r3, [pc, #32]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	22e0      	movs	r2, #224	@ 0xe0
 80060be:	4393      	bics	r3, r2
 80060c0:	0019      	movs	r1, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	4b05      	ldr	r3, [pc, #20]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060c8:	430a      	orrs	r2, r1
 80060ca:	601a      	str	r2, [r3, #0]
  }
  return status;
 80060cc:	2312      	movs	r3, #18
 80060ce:	18fb      	adds	r3, r7, r3
 80060d0:	781b      	ldrb	r3, [r3, #0]
}
 80060d2:	0018      	movs	r0, r3
 80060d4:	46bd      	mov	sp, r7
 80060d6:	b006      	add	sp, #24
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	46c0      	nop			@ (mov r8, r8)
 80060dc:	40021000 	.word	0x40021000
 80060e0:	fffffcff 	.word	0xfffffcff
 80060e4:	fffeffff 	.word	0xfffeffff
 80060e8:	00001388 	.word	0x00001388
 80060ec:	efffffff 	.word	0xefffffff
 80060f0:	ffffcfff 	.word	0xffffcfff
 80060f4:	ffff3fff 	.word	0xffff3fff

080060f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e04a      	b.n	80061a0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	223d      	movs	r2, #61	@ 0x3d
 800610e:	5c9b      	ldrb	r3, [r3, r2]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d107      	bne.n	8006126 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	223c      	movs	r2, #60	@ 0x3c
 800611a:	2100      	movs	r1, #0
 800611c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	0018      	movs	r0, r3
 8006122:	f7fe f8a3 	bl	800426c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	223d      	movs	r2, #61	@ 0x3d
 800612a:	2102      	movs	r1, #2
 800612c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3304      	adds	r3, #4
 8006136:	0019      	movs	r1, r3
 8006138:	0010      	movs	r0, r2
 800613a:	f000 f835 	bl	80061a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2248      	movs	r2, #72	@ 0x48
 8006142:	2101      	movs	r1, #1
 8006144:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	223e      	movs	r2, #62	@ 0x3e
 800614a:	2101      	movs	r1, #1
 800614c:	5499      	strb	r1, [r3, r2]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	223f      	movs	r2, #63	@ 0x3f
 8006152:	2101      	movs	r1, #1
 8006154:	5499      	strb	r1, [r3, r2]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2240      	movs	r2, #64	@ 0x40
 800615a:	2101      	movs	r1, #1
 800615c:	5499      	strb	r1, [r3, r2]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2241      	movs	r2, #65	@ 0x41
 8006162:	2101      	movs	r1, #1
 8006164:	5499      	strb	r1, [r3, r2]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2242      	movs	r2, #66	@ 0x42
 800616a:	2101      	movs	r1, #1
 800616c:	5499      	strb	r1, [r3, r2]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2243      	movs	r2, #67	@ 0x43
 8006172:	2101      	movs	r1, #1
 8006174:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2244      	movs	r2, #68	@ 0x44
 800617a:	2101      	movs	r1, #1
 800617c:	5499      	strb	r1, [r3, r2]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2245      	movs	r2, #69	@ 0x45
 8006182:	2101      	movs	r1, #1
 8006184:	5499      	strb	r1, [r3, r2]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2246      	movs	r2, #70	@ 0x46
 800618a:	2101      	movs	r1, #1
 800618c:	5499      	strb	r1, [r3, r2]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2247      	movs	r2, #71	@ 0x47
 8006192:	2101      	movs	r1, #1
 8006194:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	223d      	movs	r2, #61	@ 0x3d
 800619a:	2101      	movs	r1, #1
 800619c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	0018      	movs	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b002      	add	sp, #8
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a2e      	ldr	r2, [pc, #184]	@ (8006274 <TIM_Base_SetConfig+0xcc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_Base_SetConfig+0x20>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a2d      	ldr	r2, [pc, #180]	@ (8006278 <TIM_Base_SetConfig+0xd0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d108      	bne.n	80061da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2270      	movs	r2, #112	@ 0x70
 80061cc:	4393      	bics	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a25      	ldr	r2, [pc, #148]	@ (8006274 <TIM_Base_SetConfig+0xcc>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00f      	beq.n	8006202 <TIM_Base_SetConfig+0x5a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a24      	ldr	r2, [pc, #144]	@ (8006278 <TIM_Base_SetConfig+0xd0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00b      	beq.n	8006202 <TIM_Base_SetConfig+0x5a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a23      	ldr	r2, [pc, #140]	@ (800627c <TIM_Base_SetConfig+0xd4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_Base_SetConfig+0x5a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a22      	ldr	r2, [pc, #136]	@ (8006280 <TIM_Base_SetConfig+0xd8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_Base_SetConfig+0x5a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a21      	ldr	r2, [pc, #132]	@ (8006284 <TIM_Base_SetConfig+0xdc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d108      	bne.n	8006214 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4a20      	ldr	r2, [pc, #128]	@ (8006288 <TIM_Base_SetConfig+0xe0>)
 8006206:	4013      	ands	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2280      	movs	r2, #128	@ 0x80
 8006218:	4393      	bics	r3, r2
 800621a:	001a      	movs	r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a0f      	ldr	r2, [pc, #60]	@ (8006274 <TIM_Base_SetConfig+0xcc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d007      	beq.n	800624c <TIM_Base_SetConfig+0xa4>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a10      	ldr	r2, [pc, #64]	@ (8006280 <TIM_Base_SetConfig+0xd8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_Base_SetConfig+0xa4>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a0f      	ldr	r2, [pc, #60]	@ (8006284 <TIM_Base_SetConfig+0xdc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d103      	bne.n	8006254 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2204      	movs	r2, #4
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	601a      	str	r2, [r3, #0]
}
 800626c:	46c0      	nop			@ (mov r8, r8)
 800626e:	46bd      	mov	sp, r7
 8006270:	b004      	add	sp, #16
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40000400 	.word	0x40000400
 800627c:	40002000 	.word	0x40002000
 8006280:	40014400 	.word	0x40014400
 8006284:	40014800 	.word	0x40014800
 8006288:	fffffcff 	.word	0xfffffcff

0800628c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e046      	b.n	800632c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2288      	movs	r2, #136	@ 0x88
 80062a2:	589b      	ldr	r3, [r3, r2]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d107      	bne.n	80062b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2284      	movs	r2, #132	@ 0x84
 80062ac:	2100      	movs	r1, #0
 80062ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	0018      	movs	r0, r3
 80062b4:	f7fe f854 	bl	8004360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2288      	movs	r2, #136	@ 0x88
 80062bc:	2124      	movs	r1, #36	@ 0x24
 80062be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2101      	movs	r1, #1
 80062cc:	438a      	bics	r2, r1
 80062ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	0018      	movs	r0, r3
 80062dc:	f000 fa4e 	bl	800677c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	0018      	movs	r0, r3
 80062e4:	f000 f8cc 	bl	8006480 <UART_SetConfig>
 80062e8:	0003      	movs	r3, r0
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e01c      	b.n	800632c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	490d      	ldr	r1, [pc, #52]	@ (8006334 <HAL_UART_Init+0xa8>)
 80062fe:	400a      	ands	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	212a      	movs	r1, #42	@ 0x2a
 800630e:	438a      	bics	r2, r1
 8006310:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2101      	movs	r1, #1
 800631e:	430a      	orrs	r2, r1
 8006320:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	0018      	movs	r0, r3
 8006326:	f000 fadd 	bl	80068e4 <UART_CheckIdleState>
 800632a:	0003      	movs	r3, r0
}
 800632c:	0018      	movs	r0, r3
 800632e:	46bd      	mov	sp, r7
 8006330:	b002      	add	sp, #8
 8006332:	bd80      	pop	{r7, pc}
 8006334:	ffffb7ff 	.word	0xffffb7ff

08006338 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	@ 0x28
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	1dbb      	adds	r3, r7, #6
 8006346:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2288      	movs	r2, #136	@ 0x88
 800634c:	589b      	ldr	r3, [r3, r2]
 800634e:	2b20      	cmp	r3, #32
 8006350:	d000      	beq.n	8006354 <HAL_UART_Transmit+0x1c>
 8006352:	e090      	b.n	8006476 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_UART_Transmit+0x2a>
 800635a:	1dbb      	adds	r3, r7, #6
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e088      	b.n	8006478 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	2380      	movs	r3, #128	@ 0x80
 800636c:	015b      	lsls	r3, r3, #5
 800636e:	429a      	cmp	r2, r3
 8006370:	d109      	bne.n	8006386 <HAL_UART_Transmit+0x4e>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d105      	bne.n	8006386 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2201      	movs	r2, #1
 800637e:	4013      	ands	r3, r2
 8006380:	d001      	beq.n	8006386 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e078      	b.n	8006478 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2290      	movs	r2, #144	@ 0x90
 800638a:	2100      	movs	r1, #0
 800638c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2288      	movs	r2, #136	@ 0x88
 8006392:	2121      	movs	r1, #33	@ 0x21
 8006394:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006396:	f7fe f8e1 	bl	800455c <HAL_GetTick>
 800639a:	0003      	movs	r3, r0
 800639c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	1dba      	adds	r2, r7, #6
 80063a2:	2154      	movs	r1, #84	@ 0x54
 80063a4:	8812      	ldrh	r2, [r2, #0]
 80063a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	1dba      	adds	r2, r7, #6
 80063ac:	2156      	movs	r1, #86	@ 0x56
 80063ae:	8812      	ldrh	r2, [r2, #0]
 80063b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	2380      	movs	r3, #128	@ 0x80
 80063b8:	015b      	lsls	r3, r3, #5
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d108      	bne.n	80063d0 <HAL_UART_Transmit+0x98>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d104      	bne.n	80063d0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	e003      	b.n	80063d8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063d8:	e030      	b.n	800643c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	0013      	movs	r3, r2
 80063e4:	2200      	movs	r2, #0
 80063e6:	2180      	movs	r1, #128	@ 0x80
 80063e8:	f000 fb26 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 80063ec:	1e03      	subs	r3, r0, #0
 80063ee:	d005      	beq.n	80063fc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2288      	movs	r2, #136	@ 0x88
 80063f4:	2120      	movs	r1, #32
 80063f6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e03d      	b.n	8006478 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10b      	bne.n	800641a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	001a      	movs	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	05d2      	lsls	r2, r2, #23
 800640e:	0dd2      	lsrs	r2, r2, #23
 8006410:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	3302      	adds	r3, #2
 8006416:	61bb      	str	r3, [r7, #24]
 8006418:	e007      	b.n	800642a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	781a      	ldrb	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	3301      	adds	r3, #1
 8006428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2256      	movs	r2, #86	@ 0x56
 800642e:	5a9b      	ldrh	r3, [r3, r2]
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b299      	uxth	r1, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2256      	movs	r2, #86	@ 0x56
 800643a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2256      	movs	r2, #86	@ 0x56
 8006440:	5a9b      	ldrh	r3, [r3, r2]
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1c8      	bne.n	80063da <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	0013      	movs	r3, r2
 8006452:	2200      	movs	r2, #0
 8006454:	2140      	movs	r1, #64	@ 0x40
 8006456:	f000 faef 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 800645a:	1e03      	subs	r3, r0, #0
 800645c:	d005      	beq.n	800646a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2288      	movs	r2, #136	@ 0x88
 8006462:	2120      	movs	r1, #32
 8006464:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e006      	b.n	8006478 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2288      	movs	r2, #136	@ 0x88
 800646e:	2120      	movs	r1, #32
 8006470:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	e000      	b.n	8006478 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006476:	2302      	movs	r3, #2
  }
}
 8006478:	0018      	movs	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	b008      	add	sp, #32
 800647e:	bd80      	pop	{r7, pc}

08006480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006488:	231e      	movs	r3, #30
 800648a:	18fb      	adds	r3, r7, r3
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4aab      	ldr	r2, [pc, #684]	@ (800675c <UART_SetConfig+0x2dc>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	0019      	movs	r1, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	4aa6      	ldr	r2, [pc, #664]	@ (8006760 <UART_SetConfig+0x2e0>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	0019      	movs	r1, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	4a9d      	ldr	r2, [pc, #628]	@ (8006764 <UART_SetConfig+0x2e4>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	0019      	movs	r1, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006502:	220f      	movs	r2, #15
 8006504:	4393      	bics	r3, r2
 8006506:	0019      	movs	r1, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a93      	ldr	r2, [pc, #588]	@ (8006768 <UART_SetConfig+0x2e8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d127      	bne.n	800656e <UART_SetConfig+0xee>
 800651e:	4b93      	ldr	r3, [pc, #588]	@ (800676c <UART_SetConfig+0x2ec>)
 8006520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006522:	2203      	movs	r2, #3
 8006524:	4013      	ands	r3, r2
 8006526:	2b03      	cmp	r3, #3
 8006528:	d017      	beq.n	800655a <UART_SetConfig+0xda>
 800652a:	d81b      	bhi.n	8006564 <UART_SetConfig+0xe4>
 800652c:	2b02      	cmp	r3, #2
 800652e:	d00a      	beq.n	8006546 <UART_SetConfig+0xc6>
 8006530:	d818      	bhi.n	8006564 <UART_SetConfig+0xe4>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <UART_SetConfig+0xbc>
 8006536:	2b01      	cmp	r3, #1
 8006538:	d00a      	beq.n	8006550 <UART_SetConfig+0xd0>
 800653a:	e013      	b.n	8006564 <UART_SetConfig+0xe4>
 800653c:	231f      	movs	r3, #31
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	2200      	movs	r2, #0
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	e021      	b.n	800658a <UART_SetConfig+0x10a>
 8006546:	231f      	movs	r3, #31
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	2202      	movs	r2, #2
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	e01c      	b.n	800658a <UART_SetConfig+0x10a>
 8006550:	231f      	movs	r3, #31
 8006552:	18fb      	adds	r3, r7, r3
 8006554:	2204      	movs	r2, #4
 8006556:	701a      	strb	r2, [r3, #0]
 8006558:	e017      	b.n	800658a <UART_SetConfig+0x10a>
 800655a:	231f      	movs	r3, #31
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	2208      	movs	r2, #8
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	e012      	b.n	800658a <UART_SetConfig+0x10a>
 8006564:	231f      	movs	r3, #31
 8006566:	18fb      	adds	r3, r7, r3
 8006568:	2210      	movs	r2, #16
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	e00d      	b.n	800658a <UART_SetConfig+0x10a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a7f      	ldr	r2, [pc, #508]	@ (8006770 <UART_SetConfig+0x2f0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d104      	bne.n	8006582 <UART_SetConfig+0x102>
 8006578:	231f      	movs	r3, #31
 800657a:	18fb      	adds	r3, r7, r3
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	e003      	b.n	800658a <UART_SetConfig+0x10a>
 8006582:	231f      	movs	r3, #31
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	2210      	movs	r2, #16
 8006588:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69da      	ldr	r2, [r3, #28]
 800658e:	2380      	movs	r3, #128	@ 0x80
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	429a      	cmp	r2, r3
 8006594:	d000      	beq.n	8006598 <UART_SetConfig+0x118>
 8006596:	e06f      	b.n	8006678 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8006598:	231f      	movs	r3, #31
 800659a:	18fb      	adds	r3, r7, r3
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d01f      	beq.n	80065e2 <UART_SetConfig+0x162>
 80065a2:	dc22      	bgt.n	80065ea <UART_SetConfig+0x16a>
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d017      	beq.n	80065d8 <UART_SetConfig+0x158>
 80065a8:	dc1f      	bgt.n	80065ea <UART_SetConfig+0x16a>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <UART_SetConfig+0x134>
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d005      	beq.n	80065be <UART_SetConfig+0x13e>
 80065b2:	e01a      	b.n	80065ea <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b4:	f7ff fc9c 	bl	8005ef0 <HAL_RCC_GetPCLK1Freq>
 80065b8:	0003      	movs	r3, r0
 80065ba:	61bb      	str	r3, [r7, #24]
        break;
 80065bc:	e01c      	b.n	80065f8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80065be:	4b6b      	ldr	r3, [pc, #428]	@ (800676c <UART_SetConfig+0x2ec>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	2207      	movs	r2, #7
 80065c6:	4013      	ands	r3, r2
 80065c8:	3301      	adds	r3, #1
 80065ca:	0019      	movs	r1, r3
 80065cc:	4869      	ldr	r0, [pc, #420]	@ (8006774 <UART_SetConfig+0x2f4>)
 80065ce:	f7f9 fdad 	bl	800012c <__udivsi3>
 80065d2:	0003      	movs	r3, r0
 80065d4:	61bb      	str	r3, [r7, #24]
        break;
 80065d6:	e00f      	b.n	80065f8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065d8:	f7ff fc2a 	bl	8005e30 <HAL_RCC_GetSysClockFreq>
 80065dc:	0003      	movs	r3, r0
 80065de:	61bb      	str	r3, [r7, #24]
        break;
 80065e0:	e00a      	b.n	80065f8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065e2:	2380      	movs	r3, #128	@ 0x80
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	61bb      	str	r3, [r7, #24]
        break;
 80065e8:	e006      	b.n	80065f8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065ee:	231e      	movs	r3, #30
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	2201      	movs	r2, #1
 80065f4:	701a      	strb	r2, [r3, #0]
        break;
 80065f6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d100      	bne.n	8006600 <UART_SetConfig+0x180>
 80065fe:	e097      	b.n	8006730 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006604:	4b5c      	ldr	r3, [pc, #368]	@ (8006778 <UART_SetConfig+0x2f8>)
 8006606:	0052      	lsls	r2, r2, #1
 8006608:	5ad3      	ldrh	r3, [r2, r3]
 800660a:	0019      	movs	r1, r3
 800660c:	69b8      	ldr	r0, [r7, #24]
 800660e:	f7f9 fd8d 	bl	800012c <__udivsi3>
 8006612:	0003      	movs	r3, r0
 8006614:	005a      	lsls	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	085b      	lsrs	r3, r3, #1
 800661c:	18d2      	adds	r2, r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	0019      	movs	r1, r3
 8006624:	0010      	movs	r0, r2
 8006626:	f7f9 fd81 	bl	800012c <__udivsi3>
 800662a:	0003      	movs	r3, r0
 800662c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2b0f      	cmp	r3, #15
 8006632:	d91c      	bls.n	800666e <UART_SetConfig+0x1ee>
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	2380      	movs	r3, #128	@ 0x80
 8006638:	025b      	lsls	r3, r3, #9
 800663a:	429a      	cmp	r2, r3
 800663c:	d217      	bcs.n	800666e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	b29a      	uxth	r2, r3
 8006642:	200e      	movs	r0, #14
 8006644:	183b      	adds	r3, r7, r0
 8006646:	210f      	movs	r1, #15
 8006648:	438a      	bics	r2, r1
 800664a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	085b      	lsrs	r3, r3, #1
 8006650:	b29b      	uxth	r3, r3
 8006652:	2207      	movs	r2, #7
 8006654:	4013      	ands	r3, r2
 8006656:	b299      	uxth	r1, r3
 8006658:	183b      	adds	r3, r7, r0
 800665a:	183a      	adds	r2, r7, r0
 800665c:	8812      	ldrh	r2, [r2, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	183a      	adds	r2, r7, r0
 8006668:	8812      	ldrh	r2, [r2, #0]
 800666a:	60da      	str	r2, [r3, #12]
 800666c:	e060      	b.n	8006730 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800666e:	231e      	movs	r3, #30
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	2201      	movs	r2, #1
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	e05b      	b.n	8006730 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006678:	231f      	movs	r3, #31
 800667a:	18fb      	adds	r3, r7, r3
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b08      	cmp	r3, #8
 8006680:	d01f      	beq.n	80066c2 <UART_SetConfig+0x242>
 8006682:	dc22      	bgt.n	80066ca <UART_SetConfig+0x24a>
 8006684:	2b04      	cmp	r3, #4
 8006686:	d017      	beq.n	80066b8 <UART_SetConfig+0x238>
 8006688:	dc1f      	bgt.n	80066ca <UART_SetConfig+0x24a>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <UART_SetConfig+0x214>
 800668e:	2b02      	cmp	r3, #2
 8006690:	d005      	beq.n	800669e <UART_SetConfig+0x21e>
 8006692:	e01a      	b.n	80066ca <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006694:	f7ff fc2c 	bl	8005ef0 <HAL_RCC_GetPCLK1Freq>
 8006698:	0003      	movs	r3, r0
 800669a:	61bb      	str	r3, [r7, #24]
        break;
 800669c:	e01c      	b.n	80066d8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800669e:	4b33      	ldr	r3, [pc, #204]	@ (800676c <UART_SetConfig+0x2ec>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	2207      	movs	r2, #7
 80066a6:	4013      	ands	r3, r2
 80066a8:	3301      	adds	r3, #1
 80066aa:	0019      	movs	r1, r3
 80066ac:	4831      	ldr	r0, [pc, #196]	@ (8006774 <UART_SetConfig+0x2f4>)
 80066ae:	f7f9 fd3d 	bl	800012c <__udivsi3>
 80066b2:	0003      	movs	r3, r0
 80066b4:	61bb      	str	r3, [r7, #24]
        break;
 80066b6:	e00f      	b.n	80066d8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b8:	f7ff fbba 	bl	8005e30 <HAL_RCC_GetSysClockFreq>
 80066bc:	0003      	movs	r3, r0
 80066be:	61bb      	str	r3, [r7, #24]
        break;
 80066c0:	e00a      	b.n	80066d8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c2:	2380      	movs	r3, #128	@ 0x80
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	61bb      	str	r3, [r7, #24]
        break;
 80066c8:	e006      	b.n	80066d8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066ce:	231e      	movs	r3, #30
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	2201      	movs	r2, #1
 80066d4:	701a      	strb	r2, [r3, #0]
        break;
 80066d6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d028      	beq.n	8006730 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066e2:	4b25      	ldr	r3, [pc, #148]	@ (8006778 <UART_SetConfig+0x2f8>)
 80066e4:	0052      	lsls	r2, r2, #1
 80066e6:	5ad3      	ldrh	r3, [r2, r3]
 80066e8:	0019      	movs	r1, r3
 80066ea:	69b8      	ldr	r0, [r7, #24]
 80066ec:	f7f9 fd1e 	bl	800012c <__udivsi3>
 80066f0:	0003      	movs	r3, r0
 80066f2:	001a      	movs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	085b      	lsrs	r3, r3, #1
 80066fa:	18d2      	adds	r2, r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	0019      	movs	r1, r3
 8006702:	0010      	movs	r0, r2
 8006704:	f7f9 fd12 	bl	800012c <__udivsi3>
 8006708:	0003      	movs	r3, r0
 800670a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b0f      	cmp	r3, #15
 8006710:	d90a      	bls.n	8006728 <UART_SetConfig+0x2a8>
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	2380      	movs	r3, #128	@ 0x80
 8006716:	025b      	lsls	r3, r3, #9
 8006718:	429a      	cmp	r2, r3
 800671a:	d205      	bcs.n	8006728 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	b29a      	uxth	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60da      	str	r2, [r3, #12]
 8006726:	e003      	b.n	8006730 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006728:	231e      	movs	r3, #30
 800672a:	18fb      	adds	r3, r7, r3
 800672c:	2201      	movs	r2, #1
 800672e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	226a      	movs	r2, #106	@ 0x6a
 8006734:	2101      	movs	r1, #1
 8006736:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2268      	movs	r2, #104	@ 0x68
 800673c:	2101      	movs	r1, #1
 800673e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800674c:	231e      	movs	r3, #30
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	781b      	ldrb	r3, [r3, #0]
}
 8006752:	0018      	movs	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	b008      	add	sp, #32
 8006758:	bd80      	pop	{r7, pc}
 800675a:	46c0      	nop			@ (mov r8, r8)
 800675c:	cfff69f3 	.word	0xcfff69f3
 8006760:	ffffcfff 	.word	0xffffcfff
 8006764:	11fff4ff 	.word	0x11fff4ff
 8006768:	40013800 	.word	0x40013800
 800676c:	40021000 	.word	0x40021000
 8006770:	40004400 	.word	0x40004400
 8006774:	02dc6c00 	.word	0x02dc6c00
 8006778:	08007d48 	.word	0x08007d48

0800677c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006788:	2208      	movs	r2, #8
 800678a:	4013      	ands	r3, r2
 800678c:	d00b      	beq.n	80067a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	4a4a      	ldr	r2, [pc, #296]	@ (80068c0 <UART_AdvFeatureConfig+0x144>)
 8006796:	4013      	ands	r3, r2
 8006798:	0019      	movs	r1, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067aa:	2201      	movs	r2, #1
 80067ac:	4013      	ands	r3, r2
 80067ae:	d00b      	beq.n	80067c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	4a43      	ldr	r2, [pc, #268]	@ (80068c4 <UART_AdvFeatureConfig+0x148>)
 80067b8:	4013      	ands	r3, r2
 80067ba:	0019      	movs	r1, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067cc:	2202      	movs	r2, #2
 80067ce:	4013      	ands	r3, r2
 80067d0:	d00b      	beq.n	80067ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	4a3b      	ldr	r2, [pc, #236]	@ (80068c8 <UART_AdvFeatureConfig+0x14c>)
 80067da:	4013      	ands	r3, r2
 80067dc:	0019      	movs	r1, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ee:	2204      	movs	r2, #4
 80067f0:	4013      	ands	r3, r2
 80067f2:	d00b      	beq.n	800680c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	4a34      	ldr	r2, [pc, #208]	@ (80068cc <UART_AdvFeatureConfig+0x150>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	0019      	movs	r1, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006810:	2210      	movs	r2, #16
 8006812:	4013      	ands	r3, r2
 8006814:	d00b      	beq.n	800682e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	4a2c      	ldr	r2, [pc, #176]	@ (80068d0 <UART_AdvFeatureConfig+0x154>)
 800681e:	4013      	ands	r3, r2
 8006820:	0019      	movs	r1, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006832:	2220      	movs	r2, #32
 8006834:	4013      	ands	r3, r2
 8006836:	d00b      	beq.n	8006850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	4a25      	ldr	r2, [pc, #148]	@ (80068d4 <UART_AdvFeatureConfig+0x158>)
 8006840:	4013      	ands	r3, r2
 8006842:	0019      	movs	r1, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006854:	2240      	movs	r2, #64	@ 0x40
 8006856:	4013      	ands	r3, r2
 8006858:	d01d      	beq.n	8006896 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	4a1d      	ldr	r2, [pc, #116]	@ (80068d8 <UART_AdvFeatureConfig+0x15c>)
 8006862:	4013      	ands	r3, r2
 8006864:	0019      	movs	r1, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006876:	2380      	movs	r3, #128	@ 0x80
 8006878:	035b      	lsls	r3, r3, #13
 800687a:	429a      	cmp	r2, r3
 800687c:	d10b      	bne.n	8006896 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4a15      	ldr	r2, [pc, #84]	@ (80068dc <UART_AdvFeatureConfig+0x160>)
 8006886:	4013      	ands	r3, r2
 8006888:	0019      	movs	r1, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689a:	2280      	movs	r2, #128	@ 0x80
 800689c:	4013      	ands	r3, r2
 800689e:	d00b      	beq.n	80068b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4a0e      	ldr	r2, [pc, #56]	@ (80068e0 <UART_AdvFeatureConfig+0x164>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	0019      	movs	r1, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	605a      	str	r2, [r3, #4]
  }
}
 80068b8:	46c0      	nop			@ (mov r8, r8)
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b002      	add	sp, #8
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	ffff7fff 	.word	0xffff7fff
 80068c4:	fffdffff 	.word	0xfffdffff
 80068c8:	fffeffff 	.word	0xfffeffff
 80068cc:	fffbffff 	.word	0xfffbffff
 80068d0:	ffffefff 	.word	0xffffefff
 80068d4:	ffffdfff 	.word	0xffffdfff
 80068d8:	ffefffff 	.word	0xffefffff
 80068dc:	ff9fffff 	.word	0xff9fffff
 80068e0:	fff7ffff 	.word	0xfff7ffff

080068e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b092      	sub	sp, #72	@ 0x48
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2290      	movs	r2, #144	@ 0x90
 80068f0:	2100      	movs	r1, #0
 80068f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068f4:	f7fd fe32 	bl	800455c <HAL_GetTick>
 80068f8:	0003      	movs	r3, r0
 80068fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2208      	movs	r2, #8
 8006904:	4013      	ands	r3, r2
 8006906:	2b08      	cmp	r3, #8
 8006908:	d12d      	bne.n	8006966 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800690a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800690c:	2280      	movs	r2, #128	@ 0x80
 800690e:	0391      	lsls	r1, r2, #14
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	4a47      	ldr	r2, [pc, #284]	@ (8006a30 <UART_CheckIdleState+0x14c>)
 8006914:	9200      	str	r2, [sp, #0]
 8006916:	2200      	movs	r2, #0
 8006918:	f000 f88e 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 800691c:	1e03      	subs	r3, r0, #0
 800691e:	d022      	beq.n	8006966 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006920:	f3ef 8310 	mrs	r3, PRIMASK
 8006924:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006928:	63bb      	str	r3, [r7, #56]	@ 0x38
 800692a:	2301      	movs	r3, #1
 800692c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006930:	f383 8810 	msr	PRIMASK, r3
}
 8006934:	46c0      	nop			@ (mov r8, r8)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2180      	movs	r1, #128	@ 0x80
 8006942:	438a      	bics	r2, r1
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800694a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694c:	f383 8810 	msr	PRIMASK, r3
}
 8006950:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2288      	movs	r2, #136	@ 0x88
 8006956:	2120      	movs	r1, #32
 8006958:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2284      	movs	r2, #132	@ 0x84
 800695e:	2100      	movs	r1, #0
 8006960:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e060      	b.n	8006a28 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2204      	movs	r2, #4
 800696e:	4013      	ands	r3, r2
 8006970:	2b04      	cmp	r3, #4
 8006972:	d146      	bne.n	8006a02 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006976:	2280      	movs	r2, #128	@ 0x80
 8006978:	03d1      	lsls	r1, r2, #15
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	4a2c      	ldr	r2, [pc, #176]	@ (8006a30 <UART_CheckIdleState+0x14c>)
 800697e:	9200      	str	r2, [sp, #0]
 8006980:	2200      	movs	r2, #0
 8006982:	f000 f859 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 8006986:	1e03      	subs	r3, r0, #0
 8006988:	d03b      	beq.n	8006a02 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800698a:	f3ef 8310 	mrs	r3, PRIMASK
 800698e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006990:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006992:	637b      	str	r3, [r7, #52]	@ 0x34
 8006994:	2301      	movs	r3, #1
 8006996:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f383 8810 	msr	PRIMASK, r3
}
 800699e:	46c0      	nop			@ (mov r8, r8)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4922      	ldr	r1, [pc, #136]	@ (8006a34 <UART_CheckIdleState+0x150>)
 80069ac:	400a      	ands	r2, r1
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f383 8810 	msr	PRIMASK, r3
}
 80069ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80069bc:	f3ef 8310 	mrs	r3, PRIMASK
 80069c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80069c2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80069c6:	2301      	movs	r3, #1
 80069c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	f383 8810 	msr	PRIMASK, r3
}
 80069d0:	46c0      	nop			@ (mov r8, r8)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2101      	movs	r1, #1
 80069de:	438a      	bics	r2, r1
 80069e0:	609a      	str	r2, [r3, #8]
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	f383 8810 	msr	PRIMASK, r3
}
 80069ec:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	228c      	movs	r2, #140	@ 0x8c
 80069f2:	2120      	movs	r1, #32
 80069f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2284      	movs	r2, #132	@ 0x84
 80069fa:	2100      	movs	r1, #0
 80069fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e012      	b.n	8006a28 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2288      	movs	r2, #136	@ 0x88
 8006a06:	2120      	movs	r1, #32
 8006a08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	228c      	movs	r2, #140	@ 0x8c
 8006a0e:	2120      	movs	r1, #32
 8006a10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2284      	movs	r2, #132	@ 0x84
 8006a22:	2100      	movs	r1, #0
 8006a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	0018      	movs	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b010      	add	sp, #64	@ 0x40
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	01ffffff 	.word	0x01ffffff
 8006a34:	fffffedf 	.word	0xfffffedf

08006a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	1dfb      	adds	r3, r7, #7
 8006a46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a48:	e051      	b.n	8006aee <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	d04e      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a50:	f7fd fd84 	bl	800455c <HAL_GetTick>
 8006a54:	0002      	movs	r2, r0
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d302      	bcc.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e051      	b.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2204      	movs	r2, #4
 8006a72:	4013      	ands	r3, r2
 8006a74:	d03b      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0xb6>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b80      	cmp	r3, #128	@ 0x80
 8006a7a:	d038      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0xb6>
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b40      	cmp	r3, #64	@ 0x40
 8006a80:	d035      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	2208      	movs	r2, #8
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d111      	bne.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2208      	movs	r2, #8
 8006a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f000 f83c 	bl	8006b18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2290      	movs	r2, #144	@ 0x90
 8006aa4:	2108      	movs	r1, #8
 8006aa6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2284      	movs	r2, #132	@ 0x84
 8006aac:	2100      	movs	r1, #0
 8006aae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e02c      	b.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	69da      	ldr	r2, [r3, #28]
 8006aba:	2380      	movs	r3, #128	@ 0x80
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	401a      	ands	r2, r3
 8006ac0:	2380      	movs	r3, #128	@ 0x80
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d112      	bne.n	8006aee <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2280      	movs	r2, #128	@ 0x80
 8006ace:	0112      	lsls	r2, r2, #4
 8006ad0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f000 f81f 	bl	8006b18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2290      	movs	r2, #144	@ 0x90
 8006ade:	2120      	movs	r1, #32
 8006ae0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2284      	movs	r2, #132	@ 0x84
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e00f      	b.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	4013      	ands	r3, r2
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	425a      	negs	r2, r3
 8006afe:	4153      	adcs	r3, r2
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	001a      	movs	r2, r3
 8006b04:	1dfb      	adds	r3, r7, #7
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d09e      	beq.n	8006a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	0018      	movs	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	b004      	add	sp, #16
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08e      	sub	sp, #56	@ 0x38
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006b20:	f3ef 8310 	mrs	r3, PRIMASK
 8006b24:	617b      	str	r3, [r7, #20]
  return(result);
 8006b26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	f383 8810 	msr	PRIMASK, r3
}
 8006b34:	46c0      	nop			@ (mov r8, r8)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4926      	ldr	r1, [pc, #152]	@ (8006bdc <UART_EndRxTransfer+0xc4>)
 8006b42:	400a      	ands	r2, r1
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	f383 8810 	msr	PRIMASK, r3
}
 8006b50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006b52:	f3ef 8310 	mrs	r3, PRIMASK
 8006b56:	623b      	str	r3, [r7, #32]
  return(result);
 8006b58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	f383 8810 	msr	PRIMASK, r3
}
 8006b66:	46c0      	nop			@ (mov r8, r8)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689a      	ldr	r2, [r3, #8]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	491b      	ldr	r1, [pc, #108]	@ (8006be0 <UART_EndRxTransfer+0xc8>)
 8006b74:	400a      	ands	r2, r1
 8006b76:	609a      	str	r2, [r3, #8]
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7e:	f383 8810 	msr	PRIMASK, r3
}
 8006b82:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d118      	bne.n	8006bbe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b90:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b96:	2301      	movs	r3, #1
 8006b98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f383 8810 	msr	PRIMASK, r3
}
 8006ba0:	46c0      	nop			@ (mov r8, r8)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2110      	movs	r1, #16
 8006bae:	438a      	bics	r2, r1
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f383 8810 	msr	PRIMASK, r3
}
 8006bbc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	228c      	movs	r2, #140	@ 0x8c
 8006bc2:	2120      	movs	r1, #32
 8006bc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006bd2:	46c0      	nop			@ (mov r8, r8)
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b00e      	add	sp, #56	@ 0x38
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	46c0      	nop			@ (mov r8, r8)
 8006bdc:	fffffedf 	.word	0xfffffedf
 8006be0:	effffffe 	.word	0xeffffffe

08006be4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2284      	movs	r2, #132	@ 0x84
 8006bf0:	5c9b      	ldrb	r3, [r3, r2]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_UARTEx_DisableFifoMode+0x16>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e027      	b.n	8006c4a <HAL_UARTEx_DisableFifoMode+0x66>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2284      	movs	r2, #132	@ 0x84
 8006bfe:	2101      	movs	r1, #1
 8006c00:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2288      	movs	r2, #136	@ 0x88
 8006c06:	2124      	movs	r1, #36	@ 0x24
 8006c08:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	438a      	bics	r2, r1
 8006c20:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4a0b      	ldr	r2, [pc, #44]	@ (8006c54 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2288      	movs	r2, #136	@ 0x88
 8006c3c:	2120      	movs	r1, #32
 8006c3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2284      	movs	r2, #132	@ 0x84
 8006c44:	2100      	movs	r1, #0
 8006c46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	b004      	add	sp, #16
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	46c0      	nop			@ (mov r8, r8)
 8006c54:	dfffffff 	.word	0xdfffffff

08006c58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2284      	movs	r2, #132	@ 0x84
 8006c66:	5c9b      	ldrb	r3, [r3, r2]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e02e      	b.n	8006cce <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2284      	movs	r2, #132	@ 0x84
 8006c74:	2101      	movs	r1, #1
 8006c76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2288      	movs	r2, #136	@ 0x88
 8006c7c:	2124      	movs	r1, #36	@ 0x24
 8006c7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2101      	movs	r1, #1
 8006c94:	438a      	bics	r2, r1
 8006c96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	08d9      	lsrs	r1, r3, #3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f000 f854 	bl	8006d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2288      	movs	r2, #136	@ 0x88
 8006cc0:	2120      	movs	r1, #32
 8006cc2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2284      	movs	r2, #132	@ 0x84
 8006cc8:	2100      	movs	r1, #0
 8006cca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	0018      	movs	r0, r3
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	b004      	add	sp, #16
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2284      	movs	r2, #132	@ 0x84
 8006ce6:	5c9b      	ldrb	r3, [r3, r2]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e02f      	b.n	8006d50 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2284      	movs	r2, #132	@ 0x84
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2288      	movs	r2, #136	@ 0x88
 8006cfc:	2124      	movs	r1, #36	@ 0x24
 8006cfe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2101      	movs	r1, #1
 8006d14:	438a      	bics	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8006d58 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	0019      	movs	r1, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f000 f813 	bl	8006d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2288      	movs	r2, #136	@ 0x88
 8006d42:	2120      	movs	r1, #32
 8006d44:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2284      	movs	r2, #132	@ 0x84
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	0018      	movs	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b004      	add	sp, #16
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	f1ffffff 	.word	0xf1ffffff

08006d5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d108      	bne.n	8006d7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	226a      	movs	r2, #106	@ 0x6a
 8006d70:	2101      	movs	r1, #1
 8006d72:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2268      	movs	r2, #104	@ 0x68
 8006d78:	2101      	movs	r1, #1
 8006d7a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d7c:	e043      	b.n	8006e06 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d7e:	260f      	movs	r6, #15
 8006d80:	19bb      	adds	r3, r7, r6
 8006d82:	2208      	movs	r2, #8
 8006d84:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d86:	200e      	movs	r0, #14
 8006d88:	183b      	adds	r3, r7, r0
 8006d8a:	2208      	movs	r2, #8
 8006d8c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	0e5b      	lsrs	r3, r3, #25
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	240d      	movs	r4, #13
 8006d9a:	193b      	adds	r3, r7, r4
 8006d9c:	2107      	movs	r1, #7
 8006d9e:	400a      	ands	r2, r1
 8006da0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	0f5b      	lsrs	r3, r3, #29
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	250c      	movs	r5, #12
 8006dae:	197b      	adds	r3, r7, r5
 8006db0:	2107      	movs	r1, #7
 8006db2:	400a      	ands	r2, r1
 8006db4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006db6:	183b      	adds	r3, r7, r0
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	197a      	adds	r2, r7, r5
 8006dbc:	7812      	ldrb	r2, [r2, #0]
 8006dbe:	4914      	ldr	r1, [pc, #80]	@ (8006e10 <UARTEx_SetNbDataToProcess+0xb4>)
 8006dc0:	5c8a      	ldrb	r2, [r1, r2]
 8006dc2:	435a      	muls	r2, r3
 8006dc4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dc6:	197b      	adds	r3, r7, r5
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	4a12      	ldr	r2, [pc, #72]	@ (8006e14 <UARTEx_SetNbDataToProcess+0xb8>)
 8006dcc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dce:	0019      	movs	r1, r3
 8006dd0:	f7f9 fa36 	bl	8000240 <__divsi3>
 8006dd4:	0003      	movs	r3, r0
 8006dd6:	b299      	uxth	r1, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	226a      	movs	r2, #106	@ 0x6a
 8006ddc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dde:	19bb      	adds	r3, r7, r6
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	193a      	adds	r2, r7, r4
 8006de4:	7812      	ldrb	r2, [r2, #0]
 8006de6:	490a      	ldr	r1, [pc, #40]	@ (8006e10 <UARTEx_SetNbDataToProcess+0xb4>)
 8006de8:	5c8a      	ldrb	r2, [r1, r2]
 8006dea:	435a      	muls	r2, r3
 8006dec:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006dee:	193b      	adds	r3, r7, r4
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	4a08      	ldr	r2, [pc, #32]	@ (8006e14 <UARTEx_SetNbDataToProcess+0xb8>)
 8006df4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006df6:	0019      	movs	r1, r3
 8006df8:	f7f9 fa22 	bl	8000240 <__divsi3>
 8006dfc:	0003      	movs	r3, r0
 8006dfe:	b299      	uxth	r1, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2268      	movs	r2, #104	@ 0x68
 8006e04:	5299      	strh	r1, [r3, r2]
}
 8006e06:	46c0      	nop			@ (mov r8, r8)
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	b005      	add	sp, #20
 8006e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e0e:	46c0      	nop			@ (mov r8, r8)
 8006e10:	08007d60 	.word	0x08007d60
 8006e14:	08007d68 	.word	0x08007d68

08006e18 <sniprintf>:
 8006e18:	b40c      	push	{r2, r3}
 8006e1a:	b530      	push	{r4, r5, lr}
 8006e1c:	4b18      	ldr	r3, [pc, #96]	@ (8006e80 <sniprintf+0x68>)
 8006e1e:	000c      	movs	r4, r1
 8006e20:	681d      	ldr	r5, [r3, #0]
 8006e22:	b09d      	sub	sp, #116	@ 0x74
 8006e24:	2900      	cmp	r1, #0
 8006e26:	da08      	bge.n	8006e3a <sniprintf+0x22>
 8006e28:	238b      	movs	r3, #139	@ 0x8b
 8006e2a:	2001      	movs	r0, #1
 8006e2c:	602b      	str	r3, [r5, #0]
 8006e2e:	4240      	negs	r0, r0
 8006e30:	b01d      	add	sp, #116	@ 0x74
 8006e32:	bc30      	pop	{r4, r5}
 8006e34:	bc08      	pop	{r3}
 8006e36:	b002      	add	sp, #8
 8006e38:	4718      	bx	r3
 8006e3a:	2382      	movs	r3, #130	@ 0x82
 8006e3c:	466a      	mov	r2, sp
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	8293      	strh	r3, [r2, #20]
 8006e42:	2300      	movs	r3, #0
 8006e44:	9002      	str	r0, [sp, #8]
 8006e46:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006e48:	9006      	str	r0, [sp, #24]
 8006e4a:	4299      	cmp	r1, r3
 8006e4c:	d000      	beq.n	8006e50 <sniprintf+0x38>
 8006e4e:	1e4b      	subs	r3, r1, #1
 8006e50:	9304      	str	r3, [sp, #16]
 8006e52:	9307      	str	r3, [sp, #28]
 8006e54:	2301      	movs	r3, #1
 8006e56:	466a      	mov	r2, sp
 8006e58:	425b      	negs	r3, r3
 8006e5a:	82d3      	strh	r3, [r2, #22]
 8006e5c:	0028      	movs	r0, r5
 8006e5e:	ab21      	add	r3, sp, #132	@ 0x84
 8006e60:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e62:	a902      	add	r1, sp, #8
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	f000 f99d 	bl	80071a4 <_svfiprintf_r>
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	da01      	bge.n	8006e72 <sniprintf+0x5a>
 8006e6e:	238b      	movs	r3, #139	@ 0x8b
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	2c00      	cmp	r4, #0
 8006e74:	d0dc      	beq.n	8006e30 <sniprintf+0x18>
 8006e76:	2200      	movs	r2, #0
 8006e78:	9b02      	ldr	r3, [sp, #8]
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	e7d8      	b.n	8006e30 <sniprintf+0x18>
 8006e7e:	46c0      	nop			@ (mov r8, r8)
 8006e80:	2000000c 	.word	0x2000000c

08006e84 <memset>:
 8006e84:	0003      	movs	r3, r0
 8006e86:	1882      	adds	r2, r0, r2
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d100      	bne.n	8006e8e <memset+0xa>
 8006e8c:	4770      	bx	lr
 8006e8e:	7019      	strb	r1, [r3, #0]
 8006e90:	3301      	adds	r3, #1
 8006e92:	e7f9      	b.n	8006e88 <memset+0x4>

08006e94 <__errno>:
 8006e94:	4b01      	ldr	r3, [pc, #4]	@ (8006e9c <__errno+0x8>)
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	4770      	bx	lr
 8006e9a:	46c0      	nop			@ (mov r8, r8)
 8006e9c:	2000000c 	.word	0x2000000c

08006ea0 <__libc_init_array>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	2600      	movs	r6, #0
 8006ea4:	4c0c      	ldr	r4, [pc, #48]	@ (8006ed8 <__libc_init_array+0x38>)
 8006ea6:	4d0d      	ldr	r5, [pc, #52]	@ (8006edc <__libc_init_array+0x3c>)
 8006ea8:	1b64      	subs	r4, r4, r5
 8006eaa:	10a4      	asrs	r4, r4, #2
 8006eac:	42a6      	cmp	r6, r4
 8006eae:	d109      	bne.n	8006ec4 <__libc_init_array+0x24>
 8006eb0:	2600      	movs	r6, #0
 8006eb2:	f000 fea7 	bl	8007c04 <_init>
 8006eb6:	4c0a      	ldr	r4, [pc, #40]	@ (8006ee0 <__libc_init_array+0x40>)
 8006eb8:	4d0a      	ldr	r5, [pc, #40]	@ (8006ee4 <__libc_init_array+0x44>)
 8006eba:	1b64      	subs	r4, r4, r5
 8006ebc:	10a4      	asrs	r4, r4, #2
 8006ebe:	42a6      	cmp	r6, r4
 8006ec0:	d105      	bne.n	8006ece <__libc_init_array+0x2e>
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	00b3      	lsls	r3, r6, #2
 8006ec6:	58eb      	ldr	r3, [r5, r3]
 8006ec8:	4798      	blx	r3
 8006eca:	3601      	adds	r6, #1
 8006ecc:	e7ee      	b.n	8006eac <__libc_init_array+0xc>
 8006ece:	00b3      	lsls	r3, r6, #2
 8006ed0:	58eb      	ldr	r3, [r5, r3]
 8006ed2:	4798      	blx	r3
 8006ed4:	3601      	adds	r6, #1
 8006ed6:	e7f2      	b.n	8006ebe <__libc_init_array+0x1e>
 8006ed8:	08007dac 	.word	0x08007dac
 8006edc:	08007dac 	.word	0x08007dac
 8006ee0:	08007db0 	.word	0x08007db0
 8006ee4:	08007dac 	.word	0x08007dac

08006ee8 <__retarget_lock_acquire_recursive>:
 8006ee8:	4770      	bx	lr

08006eea <__retarget_lock_release_recursive>:
 8006eea:	4770      	bx	lr

08006eec <_free_r>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	0005      	movs	r5, r0
 8006ef0:	1e0c      	subs	r4, r1, #0
 8006ef2:	d010      	beq.n	8006f16 <_free_r+0x2a>
 8006ef4:	3c04      	subs	r4, #4
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	da00      	bge.n	8006efe <_free_r+0x12>
 8006efc:	18e4      	adds	r4, r4, r3
 8006efe:	0028      	movs	r0, r5
 8006f00:	f000 f8e0 	bl	80070c4 <__malloc_lock>
 8006f04:	4a1d      	ldr	r2, [pc, #116]	@ (8006f7c <_free_r+0x90>)
 8006f06:	6813      	ldr	r3, [r2, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d105      	bne.n	8006f18 <_free_r+0x2c>
 8006f0c:	6063      	str	r3, [r4, #4]
 8006f0e:	6014      	str	r4, [r2, #0]
 8006f10:	0028      	movs	r0, r5
 8006f12:	f000 f8df 	bl	80070d4 <__malloc_unlock>
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	d908      	bls.n	8006f2e <_free_r+0x42>
 8006f1c:	6820      	ldr	r0, [r4, #0]
 8006f1e:	1821      	adds	r1, r4, r0
 8006f20:	428b      	cmp	r3, r1
 8006f22:	d1f3      	bne.n	8006f0c <_free_r+0x20>
 8006f24:	6819      	ldr	r1, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	1809      	adds	r1, r1, r0
 8006f2a:	6021      	str	r1, [r4, #0]
 8006f2c:	e7ee      	b.n	8006f0c <_free_r+0x20>
 8006f2e:	001a      	movs	r2, r3
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <_free_r+0x4e>
 8006f36:	42a3      	cmp	r3, r4
 8006f38:	d9f9      	bls.n	8006f2e <_free_r+0x42>
 8006f3a:	6811      	ldr	r1, [r2, #0]
 8006f3c:	1850      	adds	r0, r2, r1
 8006f3e:	42a0      	cmp	r0, r4
 8006f40:	d10b      	bne.n	8006f5a <_free_r+0x6e>
 8006f42:	6820      	ldr	r0, [r4, #0]
 8006f44:	1809      	adds	r1, r1, r0
 8006f46:	1850      	adds	r0, r2, r1
 8006f48:	6011      	str	r1, [r2, #0]
 8006f4a:	4283      	cmp	r3, r0
 8006f4c:	d1e0      	bne.n	8006f10 <_free_r+0x24>
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	1841      	adds	r1, r0, r1
 8006f54:	6011      	str	r1, [r2, #0]
 8006f56:	6053      	str	r3, [r2, #4]
 8006f58:	e7da      	b.n	8006f10 <_free_r+0x24>
 8006f5a:	42a0      	cmp	r0, r4
 8006f5c:	d902      	bls.n	8006f64 <_free_r+0x78>
 8006f5e:	230c      	movs	r3, #12
 8006f60:	602b      	str	r3, [r5, #0]
 8006f62:	e7d5      	b.n	8006f10 <_free_r+0x24>
 8006f64:	6820      	ldr	r0, [r4, #0]
 8006f66:	1821      	adds	r1, r4, r0
 8006f68:	428b      	cmp	r3, r1
 8006f6a:	d103      	bne.n	8006f74 <_free_r+0x88>
 8006f6c:	6819      	ldr	r1, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	1809      	adds	r1, r1, r0
 8006f72:	6021      	str	r1, [r4, #0]
 8006f74:	6063      	str	r3, [r4, #4]
 8006f76:	6054      	str	r4, [r2, #4]
 8006f78:	e7ca      	b.n	8006f10 <_free_r+0x24>
 8006f7a:	46c0      	nop			@ (mov r8, r8)
 8006f7c:	200002fc 	.word	0x200002fc

08006f80 <sbrk_aligned>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	4e0f      	ldr	r6, [pc, #60]	@ (8006fc0 <sbrk_aligned+0x40>)
 8006f84:	000d      	movs	r5, r1
 8006f86:	6831      	ldr	r1, [r6, #0]
 8006f88:	0004      	movs	r4, r0
 8006f8a:	2900      	cmp	r1, #0
 8006f8c:	d102      	bne.n	8006f94 <sbrk_aligned+0x14>
 8006f8e:	f000 fb95 	bl	80076bc <_sbrk_r>
 8006f92:	6030      	str	r0, [r6, #0]
 8006f94:	0029      	movs	r1, r5
 8006f96:	0020      	movs	r0, r4
 8006f98:	f000 fb90 	bl	80076bc <_sbrk_r>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d103      	bne.n	8006fa8 <sbrk_aligned+0x28>
 8006fa0:	2501      	movs	r5, #1
 8006fa2:	426d      	negs	r5, r5
 8006fa4:	0028      	movs	r0, r5
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	2303      	movs	r3, #3
 8006faa:	1cc5      	adds	r5, r0, #3
 8006fac:	439d      	bics	r5, r3
 8006fae:	42a8      	cmp	r0, r5
 8006fb0:	d0f8      	beq.n	8006fa4 <sbrk_aligned+0x24>
 8006fb2:	1a29      	subs	r1, r5, r0
 8006fb4:	0020      	movs	r0, r4
 8006fb6:	f000 fb81 	bl	80076bc <_sbrk_r>
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d1f2      	bne.n	8006fa4 <sbrk_aligned+0x24>
 8006fbe:	e7ef      	b.n	8006fa0 <sbrk_aligned+0x20>
 8006fc0:	200002f8 	.word	0x200002f8

08006fc4 <_malloc_r>:
 8006fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fc6:	2203      	movs	r2, #3
 8006fc8:	1ccb      	adds	r3, r1, #3
 8006fca:	4393      	bics	r3, r2
 8006fcc:	3308      	adds	r3, #8
 8006fce:	0005      	movs	r5, r0
 8006fd0:	001f      	movs	r7, r3
 8006fd2:	2b0c      	cmp	r3, #12
 8006fd4:	d234      	bcs.n	8007040 <_malloc_r+0x7c>
 8006fd6:	270c      	movs	r7, #12
 8006fd8:	42b9      	cmp	r1, r7
 8006fda:	d833      	bhi.n	8007044 <_malloc_r+0x80>
 8006fdc:	0028      	movs	r0, r5
 8006fde:	f000 f871 	bl	80070c4 <__malloc_lock>
 8006fe2:	4e37      	ldr	r6, [pc, #220]	@ (80070c0 <_malloc_r+0xfc>)
 8006fe4:	6833      	ldr	r3, [r6, #0]
 8006fe6:	001c      	movs	r4, r3
 8006fe8:	2c00      	cmp	r4, #0
 8006fea:	d12f      	bne.n	800704c <_malloc_r+0x88>
 8006fec:	0039      	movs	r1, r7
 8006fee:	0028      	movs	r0, r5
 8006ff0:	f7ff ffc6 	bl	8006f80 <sbrk_aligned>
 8006ff4:	0004      	movs	r4, r0
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	d15f      	bne.n	80070ba <_malloc_r+0xf6>
 8006ffa:	6834      	ldr	r4, [r6, #0]
 8006ffc:	9400      	str	r4, [sp, #0]
 8006ffe:	9b00      	ldr	r3, [sp, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d14a      	bne.n	800709a <_malloc_r+0xd6>
 8007004:	2c00      	cmp	r4, #0
 8007006:	d052      	beq.n	80070ae <_malloc_r+0xea>
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	0028      	movs	r0, r5
 800700c:	18e3      	adds	r3, r4, r3
 800700e:	9900      	ldr	r1, [sp, #0]
 8007010:	9301      	str	r3, [sp, #4]
 8007012:	f000 fb53 	bl	80076bc <_sbrk_r>
 8007016:	9b01      	ldr	r3, [sp, #4]
 8007018:	4283      	cmp	r3, r0
 800701a:	d148      	bne.n	80070ae <_malloc_r+0xea>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	0028      	movs	r0, r5
 8007020:	1aff      	subs	r7, r7, r3
 8007022:	0039      	movs	r1, r7
 8007024:	f7ff ffac 	bl	8006f80 <sbrk_aligned>
 8007028:	3001      	adds	r0, #1
 800702a:	d040      	beq.n	80070ae <_malloc_r+0xea>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	19db      	adds	r3, r3, r7
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	6833      	ldr	r3, [r6, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	2a00      	cmp	r2, #0
 8007038:	d133      	bne.n	80070a2 <_malloc_r+0xde>
 800703a:	9b00      	ldr	r3, [sp, #0]
 800703c:	6033      	str	r3, [r6, #0]
 800703e:	e019      	b.n	8007074 <_malloc_r+0xb0>
 8007040:	2b00      	cmp	r3, #0
 8007042:	dac9      	bge.n	8006fd8 <_malloc_r+0x14>
 8007044:	230c      	movs	r3, #12
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	2000      	movs	r0, #0
 800704a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800704c:	6821      	ldr	r1, [r4, #0]
 800704e:	1bc9      	subs	r1, r1, r7
 8007050:	d420      	bmi.n	8007094 <_malloc_r+0xd0>
 8007052:	290b      	cmp	r1, #11
 8007054:	d90a      	bls.n	800706c <_malloc_r+0xa8>
 8007056:	19e2      	adds	r2, r4, r7
 8007058:	6027      	str	r7, [r4, #0]
 800705a:	42a3      	cmp	r3, r4
 800705c:	d104      	bne.n	8007068 <_malloc_r+0xa4>
 800705e:	6032      	str	r2, [r6, #0]
 8007060:	6863      	ldr	r3, [r4, #4]
 8007062:	6011      	str	r1, [r2, #0]
 8007064:	6053      	str	r3, [r2, #4]
 8007066:	e005      	b.n	8007074 <_malloc_r+0xb0>
 8007068:	605a      	str	r2, [r3, #4]
 800706a:	e7f9      	b.n	8007060 <_malloc_r+0x9c>
 800706c:	6862      	ldr	r2, [r4, #4]
 800706e:	42a3      	cmp	r3, r4
 8007070:	d10e      	bne.n	8007090 <_malloc_r+0xcc>
 8007072:	6032      	str	r2, [r6, #0]
 8007074:	0028      	movs	r0, r5
 8007076:	f000 f82d 	bl	80070d4 <__malloc_unlock>
 800707a:	0020      	movs	r0, r4
 800707c:	2207      	movs	r2, #7
 800707e:	300b      	adds	r0, #11
 8007080:	1d23      	adds	r3, r4, #4
 8007082:	4390      	bics	r0, r2
 8007084:	1ac2      	subs	r2, r0, r3
 8007086:	4298      	cmp	r0, r3
 8007088:	d0df      	beq.n	800704a <_malloc_r+0x86>
 800708a:	1a1b      	subs	r3, r3, r0
 800708c:	50a3      	str	r3, [r4, r2]
 800708e:	e7dc      	b.n	800704a <_malloc_r+0x86>
 8007090:	605a      	str	r2, [r3, #4]
 8007092:	e7ef      	b.n	8007074 <_malloc_r+0xb0>
 8007094:	0023      	movs	r3, r4
 8007096:	6864      	ldr	r4, [r4, #4]
 8007098:	e7a6      	b.n	8006fe8 <_malloc_r+0x24>
 800709a:	9c00      	ldr	r4, [sp, #0]
 800709c:	6863      	ldr	r3, [r4, #4]
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	e7ad      	b.n	8006ffe <_malloc_r+0x3a>
 80070a2:	001a      	movs	r2, r3
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	42a3      	cmp	r3, r4
 80070a8:	d1fb      	bne.n	80070a2 <_malloc_r+0xde>
 80070aa:	2300      	movs	r3, #0
 80070ac:	e7da      	b.n	8007064 <_malloc_r+0xa0>
 80070ae:	230c      	movs	r3, #12
 80070b0:	0028      	movs	r0, r5
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	f000 f80e 	bl	80070d4 <__malloc_unlock>
 80070b8:	e7c6      	b.n	8007048 <_malloc_r+0x84>
 80070ba:	6007      	str	r7, [r0, #0]
 80070bc:	e7da      	b.n	8007074 <_malloc_r+0xb0>
 80070be:	46c0      	nop			@ (mov r8, r8)
 80070c0:	200002fc 	.word	0x200002fc

080070c4 <__malloc_lock>:
 80070c4:	b510      	push	{r4, lr}
 80070c6:	4802      	ldr	r0, [pc, #8]	@ (80070d0 <__malloc_lock+0xc>)
 80070c8:	f7ff ff0e 	bl	8006ee8 <__retarget_lock_acquire_recursive>
 80070cc:	bd10      	pop	{r4, pc}
 80070ce:	46c0      	nop			@ (mov r8, r8)
 80070d0:	200002f4 	.word	0x200002f4

080070d4 <__malloc_unlock>:
 80070d4:	b510      	push	{r4, lr}
 80070d6:	4802      	ldr	r0, [pc, #8]	@ (80070e0 <__malloc_unlock+0xc>)
 80070d8:	f7ff ff07 	bl	8006eea <__retarget_lock_release_recursive>
 80070dc:	bd10      	pop	{r4, pc}
 80070de:	46c0      	nop			@ (mov r8, r8)
 80070e0:	200002f4 	.word	0x200002f4

080070e4 <__ssputs_r>:
 80070e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e6:	688e      	ldr	r6, [r1, #8]
 80070e8:	b085      	sub	sp, #20
 80070ea:	001f      	movs	r7, r3
 80070ec:	000c      	movs	r4, r1
 80070ee:	680b      	ldr	r3, [r1, #0]
 80070f0:	9002      	str	r0, [sp, #8]
 80070f2:	9203      	str	r2, [sp, #12]
 80070f4:	42be      	cmp	r6, r7
 80070f6:	d830      	bhi.n	800715a <__ssputs_r+0x76>
 80070f8:	210c      	movs	r1, #12
 80070fa:	5e62      	ldrsh	r2, [r4, r1]
 80070fc:	2190      	movs	r1, #144	@ 0x90
 80070fe:	00c9      	lsls	r1, r1, #3
 8007100:	420a      	tst	r2, r1
 8007102:	d028      	beq.n	8007156 <__ssputs_r+0x72>
 8007104:	2003      	movs	r0, #3
 8007106:	6921      	ldr	r1, [r4, #16]
 8007108:	1a5b      	subs	r3, r3, r1
 800710a:	9301      	str	r3, [sp, #4]
 800710c:	6963      	ldr	r3, [r4, #20]
 800710e:	4343      	muls	r3, r0
 8007110:	9801      	ldr	r0, [sp, #4]
 8007112:	0fdd      	lsrs	r5, r3, #31
 8007114:	18ed      	adds	r5, r5, r3
 8007116:	1c7b      	adds	r3, r7, #1
 8007118:	181b      	adds	r3, r3, r0
 800711a:	106d      	asrs	r5, r5, #1
 800711c:	42ab      	cmp	r3, r5
 800711e:	d900      	bls.n	8007122 <__ssputs_r+0x3e>
 8007120:	001d      	movs	r5, r3
 8007122:	0552      	lsls	r2, r2, #21
 8007124:	d528      	bpl.n	8007178 <__ssputs_r+0x94>
 8007126:	0029      	movs	r1, r5
 8007128:	9802      	ldr	r0, [sp, #8]
 800712a:	f7ff ff4b 	bl	8006fc4 <_malloc_r>
 800712e:	1e06      	subs	r6, r0, #0
 8007130:	d02c      	beq.n	800718c <__ssputs_r+0xa8>
 8007132:	9a01      	ldr	r2, [sp, #4]
 8007134:	6921      	ldr	r1, [r4, #16]
 8007136:	f000 fade 	bl	80076f6 <memcpy>
 800713a:	89a2      	ldrh	r2, [r4, #12]
 800713c:	4b18      	ldr	r3, [pc, #96]	@ (80071a0 <__ssputs_r+0xbc>)
 800713e:	401a      	ands	r2, r3
 8007140:	2380      	movs	r3, #128	@ 0x80
 8007142:	4313      	orrs	r3, r2
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	9b01      	ldr	r3, [sp, #4]
 8007148:	6126      	str	r6, [r4, #16]
 800714a:	18f6      	adds	r6, r6, r3
 800714c:	6026      	str	r6, [r4, #0]
 800714e:	003e      	movs	r6, r7
 8007150:	6165      	str	r5, [r4, #20]
 8007152:	1aed      	subs	r5, r5, r3
 8007154:	60a5      	str	r5, [r4, #8]
 8007156:	42be      	cmp	r6, r7
 8007158:	d900      	bls.n	800715c <__ssputs_r+0x78>
 800715a:	003e      	movs	r6, r7
 800715c:	0032      	movs	r2, r6
 800715e:	9903      	ldr	r1, [sp, #12]
 8007160:	6820      	ldr	r0, [r4, #0]
 8007162:	f000 fa99 	bl	8007698 <memmove>
 8007166:	2000      	movs	r0, #0
 8007168:	68a3      	ldr	r3, [r4, #8]
 800716a:	1b9b      	subs	r3, r3, r6
 800716c:	60a3      	str	r3, [r4, #8]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	199b      	adds	r3, r3, r6
 8007172:	6023      	str	r3, [r4, #0]
 8007174:	b005      	add	sp, #20
 8007176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007178:	002a      	movs	r2, r5
 800717a:	9802      	ldr	r0, [sp, #8]
 800717c:	f000 fac4 	bl	8007708 <_realloc_r>
 8007180:	1e06      	subs	r6, r0, #0
 8007182:	d1e0      	bne.n	8007146 <__ssputs_r+0x62>
 8007184:	6921      	ldr	r1, [r4, #16]
 8007186:	9802      	ldr	r0, [sp, #8]
 8007188:	f7ff feb0 	bl	8006eec <_free_r>
 800718c:	230c      	movs	r3, #12
 800718e:	2001      	movs	r0, #1
 8007190:	9a02      	ldr	r2, [sp, #8]
 8007192:	4240      	negs	r0, r0
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	89a2      	ldrh	r2, [r4, #12]
 8007198:	3334      	adds	r3, #52	@ 0x34
 800719a:	4313      	orrs	r3, r2
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	e7e9      	b.n	8007174 <__ssputs_r+0x90>
 80071a0:	fffffb7f 	.word	0xfffffb7f

080071a4 <_svfiprintf_r>:
 80071a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a6:	b0a1      	sub	sp, #132	@ 0x84
 80071a8:	9003      	str	r0, [sp, #12]
 80071aa:	001d      	movs	r5, r3
 80071ac:	898b      	ldrh	r3, [r1, #12]
 80071ae:	000f      	movs	r7, r1
 80071b0:	0016      	movs	r6, r2
 80071b2:	061b      	lsls	r3, r3, #24
 80071b4:	d511      	bpl.n	80071da <_svfiprintf_r+0x36>
 80071b6:	690b      	ldr	r3, [r1, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10e      	bne.n	80071da <_svfiprintf_r+0x36>
 80071bc:	2140      	movs	r1, #64	@ 0x40
 80071be:	f7ff ff01 	bl	8006fc4 <_malloc_r>
 80071c2:	6038      	str	r0, [r7, #0]
 80071c4:	6138      	str	r0, [r7, #16]
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d105      	bne.n	80071d6 <_svfiprintf_r+0x32>
 80071ca:	230c      	movs	r3, #12
 80071cc:	9a03      	ldr	r2, [sp, #12]
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	2001      	movs	r0, #1
 80071d2:	4240      	negs	r0, r0
 80071d4:	e0cf      	b.n	8007376 <_svfiprintf_r+0x1d2>
 80071d6:	2340      	movs	r3, #64	@ 0x40
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	2300      	movs	r3, #0
 80071dc:	ac08      	add	r4, sp, #32
 80071de:	6163      	str	r3, [r4, #20]
 80071e0:	3320      	adds	r3, #32
 80071e2:	7663      	strb	r3, [r4, #25]
 80071e4:	3310      	adds	r3, #16
 80071e6:	76a3      	strb	r3, [r4, #26]
 80071e8:	9507      	str	r5, [sp, #28]
 80071ea:	0035      	movs	r5, r6
 80071ec:	782b      	ldrb	r3, [r5, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <_svfiprintf_r+0x52>
 80071f2:	2b25      	cmp	r3, #37	@ 0x25
 80071f4:	d148      	bne.n	8007288 <_svfiprintf_r+0xe4>
 80071f6:	1bab      	subs	r3, r5, r6
 80071f8:	9305      	str	r3, [sp, #20]
 80071fa:	42b5      	cmp	r5, r6
 80071fc:	d00b      	beq.n	8007216 <_svfiprintf_r+0x72>
 80071fe:	0032      	movs	r2, r6
 8007200:	0039      	movs	r1, r7
 8007202:	9803      	ldr	r0, [sp, #12]
 8007204:	f7ff ff6e 	bl	80070e4 <__ssputs_r>
 8007208:	3001      	adds	r0, #1
 800720a:	d100      	bne.n	800720e <_svfiprintf_r+0x6a>
 800720c:	e0ae      	b.n	800736c <_svfiprintf_r+0x1c8>
 800720e:	6963      	ldr	r3, [r4, #20]
 8007210:	9a05      	ldr	r2, [sp, #20]
 8007212:	189b      	adds	r3, r3, r2
 8007214:	6163      	str	r3, [r4, #20]
 8007216:	782b      	ldrb	r3, [r5, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d100      	bne.n	800721e <_svfiprintf_r+0x7a>
 800721c:	e0a6      	b.n	800736c <_svfiprintf_r+0x1c8>
 800721e:	2201      	movs	r2, #1
 8007220:	2300      	movs	r3, #0
 8007222:	4252      	negs	r2, r2
 8007224:	6062      	str	r2, [r4, #4]
 8007226:	a904      	add	r1, sp, #16
 8007228:	3254      	adds	r2, #84	@ 0x54
 800722a:	1852      	adds	r2, r2, r1
 800722c:	1c6e      	adds	r6, r5, #1
 800722e:	6023      	str	r3, [r4, #0]
 8007230:	60e3      	str	r3, [r4, #12]
 8007232:	60a3      	str	r3, [r4, #8]
 8007234:	7013      	strb	r3, [r2, #0]
 8007236:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007238:	4b54      	ldr	r3, [pc, #336]	@ (800738c <_svfiprintf_r+0x1e8>)
 800723a:	2205      	movs	r2, #5
 800723c:	0018      	movs	r0, r3
 800723e:	7831      	ldrb	r1, [r6, #0]
 8007240:	9305      	str	r3, [sp, #20]
 8007242:	f000 fa4d 	bl	80076e0 <memchr>
 8007246:	1c75      	adds	r5, r6, #1
 8007248:	2800      	cmp	r0, #0
 800724a:	d11f      	bne.n	800728c <_svfiprintf_r+0xe8>
 800724c:	6822      	ldr	r2, [r4, #0]
 800724e:	06d3      	lsls	r3, r2, #27
 8007250:	d504      	bpl.n	800725c <_svfiprintf_r+0xb8>
 8007252:	2353      	movs	r3, #83	@ 0x53
 8007254:	a904      	add	r1, sp, #16
 8007256:	185b      	adds	r3, r3, r1
 8007258:	2120      	movs	r1, #32
 800725a:	7019      	strb	r1, [r3, #0]
 800725c:	0713      	lsls	r3, r2, #28
 800725e:	d504      	bpl.n	800726a <_svfiprintf_r+0xc6>
 8007260:	2353      	movs	r3, #83	@ 0x53
 8007262:	a904      	add	r1, sp, #16
 8007264:	185b      	adds	r3, r3, r1
 8007266:	212b      	movs	r1, #43	@ 0x2b
 8007268:	7019      	strb	r1, [r3, #0]
 800726a:	7833      	ldrb	r3, [r6, #0]
 800726c:	2b2a      	cmp	r3, #42	@ 0x2a
 800726e:	d016      	beq.n	800729e <_svfiprintf_r+0xfa>
 8007270:	0035      	movs	r5, r6
 8007272:	2100      	movs	r1, #0
 8007274:	200a      	movs	r0, #10
 8007276:	68e3      	ldr	r3, [r4, #12]
 8007278:	782a      	ldrb	r2, [r5, #0]
 800727a:	1c6e      	adds	r6, r5, #1
 800727c:	3a30      	subs	r2, #48	@ 0x30
 800727e:	2a09      	cmp	r2, #9
 8007280:	d950      	bls.n	8007324 <_svfiprintf_r+0x180>
 8007282:	2900      	cmp	r1, #0
 8007284:	d111      	bne.n	80072aa <_svfiprintf_r+0x106>
 8007286:	e017      	b.n	80072b8 <_svfiprintf_r+0x114>
 8007288:	3501      	adds	r5, #1
 800728a:	e7af      	b.n	80071ec <_svfiprintf_r+0x48>
 800728c:	9b05      	ldr	r3, [sp, #20]
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	1ac0      	subs	r0, r0, r3
 8007292:	2301      	movs	r3, #1
 8007294:	4083      	lsls	r3, r0
 8007296:	4313      	orrs	r3, r2
 8007298:	002e      	movs	r6, r5
 800729a:	6023      	str	r3, [r4, #0]
 800729c:	e7cc      	b.n	8007238 <_svfiprintf_r+0x94>
 800729e:	9b07      	ldr	r3, [sp, #28]
 80072a0:	1d19      	adds	r1, r3, #4
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	9107      	str	r1, [sp, #28]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	db01      	blt.n	80072ae <_svfiprintf_r+0x10a>
 80072aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072ac:	e004      	b.n	80072b8 <_svfiprintf_r+0x114>
 80072ae:	425b      	negs	r3, r3
 80072b0:	60e3      	str	r3, [r4, #12]
 80072b2:	2302      	movs	r3, #2
 80072b4:	4313      	orrs	r3, r2
 80072b6:	6023      	str	r3, [r4, #0]
 80072b8:	782b      	ldrb	r3, [r5, #0]
 80072ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80072bc:	d10c      	bne.n	80072d8 <_svfiprintf_r+0x134>
 80072be:	786b      	ldrb	r3, [r5, #1]
 80072c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80072c2:	d134      	bne.n	800732e <_svfiprintf_r+0x18a>
 80072c4:	9b07      	ldr	r3, [sp, #28]
 80072c6:	3502      	adds	r5, #2
 80072c8:	1d1a      	adds	r2, r3, #4
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	9207      	str	r2, [sp, #28]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	da01      	bge.n	80072d6 <_svfiprintf_r+0x132>
 80072d2:	2301      	movs	r3, #1
 80072d4:	425b      	negs	r3, r3
 80072d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80072d8:	4e2d      	ldr	r6, [pc, #180]	@ (8007390 <_svfiprintf_r+0x1ec>)
 80072da:	2203      	movs	r2, #3
 80072dc:	0030      	movs	r0, r6
 80072de:	7829      	ldrb	r1, [r5, #0]
 80072e0:	f000 f9fe 	bl	80076e0 <memchr>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	d006      	beq.n	80072f6 <_svfiprintf_r+0x152>
 80072e8:	2340      	movs	r3, #64	@ 0x40
 80072ea:	1b80      	subs	r0, r0, r6
 80072ec:	4083      	lsls	r3, r0
 80072ee:	6822      	ldr	r2, [r4, #0]
 80072f0:	3501      	adds	r5, #1
 80072f2:	4313      	orrs	r3, r2
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	7829      	ldrb	r1, [r5, #0]
 80072f8:	2206      	movs	r2, #6
 80072fa:	4826      	ldr	r0, [pc, #152]	@ (8007394 <_svfiprintf_r+0x1f0>)
 80072fc:	1c6e      	adds	r6, r5, #1
 80072fe:	7621      	strb	r1, [r4, #24]
 8007300:	f000 f9ee 	bl	80076e0 <memchr>
 8007304:	2800      	cmp	r0, #0
 8007306:	d038      	beq.n	800737a <_svfiprintf_r+0x1d6>
 8007308:	4b23      	ldr	r3, [pc, #140]	@ (8007398 <_svfiprintf_r+0x1f4>)
 800730a:	2b00      	cmp	r3, #0
 800730c:	d122      	bne.n	8007354 <_svfiprintf_r+0x1b0>
 800730e:	2207      	movs	r2, #7
 8007310:	9b07      	ldr	r3, [sp, #28]
 8007312:	3307      	adds	r3, #7
 8007314:	4393      	bics	r3, r2
 8007316:	3308      	adds	r3, #8
 8007318:	9307      	str	r3, [sp, #28]
 800731a:	6963      	ldr	r3, [r4, #20]
 800731c:	9a04      	ldr	r2, [sp, #16]
 800731e:	189b      	adds	r3, r3, r2
 8007320:	6163      	str	r3, [r4, #20]
 8007322:	e762      	b.n	80071ea <_svfiprintf_r+0x46>
 8007324:	4343      	muls	r3, r0
 8007326:	0035      	movs	r5, r6
 8007328:	2101      	movs	r1, #1
 800732a:	189b      	adds	r3, r3, r2
 800732c:	e7a4      	b.n	8007278 <_svfiprintf_r+0xd4>
 800732e:	2300      	movs	r3, #0
 8007330:	200a      	movs	r0, #10
 8007332:	0019      	movs	r1, r3
 8007334:	3501      	adds	r5, #1
 8007336:	6063      	str	r3, [r4, #4]
 8007338:	782a      	ldrb	r2, [r5, #0]
 800733a:	1c6e      	adds	r6, r5, #1
 800733c:	3a30      	subs	r2, #48	@ 0x30
 800733e:	2a09      	cmp	r2, #9
 8007340:	d903      	bls.n	800734a <_svfiprintf_r+0x1a6>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0c8      	beq.n	80072d8 <_svfiprintf_r+0x134>
 8007346:	9109      	str	r1, [sp, #36]	@ 0x24
 8007348:	e7c6      	b.n	80072d8 <_svfiprintf_r+0x134>
 800734a:	4341      	muls	r1, r0
 800734c:	0035      	movs	r5, r6
 800734e:	2301      	movs	r3, #1
 8007350:	1889      	adds	r1, r1, r2
 8007352:	e7f1      	b.n	8007338 <_svfiprintf_r+0x194>
 8007354:	aa07      	add	r2, sp, #28
 8007356:	9200      	str	r2, [sp, #0]
 8007358:	0021      	movs	r1, r4
 800735a:	003a      	movs	r2, r7
 800735c:	4b0f      	ldr	r3, [pc, #60]	@ (800739c <_svfiprintf_r+0x1f8>)
 800735e:	9803      	ldr	r0, [sp, #12]
 8007360:	e000      	b.n	8007364 <_svfiprintf_r+0x1c0>
 8007362:	bf00      	nop
 8007364:	9004      	str	r0, [sp, #16]
 8007366:	9b04      	ldr	r3, [sp, #16]
 8007368:	3301      	adds	r3, #1
 800736a:	d1d6      	bne.n	800731a <_svfiprintf_r+0x176>
 800736c:	89bb      	ldrh	r3, [r7, #12]
 800736e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007370:	065b      	lsls	r3, r3, #25
 8007372:	d500      	bpl.n	8007376 <_svfiprintf_r+0x1d2>
 8007374:	e72c      	b.n	80071d0 <_svfiprintf_r+0x2c>
 8007376:	b021      	add	sp, #132	@ 0x84
 8007378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800737a:	aa07      	add	r2, sp, #28
 800737c:	9200      	str	r2, [sp, #0]
 800737e:	0021      	movs	r1, r4
 8007380:	003a      	movs	r2, r7
 8007382:	4b06      	ldr	r3, [pc, #24]	@ (800739c <_svfiprintf_r+0x1f8>)
 8007384:	9803      	ldr	r0, [sp, #12]
 8007386:	f000 f87b 	bl	8007480 <_printf_i>
 800738a:	e7eb      	b.n	8007364 <_svfiprintf_r+0x1c0>
 800738c:	08007d70 	.word	0x08007d70
 8007390:	08007d76 	.word	0x08007d76
 8007394:	08007d7a 	.word	0x08007d7a
 8007398:	00000000 	.word	0x00000000
 800739c:	080070e5 	.word	0x080070e5

080073a0 <_printf_common>:
 80073a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073a2:	0016      	movs	r6, r2
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	688a      	ldr	r2, [r1, #8]
 80073a8:	690b      	ldr	r3, [r1, #16]
 80073aa:	000c      	movs	r4, r1
 80073ac:	9000      	str	r0, [sp, #0]
 80073ae:	4293      	cmp	r3, r2
 80073b0:	da00      	bge.n	80073b4 <_printf_common+0x14>
 80073b2:	0013      	movs	r3, r2
 80073b4:	0022      	movs	r2, r4
 80073b6:	6033      	str	r3, [r6, #0]
 80073b8:	3243      	adds	r2, #67	@ 0x43
 80073ba:	7812      	ldrb	r2, [r2, #0]
 80073bc:	2a00      	cmp	r2, #0
 80073be:	d001      	beq.n	80073c4 <_printf_common+0x24>
 80073c0:	3301      	adds	r3, #1
 80073c2:	6033      	str	r3, [r6, #0]
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	069b      	lsls	r3, r3, #26
 80073c8:	d502      	bpl.n	80073d0 <_printf_common+0x30>
 80073ca:	6833      	ldr	r3, [r6, #0]
 80073cc:	3302      	adds	r3, #2
 80073ce:	6033      	str	r3, [r6, #0]
 80073d0:	6822      	ldr	r2, [r4, #0]
 80073d2:	2306      	movs	r3, #6
 80073d4:	0015      	movs	r5, r2
 80073d6:	401d      	ands	r5, r3
 80073d8:	421a      	tst	r2, r3
 80073da:	d027      	beq.n	800742c <_printf_common+0x8c>
 80073dc:	0023      	movs	r3, r4
 80073de:	3343      	adds	r3, #67	@ 0x43
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	1e5a      	subs	r2, r3, #1
 80073e4:	4193      	sbcs	r3, r2
 80073e6:	6822      	ldr	r2, [r4, #0]
 80073e8:	0692      	lsls	r2, r2, #26
 80073ea:	d430      	bmi.n	800744e <_printf_common+0xae>
 80073ec:	0022      	movs	r2, r4
 80073ee:	9901      	ldr	r1, [sp, #4]
 80073f0:	9800      	ldr	r0, [sp, #0]
 80073f2:	9d08      	ldr	r5, [sp, #32]
 80073f4:	3243      	adds	r2, #67	@ 0x43
 80073f6:	47a8      	blx	r5
 80073f8:	3001      	adds	r0, #1
 80073fa:	d025      	beq.n	8007448 <_printf_common+0xa8>
 80073fc:	2206      	movs	r2, #6
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	2500      	movs	r5, #0
 8007402:	4013      	ands	r3, r2
 8007404:	2b04      	cmp	r3, #4
 8007406:	d105      	bne.n	8007414 <_printf_common+0x74>
 8007408:	6833      	ldr	r3, [r6, #0]
 800740a:	68e5      	ldr	r5, [r4, #12]
 800740c:	1aed      	subs	r5, r5, r3
 800740e:	43eb      	mvns	r3, r5
 8007410:	17db      	asrs	r3, r3, #31
 8007412:	401d      	ands	r5, r3
 8007414:	68a3      	ldr	r3, [r4, #8]
 8007416:	6922      	ldr	r2, [r4, #16]
 8007418:	4293      	cmp	r3, r2
 800741a:	dd01      	ble.n	8007420 <_printf_common+0x80>
 800741c:	1a9b      	subs	r3, r3, r2
 800741e:	18ed      	adds	r5, r5, r3
 8007420:	2600      	movs	r6, #0
 8007422:	42b5      	cmp	r5, r6
 8007424:	d120      	bne.n	8007468 <_printf_common+0xc8>
 8007426:	2000      	movs	r0, #0
 8007428:	e010      	b.n	800744c <_printf_common+0xac>
 800742a:	3501      	adds	r5, #1
 800742c:	68e3      	ldr	r3, [r4, #12]
 800742e:	6832      	ldr	r2, [r6, #0]
 8007430:	1a9b      	subs	r3, r3, r2
 8007432:	42ab      	cmp	r3, r5
 8007434:	ddd2      	ble.n	80073dc <_printf_common+0x3c>
 8007436:	0022      	movs	r2, r4
 8007438:	2301      	movs	r3, #1
 800743a:	9901      	ldr	r1, [sp, #4]
 800743c:	9800      	ldr	r0, [sp, #0]
 800743e:	9f08      	ldr	r7, [sp, #32]
 8007440:	3219      	adds	r2, #25
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	d1f0      	bne.n	800742a <_printf_common+0x8a>
 8007448:	2001      	movs	r0, #1
 800744a:	4240      	negs	r0, r0
 800744c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800744e:	2030      	movs	r0, #48	@ 0x30
 8007450:	18e1      	adds	r1, r4, r3
 8007452:	3143      	adds	r1, #67	@ 0x43
 8007454:	7008      	strb	r0, [r1, #0]
 8007456:	0021      	movs	r1, r4
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	3145      	adds	r1, #69	@ 0x45
 800745c:	7809      	ldrb	r1, [r1, #0]
 800745e:	18a2      	adds	r2, r4, r2
 8007460:	3243      	adds	r2, #67	@ 0x43
 8007462:	3302      	adds	r3, #2
 8007464:	7011      	strb	r1, [r2, #0]
 8007466:	e7c1      	b.n	80073ec <_printf_common+0x4c>
 8007468:	0022      	movs	r2, r4
 800746a:	2301      	movs	r3, #1
 800746c:	9901      	ldr	r1, [sp, #4]
 800746e:	9800      	ldr	r0, [sp, #0]
 8007470:	9f08      	ldr	r7, [sp, #32]
 8007472:	321a      	adds	r2, #26
 8007474:	47b8      	blx	r7
 8007476:	3001      	adds	r0, #1
 8007478:	d0e6      	beq.n	8007448 <_printf_common+0xa8>
 800747a:	3601      	adds	r6, #1
 800747c:	e7d1      	b.n	8007422 <_printf_common+0x82>
	...

08007480 <_printf_i>:
 8007480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007482:	b08b      	sub	sp, #44	@ 0x2c
 8007484:	9206      	str	r2, [sp, #24]
 8007486:	000a      	movs	r2, r1
 8007488:	3243      	adds	r2, #67	@ 0x43
 800748a:	9307      	str	r3, [sp, #28]
 800748c:	9005      	str	r0, [sp, #20]
 800748e:	9203      	str	r2, [sp, #12]
 8007490:	7e0a      	ldrb	r2, [r1, #24]
 8007492:	000c      	movs	r4, r1
 8007494:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007496:	2a78      	cmp	r2, #120	@ 0x78
 8007498:	d809      	bhi.n	80074ae <_printf_i+0x2e>
 800749a:	2a62      	cmp	r2, #98	@ 0x62
 800749c:	d80b      	bhi.n	80074b6 <_printf_i+0x36>
 800749e:	2a00      	cmp	r2, #0
 80074a0:	d100      	bne.n	80074a4 <_printf_i+0x24>
 80074a2:	e0ba      	b.n	800761a <_printf_i+0x19a>
 80074a4:	497a      	ldr	r1, [pc, #488]	@ (8007690 <_printf_i+0x210>)
 80074a6:	9104      	str	r1, [sp, #16]
 80074a8:	2a58      	cmp	r2, #88	@ 0x58
 80074aa:	d100      	bne.n	80074ae <_printf_i+0x2e>
 80074ac:	e08e      	b.n	80075cc <_printf_i+0x14c>
 80074ae:	0025      	movs	r5, r4
 80074b0:	3542      	adds	r5, #66	@ 0x42
 80074b2:	702a      	strb	r2, [r5, #0]
 80074b4:	e022      	b.n	80074fc <_printf_i+0x7c>
 80074b6:	0010      	movs	r0, r2
 80074b8:	3863      	subs	r0, #99	@ 0x63
 80074ba:	2815      	cmp	r0, #21
 80074bc:	d8f7      	bhi.n	80074ae <_printf_i+0x2e>
 80074be:	f7f8 fe2b 	bl	8000118 <__gnu_thumb1_case_shi>
 80074c2:	0016      	.short	0x0016
 80074c4:	fff6001f 	.word	0xfff6001f
 80074c8:	fff6fff6 	.word	0xfff6fff6
 80074cc:	001ffff6 	.word	0x001ffff6
 80074d0:	fff6fff6 	.word	0xfff6fff6
 80074d4:	fff6fff6 	.word	0xfff6fff6
 80074d8:	0036009f 	.word	0x0036009f
 80074dc:	fff6007e 	.word	0xfff6007e
 80074e0:	00b0fff6 	.word	0x00b0fff6
 80074e4:	0036fff6 	.word	0x0036fff6
 80074e8:	fff6fff6 	.word	0xfff6fff6
 80074ec:	0082      	.short	0x0082
 80074ee:	0025      	movs	r5, r4
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	3542      	adds	r5, #66	@ 0x42
 80074f4:	1d11      	adds	r1, r2, #4
 80074f6:	6019      	str	r1, [r3, #0]
 80074f8:	6813      	ldr	r3, [r2, #0]
 80074fa:	702b      	strb	r3, [r5, #0]
 80074fc:	2301      	movs	r3, #1
 80074fe:	e09e      	b.n	800763e <_printf_i+0x1be>
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	6809      	ldr	r1, [r1, #0]
 8007504:	1d02      	adds	r2, r0, #4
 8007506:	060d      	lsls	r5, r1, #24
 8007508:	d50b      	bpl.n	8007522 <_printf_i+0xa2>
 800750a:	6806      	ldr	r6, [r0, #0]
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	2e00      	cmp	r6, #0
 8007510:	da03      	bge.n	800751a <_printf_i+0x9a>
 8007512:	232d      	movs	r3, #45	@ 0x2d
 8007514:	9a03      	ldr	r2, [sp, #12]
 8007516:	4276      	negs	r6, r6
 8007518:	7013      	strb	r3, [r2, #0]
 800751a:	4b5d      	ldr	r3, [pc, #372]	@ (8007690 <_printf_i+0x210>)
 800751c:	270a      	movs	r7, #10
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	e018      	b.n	8007554 <_printf_i+0xd4>
 8007522:	6806      	ldr	r6, [r0, #0]
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	0649      	lsls	r1, r1, #25
 8007528:	d5f1      	bpl.n	800750e <_printf_i+0x8e>
 800752a:	b236      	sxth	r6, r6
 800752c:	e7ef      	b.n	800750e <_printf_i+0x8e>
 800752e:	6808      	ldr	r0, [r1, #0]
 8007530:	6819      	ldr	r1, [r3, #0]
 8007532:	c940      	ldmia	r1!, {r6}
 8007534:	0605      	lsls	r5, r0, #24
 8007536:	d402      	bmi.n	800753e <_printf_i+0xbe>
 8007538:	0640      	lsls	r0, r0, #25
 800753a:	d500      	bpl.n	800753e <_printf_i+0xbe>
 800753c:	b2b6      	uxth	r6, r6
 800753e:	6019      	str	r1, [r3, #0]
 8007540:	4b53      	ldr	r3, [pc, #332]	@ (8007690 <_printf_i+0x210>)
 8007542:	270a      	movs	r7, #10
 8007544:	9304      	str	r3, [sp, #16]
 8007546:	2a6f      	cmp	r2, #111	@ 0x6f
 8007548:	d100      	bne.n	800754c <_printf_i+0xcc>
 800754a:	3f02      	subs	r7, #2
 800754c:	0023      	movs	r3, r4
 800754e:	2200      	movs	r2, #0
 8007550:	3343      	adds	r3, #67	@ 0x43
 8007552:	701a      	strb	r2, [r3, #0]
 8007554:	6863      	ldr	r3, [r4, #4]
 8007556:	60a3      	str	r3, [r4, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	db06      	blt.n	800756a <_printf_i+0xea>
 800755c:	2104      	movs	r1, #4
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	9d03      	ldr	r5, [sp, #12]
 8007562:	438a      	bics	r2, r1
 8007564:	6022      	str	r2, [r4, #0]
 8007566:	4333      	orrs	r3, r6
 8007568:	d00c      	beq.n	8007584 <_printf_i+0x104>
 800756a:	9d03      	ldr	r5, [sp, #12]
 800756c:	0030      	movs	r0, r6
 800756e:	0039      	movs	r1, r7
 8007570:	f7f8 fe62 	bl	8000238 <__aeabi_uidivmod>
 8007574:	9b04      	ldr	r3, [sp, #16]
 8007576:	3d01      	subs	r5, #1
 8007578:	5c5b      	ldrb	r3, [r3, r1]
 800757a:	702b      	strb	r3, [r5, #0]
 800757c:	0033      	movs	r3, r6
 800757e:	0006      	movs	r6, r0
 8007580:	429f      	cmp	r7, r3
 8007582:	d9f3      	bls.n	800756c <_printf_i+0xec>
 8007584:	2f08      	cmp	r7, #8
 8007586:	d109      	bne.n	800759c <_printf_i+0x11c>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	07db      	lsls	r3, r3, #31
 800758c:	d506      	bpl.n	800759c <_printf_i+0x11c>
 800758e:	6862      	ldr	r2, [r4, #4]
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	429a      	cmp	r2, r3
 8007594:	dc02      	bgt.n	800759c <_printf_i+0x11c>
 8007596:	2330      	movs	r3, #48	@ 0x30
 8007598:	3d01      	subs	r5, #1
 800759a:	702b      	strb	r3, [r5, #0]
 800759c:	9b03      	ldr	r3, [sp, #12]
 800759e:	1b5b      	subs	r3, r3, r5
 80075a0:	6123      	str	r3, [r4, #16]
 80075a2:	9b07      	ldr	r3, [sp, #28]
 80075a4:	0021      	movs	r1, r4
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	9805      	ldr	r0, [sp, #20]
 80075aa:	9b06      	ldr	r3, [sp, #24]
 80075ac:	aa09      	add	r2, sp, #36	@ 0x24
 80075ae:	f7ff fef7 	bl	80073a0 <_printf_common>
 80075b2:	3001      	adds	r0, #1
 80075b4:	d148      	bne.n	8007648 <_printf_i+0x1c8>
 80075b6:	2001      	movs	r0, #1
 80075b8:	4240      	negs	r0, r0
 80075ba:	b00b      	add	sp, #44	@ 0x2c
 80075bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075be:	2220      	movs	r2, #32
 80075c0:	6809      	ldr	r1, [r1, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	6022      	str	r2, [r4, #0]
 80075c6:	2278      	movs	r2, #120	@ 0x78
 80075c8:	4932      	ldr	r1, [pc, #200]	@ (8007694 <_printf_i+0x214>)
 80075ca:	9104      	str	r1, [sp, #16]
 80075cc:	0021      	movs	r1, r4
 80075ce:	3145      	adds	r1, #69	@ 0x45
 80075d0:	700a      	strb	r2, [r1, #0]
 80075d2:	6819      	ldr	r1, [r3, #0]
 80075d4:	6822      	ldr	r2, [r4, #0]
 80075d6:	c940      	ldmia	r1!, {r6}
 80075d8:	0610      	lsls	r0, r2, #24
 80075da:	d402      	bmi.n	80075e2 <_printf_i+0x162>
 80075dc:	0650      	lsls	r0, r2, #25
 80075de:	d500      	bpl.n	80075e2 <_printf_i+0x162>
 80075e0:	b2b6      	uxth	r6, r6
 80075e2:	6019      	str	r1, [r3, #0]
 80075e4:	07d3      	lsls	r3, r2, #31
 80075e6:	d502      	bpl.n	80075ee <_printf_i+0x16e>
 80075e8:	2320      	movs	r3, #32
 80075ea:	4313      	orrs	r3, r2
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	2e00      	cmp	r6, #0
 80075f0:	d001      	beq.n	80075f6 <_printf_i+0x176>
 80075f2:	2710      	movs	r7, #16
 80075f4:	e7aa      	b.n	800754c <_printf_i+0xcc>
 80075f6:	2220      	movs	r2, #32
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	4393      	bics	r3, r2
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	e7f8      	b.n	80075f2 <_printf_i+0x172>
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	680d      	ldr	r5, [r1, #0]
 8007604:	1d10      	adds	r0, r2, #4
 8007606:	6949      	ldr	r1, [r1, #20]
 8007608:	6018      	str	r0, [r3, #0]
 800760a:	6813      	ldr	r3, [r2, #0]
 800760c:	062e      	lsls	r6, r5, #24
 800760e:	d501      	bpl.n	8007614 <_printf_i+0x194>
 8007610:	6019      	str	r1, [r3, #0]
 8007612:	e002      	b.n	800761a <_printf_i+0x19a>
 8007614:	066d      	lsls	r5, r5, #25
 8007616:	d5fb      	bpl.n	8007610 <_printf_i+0x190>
 8007618:	8019      	strh	r1, [r3, #0]
 800761a:	2300      	movs	r3, #0
 800761c:	9d03      	ldr	r5, [sp, #12]
 800761e:	6123      	str	r3, [r4, #16]
 8007620:	e7bf      	b.n	80075a2 <_printf_i+0x122>
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	1d11      	adds	r1, r2, #4
 8007626:	6019      	str	r1, [r3, #0]
 8007628:	6815      	ldr	r5, [r2, #0]
 800762a:	2100      	movs	r1, #0
 800762c:	0028      	movs	r0, r5
 800762e:	6862      	ldr	r2, [r4, #4]
 8007630:	f000 f856 	bl	80076e0 <memchr>
 8007634:	2800      	cmp	r0, #0
 8007636:	d001      	beq.n	800763c <_printf_i+0x1bc>
 8007638:	1b40      	subs	r0, r0, r5
 800763a:	6060      	str	r0, [r4, #4]
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	6123      	str	r3, [r4, #16]
 8007640:	2300      	movs	r3, #0
 8007642:	9a03      	ldr	r2, [sp, #12]
 8007644:	7013      	strb	r3, [r2, #0]
 8007646:	e7ac      	b.n	80075a2 <_printf_i+0x122>
 8007648:	002a      	movs	r2, r5
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	9906      	ldr	r1, [sp, #24]
 800764e:	9805      	ldr	r0, [sp, #20]
 8007650:	9d07      	ldr	r5, [sp, #28]
 8007652:	47a8      	blx	r5
 8007654:	3001      	adds	r0, #1
 8007656:	d0ae      	beq.n	80075b6 <_printf_i+0x136>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	079b      	lsls	r3, r3, #30
 800765c:	d415      	bmi.n	800768a <_printf_i+0x20a>
 800765e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007660:	68e0      	ldr	r0, [r4, #12]
 8007662:	4298      	cmp	r0, r3
 8007664:	daa9      	bge.n	80075ba <_printf_i+0x13a>
 8007666:	0018      	movs	r0, r3
 8007668:	e7a7      	b.n	80075ba <_printf_i+0x13a>
 800766a:	0022      	movs	r2, r4
 800766c:	2301      	movs	r3, #1
 800766e:	9906      	ldr	r1, [sp, #24]
 8007670:	9805      	ldr	r0, [sp, #20]
 8007672:	9e07      	ldr	r6, [sp, #28]
 8007674:	3219      	adds	r2, #25
 8007676:	47b0      	blx	r6
 8007678:	3001      	adds	r0, #1
 800767a:	d09c      	beq.n	80075b6 <_printf_i+0x136>
 800767c:	3501      	adds	r5, #1
 800767e:	68e3      	ldr	r3, [r4, #12]
 8007680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007682:	1a9b      	subs	r3, r3, r2
 8007684:	42ab      	cmp	r3, r5
 8007686:	dcf0      	bgt.n	800766a <_printf_i+0x1ea>
 8007688:	e7e9      	b.n	800765e <_printf_i+0x1de>
 800768a:	2500      	movs	r5, #0
 800768c:	e7f7      	b.n	800767e <_printf_i+0x1fe>
 800768e:	46c0      	nop			@ (mov r8, r8)
 8007690:	08007d81 	.word	0x08007d81
 8007694:	08007d92 	.word	0x08007d92

08007698 <memmove>:
 8007698:	b510      	push	{r4, lr}
 800769a:	4288      	cmp	r0, r1
 800769c:	d902      	bls.n	80076a4 <memmove+0xc>
 800769e:	188b      	adds	r3, r1, r2
 80076a0:	4298      	cmp	r0, r3
 80076a2:	d308      	bcc.n	80076b6 <memmove+0x1e>
 80076a4:	2300      	movs	r3, #0
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d007      	beq.n	80076ba <memmove+0x22>
 80076aa:	5ccc      	ldrb	r4, [r1, r3]
 80076ac:	54c4      	strb	r4, [r0, r3]
 80076ae:	3301      	adds	r3, #1
 80076b0:	e7f9      	b.n	80076a6 <memmove+0xe>
 80076b2:	5c8b      	ldrb	r3, [r1, r2]
 80076b4:	5483      	strb	r3, [r0, r2]
 80076b6:	3a01      	subs	r2, #1
 80076b8:	d2fb      	bcs.n	80076b2 <memmove+0x1a>
 80076ba:	bd10      	pop	{r4, pc}

080076bc <_sbrk_r>:
 80076bc:	2300      	movs	r3, #0
 80076be:	b570      	push	{r4, r5, r6, lr}
 80076c0:	4d06      	ldr	r5, [pc, #24]	@ (80076dc <_sbrk_r+0x20>)
 80076c2:	0004      	movs	r4, r0
 80076c4:	0008      	movs	r0, r1
 80076c6:	602b      	str	r3, [r5, #0]
 80076c8:	f7fc fd6a 	bl	80041a0 <_sbrk>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d103      	bne.n	80076d8 <_sbrk_r+0x1c>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d000      	beq.n	80076d8 <_sbrk_r+0x1c>
 80076d6:	6023      	str	r3, [r4, #0]
 80076d8:	bd70      	pop	{r4, r5, r6, pc}
 80076da:	46c0      	nop			@ (mov r8, r8)
 80076dc:	200002f0 	.word	0x200002f0

080076e0 <memchr>:
 80076e0:	b2c9      	uxtb	r1, r1
 80076e2:	1882      	adds	r2, r0, r2
 80076e4:	4290      	cmp	r0, r2
 80076e6:	d101      	bne.n	80076ec <memchr+0xc>
 80076e8:	2000      	movs	r0, #0
 80076ea:	4770      	bx	lr
 80076ec:	7803      	ldrb	r3, [r0, #0]
 80076ee:	428b      	cmp	r3, r1
 80076f0:	d0fb      	beq.n	80076ea <memchr+0xa>
 80076f2:	3001      	adds	r0, #1
 80076f4:	e7f6      	b.n	80076e4 <memchr+0x4>

080076f6 <memcpy>:
 80076f6:	2300      	movs	r3, #0
 80076f8:	b510      	push	{r4, lr}
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d100      	bne.n	8007700 <memcpy+0xa>
 80076fe:	bd10      	pop	{r4, pc}
 8007700:	5ccc      	ldrb	r4, [r1, r3]
 8007702:	54c4      	strb	r4, [r0, r3]
 8007704:	3301      	adds	r3, #1
 8007706:	e7f8      	b.n	80076fa <memcpy+0x4>

08007708 <_realloc_r>:
 8007708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800770a:	0006      	movs	r6, r0
 800770c:	000c      	movs	r4, r1
 800770e:	0015      	movs	r5, r2
 8007710:	2900      	cmp	r1, #0
 8007712:	d105      	bne.n	8007720 <_realloc_r+0x18>
 8007714:	0011      	movs	r1, r2
 8007716:	f7ff fc55 	bl	8006fc4 <_malloc_r>
 800771a:	0004      	movs	r4, r0
 800771c:	0020      	movs	r0, r4
 800771e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007720:	2a00      	cmp	r2, #0
 8007722:	d103      	bne.n	800772c <_realloc_r+0x24>
 8007724:	f7ff fbe2 	bl	8006eec <_free_r>
 8007728:	002c      	movs	r4, r5
 800772a:	e7f7      	b.n	800771c <_realloc_r+0x14>
 800772c:	f000 f81c 	bl	8007768 <_malloc_usable_size_r>
 8007730:	0007      	movs	r7, r0
 8007732:	4285      	cmp	r5, r0
 8007734:	d802      	bhi.n	800773c <_realloc_r+0x34>
 8007736:	0843      	lsrs	r3, r0, #1
 8007738:	42ab      	cmp	r3, r5
 800773a:	d3ef      	bcc.n	800771c <_realloc_r+0x14>
 800773c:	0029      	movs	r1, r5
 800773e:	0030      	movs	r0, r6
 8007740:	f7ff fc40 	bl	8006fc4 <_malloc_r>
 8007744:	9001      	str	r0, [sp, #4]
 8007746:	2800      	cmp	r0, #0
 8007748:	d101      	bne.n	800774e <_realloc_r+0x46>
 800774a:	9c01      	ldr	r4, [sp, #4]
 800774c:	e7e6      	b.n	800771c <_realloc_r+0x14>
 800774e:	002a      	movs	r2, r5
 8007750:	42bd      	cmp	r5, r7
 8007752:	d900      	bls.n	8007756 <_realloc_r+0x4e>
 8007754:	003a      	movs	r2, r7
 8007756:	0021      	movs	r1, r4
 8007758:	9801      	ldr	r0, [sp, #4]
 800775a:	f7ff ffcc 	bl	80076f6 <memcpy>
 800775e:	0021      	movs	r1, r4
 8007760:	0030      	movs	r0, r6
 8007762:	f7ff fbc3 	bl	8006eec <_free_r>
 8007766:	e7f0      	b.n	800774a <_realloc_r+0x42>

08007768 <_malloc_usable_size_r>:
 8007768:	1f0b      	subs	r3, r1, #4
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	1f18      	subs	r0, r3, #4
 800776e:	2b00      	cmp	r3, #0
 8007770:	da01      	bge.n	8007776 <_malloc_usable_size_r+0xe>
 8007772:	580b      	ldr	r3, [r1, r0]
 8007774:	18c0      	adds	r0, r0, r3
 8007776:	4770      	bx	lr

08007778 <acosf>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	1c05      	adds	r5, r0, #0
 800777c:	f000 f86c 	bl	8007858 <__ieee754_acosf>
 8007780:	1c29      	adds	r1, r5, #0
 8007782:	1c04      	adds	r4, r0, #0
 8007784:	1c28      	adds	r0, r5, #0
 8007786:	f7f9 fdff 	bl	8001388 <__aeabi_fcmpun>
 800778a:	2800      	cmp	r0, #0
 800778c:	d110      	bne.n	80077b0 <acosf+0x38>
 800778e:	1c28      	adds	r0, r5, #0
 8007790:	f000 f812 	bl	80077b8 <fabsf>
 8007794:	21fe      	movs	r1, #254	@ 0xfe
 8007796:	0589      	lsls	r1, r1, #22
 8007798:	f7f8 fe64 	bl	8000464 <__aeabi_fcmpgt>
 800779c:	2800      	cmp	r0, #0
 800779e:	d007      	beq.n	80077b0 <acosf+0x38>
 80077a0:	f7ff fb78 	bl	8006e94 <__errno>
 80077a4:	2321      	movs	r3, #33	@ 0x21
 80077a6:	6003      	str	r3, [r0, #0]
 80077a8:	4802      	ldr	r0, [pc, #8]	@ (80077b4 <acosf+0x3c>)
 80077aa:	f000 f809 	bl	80077c0 <nanf>
 80077ae:	1c04      	adds	r4, r0, #0
 80077b0:	1c20      	adds	r0, r4, #0
 80077b2:	bd70      	pop	{r4, r5, r6, pc}
 80077b4:	08007d75 	.word	0x08007d75

080077b8 <fabsf>:
 80077b8:	0040      	lsls	r0, r0, #1
 80077ba:	0840      	lsrs	r0, r0, #1
 80077bc:	4770      	bx	lr
	...

080077c0 <nanf>:
 80077c0:	4800      	ldr	r0, [pc, #0]	@ (80077c4 <nanf+0x4>)
 80077c2:	4770      	bx	lr
 80077c4:	7fc00000 	.word	0x7fc00000

080077c8 <fmaxf>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	1c04      	adds	r4, r0, #0
 80077cc:	1c0d      	adds	r5, r1, #0
 80077ce:	f000 f827 	bl	8007820 <__fpclassifyf>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d102      	bne.n	80077dc <fmaxf+0x14>
 80077d6:	1c2c      	adds	r4, r5, #0
 80077d8:	1c20      	adds	r0, r4, #0
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	1c28      	adds	r0, r5, #0
 80077de:	f000 f81f 	bl	8007820 <__fpclassifyf>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d0f8      	beq.n	80077d8 <fmaxf+0x10>
 80077e6:	1c29      	adds	r1, r5, #0
 80077e8:	1c20      	adds	r0, r4, #0
 80077ea:	f7f8 fe3b 	bl	8000464 <__aeabi_fcmpgt>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d0f1      	beq.n	80077d6 <fmaxf+0xe>
 80077f2:	e7f1      	b.n	80077d8 <fmaxf+0x10>

080077f4 <fminf>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	1c04      	adds	r4, r0, #0
 80077f8:	1c0d      	adds	r5, r1, #0
 80077fa:	f000 f811 	bl	8007820 <__fpclassifyf>
 80077fe:	2800      	cmp	r0, #0
 8007800:	d102      	bne.n	8007808 <fminf+0x14>
 8007802:	1c2c      	adds	r4, r5, #0
 8007804:	1c20      	adds	r0, r4, #0
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	1c28      	adds	r0, r5, #0
 800780a:	f000 f809 	bl	8007820 <__fpclassifyf>
 800780e:	2800      	cmp	r0, #0
 8007810:	d0f8      	beq.n	8007804 <fminf+0x10>
 8007812:	1c29      	adds	r1, r5, #0
 8007814:	1c20      	adds	r0, r4, #0
 8007816:	f7f8 fe11 	bl	800043c <__aeabi_fcmplt>
 800781a:	2800      	cmp	r0, #0
 800781c:	d0f1      	beq.n	8007802 <fminf+0xe>
 800781e:	e7f1      	b.n	8007804 <fminf+0x10>

08007820 <__fpclassifyf>:
 8007820:	0043      	lsls	r3, r0, #1
 8007822:	085a      	lsrs	r2, r3, #1
 8007824:	2002      	movs	r0, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00f      	beq.n	800784a <__fpclassifyf+0x2a>
 800782a:	21fe      	movs	r1, #254	@ 0xfe
 800782c:	4b07      	ldr	r3, [pc, #28]	@ (800784c <__fpclassifyf+0x2c>)
 800782e:	05c9      	lsls	r1, r1, #23
 8007830:	18d3      	adds	r3, r2, r3
 8007832:	1800      	adds	r0, r0, r0
 8007834:	428b      	cmp	r3, r1
 8007836:	d308      	bcc.n	800784a <__fpclassifyf+0x2a>
 8007838:	4905      	ldr	r1, [pc, #20]	@ (8007850 <__fpclassifyf+0x30>)
 800783a:	1e53      	subs	r3, r2, #1
 800783c:	3801      	subs	r0, #1
 800783e:	428b      	cmp	r3, r1
 8007840:	d903      	bls.n	800784a <__fpclassifyf+0x2a>
 8007842:	4b04      	ldr	r3, [pc, #16]	@ (8007854 <__fpclassifyf+0x34>)
 8007844:	18d0      	adds	r0, r2, r3
 8007846:	4243      	negs	r3, r0
 8007848:	4158      	adcs	r0, r3
 800784a:	4770      	bx	lr
 800784c:	ff800000 	.word	0xff800000
 8007850:	007ffffe 	.word	0x007ffffe
 8007854:	80800000 	.word	0x80800000

08007858 <__ieee754_acosf>:
 8007858:	21fe      	movs	r1, #254	@ 0xfe
 800785a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785c:	0043      	lsls	r3, r0, #1
 800785e:	1c04      	adds	r4, r0, #0
 8007860:	085b      	lsrs	r3, r3, #1
 8007862:	0589      	lsls	r1, r1, #22
 8007864:	428b      	cmp	r3, r1
 8007866:	d104      	bne.n	8007872 <__ieee754_acosf+0x1a>
 8007868:	2000      	movs	r0, #0
 800786a:	2c00      	cmp	r4, #0
 800786c:	dc09      	bgt.n	8007882 <__ieee754_acosf+0x2a>
 800786e:	489c      	ldr	r0, [pc, #624]	@ (8007ae0 <__ieee754_acosf+0x288>)
 8007870:	e007      	b.n	8007882 <__ieee754_acosf+0x2a>
 8007872:	428b      	cmp	r3, r1
 8007874:	d906      	bls.n	8007884 <__ieee754_acosf+0x2c>
 8007876:	1c01      	adds	r1, r0, #0
 8007878:	f7f9 fb22 	bl	8000ec0 <__aeabi_fsub>
 800787c:	1c01      	adds	r1, r0, #0
 800787e:	f7f8 fff7 	bl	8000870 <__aeabi_fdiv>
 8007882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007884:	21fc      	movs	r1, #252	@ 0xfc
 8007886:	0589      	lsls	r1, r1, #22
 8007888:	428b      	cmp	r3, r1
 800788a:	d258      	bcs.n	800793e <__ieee754_acosf+0xe6>
 800788c:	228c      	movs	r2, #140	@ 0x8c
 800788e:	0592      	lsls	r2, r2, #22
 8007890:	4293      	cmp	r3, r2
 8007892:	d800      	bhi.n	8007896 <__ieee754_acosf+0x3e>
 8007894:	e122      	b.n	8007adc <__ieee754_acosf+0x284>
 8007896:	1c01      	adds	r1, r0, #0
 8007898:	f7f9 f9b8 	bl	8000c0c <__aeabi_fmul>
 800789c:	4991      	ldr	r1, [pc, #580]	@ (8007ae4 <__ieee754_acosf+0x28c>)
 800789e:	1c05      	adds	r5, r0, #0
 80078a0:	f7f9 f9b4 	bl	8000c0c <__aeabi_fmul>
 80078a4:	4990      	ldr	r1, [pc, #576]	@ (8007ae8 <__ieee754_acosf+0x290>)
 80078a6:	f7f8 fdf1 	bl	800048c <__aeabi_fadd>
 80078aa:	1c29      	adds	r1, r5, #0
 80078ac:	f7f9 f9ae 	bl	8000c0c <__aeabi_fmul>
 80078b0:	498e      	ldr	r1, [pc, #568]	@ (8007aec <__ieee754_acosf+0x294>)
 80078b2:	f7f9 fb05 	bl	8000ec0 <__aeabi_fsub>
 80078b6:	1c29      	adds	r1, r5, #0
 80078b8:	f7f9 f9a8 	bl	8000c0c <__aeabi_fmul>
 80078bc:	498c      	ldr	r1, [pc, #560]	@ (8007af0 <__ieee754_acosf+0x298>)
 80078be:	f7f8 fde5 	bl	800048c <__aeabi_fadd>
 80078c2:	1c29      	adds	r1, r5, #0
 80078c4:	f7f9 f9a2 	bl	8000c0c <__aeabi_fmul>
 80078c8:	498a      	ldr	r1, [pc, #552]	@ (8007af4 <__ieee754_acosf+0x29c>)
 80078ca:	f7f9 faf9 	bl	8000ec0 <__aeabi_fsub>
 80078ce:	1c29      	adds	r1, r5, #0
 80078d0:	f7f9 f99c 	bl	8000c0c <__aeabi_fmul>
 80078d4:	4988      	ldr	r1, [pc, #544]	@ (8007af8 <__ieee754_acosf+0x2a0>)
 80078d6:	f7f8 fdd9 	bl	800048c <__aeabi_fadd>
 80078da:	1c29      	adds	r1, r5, #0
 80078dc:	f7f9 f996 	bl	8000c0c <__aeabi_fmul>
 80078e0:	4986      	ldr	r1, [pc, #536]	@ (8007afc <__ieee754_acosf+0x2a4>)
 80078e2:	1c06      	adds	r6, r0, #0
 80078e4:	1c28      	adds	r0, r5, #0
 80078e6:	f7f9 f991 	bl	8000c0c <__aeabi_fmul>
 80078ea:	4985      	ldr	r1, [pc, #532]	@ (8007b00 <__ieee754_acosf+0x2a8>)
 80078ec:	f7f9 fae8 	bl	8000ec0 <__aeabi_fsub>
 80078f0:	1c29      	adds	r1, r5, #0
 80078f2:	f7f9 f98b 	bl	8000c0c <__aeabi_fmul>
 80078f6:	4983      	ldr	r1, [pc, #524]	@ (8007b04 <__ieee754_acosf+0x2ac>)
 80078f8:	f7f8 fdc8 	bl	800048c <__aeabi_fadd>
 80078fc:	1c29      	adds	r1, r5, #0
 80078fe:	f7f9 f985 	bl	8000c0c <__aeabi_fmul>
 8007902:	4981      	ldr	r1, [pc, #516]	@ (8007b08 <__ieee754_acosf+0x2b0>)
 8007904:	f7f9 fadc 	bl	8000ec0 <__aeabi_fsub>
 8007908:	1c29      	adds	r1, r5, #0
 800790a:	f7f9 f97f 	bl	8000c0c <__aeabi_fmul>
 800790e:	21fe      	movs	r1, #254	@ 0xfe
 8007910:	0589      	lsls	r1, r1, #22
 8007912:	f7f8 fdbb 	bl	800048c <__aeabi_fadd>
 8007916:	1c01      	adds	r1, r0, #0
 8007918:	1c30      	adds	r0, r6, #0
 800791a:	f7f8 ffa9 	bl	8000870 <__aeabi_fdiv>
 800791e:	1c21      	adds	r1, r4, #0
 8007920:	f7f9 f974 	bl	8000c0c <__aeabi_fmul>
 8007924:	1c01      	adds	r1, r0, #0
 8007926:	4879      	ldr	r0, [pc, #484]	@ (8007b0c <__ieee754_acosf+0x2b4>)
 8007928:	f7f9 faca 	bl	8000ec0 <__aeabi_fsub>
 800792c:	1c01      	adds	r1, r0, #0
 800792e:	1c20      	adds	r0, r4, #0
 8007930:	f7f9 fac6 	bl	8000ec0 <__aeabi_fsub>
 8007934:	1c01      	adds	r1, r0, #0
 8007936:	4876      	ldr	r0, [pc, #472]	@ (8007b10 <__ieee754_acosf+0x2b8>)
 8007938:	f7f9 fac2 	bl	8000ec0 <__aeabi_fsub>
 800793c:	e7a1      	b.n	8007882 <__ieee754_acosf+0x2a>
 800793e:	2800      	cmp	r0, #0
 8007940:	da5c      	bge.n	80079fc <__ieee754_acosf+0x1a4>
 8007942:	21fe      	movs	r1, #254	@ 0xfe
 8007944:	0589      	lsls	r1, r1, #22
 8007946:	f7f8 fda1 	bl	800048c <__aeabi_fadd>
 800794a:	21fc      	movs	r1, #252	@ 0xfc
 800794c:	0589      	lsls	r1, r1, #22
 800794e:	f7f9 f95d 	bl	8000c0c <__aeabi_fmul>
 8007952:	4964      	ldr	r1, [pc, #400]	@ (8007ae4 <__ieee754_acosf+0x28c>)
 8007954:	1c04      	adds	r4, r0, #0
 8007956:	f7f9 f959 	bl	8000c0c <__aeabi_fmul>
 800795a:	4963      	ldr	r1, [pc, #396]	@ (8007ae8 <__ieee754_acosf+0x290>)
 800795c:	f7f8 fd96 	bl	800048c <__aeabi_fadd>
 8007960:	1c21      	adds	r1, r4, #0
 8007962:	f7f9 f953 	bl	8000c0c <__aeabi_fmul>
 8007966:	4961      	ldr	r1, [pc, #388]	@ (8007aec <__ieee754_acosf+0x294>)
 8007968:	f7f9 faaa 	bl	8000ec0 <__aeabi_fsub>
 800796c:	1c21      	adds	r1, r4, #0
 800796e:	f7f9 f94d 	bl	8000c0c <__aeabi_fmul>
 8007972:	495f      	ldr	r1, [pc, #380]	@ (8007af0 <__ieee754_acosf+0x298>)
 8007974:	f7f8 fd8a 	bl	800048c <__aeabi_fadd>
 8007978:	1c21      	adds	r1, r4, #0
 800797a:	f7f9 f947 	bl	8000c0c <__aeabi_fmul>
 800797e:	495d      	ldr	r1, [pc, #372]	@ (8007af4 <__ieee754_acosf+0x29c>)
 8007980:	f7f9 fa9e 	bl	8000ec0 <__aeabi_fsub>
 8007984:	1c21      	adds	r1, r4, #0
 8007986:	f7f9 f941 	bl	8000c0c <__aeabi_fmul>
 800798a:	495b      	ldr	r1, [pc, #364]	@ (8007af8 <__ieee754_acosf+0x2a0>)
 800798c:	f7f8 fd7e 	bl	800048c <__aeabi_fadd>
 8007990:	1c21      	adds	r1, r4, #0
 8007992:	f7f9 f93b 	bl	8000c0c <__aeabi_fmul>
 8007996:	4959      	ldr	r1, [pc, #356]	@ (8007afc <__ieee754_acosf+0x2a4>)
 8007998:	1c05      	adds	r5, r0, #0
 800799a:	1c20      	adds	r0, r4, #0
 800799c:	f7f9 f936 	bl	8000c0c <__aeabi_fmul>
 80079a0:	4957      	ldr	r1, [pc, #348]	@ (8007b00 <__ieee754_acosf+0x2a8>)
 80079a2:	f7f9 fa8d 	bl	8000ec0 <__aeabi_fsub>
 80079a6:	1c21      	adds	r1, r4, #0
 80079a8:	f7f9 f930 	bl	8000c0c <__aeabi_fmul>
 80079ac:	4955      	ldr	r1, [pc, #340]	@ (8007b04 <__ieee754_acosf+0x2ac>)
 80079ae:	f7f8 fd6d 	bl	800048c <__aeabi_fadd>
 80079b2:	1c21      	adds	r1, r4, #0
 80079b4:	f7f9 f92a 	bl	8000c0c <__aeabi_fmul>
 80079b8:	4953      	ldr	r1, [pc, #332]	@ (8007b08 <__ieee754_acosf+0x2b0>)
 80079ba:	f7f9 fa81 	bl	8000ec0 <__aeabi_fsub>
 80079be:	1c21      	adds	r1, r4, #0
 80079c0:	f7f9 f924 	bl	8000c0c <__aeabi_fmul>
 80079c4:	21fe      	movs	r1, #254	@ 0xfe
 80079c6:	0589      	lsls	r1, r1, #22
 80079c8:	f7f8 fd60 	bl	800048c <__aeabi_fadd>
 80079cc:	1c06      	adds	r6, r0, #0
 80079ce:	1c20      	adds	r0, r4, #0
 80079d0:	f000 f8a4 	bl	8007b1c <__ieee754_sqrtf>
 80079d4:	1c31      	adds	r1, r6, #0
 80079d6:	1c04      	adds	r4, r0, #0
 80079d8:	1c28      	adds	r0, r5, #0
 80079da:	f7f8 ff49 	bl	8000870 <__aeabi_fdiv>
 80079de:	1c21      	adds	r1, r4, #0
 80079e0:	f7f9 f914 	bl	8000c0c <__aeabi_fmul>
 80079e4:	4949      	ldr	r1, [pc, #292]	@ (8007b0c <__ieee754_acosf+0x2b4>)
 80079e6:	f7f9 fa6b 	bl	8000ec0 <__aeabi_fsub>
 80079ea:	1c21      	adds	r1, r4, #0
 80079ec:	f7f8 fd4e 	bl	800048c <__aeabi_fadd>
 80079f0:	1c01      	adds	r1, r0, #0
 80079f2:	f7f8 fd4b 	bl	800048c <__aeabi_fadd>
 80079f6:	1c01      	adds	r1, r0, #0
 80079f8:	4846      	ldr	r0, [pc, #280]	@ (8007b14 <__ieee754_acosf+0x2bc>)
 80079fa:	e79d      	b.n	8007938 <__ieee754_acosf+0xe0>
 80079fc:	1c01      	adds	r1, r0, #0
 80079fe:	20fe      	movs	r0, #254	@ 0xfe
 8007a00:	0580      	lsls	r0, r0, #22
 8007a02:	f7f9 fa5d 	bl	8000ec0 <__aeabi_fsub>
 8007a06:	21fc      	movs	r1, #252	@ 0xfc
 8007a08:	0589      	lsls	r1, r1, #22
 8007a0a:	f7f9 f8ff 	bl	8000c0c <__aeabi_fmul>
 8007a0e:	1c04      	adds	r4, r0, #0
 8007a10:	f000 f884 	bl	8007b1c <__ieee754_sqrtf>
 8007a14:	4933      	ldr	r1, [pc, #204]	@ (8007ae4 <__ieee754_acosf+0x28c>)
 8007a16:	1c06      	adds	r6, r0, #0
 8007a18:	0b05      	lsrs	r5, r0, #12
 8007a1a:	1c20      	adds	r0, r4, #0
 8007a1c:	f7f9 f8f6 	bl	8000c0c <__aeabi_fmul>
 8007a20:	4931      	ldr	r1, [pc, #196]	@ (8007ae8 <__ieee754_acosf+0x290>)
 8007a22:	f7f8 fd33 	bl	800048c <__aeabi_fadd>
 8007a26:	1c21      	adds	r1, r4, #0
 8007a28:	f7f9 f8f0 	bl	8000c0c <__aeabi_fmul>
 8007a2c:	492f      	ldr	r1, [pc, #188]	@ (8007aec <__ieee754_acosf+0x294>)
 8007a2e:	f7f9 fa47 	bl	8000ec0 <__aeabi_fsub>
 8007a32:	1c21      	adds	r1, r4, #0
 8007a34:	f7f9 f8ea 	bl	8000c0c <__aeabi_fmul>
 8007a38:	492d      	ldr	r1, [pc, #180]	@ (8007af0 <__ieee754_acosf+0x298>)
 8007a3a:	f7f8 fd27 	bl	800048c <__aeabi_fadd>
 8007a3e:	1c21      	adds	r1, r4, #0
 8007a40:	f7f9 f8e4 	bl	8000c0c <__aeabi_fmul>
 8007a44:	492b      	ldr	r1, [pc, #172]	@ (8007af4 <__ieee754_acosf+0x29c>)
 8007a46:	f7f9 fa3b 	bl	8000ec0 <__aeabi_fsub>
 8007a4a:	1c21      	adds	r1, r4, #0
 8007a4c:	f7f9 f8de 	bl	8000c0c <__aeabi_fmul>
 8007a50:	4929      	ldr	r1, [pc, #164]	@ (8007af8 <__ieee754_acosf+0x2a0>)
 8007a52:	f7f8 fd1b 	bl	800048c <__aeabi_fadd>
 8007a56:	1c21      	adds	r1, r4, #0
 8007a58:	f7f9 f8d8 	bl	8000c0c <__aeabi_fmul>
 8007a5c:	4927      	ldr	r1, [pc, #156]	@ (8007afc <__ieee754_acosf+0x2a4>)
 8007a5e:	1c07      	adds	r7, r0, #0
 8007a60:	1c20      	adds	r0, r4, #0
 8007a62:	f7f9 f8d3 	bl	8000c0c <__aeabi_fmul>
 8007a66:	4926      	ldr	r1, [pc, #152]	@ (8007b00 <__ieee754_acosf+0x2a8>)
 8007a68:	f7f9 fa2a 	bl	8000ec0 <__aeabi_fsub>
 8007a6c:	1c21      	adds	r1, r4, #0
 8007a6e:	f7f9 f8cd 	bl	8000c0c <__aeabi_fmul>
 8007a72:	4924      	ldr	r1, [pc, #144]	@ (8007b04 <__ieee754_acosf+0x2ac>)
 8007a74:	f7f8 fd0a 	bl	800048c <__aeabi_fadd>
 8007a78:	1c21      	adds	r1, r4, #0
 8007a7a:	f7f9 f8c7 	bl	8000c0c <__aeabi_fmul>
 8007a7e:	4922      	ldr	r1, [pc, #136]	@ (8007b08 <__ieee754_acosf+0x2b0>)
 8007a80:	f7f9 fa1e 	bl	8000ec0 <__aeabi_fsub>
 8007a84:	1c21      	adds	r1, r4, #0
 8007a86:	f7f9 f8c1 	bl	8000c0c <__aeabi_fmul>
 8007a8a:	21fe      	movs	r1, #254	@ 0xfe
 8007a8c:	0589      	lsls	r1, r1, #22
 8007a8e:	f7f8 fcfd 	bl	800048c <__aeabi_fadd>
 8007a92:	1c01      	adds	r1, r0, #0
 8007a94:	1c38      	adds	r0, r7, #0
 8007a96:	f7f8 feeb 	bl	8000870 <__aeabi_fdiv>
 8007a9a:	1c31      	adds	r1, r6, #0
 8007a9c:	f7f9 f8b6 	bl	8000c0c <__aeabi_fmul>
 8007aa0:	032d      	lsls	r5, r5, #12
 8007aa2:	1c07      	adds	r7, r0, #0
 8007aa4:	1c29      	adds	r1, r5, #0
 8007aa6:	1c28      	adds	r0, r5, #0
 8007aa8:	f7f9 f8b0 	bl	8000c0c <__aeabi_fmul>
 8007aac:	1c01      	adds	r1, r0, #0
 8007aae:	1c20      	adds	r0, r4, #0
 8007ab0:	f7f9 fa06 	bl	8000ec0 <__aeabi_fsub>
 8007ab4:	1c29      	adds	r1, r5, #0
 8007ab6:	1c04      	adds	r4, r0, #0
 8007ab8:	1c30      	adds	r0, r6, #0
 8007aba:	f7f8 fce7 	bl	800048c <__aeabi_fadd>
 8007abe:	1c01      	adds	r1, r0, #0
 8007ac0:	1c20      	adds	r0, r4, #0
 8007ac2:	f7f8 fed5 	bl	8000870 <__aeabi_fdiv>
 8007ac6:	1c01      	adds	r1, r0, #0
 8007ac8:	1c38      	adds	r0, r7, #0
 8007aca:	f7f8 fcdf 	bl	800048c <__aeabi_fadd>
 8007ace:	1c29      	adds	r1, r5, #0
 8007ad0:	f7f8 fcdc 	bl	800048c <__aeabi_fadd>
 8007ad4:	1c01      	adds	r1, r0, #0
 8007ad6:	f7f8 fcd9 	bl	800048c <__aeabi_fadd>
 8007ada:	e6d2      	b.n	8007882 <__ieee754_acosf+0x2a>
 8007adc:	480e      	ldr	r0, [pc, #56]	@ (8007b18 <__ieee754_acosf+0x2c0>)
 8007ade:	e6d0      	b.n	8007882 <__ieee754_acosf+0x2a>
 8007ae0:	40490fdb 	.word	0x40490fdb
 8007ae4:	3811ef08 	.word	0x3811ef08
 8007ae8:	3a4f7f04 	.word	0x3a4f7f04
 8007aec:	3d241146 	.word	0x3d241146
 8007af0:	3e4e0aa8 	.word	0x3e4e0aa8
 8007af4:	3ea6b090 	.word	0x3ea6b090
 8007af8:	3e2aaaab 	.word	0x3e2aaaab
 8007afc:	3d9dc62e 	.word	0x3d9dc62e
 8007b00:	3f303361 	.word	0x3f303361
 8007b04:	4001572d 	.word	0x4001572d
 8007b08:	4019d139 	.word	0x4019d139
 8007b0c:	33a22168 	.word	0x33a22168
 8007b10:	3fc90fda 	.word	0x3fc90fda
 8007b14:	40490fda 	.word	0x40490fda
 8007b18:	3fc90fdb 	.word	0x3fc90fdb

08007b1c <__ieee754_sqrtf>:
 8007b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b1e:	21ff      	movs	r1, #255	@ 0xff
 8007b20:	0042      	lsls	r2, r0, #1
 8007b22:	0003      	movs	r3, r0
 8007b24:	1c04      	adds	r4, r0, #0
 8007b26:	0852      	lsrs	r2, r2, #1
 8007b28:	05c9      	lsls	r1, r1, #23
 8007b2a:	428a      	cmp	r2, r1
 8007b2c:	d309      	bcc.n	8007b42 <__ieee754_sqrtf+0x26>
 8007b2e:	1c01      	adds	r1, r0, #0
 8007b30:	f7f9 f86c 	bl	8000c0c <__aeabi_fmul>
 8007b34:	1c01      	adds	r1, r0, #0
 8007b36:	1c20      	adds	r0, r4, #0
 8007b38:	f7f8 fca8 	bl	800048c <__aeabi_fadd>
 8007b3c:	1c04      	adds	r4, r0, #0
 8007b3e:	1c20      	adds	r0, r4, #0
 8007b40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	d0fb      	beq.n	8007b3e <__ieee754_sqrtf+0x22>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	da06      	bge.n	8007b58 <__ieee754_sqrtf+0x3c>
 8007b4a:	1c01      	adds	r1, r0, #0
 8007b4c:	f7f9 f9b8 	bl	8000ec0 <__aeabi_fsub>
 8007b50:	1c01      	adds	r1, r0, #0
 8007b52:	f7f8 fe8d 	bl	8000870 <__aeabi_fdiv>
 8007b56:	e7f1      	b.n	8007b3c <__ieee754_sqrtf+0x20>
 8007b58:	0002      	movs	r2, r0
 8007b5a:	400a      	ands	r2, r1
 8007b5c:	4208      	tst	r0, r1
 8007b5e:	d040      	beq.n	8007be2 <__ieee754_sqrtf+0xc6>
 8007b60:	15c1      	asrs	r1, r0, #23
 8007b62:	2280      	movs	r2, #128	@ 0x80
 8007b64:	000f      	movs	r7, r1
 8007b66:	025b      	lsls	r3, r3, #9
 8007b68:	0a5b      	lsrs	r3, r3, #9
 8007b6a:	0412      	lsls	r2, r2, #16
 8007b6c:	3f7f      	subs	r7, #127	@ 0x7f
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	07c9      	lsls	r1, r1, #31
 8007b72:	d400      	bmi.n	8007b76 <__ieee754_sqrtf+0x5a>
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	2400      	movs	r4, #0
 8007b78:	2180      	movs	r1, #128	@ 0x80
 8007b7a:	2019      	movs	r0, #25
 8007b7c:	0026      	movs	r6, r4
 8007b7e:	107f      	asrs	r7, r7, #1
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	0449      	lsls	r1, r1, #17
 8007b84:	1875      	adds	r5, r6, r1
 8007b86:	001a      	movs	r2, r3
 8007b88:	429d      	cmp	r5, r3
 8007b8a:	dc02      	bgt.n	8007b92 <__ieee754_sqrtf+0x76>
 8007b8c:	186e      	adds	r6, r5, r1
 8007b8e:	1b5a      	subs	r2, r3, r5
 8007b90:	1864      	adds	r4, r4, r1
 8007b92:	3801      	subs	r0, #1
 8007b94:	0053      	lsls	r3, r2, #1
 8007b96:	0849      	lsrs	r1, r1, #1
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d1f3      	bne.n	8007b84 <__ieee754_sqrtf+0x68>
 8007b9c:	2a00      	cmp	r2, #0
 8007b9e:	d019      	beq.n	8007bd4 <__ieee754_sqrtf+0xb8>
 8007ba0:	4d16      	ldr	r5, [pc, #88]	@ (8007bfc <__ieee754_sqrtf+0xe0>)
 8007ba2:	4e17      	ldr	r6, [pc, #92]	@ (8007c00 <__ieee754_sqrtf+0xe4>)
 8007ba4:	6828      	ldr	r0, [r5, #0]
 8007ba6:	6831      	ldr	r1, [r6, #0]
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	9301      	str	r3, [sp, #4]
 8007bac:	f7f9 f988 	bl	8000ec0 <__aeabi_fsub>
 8007bb0:	1c01      	adds	r1, r0, #0
 8007bb2:	9801      	ldr	r0, [sp, #4]
 8007bb4:	f7f8 fc4c 	bl	8000450 <__aeabi_fcmple>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d00b      	beq.n	8007bd4 <__ieee754_sqrtf+0xb8>
 8007bbc:	6828      	ldr	r0, [r5, #0]
 8007bbe:	6831      	ldr	r1, [r6, #0]
 8007bc0:	f7f8 fc64 	bl	800048c <__aeabi_fadd>
 8007bc4:	682d      	ldr	r5, [r5, #0]
 8007bc6:	1c01      	adds	r1, r0, #0
 8007bc8:	1c28      	adds	r0, r5, #0
 8007bca:	f7f8 fc37 	bl	800043c <__aeabi_fcmplt>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d010      	beq.n	8007bf4 <__ieee754_sqrtf+0xd8>
 8007bd2:	3402      	adds	r4, #2
 8007bd4:	23fc      	movs	r3, #252	@ 0xfc
 8007bd6:	1064      	asrs	r4, r4, #1
 8007bd8:	059b      	lsls	r3, r3, #22
 8007bda:	18e3      	adds	r3, r4, r3
 8007bdc:	05fc      	lsls	r4, r7, #23
 8007bde:	18e4      	adds	r4, r4, r3
 8007be0:	e7ad      	b.n	8007b3e <__ieee754_sqrtf+0x22>
 8007be2:	2080      	movs	r0, #128	@ 0x80
 8007be4:	0400      	lsls	r0, r0, #16
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	0011      	movs	r1, r2
 8007bea:	3201      	adds	r2, #1
 8007bec:	4203      	tst	r3, r0
 8007bee:	d0fa      	beq.n	8007be6 <__ieee754_sqrtf+0xca>
 8007bf0:	4249      	negs	r1, r1
 8007bf2:	e7b6      	b.n	8007b62 <__ieee754_sqrtf+0x46>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	3401      	adds	r4, #1
 8007bf8:	439c      	bics	r4, r3
 8007bfa:	e7eb      	b.n	8007bd4 <__ieee754_sqrtf+0xb8>
 8007bfc:	08007da8 	.word	0x08007da8
 8007c00:	08007da4 	.word	0x08007da4

08007c04 <_init>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	46c0      	nop			@ (mov r8, r8)
 8007c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0a:	bc08      	pop	{r3}
 8007c0c:	469e      	mov	lr, r3
 8007c0e:	4770      	bx	lr

08007c10 <_fini>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	46c0      	nop			@ (mov r8, r8)
 8007c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c16:	bc08      	pop	{r3}
 8007c18:	469e      	mov	lr, r3
 8007c1a:	4770      	bx	lr
