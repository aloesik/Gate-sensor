
gate_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08007a84  08007a84  00008a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d04  08007d04  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007d04  08007d04  0000905c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007d04  08007d04  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d04  08007d04  00008d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d08  08007d08  00008d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007d0c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000005c  08007d68  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08007d68  00009348  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148f6  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a02  00000000  00000000  0001d97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00020380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d84  00000000  00000000  000214a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157e0  00000000  00000000  00022224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d21  00000000  00000000  00037a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084f37  00000000  00000000  0004e725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d365c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004368  00000000  00000000  000d36a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d7a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a6c 	.word	0x08007a6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08007a6c 	.word	0x08007a6c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0008      	movs	r0, r1
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 fbab 	bl	8000b68 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 fb33 	bl	8000a88 <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fb9d 	bl	8000b68 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fb93 	bl	8000b68 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fb41 	bl	8000ad8 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fb37 	bl	8000ad8 <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_fadd>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	024b      	lsls	r3, r1, #9
 800047c:	0a5a      	lsrs	r2, r3, #9
 800047e:	4694      	mov	ip, r2
 8000480:	004a      	lsls	r2, r1, #1
 8000482:	0fc9      	lsrs	r1, r1, #31
 8000484:	46ce      	mov	lr, r9
 8000486:	4647      	mov	r7, r8
 8000488:	4689      	mov	r9, r1
 800048a:	0045      	lsls	r5, r0, #1
 800048c:	0246      	lsls	r6, r0, #9
 800048e:	0e2d      	lsrs	r5, r5, #24
 8000490:	0e12      	lsrs	r2, r2, #24
 8000492:	b580      	push	{r7, lr}
 8000494:	0999      	lsrs	r1, r3, #6
 8000496:	0a77      	lsrs	r7, r6, #9
 8000498:	0fc4      	lsrs	r4, r0, #31
 800049a:	09b6      	lsrs	r6, r6, #6
 800049c:	1aab      	subs	r3, r5, r2
 800049e:	454c      	cmp	r4, r9
 80004a0:	d020      	beq.n	80004e4 <__aeabi_fadd+0x6c>
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	dd0c      	ble.n	80004c0 <__aeabi_fadd+0x48>
 80004a6:	2a00      	cmp	r2, #0
 80004a8:	d134      	bne.n	8000514 <__aeabi_fadd+0x9c>
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d02a      	beq.n	8000504 <__aeabi_fadd+0x8c>
 80004ae:	1e5a      	subs	r2, r3, #1
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fadd+0x3e>
 80004b4:	e08f      	b.n	80005d6 <__aeabi_fadd+0x15e>
 80004b6:	2bff      	cmp	r3, #255	@ 0xff
 80004b8:	d100      	bne.n	80004bc <__aeabi_fadd+0x44>
 80004ba:	e0cd      	b.n	8000658 <__aeabi_fadd+0x1e0>
 80004bc:	0013      	movs	r3, r2
 80004be:	e02f      	b.n	8000520 <__aeabi_fadd+0xa8>
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d060      	beq.n	8000586 <__aeabi_fadd+0x10e>
 80004c4:	1b53      	subs	r3, r2, r5
 80004c6:	2d00      	cmp	r5, #0
 80004c8:	d000      	beq.n	80004cc <__aeabi_fadd+0x54>
 80004ca:	e0ee      	b.n	80006aa <__aeabi_fadd+0x232>
 80004cc:	2e00      	cmp	r6, #0
 80004ce:	d100      	bne.n	80004d2 <__aeabi_fadd+0x5a>
 80004d0:	e13e      	b.n	8000750 <__aeabi_fadd+0x2d8>
 80004d2:	1e5c      	subs	r4, r3, #1
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d100      	bne.n	80004da <__aeabi_fadd+0x62>
 80004d8:	e16b      	b.n	80007b2 <__aeabi_fadd+0x33a>
 80004da:	2bff      	cmp	r3, #255	@ 0xff
 80004dc:	d100      	bne.n	80004e0 <__aeabi_fadd+0x68>
 80004de:	e0b9      	b.n	8000654 <__aeabi_fadd+0x1dc>
 80004e0:	0023      	movs	r3, r4
 80004e2:	e0e7      	b.n	80006b4 <__aeabi_fadd+0x23c>
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dc00      	bgt.n	80004ea <__aeabi_fadd+0x72>
 80004e8:	e0a4      	b.n	8000634 <__aeabi_fadd+0x1bc>
 80004ea:	2a00      	cmp	r2, #0
 80004ec:	d069      	beq.n	80005c2 <__aeabi_fadd+0x14a>
 80004ee:	2dff      	cmp	r5, #255	@ 0xff
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x7c>
 80004f2:	e0b1      	b.n	8000658 <__aeabi_fadd+0x1e0>
 80004f4:	2280      	movs	r2, #128	@ 0x80
 80004f6:	04d2      	lsls	r2, r2, #19
 80004f8:	4311      	orrs	r1, r2
 80004fa:	2b1b      	cmp	r3, #27
 80004fc:	dc00      	bgt.n	8000500 <__aeabi_fadd+0x88>
 80004fe:	e0e9      	b.n	80006d4 <__aeabi_fadd+0x25c>
 8000500:	002b      	movs	r3, r5
 8000502:	3605      	adds	r6, #5
 8000504:	08f7      	lsrs	r7, r6, #3
 8000506:	2bff      	cmp	r3, #255	@ 0xff
 8000508:	d100      	bne.n	800050c <__aeabi_fadd+0x94>
 800050a:	e0a5      	b.n	8000658 <__aeabi_fadd+0x1e0>
 800050c:	027a      	lsls	r2, r7, #9
 800050e:	0a52      	lsrs	r2, r2, #9
 8000510:	b2d8      	uxtb	r0, r3
 8000512:	e030      	b.n	8000576 <__aeabi_fadd+0xfe>
 8000514:	2dff      	cmp	r5, #255	@ 0xff
 8000516:	d100      	bne.n	800051a <__aeabi_fadd+0xa2>
 8000518:	e09e      	b.n	8000658 <__aeabi_fadd+0x1e0>
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	04d2      	lsls	r2, r2, #19
 800051e:	4311      	orrs	r1, r2
 8000520:	2001      	movs	r0, #1
 8000522:	2b1b      	cmp	r3, #27
 8000524:	dc08      	bgt.n	8000538 <__aeabi_fadd+0xc0>
 8000526:	0008      	movs	r0, r1
 8000528:	2220      	movs	r2, #32
 800052a:	40d8      	lsrs	r0, r3
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	4099      	lsls	r1, r3
 8000530:	000b      	movs	r3, r1
 8000532:	1e5a      	subs	r2, r3, #1
 8000534:	4193      	sbcs	r3, r2
 8000536:	4318      	orrs	r0, r3
 8000538:	1a36      	subs	r6, r6, r0
 800053a:	0173      	lsls	r3, r6, #5
 800053c:	d400      	bmi.n	8000540 <__aeabi_fadd+0xc8>
 800053e:	e071      	b.n	8000624 <__aeabi_fadd+0x1ac>
 8000540:	01b6      	lsls	r6, r6, #6
 8000542:	09b7      	lsrs	r7, r6, #6
 8000544:	0038      	movs	r0, r7
 8000546:	f000 ff7b 	bl	8001440 <__clzsi2>
 800054a:	003b      	movs	r3, r7
 800054c:	3805      	subs	r0, #5
 800054e:	4083      	lsls	r3, r0
 8000550:	4285      	cmp	r5, r0
 8000552:	dd4d      	ble.n	80005f0 <__aeabi_fadd+0x178>
 8000554:	4eb4      	ldr	r6, [pc, #720]	@ (8000828 <__aeabi_fadd+0x3b0>)
 8000556:	1a2d      	subs	r5, r5, r0
 8000558:	401e      	ands	r6, r3
 800055a:	075a      	lsls	r2, r3, #29
 800055c:	d068      	beq.n	8000630 <__aeabi_fadd+0x1b8>
 800055e:	220f      	movs	r2, #15
 8000560:	4013      	ands	r3, r2
 8000562:	2b04      	cmp	r3, #4
 8000564:	d064      	beq.n	8000630 <__aeabi_fadd+0x1b8>
 8000566:	3604      	adds	r6, #4
 8000568:	0173      	lsls	r3, r6, #5
 800056a:	d561      	bpl.n	8000630 <__aeabi_fadd+0x1b8>
 800056c:	1c68      	adds	r0, r5, #1
 800056e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000570:	d154      	bne.n	800061c <__aeabi_fadd+0x1a4>
 8000572:	20ff      	movs	r0, #255	@ 0xff
 8000574:	2200      	movs	r2, #0
 8000576:	05c0      	lsls	r0, r0, #23
 8000578:	4310      	orrs	r0, r2
 800057a:	07e4      	lsls	r4, r4, #31
 800057c:	4320      	orrs	r0, r4
 800057e:	bcc0      	pop	{r6, r7}
 8000580:	46b9      	mov	r9, r7
 8000582:	46b0      	mov	r8, r6
 8000584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000586:	22fe      	movs	r2, #254	@ 0xfe
 8000588:	4690      	mov	r8, r2
 800058a:	1c68      	adds	r0, r5, #1
 800058c:	0002      	movs	r2, r0
 800058e:	4640      	mov	r0, r8
 8000590:	4210      	tst	r0, r2
 8000592:	d16b      	bne.n	800066c <__aeabi_fadd+0x1f4>
 8000594:	2d00      	cmp	r5, #0
 8000596:	d000      	beq.n	800059a <__aeabi_fadd+0x122>
 8000598:	e0dd      	b.n	8000756 <__aeabi_fadd+0x2de>
 800059a:	2e00      	cmp	r6, #0
 800059c:	d100      	bne.n	80005a0 <__aeabi_fadd+0x128>
 800059e:	e102      	b.n	80007a6 <__aeabi_fadd+0x32e>
 80005a0:	2900      	cmp	r1, #0
 80005a2:	d0b3      	beq.n	800050c <__aeabi_fadd+0x94>
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	1a77      	subs	r7, r6, r1
 80005a8:	04d2      	lsls	r2, r2, #19
 80005aa:	4217      	tst	r7, r2
 80005ac:	d100      	bne.n	80005b0 <__aeabi_fadd+0x138>
 80005ae:	e136      	b.n	800081e <__aeabi_fadd+0x3a6>
 80005b0:	464c      	mov	r4, r9
 80005b2:	1b8e      	subs	r6, r1, r6
 80005b4:	d061      	beq.n	800067a <__aeabi_fadd+0x202>
 80005b6:	2001      	movs	r0, #1
 80005b8:	4216      	tst	r6, r2
 80005ba:	d130      	bne.n	800061e <__aeabi_fadd+0x1a6>
 80005bc:	2300      	movs	r3, #0
 80005be:	08f7      	lsrs	r7, r6, #3
 80005c0:	e7a4      	b.n	800050c <__aeabi_fadd+0x94>
 80005c2:	2900      	cmp	r1, #0
 80005c4:	d09e      	beq.n	8000504 <__aeabi_fadd+0x8c>
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x156>
 80005cc:	e0ca      	b.n	8000764 <__aeabi_fadd+0x2ec>
 80005ce:	2bff      	cmp	r3, #255	@ 0xff
 80005d0:	d042      	beq.n	8000658 <__aeabi_fadd+0x1e0>
 80005d2:	0013      	movs	r3, r2
 80005d4:	e791      	b.n	80004fa <__aeabi_fadd+0x82>
 80005d6:	1a71      	subs	r1, r6, r1
 80005d8:	014b      	lsls	r3, r1, #5
 80005da:	d400      	bmi.n	80005de <__aeabi_fadd+0x166>
 80005dc:	e0d1      	b.n	8000782 <__aeabi_fadd+0x30a>
 80005de:	018f      	lsls	r7, r1, #6
 80005e0:	09bf      	lsrs	r7, r7, #6
 80005e2:	0038      	movs	r0, r7
 80005e4:	f000 ff2c 	bl	8001440 <__clzsi2>
 80005e8:	003b      	movs	r3, r7
 80005ea:	3805      	subs	r0, #5
 80005ec:	4083      	lsls	r3, r0
 80005ee:	2501      	movs	r5, #1
 80005f0:	2220      	movs	r2, #32
 80005f2:	1b40      	subs	r0, r0, r5
 80005f4:	3001      	adds	r0, #1
 80005f6:	1a12      	subs	r2, r2, r0
 80005f8:	001e      	movs	r6, r3
 80005fa:	4093      	lsls	r3, r2
 80005fc:	40c6      	lsrs	r6, r0
 80005fe:	1e5a      	subs	r2, r3, #1
 8000600:	4193      	sbcs	r3, r2
 8000602:	431e      	orrs	r6, r3
 8000604:	d039      	beq.n	800067a <__aeabi_fadd+0x202>
 8000606:	0773      	lsls	r3, r6, #29
 8000608:	d100      	bne.n	800060c <__aeabi_fadd+0x194>
 800060a:	e11b      	b.n	8000844 <__aeabi_fadd+0x3cc>
 800060c:	230f      	movs	r3, #15
 800060e:	2500      	movs	r5, #0
 8000610:	4033      	ands	r3, r6
 8000612:	2b04      	cmp	r3, #4
 8000614:	d1a7      	bne.n	8000566 <__aeabi_fadd+0xee>
 8000616:	2001      	movs	r0, #1
 8000618:	0172      	lsls	r2, r6, #5
 800061a:	d57c      	bpl.n	8000716 <__aeabi_fadd+0x29e>
 800061c:	b2c0      	uxtb	r0, r0
 800061e:	01b2      	lsls	r2, r6, #6
 8000620:	0a52      	lsrs	r2, r2, #9
 8000622:	e7a8      	b.n	8000576 <__aeabi_fadd+0xfe>
 8000624:	0773      	lsls	r3, r6, #29
 8000626:	d003      	beq.n	8000630 <__aeabi_fadd+0x1b8>
 8000628:	230f      	movs	r3, #15
 800062a:	4033      	ands	r3, r6
 800062c:	2b04      	cmp	r3, #4
 800062e:	d19a      	bne.n	8000566 <__aeabi_fadd+0xee>
 8000630:	002b      	movs	r3, r5
 8000632:	e767      	b.n	8000504 <__aeabi_fadd+0x8c>
 8000634:	2b00      	cmp	r3, #0
 8000636:	d023      	beq.n	8000680 <__aeabi_fadd+0x208>
 8000638:	1b53      	subs	r3, r2, r5
 800063a:	2d00      	cmp	r5, #0
 800063c:	d17b      	bne.n	8000736 <__aeabi_fadd+0x2be>
 800063e:	2e00      	cmp	r6, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x1cc>
 8000642:	e086      	b.n	8000752 <__aeabi_fadd+0x2da>
 8000644:	1e5d      	subs	r5, r3, #1
 8000646:	2b01      	cmp	r3, #1
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x1d4>
 800064a:	e08b      	b.n	8000764 <__aeabi_fadd+0x2ec>
 800064c:	2bff      	cmp	r3, #255	@ 0xff
 800064e:	d002      	beq.n	8000656 <__aeabi_fadd+0x1de>
 8000650:	002b      	movs	r3, r5
 8000652:	e075      	b.n	8000740 <__aeabi_fadd+0x2c8>
 8000654:	464c      	mov	r4, r9
 8000656:	4667      	mov	r7, ip
 8000658:	2f00      	cmp	r7, #0
 800065a:	d100      	bne.n	800065e <__aeabi_fadd+0x1e6>
 800065c:	e789      	b.n	8000572 <__aeabi_fadd+0xfa>
 800065e:	2280      	movs	r2, #128	@ 0x80
 8000660:	03d2      	lsls	r2, r2, #15
 8000662:	433a      	orrs	r2, r7
 8000664:	0252      	lsls	r2, r2, #9
 8000666:	20ff      	movs	r0, #255	@ 0xff
 8000668:	0a52      	lsrs	r2, r2, #9
 800066a:	e784      	b.n	8000576 <__aeabi_fadd+0xfe>
 800066c:	1a77      	subs	r7, r6, r1
 800066e:	017b      	lsls	r3, r7, #5
 8000670:	d46b      	bmi.n	800074a <__aeabi_fadd+0x2d2>
 8000672:	2f00      	cmp	r7, #0
 8000674:	d000      	beq.n	8000678 <__aeabi_fadd+0x200>
 8000676:	e765      	b.n	8000544 <__aeabi_fadd+0xcc>
 8000678:	2400      	movs	r4, #0
 800067a:	2000      	movs	r0, #0
 800067c:	2200      	movs	r2, #0
 800067e:	e77a      	b.n	8000576 <__aeabi_fadd+0xfe>
 8000680:	22fe      	movs	r2, #254	@ 0xfe
 8000682:	1c6b      	adds	r3, r5, #1
 8000684:	421a      	tst	r2, r3
 8000686:	d149      	bne.n	800071c <__aeabi_fadd+0x2a4>
 8000688:	2d00      	cmp	r5, #0
 800068a:	d000      	beq.n	800068e <__aeabi_fadd+0x216>
 800068c:	e09f      	b.n	80007ce <__aeabi_fadd+0x356>
 800068e:	2e00      	cmp	r6, #0
 8000690:	d100      	bne.n	8000694 <__aeabi_fadd+0x21c>
 8000692:	e0ba      	b.n	800080a <__aeabi_fadd+0x392>
 8000694:	2900      	cmp	r1, #0
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x222>
 8000698:	e0cf      	b.n	800083a <__aeabi_fadd+0x3c2>
 800069a:	1872      	adds	r2, r6, r1
 800069c:	0153      	lsls	r3, r2, #5
 800069e:	d400      	bmi.n	80006a2 <__aeabi_fadd+0x22a>
 80006a0:	e0cd      	b.n	800083e <__aeabi_fadd+0x3c6>
 80006a2:	0192      	lsls	r2, r2, #6
 80006a4:	2001      	movs	r0, #1
 80006a6:	0a52      	lsrs	r2, r2, #9
 80006a8:	e765      	b.n	8000576 <__aeabi_fadd+0xfe>
 80006aa:	2aff      	cmp	r2, #255	@ 0xff
 80006ac:	d0d2      	beq.n	8000654 <__aeabi_fadd+0x1dc>
 80006ae:	2080      	movs	r0, #128	@ 0x80
 80006b0:	04c0      	lsls	r0, r0, #19
 80006b2:	4306      	orrs	r6, r0
 80006b4:	2001      	movs	r0, #1
 80006b6:	2b1b      	cmp	r3, #27
 80006b8:	dc08      	bgt.n	80006cc <__aeabi_fadd+0x254>
 80006ba:	0030      	movs	r0, r6
 80006bc:	2420      	movs	r4, #32
 80006be:	40d8      	lsrs	r0, r3
 80006c0:	1ae3      	subs	r3, r4, r3
 80006c2:	409e      	lsls	r6, r3
 80006c4:	0033      	movs	r3, r6
 80006c6:	1e5c      	subs	r4, r3, #1
 80006c8:	41a3      	sbcs	r3, r4
 80006ca:	4318      	orrs	r0, r3
 80006cc:	464c      	mov	r4, r9
 80006ce:	0015      	movs	r5, r2
 80006d0:	1a0e      	subs	r6, r1, r0
 80006d2:	e732      	b.n	800053a <__aeabi_fadd+0xc2>
 80006d4:	0008      	movs	r0, r1
 80006d6:	2220      	movs	r2, #32
 80006d8:	40d8      	lsrs	r0, r3
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	4099      	lsls	r1, r3
 80006de:	000b      	movs	r3, r1
 80006e0:	1e5a      	subs	r2, r3, #1
 80006e2:	4193      	sbcs	r3, r2
 80006e4:	4303      	orrs	r3, r0
 80006e6:	18f6      	adds	r6, r6, r3
 80006e8:	0173      	lsls	r3, r6, #5
 80006ea:	d59b      	bpl.n	8000624 <__aeabi_fadd+0x1ac>
 80006ec:	3501      	adds	r5, #1
 80006ee:	2dff      	cmp	r5, #255	@ 0xff
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fadd+0x27c>
 80006f2:	e73e      	b.n	8000572 <__aeabi_fadd+0xfa>
 80006f4:	2301      	movs	r3, #1
 80006f6:	494d      	ldr	r1, [pc, #308]	@ (800082c <__aeabi_fadd+0x3b4>)
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	4033      	ands	r3, r6
 80006fc:	400a      	ands	r2, r1
 80006fe:	431a      	orrs	r2, r3
 8000700:	0016      	movs	r6, r2
 8000702:	0753      	lsls	r3, r2, #29
 8000704:	d004      	beq.n	8000710 <__aeabi_fadd+0x298>
 8000706:	230f      	movs	r3, #15
 8000708:	4013      	ands	r3, r2
 800070a:	2b04      	cmp	r3, #4
 800070c:	d000      	beq.n	8000710 <__aeabi_fadd+0x298>
 800070e:	e72a      	b.n	8000566 <__aeabi_fadd+0xee>
 8000710:	0173      	lsls	r3, r6, #5
 8000712:	d500      	bpl.n	8000716 <__aeabi_fadd+0x29e>
 8000714:	e72a      	b.n	800056c <__aeabi_fadd+0xf4>
 8000716:	002b      	movs	r3, r5
 8000718:	08f7      	lsrs	r7, r6, #3
 800071a:	e6f7      	b.n	800050c <__aeabi_fadd+0x94>
 800071c:	2bff      	cmp	r3, #255	@ 0xff
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0x2aa>
 8000720:	e727      	b.n	8000572 <__aeabi_fadd+0xfa>
 8000722:	1871      	adds	r1, r6, r1
 8000724:	0849      	lsrs	r1, r1, #1
 8000726:	074a      	lsls	r2, r1, #29
 8000728:	d02f      	beq.n	800078a <__aeabi_fadd+0x312>
 800072a:	220f      	movs	r2, #15
 800072c:	400a      	ands	r2, r1
 800072e:	2a04      	cmp	r2, #4
 8000730:	d02b      	beq.n	800078a <__aeabi_fadd+0x312>
 8000732:	1d0e      	adds	r6, r1, #4
 8000734:	e6e6      	b.n	8000504 <__aeabi_fadd+0x8c>
 8000736:	2aff      	cmp	r2, #255	@ 0xff
 8000738:	d08d      	beq.n	8000656 <__aeabi_fadd+0x1de>
 800073a:	2080      	movs	r0, #128	@ 0x80
 800073c:	04c0      	lsls	r0, r0, #19
 800073e:	4306      	orrs	r6, r0
 8000740:	2b1b      	cmp	r3, #27
 8000742:	dd24      	ble.n	800078e <__aeabi_fadd+0x316>
 8000744:	0013      	movs	r3, r2
 8000746:	1d4e      	adds	r6, r1, #5
 8000748:	e6dc      	b.n	8000504 <__aeabi_fadd+0x8c>
 800074a:	464c      	mov	r4, r9
 800074c:	1b8f      	subs	r7, r1, r6
 800074e:	e6f9      	b.n	8000544 <__aeabi_fadd+0xcc>
 8000750:	464c      	mov	r4, r9
 8000752:	000e      	movs	r6, r1
 8000754:	e6d6      	b.n	8000504 <__aeabi_fadd+0x8c>
 8000756:	2e00      	cmp	r6, #0
 8000758:	d149      	bne.n	80007ee <__aeabi_fadd+0x376>
 800075a:	2900      	cmp	r1, #0
 800075c:	d068      	beq.n	8000830 <__aeabi_fadd+0x3b8>
 800075e:	4667      	mov	r7, ip
 8000760:	464c      	mov	r4, r9
 8000762:	e77c      	b.n	800065e <__aeabi_fadd+0x1e6>
 8000764:	1870      	adds	r0, r6, r1
 8000766:	0143      	lsls	r3, r0, #5
 8000768:	d574      	bpl.n	8000854 <__aeabi_fadd+0x3dc>
 800076a:	4930      	ldr	r1, [pc, #192]	@ (800082c <__aeabi_fadd+0x3b4>)
 800076c:	0840      	lsrs	r0, r0, #1
 800076e:	4001      	ands	r1, r0
 8000770:	0743      	lsls	r3, r0, #29
 8000772:	d009      	beq.n	8000788 <__aeabi_fadd+0x310>
 8000774:	230f      	movs	r3, #15
 8000776:	4003      	ands	r3, r0
 8000778:	2b04      	cmp	r3, #4
 800077a:	d005      	beq.n	8000788 <__aeabi_fadd+0x310>
 800077c:	2302      	movs	r3, #2
 800077e:	1d0e      	adds	r6, r1, #4
 8000780:	e6c0      	b.n	8000504 <__aeabi_fadd+0x8c>
 8000782:	2301      	movs	r3, #1
 8000784:	08cf      	lsrs	r7, r1, #3
 8000786:	e6c1      	b.n	800050c <__aeabi_fadd+0x94>
 8000788:	2302      	movs	r3, #2
 800078a:	08cf      	lsrs	r7, r1, #3
 800078c:	e6be      	b.n	800050c <__aeabi_fadd+0x94>
 800078e:	2520      	movs	r5, #32
 8000790:	0030      	movs	r0, r6
 8000792:	40d8      	lsrs	r0, r3
 8000794:	1aeb      	subs	r3, r5, r3
 8000796:	409e      	lsls	r6, r3
 8000798:	0033      	movs	r3, r6
 800079a:	1e5d      	subs	r5, r3, #1
 800079c:	41ab      	sbcs	r3, r5
 800079e:	4303      	orrs	r3, r0
 80007a0:	0015      	movs	r5, r2
 80007a2:	185e      	adds	r6, r3, r1
 80007a4:	e7a0      	b.n	80006e8 <__aeabi_fadd+0x270>
 80007a6:	2900      	cmp	r1, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x334>
 80007aa:	e765      	b.n	8000678 <__aeabi_fadd+0x200>
 80007ac:	464c      	mov	r4, r9
 80007ae:	4667      	mov	r7, ip
 80007b0:	e6ac      	b.n	800050c <__aeabi_fadd+0x94>
 80007b2:	1b8f      	subs	r7, r1, r6
 80007b4:	017b      	lsls	r3, r7, #5
 80007b6:	d52e      	bpl.n	8000816 <__aeabi_fadd+0x39e>
 80007b8:	01bf      	lsls	r7, r7, #6
 80007ba:	09bf      	lsrs	r7, r7, #6
 80007bc:	0038      	movs	r0, r7
 80007be:	f000 fe3f 	bl	8001440 <__clzsi2>
 80007c2:	003b      	movs	r3, r7
 80007c4:	3805      	subs	r0, #5
 80007c6:	4083      	lsls	r3, r0
 80007c8:	464c      	mov	r4, r9
 80007ca:	3501      	adds	r5, #1
 80007cc:	e710      	b.n	80005f0 <__aeabi_fadd+0x178>
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_fadd+0x35c>
 80007d2:	e740      	b.n	8000656 <__aeabi_fadd+0x1de>
 80007d4:	2900      	cmp	r1, #0
 80007d6:	d100      	bne.n	80007da <__aeabi_fadd+0x362>
 80007d8:	e741      	b.n	800065e <__aeabi_fadd+0x1e6>
 80007da:	2380      	movs	r3, #128	@ 0x80
 80007dc:	03db      	lsls	r3, r3, #15
 80007de:	429f      	cmp	r7, r3
 80007e0:	d200      	bcs.n	80007e4 <__aeabi_fadd+0x36c>
 80007e2:	e73c      	b.n	800065e <__aeabi_fadd+0x1e6>
 80007e4:	459c      	cmp	ip, r3
 80007e6:	d300      	bcc.n	80007ea <__aeabi_fadd+0x372>
 80007e8:	e739      	b.n	800065e <__aeabi_fadd+0x1e6>
 80007ea:	4667      	mov	r7, ip
 80007ec:	e737      	b.n	800065e <__aeabi_fadd+0x1e6>
 80007ee:	2900      	cmp	r1, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x37c>
 80007f2:	e734      	b.n	800065e <__aeabi_fadd+0x1e6>
 80007f4:	2380      	movs	r3, #128	@ 0x80
 80007f6:	03db      	lsls	r3, r3, #15
 80007f8:	429f      	cmp	r7, r3
 80007fa:	d200      	bcs.n	80007fe <__aeabi_fadd+0x386>
 80007fc:	e72f      	b.n	800065e <__aeabi_fadd+0x1e6>
 80007fe:	459c      	cmp	ip, r3
 8000800:	d300      	bcc.n	8000804 <__aeabi_fadd+0x38c>
 8000802:	e72c      	b.n	800065e <__aeabi_fadd+0x1e6>
 8000804:	464c      	mov	r4, r9
 8000806:	4667      	mov	r7, ip
 8000808:	e729      	b.n	800065e <__aeabi_fadd+0x1e6>
 800080a:	2900      	cmp	r1, #0
 800080c:	d100      	bne.n	8000810 <__aeabi_fadd+0x398>
 800080e:	e734      	b.n	800067a <__aeabi_fadd+0x202>
 8000810:	2300      	movs	r3, #0
 8000812:	08cf      	lsrs	r7, r1, #3
 8000814:	e67a      	b.n	800050c <__aeabi_fadd+0x94>
 8000816:	464c      	mov	r4, r9
 8000818:	2301      	movs	r3, #1
 800081a:	08ff      	lsrs	r7, r7, #3
 800081c:	e676      	b.n	800050c <__aeabi_fadd+0x94>
 800081e:	2f00      	cmp	r7, #0
 8000820:	d100      	bne.n	8000824 <__aeabi_fadd+0x3ac>
 8000822:	e729      	b.n	8000678 <__aeabi_fadd+0x200>
 8000824:	08ff      	lsrs	r7, r7, #3
 8000826:	e671      	b.n	800050c <__aeabi_fadd+0x94>
 8000828:	fbffffff 	.word	0xfbffffff
 800082c:	7dffffff 	.word	0x7dffffff
 8000830:	2280      	movs	r2, #128	@ 0x80
 8000832:	2400      	movs	r4, #0
 8000834:	20ff      	movs	r0, #255	@ 0xff
 8000836:	03d2      	lsls	r2, r2, #15
 8000838:	e69d      	b.n	8000576 <__aeabi_fadd+0xfe>
 800083a:	2300      	movs	r3, #0
 800083c:	e666      	b.n	800050c <__aeabi_fadd+0x94>
 800083e:	2300      	movs	r3, #0
 8000840:	08d7      	lsrs	r7, r2, #3
 8000842:	e663      	b.n	800050c <__aeabi_fadd+0x94>
 8000844:	2001      	movs	r0, #1
 8000846:	0172      	lsls	r2, r6, #5
 8000848:	d500      	bpl.n	800084c <__aeabi_fadd+0x3d4>
 800084a:	e6e7      	b.n	800061c <__aeabi_fadd+0x1a4>
 800084c:	0031      	movs	r1, r6
 800084e:	2300      	movs	r3, #0
 8000850:	08cf      	lsrs	r7, r1, #3
 8000852:	e65b      	b.n	800050c <__aeabi_fadd+0x94>
 8000854:	2301      	movs	r3, #1
 8000856:	08c7      	lsrs	r7, r0, #3
 8000858:	e658      	b.n	800050c <__aeabi_fadd+0x94>
 800085a:	46c0      	nop			@ (mov r8, r8)

0800085c <__aeabi_fdiv>:
 800085c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085e:	4646      	mov	r6, r8
 8000860:	464f      	mov	r7, r9
 8000862:	46d6      	mov	lr, sl
 8000864:	0245      	lsls	r5, r0, #9
 8000866:	b5c0      	push	{r6, r7, lr}
 8000868:	0fc3      	lsrs	r3, r0, #31
 800086a:	0047      	lsls	r7, r0, #1
 800086c:	4698      	mov	r8, r3
 800086e:	1c0e      	adds	r6, r1, #0
 8000870:	0a6d      	lsrs	r5, r5, #9
 8000872:	0e3f      	lsrs	r7, r7, #24
 8000874:	d05b      	beq.n	800092e <__aeabi_fdiv+0xd2>
 8000876:	2fff      	cmp	r7, #255	@ 0xff
 8000878:	d021      	beq.n	80008be <__aeabi_fdiv+0x62>
 800087a:	2380      	movs	r3, #128	@ 0x80
 800087c:	00ed      	lsls	r5, r5, #3
 800087e:	04db      	lsls	r3, r3, #19
 8000880:	431d      	orrs	r5, r3
 8000882:	2300      	movs	r3, #0
 8000884:	4699      	mov	r9, r3
 8000886:	469a      	mov	sl, r3
 8000888:	3f7f      	subs	r7, #127	@ 0x7f
 800088a:	0274      	lsls	r4, r6, #9
 800088c:	0073      	lsls	r3, r6, #1
 800088e:	0a64      	lsrs	r4, r4, #9
 8000890:	0e1b      	lsrs	r3, r3, #24
 8000892:	0ff6      	lsrs	r6, r6, #31
 8000894:	2b00      	cmp	r3, #0
 8000896:	d020      	beq.n	80008da <__aeabi_fdiv+0x7e>
 8000898:	2bff      	cmp	r3, #255	@ 0xff
 800089a:	d043      	beq.n	8000924 <__aeabi_fdiv+0xc8>
 800089c:	2280      	movs	r2, #128	@ 0x80
 800089e:	2000      	movs	r0, #0
 80008a0:	00e4      	lsls	r4, r4, #3
 80008a2:	04d2      	lsls	r2, r2, #19
 80008a4:	4314      	orrs	r4, r2
 80008a6:	3b7f      	subs	r3, #127	@ 0x7f
 80008a8:	4642      	mov	r2, r8
 80008aa:	1aff      	subs	r7, r7, r3
 80008ac:	464b      	mov	r3, r9
 80008ae:	4072      	eors	r2, r6
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	d900      	bls.n	80008b6 <__aeabi_fdiv+0x5a>
 80008b4:	e09d      	b.n	80009f2 <__aeabi_fdiv+0x196>
 80008b6:	4971      	ldr	r1, [pc, #452]	@ (8000a7c <__aeabi_fdiv+0x220>)
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	58cb      	ldr	r3, [r1, r3]
 80008bc:	469f      	mov	pc, r3
 80008be:	2d00      	cmp	r5, #0
 80008c0:	d15a      	bne.n	8000978 <__aeabi_fdiv+0x11c>
 80008c2:	2308      	movs	r3, #8
 80008c4:	4699      	mov	r9, r3
 80008c6:	3b06      	subs	r3, #6
 80008c8:	0274      	lsls	r4, r6, #9
 80008ca:	469a      	mov	sl, r3
 80008cc:	0073      	lsls	r3, r6, #1
 80008ce:	27ff      	movs	r7, #255	@ 0xff
 80008d0:	0a64      	lsrs	r4, r4, #9
 80008d2:	0e1b      	lsrs	r3, r3, #24
 80008d4:	0ff6      	lsrs	r6, r6, #31
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1de      	bne.n	8000898 <__aeabi_fdiv+0x3c>
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d13b      	bne.n	8000956 <__aeabi_fdiv+0xfa>
 80008de:	2301      	movs	r3, #1
 80008e0:	4642      	mov	r2, r8
 80008e2:	4649      	mov	r1, r9
 80008e4:	4072      	eors	r2, r6
 80008e6:	4319      	orrs	r1, r3
 80008e8:	290e      	cmp	r1, #14
 80008ea:	d818      	bhi.n	800091e <__aeabi_fdiv+0xc2>
 80008ec:	4864      	ldr	r0, [pc, #400]	@ (8000a80 <__aeabi_fdiv+0x224>)
 80008ee:	0089      	lsls	r1, r1, #2
 80008f0:	5841      	ldr	r1, [r0, r1]
 80008f2:	468f      	mov	pc, r1
 80008f4:	4653      	mov	r3, sl
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fdiv+0xa0>
 80008fa:	e0b8      	b.n	8000a6e <__aeabi_fdiv+0x212>
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d06e      	beq.n	80009de <__aeabi_fdiv+0x182>
 8000900:	4642      	mov	r2, r8
 8000902:	002c      	movs	r4, r5
 8000904:	2b01      	cmp	r3, #1
 8000906:	d140      	bne.n	800098a <__aeabi_fdiv+0x12e>
 8000908:	2000      	movs	r0, #0
 800090a:	2400      	movs	r4, #0
 800090c:	05c0      	lsls	r0, r0, #23
 800090e:	4320      	orrs	r0, r4
 8000910:	07d2      	lsls	r2, r2, #31
 8000912:	4310      	orrs	r0, r2
 8000914:	bce0      	pop	{r5, r6, r7}
 8000916:	46ba      	mov	sl, r7
 8000918:	46b1      	mov	r9, r6
 800091a:	46a8      	mov	r8, r5
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091e:	20ff      	movs	r0, #255	@ 0xff
 8000920:	2400      	movs	r4, #0
 8000922:	e7f3      	b.n	800090c <__aeabi_fdiv+0xb0>
 8000924:	2c00      	cmp	r4, #0
 8000926:	d120      	bne.n	800096a <__aeabi_fdiv+0x10e>
 8000928:	2302      	movs	r3, #2
 800092a:	3fff      	subs	r7, #255	@ 0xff
 800092c:	e7d8      	b.n	80008e0 <__aeabi_fdiv+0x84>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d105      	bne.n	800093e <__aeabi_fdiv+0xe2>
 8000932:	2304      	movs	r3, #4
 8000934:	4699      	mov	r9, r3
 8000936:	3b03      	subs	r3, #3
 8000938:	2700      	movs	r7, #0
 800093a:	469a      	mov	sl, r3
 800093c:	e7a5      	b.n	800088a <__aeabi_fdiv+0x2e>
 800093e:	0028      	movs	r0, r5
 8000940:	f000 fd7e 	bl	8001440 <__clzsi2>
 8000944:	2776      	movs	r7, #118	@ 0x76
 8000946:	1f43      	subs	r3, r0, #5
 8000948:	409d      	lsls	r5, r3
 800094a:	2300      	movs	r3, #0
 800094c:	427f      	negs	r7, r7
 800094e:	4699      	mov	r9, r3
 8000950:	469a      	mov	sl, r3
 8000952:	1a3f      	subs	r7, r7, r0
 8000954:	e799      	b.n	800088a <__aeabi_fdiv+0x2e>
 8000956:	0020      	movs	r0, r4
 8000958:	f000 fd72 	bl	8001440 <__clzsi2>
 800095c:	1f43      	subs	r3, r0, #5
 800095e:	409c      	lsls	r4, r3
 8000960:	2376      	movs	r3, #118	@ 0x76
 8000962:	425b      	negs	r3, r3
 8000964:	1a1b      	subs	r3, r3, r0
 8000966:	2000      	movs	r0, #0
 8000968:	e79e      	b.n	80008a8 <__aeabi_fdiv+0x4c>
 800096a:	2303      	movs	r3, #3
 800096c:	464a      	mov	r2, r9
 800096e:	431a      	orrs	r2, r3
 8000970:	4691      	mov	r9, r2
 8000972:	2003      	movs	r0, #3
 8000974:	33fc      	adds	r3, #252	@ 0xfc
 8000976:	e797      	b.n	80008a8 <__aeabi_fdiv+0x4c>
 8000978:	230c      	movs	r3, #12
 800097a:	4699      	mov	r9, r3
 800097c:	3b09      	subs	r3, #9
 800097e:	27ff      	movs	r7, #255	@ 0xff
 8000980:	469a      	mov	sl, r3
 8000982:	e782      	b.n	800088a <__aeabi_fdiv+0x2e>
 8000984:	2803      	cmp	r0, #3
 8000986:	d02c      	beq.n	80009e2 <__aeabi_fdiv+0x186>
 8000988:	0032      	movs	r2, r6
 800098a:	0038      	movs	r0, r7
 800098c:	307f      	adds	r0, #127	@ 0x7f
 800098e:	2800      	cmp	r0, #0
 8000990:	dd47      	ble.n	8000a22 <__aeabi_fdiv+0x1c6>
 8000992:	0763      	lsls	r3, r4, #29
 8000994:	d004      	beq.n	80009a0 <__aeabi_fdiv+0x144>
 8000996:	230f      	movs	r3, #15
 8000998:	4023      	ands	r3, r4
 800099a:	2b04      	cmp	r3, #4
 800099c:	d000      	beq.n	80009a0 <__aeabi_fdiv+0x144>
 800099e:	3404      	adds	r4, #4
 80009a0:	0123      	lsls	r3, r4, #4
 80009a2:	d503      	bpl.n	80009ac <__aeabi_fdiv+0x150>
 80009a4:	0038      	movs	r0, r7
 80009a6:	4b37      	ldr	r3, [pc, #220]	@ (8000a84 <__aeabi_fdiv+0x228>)
 80009a8:	3080      	adds	r0, #128	@ 0x80
 80009aa:	401c      	ands	r4, r3
 80009ac:	28fe      	cmp	r0, #254	@ 0xfe
 80009ae:	dcb6      	bgt.n	800091e <__aeabi_fdiv+0xc2>
 80009b0:	01a4      	lsls	r4, r4, #6
 80009b2:	0a64      	lsrs	r4, r4, #9
 80009b4:	b2c0      	uxtb	r0, r0
 80009b6:	e7a9      	b.n	800090c <__aeabi_fdiv+0xb0>
 80009b8:	2480      	movs	r4, #128	@ 0x80
 80009ba:	2200      	movs	r2, #0
 80009bc:	20ff      	movs	r0, #255	@ 0xff
 80009be:	03e4      	lsls	r4, r4, #15
 80009c0:	e7a4      	b.n	800090c <__aeabi_fdiv+0xb0>
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	03db      	lsls	r3, r3, #15
 80009c6:	421d      	tst	r5, r3
 80009c8:	d001      	beq.n	80009ce <__aeabi_fdiv+0x172>
 80009ca:	421c      	tst	r4, r3
 80009cc:	d00b      	beq.n	80009e6 <__aeabi_fdiv+0x18a>
 80009ce:	2480      	movs	r4, #128	@ 0x80
 80009d0:	03e4      	lsls	r4, r4, #15
 80009d2:	432c      	orrs	r4, r5
 80009d4:	0264      	lsls	r4, r4, #9
 80009d6:	4642      	mov	r2, r8
 80009d8:	20ff      	movs	r0, #255	@ 0xff
 80009da:	0a64      	lsrs	r4, r4, #9
 80009dc:	e796      	b.n	800090c <__aeabi_fdiv+0xb0>
 80009de:	4646      	mov	r6, r8
 80009e0:	002c      	movs	r4, r5
 80009e2:	2380      	movs	r3, #128	@ 0x80
 80009e4:	03db      	lsls	r3, r3, #15
 80009e6:	431c      	orrs	r4, r3
 80009e8:	0264      	lsls	r4, r4, #9
 80009ea:	0032      	movs	r2, r6
 80009ec:	20ff      	movs	r0, #255	@ 0xff
 80009ee:	0a64      	lsrs	r4, r4, #9
 80009f0:	e78c      	b.n	800090c <__aeabi_fdiv+0xb0>
 80009f2:	016d      	lsls	r5, r5, #5
 80009f4:	0160      	lsls	r0, r4, #5
 80009f6:	4285      	cmp	r5, r0
 80009f8:	d22d      	bcs.n	8000a56 <__aeabi_fdiv+0x1fa>
 80009fa:	231b      	movs	r3, #27
 80009fc:	2400      	movs	r4, #0
 80009fe:	3f01      	subs	r7, #1
 8000a00:	2601      	movs	r6, #1
 8000a02:	0029      	movs	r1, r5
 8000a04:	0064      	lsls	r4, r4, #1
 8000a06:	006d      	lsls	r5, r5, #1
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	db01      	blt.n	8000a10 <__aeabi_fdiv+0x1b4>
 8000a0c:	4285      	cmp	r5, r0
 8000a0e:	d301      	bcc.n	8000a14 <__aeabi_fdiv+0x1b8>
 8000a10:	1a2d      	subs	r5, r5, r0
 8000a12:	4334      	orrs	r4, r6
 8000a14:	3b01      	subs	r3, #1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1f3      	bne.n	8000a02 <__aeabi_fdiv+0x1a6>
 8000a1a:	1e6b      	subs	r3, r5, #1
 8000a1c:	419d      	sbcs	r5, r3
 8000a1e:	432c      	orrs	r4, r5
 8000a20:	e7b3      	b.n	800098a <__aeabi_fdiv+0x12e>
 8000a22:	2301      	movs	r3, #1
 8000a24:	1a1b      	subs	r3, r3, r0
 8000a26:	2b1b      	cmp	r3, #27
 8000a28:	dd00      	ble.n	8000a2c <__aeabi_fdiv+0x1d0>
 8000a2a:	e76d      	b.n	8000908 <__aeabi_fdiv+0xac>
 8000a2c:	0021      	movs	r1, r4
 8000a2e:	379e      	adds	r7, #158	@ 0x9e
 8000a30:	40d9      	lsrs	r1, r3
 8000a32:	40bc      	lsls	r4, r7
 8000a34:	000b      	movs	r3, r1
 8000a36:	1e61      	subs	r1, r4, #1
 8000a38:	418c      	sbcs	r4, r1
 8000a3a:	4323      	orrs	r3, r4
 8000a3c:	0759      	lsls	r1, r3, #29
 8000a3e:	d004      	beq.n	8000a4a <__aeabi_fdiv+0x1ee>
 8000a40:	210f      	movs	r1, #15
 8000a42:	4019      	ands	r1, r3
 8000a44:	2904      	cmp	r1, #4
 8000a46:	d000      	beq.n	8000a4a <__aeabi_fdiv+0x1ee>
 8000a48:	3304      	adds	r3, #4
 8000a4a:	0159      	lsls	r1, r3, #5
 8000a4c:	d413      	bmi.n	8000a76 <__aeabi_fdiv+0x21a>
 8000a4e:	019b      	lsls	r3, r3, #6
 8000a50:	2000      	movs	r0, #0
 8000a52:	0a5c      	lsrs	r4, r3, #9
 8000a54:	e75a      	b.n	800090c <__aeabi_fdiv+0xb0>
 8000a56:	231a      	movs	r3, #26
 8000a58:	2401      	movs	r4, #1
 8000a5a:	1a2d      	subs	r5, r5, r0
 8000a5c:	e7d0      	b.n	8000a00 <__aeabi_fdiv+0x1a4>
 8000a5e:	1e98      	subs	r0, r3, #2
 8000a60:	4243      	negs	r3, r0
 8000a62:	4158      	adcs	r0, r3
 8000a64:	4240      	negs	r0, r0
 8000a66:	0032      	movs	r2, r6
 8000a68:	2400      	movs	r4, #0
 8000a6a:	b2c0      	uxtb	r0, r0
 8000a6c:	e74e      	b.n	800090c <__aeabi_fdiv+0xb0>
 8000a6e:	4642      	mov	r2, r8
 8000a70:	20ff      	movs	r0, #255	@ 0xff
 8000a72:	2400      	movs	r4, #0
 8000a74:	e74a      	b.n	800090c <__aeabi_fdiv+0xb0>
 8000a76:	2001      	movs	r0, #1
 8000a78:	2400      	movs	r4, #0
 8000a7a:	e747      	b.n	800090c <__aeabi_fdiv+0xb0>
 8000a7c:	08007a98 	.word	0x08007a98
 8000a80:	08007ad8 	.word	0x08007ad8
 8000a84:	f7ffffff 	.word	0xf7ffffff

08000a88 <__eqsf2>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	0042      	lsls	r2, r0, #1
 8000a8c:	024e      	lsls	r6, r1, #9
 8000a8e:	004c      	lsls	r4, r1, #1
 8000a90:	0245      	lsls	r5, r0, #9
 8000a92:	0a6d      	lsrs	r5, r5, #9
 8000a94:	0e12      	lsrs	r2, r2, #24
 8000a96:	0fc3      	lsrs	r3, r0, #31
 8000a98:	0a76      	lsrs	r6, r6, #9
 8000a9a:	0e24      	lsrs	r4, r4, #24
 8000a9c:	0fc9      	lsrs	r1, r1, #31
 8000a9e:	2aff      	cmp	r2, #255	@ 0xff
 8000aa0:	d010      	beq.n	8000ac4 <__eqsf2+0x3c>
 8000aa2:	2cff      	cmp	r4, #255	@ 0xff
 8000aa4:	d00c      	beq.n	8000ac0 <__eqsf2+0x38>
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d10a      	bne.n	8000ac2 <__eqsf2+0x3a>
 8000aac:	42b5      	cmp	r5, r6
 8000aae:	d108      	bne.n	8000ac2 <__eqsf2+0x3a>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	d00f      	beq.n	8000ad4 <__eqsf2+0x4c>
 8000ab4:	2a00      	cmp	r2, #0
 8000ab6:	d104      	bne.n	8000ac2 <__eqsf2+0x3a>
 8000ab8:	0028      	movs	r0, r5
 8000aba:	1e43      	subs	r3, r0, #1
 8000abc:	4198      	sbcs	r0, r3
 8000abe:	e000      	b.n	8000ac2 <__eqsf2+0x3a>
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	2cff      	cmp	r4, #255	@ 0xff
 8000ac8:	d1fb      	bne.n	8000ac2 <__eqsf2+0x3a>
 8000aca:	4335      	orrs	r5, r6
 8000acc:	d1f9      	bne.n	8000ac2 <__eqsf2+0x3a>
 8000ace:	404b      	eors	r3, r1
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	e7f6      	b.n	8000ac2 <__eqsf2+0x3a>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e7f4      	b.n	8000ac2 <__eqsf2+0x3a>

08000ad8 <__gesf2>:
 8000ad8:	b530      	push	{r4, r5, lr}
 8000ada:	0042      	lsls	r2, r0, #1
 8000adc:	0244      	lsls	r4, r0, #9
 8000ade:	024d      	lsls	r5, r1, #9
 8000ae0:	0fc3      	lsrs	r3, r0, #31
 8000ae2:	0048      	lsls	r0, r1, #1
 8000ae4:	0a64      	lsrs	r4, r4, #9
 8000ae6:	0e12      	lsrs	r2, r2, #24
 8000ae8:	0a6d      	lsrs	r5, r5, #9
 8000aea:	0e00      	lsrs	r0, r0, #24
 8000aec:	0fc9      	lsrs	r1, r1, #31
 8000aee:	2aff      	cmp	r2, #255	@ 0xff
 8000af0:	d018      	beq.n	8000b24 <__gesf2+0x4c>
 8000af2:	28ff      	cmp	r0, #255	@ 0xff
 8000af4:	d00a      	beq.n	8000b0c <__gesf2+0x34>
 8000af6:	2a00      	cmp	r2, #0
 8000af8:	d11e      	bne.n	8000b38 <__gesf2+0x60>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d10a      	bne.n	8000b14 <__gesf2+0x3c>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d029      	beq.n	8000b56 <__gesf2+0x7e>
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d12d      	bne.n	8000b62 <__gesf2+0x8a>
 8000b06:	0048      	lsls	r0, r1, #1
 8000b08:	3801      	subs	r0, #1
 8000b0a:	bd30      	pop	{r4, r5, pc}
 8000b0c:	2d00      	cmp	r5, #0
 8000b0e:	d125      	bne.n	8000b5c <__gesf2+0x84>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	d101      	bne.n	8000b18 <__gesf2+0x40>
 8000b14:	2c00      	cmp	r4, #0
 8000b16:	d0f6      	beq.n	8000b06 <__gesf2+0x2e>
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	d019      	beq.n	8000b50 <__gesf2+0x78>
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	425b      	negs	r3, r3
 8000b20:	4318      	orrs	r0, r3
 8000b22:	e7f2      	b.n	8000b0a <__gesf2+0x32>
 8000b24:	2c00      	cmp	r4, #0
 8000b26:	d119      	bne.n	8000b5c <__gesf2+0x84>
 8000b28:	28ff      	cmp	r0, #255	@ 0xff
 8000b2a:	d1f7      	bne.n	8000b1c <__gesf2+0x44>
 8000b2c:	2d00      	cmp	r5, #0
 8000b2e:	d115      	bne.n	8000b5c <__gesf2+0x84>
 8000b30:	2000      	movs	r0, #0
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d1f2      	bne.n	8000b1c <__gesf2+0x44>
 8000b36:	e7e8      	b.n	8000b0a <__gesf2+0x32>
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d0ef      	beq.n	8000b1c <__gesf2+0x44>
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	d1ed      	bne.n	8000b1c <__gesf2+0x44>
 8000b40:	4282      	cmp	r2, r0
 8000b42:	dceb      	bgt.n	8000b1c <__gesf2+0x44>
 8000b44:	db04      	blt.n	8000b50 <__gesf2+0x78>
 8000b46:	42ac      	cmp	r4, r5
 8000b48:	d8e8      	bhi.n	8000b1c <__gesf2+0x44>
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	42ac      	cmp	r4, r5
 8000b4e:	d2dc      	bcs.n	8000b0a <__gesf2+0x32>
 8000b50:	0058      	lsls	r0, r3, #1
 8000b52:	3801      	subs	r0, #1
 8000b54:	e7d9      	b.n	8000b0a <__gesf2+0x32>
 8000b56:	2c00      	cmp	r4, #0
 8000b58:	d0d7      	beq.n	8000b0a <__gesf2+0x32>
 8000b5a:	e7df      	b.n	8000b1c <__gesf2+0x44>
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	4240      	negs	r0, r0
 8000b60:	e7d3      	b.n	8000b0a <__gesf2+0x32>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d1da      	bne.n	8000b1c <__gesf2+0x44>
 8000b66:	e7ee      	b.n	8000b46 <__gesf2+0x6e>

08000b68 <__lesf2>:
 8000b68:	b530      	push	{r4, r5, lr}
 8000b6a:	0042      	lsls	r2, r0, #1
 8000b6c:	0244      	lsls	r4, r0, #9
 8000b6e:	024d      	lsls	r5, r1, #9
 8000b70:	0fc3      	lsrs	r3, r0, #31
 8000b72:	0048      	lsls	r0, r1, #1
 8000b74:	0a64      	lsrs	r4, r4, #9
 8000b76:	0e12      	lsrs	r2, r2, #24
 8000b78:	0a6d      	lsrs	r5, r5, #9
 8000b7a:	0e00      	lsrs	r0, r0, #24
 8000b7c:	0fc9      	lsrs	r1, r1, #31
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d017      	beq.n	8000bb2 <__lesf2+0x4a>
 8000b82:	28ff      	cmp	r0, #255	@ 0xff
 8000b84:	d00a      	beq.n	8000b9c <__lesf2+0x34>
 8000b86:	2a00      	cmp	r2, #0
 8000b88:	d11b      	bne.n	8000bc2 <__lesf2+0x5a>
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	d10a      	bne.n	8000ba4 <__lesf2+0x3c>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d01d      	beq.n	8000bce <__lesf2+0x66>
 8000b92:	2c00      	cmp	r4, #0
 8000b94:	d12d      	bne.n	8000bf2 <__lesf2+0x8a>
 8000b96:	0048      	lsls	r0, r1, #1
 8000b98:	3801      	subs	r0, #1
 8000b9a:	e011      	b.n	8000bc0 <__lesf2+0x58>
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d10e      	bne.n	8000bbe <__lesf2+0x56>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	d101      	bne.n	8000ba8 <__lesf2+0x40>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d0f6      	beq.n	8000b96 <__lesf2+0x2e>
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	d10c      	bne.n	8000bc6 <__lesf2+0x5e>
 8000bac:	0058      	lsls	r0, r3, #1
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e006      	b.n	8000bc0 <__lesf2+0x58>
 8000bb2:	2c00      	cmp	r4, #0
 8000bb4:	d103      	bne.n	8000bbe <__lesf2+0x56>
 8000bb6:	28ff      	cmp	r0, #255	@ 0xff
 8000bb8:	d105      	bne.n	8000bc6 <__lesf2+0x5e>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d015      	beq.n	8000bea <__lesf2+0x82>
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	bd30      	pop	{r4, r5, pc}
 8000bc2:	2800      	cmp	r0, #0
 8000bc4:	d106      	bne.n	8000bd4 <__lesf2+0x6c>
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	425b      	negs	r3, r3
 8000bca:	4318      	orrs	r0, r3
 8000bcc:	e7f8      	b.n	8000bc0 <__lesf2+0x58>
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d0f6      	beq.n	8000bc0 <__lesf2+0x58>
 8000bd2:	e7f8      	b.n	8000bc6 <__lesf2+0x5e>
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d1f6      	bne.n	8000bc6 <__lesf2+0x5e>
 8000bd8:	4282      	cmp	r2, r0
 8000bda:	dcf4      	bgt.n	8000bc6 <__lesf2+0x5e>
 8000bdc:	dbe6      	blt.n	8000bac <__lesf2+0x44>
 8000bde:	42ac      	cmp	r4, r5
 8000be0:	d8f1      	bhi.n	8000bc6 <__lesf2+0x5e>
 8000be2:	2000      	movs	r0, #0
 8000be4:	42ac      	cmp	r4, r5
 8000be6:	d2eb      	bcs.n	8000bc0 <__lesf2+0x58>
 8000be8:	e7e0      	b.n	8000bac <__lesf2+0x44>
 8000bea:	2000      	movs	r0, #0
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d1ea      	bne.n	8000bc6 <__lesf2+0x5e>
 8000bf0:	e7e6      	b.n	8000bc0 <__lesf2+0x58>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d1e7      	bne.n	8000bc6 <__lesf2+0x5e>
 8000bf6:	e7f2      	b.n	8000bde <__lesf2+0x76>

08000bf8 <__aeabi_fmul>:
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bfa:	464f      	mov	r7, r9
 8000bfc:	4646      	mov	r6, r8
 8000bfe:	46d6      	mov	lr, sl
 8000c00:	0044      	lsls	r4, r0, #1
 8000c02:	b5c0      	push	{r6, r7, lr}
 8000c04:	0246      	lsls	r6, r0, #9
 8000c06:	1c0f      	adds	r7, r1, #0
 8000c08:	0a76      	lsrs	r6, r6, #9
 8000c0a:	0e24      	lsrs	r4, r4, #24
 8000c0c:	0fc5      	lsrs	r5, r0, #31
 8000c0e:	2c00      	cmp	r4, #0
 8000c10:	d100      	bne.n	8000c14 <__aeabi_fmul+0x1c>
 8000c12:	e0da      	b.n	8000dca <__aeabi_fmul+0x1d2>
 8000c14:	2cff      	cmp	r4, #255	@ 0xff
 8000c16:	d074      	beq.n	8000d02 <__aeabi_fmul+0x10a>
 8000c18:	2380      	movs	r3, #128	@ 0x80
 8000c1a:	00f6      	lsls	r6, r6, #3
 8000c1c:	04db      	lsls	r3, r3, #19
 8000c1e:	431e      	orrs	r6, r3
 8000c20:	2300      	movs	r3, #0
 8000c22:	4699      	mov	r9, r3
 8000c24:	469a      	mov	sl, r3
 8000c26:	3c7f      	subs	r4, #127	@ 0x7f
 8000c28:	027b      	lsls	r3, r7, #9
 8000c2a:	0a5b      	lsrs	r3, r3, #9
 8000c2c:	4698      	mov	r8, r3
 8000c2e:	007b      	lsls	r3, r7, #1
 8000c30:	0e1b      	lsrs	r3, r3, #24
 8000c32:	0fff      	lsrs	r7, r7, #31
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d074      	beq.n	8000d22 <__aeabi_fmul+0x12a>
 8000c38:	2bff      	cmp	r3, #255	@ 0xff
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fmul+0x46>
 8000c3c:	e08e      	b.n	8000d5c <__aeabi_fmul+0x164>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	2180      	movs	r1, #128	@ 0x80
 8000c42:	00d2      	lsls	r2, r2, #3
 8000c44:	04c9      	lsls	r1, r1, #19
 8000c46:	4311      	orrs	r1, r2
 8000c48:	3b7f      	subs	r3, #127	@ 0x7f
 8000c4a:	002a      	movs	r2, r5
 8000c4c:	18e4      	adds	r4, r4, r3
 8000c4e:	464b      	mov	r3, r9
 8000c50:	407a      	eors	r2, r7
 8000c52:	4688      	mov	r8, r1
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	2b0a      	cmp	r3, #10
 8000c58:	dc75      	bgt.n	8000d46 <__aeabi_fmul+0x14e>
 8000c5a:	464b      	mov	r3, r9
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	dd0f      	ble.n	8000c82 <__aeabi_fmul+0x8a>
 8000c62:	4649      	mov	r1, r9
 8000c64:	2301      	movs	r3, #1
 8000c66:	408b      	lsls	r3, r1
 8000c68:	21a6      	movs	r1, #166	@ 0xa6
 8000c6a:	00c9      	lsls	r1, r1, #3
 8000c6c:	420b      	tst	r3, r1
 8000c6e:	d169      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000c70:	2190      	movs	r1, #144	@ 0x90
 8000c72:	0089      	lsls	r1, r1, #2
 8000c74:	420b      	tst	r3, r1
 8000c76:	d000      	beq.n	8000c7a <__aeabi_fmul+0x82>
 8000c78:	e100      	b.n	8000e7c <__aeabi_fmul+0x284>
 8000c7a:	2188      	movs	r1, #136	@ 0x88
 8000c7c:	4219      	tst	r1, r3
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_fmul+0x8a>
 8000c80:	e0f5      	b.n	8000e6e <__aeabi_fmul+0x276>
 8000c82:	4641      	mov	r1, r8
 8000c84:	0409      	lsls	r1, r1, #16
 8000c86:	0c09      	lsrs	r1, r1, #16
 8000c88:	4643      	mov	r3, r8
 8000c8a:	0008      	movs	r0, r1
 8000c8c:	0c35      	lsrs	r5, r6, #16
 8000c8e:	0436      	lsls	r6, r6, #16
 8000c90:	0c1b      	lsrs	r3, r3, #16
 8000c92:	0c36      	lsrs	r6, r6, #16
 8000c94:	4370      	muls	r0, r6
 8000c96:	4369      	muls	r1, r5
 8000c98:	435e      	muls	r6, r3
 8000c9a:	435d      	muls	r5, r3
 8000c9c:	1876      	adds	r6, r6, r1
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	199b      	adds	r3, r3, r6
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d903      	bls.n	8000cae <__aeabi_fmul+0xb6>
 8000ca6:	2180      	movs	r1, #128	@ 0x80
 8000ca8:	0249      	lsls	r1, r1, #9
 8000caa:	468c      	mov	ip, r1
 8000cac:	4465      	add	r5, ip
 8000cae:	0400      	lsls	r0, r0, #16
 8000cb0:	0419      	lsls	r1, r3, #16
 8000cb2:	0c00      	lsrs	r0, r0, #16
 8000cb4:	1809      	adds	r1, r1, r0
 8000cb6:	018e      	lsls	r6, r1, #6
 8000cb8:	1e70      	subs	r0, r6, #1
 8000cba:	4186      	sbcs	r6, r0
 8000cbc:	0c1b      	lsrs	r3, r3, #16
 8000cbe:	0e89      	lsrs	r1, r1, #26
 8000cc0:	195b      	adds	r3, r3, r5
 8000cc2:	430e      	orrs	r6, r1
 8000cc4:	019b      	lsls	r3, r3, #6
 8000cc6:	431e      	orrs	r6, r3
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	d46c      	bmi.n	8000da6 <__aeabi_fmul+0x1ae>
 8000ccc:	0023      	movs	r3, r4
 8000cce:	337f      	adds	r3, #127	@ 0x7f
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	dc00      	bgt.n	8000cd6 <__aeabi_fmul+0xde>
 8000cd4:	e0b1      	b.n	8000e3a <__aeabi_fmul+0x242>
 8000cd6:	0015      	movs	r5, r2
 8000cd8:	0771      	lsls	r1, r6, #29
 8000cda:	d00b      	beq.n	8000cf4 <__aeabi_fmul+0xfc>
 8000cdc:	200f      	movs	r0, #15
 8000cde:	0021      	movs	r1, r4
 8000ce0:	4030      	ands	r0, r6
 8000ce2:	2804      	cmp	r0, #4
 8000ce4:	d006      	beq.n	8000cf4 <__aeabi_fmul+0xfc>
 8000ce6:	3604      	adds	r6, #4
 8000ce8:	0132      	lsls	r2, r6, #4
 8000cea:	d503      	bpl.n	8000cf4 <__aeabi_fmul+0xfc>
 8000cec:	4b6e      	ldr	r3, [pc, #440]	@ (8000ea8 <__aeabi_fmul+0x2b0>)
 8000cee:	401e      	ands	r6, r3
 8000cf0:	000b      	movs	r3, r1
 8000cf2:	3380      	adds	r3, #128	@ 0x80
 8000cf4:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cf6:	dd00      	ble.n	8000cfa <__aeabi_fmul+0x102>
 8000cf8:	e0bd      	b.n	8000e76 <__aeabi_fmul+0x27e>
 8000cfa:	01b2      	lsls	r2, r6, #6
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	e048      	b.n	8000d94 <__aeabi_fmul+0x19c>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d000      	beq.n	8000d08 <__aeabi_fmul+0x110>
 8000d06:	e092      	b.n	8000e2e <__aeabi_fmul+0x236>
 8000d08:	2308      	movs	r3, #8
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	3b06      	subs	r3, #6
 8000d0e:	469a      	mov	sl, r3
 8000d10:	027b      	lsls	r3, r7, #9
 8000d12:	0a5b      	lsrs	r3, r3, #9
 8000d14:	4698      	mov	r8, r3
 8000d16:	007b      	lsls	r3, r7, #1
 8000d18:	24ff      	movs	r4, #255	@ 0xff
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0fff      	lsrs	r7, r7, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d18a      	bne.n	8000c38 <__aeabi_fmul+0x40>
 8000d22:	4642      	mov	r2, r8
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d164      	bne.n	8000df2 <__aeabi_fmul+0x1fa>
 8000d28:	4649      	mov	r1, r9
 8000d2a:	3201      	adds	r2, #1
 8000d2c:	4311      	orrs	r1, r2
 8000d2e:	4689      	mov	r9, r1
 8000d30:	290a      	cmp	r1, #10
 8000d32:	dc08      	bgt.n	8000d46 <__aeabi_fmul+0x14e>
 8000d34:	407d      	eors	r5, r7
 8000d36:	2001      	movs	r0, #1
 8000d38:	b2ea      	uxtb	r2, r5
 8000d3a:	2902      	cmp	r1, #2
 8000d3c:	dc91      	bgt.n	8000c62 <__aeabi_fmul+0x6a>
 8000d3e:	0015      	movs	r5, r2
 8000d40:	2200      	movs	r2, #0
 8000d42:	e027      	b.n	8000d94 <__aeabi_fmul+0x19c>
 8000d44:	0015      	movs	r5, r2
 8000d46:	4653      	mov	r3, sl
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_fmul+0x156>
 8000d4c:	e093      	b.n	8000e76 <__aeabi_fmul+0x27e>
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d01a      	beq.n	8000d88 <__aeabi_fmul+0x190>
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d12c      	bne.n	8000db0 <__aeabi_fmul+0x1b8>
 8000d56:	2300      	movs	r3, #0
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e01b      	b.n	8000d94 <__aeabi_fmul+0x19c>
 8000d5c:	4643      	mov	r3, r8
 8000d5e:	34ff      	adds	r4, #255	@ 0xff
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d055      	beq.n	8000e10 <__aeabi_fmul+0x218>
 8000d64:	2103      	movs	r1, #3
 8000d66:	464b      	mov	r3, r9
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	2b0a      	cmp	r3, #10
 8000d6e:	dc00      	bgt.n	8000d72 <__aeabi_fmul+0x17a>
 8000d70:	e092      	b.n	8000e98 <__aeabi_fmul+0x2a0>
 8000d72:	2b0f      	cmp	r3, #15
 8000d74:	d000      	beq.n	8000d78 <__aeabi_fmul+0x180>
 8000d76:	e08c      	b.n	8000e92 <__aeabi_fmul+0x29a>
 8000d78:	2280      	movs	r2, #128	@ 0x80
 8000d7a:	03d2      	lsls	r2, r2, #15
 8000d7c:	4216      	tst	r6, r2
 8000d7e:	d003      	beq.n	8000d88 <__aeabi_fmul+0x190>
 8000d80:	4643      	mov	r3, r8
 8000d82:	4213      	tst	r3, r2
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fmul+0x190>
 8000d86:	e07d      	b.n	8000e84 <__aeabi_fmul+0x28c>
 8000d88:	2280      	movs	r2, #128	@ 0x80
 8000d8a:	03d2      	lsls	r2, r2, #15
 8000d8c:	4332      	orrs	r2, r6
 8000d8e:	0252      	lsls	r2, r2, #9
 8000d90:	0a52      	lsrs	r2, r2, #9
 8000d92:	23ff      	movs	r3, #255	@ 0xff
 8000d94:	05d8      	lsls	r0, r3, #23
 8000d96:	07ed      	lsls	r5, r5, #31
 8000d98:	4310      	orrs	r0, r2
 8000d9a:	4328      	orrs	r0, r5
 8000d9c:	bce0      	pop	{r5, r6, r7}
 8000d9e:	46ba      	mov	sl, r7
 8000da0:	46b1      	mov	r9, r6
 8000da2:	46a8      	mov	r8, r5
 8000da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da6:	2301      	movs	r3, #1
 8000da8:	0015      	movs	r5, r2
 8000daa:	0871      	lsrs	r1, r6, #1
 8000dac:	401e      	ands	r6, r3
 8000dae:	430e      	orrs	r6, r1
 8000db0:	0023      	movs	r3, r4
 8000db2:	3380      	adds	r3, #128	@ 0x80
 8000db4:	1c61      	adds	r1, r4, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	dd41      	ble.n	8000e3e <__aeabi_fmul+0x246>
 8000dba:	0772      	lsls	r2, r6, #29
 8000dbc:	d094      	beq.n	8000ce8 <__aeabi_fmul+0xf0>
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	4032      	ands	r2, r6
 8000dc2:	2a04      	cmp	r2, #4
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_fmul+0x1d0>
 8000dc6:	e78e      	b.n	8000ce6 <__aeabi_fmul+0xee>
 8000dc8:	e78e      	b.n	8000ce8 <__aeabi_fmul+0xf0>
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d105      	bne.n	8000dda <__aeabi_fmul+0x1e2>
 8000dce:	2304      	movs	r3, #4
 8000dd0:	4699      	mov	r9, r3
 8000dd2:	3b03      	subs	r3, #3
 8000dd4:	2400      	movs	r4, #0
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	e726      	b.n	8000c28 <__aeabi_fmul+0x30>
 8000dda:	0030      	movs	r0, r6
 8000ddc:	f000 fb30 	bl	8001440 <__clzsi2>
 8000de0:	2476      	movs	r4, #118	@ 0x76
 8000de2:	1f43      	subs	r3, r0, #5
 8000de4:	409e      	lsls	r6, r3
 8000de6:	2300      	movs	r3, #0
 8000de8:	4264      	negs	r4, r4
 8000dea:	4699      	mov	r9, r3
 8000dec:	469a      	mov	sl, r3
 8000dee:	1a24      	subs	r4, r4, r0
 8000df0:	e71a      	b.n	8000c28 <__aeabi_fmul+0x30>
 8000df2:	4640      	mov	r0, r8
 8000df4:	f000 fb24 	bl	8001440 <__clzsi2>
 8000df8:	464b      	mov	r3, r9
 8000dfa:	1a24      	subs	r4, r4, r0
 8000dfc:	3c76      	subs	r4, #118	@ 0x76
 8000dfe:	2b0a      	cmp	r3, #10
 8000e00:	dca1      	bgt.n	8000d46 <__aeabi_fmul+0x14e>
 8000e02:	4643      	mov	r3, r8
 8000e04:	3805      	subs	r0, #5
 8000e06:	4083      	lsls	r3, r0
 8000e08:	407d      	eors	r5, r7
 8000e0a:	4698      	mov	r8, r3
 8000e0c:	b2ea      	uxtb	r2, r5
 8000e0e:	e724      	b.n	8000c5a <__aeabi_fmul+0x62>
 8000e10:	464a      	mov	r2, r9
 8000e12:	3302      	adds	r3, #2
 8000e14:	4313      	orrs	r3, r2
 8000e16:	002a      	movs	r2, r5
 8000e18:	407a      	eors	r2, r7
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	2b0a      	cmp	r3, #10
 8000e1e:	dc92      	bgt.n	8000d46 <__aeabi_fmul+0x14e>
 8000e20:	4649      	mov	r1, r9
 8000e22:	0015      	movs	r5, r2
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d026      	beq.n	8000e76 <__aeabi_fmul+0x27e>
 8000e28:	4699      	mov	r9, r3
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	e719      	b.n	8000c62 <__aeabi_fmul+0x6a>
 8000e2e:	230c      	movs	r3, #12
 8000e30:	4699      	mov	r9, r3
 8000e32:	3b09      	subs	r3, #9
 8000e34:	24ff      	movs	r4, #255	@ 0xff
 8000e36:	469a      	mov	sl, r3
 8000e38:	e6f6      	b.n	8000c28 <__aeabi_fmul+0x30>
 8000e3a:	0015      	movs	r5, r2
 8000e3c:	0021      	movs	r1, r4
 8000e3e:	2201      	movs	r2, #1
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b1b      	cmp	r3, #27
 8000e44:	dd00      	ble.n	8000e48 <__aeabi_fmul+0x250>
 8000e46:	e786      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e48:	319e      	adds	r1, #158	@ 0x9e
 8000e4a:	0032      	movs	r2, r6
 8000e4c:	408e      	lsls	r6, r1
 8000e4e:	40da      	lsrs	r2, r3
 8000e50:	1e73      	subs	r3, r6, #1
 8000e52:	419e      	sbcs	r6, r3
 8000e54:	4332      	orrs	r2, r6
 8000e56:	0753      	lsls	r3, r2, #29
 8000e58:	d004      	beq.n	8000e64 <__aeabi_fmul+0x26c>
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d000      	beq.n	8000e64 <__aeabi_fmul+0x26c>
 8000e62:	3204      	adds	r2, #4
 8000e64:	0153      	lsls	r3, r2, #5
 8000e66:	d510      	bpl.n	8000e8a <__aeabi_fmul+0x292>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	e792      	b.n	8000d94 <__aeabi_fmul+0x19c>
 8000e6e:	003d      	movs	r5, r7
 8000e70:	4646      	mov	r6, r8
 8000e72:	4682      	mov	sl, r0
 8000e74:	e767      	b.n	8000d46 <__aeabi_fmul+0x14e>
 8000e76:	23ff      	movs	r3, #255	@ 0xff
 8000e78:	2200      	movs	r2, #0
 8000e7a:	e78b      	b.n	8000d94 <__aeabi_fmul+0x19c>
 8000e7c:	2280      	movs	r2, #128	@ 0x80
 8000e7e:	2500      	movs	r5, #0
 8000e80:	03d2      	lsls	r2, r2, #15
 8000e82:	e786      	b.n	8000d92 <__aeabi_fmul+0x19a>
 8000e84:	003d      	movs	r5, r7
 8000e86:	431a      	orrs	r2, r3
 8000e88:	e783      	b.n	8000d92 <__aeabi_fmul+0x19a>
 8000e8a:	0192      	lsls	r2, r2, #6
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	0a52      	lsrs	r2, r2, #9
 8000e90:	e780      	b.n	8000d94 <__aeabi_fmul+0x19c>
 8000e92:	003d      	movs	r5, r7
 8000e94:	4646      	mov	r6, r8
 8000e96:	e777      	b.n	8000d88 <__aeabi_fmul+0x190>
 8000e98:	002a      	movs	r2, r5
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	407a      	eors	r2, r7
 8000e9e:	408b      	lsls	r3, r1
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	e6e9      	b.n	8000c7a <__aeabi_fmul+0x82>
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	f7ffffff 	.word	0xf7ffffff

08000eac <__aeabi_fsub>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	4647      	mov	r7, r8
 8000eb0:	46ce      	mov	lr, r9
 8000eb2:	0243      	lsls	r3, r0, #9
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	0a5f      	lsrs	r7, r3, #9
 8000eb8:	099b      	lsrs	r3, r3, #6
 8000eba:	0045      	lsls	r5, r0, #1
 8000ebc:	004a      	lsls	r2, r1, #1
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	0fc4      	lsrs	r4, r0, #31
 8000ec4:	0fce      	lsrs	r6, r1, #31
 8000ec6:	0e2d      	lsrs	r5, r5, #24
 8000ec8:	0a58      	lsrs	r0, r3, #9
 8000eca:	0e12      	lsrs	r2, r2, #24
 8000ecc:	0999      	lsrs	r1, r3, #6
 8000ece:	2aff      	cmp	r2, #255	@ 0xff
 8000ed0:	d06b      	beq.n	8000faa <__aeabi_fsub+0xfe>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	405e      	eors	r6, r3
 8000ed6:	1aab      	subs	r3, r5, r2
 8000ed8:	42b4      	cmp	r4, r6
 8000eda:	d04b      	beq.n	8000f74 <__aeabi_fsub+0xc8>
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	dc00      	bgt.n	8000ee2 <__aeabi_fsub+0x36>
 8000ee0:	e0ff      	b.n	80010e2 <__aeabi_fsub+0x236>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_fsub+0x3c>
 8000ee6:	e088      	b.n	8000ffa <__aeabi_fsub+0x14e>
 8000ee8:	2dff      	cmp	r5, #255	@ 0xff
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x42>
 8000eec:	e0ef      	b.n	80010ce <__aeabi_fsub+0x222>
 8000eee:	2280      	movs	r2, #128	@ 0x80
 8000ef0:	04d2      	lsls	r2, r2, #19
 8000ef2:	4311      	orrs	r1, r2
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	2b1b      	cmp	r3, #27
 8000ef8:	dc08      	bgt.n	8000f0c <__aeabi_fsub+0x60>
 8000efa:	0008      	movs	r0, r1
 8000efc:	2220      	movs	r2, #32
 8000efe:	40d8      	lsrs	r0, r3
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	4099      	lsls	r1, r3
 8000f04:	000b      	movs	r3, r1
 8000f06:	1e5a      	subs	r2, r3, #1
 8000f08:	4193      	sbcs	r3, r2
 8000f0a:	4318      	orrs	r0, r3
 8000f0c:	4663      	mov	r3, ip
 8000f0e:	1a1b      	subs	r3, r3, r0
 8000f10:	469c      	mov	ip, r3
 8000f12:	4663      	mov	r3, ip
 8000f14:	015b      	lsls	r3, r3, #5
 8000f16:	d400      	bmi.n	8000f1a <__aeabi_fsub+0x6e>
 8000f18:	e0cd      	b.n	80010b6 <__aeabi_fsub+0x20a>
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	019f      	lsls	r7, r3, #6
 8000f1e:	09bf      	lsrs	r7, r7, #6
 8000f20:	0038      	movs	r0, r7
 8000f22:	f000 fa8d 	bl	8001440 <__clzsi2>
 8000f26:	003b      	movs	r3, r7
 8000f28:	3805      	subs	r0, #5
 8000f2a:	4083      	lsls	r3, r0
 8000f2c:	4285      	cmp	r5, r0
 8000f2e:	dc00      	bgt.n	8000f32 <__aeabi_fsub+0x86>
 8000f30:	e0a2      	b.n	8001078 <__aeabi_fsub+0x1cc>
 8000f32:	4ab7      	ldr	r2, [pc, #732]	@ (8001210 <__aeabi_fsub+0x364>)
 8000f34:	1a2d      	subs	r5, r5, r0
 8000f36:	401a      	ands	r2, r3
 8000f38:	4694      	mov	ip, r2
 8000f3a:	075a      	lsls	r2, r3, #29
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x94>
 8000f3e:	e0c3      	b.n	80010c8 <__aeabi_fsub+0x21c>
 8000f40:	220f      	movs	r2, #15
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d100      	bne.n	8000f4a <__aeabi_fsub+0x9e>
 8000f48:	e0be      	b.n	80010c8 <__aeabi_fsub+0x21c>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	4698      	mov	r8, r3
 8000f4e:	44c4      	add	ip, r8
 8000f50:	4663      	mov	r3, ip
 8000f52:	015b      	lsls	r3, r3, #5
 8000f54:	d400      	bmi.n	8000f58 <__aeabi_fsub+0xac>
 8000f56:	e0b7      	b.n	80010c8 <__aeabi_fsub+0x21c>
 8000f58:	1c68      	adds	r0, r5, #1
 8000f5a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_fsub+0xb4>
 8000f5e:	e0a5      	b.n	80010ac <__aeabi_fsub+0x200>
 8000f60:	20ff      	movs	r0, #255	@ 0xff
 8000f62:	2200      	movs	r2, #0
 8000f64:	05c0      	lsls	r0, r0, #23
 8000f66:	4310      	orrs	r0, r2
 8000f68:	07e4      	lsls	r4, r4, #31
 8000f6a:	4320      	orrs	r0, r4
 8000f6c:	bcc0      	pop	{r6, r7}
 8000f6e:	46b9      	mov	r9, r7
 8000f70:	46b0      	mov	r8, r6
 8000f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	dc00      	bgt.n	8000f7a <__aeabi_fsub+0xce>
 8000f78:	e1eb      	b.n	8001352 <__aeabi_fsub+0x4a6>
 8000f7a:	2a00      	cmp	r2, #0
 8000f7c:	d046      	beq.n	800100c <__aeabi_fsub+0x160>
 8000f7e:	2dff      	cmp	r5, #255	@ 0xff
 8000f80:	d100      	bne.n	8000f84 <__aeabi_fsub+0xd8>
 8000f82:	e0a4      	b.n	80010ce <__aeabi_fsub+0x222>
 8000f84:	2280      	movs	r2, #128	@ 0x80
 8000f86:	04d2      	lsls	r2, r2, #19
 8000f88:	4311      	orrs	r1, r2
 8000f8a:	2b1b      	cmp	r3, #27
 8000f8c:	dc00      	bgt.n	8000f90 <__aeabi_fsub+0xe4>
 8000f8e:	e0fb      	b.n	8001188 <__aeabi_fsub+0x2dc>
 8000f90:	2305      	movs	r3, #5
 8000f92:	4698      	mov	r8, r3
 8000f94:	002b      	movs	r3, r5
 8000f96:	44c4      	add	ip, r8
 8000f98:	4662      	mov	r2, ip
 8000f9a:	08d7      	lsrs	r7, r2, #3
 8000f9c:	2bff      	cmp	r3, #255	@ 0xff
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_fsub+0xf6>
 8000fa0:	e095      	b.n	80010ce <__aeabi_fsub+0x222>
 8000fa2:	027a      	lsls	r2, r7, #9
 8000fa4:	0a52      	lsrs	r2, r2, #9
 8000fa6:	b2d8      	uxtb	r0, r3
 8000fa8:	e7dc      	b.n	8000f64 <__aeabi_fsub+0xb8>
 8000faa:	002b      	movs	r3, r5
 8000fac:	3bff      	subs	r3, #255	@ 0xff
 8000fae:	4699      	mov	r9, r3
 8000fb0:	2900      	cmp	r1, #0
 8000fb2:	d118      	bne.n	8000fe6 <__aeabi_fsub+0x13a>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	405e      	eors	r6, r3
 8000fb8:	42b4      	cmp	r4, r6
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fsub+0x112>
 8000fbc:	e0ca      	b.n	8001154 <__aeabi_fsub+0x2a8>
 8000fbe:	464b      	mov	r3, r9
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d02d      	beq.n	8001020 <__aeabi_fsub+0x174>
 8000fc4:	2d00      	cmp	r5, #0
 8000fc6:	d000      	beq.n	8000fca <__aeabi_fsub+0x11e>
 8000fc8:	e13c      	b.n	8001244 <__aeabi_fsub+0x398>
 8000fca:	23ff      	movs	r3, #255	@ 0xff
 8000fcc:	4664      	mov	r4, ip
 8000fce:	2c00      	cmp	r4, #0
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_fsub+0x128>
 8000fd2:	e15f      	b.n	8001294 <__aeabi_fsub+0x3e8>
 8000fd4:	1e5d      	subs	r5, r3, #1
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_fsub+0x130>
 8000fda:	e174      	b.n	80012c6 <__aeabi_fsub+0x41a>
 8000fdc:	0034      	movs	r4, r6
 8000fde:	2bff      	cmp	r3, #255	@ 0xff
 8000fe0:	d074      	beq.n	80010cc <__aeabi_fsub+0x220>
 8000fe2:	002b      	movs	r3, r5
 8000fe4:	e103      	b.n	80011ee <__aeabi_fsub+0x342>
 8000fe6:	42b4      	cmp	r4, r6
 8000fe8:	d100      	bne.n	8000fec <__aeabi_fsub+0x140>
 8000fea:	e09c      	b.n	8001126 <__aeabi_fsub+0x27a>
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d017      	beq.n	8001020 <__aeabi_fsub+0x174>
 8000ff0:	2d00      	cmp	r5, #0
 8000ff2:	d0ea      	beq.n	8000fca <__aeabi_fsub+0x11e>
 8000ff4:	0007      	movs	r7, r0
 8000ff6:	0034      	movs	r4, r6
 8000ff8:	e06c      	b.n	80010d4 <__aeabi_fsub+0x228>
 8000ffa:	2900      	cmp	r1, #0
 8000ffc:	d0cc      	beq.n	8000f98 <__aeabi_fsub+0xec>
 8000ffe:	1e5a      	subs	r2, r3, #1
 8001000:	2b01      	cmp	r3, #1
 8001002:	d02b      	beq.n	800105c <__aeabi_fsub+0x1b0>
 8001004:	2bff      	cmp	r3, #255	@ 0xff
 8001006:	d062      	beq.n	80010ce <__aeabi_fsub+0x222>
 8001008:	0013      	movs	r3, r2
 800100a:	e773      	b.n	8000ef4 <__aeabi_fsub+0x48>
 800100c:	2900      	cmp	r1, #0
 800100e:	d0c3      	beq.n	8000f98 <__aeabi_fsub+0xec>
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	2b01      	cmp	r3, #1
 8001014:	d100      	bne.n	8001018 <__aeabi_fsub+0x16c>
 8001016:	e11e      	b.n	8001256 <__aeabi_fsub+0x3aa>
 8001018:	2bff      	cmp	r3, #255	@ 0xff
 800101a:	d058      	beq.n	80010ce <__aeabi_fsub+0x222>
 800101c:	0013      	movs	r3, r2
 800101e:	e7b4      	b.n	8000f8a <__aeabi_fsub+0xde>
 8001020:	22fe      	movs	r2, #254	@ 0xfe
 8001022:	1c6b      	adds	r3, r5, #1
 8001024:	421a      	tst	r2, r3
 8001026:	d10d      	bne.n	8001044 <__aeabi_fsub+0x198>
 8001028:	2d00      	cmp	r5, #0
 800102a:	d060      	beq.n	80010ee <__aeabi_fsub+0x242>
 800102c:	4663      	mov	r3, ip
 800102e:	2b00      	cmp	r3, #0
 8001030:	d000      	beq.n	8001034 <__aeabi_fsub+0x188>
 8001032:	e120      	b.n	8001276 <__aeabi_fsub+0x3ca>
 8001034:	2900      	cmp	r1, #0
 8001036:	d000      	beq.n	800103a <__aeabi_fsub+0x18e>
 8001038:	e128      	b.n	800128c <__aeabi_fsub+0x3e0>
 800103a:	2280      	movs	r2, #128	@ 0x80
 800103c:	2400      	movs	r4, #0
 800103e:	20ff      	movs	r0, #255	@ 0xff
 8001040:	03d2      	lsls	r2, r2, #15
 8001042:	e78f      	b.n	8000f64 <__aeabi_fsub+0xb8>
 8001044:	4663      	mov	r3, ip
 8001046:	1a5f      	subs	r7, r3, r1
 8001048:	017b      	lsls	r3, r7, #5
 800104a:	d500      	bpl.n	800104e <__aeabi_fsub+0x1a2>
 800104c:	e0fe      	b.n	800124c <__aeabi_fsub+0x3a0>
 800104e:	2f00      	cmp	r7, #0
 8001050:	d000      	beq.n	8001054 <__aeabi_fsub+0x1a8>
 8001052:	e765      	b.n	8000f20 <__aeabi_fsub+0x74>
 8001054:	2400      	movs	r4, #0
 8001056:	2000      	movs	r0, #0
 8001058:	2200      	movs	r2, #0
 800105a:	e783      	b.n	8000f64 <__aeabi_fsub+0xb8>
 800105c:	4663      	mov	r3, ip
 800105e:	1a59      	subs	r1, r3, r1
 8001060:	014b      	lsls	r3, r1, #5
 8001062:	d400      	bmi.n	8001066 <__aeabi_fsub+0x1ba>
 8001064:	e119      	b.n	800129a <__aeabi_fsub+0x3ee>
 8001066:	018f      	lsls	r7, r1, #6
 8001068:	09bf      	lsrs	r7, r7, #6
 800106a:	0038      	movs	r0, r7
 800106c:	f000 f9e8 	bl	8001440 <__clzsi2>
 8001070:	003b      	movs	r3, r7
 8001072:	3805      	subs	r0, #5
 8001074:	4083      	lsls	r3, r0
 8001076:	2501      	movs	r5, #1
 8001078:	2220      	movs	r2, #32
 800107a:	1b40      	subs	r0, r0, r5
 800107c:	3001      	adds	r0, #1
 800107e:	1a12      	subs	r2, r2, r0
 8001080:	0019      	movs	r1, r3
 8001082:	4093      	lsls	r3, r2
 8001084:	40c1      	lsrs	r1, r0
 8001086:	1e5a      	subs	r2, r3, #1
 8001088:	4193      	sbcs	r3, r2
 800108a:	4319      	orrs	r1, r3
 800108c:	468c      	mov	ip, r1
 800108e:	1e0b      	subs	r3, r1, #0
 8001090:	d0e1      	beq.n	8001056 <__aeabi_fsub+0x1aa>
 8001092:	075b      	lsls	r3, r3, #29
 8001094:	d100      	bne.n	8001098 <__aeabi_fsub+0x1ec>
 8001096:	e152      	b.n	800133e <__aeabi_fsub+0x492>
 8001098:	230f      	movs	r3, #15
 800109a:	2500      	movs	r5, #0
 800109c:	400b      	ands	r3, r1
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d000      	beq.n	80010a4 <__aeabi_fsub+0x1f8>
 80010a2:	e752      	b.n	8000f4a <__aeabi_fsub+0x9e>
 80010a4:	2001      	movs	r0, #1
 80010a6:	014a      	lsls	r2, r1, #5
 80010a8:	d400      	bmi.n	80010ac <__aeabi_fsub+0x200>
 80010aa:	e092      	b.n	80011d2 <__aeabi_fsub+0x326>
 80010ac:	b2c0      	uxtb	r0, r0
 80010ae:	4663      	mov	r3, ip
 80010b0:	019a      	lsls	r2, r3, #6
 80010b2:	0a52      	lsrs	r2, r2, #9
 80010b4:	e756      	b.n	8000f64 <__aeabi_fsub+0xb8>
 80010b6:	4663      	mov	r3, ip
 80010b8:	075b      	lsls	r3, r3, #29
 80010ba:	d005      	beq.n	80010c8 <__aeabi_fsub+0x21c>
 80010bc:	230f      	movs	r3, #15
 80010be:	4662      	mov	r2, ip
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d000      	beq.n	80010c8 <__aeabi_fsub+0x21c>
 80010c6:	e740      	b.n	8000f4a <__aeabi_fsub+0x9e>
 80010c8:	002b      	movs	r3, r5
 80010ca:	e765      	b.n	8000f98 <__aeabi_fsub+0xec>
 80010cc:	0007      	movs	r7, r0
 80010ce:	2f00      	cmp	r7, #0
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fsub+0x228>
 80010d2:	e745      	b.n	8000f60 <__aeabi_fsub+0xb4>
 80010d4:	2280      	movs	r2, #128	@ 0x80
 80010d6:	03d2      	lsls	r2, r2, #15
 80010d8:	433a      	orrs	r2, r7
 80010da:	0252      	lsls	r2, r2, #9
 80010dc:	20ff      	movs	r0, #255	@ 0xff
 80010de:	0a52      	lsrs	r2, r2, #9
 80010e0:	e740      	b.n	8000f64 <__aeabi_fsub+0xb8>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d179      	bne.n	80011da <__aeabi_fsub+0x32e>
 80010e6:	22fe      	movs	r2, #254	@ 0xfe
 80010e8:	1c6b      	adds	r3, r5, #1
 80010ea:	421a      	tst	r2, r3
 80010ec:	d1aa      	bne.n	8001044 <__aeabi_fsub+0x198>
 80010ee:	4663      	mov	r3, ip
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_fsub+0x24a>
 80010f4:	e0f5      	b.n	80012e2 <__aeabi_fsub+0x436>
 80010f6:	2900      	cmp	r1, #0
 80010f8:	d100      	bne.n	80010fc <__aeabi_fsub+0x250>
 80010fa:	e0d1      	b.n	80012a0 <__aeabi_fsub+0x3f4>
 80010fc:	1a5f      	subs	r7, r3, r1
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	04db      	lsls	r3, r3, #19
 8001102:	421f      	tst	r7, r3
 8001104:	d100      	bne.n	8001108 <__aeabi_fsub+0x25c>
 8001106:	e10e      	b.n	8001326 <__aeabi_fsub+0x47a>
 8001108:	4662      	mov	r2, ip
 800110a:	2401      	movs	r4, #1
 800110c:	1a8a      	subs	r2, r1, r2
 800110e:	4694      	mov	ip, r2
 8001110:	2000      	movs	r0, #0
 8001112:	4034      	ands	r4, r6
 8001114:	2a00      	cmp	r2, #0
 8001116:	d100      	bne.n	800111a <__aeabi_fsub+0x26e>
 8001118:	e724      	b.n	8000f64 <__aeabi_fsub+0xb8>
 800111a:	2001      	movs	r0, #1
 800111c:	421a      	tst	r2, r3
 800111e:	d1c6      	bne.n	80010ae <__aeabi_fsub+0x202>
 8001120:	2300      	movs	r3, #0
 8001122:	08d7      	lsrs	r7, r2, #3
 8001124:	e73d      	b.n	8000fa2 <__aeabi_fsub+0xf6>
 8001126:	2b00      	cmp	r3, #0
 8001128:	d017      	beq.n	800115a <__aeabi_fsub+0x2ae>
 800112a:	2d00      	cmp	r5, #0
 800112c:	d000      	beq.n	8001130 <__aeabi_fsub+0x284>
 800112e:	e0af      	b.n	8001290 <__aeabi_fsub+0x3e4>
 8001130:	23ff      	movs	r3, #255	@ 0xff
 8001132:	4665      	mov	r5, ip
 8001134:	2d00      	cmp	r5, #0
 8001136:	d100      	bne.n	800113a <__aeabi_fsub+0x28e>
 8001138:	e0ad      	b.n	8001296 <__aeabi_fsub+0x3ea>
 800113a:	1e5e      	subs	r6, r3, #1
 800113c:	2b01      	cmp	r3, #1
 800113e:	d100      	bne.n	8001142 <__aeabi_fsub+0x296>
 8001140:	e089      	b.n	8001256 <__aeabi_fsub+0x3aa>
 8001142:	2bff      	cmp	r3, #255	@ 0xff
 8001144:	d0c2      	beq.n	80010cc <__aeabi_fsub+0x220>
 8001146:	2e1b      	cmp	r6, #27
 8001148:	dc00      	bgt.n	800114c <__aeabi_fsub+0x2a0>
 800114a:	e0ab      	b.n	80012a4 <__aeabi_fsub+0x3f8>
 800114c:	1d4b      	adds	r3, r1, #5
 800114e:	469c      	mov	ip, r3
 8001150:	0013      	movs	r3, r2
 8001152:	e721      	b.n	8000f98 <__aeabi_fsub+0xec>
 8001154:	464b      	mov	r3, r9
 8001156:	2b00      	cmp	r3, #0
 8001158:	d170      	bne.n	800123c <__aeabi_fsub+0x390>
 800115a:	22fe      	movs	r2, #254	@ 0xfe
 800115c:	1c6b      	adds	r3, r5, #1
 800115e:	421a      	tst	r2, r3
 8001160:	d15e      	bne.n	8001220 <__aeabi_fsub+0x374>
 8001162:	2d00      	cmp	r5, #0
 8001164:	d000      	beq.n	8001168 <__aeabi_fsub+0x2bc>
 8001166:	e0c3      	b.n	80012f0 <__aeabi_fsub+0x444>
 8001168:	4663      	mov	r3, ip
 800116a:	2b00      	cmp	r3, #0
 800116c:	d100      	bne.n	8001170 <__aeabi_fsub+0x2c4>
 800116e:	e0d0      	b.n	8001312 <__aeabi_fsub+0x466>
 8001170:	2900      	cmp	r1, #0
 8001172:	d100      	bne.n	8001176 <__aeabi_fsub+0x2ca>
 8001174:	e094      	b.n	80012a0 <__aeabi_fsub+0x3f4>
 8001176:	000a      	movs	r2, r1
 8001178:	4462      	add	r2, ip
 800117a:	0153      	lsls	r3, r2, #5
 800117c:	d400      	bmi.n	8001180 <__aeabi_fsub+0x2d4>
 800117e:	e0d8      	b.n	8001332 <__aeabi_fsub+0x486>
 8001180:	0192      	lsls	r2, r2, #6
 8001182:	2001      	movs	r0, #1
 8001184:	0a52      	lsrs	r2, r2, #9
 8001186:	e6ed      	b.n	8000f64 <__aeabi_fsub+0xb8>
 8001188:	0008      	movs	r0, r1
 800118a:	2220      	movs	r2, #32
 800118c:	40d8      	lsrs	r0, r3
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	4099      	lsls	r1, r3
 8001192:	000b      	movs	r3, r1
 8001194:	1e5a      	subs	r2, r3, #1
 8001196:	4193      	sbcs	r3, r2
 8001198:	4303      	orrs	r3, r0
 800119a:	449c      	add	ip, r3
 800119c:	4663      	mov	r3, ip
 800119e:	015b      	lsls	r3, r3, #5
 80011a0:	d589      	bpl.n	80010b6 <__aeabi_fsub+0x20a>
 80011a2:	3501      	adds	r5, #1
 80011a4:	2dff      	cmp	r5, #255	@ 0xff
 80011a6:	d100      	bne.n	80011aa <__aeabi_fsub+0x2fe>
 80011a8:	e6da      	b.n	8000f60 <__aeabi_fsub+0xb4>
 80011aa:	4662      	mov	r2, ip
 80011ac:	2301      	movs	r3, #1
 80011ae:	4919      	ldr	r1, [pc, #100]	@ (8001214 <__aeabi_fsub+0x368>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	0852      	lsrs	r2, r2, #1
 80011b4:	400a      	ands	r2, r1
 80011b6:	431a      	orrs	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	4694      	mov	ip, r2
 80011bc:	075b      	lsls	r3, r3, #29
 80011be:	d004      	beq.n	80011ca <__aeabi_fsub+0x31e>
 80011c0:	230f      	movs	r3, #15
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d000      	beq.n	80011ca <__aeabi_fsub+0x31e>
 80011c8:	e6bf      	b.n	8000f4a <__aeabi_fsub+0x9e>
 80011ca:	4663      	mov	r3, ip
 80011cc:	015b      	lsls	r3, r3, #5
 80011ce:	d500      	bpl.n	80011d2 <__aeabi_fsub+0x326>
 80011d0:	e6c2      	b.n	8000f58 <__aeabi_fsub+0xac>
 80011d2:	4663      	mov	r3, ip
 80011d4:	08df      	lsrs	r7, r3, #3
 80011d6:	002b      	movs	r3, r5
 80011d8:	e6e3      	b.n	8000fa2 <__aeabi_fsub+0xf6>
 80011da:	1b53      	subs	r3, r2, r5
 80011dc:	2d00      	cmp	r5, #0
 80011de:	d100      	bne.n	80011e2 <__aeabi_fsub+0x336>
 80011e0:	e6f4      	b.n	8000fcc <__aeabi_fsub+0x120>
 80011e2:	2080      	movs	r0, #128	@ 0x80
 80011e4:	4664      	mov	r4, ip
 80011e6:	04c0      	lsls	r0, r0, #19
 80011e8:	4304      	orrs	r4, r0
 80011ea:	46a4      	mov	ip, r4
 80011ec:	0034      	movs	r4, r6
 80011ee:	2001      	movs	r0, #1
 80011f0:	2b1b      	cmp	r3, #27
 80011f2:	dc09      	bgt.n	8001208 <__aeabi_fsub+0x35c>
 80011f4:	2520      	movs	r5, #32
 80011f6:	4660      	mov	r0, ip
 80011f8:	40d8      	lsrs	r0, r3
 80011fa:	1aeb      	subs	r3, r5, r3
 80011fc:	4665      	mov	r5, ip
 80011fe:	409d      	lsls	r5, r3
 8001200:	002b      	movs	r3, r5
 8001202:	1e5d      	subs	r5, r3, #1
 8001204:	41ab      	sbcs	r3, r5
 8001206:	4318      	orrs	r0, r3
 8001208:	1a0b      	subs	r3, r1, r0
 800120a:	469c      	mov	ip, r3
 800120c:	0015      	movs	r5, r2
 800120e:	e680      	b.n	8000f12 <__aeabi_fsub+0x66>
 8001210:	fbffffff 	.word	0xfbffffff
 8001214:	7dffffff 	.word	0x7dffffff
 8001218:	22fe      	movs	r2, #254	@ 0xfe
 800121a:	1c6b      	adds	r3, r5, #1
 800121c:	4213      	tst	r3, r2
 800121e:	d0a3      	beq.n	8001168 <__aeabi_fsub+0x2bc>
 8001220:	2bff      	cmp	r3, #255	@ 0xff
 8001222:	d100      	bne.n	8001226 <__aeabi_fsub+0x37a>
 8001224:	e69c      	b.n	8000f60 <__aeabi_fsub+0xb4>
 8001226:	4461      	add	r1, ip
 8001228:	0849      	lsrs	r1, r1, #1
 800122a:	074a      	lsls	r2, r1, #29
 800122c:	d049      	beq.n	80012c2 <__aeabi_fsub+0x416>
 800122e:	220f      	movs	r2, #15
 8001230:	400a      	ands	r2, r1
 8001232:	2a04      	cmp	r2, #4
 8001234:	d045      	beq.n	80012c2 <__aeabi_fsub+0x416>
 8001236:	1d0a      	adds	r2, r1, #4
 8001238:	4694      	mov	ip, r2
 800123a:	e6ad      	b.n	8000f98 <__aeabi_fsub+0xec>
 800123c:	2d00      	cmp	r5, #0
 800123e:	d100      	bne.n	8001242 <__aeabi_fsub+0x396>
 8001240:	e776      	b.n	8001130 <__aeabi_fsub+0x284>
 8001242:	e68d      	b.n	8000f60 <__aeabi_fsub+0xb4>
 8001244:	0034      	movs	r4, r6
 8001246:	20ff      	movs	r0, #255	@ 0xff
 8001248:	2200      	movs	r2, #0
 800124a:	e68b      	b.n	8000f64 <__aeabi_fsub+0xb8>
 800124c:	4663      	mov	r3, ip
 800124e:	2401      	movs	r4, #1
 8001250:	1acf      	subs	r7, r1, r3
 8001252:	4034      	ands	r4, r6
 8001254:	e664      	b.n	8000f20 <__aeabi_fsub+0x74>
 8001256:	4461      	add	r1, ip
 8001258:	014b      	lsls	r3, r1, #5
 800125a:	d56d      	bpl.n	8001338 <__aeabi_fsub+0x48c>
 800125c:	0848      	lsrs	r0, r1, #1
 800125e:	4944      	ldr	r1, [pc, #272]	@ (8001370 <__aeabi_fsub+0x4c4>)
 8001260:	4001      	ands	r1, r0
 8001262:	0743      	lsls	r3, r0, #29
 8001264:	d02c      	beq.n	80012c0 <__aeabi_fsub+0x414>
 8001266:	230f      	movs	r3, #15
 8001268:	4003      	ands	r3, r0
 800126a:	2b04      	cmp	r3, #4
 800126c:	d028      	beq.n	80012c0 <__aeabi_fsub+0x414>
 800126e:	1d0b      	adds	r3, r1, #4
 8001270:	469c      	mov	ip, r3
 8001272:	2302      	movs	r3, #2
 8001274:	e690      	b.n	8000f98 <__aeabi_fsub+0xec>
 8001276:	2900      	cmp	r1, #0
 8001278:	d100      	bne.n	800127c <__aeabi_fsub+0x3d0>
 800127a:	e72b      	b.n	80010d4 <__aeabi_fsub+0x228>
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	03db      	lsls	r3, r3, #15
 8001280:	429f      	cmp	r7, r3
 8001282:	d200      	bcs.n	8001286 <__aeabi_fsub+0x3da>
 8001284:	e726      	b.n	80010d4 <__aeabi_fsub+0x228>
 8001286:	4298      	cmp	r0, r3
 8001288:	d300      	bcc.n	800128c <__aeabi_fsub+0x3e0>
 800128a:	e723      	b.n	80010d4 <__aeabi_fsub+0x228>
 800128c:	2401      	movs	r4, #1
 800128e:	4034      	ands	r4, r6
 8001290:	0007      	movs	r7, r0
 8001292:	e71f      	b.n	80010d4 <__aeabi_fsub+0x228>
 8001294:	0034      	movs	r4, r6
 8001296:	468c      	mov	ip, r1
 8001298:	e67e      	b.n	8000f98 <__aeabi_fsub+0xec>
 800129a:	2301      	movs	r3, #1
 800129c:	08cf      	lsrs	r7, r1, #3
 800129e:	e680      	b.n	8000fa2 <__aeabi_fsub+0xf6>
 80012a0:	2300      	movs	r3, #0
 80012a2:	e67e      	b.n	8000fa2 <__aeabi_fsub+0xf6>
 80012a4:	2020      	movs	r0, #32
 80012a6:	4665      	mov	r5, ip
 80012a8:	1b80      	subs	r0, r0, r6
 80012aa:	4085      	lsls	r5, r0
 80012ac:	4663      	mov	r3, ip
 80012ae:	0028      	movs	r0, r5
 80012b0:	40f3      	lsrs	r3, r6
 80012b2:	1e45      	subs	r5, r0, #1
 80012b4:	41a8      	sbcs	r0, r5
 80012b6:	4303      	orrs	r3, r0
 80012b8:	469c      	mov	ip, r3
 80012ba:	0015      	movs	r5, r2
 80012bc:	448c      	add	ip, r1
 80012be:	e76d      	b.n	800119c <__aeabi_fsub+0x2f0>
 80012c0:	2302      	movs	r3, #2
 80012c2:	08cf      	lsrs	r7, r1, #3
 80012c4:	e66d      	b.n	8000fa2 <__aeabi_fsub+0xf6>
 80012c6:	1b0f      	subs	r7, r1, r4
 80012c8:	017b      	lsls	r3, r7, #5
 80012ca:	d528      	bpl.n	800131e <__aeabi_fsub+0x472>
 80012cc:	01bf      	lsls	r7, r7, #6
 80012ce:	09bf      	lsrs	r7, r7, #6
 80012d0:	0038      	movs	r0, r7
 80012d2:	f000 f8b5 	bl	8001440 <__clzsi2>
 80012d6:	003b      	movs	r3, r7
 80012d8:	3805      	subs	r0, #5
 80012da:	4083      	lsls	r3, r0
 80012dc:	0034      	movs	r4, r6
 80012de:	2501      	movs	r5, #1
 80012e0:	e6ca      	b.n	8001078 <__aeabi_fsub+0x1cc>
 80012e2:	2900      	cmp	r1, #0
 80012e4:	d100      	bne.n	80012e8 <__aeabi_fsub+0x43c>
 80012e6:	e6b5      	b.n	8001054 <__aeabi_fsub+0x1a8>
 80012e8:	2401      	movs	r4, #1
 80012ea:	0007      	movs	r7, r0
 80012ec:	4034      	ands	r4, r6
 80012ee:	e658      	b.n	8000fa2 <__aeabi_fsub+0xf6>
 80012f0:	4663      	mov	r3, ip
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d100      	bne.n	80012f8 <__aeabi_fsub+0x44c>
 80012f6:	e6e9      	b.n	80010cc <__aeabi_fsub+0x220>
 80012f8:	2900      	cmp	r1, #0
 80012fa:	d100      	bne.n	80012fe <__aeabi_fsub+0x452>
 80012fc:	e6ea      	b.n	80010d4 <__aeabi_fsub+0x228>
 80012fe:	2380      	movs	r3, #128	@ 0x80
 8001300:	03db      	lsls	r3, r3, #15
 8001302:	429f      	cmp	r7, r3
 8001304:	d200      	bcs.n	8001308 <__aeabi_fsub+0x45c>
 8001306:	e6e5      	b.n	80010d4 <__aeabi_fsub+0x228>
 8001308:	4298      	cmp	r0, r3
 800130a:	d300      	bcc.n	800130e <__aeabi_fsub+0x462>
 800130c:	e6e2      	b.n	80010d4 <__aeabi_fsub+0x228>
 800130e:	0007      	movs	r7, r0
 8001310:	e6e0      	b.n	80010d4 <__aeabi_fsub+0x228>
 8001312:	2900      	cmp	r1, #0
 8001314:	d100      	bne.n	8001318 <__aeabi_fsub+0x46c>
 8001316:	e69e      	b.n	8001056 <__aeabi_fsub+0x1aa>
 8001318:	2300      	movs	r3, #0
 800131a:	08cf      	lsrs	r7, r1, #3
 800131c:	e641      	b.n	8000fa2 <__aeabi_fsub+0xf6>
 800131e:	0034      	movs	r4, r6
 8001320:	2301      	movs	r3, #1
 8001322:	08ff      	lsrs	r7, r7, #3
 8001324:	e63d      	b.n	8000fa2 <__aeabi_fsub+0xf6>
 8001326:	2f00      	cmp	r7, #0
 8001328:	d100      	bne.n	800132c <__aeabi_fsub+0x480>
 800132a:	e693      	b.n	8001054 <__aeabi_fsub+0x1a8>
 800132c:	2300      	movs	r3, #0
 800132e:	08ff      	lsrs	r7, r7, #3
 8001330:	e637      	b.n	8000fa2 <__aeabi_fsub+0xf6>
 8001332:	2300      	movs	r3, #0
 8001334:	08d7      	lsrs	r7, r2, #3
 8001336:	e634      	b.n	8000fa2 <__aeabi_fsub+0xf6>
 8001338:	2301      	movs	r3, #1
 800133a:	08cf      	lsrs	r7, r1, #3
 800133c:	e631      	b.n	8000fa2 <__aeabi_fsub+0xf6>
 800133e:	2280      	movs	r2, #128	@ 0x80
 8001340:	000b      	movs	r3, r1
 8001342:	04d2      	lsls	r2, r2, #19
 8001344:	2001      	movs	r0, #1
 8001346:	4013      	ands	r3, r2
 8001348:	4211      	tst	r1, r2
 800134a:	d000      	beq.n	800134e <__aeabi_fsub+0x4a2>
 800134c:	e6ae      	b.n	80010ac <__aeabi_fsub+0x200>
 800134e:	08cf      	lsrs	r7, r1, #3
 8001350:	e627      	b.n	8000fa2 <__aeabi_fsub+0xf6>
 8001352:	2b00      	cmp	r3, #0
 8001354:	d100      	bne.n	8001358 <__aeabi_fsub+0x4ac>
 8001356:	e75f      	b.n	8001218 <__aeabi_fsub+0x36c>
 8001358:	1b56      	subs	r6, r2, r5
 800135a:	2d00      	cmp	r5, #0
 800135c:	d101      	bne.n	8001362 <__aeabi_fsub+0x4b6>
 800135e:	0033      	movs	r3, r6
 8001360:	e6e7      	b.n	8001132 <__aeabi_fsub+0x286>
 8001362:	2380      	movs	r3, #128	@ 0x80
 8001364:	4660      	mov	r0, ip
 8001366:	04db      	lsls	r3, r3, #19
 8001368:	4318      	orrs	r0, r3
 800136a:	4684      	mov	ip, r0
 800136c:	e6eb      	b.n	8001146 <__aeabi_fsub+0x29a>
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	7dffffff 	.word	0x7dffffff

08001374 <__aeabi_fcmpun>:
 8001374:	0243      	lsls	r3, r0, #9
 8001376:	024a      	lsls	r2, r1, #9
 8001378:	0040      	lsls	r0, r0, #1
 800137a:	0049      	lsls	r1, r1, #1
 800137c:	0a5b      	lsrs	r3, r3, #9
 800137e:	0a52      	lsrs	r2, r2, #9
 8001380:	0e09      	lsrs	r1, r1, #24
 8001382:	0e00      	lsrs	r0, r0, #24
 8001384:	28ff      	cmp	r0, #255	@ 0xff
 8001386:	d006      	beq.n	8001396 <__aeabi_fcmpun+0x22>
 8001388:	2000      	movs	r0, #0
 800138a:	29ff      	cmp	r1, #255	@ 0xff
 800138c:	d102      	bne.n	8001394 <__aeabi_fcmpun+0x20>
 800138e:	1e53      	subs	r3, r2, #1
 8001390:	419a      	sbcs	r2, r3
 8001392:	0010      	movs	r0, r2
 8001394:	4770      	bx	lr
 8001396:	38fe      	subs	r0, #254	@ 0xfe
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1fb      	bne.n	8001394 <__aeabi_fcmpun+0x20>
 800139c:	e7f4      	b.n	8001388 <__aeabi_fcmpun+0x14>
 800139e:	46c0      	nop			@ (mov r8, r8)

080013a0 <__aeabi_i2f>:
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	2800      	cmp	r0, #0
 80013a4:	d012      	beq.n	80013cc <__aeabi_i2f+0x2c>
 80013a6:	17c3      	asrs	r3, r0, #31
 80013a8:	18c5      	adds	r5, r0, r3
 80013aa:	405d      	eors	r5, r3
 80013ac:	0fc4      	lsrs	r4, r0, #31
 80013ae:	0028      	movs	r0, r5
 80013b0:	f000 f846 	bl	8001440 <__clzsi2>
 80013b4:	239e      	movs	r3, #158	@ 0x9e
 80013b6:	1a1b      	subs	r3, r3, r0
 80013b8:	2b96      	cmp	r3, #150	@ 0x96
 80013ba:	dc0f      	bgt.n	80013dc <__aeabi_i2f+0x3c>
 80013bc:	2808      	cmp	r0, #8
 80013be:	d038      	beq.n	8001432 <__aeabi_i2f+0x92>
 80013c0:	3808      	subs	r0, #8
 80013c2:	4085      	lsls	r5, r0
 80013c4:	026d      	lsls	r5, r5, #9
 80013c6:	0a6d      	lsrs	r5, r5, #9
 80013c8:	b2d8      	uxtb	r0, r3
 80013ca:	e002      	b.n	80013d2 <__aeabi_i2f+0x32>
 80013cc:	2400      	movs	r4, #0
 80013ce:	2000      	movs	r0, #0
 80013d0:	2500      	movs	r5, #0
 80013d2:	05c0      	lsls	r0, r0, #23
 80013d4:	4328      	orrs	r0, r5
 80013d6:	07e4      	lsls	r4, r4, #31
 80013d8:	4320      	orrs	r0, r4
 80013da:	bd70      	pop	{r4, r5, r6, pc}
 80013dc:	2b99      	cmp	r3, #153	@ 0x99
 80013de:	dc14      	bgt.n	800140a <__aeabi_i2f+0x6a>
 80013e0:	1f42      	subs	r2, r0, #5
 80013e2:	4095      	lsls	r5, r2
 80013e4:	002a      	movs	r2, r5
 80013e6:	4915      	ldr	r1, [pc, #84]	@ (800143c <__aeabi_i2f+0x9c>)
 80013e8:	4011      	ands	r1, r2
 80013ea:	0755      	lsls	r5, r2, #29
 80013ec:	d01c      	beq.n	8001428 <__aeabi_i2f+0x88>
 80013ee:	250f      	movs	r5, #15
 80013f0:	402a      	ands	r2, r5
 80013f2:	2a04      	cmp	r2, #4
 80013f4:	d018      	beq.n	8001428 <__aeabi_i2f+0x88>
 80013f6:	3104      	adds	r1, #4
 80013f8:	08ca      	lsrs	r2, r1, #3
 80013fa:	0149      	lsls	r1, r1, #5
 80013fc:	d515      	bpl.n	800142a <__aeabi_i2f+0x8a>
 80013fe:	239f      	movs	r3, #159	@ 0x9f
 8001400:	0252      	lsls	r2, r2, #9
 8001402:	1a18      	subs	r0, r3, r0
 8001404:	0a55      	lsrs	r5, r2, #9
 8001406:	b2c0      	uxtb	r0, r0
 8001408:	e7e3      	b.n	80013d2 <__aeabi_i2f+0x32>
 800140a:	2205      	movs	r2, #5
 800140c:	0029      	movs	r1, r5
 800140e:	1a12      	subs	r2, r2, r0
 8001410:	40d1      	lsrs	r1, r2
 8001412:	0002      	movs	r2, r0
 8001414:	321b      	adds	r2, #27
 8001416:	4095      	lsls	r5, r2
 8001418:	002a      	movs	r2, r5
 800141a:	1e55      	subs	r5, r2, #1
 800141c:	41aa      	sbcs	r2, r5
 800141e:	430a      	orrs	r2, r1
 8001420:	4906      	ldr	r1, [pc, #24]	@ (800143c <__aeabi_i2f+0x9c>)
 8001422:	4011      	ands	r1, r2
 8001424:	0755      	lsls	r5, r2, #29
 8001426:	d1e2      	bne.n	80013ee <__aeabi_i2f+0x4e>
 8001428:	08ca      	lsrs	r2, r1, #3
 800142a:	0252      	lsls	r2, r2, #9
 800142c:	0a55      	lsrs	r5, r2, #9
 800142e:	b2d8      	uxtb	r0, r3
 8001430:	e7cf      	b.n	80013d2 <__aeabi_i2f+0x32>
 8001432:	026d      	lsls	r5, r5, #9
 8001434:	0a6d      	lsrs	r5, r5, #9
 8001436:	308e      	adds	r0, #142	@ 0x8e
 8001438:	e7cb      	b.n	80013d2 <__aeabi_i2f+0x32>
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	fbffffff 	.word	0xfbffffff

08001440 <__clzsi2>:
 8001440:	211c      	movs	r1, #28
 8001442:	2301      	movs	r3, #1
 8001444:	041b      	lsls	r3, r3, #16
 8001446:	4298      	cmp	r0, r3
 8001448:	d301      	bcc.n	800144e <__clzsi2+0xe>
 800144a:	0c00      	lsrs	r0, r0, #16
 800144c:	3910      	subs	r1, #16
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	4298      	cmp	r0, r3
 8001452:	d301      	bcc.n	8001458 <__clzsi2+0x18>
 8001454:	0a00      	lsrs	r0, r0, #8
 8001456:	3908      	subs	r1, #8
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	4298      	cmp	r0, r3
 800145c:	d301      	bcc.n	8001462 <__clzsi2+0x22>
 800145e:	0900      	lsrs	r0, r0, #4
 8001460:	3904      	subs	r1, #4
 8001462:	a202      	add	r2, pc, #8	@ (adr r2, 800146c <__clzsi2+0x2c>)
 8001464:	5c10      	ldrb	r0, [r2, r0]
 8001466:	1840      	adds	r0, r0, r1
 8001468:	4770      	bx	lr
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	02020304 	.word	0x02020304
 8001470:	01010101 	.word	0x01010101
	...

0800147c <bma400_init>:
/************************************************************************************/
/*********************** User function definitions **********************************/
/************************************************************************************/

int8_t bma400_init(struct bma400_dev *dev)
{
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001484:	260e      	movs	r6, #14
 8001486:	19bb      	adds	r3, r7, r6
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800148c:	250f      	movs	r5, #15
 800148e:	197c      	adds	r4, r7, r5
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	0018      	movs	r0, r3
 8001494:	f000 fc44 	bl	8001d20 <null_ptr_check>
 8001498:	0003      	movs	r3, r0
 800149a:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 800149c:	002c      	movs	r4, r5
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d13c      	bne.n	8001522 <bma400_init+0xa6>
    {
        /* Initial power-up time */
        dev->delay_us(5000, dev->intf_ptr);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695a      	ldr	r2, [r3, #20]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4820      	ldr	r0, [pc, #128]	@ (8001534 <bma400_init+0xb8>)
 80014b2:	0019      	movs	r1, r3
 80014b4:	4790      	blx	r2

        /* Assigning dummy byte value */
        if (dev->intf == BMA400_SPI_INTF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	785b      	ldrb	r3, [r3, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <bma400_init+0x5c>
        {
            /* Dummy Byte availability */
            dev->dummy_byte = 1;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	721a      	strb	r2, [r3, #8]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 80014c4:	193c      	adds	r4, r7, r4
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	19b9      	adds	r1, r7, r6
 80014ca:	2201      	movs	r2, #1
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 f8b1 	bl	8001634 <bma400_get_regs>
 80014d2:	0003      	movs	r3, r0
 80014d4:	7023      	strb	r3, [r4, #0]
 80014d6:	e002      	b.n	80014de <bma400_init+0x62>
        }
        else
        {
            dev->dummy_byte = 0;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	721a      	strb	r2, [r3, #8]
        }

        if (rslt == BMA400_OK)
 80014de:	250f      	movs	r5, #15
 80014e0:	197b      	adds	r3, r7, r5
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d11b      	bne.n	8001522 <bma400_init+0xa6>
        {
            /* Chip ID of the sensor is read */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 80014ea:	197c      	adds	r4, r7, r5
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	260e      	movs	r6, #14
 80014f0:	19b9      	adds	r1, r7, r6
 80014f2:	2201      	movs	r2, #1
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f89d 	bl	8001634 <bma400_get_regs>
 80014fa:	0003      	movs	r3, r0
 80014fc:	7023      	strb	r3, [r4, #0]

            /* Proceed if everything is fine until now */
            if (rslt == BMA400_OK)
 80014fe:	197b      	adds	r3, r7, r5
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b25b      	sxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10c      	bne.n	8001522 <bma400_init+0xa6>
            {
                /* Check for chip id validity */
                if (chip_id == BMA400_CHIP_ID)
 8001508:	19bb      	adds	r3, r7, r6
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b90      	cmp	r3, #144	@ 0x90
 800150e:	d104      	bne.n	800151a <bma400_init+0x9e>
                {
                    /* Store the chip ID in dev structure */
                    dev->chip_id = chip_id;
 8001510:	19bb      	adds	r3, r7, r6
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	e003      	b.n	8001522 <bma400_init+0xa6>
                }
                else
                {
                    rslt = BMA400_E_DEV_NOT_FOUND;
 800151a:	230f      	movs	r3, #15
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	22fd      	movs	r2, #253	@ 0xfd
 8001520:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    return rslt;
 8001522:	230f      	movs	r3, #15
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b25b      	sxtb	r3, r3
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b005      	add	sp, #20
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	00001388 	.word	0x00001388

08001538 <bma400_set_regs>:

int8_t bma400_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	230f      	movs	r3, #15
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	1c02      	adds	r2, r0, #0
 800154a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t count;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800154c:	2617      	movs	r6, #23
 800154e:	19bc      	adds	r4, r7, r6
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	0018      	movs	r0, r3
 8001554:	f000 fbe4 	bl	8001d20 <null_ptr_check>
 8001558:	0003      	movs	r3, r0
 800155a:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 800155c:	19bb      	adds	r3, r7, r6
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d158      	bne.n	8001618 <bma400_set_regs+0xe0>
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d055      	beq.n	8001618 <bma400_set_regs+0xe0>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        if (len == 1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d116      	bne.n	80015a0 <bma400_set_regs+0x68>
        {
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691c      	ldr	r4, [r3, #16]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685d      	ldr	r5, [r3, #4]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	230f      	movs	r3, #15
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	7818      	ldrb	r0, [r3, #0]
 8001584:	002b      	movs	r3, r5
 8001586:	47a0      	blx	r4
 8001588:	0003      	movs	r3, r0
 800158a:	001a      	movs	r2, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	771a      	strb	r2, [r3, #28]
            if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	7f1b      	ldrb	r3, [r3, #28]
 8001594:	b25b      	sxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <bma400_set_regs+0x68>
            {
                /* Failure case */
                rslt = BMA400_E_COM_FAIL;
 800159a:	19bb      	adds	r3, r7, r6
 800159c:	22fe      	movs	r2, #254	@ 0xfe
 800159e:	701a      	strb	r2, [r3, #0]

        /* Burst write is not allowed thus we split burst case write
         * into single byte writes Thus user can write multiple bytes
         * with ease
         */
        if (len > 1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d93d      	bls.n	8001622 <bma400_set_regs+0xea>
        {
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 80015a6:	2316      	movs	r3, #22
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	e026      	b.n	80015fe <bma400_set_regs+0xc6>
            {
                dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	691c      	ldr	r4, [r3, #16]
 80015b4:	2316      	movs	r3, #22
 80015b6:	18fb      	adds	r3, r7, r3
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	18d1      	adds	r1, r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	250f      	movs	r5, #15
 80015c4:	197b      	adds	r3, r7, r5
 80015c6:	7818      	ldrb	r0, [r3, #0]
 80015c8:	0013      	movs	r3, r2
 80015ca:	2201      	movs	r2, #1
 80015cc:	47a0      	blx	r4
 80015ce:	0003      	movs	r3, r0
 80015d0:	001a      	movs	r2, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	771a      	strb	r2, [r3, #28]
                reg_addr++;
 80015d6:	197b      	adds	r3, r7, r5
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	197b      	adds	r3, r7, r5
 80015dc:	3201      	adds	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
                if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	7f1b      	ldrb	r3, [r3, #28]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <bma400_set_regs+0xba>
                {
                    /* Failure case */
                    rslt = BMA400_E_COM_FAIL;
 80015ea:	2317      	movs	r3, #23
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	22fe      	movs	r2, #254	@ 0xfe
 80015f0:	701a      	strb	r2, [r3, #0]
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 80015f2:	2116      	movs	r1, #22
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	781a      	ldrb	r2, [r3, #0]
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	3201      	adds	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	2316      	movs	r3, #22
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	d90b      	bls.n	8001622 <bma400_set_regs+0xea>
 800160a:	2317      	movs	r3, #23
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b25b      	sxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0cc      	beq.n	80015b0 <bma400_set_regs+0x78>
        if (len > 1)
 8001616:	e004      	b.n	8001622 <bma400_set_regs+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001618:	2317      	movs	r3, #23
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	22ff      	movs	r2, #255	@ 0xff
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	e000      	b.n	8001624 <bma400_set_regs+0xec>
        if (len > 1)
 8001622:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 8001624:	2317      	movs	r3, #23
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	b25b      	sxtb	r3, r3
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b007      	add	sp, #28
 8001632:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001634 <bma400_get_regs>:

int8_t bma400_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	b0a7      	sub	sp, #156	@ 0x9c
 8001638:	af00      	add	r7, sp, #0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	250f      	movs	r5, #15
 8001642:	197b      	adds	r3, r7, r5
 8001644:	1c02      	adds	r2, r0, #0
 8001646:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t index;
    uint8_t temp_buff[BMA400_MAX_LEN];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001648:	2697      	movs	r6, #151	@ 0x97
 800164a:	19bc      	adds	r4, r7, r6
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	0018      	movs	r0, r3
 8001650:	f000 fb66 	bl	8001d20 <null_ptr_check>
 8001654:	0003      	movs	r3, r0
 8001656:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8001658:	19bb      	adds	r3, r7, r6
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b25b      	sxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d14a      	bne.n	80016f8 <bma400_get_regs+0xc4>
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d047      	beq.n	80016f8 <bma400_get_regs+0xc4>
    {
        if (dev->intf != BMA400_I2C_INTF)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	785b      	ldrb	r3, [r3, #1]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d006      	beq.n	800167e <bma400_get_regs+0x4a>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 8001670:	197b      	adds	r3, r7, r5
 8001672:	197a      	adds	r2, r7, r5
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	2180      	movs	r1, #128	@ 0x80
 8001678:	4249      	negs	r1, r1
 800167a:	430a      	orrs	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	68dc      	ldr	r4, [r3, #12]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	7a1b      	ldrb	r3, [r3, #8]
 8001686:	001a      	movs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	18d2      	adds	r2, r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685d      	ldr	r5, [r3, #4]
 8001690:	2314      	movs	r3, #20
 8001692:	18f9      	adds	r1, r7, r3
 8001694:	230f      	movs	r3, #15
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	7818      	ldrb	r0, [r3, #0]
 800169a:	002b      	movs	r3, r5
 800169c:	47a0      	blx	r4
 800169e:	0003      	movs	r3, r0
 80016a0:	001a      	movs	r2, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	771a      	strb	r2, [r3, #28]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	7f1b      	ldrb	r3, [r3, #28]
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d11e      	bne.n	80016ee <bma400_get_regs+0xba>
        {
            for (index = 0; index < len; index++)
 80016b0:	2394      	movs	r3, #148	@ 0x94
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	801a      	strh	r2, [r3, #0]
 80016b8:	e012      	b.n	80016e0 <bma400_get_regs+0xac>
            {
                /* Parse the data read and store in "reg_data"
                 * buffer so that the dummy byte is removed
                 * and user will get only valid data
                 */
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 80016ba:	2094      	movs	r0, #148	@ 0x94
 80016bc:	183b      	adds	r3, r7, r0
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	7a12      	ldrb	r2, [r2, #8]
 80016c4:	189a      	adds	r2, r3, r2
 80016c6:	183b      	adds	r3, r7, r0
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	18cb      	adds	r3, r1, r3
 80016ce:	2114      	movs	r1, #20
 80016d0:	1879      	adds	r1, r7, r1
 80016d2:	5c8a      	ldrb	r2, [r1, r2]
 80016d4:	701a      	strb	r2, [r3, #0]
            for (index = 0; index < len; index++)
 80016d6:	183b      	adds	r3, r7, r0
 80016d8:	881a      	ldrh	r2, [r3, #0]
 80016da:	183b      	adds	r3, r7, r0
 80016dc:	3201      	adds	r2, #1
 80016de:	801a      	strh	r2, [r3, #0]
 80016e0:	2394      	movs	r3, #148	@ 0x94
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d8e6      	bhi.n	80016ba <bma400_get_regs+0x86>
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 80016ec:	e008      	b.n	8001700 <bma400_get_regs+0xcc>
            }
        }
        else
        {
            /* Failure case */
            rslt = BMA400_E_COM_FAIL;
 80016ee:	2397      	movs	r3, #151	@ 0x97
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	22fe      	movs	r2, #254	@ 0xfe
 80016f4:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 80016f6:	e003      	b.n	8001700 <bma400_get_regs+0xcc>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 80016f8:	2397      	movs	r3, #151	@ 0x97
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	22ff      	movs	r2, #255	@ 0xff
 80016fe:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001700:	2397      	movs	r3, #151	@ 0x97
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b25b      	sxtb	r3, r3
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b027      	add	sp, #156	@ 0x9c
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001710 <bma400_set_power_mode>:

    return rslt;
}

int8_t bma400_set_power_mode(uint8_t power_mode, struct bma400_dev *dev)
{
 8001710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	0002      	movs	r2, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data = 0;
 800171e:	260e      	movs	r6, #14
 8001720:	19bb      	adds	r3, r7, r6
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]

    rslt = null_ptr_check(dev);
 8001726:	250f      	movs	r5, #15
 8001728:	197c      	adds	r4, r7, r5
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	0018      	movs	r0, r3
 800172e:	f000 faf7 	bl	8001d20 <null_ptr_check>
 8001732:	0003      	movs	r3, r0
 8001734:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8001736:	197b      	adds	r3, r7, r5
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	b25b      	sxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d108      	bne.n	8001752 <bma400_set_power_mode+0x42>
    {
        rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 8001740:	197c      	adds	r4, r7, r5
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	19b9      	adds	r1, r7, r6
 8001746:	2201      	movs	r2, #1
 8001748:	2019      	movs	r0, #25
 800174a:	f7ff ff73 	bl	8001634 <bma400_get_regs>
 800174e:	0003      	movs	r3, r0
 8001750:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BMA400_OK)
 8001752:	240f      	movs	r4, #15
 8001754:	193b      	adds	r3, r7, r4
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b25b      	sxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d12d      	bne.n	80017ba <bma400_set_power_mode+0xaa>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 800175e:	200e      	movs	r0, #14
 8001760:	183b      	adds	r3, r7, r0
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b25b      	sxtb	r3, r3
 8001766:	2203      	movs	r2, #3
 8001768:	4393      	bics	r3, r2
 800176a:	b25a      	sxtb	r2, r3
 800176c:	1dfb      	adds	r3, r7, #7
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b25b      	sxtb	r3, r3
 8001772:	2103      	movs	r1, #3
 8001774:	400b      	ands	r3, r1
 8001776:	b25b      	sxtb	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b25b      	sxtb	r3, r3
 800177c:	b2da      	uxtb	r2, r3
 800177e:	183b      	adds	r3, r7, r0
 8001780:	701a      	strb	r2, [r3, #0]

        /* Set the power mode of sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 8001782:	193c      	adds	r4, r7, r4
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	1839      	adds	r1, r7, r0
 8001788:	2201      	movs	r2, #1
 800178a:	2019      	movs	r0, #25
 800178c:	f7ff fed4 	bl	8001538 <bma400_set_regs>
 8001790:	0003      	movs	r3, r0
 8001792:	7023      	strb	r3, [r4, #0]
        if (power_mode == BMA400_MODE_LOW_POWER)
 8001794:	1dfb      	adds	r3, r7, #7
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d107      	bne.n	80017ac <bma400_set_power_mode+0x9c>
        {
            /* A delay of 1/ODR is required to switch power modes
             * Low power mode has 25Hz frequency and hence it needs
             * 40ms delay to enter low power mode
             */
            dev->delay_us(40000, dev->intf_ptr);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4809      	ldr	r0, [pc, #36]	@ (80017cc <bma400_set_power_mode+0xbc>)
 80017a6:	0019      	movs	r1, r3
 80017a8:	4790      	blx	r2
 80017aa:	e006      	b.n	80017ba <bma400_set_power_mode+0xaa>
        }
        else
        {
            dev->delay_us(10000, dev->intf_ptr); /* TBC */
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4806      	ldr	r0, [pc, #24]	@ (80017d0 <bma400_set_power_mode+0xc0>)
 80017b6:	0019      	movs	r1, r3
 80017b8:	4790      	blx	r2
        }
    }

    return rslt;
 80017ba:	230f      	movs	r3, #15
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b25b      	sxtb	r3, r3
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b005      	add	sp, #20
 80017c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ca:	46c0      	nop			@ (mov r8, r8)
 80017cc:	00009c40 	.word	0x00009c40
 80017d0:	00002710 	.word	0x00002710

080017d4 <bma400_set_sensor_conf>:

    return rslt;
}

int8_t bma400_set_sensor_conf(const struct bma400_sensor_conf *conf, uint16_t n_sett, struct bma400_dev *dev)
{
 80017d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	230a      	movs	r3, #10
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	1c0a      	adds	r2, r1, #0
 80017e4:	801a      	strh	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx = 0;
 80017e6:	2614      	movs	r6, #20
 80017e8:	19bb      	adds	r3, r7, r6
 80017ea:	2200      	movs	r2, #0
 80017ec:	801a      	strh	r2, [r3, #0]
    uint8_t data_array[3] = { 0 };
 80017ee:	2310      	movs	r3, #16
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	0018      	movs	r0, r3
 80017f4:	2303      	movs	r3, #3
 80017f6:	001a      	movs	r2, r3
 80017f8:	2100      	movs	r1, #0
 80017fa:	f005 fc33 	bl	8007064 <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80017fe:	2517      	movs	r5, #23
 8001800:	197c      	adds	r4, r7, r5
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0018      	movs	r0, r3
 8001806:	f000 fa8b 	bl	8001d20 <null_ptr_check>
 800180a:	0003      	movs	r3, r0
 800180c:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (conf != NULL))
 800180e:	197b      	adds	r3, r7, r5
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b25b      	sxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14d      	bne.n	80018b4 <bma400_set_sensor_conf+0xe0>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d04a      	beq.n	80018b4 <bma400_set_sensor_conf+0xe0>
    {
        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 800181e:	197c      	adds	r4, r7, r5
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2210      	movs	r2, #16
 8001824:	18b9      	adds	r1, r7, r2
 8001826:	2203      	movs	r2, #3
 8001828:	2021      	movs	r0, #33	@ 0x21
 800182a:	f7ff ff03 	bl	8001634 <bma400_get_regs>
 800182e:	0003      	movs	r3, r0
 8001830:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8001832:	197b      	adds	r3, r7, r5
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b25b      	sxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d140      	bne.n	80018be <bma400_set_sensor_conf+0xea>
        {
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 800183c:	19bb      	adds	r3, r7, r6
 800183e:	2200      	movs	r2, #0
 8001840:	801a      	strh	r2, [r3, #0]
 8001842:	e018      	b.n	8001876 <bma400_set_sensor_conf+0xa2>
            {
                rslt = set_sensor_conf(data_array, conf + idx, dev);
 8001844:	2514      	movs	r5, #20
 8001846:	197b      	adds	r3, r7, r5
 8001848:	881a      	ldrh	r2, [r3, #0]
 800184a:	0013      	movs	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	189b      	adds	r3, r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	001a      	movs	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1899      	adds	r1, r3, r2
 8001858:	2317      	movs	r3, #23
 800185a:	18fc      	adds	r4, r7, r3
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	2310      	movs	r3, #16
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	0018      	movs	r0, r3
 8001864:	f000 fa80 	bl	8001d68 <set_sensor_conf>
 8001868:	0003      	movs	r3, r0
 800186a:	7023      	strb	r3, [r4, #0]
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 800186c:	197b      	adds	r3, r7, r5
 800186e:	881a      	ldrh	r2, [r3, #0]
 8001870:	197b      	adds	r3, r7, r5
 8001872:	3201      	adds	r2, #1
 8001874:	801a      	strh	r2, [r3, #0]
 8001876:	2314      	movs	r3, #20
 8001878:	18fa      	adds	r2, r7, r3
 800187a:	230a      	movs	r3, #10
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	8812      	ldrh	r2, [r2, #0]
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d205      	bcs.n	8001892 <bma400_set_sensor_conf+0xbe>
 8001886:	2317      	movs	r3, #23
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b25b      	sxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0d8      	beq.n	8001844 <bma400_set_sensor_conf+0x70>
            }

            if (rslt == BMA400_OK)
 8001892:	2217      	movs	r2, #23
 8001894:	18bb      	adds	r3, r7, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b25b      	sxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <bma400_set_sensor_conf+0xea>
            {
                /* Set the interrupt pin mapping configurations */
                rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 800189e:	18bc      	adds	r4, r7, r2
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2210      	movs	r2, #16
 80018a4:	18b9      	adds	r1, r7, r2
 80018a6:	2203      	movs	r2, #3
 80018a8:	2021      	movs	r0, #33	@ 0x21
 80018aa:	f7ff fe45 	bl	8001538 <bma400_set_regs>
 80018ae:	0003      	movs	r3, r0
 80018b0:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 80018b2:	e004      	b.n	80018be <bma400_set_sensor_conf+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 80018b4:	2317      	movs	r3, #23
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	22ff      	movs	r2, #255	@ 0xff
 80018ba:	701a      	strb	r2, [r3, #0]
 80018bc:	e000      	b.n	80018c0 <bma400_set_sensor_conf+0xec>
        if (rslt == BMA400_OK)
 80018be:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 80018c0:	2317      	movs	r3, #23
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b25b      	sxtb	r3, r3
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b007      	add	sp, #28
 80018ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018d0 <bma400_set_device_conf>:

    return rslt;
}

int8_t bma400_set_device_conf(const struct bma400_device_conf *conf, uint8_t n_sett, struct bma400_dev *dev)
{
 80018d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	230b      	movs	r3, #11
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	1c0a      	adds	r2, r1, #0
 80018e0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx;
    uint8_t data_array[3] = { 0 };
 80018e2:	2610      	movs	r6, #16
 80018e4:	19bb      	adds	r3, r7, r6
 80018e6:	0018      	movs	r0, r3
 80018e8:	2303      	movs	r3, #3
 80018ea:	001a      	movs	r2, r3
 80018ec:	2100      	movs	r1, #0
 80018ee:	f005 fbb9 	bl	8007064 <memset>

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80018f2:	2517      	movs	r5, #23
 80018f4:	197c      	adds	r4, r7, r5
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f000 fa11 	bl	8001d20 <null_ptr_check>
 80018fe:	0003      	movs	r3, r0
 8001900:	7023      	strb	r3, [r4, #0]

    if ((rslt == BMA400_OK) && (conf != NULL))
 8001902:	197b      	adds	r3, r7, r5
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b25b      	sxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d000      	beq.n	800190e <bma400_set_device_conf+0x3e>
 800190c:	e10e      	b.n	8001b2c <bma400_set_device_conf+0x25c>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d100      	bne.n	8001916 <bma400_set_device_conf+0x46>
 8001914:	e10a      	b.n	8001b2c <bma400_set_device_conf+0x25c>
    {

        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8001916:	197c      	adds	r4, r7, r5
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	19b9      	adds	r1, r7, r6
 800191c:	2203      	movs	r2, #3
 800191e:	2021      	movs	r0, #33	@ 0x21
 8001920:	f7ff fe88 	bl	8001634 <bma400_get_regs>
 8001924:	0003      	movs	r3, r0
 8001926:	7023      	strb	r3, [r4, #0]

        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8001928:	2314      	movs	r3, #20
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	2200      	movs	r2, #0
 800192e:	801a      	strh	r2, [r3, #0]
 8001930:	e0db      	b.n	8001aea <bma400_set_device_conf+0x21a>
        {
            switch (conf[idx].type)
 8001932:	2314      	movs	r3, #20
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	881a      	ldrh	r2, [r3, #0]
 8001938:	0013      	movs	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	189b      	adds	r3, r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	001a      	movs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	189b      	adds	r3, r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b05      	cmp	r3, #5
 800194a:	d900      	bls.n	800194e <bma400_set_device_conf+0x7e>
 800194c:	e0bf      	b.n	8001ace <bma400_set_device_conf+0x1fe>
 800194e:	009a      	lsls	r2, r3, #2
 8001950:	4b7c      	ldr	r3, [pc, #496]	@ (8001b44 <bma400_set_device_conf+0x274>)
 8001952:	18d3      	adds	r3, r2, r3
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	469f      	mov	pc, r3
            {
                case BMA400_AUTOWAKEUP_TIMEOUT:
                    rslt = set_autowakeup_timeout(&conf[idx].param.auto_wakeup, dev);
 8001958:	2314      	movs	r3, #20
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	881a      	ldrh	r2, [r3, #0]
 800195e:	0013      	movs	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	189b      	adds	r3, r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	001a      	movs	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	189b      	adds	r3, r3, r2
 800196c:	3302      	adds	r3, #2
 800196e:	2217      	movs	r2, #23
 8001970:	18bc      	adds	r4, r7, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	0011      	movs	r1, r2
 8001976:	0018      	movs	r0, r3
 8001978:	f000 fb58 	bl	800202c <set_autowakeup_timeout>
 800197c:	0003      	movs	r3, r0
 800197e:	7023      	strb	r3, [r4, #0]
                    break;
 8001980:	e0ad      	b.n	8001ade <bma400_set_device_conf+0x20e>
                case BMA400_AUTOWAKEUP_INT:
                    rslt = set_autowakeup_interrupt(&conf[idx].param.wakeup, dev);
 8001982:	2514      	movs	r5, #20
 8001984:	197b      	adds	r3, r7, r5
 8001986:	881a      	ldrh	r2, [r3, #0]
 8001988:	0013      	movs	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	189b      	adds	r3, r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	001a      	movs	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	189b      	adds	r3, r3, r2
 8001996:	3302      	adds	r3, #2
 8001998:	2617      	movs	r6, #23
 800199a:	19bc      	adds	r4, r7, r6
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	0011      	movs	r1, r2
 80019a0:	0018      	movs	r0, r3
 80019a2:	f000 fbdf 	bl	8002164 <set_autowakeup_interrupt>
 80019a6:	0003      	movs	r3, r0
 80019a8:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 80019aa:	19bb      	adds	r3, r7, r6
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d000      	beq.n	80019b6 <bma400_set_device_conf+0xe6>
 80019b4:	e090      	b.n	8001ad8 <bma400_set_device_conf+0x208>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_WAKEUP_INT_MAP, conf[idx].param.wakeup.int_chan);
 80019b6:	197b      	adds	r3, r7, r5
 80019b8:	881a      	ldrh	r2, [r3, #0]
 80019ba:	0013      	movs	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	189b      	adds	r3, r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	001a      	movs	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	189b      	adds	r3, r3, r2
 80019c8:	7a5a      	ldrb	r2, [r3, #9]
 80019ca:	2310      	movs	r3, #16
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	2107      	movs	r1, #7
 80019d0:	0018      	movs	r0, r3
 80019d2:	f000 ffb9 	bl	8002948 <map_int_pin>
                    }

                    break;
 80019d6:	e07f      	b.n	8001ad8 <bma400_set_device_conf+0x208>
                case BMA400_AUTO_LOW_POWER:
                    rslt = set_auto_low_power(&conf[idx].param.auto_lp, dev);
 80019d8:	2314      	movs	r3, #20
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	881a      	ldrh	r2, [r3, #0]
 80019de:	0013      	movs	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	189b      	adds	r3, r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	001a      	movs	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	189b      	adds	r3, r3, r2
 80019ec:	3302      	adds	r3, #2
 80019ee:	2217      	movs	r2, #23
 80019f0:	18bc      	adds	r4, r7, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	0011      	movs	r1, r2
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 fc18 	bl	800222c <set_auto_low_power>
 80019fc:	0003      	movs	r3, r0
 80019fe:	7023      	strb	r3, [r4, #0]
                    break;
 8001a00:	e06d      	b.n	8001ade <bma400_set_device_conf+0x20e>
                case BMA400_INT_PIN_CONF:
                    rslt = set_int_pin_conf(conf[idx].param.int_conf, dev);
 8001a02:	2314      	movs	r3, #20
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	881a      	ldrh	r2, [r3, #0]
 8001a08:	0013      	movs	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	189b      	adds	r3, r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	001a      	movs	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	189b      	adds	r3, r3, r2
 8001a16:	2217      	movs	r2, #23
 8001a18:	18bc      	adds	r4, r7, r2
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	5a9a      	ldrh	r2, [r3, r2]
 8001a20:	2300      	movs	r3, #0
 8001a22:	0412      	lsls	r2, r2, #16
 8001a24:	0c12      	lsrs	r2, r2, #16
 8001a26:	0c1b      	lsrs	r3, r3, #16
 8001a28:	041b      	lsls	r3, r3, #16
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f001 faab 	bl	8002f88 <set_int_pin_conf>
 8001a32:	0003      	movs	r3, r0
 8001a34:	7023      	strb	r3, [r4, #0]
                    break;
 8001a36:	e052      	b.n	8001ade <bma400_set_device_conf+0x20e>
                case BMA400_INT_OVERRUN_CONF:

                    /* Interrupt pin mapping */
                    map_int_pin(data_array, BMA400_INT_OVERRUN_MAP, conf[idx].param.overrun_int.int_chan);
 8001a38:	2314      	movs	r3, #20
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	881a      	ldrh	r2, [r3, #0]
 8001a3e:	0013      	movs	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	189b      	adds	r3, r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	001a      	movs	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	189b      	adds	r3, r3, r2
 8001a4c:	789a      	ldrb	r2, [r3, #2]
 8001a4e:	2310      	movs	r3, #16
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	210b      	movs	r1, #11
 8001a54:	0018      	movs	r0, r3
 8001a56:	f000 ff77 	bl	8002948 <map_int_pin>
                    break;
 8001a5a:	e040      	b.n	8001ade <bma400_set_device_conf+0x20e>
                case BMA400_FIFO_CONF:
                    rslt = set_fifo_conf(&conf[idx].param.fifo_conf, dev);
 8001a5c:	2514      	movs	r5, #20
 8001a5e:	197b      	adds	r3, r7, r5
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	0013      	movs	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	189b      	adds	r3, r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	189b      	adds	r3, r3, r2
 8001a70:	3302      	adds	r3, #2
 8001a72:	2617      	movs	r6, #23
 8001a74:	19bc      	adds	r4, r7, r6
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	0011      	movs	r1, r2
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f001 fadd 	bl	800303a <set_fifo_conf>
 8001a80:	0003      	movs	r3, r0
 8001a82:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 8001a84:	19bb      	adds	r3, r7, r6
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d126      	bne.n	8001adc <bma400_set_device_conf+0x20c>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_FIFO_WM_INT_MAP, conf[idx].param.fifo_conf.fifo_wm_channel);
 8001a8e:	197b      	adds	r3, r7, r5
 8001a90:	881a      	ldrh	r2, [r3, #0]
 8001a92:	0013      	movs	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	189b      	adds	r3, r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	189b      	adds	r3, r3, r2
 8001aa0:	79da      	ldrb	r2, [r3, #7]
 8001aa2:	2410      	movs	r4, #16
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 ff4d 	bl	8002948 <map_int_pin>
                        map_int_pin(data_array, BMA400_FIFO_FULL_INT_MAP, conf[idx].param.fifo_conf.fifo_full_channel);
 8001aae:	197b      	adds	r3, r7, r5
 8001ab0:	881a      	ldrh	r2, [r3, #0]
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	189b      	adds	r3, r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	001a      	movs	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	189b      	adds	r3, r3, r2
 8001ac0:	799a      	ldrb	r2, [r3, #6]
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	2103      	movs	r1, #3
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 ff3e 	bl	8002948 <map_int_pin>
                    }

                    break;
 8001acc:	e006      	b.n	8001adc <bma400_set_device_conf+0x20c>
                default:
                    rslt = BMA400_E_INVALID_CONFIG;
 8001ace:	2317      	movs	r3, #23
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	22fc      	movs	r2, #252	@ 0xfc
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	e002      	b.n	8001ade <bma400_set_device_conf+0x20e>
                    break;
 8001ad8:	46c0      	nop			@ (mov r8, r8)
 8001ada:	e000      	b.n	8001ade <bma400_set_device_conf+0x20e>
                    break;
 8001adc:	46c0      	nop			@ (mov r8, r8)
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8001ade:	2114      	movs	r1, #20
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	881a      	ldrh	r2, [r3, #0]
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	3201      	adds	r2, #1
 8001ae8:	801a      	strh	r2, [r3, #0]
 8001aea:	230b      	movs	r3, #11
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2214      	movs	r2, #20
 8001af4:	18ba      	adds	r2, r7, r2
 8001af6:	8812      	ldrh	r2, [r2, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d206      	bcs.n	8001b0a <bma400_set_device_conf+0x23a>
 8001afc:	2317      	movs	r3, #23
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b25b      	sxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d100      	bne.n	8001b0a <bma400_set_device_conf+0x23a>
 8001b08:	e713      	b.n	8001932 <bma400_set_device_conf+0x62>
            }
        }

        if (rslt == BMA400_OK)
 8001b0a:	2217      	movs	r2, #23
 8001b0c:	18bb      	adds	r3, r7, r2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10e      	bne.n	8001b34 <bma400_set_device_conf+0x264>
        {
            /* Set the interrupt pin mapping configurations */
            rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8001b16:	18bc      	adds	r4, r7, r2
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2210      	movs	r2, #16
 8001b1c:	18b9      	adds	r1, r7, r2
 8001b1e:	2203      	movs	r2, #3
 8001b20:	2021      	movs	r0, #33	@ 0x21
 8001b22:	f7ff fd09 	bl	8001538 <bma400_set_regs>
 8001b26:	0003      	movs	r3, r0
 8001b28:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8001b2a:	e003      	b.n	8001b34 <bma400_set_device_conf+0x264>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001b2c:	2317      	movs	r3, #23
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	22ff      	movs	r2, #255	@ 0xff
 8001b32:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001b34:	2317      	movs	r3, #23
 8001b36:	18fb      	adds	r3, r7, r3
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b25b      	sxtb	r3, r3
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b007      	add	sp, #28
 8001b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b44:	08007b14 	.word	0x08007b14

08001b48 <bma400_get_fifo_data>:

    return rslt;
}

int8_t bma400_get_fifo_data(struct bma400_fifo_data *fifo, struct bma400_dev *dev)
{
 8001b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint16_t fifo_byte_cnt = 0;
 8001b52:	2608      	movs	r6, #8
 8001b54:	19bb      	adds	r3, r7, r6
 8001b56:	2200      	movs	r2, #0
 8001b58:	801a      	strh	r2, [r3, #0]
    uint16_t user_fifo_len = 0;
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	2200      	movs	r2, #0
 8001b60:	801a      	strh	r2, [r3, #0]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001b62:	250f      	movs	r5, #15
 8001b64:	197c      	adds	r4, r7, r5
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f000 f8d9 	bl	8001d20 <null_ptr_check>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (fifo != NULL))
 8001b72:	197b      	adds	r3, r7, r5
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d000      	beq.n	8001b7e <bma400_get_fifo_data+0x36>
 8001b7c:	e06c      	b.n	8001c58 <bma400_get_fifo_data+0x110>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d069      	beq.n	8001c58 <bma400_get_fifo_data+0x110>
    {
        /* Resetting the FIFO data byte index */
        fifo->accel_byte_start_idx = 0;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	815a      	strh	r2, [r3, #10]

        /* Reading the FIFO length */
        rslt = get_fifo_length(&fifo_byte_cnt, dev);
 8001b8a:	197c      	adds	r4, r7, r5
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	19bb      	adds	r3, r7, r6
 8001b90:	0011      	movs	r1, r2
 8001b92:	0018      	movs	r0, r3
 8001b94:	f001 fac7 	bl	8003126 <get_fifo_length>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8001b9c:	197b      	adds	r3, r7, r5
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d15d      	bne.n	8001c62 <bma400_get_fifo_data+0x11a>
        {
            /* Get the FIFO configurations
             * from the sensor */
            rslt = bma400_get_regs(BMA400_REG_FIFO_CONFIG_0, &data, 1, dev);
 8001ba6:	197c      	adds	r4, r7, r5
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	210b      	movs	r1, #11
 8001bac:	1879      	adds	r1, r7, r1
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2026      	movs	r0, #38	@ 0x26
 8001bb2:	f7ff fd3f 	bl	8001634 <bma400_get_regs>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	7023      	strb	r3, [r4, #0]
            if (rslt == BMA400_OK)
 8001bba:	197b      	adds	r3, r7, r5
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d14e      	bne.n	8001c62 <bma400_get_fifo_data+0x11a>
            {
                /* Get the data from FIFO_CONFIG0 register */
                fifo->fifo_8_bit_en = BMA400_GET_BITS(data, BMA400_FIFO_8_BIT_EN);
 8001bc4:	210b      	movs	r1, #11
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	111b      	asrs	r3, r3, #4
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	71da      	strb	r2, [r3, #7]
                fifo->fifo_data_enable = BMA400_GET_BITS(data, BMA400_FIFO_AXES_EN);
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	721a      	strb	r2, [r3, #8]
                fifo->fifo_time_enable = BMA400_GET_BITS(data, BMA400_FIFO_TIME_EN);
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	109b      	asrs	r3, r3, #2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	719a      	strb	r2, [r3, #6]
                fifo->fifo_sensor_time = 0;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
                user_fifo_len = fifo->length;
 8001bfc:	230c      	movs	r3, #12
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	8892      	ldrh	r2, [r2, #4]
 8001c04:	801a      	strh	r2, [r3, #0]
                if (fifo->length > fifo_byte_cnt)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	889a      	ldrh	r2, [r3, #4]
 8001c0a:	19bb      	adds	r3, r7, r6
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d903      	bls.n	8001c1a <bma400_get_fifo_data+0xd2>
                {
                    /* Handling case where user requests
                     * more data than available in FIFO
                     */
                    fifo->length = fifo_byte_cnt;
 8001c12:	19bb      	adds	r3, r7, r6
 8001c14:	881a      	ldrh	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	809a      	strh	r2, [r3, #4]

                /* Reading extra bytes as per the macro
                 * "BMA400_FIFO_BYTES_OVERREAD"
                 * when FIFO time is enabled
                 */
                if ((fifo->fifo_time_enable == BMA400_ENABLE) &&
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	799b      	ldrb	r3, [r3, #6]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d10f      	bne.n	8001c42 <bma400_get_fifo_data+0xfa>
                    (fifo_byte_cnt + BMA400_FIFO_BYTES_OVERREAD <= user_fifo_len))
 8001c22:	2308      	movs	r3, #8
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	3363      	adds	r3, #99	@ 0x63
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	230c      	movs	r3, #12
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	881b      	ldrh	r3, [r3, #0]
                if ((fifo->fifo_time_enable == BMA400_ENABLE) &&
 8001c32:	429a      	cmp	r2, r3
 8001c34:	da05      	bge.n	8001c42 <bma400_get_fifo_data+0xfa>
                {
                    /* Handling sensor time availability*/
                    fifo->length = fifo->length + BMA400_FIFO_BYTES_OVERREAD;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	889b      	ldrh	r3, [r3, #4]
 8001c3a:	3364      	adds	r3, #100	@ 0x64
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	809a      	strh	r2, [r3, #4]
                }

                /* Read the FIFO data */
                rslt = read_fifo(fifo, dev);
 8001c42:	230f      	movs	r3, #15
 8001c44:	18fc      	adds	r4, r7, r3
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f001 fa9e 	bl	800318e <read_fifo>
 8001c52:	0003      	movs	r3, r0
 8001c54:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8001c56:	e004      	b.n	8001c62 <bma400_get_fifo_data+0x11a>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001c58:	230f      	movs	r3, #15
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	22ff      	movs	r2, #255	@ 0xff
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	e000      	b.n	8001c64 <bma400_get_fifo_data+0x11c>
        if (rslt == BMA400_OK)
 8001c62:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 8001c64:	230f      	movs	r3, #15
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b25b      	sxtb	r3, r3
}
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b005      	add	sp, #20
 8001c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c74 <bma400_extract_accel>:

int8_t bma400_extract_accel(struct bma400_fifo_data *fifo,
                            struct bma400_fifo_sensor_data *accel_data,
                            uint16_t *frame_count,
                            const struct bma400_dev *dev)
{
 8001c74:	b5b0      	push	{r4, r5, r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001c82:	2517      	movs	r5, #23
 8001c84:	197c      	adds	r4, r7, r5
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f000 f849 	bl	8001d20 <null_ptr_check>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (fifo != NULL) && (accel_data != NULL) && (frame_count != NULL))
 8001c92:	197b      	adds	r3, r7, r5
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10f      	bne.n	8001cbc <bma400_extract_accel+0x48>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00c      	beq.n	8001cbc <bma400_extract_accel+0x48>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d009      	beq.n	8001cbc <bma400_extract_accel+0x48>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d006      	beq.n	8001cbc <bma400_extract_accel+0x48>
    {
        /* Parse the FIFO data */
        unpack_accel_frame(fifo, accel_data, frame_count, dev);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f001 faff 	bl	80032b8 <unpack_accel_frame>
 8001cba:	e003      	b.n	8001cc4 <bma400_extract_accel+0x50>
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001cbc:	2317      	movs	r3, #23
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	22ff      	movs	r2, #255	@ 0xff
 8001cc2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001cc4:	2317      	movs	r3, #23
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b25b      	sxtb	r3, r3
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b006      	add	sp, #24
 8001cd2:	bdb0      	pop	{r4, r5, r7, pc}

08001cd4 <bma400_set_fifo_flush>:

int8_t bma400_set_fifo_flush(struct bma400_dev *dev)
{
 8001cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMA400_FIFO_FLUSH_CMD;
 8001cdc:	260e      	movs	r6, #14
 8001cde:	19bb      	adds	r3, r7, r6
 8001ce0:	22b0      	movs	r2, #176	@ 0xb0
 8001ce2:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001ce4:	250f      	movs	r5, #15
 8001ce6:	197c      	adds	r4, r7, r5
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	0018      	movs	r0, r3
 8001cec:	f000 f818 	bl	8001d20 <null_ptr_check>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8001cf4:	197b      	adds	r3, r7, r5
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d108      	bne.n	8001d10 <bma400_set_fifo_flush+0x3c>
    {
        /* FIFO flush command is set */
        rslt = bma400_set_regs(BMA400_REG_COMMAND, &data, 1, dev);
 8001cfe:	197c      	adds	r4, r7, r5
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	19b9      	adds	r1, r7, r6
 8001d04:	2201      	movs	r2, #1
 8001d06:	207e      	movs	r0, #126	@ 0x7e
 8001d08:	f7ff fc16 	bl	8001538 <bma400_set_regs>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001d10:	230f      	movs	r3, #15
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b25b      	sxtb	r3, r3
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b005      	add	sp, #20
 8001d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d20 <null_ptr_check>:
/************************************************************************************/
/*********************** Static function definitions **********************************/
/************************************************************************************/

static int8_t null_ptr_check(const struct bma400_dev *dev)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->intf_ptr == NULL))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <null_ptr_check+0x26>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <null_ptr_check+0x26>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <null_ptr_check+0x26>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d104      	bne.n	8001d50 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BMA400_E_NULL_PTR;
 8001d46:	230f      	movs	r3, #15
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	22ff      	movs	r2, #255	@ 0xff
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	e003      	b.n	8001d58 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMA400_OK;
 8001d50:	230f      	movs	r3, #15
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001d58:	230f      	movs	r3, #15
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b25b      	sxtb	r3, r3
}
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b004      	add	sp, #16
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <set_sensor_conf>:

static int8_t set_sensor_conf(uint8_t *data, const struct bma400_sensor_conf *conf, struct bma400_dev *dev)
{
 8001d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMA400_E_INVALID_CONFIG;
 8001d74:	2117      	movs	r1, #23
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	22fc      	movs	r2, #252	@ 0xfc
 8001d7a:	701a      	strb	r2, [r3, #0]
    uint8_t int_enable = 0;
 8001d7c:	2516      	movs	r5, #22
 8001d7e:	197b      	adds	r3, r7, r5
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
    enum bma400_int_chan int_map = BMA400_UNMAP_INT_PIN;
 8001d84:	2615      	movs	r6, #21
 8001d86:	19bb      	adds	r3, r7, r6
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]

    if (BMA400_ACCEL == conf->type)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d110      	bne.n	8001db6 <set_sensor_conf+0x4e>
    {
        /* Setting Accel configurations */
        rslt = set_accel_conf(&conf->param.accel, dev);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3302      	adds	r3, #2
 8001d98:	187c      	adds	r4, r7, r1
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	0011      	movs	r1, r2
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f000 f8aa 	bl	8001ef8 <set_accel_conf>
 8001da4:	0003      	movs	r3, r0
 8001da6:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_DATA_READY_INT_MAP;
 8001da8:	197b      	adds	r3, r7, r5
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.accel.int_chan;
 8001dae:	19bb      	adds	r3, r7, r6
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	7a12      	ldrb	r2, [r2, #8]
 8001db4:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_TAP_INT == conf->type)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d113      	bne.n	8001de6 <set_sensor_conf+0x7e>
    {
        /* Setting tap configurations */
        rslt = set_tap_conf(&conf->param.tap, dev);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	2217      	movs	r2, #23
 8001dc4:	18bc      	adds	r4, r7, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	0011      	movs	r1, r2
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 faac 	bl	8002328 <set_tap_conf>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_TAP_INT_MAP;
 8001dd4:	2316      	movs	r3, #22
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	2209      	movs	r2, #9
 8001dda:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.tap.int_chan;
 8001ddc:	2315      	movs	r3, #21
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	79d2      	ldrb	r2, [r2, #7]
 8001de4:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ACTIVITY_CHANGE_INT == conf->type)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d113      	bne.n	8001e16 <set_sensor_conf+0xae>
    {
        /* Setting activity change configurations */
        rslt = set_activity_change_conf(&conf->param.act_ch, dev);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3302      	adds	r3, #2
 8001df2:	2217      	movs	r2, #23
 8001df4:	18bc      	adds	r4, r7, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	0011      	movs	r1, r2
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 fb1a 	bl	8002434 <set_activity_change_conf>
 8001e00:	0003      	movs	r3, r0
 8001e02:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ACT_CH_INT_MAP;
 8001e04:	2316      	movs	r3, #22
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2208      	movs	r2, #8
 8001e0a:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.act_ch.int_chan;
 8001e0c:	2315      	movs	r3, #21
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	7992      	ldrb	r2, [r2, #6]
 8001e14:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN1_INT == conf->type)
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d113      	bne.n	8001e46 <set_sensor_conf+0xde>
    {
        /* Setting generic int 1 configurations */
        rslt = set_gen1_int(&conf->param.gen_int, dev);
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3302      	adds	r3, #2
 8001e22:	2217      	movs	r2, #23
 8001e24:	18bc      	adds	r4, r7, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	0011      	movs	r1, r2
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 fb54 	bl	80024d8 <set_gen1_int>
 8001e30:	0003      	movs	r3, r0
 8001e32:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN1_INT_MAP;
 8001e34:	2316      	movs	r3, #22
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2205      	movs	r2, #5
 8001e3a:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 8001e3c:	2315      	movs	r3, #21
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	7c92      	ldrb	r2, [r2, #18]
 8001e44:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN2_INT == conf->type)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d113      	bne.n	8001e76 <set_sensor_conf+0x10e>
    {
        /* Setting generic int 2 configurations */
        rslt = set_gen2_int(&conf->param.gen_int, dev);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3302      	adds	r3, #2
 8001e52:	2217      	movs	r2, #23
 8001e54:	18bc      	adds	r4, r7, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	0011      	movs	r1, r2
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 fc0c 	bl	8002678 <set_gen2_int>
 8001e60:	0003      	movs	r3, r0
 8001e62:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN2_INT_MAP;
 8001e64:	2316      	movs	r3, #22
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2204      	movs	r2, #4
 8001e6a:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 8001e6c:	2315      	movs	r3, #21
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	7c92      	ldrb	r2, [r2, #18]
 8001e74:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ORIENT_CHANGE_INT == conf->type)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d113      	bne.n	8001ea6 <set_sensor_conf+0x13e>
    {
        /* Setting orient int configurations */
        rslt = set_orient_int(&conf->param.orient, dev);
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3302      	adds	r3, #2
 8001e82:	2217      	movs	r2, #23
 8001e84:	18bc      	adds	r4, r7, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	0011      	movs	r1, r2
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 fcc4 	bl	8002818 <set_orient_int>
 8001e90:	0003      	movs	r3, r0
 8001e92:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ORIENT_CH_INT_MAP;
 8001e94:	2316      	movs	r3, #22
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2206      	movs	r2, #6
 8001e9a:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.orient.int_chan;
 8001e9c:	2315      	movs	r3, #21
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	7b92      	ldrb	r2, [r2, #14]
 8001ea4:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_STEP_COUNTER_INT == conf->type)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d10c      	bne.n	8001ec8 <set_sensor_conf+0x160>
    {
        rslt = BMA400_OK;
 8001eae:	2317      	movs	r3, #23
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
        int_enable = BMA400_STEP_INT_MAP;
 8001eb6:	2316      	movs	r3, #22
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	220a      	movs	r2, #10
 8001ebc:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.step_cnt.int_chan;
 8001ebe:	2315      	movs	r3, #21
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	7892      	ldrb	r2, [r2, #2]
 8001ec6:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BMA400_OK)
 8001ec8:	2317      	movs	r3, #23
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	b25b      	sxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <set_sensor_conf+0x180>
    {
        /* Int pin mapping settings */
        map_int_pin(data, int_enable, int_map);
 8001ed4:	2315      	movs	r3, #21
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	2316      	movs	r3, #22
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	7819      	ldrb	r1, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 fd30 	bl	8002948 <map_int_pin>
    }

    return rslt;
 8001ee8:	2317      	movs	r3, #23
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b25b      	sxtb	r3, r3
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b007      	add	sp, #28
 8001ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ef8 <set_accel_conf>:

    return rslt;
}

static int8_t set_accel_conf(const struct bma400_acc_conf *accel_conf, struct bma400_dev *dev)
{
 8001ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 8001f02:	250c      	movs	r5, #12
 8001f04:	197b      	adds	r3, r7, r5
 8001f06:	4a48      	ldr	r2, [pc, #288]	@ (8002028 <set_accel_conf+0x130>)
 8001f08:	8811      	ldrh	r1, [r2, #0]
 8001f0a:	8019      	strh	r1, [r3, #0]
 8001f0c:	7892      	ldrb	r2, [r2, #2]
 8001f0e:	709a      	strb	r2, [r3, #2]

    /* Update the accel configurations from the user structure
     * accel_conf
     */
    rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8001f10:	260f      	movs	r6, #15
 8001f12:	19bc      	adds	r4, r7, r6
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	1979      	adds	r1, r7, r5
 8001f18:	2203      	movs	r2, #3
 8001f1a:	2019      	movs	r0, #25
 8001f1c:	f7ff fb8a 	bl	8001634 <bma400_get_regs>
 8001f20:	0003      	movs	r3, r0
 8001f22:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8001f24:	0034      	movs	r4, r6
 8001f26:	193b      	adds	r3, r7, r4
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d173      	bne.n	8002018 <set_accel_conf+0x120>
    {
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8001f30:	0028      	movs	r0, r5
 8001f32:	183b      	adds	r3, r7, r0
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	227f      	movs	r2, #127	@ 0x7f
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	b25a      	sxtb	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	795b      	ldrb	r3, [r3, #5]
 8001f42:	b25b      	sxtb	r3, r3
 8001f44:	01db      	lsls	r3, r3, #7
 8001f46:	b25b      	sxtb	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	183b      	adds	r3, r7, r0
 8001f50:	701a      	strb	r2, [r3, #0]
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 8001f52:	183b      	adds	r3, r7, r0
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b25b      	sxtb	r3, r3
 8001f58:	2260      	movs	r2, #96	@ 0x60
 8001f5a:	4393      	bics	r3, r2
 8001f5c:	b25a      	sxtb	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	791b      	ldrb	r3, [r3, #4]
 8001f62:	b25b      	sxtb	r3, r3
 8001f64:	015b      	lsls	r3, r3, #5
 8001f66:	b25b      	sxtb	r3, r3
 8001f68:	2160      	movs	r1, #96	@ 0x60
 8001f6a:	400b      	ands	r3, r1
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	b25b      	sxtb	r3, r3
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	183b      	adds	r3, r7, r0
 8001f76:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 8001f78:	183b      	adds	r3, r7, r0
 8001f7a:	785b      	ldrb	r3, [r3, #1]
 8001f7c:	b25b      	sxtb	r3, r3
 8001f7e:	223f      	movs	r2, #63	@ 0x3f
 8001f80:	4013      	ands	r3, r2
 8001f82:	b25a      	sxtb	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	785b      	ldrb	r3, [r3, #1]
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	019b      	lsls	r3, r3, #6
 8001f8c:	b25b      	sxtb	r3, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	183b      	adds	r3, r7, r0
 8001f96:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 8001f98:	183b      	adds	r3, r7, r0
 8001f9a:	785b      	ldrb	r3, [r3, #1]
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	2230      	movs	r2, #48	@ 0x30
 8001fa0:	4393      	bics	r3, r2
 8001fa2:	b25a      	sxtb	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	78db      	ldrb	r3, [r3, #3]
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	2130      	movs	r1, #48	@ 0x30
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b25b      	sxtb	r3, r3
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	183b      	adds	r3, r7, r0
 8001fbc:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 8001fbe:	183b      	adds	r3, r7, r0
 8001fc0:	785b      	ldrb	r3, [r3, #1]
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	4393      	bics	r3, r2
 8001fc8:	b25a      	sxtb	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	210f      	movs	r1, #15
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b25b      	sxtb	r3, r3
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	183b      	adds	r3, r7, r0
 8001fde:	705a      	strb	r2, [r3, #1]
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 8001fe0:	183b      	adds	r3, r7, r0
 8001fe2:	789b      	ldrb	r3, [r3, #2]
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	4393      	bics	r3, r2
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	789b      	ldrb	r3, [r3, #2]
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	210c      	movs	r1, #12
 8001ff8:	400b      	ands	r3, r1
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	b2da      	uxtb	r2, r3
 8002002:	183b      	adds	r3, r7, r0
 8002004:	709a      	strb	r2, [r3, #2]

        /* Set the accel configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8002006:	193c      	adds	r4, r7, r4
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	1839      	adds	r1, r7, r0
 800200c:	2203      	movs	r2, #3
 800200e:	2019      	movs	r0, #25
 8002010:	f7ff fa92 	bl	8001538 <bma400_set_regs>
 8002014:	0003      	movs	r3, r0
 8002016:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002018:	230f      	movs	r3, #15
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b25b      	sxtb	r3, r3
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b005      	add	sp, #20
 8002026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002028:	08007a84 	.word	0x08007a84

0800202c <set_autowakeup_timeout>:

    return rslt;
}

static int8_t set_autowakeup_timeout(const struct bma400_auto_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2];
    uint8_t lsb;
    uint8_t msb;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &data_array[1], 1, dev);
 8002036:	260f      	movs	r6, #15
 8002038:	19bc      	adds	r4, r7, r6
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	2508      	movs	r5, #8
 800203e:	197b      	adds	r3, r7, r5
 8002040:	1c59      	adds	r1, r3, #1
 8002042:	0013      	movs	r3, r2
 8002044:	2201      	movs	r2, #1
 8002046:	202d      	movs	r0, #45	@ 0x2d
 8002048:	f7ff faf4 	bl	8001634 <bma400_get_regs>
 800204c:	0003      	movs	r3, r0
 800204e:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8002050:	0034      	movs	r4, r6
 8002052:	193b      	adds	r3, r7, r4
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b25b      	sxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d13e      	bne.n	80020da <set_autowakeup_timeout+0xae>
    {
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 800205c:	0028      	movs	r0, r5
 800205e:	183b      	adds	r3, r7, r0
 8002060:	785b      	ldrb	r3, [r3, #1]
 8002062:	b25b      	sxtb	r3, r3
 8002064:	2204      	movs	r2, #4
 8002066:	4393      	bics	r3, r2
 8002068:	b25a      	sxtb	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b25b      	sxtb	r3, r3
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	b25b      	sxtb	r3, r3
 8002074:	2104      	movs	r1, #4
 8002076:	400b      	ands	r3, r1
 8002078:	b25b      	sxtb	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b25b      	sxtb	r3, r3
 800207e:	b2da      	uxtb	r2, r3
 8002080:	183b      	adds	r3, r7, r0
 8002082:	705a      	strb	r2, [r3, #1]

        /* LSB of timeout threshold */
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	885b      	ldrh	r3, [r3, #2]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	250e      	movs	r5, #14
 800208c:	197b      	adds	r3, r7, r5
 800208e:	210f      	movs	r1, #15
 8002090:	400a      	ands	r2, r1
 8002092:	701a      	strb	r2, [r3, #0]

        /* MSB of timeout threshold */
        msb = BMA400_GET_BITS(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_MSB);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	885b      	ldrh	r3, [r3, #2]
 8002098:	111a      	asrs	r2, r3, #4
 800209a:	210d      	movs	r1, #13
 800209c:	187b      	adds	r3, r7, r1
 800209e:	701a      	strb	r2, [r3, #0]

        /* Set the value in the data_array */
        data_array[0] = msb;
 80020a0:	183b      	adds	r3, r7, r0
 80020a2:	187a      	adds	r2, r7, r1
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT_THRES, lsb);
 80020a8:	183b      	adds	r3, r7, r0
 80020aa:	785b      	ldrb	r3, [r3, #1]
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	220f      	movs	r2, #15
 80020b0:	4013      	ands	r3, r2
 80020b2:	b25a      	sxtb	r2, r3
 80020b4:	197b      	adds	r3, r7, r5
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b25b      	sxtb	r3, r3
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	b25b      	sxtb	r3, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	183b      	adds	r3, r7, r0
 80020c6:	705a      	strb	r2, [r3, #1]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_0, data_array, 2, dev);
 80020c8:	193c      	adds	r4, r7, r4
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	1839      	adds	r1, r7, r0
 80020ce:	2202      	movs	r2, #2
 80020d0:	202c      	movs	r0, #44	@ 0x2c
 80020d2:	f7ff fa31 	bl	8001538 <bma400_set_regs>
 80020d6:	0003      	movs	r3, r0
 80020d8:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80020da:	230f      	movs	r3, #15
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b25b      	sxtb	r3, r3
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b005      	add	sp, #20
 80020e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020ea <set_auto_wakeup>:

    return rslt;
}

int8_t set_auto_wakeup(uint8_t conf, struct bma400_dev *dev)
{
 80020ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	0002      	movs	r2, r0
 80020f2:	6039      	str	r1, [r7, #0]
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 80020f8:	260f      	movs	r6, #15
 80020fa:	19bc      	adds	r4, r7, r6
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	250e      	movs	r5, #14
 8002100:	1979      	adds	r1, r7, r5
 8002102:	2201      	movs	r2, #1
 8002104:	202d      	movs	r0, #45	@ 0x2d
 8002106:	f7ff fa95 	bl	8001634 <bma400_get_regs>
 800210a:	0003      	movs	r3, r0
 800210c:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800210e:	0034      	movs	r4, r6
 8002110:	193b      	adds	r3, r7, r4
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b25b      	sxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d11c      	bne.n	8002154 <set_auto_wakeup+0x6a>
    {
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 800211a:	0028      	movs	r0, r5
 800211c:	183b      	adds	r3, r7, r0
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b25b      	sxtb	r3, r3
 8002122:	2202      	movs	r2, #2
 8002124:	4393      	bics	r3, r2
 8002126:	b25a      	sxtb	r2, r3
 8002128:	1dfb      	adds	r3, r7, #7
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b25b      	sxtb	r3, r3
 800212e:	18db      	adds	r3, r3, r3
 8002130:	b25b      	sxtb	r3, r3
 8002132:	2102      	movs	r1, #2
 8002134:	400b      	ands	r3, r1
 8002136:	b25b      	sxtb	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b25b      	sxtb	r3, r3
 800213c:	b2da      	uxtb	r2, r3
 800213e:	183b      	adds	r3, r7, r0
 8002140:	701a      	strb	r2, [r3, #0]

        /* Enabling the Auto wakeup interrupt */
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 8002142:	193c      	adds	r4, r7, r4
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	1839      	adds	r1, r7, r0
 8002148:	2201      	movs	r2, #1
 800214a:	202d      	movs	r0, #45	@ 0x2d
 800214c:	f7ff f9f4 	bl	8001538 <bma400_set_regs>
 8002150:	0003      	movs	r3, r0
 8002152:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002154:	230f      	movs	r3, #15
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b25b      	sxtb	r3, r3
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b005      	add	sp, #20
 8002162:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002164 <set_autowakeup_interrupt>:

static int8_t set_autowakeup_interrupt(const struct bma400_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 8002164:	b5b0      	push	{r4, r5, r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[5] = { 0 };
 800216e:	2408      	movs	r4, #8
 8002170:	193b      	adds	r3, r7, r4
 8002172:	0018      	movs	r0, r3
 8002174:	2305      	movs	r3, #5
 8002176:	001a      	movs	r2, r3
 8002178:	2100      	movs	r1, #0
 800217a:	f004 ff73 	bl	8007064 <memset>

    /* Set the wakeup reference update */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 800217e:	0020      	movs	r0, r4
 8002180:	183b      	adds	r3, r7, r0
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b25b      	sxtb	r3, r3
 8002186:	2203      	movs	r2, #3
 8002188:	4393      	bics	r3, r2
 800218a:	b25a      	sxtb	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	b25b      	sxtb	r3, r3
 8002192:	2103      	movs	r1, #3
 8002194:	400b      	ands	r3, r1
 8002196:	b25b      	sxtb	r3, r3
 8002198:	4313      	orrs	r3, r2
 800219a:	b25b      	sxtb	r3, r3
 800219c:	b2da      	uxtb	r2, r3
 800219e:	183b      	adds	r3, r7, r0
 80021a0:	701a      	strb	r2, [r3, #0]

    /* Set the number of samples for interrupt condition evaluation */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 80021a2:	183b      	adds	r3, r7, r0
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	221c      	movs	r2, #28
 80021aa:	4393      	bics	r3, r2
 80021ac:	b25a      	sxtb	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	785b      	ldrb	r3, [r3, #1]
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	211c      	movs	r1, #28
 80021ba:	400b      	ands	r3, r1
 80021bc:	b25b      	sxtb	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	183b      	adds	r3, r7, r0
 80021c6:	701a      	strb	r2, [r3, #0]

    /* Enable low power wake-up interrupt for X,Y,Z axes*/
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 80021c8:	183b      	adds	r3, r7, r0
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	221f      	movs	r2, #31
 80021d0:	4013      	ands	r3, r2
 80021d2:	b25a      	sxtb	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	789b      	ldrb	r3, [r3, #2]
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	015b      	lsls	r3, r3, #5
 80021dc:	b25b      	sxtb	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b25b      	sxtb	r3, r3
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	0001      	movs	r1, r0
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Set interrupt threshold configuration  */
    data_array[1] = wakeup_conf->int_wkup_threshold;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	78da      	ldrb	r2, [r3, #3]
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	705a      	strb	r2, [r3, #1]

    /* Set the reference acceleration x-axis for the wake-up interrupt */
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	791a      	ldrb	r2, [r3, #4]
 80021f6:	187b      	adds	r3, r7, r1
 80021f8:	709a      	strb	r2, [r3, #2]

    /* Set the reference acceleration y-axis for the wake-up interrupt */
    data_array[3] = wakeup_conf->int_wkup_ref_y;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	795a      	ldrb	r2, [r3, #5]
 80021fe:	187b      	adds	r3, r7, r1
 8002200:	70da      	strb	r2, [r3, #3]

    /* Set the reference acceleration z-axis for the wake-up interrupt */
    data_array[4] = wakeup_conf->int_wkup_ref_z;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	799a      	ldrb	r2, [r3, #6]
 8002206:	187b      	adds	r3, r7, r1
 8002208:	711a      	strb	r2, [r3, #4]

    /* Set the wakeup interrupt configurations in the sensor */
    rslt = bma400_set_regs(BMA400_REG_WAKEUP_INT_CONF_0, data_array, 5, dev);
 800220a:	250f      	movs	r5, #15
 800220c:	197c      	adds	r4, r7, r5
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	1879      	adds	r1, r7, r1
 8002212:	2205      	movs	r2, #5
 8002214:	202f      	movs	r0, #47	@ 0x2f
 8002216:	f7ff f98f 	bl	8001538 <bma400_set_regs>
 800221a:	0003      	movs	r3, r0
 800221c:	7023      	strb	r3, [r4, #0]

    return rslt;
 800221e:	197b      	adds	r3, r7, r5
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	b25b      	sxtb	r3, r3
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	b004      	add	sp, #16
 800222a:	bdb0      	pop	{r4, r5, r7, pc}

0800222c <set_auto_low_power>:

    return rslt;
}

static int8_t set_auto_low_power(const struct bma400_auto_lp_conf *auto_lp_conf, struct bma400_dev *dev)
{
 800222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t timeout_msb;
    uint8_t timeout_lsb;

    rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8002236:	250f      	movs	r5, #15
 8002238:	197c      	adds	r4, r7, r5
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	260d      	movs	r6, #13
 800223e:	19b9      	adds	r1, r7, r6
 8002240:	2201      	movs	r2, #1
 8002242:	202b      	movs	r0, #43	@ 0x2b
 8002244:	f7ff f9f6 	bl	8001634 <bma400_get_regs>
 8002248:	0003      	movs	r3, r0
 800224a:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800224c:	0028      	movs	r0, r5
 800224e:	183b      	adds	r3, r7, r0
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b25b      	sxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d15f      	bne.n	8002318 <set_auto_low_power+0xec>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_AUTO_LOW_POW, auto_lp_conf->auto_low_power_trigger);
 8002258:	19bb      	adds	r3, r7, r6
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b25b      	sxtb	r3, r3
 800225e:	220f      	movs	r2, #15
 8002260:	4393      	bics	r3, r2
 8002262:	b25a      	sxtb	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b25b      	sxtb	r3, r3
 800226a:	210f      	movs	r1, #15
 800226c:	400b      	ands	r3, r1
 800226e:	b25b      	sxtb	r3, r3
 8002270:	4313      	orrs	r3, r2
 8002272:	b25b      	sxtb	r3, r3
 8002274:	b2da      	uxtb	r2, r3
 8002276:	19bb      	adds	r3, r7, r6
 8002278:	701a      	strb	r2, [r3, #0]

        /* If auto Low power timeout threshold is enabled */
        if (auto_lp_conf->auto_low_power_trigger & 0x0C)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	001a      	movs	r2, r3
 8002280:	230c      	movs	r3, #12
 8002282:	4013      	ands	r3, r2
 8002284:	d038      	beq.n	80022f8 <set_auto_low_power+0xcc>
        {
            rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8002286:	0005      	movs	r5, r0
 8002288:	183c      	adds	r4, r7, r0
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	220c      	movs	r2, #12
 800228e:	18b9      	adds	r1, r7, r2
 8002290:	2201      	movs	r2, #1
 8002292:	202a      	movs	r0, #42	@ 0x2a
 8002294:	f7ff f9ce 	bl	8001634 <bma400_get_regs>
 8002298:	0003      	movs	r3, r0
 800229a:	7023      	strb	r3, [r4, #0]
            if (rslt == BMA400_OK)
 800229c:	0028      	movs	r0, r5
 800229e:	183b      	adds	r3, r7, r0
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b25b      	sxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d127      	bne.n	80022f8 <set_auto_low_power+0xcc>
            {
                /* Compute the timeout threshold MSB value */
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	885b      	ldrh	r3, [r3, #2]
 80022ac:	111b      	asrs	r3, r3, #4
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	250c      	movs	r5, #12
 80022b2:	197b      	adds	r3, r7, r5
 80022b4:	701a      	strb	r2, [r3, #0]

                /* Compute the timeout threshold LSB value */
                timeout_lsb = BMA400_GET_BITS_POS_0(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES_LSB);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	885b      	ldrh	r3, [r3, #2]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	240e      	movs	r4, #14
 80022be:	193b      	adds	r3, r7, r4
 80022c0:	210f      	movs	r1, #15
 80022c2:	400a      	ands	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 80022c6:	19bb      	adds	r3, r7, r6
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	220f      	movs	r2, #15
 80022ce:	4013      	ands	r3, r2
 80022d0:	b25a      	sxtb	r2, r3
 80022d2:	193b      	adds	r3, r7, r4
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b25b      	sxtb	r3, r3
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	b25b      	sxtb	r3, r3
 80022dc:	4313      	orrs	r3, r2
 80022de:	b25b      	sxtb	r3, r3
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	19bb      	adds	r3, r7, r6
 80022e4:	701a      	strb	r2, [r3, #0]

                /* Set the timeout threshold MSB value */
                rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 80022e6:	183c      	adds	r4, r7, r0
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	1979      	adds	r1, r7, r5
 80022ec:	2201      	movs	r2, #1
 80022ee:	202a      	movs	r0, #42	@ 0x2a
 80022f0:	f7ff f922 	bl	8001538 <bma400_set_regs>
 80022f4:	0003      	movs	r3, r0
 80022f6:	7023      	strb	r3, [r4, #0]
            }
        }

        if (rslt == BMA400_OK)
 80022f8:	220f      	movs	r2, #15
 80022fa:	18bb      	adds	r3, r7, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b25b      	sxtb	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <set_auto_low_power+0xec>
        {
            /* Set the Auto low power configurations */
            rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8002304:	18bc      	adds	r4, r7, r2
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	220d      	movs	r2, #13
 800230a:	18b9      	adds	r1, r7, r2
 800230c:	2201      	movs	r2, #1
 800230e:	202b      	movs	r0, #43	@ 0x2b
 8002310:	f7ff f912 	bl	8001538 <bma400_set_regs>
 8002314:	0003      	movs	r3, r0
 8002316:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8002318:	230f      	movs	r3, #15
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	b25b      	sxtb	r3, r3
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b005      	add	sp, #20
 8002326:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002328 <set_tap_conf>:

    return rslt;
}

static int8_t set_tap_conf(const struct bma400_tap_conf *tap_set, struct bma400_dev *dev)
{
 8002328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[2] = { 0, 0 };
 8002332:	250c      	movs	r5, #12
 8002334:	197b      	adds	r3, r7, r5
 8002336:	2200      	movs	r2, #0
 8002338:	801a      	strh	r2, [r3, #0]

    rslt = bma400_get_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 800233a:	260f      	movs	r6, #15
 800233c:	19bc      	adds	r4, r7, r6
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	1979      	adds	r1, r7, r5
 8002342:	2202      	movs	r2, #2
 8002344:	2057      	movs	r0, #87	@ 0x57
 8002346:	f7ff f975 	bl	8001634 <bma400_get_regs>
 800234a:	0003      	movs	r3, r0
 800234c:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800234e:	0034      	movs	r4, r6
 8002350:	193b      	adds	r3, r7, r4
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b25b      	sxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d164      	bne.n	8002424 <set_tap_conf+0xfc>
    {
        /* Set the axis to sense for tap */
        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_TAP_AXES_EN, tap_set->axes_sel);
 800235a:	0028      	movs	r0, r5
 800235c:	183b      	adds	r3, r7, r0
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b25b      	sxtb	r3, r3
 8002362:	2218      	movs	r2, #24
 8002364:	4393      	bics	r3, r2
 8002366:	b25a      	sxtb	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b25b      	sxtb	r3, r3
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	b25b      	sxtb	r3, r3
 8002372:	2118      	movs	r1, #24
 8002374:	400b      	ands	r3, r1
 8002376:	b25b      	sxtb	r3, r3
 8002378:	4313      	orrs	r3, r2
 800237a:	b25b      	sxtb	r3, r3
 800237c:	b2da      	uxtb	r2, r3
 800237e:	183b      	adds	r3, r7, r0
 8002380:	701a      	strb	r2, [r3, #0]

        /* Set the threshold for tap sensing */
        reg_data[0] = BMA400_SET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY, tap_set->sensitivity);
 8002382:	183b      	adds	r3, r7, r0
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b25b      	sxtb	r3, r3
 8002388:	2207      	movs	r2, #7
 800238a:	4393      	bics	r3, r2
 800238c:	b25a      	sxtb	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	b25b      	sxtb	r3, r3
 8002394:	2107      	movs	r1, #7
 8002396:	400b      	ands	r3, r1
 8002398:	b25b      	sxtb	r3, r3
 800239a:	4313      	orrs	r3, r2
 800239c:	b25b      	sxtb	r3, r3
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	183b      	adds	r3, r7, r0
 80023a2:	701a      	strb	r2, [r3, #0]

        /* Set the Quiet_dt setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET_DT, tap_set->quiet_dt);
 80023a4:	183b      	adds	r3, r7, r0
 80023a6:	785b      	ldrb	r3, [r3, #1]
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	2230      	movs	r2, #48	@ 0x30
 80023ac:	4393      	bics	r3, r2
 80023ae:	b25a      	sxtb	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	791b      	ldrb	r3, [r3, #4]
 80023b4:	b25b      	sxtb	r3, r3
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	2130      	movs	r1, #48	@ 0x30
 80023bc:	400b      	ands	r3, r1
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	183b      	adds	r3, r7, r0
 80023c8:	705a      	strb	r2, [r3, #1]

        /* Set the Quiet setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET, tap_set->quiet);
 80023ca:	183b      	adds	r3, r7, r0
 80023cc:	785b      	ldrb	r3, [r3, #1]
 80023ce:	b25b      	sxtb	r3, r3
 80023d0:	220c      	movs	r2, #12
 80023d2:	4393      	bics	r3, r2
 80023d4:	b25a      	sxtb	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	78db      	ldrb	r3, [r3, #3]
 80023da:	b25b      	sxtb	r3, r3
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	210c      	movs	r1, #12
 80023e2:	400b      	ands	r3, r1
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b25b      	sxtb	r3, r3
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	183b      	adds	r3, r7, r0
 80023ee:	705a      	strb	r2, [r3, #1]

        /* Set the tics_th setting */
        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH, tap_set->tics_th);
 80023f0:	183b      	adds	r3, r7, r0
 80023f2:	785b      	ldrb	r3, [r3, #1]
 80023f4:	b25b      	sxtb	r3, r3
 80023f6:	2203      	movs	r2, #3
 80023f8:	4393      	bics	r3, r2
 80023fa:	b25a      	sxtb	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	789b      	ldrb	r3, [r3, #2]
 8002400:	b25b      	sxtb	r3, r3
 8002402:	2103      	movs	r1, #3
 8002404:	400b      	ands	r3, r1
 8002406:	b25b      	sxtb	r3, r3
 8002408:	4313      	orrs	r3, r2
 800240a:	b25b      	sxtb	r3, r3
 800240c:	b2da      	uxtb	r2, r3
 800240e:	183b      	adds	r3, r7, r0
 8002410:	705a      	strb	r2, [r3, #1]

        /* Set the TAP configuration in the sensor*/
        rslt = bma400_set_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8002412:	193c      	adds	r4, r7, r4
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	1839      	adds	r1, r7, r0
 8002418:	2202      	movs	r2, #2
 800241a:	2057      	movs	r0, #87	@ 0x57
 800241c:	f7ff f88c 	bl	8001538 <bma400_set_regs>
 8002420:	0003      	movs	r3, r0
 8002422:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002424:	230f      	movs	r3, #15
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	b25b      	sxtb	r3, r3
}
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	b005      	add	sp, #20
 8002432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002434 <set_activity_change_conf>:

    return rslt;
}

static int8_t set_activity_change_conf(const struct bma400_act_ch_conf *act_ch_set, struct bma400_dev *dev)
{
 8002434:	b5b0      	push	{r4, r5, r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2] = { 0 };
 800243e:	200c      	movs	r0, #12
 8002440:	183b      	adds	r3, r7, r0
 8002442:	2200      	movs	r2, #0
 8002444:	801a      	strh	r2, [r3, #0]

    /* Set the activity change threshold */
    data_array[0] = act_ch_set->act_ch_thres;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	183b      	adds	r3, r7, r0
 800244c:	701a      	strb	r2, [r3, #0]

    /* Set the axis to sense for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN, act_ch_set->axes_sel);
 800244e:	183b      	adds	r3, r7, r0
 8002450:	785b      	ldrb	r3, [r3, #1]
 8002452:	b25b      	sxtb	r3, r3
 8002454:	221f      	movs	r2, #31
 8002456:	4013      	ands	r3, r2
 8002458:	b25a      	sxtb	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	785b      	ldrb	r3, [r3, #1]
 800245e:	b25b      	sxtb	r3, r3
 8002460:	015b      	lsls	r3, r3, #5
 8002462:	b25b      	sxtb	r3, r3
 8002464:	4313      	orrs	r3, r2
 8002466:	b25b      	sxtb	r3, r3
 8002468:	b2da      	uxtb	r2, r3
 800246a:	183b      	adds	r3, r7, r0
 800246c:	705a      	strb	r2, [r3, #1]

    /* Set the data source for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC, act_ch_set->data_source);
 800246e:	183b      	adds	r3, r7, r0
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	b25b      	sxtb	r3, r3
 8002474:	2210      	movs	r2, #16
 8002476:	4393      	bics	r3, r2
 8002478:	b25a      	sxtb	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	789b      	ldrb	r3, [r3, #2]
 800247e:	b25b      	sxtb	r3, r3
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	b25b      	sxtb	r3, r3
 8002484:	2110      	movs	r1, #16
 8002486:	400b      	ands	r3, r1
 8002488:	b25b      	sxtb	r3, r3
 800248a:	4313      	orrs	r3, r2
 800248c:	b25b      	sxtb	r3, r3
 800248e:	b2da      	uxtb	r2, r3
 8002490:	183b      	adds	r3, r7, r0
 8002492:	705a      	strb	r2, [r3, #1]

    /* Set the Number of sample points(NPTS)
     * for sensing activity change
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 8002494:	183b      	adds	r3, r7, r0
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	b25b      	sxtb	r3, r3
 800249a:	220f      	movs	r2, #15
 800249c:	4393      	bics	r3, r2
 800249e:	b25a      	sxtb	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	78db      	ldrb	r3, [r3, #3]
 80024a4:	b25b      	sxtb	r3, r3
 80024a6:	210f      	movs	r1, #15
 80024a8:	400b      	ands	r3, r1
 80024aa:	b25b      	sxtb	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b25b      	sxtb	r3, r3
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	183b      	adds	r3, r7, r0
 80024b4:	705a      	strb	r2, [r3, #1]

    /* Set the Activity change configuration in the sensor*/
    rslt = bma400_set_regs(BMA400_REG_ACT_CH_CONFIG_0, data_array, 2, dev);
 80024b6:	250f      	movs	r5, #15
 80024b8:	197c      	adds	r4, r7, r5
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	1839      	adds	r1, r7, r0
 80024be:	2202      	movs	r2, #2
 80024c0:	2055      	movs	r0, #85	@ 0x55
 80024c2:	f7ff f839 	bl	8001538 <bma400_set_regs>
 80024c6:	0003      	movs	r3, r0
 80024c8:	7023      	strb	r3, [r4, #0]

    return rslt;
 80024ca:	197b      	adds	r3, r7, r5
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b25b      	sxtb	r3, r3
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b004      	add	sp, #16
 80024d6:	bdb0      	pop	{r4, r5, r7, pc}

080024d8 <set_gen1_int>:

    return rslt;
}

static int8_t set_gen1_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 80024e2:	240c      	movs	r4, #12
 80024e4:	193b      	adds	r3, r7, r4
 80024e6:	0018      	movs	r0, r3
 80024e8:	230b      	movs	r3, #11
 80024ea:	001a      	movs	r2, r3
 80024ec:	2100      	movs	r1, #0
 80024ee:	f004 fdb9 	bl	8007064 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 80024f2:	0020      	movs	r0, r4
 80024f4:	183b      	adds	r3, r7, r0
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	221f      	movs	r2, #31
 80024fc:	4013      	ands	r3, r2
 80024fe:	b25a      	sxtb	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	791b      	ldrb	r3, [r3, #4]
 8002504:	b25b      	sxtb	r3, r3
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	b25b      	sxtb	r3, r3
 800250a:	4313      	orrs	r3, r2
 800250c:	b25b      	sxtb	r3, r3
 800250e:	b2da      	uxtb	r2, r3
 8002510:	183b      	adds	r3, r7, r0
 8002512:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8002514:	183b      	adds	r3, r7, r0
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	b25b      	sxtb	r3, r3
 800251a:	2210      	movs	r2, #16
 800251c:	4393      	bics	r3, r2
 800251e:	b25a      	sxtb	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	795b      	ldrb	r3, [r3, #5]
 8002524:	b25b      	sxtb	r3, r3
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	b25b      	sxtb	r3, r3
 800252a:	2110      	movs	r1, #16
 800252c:	400b      	ands	r3, r1
 800252e:	b25b      	sxtb	r3, r3
 8002530:	4313      	orrs	r3, r2
 8002532:	b25b      	sxtb	r3, r3
 8002534:	b2da      	uxtb	r2, r3
 8002536:	183b      	adds	r3, r7, r0
 8002538:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 800253a:	183b      	adds	r3, r7, r0
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	b25b      	sxtb	r3, r3
 8002540:	220c      	movs	r2, #12
 8002542:	4393      	bics	r3, r2
 8002544:	b25a      	sxtb	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7a1b      	ldrb	r3, [r3, #8]
 800254a:	b25b      	sxtb	r3, r3
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	b25b      	sxtb	r3, r3
 8002550:	210c      	movs	r1, #12
 8002552:	400b      	ands	r3, r1
 8002554:	b25b      	sxtb	r3, r3
 8002556:	4313      	orrs	r3, r2
 8002558:	b25b      	sxtb	r3, r3
 800255a:	b2da      	uxtb	r2, r3
 800255c:	183b      	adds	r3, r7, r0
 800255e:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8002560:	183b      	adds	r3, r7, r0
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b25b      	sxtb	r3, r3
 8002566:	2203      	movs	r2, #3
 8002568:	4393      	bics	r3, r2
 800256a:	b25a      	sxtb	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7a5b      	ldrb	r3, [r3, #9]
 8002570:	b25b      	sxtb	r3, r3
 8002572:	2103      	movs	r1, #3
 8002574:	400b      	ands	r3, r1
 8002576:	b25b      	sxtb	r3, r3
 8002578:	4313      	orrs	r3, r2
 800257a:	b25b      	sxtb	r3, r3
 800257c:	b2da      	uxtb	r2, r3
 800257e:	183b      	adds	r3, r7, r0
 8002580:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8002582:	183b      	adds	r3, r7, r0
 8002584:	785b      	ldrb	r3, [r3, #1]
 8002586:	b25b      	sxtb	r3, r3
 8002588:	2202      	movs	r2, #2
 800258a:	4393      	bics	r3, r2
 800258c:	b25a      	sxtb	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	799b      	ldrb	r3, [r3, #6]
 8002592:	b25b      	sxtb	r3, r3
 8002594:	18db      	adds	r3, r3, r3
 8002596:	b25b      	sxtb	r3, r3
 8002598:	2102      	movs	r1, #2
 800259a:	400b      	ands	r3, r1
 800259c:	b25b      	sxtb	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	183b      	adds	r3, r7, r0
 80025a6:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 80025a8:	183b      	adds	r3, r7, r0
 80025aa:	785b      	ldrb	r3, [r3, #1]
 80025ac:	b25b      	sxtb	r3, r3
 80025ae:	2201      	movs	r2, #1
 80025b0:	4393      	bics	r3, r2
 80025b2:	b25a      	sxtb	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	79db      	ldrb	r3, [r3, #7]
 80025b8:	b25b      	sxtb	r3, r3
 80025ba:	2101      	movs	r1, #1
 80025bc:	400b      	ands	r3, r1
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	0001      	movs	r1, r0
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	885b      	ldrh	r3, [r3, #2]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	b29b      	uxth	r3, r3
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	885b      	ldrh	r3, [r3, #2]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7a1b      	ldrb	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d12e      	bne.n	8002652 <set_gen1_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	895b      	ldrh	r3, [r3, #10]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	895b      	ldrh	r3, [r3, #10]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	b29b      	uxth	r3, r3
 8002606:	b2da      	uxtb	r2, r3
 8002608:	187b      	adds	r3, r7, r1
 800260a:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	899b      	ldrh	r3, [r3, #12]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	187b      	adds	r3, r7, r1
 8002614:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	899b      	ldrh	r3, [r3, #12]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	b29b      	uxth	r3, r3
 800261e:	b2da      	uxtb	r2, r3
 8002620:	187b      	adds	r3, r7, r1
 8002622:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	89db      	ldrh	r3, [r3, #14]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	187b      	adds	r3, r7, r1
 800262c:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	89db      	ldrh	r3, [r3, #14]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	b29b      	uxth	r3, r3
 8002636:	b2da      	uxtb	r2, r3
 8002638:	187b      	adds	r3, r7, r1
 800263a:	729a      	strb	r2, [r3, #10]

        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 11, dev);
 800263c:	2317      	movs	r3, #23
 800263e:	18fc      	adds	r4, r7, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	1879      	adds	r1, r7, r1
 8002644:	220b      	movs	r2, #11
 8002646:	203f      	movs	r0, #63	@ 0x3f
 8002648:	f7fe ff76 	bl	8001538 <bma400_set_regs>
 800264c:	0003      	movs	r3, r0
 800264e:	7023      	strb	r3, [r4, #0]
 8002650:	e00a      	b.n	8002668 <set_gen1_int+0x190>
    }
    else
    {
        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 5, dev);
 8002652:	2317      	movs	r3, #23
 8002654:	18fc      	adds	r4, r7, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	220c      	movs	r2, #12
 800265a:	18b9      	adds	r1, r7, r2
 800265c:	2205      	movs	r2, #5
 800265e:	203f      	movs	r0, #63	@ 0x3f
 8002660:	f7fe ff6a 	bl	8001538 <bma400_set_regs>
 8002664:	0003      	movs	r3, r0
 8002666:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002668:	2317      	movs	r3, #23
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b25b      	sxtb	r3, r3
}
 8002670:	0018      	movs	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	b007      	add	sp, #28
 8002676:	bd90      	pop	{r4, r7, pc}

08002678 <set_gen2_int>:

    return rslt;
}

static int8_t set_gen2_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 8002682:	240c      	movs	r4, #12
 8002684:	193b      	adds	r3, r7, r4
 8002686:	0018      	movs	r0, r3
 8002688:	230b      	movs	r3, #11
 800268a:	001a      	movs	r2, r3
 800268c:	2100      	movs	r1, #0
 800268e:	f004 fce9 	bl	8007064 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8002692:	0020      	movs	r0, r4
 8002694:	183b      	adds	r3, r7, r0
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b25b      	sxtb	r3, r3
 800269a:	221f      	movs	r2, #31
 800269c:	4013      	ands	r3, r2
 800269e:	b25a      	sxtb	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	791b      	ldrb	r3, [r3, #4]
 80026a4:	b25b      	sxtb	r3, r3
 80026a6:	015b      	lsls	r3, r3, #5
 80026a8:	b25b      	sxtb	r3, r3
 80026aa:	4313      	orrs	r3, r2
 80026ac:	b25b      	sxtb	r3, r3
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	183b      	adds	r3, r7, r0
 80026b2:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 80026b4:	183b      	adds	r3, r7, r0
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	2210      	movs	r2, #16
 80026bc:	4393      	bics	r3, r2
 80026be:	b25a      	sxtb	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	795b      	ldrb	r3, [r3, #5]
 80026c4:	b25b      	sxtb	r3, r3
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	b25b      	sxtb	r3, r3
 80026ca:	2110      	movs	r1, #16
 80026cc:	400b      	ands	r3, r1
 80026ce:	b25b      	sxtb	r3, r3
 80026d0:	4313      	orrs	r3, r2
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 80026da:	183b      	adds	r3, r7, r0
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b25b      	sxtb	r3, r3
 80026e0:	220c      	movs	r2, #12
 80026e2:	4393      	bics	r3, r2
 80026e4:	b25a      	sxtb	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7a1b      	ldrb	r3, [r3, #8]
 80026ea:	b25b      	sxtb	r3, r3
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	210c      	movs	r1, #12
 80026f2:	400b      	ands	r3, r1
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b25b      	sxtb	r3, r3
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	183b      	adds	r3, r7, r0
 80026fe:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8002700:	183b      	adds	r3, r7, r0
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	b25b      	sxtb	r3, r3
 8002706:	2203      	movs	r2, #3
 8002708:	4393      	bics	r3, r2
 800270a:	b25a      	sxtb	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	7a5b      	ldrb	r3, [r3, #9]
 8002710:	b25b      	sxtb	r3, r3
 8002712:	2103      	movs	r1, #3
 8002714:	400b      	ands	r3, r1
 8002716:	b25b      	sxtb	r3, r3
 8002718:	4313      	orrs	r3, r2
 800271a:	b25b      	sxtb	r3, r3
 800271c:	b2da      	uxtb	r2, r3
 800271e:	183b      	adds	r3, r7, r0
 8002720:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8002722:	183b      	adds	r3, r7, r0
 8002724:	785b      	ldrb	r3, [r3, #1]
 8002726:	b25b      	sxtb	r3, r3
 8002728:	2202      	movs	r2, #2
 800272a:	4393      	bics	r3, r2
 800272c:	b25a      	sxtb	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	799b      	ldrb	r3, [r3, #6]
 8002732:	b25b      	sxtb	r3, r3
 8002734:	18db      	adds	r3, r3, r3
 8002736:	b25b      	sxtb	r3, r3
 8002738:	2102      	movs	r1, #2
 800273a:	400b      	ands	r3, r1
 800273c:	b25b      	sxtb	r3, r3
 800273e:	4313      	orrs	r3, r2
 8002740:	b25b      	sxtb	r3, r3
 8002742:	b2da      	uxtb	r2, r3
 8002744:	183b      	adds	r3, r7, r0
 8002746:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8002748:	183b      	adds	r3, r7, r0
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	b25b      	sxtb	r3, r3
 800274e:	2201      	movs	r2, #1
 8002750:	4393      	bics	r3, r2
 8002752:	b25a      	sxtb	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	79db      	ldrb	r3, [r3, #7]
 8002758:	b25b      	sxtb	r3, r3
 800275a:	2101      	movs	r1, #1
 800275c:	400b      	ands	r3, r1
 800275e:	b25b      	sxtb	r3, r3
 8002760:	4313      	orrs	r3, r2
 8002762:	b25b      	sxtb	r3, r3
 8002764:	b2da      	uxtb	r2, r3
 8002766:	0001      	movs	r1, r0
 8002768:	187b      	adds	r3, r7, r1
 800276a:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	187b      	adds	r3, r7, r1
 8002772:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	885b      	ldrh	r3, [r3, #2]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	b29b      	uxth	r3, r3
 800277c:	b2da      	uxtb	r2, r3
 800277e:	187b      	adds	r3, r7, r1
 8002780:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	885b      	ldrh	r3, [r3, #2]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	187b      	adds	r3, r7, r1
 800278a:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7a1b      	ldrb	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d12e      	bne.n	80027f2 <set_gen2_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	895b      	ldrh	r3, [r3, #10]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	187b      	adds	r3, r7, r1
 800279c:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	895b      	ldrh	r3, [r3, #10]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	899b      	ldrh	r3, [r3, #12]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	899b      	ldrh	r3, [r3, #12]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	b29b      	uxth	r3, r3
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	89db      	ldrh	r3, [r3, #14]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	89db      	ldrh	r3, [r3, #14]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	187b      	adds	r3, r7, r1
 80027da:	729a      	strb	r2, [r3, #10]

        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 11, dev);
 80027dc:	2317      	movs	r3, #23
 80027de:	18fc      	adds	r4, r7, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	1879      	adds	r1, r7, r1
 80027e4:	220b      	movs	r2, #11
 80027e6:	204a      	movs	r0, #74	@ 0x4a
 80027e8:	f7fe fea6 	bl	8001538 <bma400_set_regs>
 80027ec:	0003      	movs	r3, r0
 80027ee:	7023      	strb	r3, [r4, #0]
 80027f0:	e00a      	b.n	8002808 <set_gen2_int+0x190>
    }
    else
    {
        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 5, dev);
 80027f2:	2317      	movs	r3, #23
 80027f4:	18fc      	adds	r4, r7, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	220c      	movs	r2, #12
 80027fa:	18b9      	adds	r1, r7, r2
 80027fc:	2205      	movs	r2, #5
 80027fe:	204a      	movs	r0, #74	@ 0x4a
 8002800:	f7fe fe9a 	bl	8001538 <bma400_set_regs>
 8002804:	0003      	movs	r3, r0
 8002806:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002808:	2317      	movs	r3, #23
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b25b      	sxtb	r3, r3
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b007      	add	sp, #28
 8002816:	bd90      	pop	{r4, r7, pc}

08002818 <set_orient_int>:

    return rslt;
}

static int8_t set_orient_int(const struct bma400_orient_int_conf *orient_conf, struct bma400_dev *dev)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[10] = { 0 };
 8002822:	240c      	movs	r4, #12
 8002824:	193b      	adds	r3, r7, r4
 8002826:	0018      	movs	r0, r3
 8002828:	230a      	movs	r3, #10
 800282a:	001a      	movs	r2, r3
 800282c:	2100      	movs	r1, #0
 800282e:	f004 fc19 	bl	8007064 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 8002832:	0020      	movs	r0, r4
 8002834:	183b      	adds	r3, r7, r0
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b25b      	sxtb	r3, r3
 800283a:	221f      	movs	r2, #31
 800283c:	4013      	ands	r3, r2
 800283e:	b25a      	sxtb	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	b25b      	sxtb	r3, r3
 8002846:	015b      	lsls	r3, r3, #5
 8002848:	b25b      	sxtb	r3, r3
 800284a:	4313      	orrs	r3, r2
 800284c:	b25b      	sxtb	r3, r3
 800284e:	b2da      	uxtb	r2, r3
 8002850:	183b      	adds	r3, r7, r0
 8002852:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 8002854:	183b      	adds	r3, r7, r0
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	b25b      	sxtb	r3, r3
 800285a:	2210      	movs	r2, #16
 800285c:	4393      	bics	r3, r2
 800285e:	b25a      	sxtb	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	785b      	ldrb	r3, [r3, #1]
 8002864:	b25b      	sxtb	r3, r3
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	b25b      	sxtb	r3, r3
 800286a:	2110      	movs	r1, #16
 800286c:	400b      	ands	r3, r1
 800286e:	b25b      	sxtb	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	b25b      	sxtb	r3, r3
 8002874:	b2da      	uxtb	r2, r3
 8002876:	183b      	adds	r3, r7, r0
 8002878:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 800287a:	183b      	adds	r3, r7, r0
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b25b      	sxtb	r3, r3
 8002880:	220c      	movs	r2, #12
 8002882:	4393      	bics	r3, r2
 8002884:	b25a      	sxtb	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	789b      	ldrb	r3, [r3, #2]
 800288a:	b25b      	sxtb	r3, r3
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	b25b      	sxtb	r3, r3
 8002890:	210c      	movs	r1, #12
 8002892:	400b      	ands	r3, r1
 8002894:	b25b      	sxtb	r3, r3
 8002896:	4313      	orrs	r3, r2
 8002898:	b25b      	sxtb	r3, r3
 800289a:	b2da      	uxtb	r2, r3
 800289c:	0001      	movs	r1, r0
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Set the threshold for interrupt calculation */
    data_array[1] = orient_conf->orient_thres;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	78da      	ldrb	r2, [r3, #3]
 80028a6:	187b      	adds	r3, r7, r1
 80028a8:	705a      	strb	r2, [r3, #1]

    /* Set the stability threshold */
    data_array[2] = orient_conf->stability_thres;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	791a      	ldrb	r2, [r3, #4]
 80028ae:	187b      	adds	r3, r7, r1
 80028b0:	709a      	strb	r2, [r3, #2]

    /* Set the interrupt duration */
    data_array[3] = orient_conf->orient_int_dur;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	795a      	ldrb	r2, [r3, #5]
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	70da      	strb	r2, [r3, #3]

    /* Handling case of manual reference update */
    if (orient_conf->ref_update == BMA400_UPDATE_MANUAL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	789b      	ldrb	r3, [r3, #2]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d12e      	bne.n	8002920 <set_orient_int+0x108>
    {
        /* Set the LSB of reference x threshold */
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	88db      	ldrh	r3, [r3, #6]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	711a      	strb	r2, [r3, #4]

        /* Set the MSB of reference x threshold */
        data_array[5] = BMA400_GET_MSB(orient_conf->orient_ref_x);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	88db      	ldrh	r3, [r3, #6]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	891b      	ldrh	r3, [r3, #8]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_MSB(orient_conf->orient_ref_y);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	891b      	ldrh	r3, [r3, #8]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	895b      	ldrh	r3, [r3, #10]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_MSB(orient_conf->orient_ref_z);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	895b      	ldrh	r3, [r3, #10]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	b29b      	uxth	r3, r3
 8002904:	b2da      	uxtb	r2, r3
 8002906:	187b      	adds	r3, r7, r1
 8002908:	725a      	strb	r2, [r3, #9]

        /* Set the orient configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 10, dev);
 800290a:	2317      	movs	r3, #23
 800290c:	18fc      	adds	r4, r7, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	1879      	adds	r1, r7, r1
 8002912:	220a      	movs	r2, #10
 8002914:	2035      	movs	r0, #53	@ 0x35
 8002916:	f7fe fe0f 	bl	8001538 <bma400_set_regs>
 800291a:	0003      	movs	r3, r0
 800291c:	7023      	strb	r3, [r4, #0]
 800291e:	e00a      	b.n	8002936 <set_orient_int+0x11e>
    else
    {
        /* Set the orient configurations in the sensor excluding
         * reference values of x,y,z
         */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 4, dev);
 8002920:	2317      	movs	r3, #23
 8002922:	18fc      	adds	r4, r7, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	220c      	movs	r2, #12
 8002928:	18b9      	adds	r1, r7, r2
 800292a:	2204      	movs	r2, #4
 800292c:	2035      	movs	r0, #53	@ 0x35
 800292e:	f7fe fe03 	bl	8001538 <bma400_set_regs>
 8002932:	0003      	movs	r3, r0
 8002934:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002936:	2317      	movs	r3, #23
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b25b      	sxtb	r3, r3
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b007      	add	sp, #28
 8002944:	bd90      	pop	{r4, r7, pc}
	...

08002948 <map_int_pin>:

    return rslt;
}

static void map_int_pin(uint8_t *data_array, uint8_t int_enable, enum bma400_int_chan int_map)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	0008      	movs	r0, r1
 8002952:	0011      	movs	r1, r2
 8002954:	1cfb      	adds	r3, r7, #3
 8002956:	1c02      	adds	r2, r0, #0
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	1cbb      	adds	r3, r7, #2
 800295c:	1c0a      	adds	r2, r1, #0
 800295e:	701a      	strb	r2, [r3, #0]
    switch (int_enable)
 8002960:	1cfb      	adds	r3, r7, #3
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b0b      	cmp	r3, #11
 8002966:	d900      	bls.n	800296a <map_int_pin+0x22>
 8002968:	e2f3      	b.n	8002f52 <map_int_pin+0x60a>
 800296a:	009a      	lsls	r2, r3, #2
 800296c:	4bc9      	ldr	r3, [pc, #804]	@ (8002c94 <map_int_pin+0x34c>)
 800296e:	18d3      	adds	r3, r2, r3
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	469f      	mov	pc, r3
    {
        case BMA400_DATA_READY_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8002974:	1cbb      	adds	r3, r7, #2
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d107      	bne.n	800298c <map_int_pin+0x44>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2280      	movs	r2, #128	@ 0x80
 8002982:	4252      	negs	r2, r2
 8002984:	4313      	orrs	r3, r2
 8002986:	b2da      	uxtb	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800298c:	1cbb      	adds	r3, r7, #2
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d109      	bne.n	80029a8 <map_int_pin+0x60>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3301      	adds	r3, #1
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3301      	adds	r3, #1
 800299e:	2180      	movs	r1, #128	@ 0x80
 80029a0:	4249      	negs	r1, r1
 80029a2:	430a      	orrs	r2, r1
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80029a8:	1cbb      	adds	r3, r7, #2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10f      	bne.n	80029d0 <map_int_pin+0x88>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_DRDY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	227f      	movs	r2, #127	@ 0x7f
 80029b6:	4013      	ands	r3, r2
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_DRDY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3301      	adds	r3, #1
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3301      	adds	r3, #1
 80029c8:	217f      	movs	r1, #127	@ 0x7f
 80029ca:	400a      	ands	r2, r1
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80029d0:	1cbb      	adds	r3, r7, #2
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d000      	beq.n	80029da <map_int_pin+0x92>
 80029d8:	e2bd      	b.n	8002f56 <map_int_pin+0x60e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2280      	movs	r2, #128	@ 0x80
 80029e0:	4252      	negs	r2, r2
 80029e2:	4313      	orrs	r3, r2
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3301      	adds	r3, #1
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3301      	adds	r3, #1
 80029f4:	2180      	movs	r1, #128	@ 0x80
 80029f6:	4249      	negs	r1, r1
 80029f8:	430a      	orrs	r2, r1
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]
            }

            break;
 80029fe:	e2aa      	b.n	8002f56 <map_int_pin+0x60e>
        case BMA400_FIFO_WM_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8002a00:	1cbb      	adds	r3, r7, #2
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d106      	bne.n	8002a16 <map_int_pin+0xce>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2240      	movs	r2, #64	@ 0x40
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8002a16:	1cbb      	adds	r3, r7, #2
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d108      	bne.n	8002a30 <map_int_pin+0xe8>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3301      	adds	r3, #1
 8002a22:	781a      	ldrb	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3301      	adds	r3, #1
 8002a28:	2140      	movs	r1, #64	@ 0x40
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8002a30:	1cbb      	adds	r3, r7, #2
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10f      	bne.n	8002a58 <map_int_pin+0x110>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_WM);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2240      	movs	r2, #64	@ 0x40
 8002a3e:	4393      	bics	r3, r2
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_WM);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	2140      	movs	r1, #64	@ 0x40
 8002a52:	438a      	bics	r2, r1
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8002a58:	1cbb      	adds	r3, r7, #2
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d000      	beq.n	8002a62 <map_int_pin+0x11a>
 8002a60:	e27b      	b.n	8002f5a <map_int_pin+0x612>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2240      	movs	r2, #64	@ 0x40
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3301      	adds	r3, #1
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	2140      	movs	r1, #64	@ 0x40
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
            }

            break;
 8002a82:	e26a      	b.n	8002f5a <map_int_pin+0x612>
        case BMA400_FIFO_FULL_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8002a84:	1cbb      	adds	r3, r7, #2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d106      	bne.n	8002a9a <map_int_pin+0x152>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2220      	movs	r2, #32
 8002a92:	4313      	orrs	r3, r2
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8002a9a:	1cbb      	adds	r3, r7, #2
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d108      	bne.n	8002ab4 <map_int_pin+0x16c>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	2120      	movs	r1, #32
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8002ab4:	1cbb      	adds	r3, r7, #2
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10f      	bne.n	8002adc <map_int_pin+0x194>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	4393      	bics	r3, r2
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_FULL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3301      	adds	r3, #1
 8002ace:	781a      	ldrb	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	2120      	movs	r1, #32
 8002ad6:	438a      	bics	r2, r1
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8002adc:	1cbb      	adds	r3, r7, #2
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d000      	beq.n	8002ae6 <map_int_pin+0x19e>
 8002ae4:	e23b      	b.n	8002f5e <map_int_pin+0x616>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2220      	movs	r2, #32
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3301      	adds	r3, #1
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3301      	adds	r3, #1
 8002afe:	2120      	movs	r1, #32
 8002b00:	430a      	orrs	r2, r1
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]
            }

            break;
 8002b06:	e22a      	b.n	8002f5e <map_int_pin+0x616>
        case BMA400_INT_OVERRUN_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8002b08:	1cbb      	adds	r3, r7, #2
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d106      	bne.n	8002b1e <map_int_pin+0x1d6>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2210      	movs	r2, #16
 8002b16:	4313      	orrs	r3, r2
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8002b1e:	1cbb      	adds	r3, r7, #2
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d108      	bne.n	8002b38 <map_int_pin+0x1f0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	2110      	movs	r1, #16
 8002b32:	430a      	orrs	r2, r1
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8002b38:	1cbb      	adds	r3, r7, #2
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10f      	bne.n	8002b60 <map_int_pin+0x218>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_INT_OVERRUN);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2210      	movs	r2, #16
 8002b46:	4393      	bics	r3, r2
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_INT_OVERRUN);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3301      	adds	r3, #1
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3301      	adds	r3, #1
 8002b58:	2110      	movs	r1, #16
 8002b5a:	438a      	bics	r2, r1
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8002b60:	1cbb      	adds	r3, r7, #2
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d000      	beq.n	8002b6a <map_int_pin+0x222>
 8002b68:	e1fb      	b.n	8002f62 <map_int_pin+0x61a>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2210      	movs	r2, #16
 8002b70:	4313      	orrs	r3, r2
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	781a      	ldrb	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3301      	adds	r3, #1
 8002b82:	2110      	movs	r1, #16
 8002b84:	430a      	orrs	r2, r1
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]
            }

            break;
 8002b8a:	e1ea      	b.n	8002f62 <map_int_pin+0x61a>
        case BMA400_GEN2_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8002b8c:	1cbb      	adds	r3, r7, #2
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d106      	bne.n	8002ba2 <map_int_pin+0x25a>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2208      	movs	r2, #8
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8002ba2:	1cbb      	adds	r3, r7, #2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d108      	bne.n	8002bbc <map_int_pin+0x274>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3301      	adds	r3, #1
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	2108      	movs	r1, #8
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8002bbc:	1cbb      	adds	r3, r7, #2
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10f      	bne.n	8002be4 <map_int_pin+0x29c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2208      	movs	r2, #8
 8002bca:	4393      	bics	r3, r2
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN2);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	781a      	ldrb	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	2108      	movs	r1, #8
 8002bde:	438a      	bics	r2, r1
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8002be4:	1cbb      	adds	r3, r7, #2
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d000      	beq.n	8002bee <map_int_pin+0x2a6>
 8002bec:	e1bb      	b.n	8002f66 <map_int_pin+0x61e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3301      	adds	r3, #1
 8002c06:	2108      	movs	r1, #8
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]
            }

            break;
 8002c0e:	e1aa      	b.n	8002f66 <map_int_pin+0x61e>
        case BMA400_GEN1_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8002c10:	1cbb      	adds	r3, r7, #2
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d106      	bne.n	8002c26 <map_int_pin+0x2de>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8002c26:	1cbb      	adds	r3, r7, #2
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d108      	bne.n	8002c40 <map_int_pin+0x2f8>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3301      	adds	r3, #1
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3301      	adds	r3, #1
 8002c38:	2104      	movs	r1, #4
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8002c40:	1cbb      	adds	r3, r7, #2
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10f      	bne.n	8002c68 <map_int_pin+0x320>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	4393      	bics	r3, r2
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	781a      	ldrb	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	2104      	movs	r1, #4
 8002c62:	438a      	bics	r2, r1
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8002c68:	1cbb      	adds	r3, r7, #2
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d000      	beq.n	8002c72 <map_int_pin+0x32a>
 8002c70:	e17b      	b.n	8002f6a <map_int_pin+0x622>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2204      	movs	r2, #4
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3301      	adds	r3, #1
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	2104      	movs	r1, #4
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
            }

            break;
 8002c92:	e16a      	b.n	8002f6a <map_int_pin+0x622>
 8002c94:	08007b2c 	.word	0x08007b2c
        case BMA400_ORIENT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8002c98:	1cbb      	adds	r3, r7, #2
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d106      	bne.n	8002cae <map_int_pin+0x366>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8002cae:	1cbb      	adds	r3, r7, #2
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d108      	bne.n	8002cc8 <map_int_pin+0x380>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	781a      	ldrb	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8002cc8:	1cbb      	adds	r3, r7, #2
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10f      	bne.n	8002cf0 <map_int_pin+0x3a8>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_ORIENT_CH);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	781a      	ldrb	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	2102      	movs	r1, #2
 8002cea:	438a      	bics	r2, r1
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8002cf0:	1cbb      	adds	r3, r7, #2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d000      	beq.n	8002cfa <map_int_pin+0x3b2>
 8002cf8:	e139      	b.n	8002f6e <map_int_pin+0x626>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	4313      	orrs	r3, r2
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3301      	adds	r3, #1
 8002d12:	2102      	movs	r1, #2
 8002d14:	430a      	orrs	r2, r1
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]
            }

            break;
 8002d1a:	e128      	b.n	8002f6e <map_int_pin+0x626>
        case BMA400_WAKEUP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8002d1c:	1cbb      	adds	r3, r7, #2
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d106      	bne.n	8002d32 <map_int_pin+0x3ea>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8002d32:	1cbb      	adds	r3, r7, #2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d108      	bne.n	8002d4c <map_int_pin+0x404>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	781a      	ldrb	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3301      	adds	r3, #1
 8002d44:	2101      	movs	r1, #1
 8002d46:	430a      	orrs	r2, r1
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8002d4c:	1cbb      	adds	r3, r7, #2
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10f      	bne.n	8002d74 <map_int_pin+0x42c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_WAKEUP_INT);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4393      	bics	r3, r2
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_WAKEUP_INT);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3301      	adds	r3, #1
 8002d66:	781a      	ldrb	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	438a      	bics	r2, r1
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8002d74:	1cbb      	adds	r3, r7, #2
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d000      	beq.n	8002d7e <map_int_pin+0x436>
 8002d7c:	e0f9      	b.n	8002f72 <map_int_pin+0x62a>
            {
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2201      	movs	r2, #1
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3301      	adds	r3, #1
 8002d96:	2101      	movs	r1, #1
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]
            }

            break;
 8002d9e:	e0e8      	b.n	8002f72 <map_int_pin+0x62a>
        case BMA400_ACT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8002da0:	1cbb      	adds	r3, r7, #2
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d108      	bne.n	8002dba <map_int_pin+0x472>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3302      	adds	r3, #2
 8002dac:	781a      	ldrb	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3302      	adds	r3, #2
 8002db2:	2108      	movs	r1, #8
 8002db4:	430a      	orrs	r2, r1
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8002dba:	1cbb      	adds	r3, r7, #2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d109      	bne.n	8002dd6 <map_int_pin+0x48e>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	781a      	ldrb	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3302      	adds	r3, #2
 8002dcc:	2180      	movs	r1, #128	@ 0x80
 8002dce:	4249      	negs	r1, r1
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8002dd6:	1cbb      	adds	r3, r7, #2
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d111      	bne.n	8002e02 <map_int_pin+0x4ba>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT1);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3302      	adds	r3, #2
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3302      	adds	r3, #2
 8002de8:	2108      	movs	r1, #8
 8002dea:	438a      	bics	r2, r1
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT2);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3302      	adds	r3, #2
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3302      	adds	r3, #2
 8002dfa:	217f      	movs	r1, #127	@ 0x7f
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8002e02:	1cbb      	adds	r3, r7, #2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d000      	beq.n	8002e0c <map_int_pin+0x4c4>
 8002e0a:	e0b4      	b.n	8002f76 <map_int_pin+0x62e>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3302      	adds	r3, #2
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3302      	adds	r3, #2
 8002e16:	2108      	movs	r1, #8
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3302      	adds	r3, #2
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3302      	adds	r3, #2
 8002e28:	2180      	movs	r1, #128	@ 0x80
 8002e2a:	4249      	negs	r1, r1
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]
            }

            break;
 8002e32:	e0a0      	b.n	8002f76 <map_int_pin+0x62e>
        case BMA400_TAP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8002e34:	1cbb      	adds	r3, r7, #2
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d108      	bne.n	8002e4e <map_int_pin+0x506>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3302      	adds	r3, #2
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3302      	adds	r3, #2
 8002e46:	2104      	movs	r1, #4
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8002e4e:	1cbb      	adds	r3, r7, #2
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d108      	bne.n	8002e68 <map_int_pin+0x520>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3302      	adds	r3, #2
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3302      	adds	r3, #2
 8002e60:	2140      	movs	r1, #64	@ 0x40
 8002e62:	430a      	orrs	r2, r1
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8002e68:	1cbb      	adds	r3, r7, #2
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d111      	bne.n	8002e94 <map_int_pin+0x54c>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3302      	adds	r3, #2
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3302      	adds	r3, #2
 8002e7a:	2104      	movs	r1, #4
 8002e7c:	438a      	bics	r2, r1
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT2);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3302      	adds	r3, #2
 8002e86:	781a      	ldrb	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	2140      	movs	r1, #64	@ 0x40
 8002e8e:	438a      	bics	r2, r1
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8002e94:	1cbb      	adds	r3, r7, #2
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d000      	beq.n	8002e9e <map_int_pin+0x556>
 8002e9c:	e06d      	b.n	8002f7a <map_int_pin+0x632>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	2104      	movs	r1, #4
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3302      	adds	r3, #2
 8002eba:	2140      	movs	r1, #64	@ 0x40
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]
            }

            break;
 8002ec2:	e05a      	b.n	8002f7a <map_int_pin+0x632>
        case BMA400_STEP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8002ec4:	1cbb      	adds	r3, r7, #2
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d108      	bne.n	8002ede <map_int_pin+0x596>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3302      	adds	r3, #2
 8002ed0:	781a      	ldrb	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8002ede:	1cbb      	adds	r3, r7, #2
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d108      	bne.n	8002ef8 <map_int_pin+0x5b0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3302      	adds	r3, #2
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3302      	adds	r3, #2
 8002ef0:	2110      	movs	r1, #16
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8002ef8:	1cbb      	adds	r3, r7, #2
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d111      	bne.n	8002f24 <map_int_pin+0x5dc>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_EN_STEP_INT);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3302      	adds	r3, #2
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3302      	adds	r3, #2
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3302      	adds	r3, #2
 8002f16:	781a      	ldrb	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	2110      	movs	r1, #16
 8002f1e:	438a      	bics	r2, r1
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8002f24:	1cbb      	adds	r3, r7, #2
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d128      	bne.n	8002f7e <map_int_pin+0x636>
            {
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3302      	adds	r3, #2
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3302      	adds	r3, #2
 8002f36:	2101      	movs	r1, #1
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3302      	adds	r3, #2
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3302      	adds	r3, #2
 8002f48:	2110      	movs	r1, #16
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]
            }

            break;
 8002f50:	e015      	b.n	8002f7e <map_int_pin+0x636>
        default:
            break;
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	e014      	b.n	8002f80 <map_int_pin+0x638>
            break;
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	e012      	b.n	8002f80 <map_int_pin+0x638>
            break;
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	e010      	b.n	8002f80 <map_int_pin+0x638>
            break;
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	e00e      	b.n	8002f80 <map_int_pin+0x638>
            break;
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	e00c      	b.n	8002f80 <map_int_pin+0x638>
            break;
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	e00a      	b.n	8002f80 <map_int_pin+0x638>
            break;
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	e008      	b.n	8002f80 <map_int_pin+0x638>
            break;
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	e006      	b.n	8002f80 <map_int_pin+0x638>
            break;
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	e004      	b.n	8002f80 <map_int_pin+0x638>
            break;
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	e002      	b.n	8002f80 <map_int_pin+0x638>
            break;
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	e000      	b.n	8002f80 <map_int_pin+0x638>
            break;
 8002f7e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8002f80:	46c0      	nop			@ (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <set_int_pin_conf>:
            break;
    }
}

static int8_t set_int_pin_conf(struct bma400_int_pin_conf int_conf, struct bma400_dev *dev)
{
 8002f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	8018      	strh	r0, [r3, #0]
 8002f92:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8002f94:	260f      	movs	r6, #15
 8002f96:	19bc      	adds	r4, r7, r6
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	250e      	movs	r5, #14
 8002f9c:	1979      	adds	r1, r7, r5
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	2024      	movs	r0, #36	@ 0x24
 8002fa2:	f7fe fb47 	bl	8001634 <bma400_get_regs>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8002faa:	19bb      	adds	r3, r7, r6
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	b25b      	sxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d13a      	bne.n	800302a <set_int_pin_conf+0xa2>
    {
        if (int_conf.int_chan == BMA400_INT_CHANNEL_1)
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d113      	bne.n	8002fe4 <set_int_pin_conf+0x5c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
 8002fbc:	0028      	movs	r0, r5
 8002fbe:	183b      	adds	r3, r7, r0
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	b25b      	sxtb	r3, r3
 8002fc4:	2206      	movs	r2, #6
 8002fc6:	4393      	bics	r3, r2
 8002fc8:	b25a      	sxtb	r2, r3
 8002fca:	1d3b      	adds	r3, r7, #4
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	18db      	adds	r3, r3, r3
 8002fd2:	b25b      	sxtb	r3, r3
 8002fd4:	2106      	movs	r1, #6
 8002fd6:	400b      	ands	r3, r1
 8002fd8:	b25b      	sxtb	r3, r3
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	b25b      	sxtb	r3, r3
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	183b      	adds	r3, r7, r0
 8002fe2:	701a      	strb	r2, [r3, #0]
        }

        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
 8002fe4:	1d3b      	adds	r3, r7, #4
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d113      	bne.n	8003014 <set_int_pin_conf+0x8c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 8002fec:	200e      	movs	r0, #14
 8002fee:	183b      	adds	r3, r7, r0
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	b25b      	sxtb	r3, r3
 8002ff4:	2260      	movs	r2, #96	@ 0x60
 8002ff6:	4393      	bics	r3, r2
 8002ff8:	b25a      	sxtb	r2, r3
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	785b      	ldrb	r3, [r3, #1]
 8002ffe:	b25b      	sxtb	r3, r3
 8003000:	015b      	lsls	r3, r3, #5
 8003002:	b25b      	sxtb	r3, r3
 8003004:	2160      	movs	r1, #96	@ 0x60
 8003006:	400b      	ands	r3, r1
 8003008:	b25b      	sxtb	r3, r3
 800300a:	4313      	orrs	r3, r2
 800300c:	b25b      	sxtb	r3, r3
 800300e:	b2da      	uxtb	r2, r3
 8003010:	183b      	adds	r3, r7, r0
 8003012:	701a      	strb	r2, [r3, #0]
        }

        /* Set the configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8003014:	230f      	movs	r3, #15
 8003016:	18fc      	adds	r4, r7, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	220e      	movs	r2, #14
 800301c:	18b9      	adds	r1, r7, r2
 800301e:	2201      	movs	r2, #1
 8003020:	2024      	movs	r0, #36	@ 0x24
 8003022:	f7fe fa89 	bl	8001538 <bma400_set_regs>
 8003026:	0003      	movs	r3, r0
 8003028:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800302a:	230f      	movs	r3, #15
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	b25b      	sxtb	r3, r3
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b005      	add	sp, #20
 8003038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800303a <set_fifo_conf>:

    return rslt;
}

static int8_t set_fifo_conf(const struct bma400_fifo_conf *fifo_conf, struct bma400_dev *dev)
{
 800303a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3];
    uint8_t sens_data[3];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8003044:	250f      	movs	r5, #15
 8003046:	197c      	adds	r4, r7, r5
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	0018      	movs	r0, r3
 800304c:	f7fe fe68 	bl	8001d20 <null_ptr_check>
 8003050:	0003      	movs	r3, r0
 8003052:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8003054:	197b      	adds	r3, r7, r5
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	b25b      	sxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d15b      	bne.n	8003116 <set_fifo_conf+0xdc>
    {
        /* Get the FIFO configurations and water-mark
         * values from the sensor
         */
        rslt = bma400_get_regs(BMA400_REG_FIFO_CONFIG_0, sens_data, 3, dev);
 800305e:	197c      	adds	r4, r7, r5
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2608      	movs	r6, #8
 8003064:	19b9      	adds	r1, r7, r6
 8003066:	2203      	movs	r2, #3
 8003068:	2026      	movs	r0, #38	@ 0x26
 800306a:	f7fe fae3 	bl	8001634 <bma400_get_regs>
 800306e:	0003      	movs	r3, r0
 8003070:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8003072:	197b      	adds	r3, r7, r5
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b25b      	sxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d14c      	bne.n	8003116 <set_fifo_conf+0xdc>
        {
            /* FIFO configurations */
            data_array[0] = fifo_conf->conf_regs;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	210c      	movs	r1, #12
 8003082:	187b      	adds	r3, r7, r1
 8003084:	701a      	strb	r2, [r3, #0]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	785b      	ldrb	r3, [r3, #1]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10c      	bne.n	80030a8 <set_fifo_conf+0x6e>
            {
                /* Disable the selected interrupt status */
                data_array[0] = sens_data[0] & (~data_array[0]);
 800308e:	19bb      	adds	r3, r7, r6
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b25b      	sxtb	r3, r3
 8003094:	187a      	adds	r2, r7, r1
 8003096:	7812      	ldrb	r2, [r2, #0]
 8003098:	b252      	sxtb	r2, r2
 800309a:	43d2      	mvns	r2, r2
 800309c:	b252      	sxtb	r2, r2
 800309e:	4013      	ands	r3, r2
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	701a      	strb	r2, [r3, #0]
            }

            /* FIFO water-mark values */
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	885b      	ldrh	r3, [r3, #2]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	210c      	movs	r1, #12
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	705a      	strb	r2, [r3, #1]
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	885b      	ldrh	r3, [r3, #2]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	187b      	adds	r3, r7, r1
 80030c0:	709a      	strb	r2, [r3, #2]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	789b      	ldrb	r3, [r3, #2]
 80030c6:	2207      	movs	r2, #7
 80030c8:	4013      	ands	r3, r2
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	709a      	strb	r2, [r3, #2]
            if ((data_array[1] == sens_data[1]) && (data_array[2] == sens_data[2]))
 80030d0:	187b      	adds	r3, r7, r1
 80030d2:	785a      	ldrb	r2, [r3, #1]
 80030d4:	2008      	movs	r0, #8
 80030d6:	183b      	adds	r3, r7, r0
 80030d8:	785b      	ldrb	r3, [r3, #1]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d110      	bne.n	8003100 <set_fifo_conf+0xc6>
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	789a      	ldrb	r2, [r3, #2]
 80030e2:	183b      	adds	r3, r7, r0
 80030e4:	789b      	ldrb	r3, [r3, #2]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d10a      	bne.n	8003100 <set_fifo_conf+0xc6>
            {
                /* Set the FIFO configurations in the
                 * sensor excluding the watermark value
                 */
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 1, dev);
 80030ea:	230f      	movs	r3, #15
 80030ec:	18fc      	adds	r4, r7, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	1879      	adds	r1, r7, r1
 80030f2:	2201      	movs	r2, #1
 80030f4:	2026      	movs	r0, #38	@ 0x26
 80030f6:	f7fe fa1f 	bl	8001538 <bma400_set_regs>
 80030fa:	0003      	movs	r3, r0
 80030fc:	7023      	strb	r3, [r4, #0]
 80030fe:	e00a      	b.n	8003116 <set_fifo_conf+0xdc>
            }
            else
            {
                /* Set the FIFO configurations in the sensor*/
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 3, dev);
 8003100:	230f      	movs	r3, #15
 8003102:	18fc      	adds	r4, r7, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	220c      	movs	r2, #12
 8003108:	18b9      	adds	r1, r7, r2
 800310a:	2203      	movs	r2, #3
 800310c:	2026      	movs	r0, #38	@ 0x26
 800310e:	f7fe fa13 	bl	8001538 <bma400_set_regs>
 8003112:	0003      	movs	r3, r0
 8003114:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8003116:	230f      	movs	r3, #15
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b25b      	sxtb	r3, r3
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b005      	add	sp, #20
 8003124:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003126 <get_fifo_length>:

static int8_t get_fifo_length(uint16_t *fifo_byte_cnt, struct bma400_dev *dev)
{
 8003126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003128:	b085      	sub	sp, #20
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2] = { 0 };
 8003130:	250c      	movs	r5, #12
 8003132:	197b      	adds	r3, r7, r5
 8003134:	2200      	movs	r2, #0
 8003136:	801a      	strh	r2, [r3, #0]

    rslt = bma400_get_regs(BMA400_REG_FIFO_LENGTH, data_array, 2, dev);
 8003138:	260f      	movs	r6, #15
 800313a:	19bc      	adds	r4, r7, r6
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	1979      	adds	r1, r7, r5
 8003140:	2202      	movs	r2, #2
 8003142:	2012      	movs	r0, #18
 8003144:	f7fe fa76 	bl	8001634 <bma400_get_regs>
 8003148:	0003      	movs	r3, r0
 800314a:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800314c:	19bb      	adds	r3, r7, r6
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	b25b      	sxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d113      	bne.n	800317e <get_fifo_length+0x58>
    {
        data_array[1] = BMA400_GET_BITS_POS_0(data_array[1], BMA400_FIFO_BYTES_CNT);
 8003156:	197b      	adds	r3, r7, r5
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	2207      	movs	r2, #7
 800315c:	4013      	ands	r3, r2
 800315e:	b2da      	uxtb	r2, r3
 8003160:	197b      	adds	r3, r7, r5
 8003162:	705a      	strb	r2, [r3, #1]

        /* Available data in FIFO is stored in fifo_byte_cnt*/
        *fifo_byte_cnt = ((uint16_t)data_array[1] << 8) | ((uint16_t)data_array[0]);
 8003164:	197b      	adds	r3, r7, r5
 8003166:	785b      	ldrb	r3, [r3, #1]
 8003168:	b21b      	sxth	r3, r3
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	b21a      	sxth	r2, r3
 800316e:	197b      	adds	r3, r7, r5
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b21b      	sxth	r3, r3
 8003174:	4313      	orrs	r3, r2
 8003176:	b21b      	sxth	r3, r3
 8003178:	b29a      	uxth	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	801a      	strh	r2, [r3, #0]
    }

    return rslt;
 800317e:	230f      	movs	r3, #15
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	b25b      	sxtb	r3, r3
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b005      	add	sp, #20
 800318c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800318e <read_fifo>:

static int8_t read_fifo(struct bma400_fifo_data *fifo, struct bma400_dev *dev)
{
 800318e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t fifo_addr = BMA400_REG_FIFO_DATA;
 8003198:	210e      	movs	r1, #14
 800319a:	187b      	adds	r3, r7, r1
 800319c:	2214      	movs	r2, #20
 800319e:	701a      	strb	r2, [r3, #0]

    if (dev->intf == BMA400_SPI_INTF)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d106      	bne.n	80031b6 <read_fifo+0x28>
    {
        /* SPI mask is added */
        fifo_addr = fifo_addr | BMA400_SPI_RD_MASK;
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	187a      	adds	r2, r7, r1
 80031ac:	7812      	ldrb	r2, [r2, #0]
 80031ae:	2180      	movs	r1, #128	@ 0x80
 80031b0:	4249      	negs	r1, r1
 80031b2:	430a      	orrs	r2, r1
 80031b4:	701a      	strb	r2, [r3, #0]
    }

    /* This update will take care of dummy byte necessity based on interface selection */
    fifo->length += dev->dummy_byte;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	889b      	ldrh	r3, [r3, #4]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	7a12      	ldrb	r2, [r2, #8]
 80031be:	189b      	adds	r3, r3, r2
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	809a      	strh	r2, [r3, #4]

    /* Read the FIFO enable bit */
    rslt = bma400_get_regs(BMA400_REG_FIFO_READ_EN, &reg_data, 1, dev);
 80031c6:	260f      	movs	r6, #15
 80031c8:	19bc      	adds	r4, r7, r6
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	250d      	movs	r5, #13
 80031ce:	1979      	adds	r1, r7, r5
 80031d0:	2201      	movs	r2, #1
 80031d2:	2029      	movs	r0, #41	@ 0x29
 80031d4:	f7fe fa2e 	bl	8001634 <bma400_get_regs>
 80031d8:	0003      	movs	r3, r0
 80031da:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 80031dc:	19bb      	adds	r3, r7, r6
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d15f      	bne.n	80032a6 <read_fifo+0x118>
    {
        /* FIFO read disable bit */
        if (reg_data == 0)
 80031e6:	197b      	adds	r3, r7, r5
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d11b      	bne.n	8003226 <read_fifo+0x98>
        {
            /* Read FIFO Buffer since FIFO read is enabled */
            dev->intf_rslt = dev->read(fifo_addr, fifo->data, (uint32_t)fifo->length, dev->intf_ptr);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68dc      	ldr	r4, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	889b      	ldrh	r3, [r3, #4]
 80031fa:	001d      	movs	r5, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	230e      	movs	r3, #14
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	7818      	ldrb	r0, [r3, #0]
 8003206:	0013      	movs	r3, r2
 8003208:	002a      	movs	r2, r5
 800320a:	47a0      	blx	r4
 800320c:	0003      	movs	r3, r0
 800320e:	001a      	movs	r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	771a      	strb	r2, [r3, #28]
            if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	7f1b      	ldrb	r3, [r3, #28]
 8003218:	b25b      	sxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d043      	beq.n	80032a6 <read_fifo+0x118>
            {
                rslt = BMA400_E_COM_FAIL;
 800321e:	19bb      	adds	r3, r7, r6
 8003220:	22fe      	movs	r2, #254	@ 0xfe
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	e03f      	b.n	80032a6 <read_fifo+0x118>
            }
        }
        else
        {
            /* Enable FIFO reading */
            reg_data = 0;
 8003226:	260d      	movs	r6, #13
 8003228:	19bb      	adds	r3, r7, r6
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
            rslt = bma400_set_regs(BMA400_REG_FIFO_READ_EN, &reg_data, 1, dev);
 800322e:	250f      	movs	r5, #15
 8003230:	197c      	adds	r4, r7, r5
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	19b9      	adds	r1, r7, r6
 8003236:	2201      	movs	r2, #1
 8003238:	2029      	movs	r0, #41	@ 0x29
 800323a:	f7fe f97d 	bl	8001538 <bma400_set_regs>
 800323e:	0003      	movs	r3, r0
 8003240:	7023      	strb	r3, [r4, #0]
            if (rslt == BMA400_OK)
 8003242:	197b      	adds	r3, r7, r5
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b25b      	sxtb	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d12c      	bne.n	80032a6 <read_fifo+0x118>
            {
                /* Delay to enable the FIFO */
                dev->delay_us(1000, dev->intf_ptr);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	23fa      	movs	r3, #250	@ 0xfa
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	0018      	movs	r0, r3
 800325a:	4790      	blx	r2

                /* Read FIFO Buffer since FIFO read is enabled*/
                dev->intf_rslt = dev->read(fifo_addr, fifo->data, (uint32_t)fifo->length, dev->intf_ptr);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68dc      	ldr	r4, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6819      	ldr	r1, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	889b      	ldrh	r3, [r3, #4]
 8003268:	001d      	movs	r5, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	230e      	movs	r3, #14
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	7818      	ldrb	r0, [r3, #0]
 8003274:	0013      	movs	r3, r2
 8003276:	002a      	movs	r2, r5
 8003278:	47a0      	blx	r4
 800327a:	0003      	movs	r3, r0
 800327c:	001a      	movs	r2, r3
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	771a      	strb	r2, [r3, #28]

                if (dev->intf_rslt == BMA400_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	7f1b      	ldrb	r3, [r3, #28]
 8003286:	b25b      	sxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10c      	bne.n	80032a6 <read_fifo+0x118>
                {
                    /* Disable FIFO reading */
                    reg_data = 1;
 800328c:	19bb      	adds	r3, r7, r6
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
                    rslt = bma400_set_regs(BMA400_REG_FIFO_READ_EN, &reg_data, 1, dev);
 8003292:	250f      	movs	r5, #15
 8003294:	197c      	adds	r4, r7, r5
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	19b9      	adds	r1, r7, r6
 800329a:	2201      	movs	r2, #1
 800329c:	2029      	movs	r0, #41	@ 0x29
 800329e:	f7fe f94b 	bl	8001538 <bma400_set_regs>
 80032a2:	0003      	movs	r3, r0
 80032a4:	7023      	strb	r3, [r4, #0]
                }
            }
        }
    }

    return rslt;
 80032a6:	230f      	movs	r3, #15
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b25b      	sxtb	r3, r3
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b005      	add	sp, #20
 80032b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032b8 <unpack_accel_frame>:

static void unpack_accel_frame(struct bma400_fifo_data *fifo,
                               struct bma400_fifo_sensor_data *accel_data,
                               uint16_t *frame_count,
                               const struct bma400_dev *dev)
{
 80032b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ba:	b089      	sub	sp, #36	@ 0x24
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
    /* Frame header information is stored */
    uint8_t frame_header = 0;
 80032c6:	2315      	movs	r3, #21
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]

    /* Data index of the parsed byte from FIFO */
    uint16_t data_index;

    /* Number of accel frames parsed */
    uint16_t accel_index = 0;
 80032ce:	2316      	movs	r3, #22
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	2200      	movs	r2, #0
 80032d4:	801a      	strh	r2, [r3, #0]

    /* Variable to check frame availability */
    uint8_t frame_available = BMA400_ENABLE;
 80032d6:	2311      	movs	r3, #17
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]

    /* Check if this is the first iteration of data unpacking
     * if yes, then consider dummy byte on SPI
     */
    if (fifo->accel_byte_start_idx == 0)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	895b      	ldrh	r3, [r3, #10]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <unpack_accel_frame+0x38>
    {
        /* Dummy byte included */
        fifo->accel_byte_start_idx = dev->dummy_byte;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	7a1b      	ldrb	r3, [r3, #8]
 80032ea:	001a      	movs	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	815a      	strh	r2, [r3, #10]
    }

    for (data_index = fifo->accel_byte_start_idx; data_index < fifo->length;)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	895a      	ldrh	r2, [r3, #10]
 80032f4:	2312      	movs	r3, #18
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	e1bf      	b.n	800367c <unpack_accel_frame+0x3c4>
    {
        /*Header byte is stored in the variable frame_header*/
        frame_header = fifo->data[data_index];
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2412      	movs	r4, #18
 8003302:	193a      	adds	r2, r7, r4
 8003304:	8812      	ldrh	r2, [r2, #0]
 8003306:	189a      	adds	r2, r3, r2
 8003308:	2015      	movs	r0, #21
 800330a:	183b      	adds	r3, r7, r0
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	701a      	strb	r2, [r3, #0]

        /* Store the Accel 8 bit or 12 bit mode */
        accel_width = BMA400_GET_BITS(frame_header, BMA400_FIFO_8_BIT_EN);
 8003310:	183b      	adds	r3, r7, r0
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	111b      	asrs	r3, r3, #4
 8003316:	b2da      	uxtb	r2, r3
 8003318:	2314      	movs	r3, #20
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	2101      	movs	r1, #1
 800331e:	400a      	ands	r2, r1
 8003320:	701a      	strb	r2, [r3, #0]

        /* Exclude the 8/12 bit mode data from frame header */
        frame_header = frame_header & BMA400_AWIDTH_MASK;
 8003322:	183b      	adds	r3, r7, r0
 8003324:	183a      	adds	r2, r7, r0
 8003326:	7812      	ldrb	r2, [r2, #0]
 8003328:	2110      	movs	r1, #16
 800332a:	438a      	bics	r2, r1
 800332c:	701a      	strb	r2, [r3, #0]

        /*Index is moved to next byte where the data is starting*/
        data_index++;
 800332e:	193b      	adds	r3, r7, r4
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	3301      	adds	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	193b      	adds	r3, r7, r4
 8003338:	801a      	strh	r2, [r3, #0]
        switch (frame_header)
 800333a:	183b      	adds	r3, r7, r0
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b48      	cmp	r3, #72	@ 0x48
 8003340:	d100      	bne.n	8003344 <unpack_accel_frame+0x8c>
 8003342:	e160      	b.n	8003606 <unpack_accel_frame+0x34e>
 8003344:	da00      	bge.n	8003348 <unpack_accel_frame+0x90>
 8003346:	e17b      	b.n	8003640 <unpack_accel_frame+0x388>
 8003348:	2ba0      	cmp	r3, #160	@ 0xa0
 800334a:	dd00      	ble.n	800334e <unpack_accel_frame+0x96>
 800334c:	e178      	b.n	8003640 <unpack_accel_frame+0x388>
 800334e:	2b80      	cmp	r3, #128	@ 0x80
 8003350:	da00      	bge.n	8003354 <unpack_accel_frame+0x9c>
 8003352:	e175      	b.n	8003640 <unpack_accel_frame+0x388>
 8003354:	3b80      	subs	r3, #128	@ 0x80
 8003356:	2b20      	cmp	r3, #32
 8003358:	d900      	bls.n	800335c <unpack_accel_frame+0xa4>
 800335a:	e171      	b.n	8003640 <unpack_accel_frame+0x388>
 800335c:	009a      	lsls	r2, r3, #2
 800335e:	4bd3      	ldr	r3, [pc, #844]	@ (80036ac <unpack_accel_frame+0x3f4>)
 8003360:	18d3      	adds	r3, r2, r3
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	469f      	mov	pc, r3
        {
            case BMA400_FIFO_XYZ_ENABLE:
                check_frame_available(fifo, &frame_available, accel_width, BMA400_FIFO_XYZ_ENABLE, &data_index);
 8003366:	2414      	movs	r4, #20
 8003368:	193b      	adds	r3, r7, r4
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	2511      	movs	r5, #17
 800336e:	1979      	adds	r1, r7, r5
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	2612      	movs	r6, #18
 8003374:	19bb      	adds	r3, r7, r6
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	238e      	movs	r3, #142	@ 0x8e
 800337a:	f000 f999 	bl	80036b0 <check_frame_available>
                if (frame_available != BMA400_DISABLE)
 800337e:	197b      	adds	r3, r7, r5
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d100      	bne.n	8003388 <unpack_accel_frame+0xd0>
 8003386:	e161      	b.n	800364c <unpack_accel_frame+0x394>
                {
                    /* Extract and store accel xyz data */
                    unpack_accel(fifo, &accel_data[accel_index], &data_index, accel_width, frame_header);
 8003388:	2516      	movs	r5, #22
 800338a:	197b      	adds	r3, r7, r5
 800338c:	881a      	ldrh	r2, [r3, #0]
 800338e:	0013      	movs	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	189b      	adds	r3, r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	001a      	movs	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	1899      	adds	r1, r3, r2
 800339c:	193b      	adds	r3, r7, r4
 800339e:	781c      	ldrb	r4, [r3, #0]
 80033a0:	19ba      	adds	r2, r7, r6
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	2315      	movs	r3, #21
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	0023      	movs	r3, r4
 80033ae:	f000 fa35 	bl	800381c <unpack_accel>
                    accel_index++;
 80033b2:	197b      	adds	r3, r7, r5
 80033b4:	881a      	ldrh	r2, [r3, #0]
 80033b6:	197b      	adds	r3, r7, r5
 80033b8:	3201      	adds	r2, #1
 80033ba:	801a      	strh	r2, [r3, #0]
                }

                break;
 80033bc:	e146      	b.n	800364c <unpack_accel_frame+0x394>
            case BMA400_FIFO_X_ENABLE:
                check_frame_available(fifo, &frame_available, accel_width, BMA400_FIFO_X_ENABLE, &data_index);
 80033be:	2414      	movs	r4, #20
 80033c0:	193b      	adds	r3, r7, r4
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	2511      	movs	r5, #17
 80033c6:	1979      	adds	r1, r7, r5
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	2612      	movs	r6, #18
 80033cc:	19bb      	adds	r3, r7, r6
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2382      	movs	r3, #130	@ 0x82
 80033d2:	f000 f96d 	bl	80036b0 <check_frame_available>
                if (frame_available != BMA400_DISABLE)
 80033d6:	197b      	adds	r3, r7, r5
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d100      	bne.n	80033e0 <unpack_accel_frame+0x128>
 80033de:	e137      	b.n	8003650 <unpack_accel_frame+0x398>
                {
                    /* Extract and store accel x data */
                    unpack_accel(fifo, &accel_data[accel_index], &data_index, accel_width, frame_header);
 80033e0:	2516      	movs	r5, #22
 80033e2:	197b      	adds	r3, r7, r5
 80033e4:	881a      	ldrh	r2, [r3, #0]
 80033e6:	0013      	movs	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	189b      	adds	r3, r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	001a      	movs	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	1899      	adds	r1, r3, r2
 80033f4:	193b      	adds	r3, r7, r4
 80033f6:	781c      	ldrb	r4, [r3, #0]
 80033f8:	19ba      	adds	r2, r7, r6
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	2315      	movs	r3, #21
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	0023      	movs	r3, r4
 8003406:	f000 fa09 	bl	800381c <unpack_accel>
                    accel_index++;
 800340a:	197b      	adds	r3, r7, r5
 800340c:	881a      	ldrh	r2, [r3, #0]
 800340e:	197b      	adds	r3, r7, r5
 8003410:	3201      	adds	r2, #1
 8003412:	801a      	strh	r2, [r3, #0]
                }

                break;
 8003414:	e11c      	b.n	8003650 <unpack_accel_frame+0x398>
            case BMA400_FIFO_Y_ENABLE:
                check_frame_available(fifo, &frame_available, accel_width, BMA400_FIFO_Y_ENABLE, &data_index);
 8003416:	2414      	movs	r4, #20
 8003418:	193b      	adds	r3, r7, r4
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	2511      	movs	r5, #17
 800341e:	1979      	adds	r1, r7, r5
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	2612      	movs	r6, #18
 8003424:	19bb      	adds	r3, r7, r6
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2384      	movs	r3, #132	@ 0x84
 800342a:	f000 f941 	bl	80036b0 <check_frame_available>
                if (frame_available != BMA400_DISABLE)
 800342e:	197b      	adds	r3, r7, r5
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d100      	bne.n	8003438 <unpack_accel_frame+0x180>
 8003436:	e10d      	b.n	8003654 <unpack_accel_frame+0x39c>
                {
                    /* Extract and store accel y data */
                    unpack_accel(fifo, &accel_data[accel_index], &data_index, accel_width, frame_header);
 8003438:	2516      	movs	r5, #22
 800343a:	197b      	adds	r3, r7, r5
 800343c:	881a      	ldrh	r2, [r3, #0]
 800343e:	0013      	movs	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	189b      	adds	r3, r3, r2
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	001a      	movs	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	1899      	adds	r1, r3, r2
 800344c:	193b      	adds	r3, r7, r4
 800344e:	781c      	ldrb	r4, [r3, #0]
 8003450:	19ba      	adds	r2, r7, r6
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	2315      	movs	r3, #21
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	0023      	movs	r3, r4
 800345e:	f000 f9dd 	bl	800381c <unpack_accel>
                    accel_index++;
 8003462:	197b      	adds	r3, r7, r5
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	197b      	adds	r3, r7, r5
 8003468:	3201      	adds	r2, #1
 800346a:	801a      	strh	r2, [r3, #0]
                }

                break;
 800346c:	e0f2      	b.n	8003654 <unpack_accel_frame+0x39c>
            case BMA400_FIFO_Z_ENABLE:
                check_frame_available(fifo, &frame_available, accel_width, BMA400_FIFO_Z_ENABLE, &data_index);
 800346e:	2414      	movs	r4, #20
 8003470:	193b      	adds	r3, r7, r4
 8003472:	781a      	ldrb	r2, [r3, #0]
 8003474:	2511      	movs	r5, #17
 8003476:	1979      	adds	r1, r7, r5
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	2612      	movs	r6, #18
 800347c:	19bb      	adds	r3, r7, r6
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	2388      	movs	r3, #136	@ 0x88
 8003482:	f000 f915 	bl	80036b0 <check_frame_available>
                if (frame_available != BMA400_DISABLE)
 8003486:	197b      	adds	r3, r7, r5
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d100      	bne.n	8003490 <unpack_accel_frame+0x1d8>
 800348e:	e0e3      	b.n	8003658 <unpack_accel_frame+0x3a0>
                {
                    /* Extract and store accel z data */
                    unpack_accel(fifo, &accel_data[accel_index], &data_index, accel_width, frame_header);
 8003490:	2516      	movs	r5, #22
 8003492:	197b      	adds	r3, r7, r5
 8003494:	881a      	ldrh	r2, [r3, #0]
 8003496:	0013      	movs	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	189b      	adds	r3, r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	001a      	movs	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	1899      	adds	r1, r3, r2
 80034a4:	193b      	adds	r3, r7, r4
 80034a6:	781c      	ldrb	r4, [r3, #0]
 80034a8:	19ba      	adds	r2, r7, r6
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	2315      	movs	r3, #21
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	0023      	movs	r3, r4
 80034b6:	f000 f9b1 	bl	800381c <unpack_accel>
                    accel_index++;
 80034ba:	197b      	adds	r3, r7, r5
 80034bc:	881a      	ldrh	r2, [r3, #0]
 80034be:	197b      	adds	r3, r7, r5
 80034c0:	3201      	adds	r2, #1
 80034c2:	801a      	strh	r2, [r3, #0]
                }

                break;
 80034c4:	e0c8      	b.n	8003658 <unpack_accel_frame+0x3a0>
            case BMA400_FIFO_XY_ENABLE:
                check_frame_available(fifo, &frame_available, accel_width, BMA400_FIFO_XY_ENABLE, &data_index);
 80034c6:	2414      	movs	r4, #20
 80034c8:	193b      	adds	r3, r7, r4
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	2511      	movs	r5, #17
 80034ce:	1979      	adds	r1, r7, r5
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	2612      	movs	r6, #18
 80034d4:	19bb      	adds	r3, r7, r6
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2386      	movs	r3, #134	@ 0x86
 80034da:	f000 f8e9 	bl	80036b0 <check_frame_available>
                if (frame_available != BMA400_DISABLE)
 80034de:	197b      	adds	r3, r7, r5
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d100      	bne.n	80034e8 <unpack_accel_frame+0x230>
 80034e6:	e0b9      	b.n	800365c <unpack_accel_frame+0x3a4>
                {
                    /* Extract and store accel xy data */
                    unpack_accel(fifo, &accel_data[accel_index], &data_index, accel_width, frame_header);
 80034e8:	2516      	movs	r5, #22
 80034ea:	197b      	adds	r3, r7, r5
 80034ec:	881a      	ldrh	r2, [r3, #0]
 80034ee:	0013      	movs	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	189b      	adds	r3, r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	001a      	movs	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	1899      	adds	r1, r3, r2
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	781c      	ldrb	r4, [r3, #0]
 8003500:	19ba      	adds	r2, r7, r6
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	2315      	movs	r3, #21
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	0023      	movs	r3, r4
 800350e:	f000 f985 	bl	800381c <unpack_accel>
                    accel_index++;
 8003512:	197b      	adds	r3, r7, r5
 8003514:	881a      	ldrh	r2, [r3, #0]
 8003516:	197b      	adds	r3, r7, r5
 8003518:	3201      	adds	r2, #1
 800351a:	801a      	strh	r2, [r3, #0]
                }

                break;
 800351c:	e09e      	b.n	800365c <unpack_accel_frame+0x3a4>
            case BMA400_FIFO_YZ_ENABLE:
                check_frame_available(fifo, &frame_available, accel_width, BMA400_FIFO_YZ_ENABLE, &data_index);
 800351e:	2414      	movs	r4, #20
 8003520:	193b      	adds	r3, r7, r4
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	2511      	movs	r5, #17
 8003526:	1979      	adds	r1, r7, r5
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	2612      	movs	r6, #18
 800352c:	19bb      	adds	r3, r7, r6
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	238c      	movs	r3, #140	@ 0x8c
 8003532:	f000 f8bd 	bl	80036b0 <check_frame_available>
                if (frame_available != BMA400_DISABLE)
 8003536:	197b      	adds	r3, r7, r5
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d100      	bne.n	8003540 <unpack_accel_frame+0x288>
 800353e:	e08f      	b.n	8003660 <unpack_accel_frame+0x3a8>
                {
                    /* Extract and store accel yz data */
                    unpack_accel(fifo, &accel_data[accel_index], &data_index, accel_width, frame_header);
 8003540:	2516      	movs	r5, #22
 8003542:	197b      	adds	r3, r7, r5
 8003544:	881a      	ldrh	r2, [r3, #0]
 8003546:	0013      	movs	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	189b      	adds	r3, r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	001a      	movs	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	1899      	adds	r1, r3, r2
 8003554:	193b      	adds	r3, r7, r4
 8003556:	781c      	ldrb	r4, [r3, #0]
 8003558:	19ba      	adds	r2, r7, r6
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	2315      	movs	r3, #21
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	0023      	movs	r3, r4
 8003566:	f000 f959 	bl	800381c <unpack_accel>
                    accel_index++;
 800356a:	197b      	adds	r3, r7, r5
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	197b      	adds	r3, r7, r5
 8003570:	3201      	adds	r2, #1
 8003572:	801a      	strh	r2, [r3, #0]
                }

                break;
 8003574:	e074      	b.n	8003660 <unpack_accel_frame+0x3a8>
            case BMA400_FIFO_XZ_ENABLE:
                check_frame_available(fifo, &frame_available, accel_width, BMA400_FIFO_YZ_ENABLE, &data_index);
 8003576:	2414      	movs	r4, #20
 8003578:	193b      	adds	r3, r7, r4
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	2511      	movs	r5, #17
 800357e:	1979      	adds	r1, r7, r5
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	2612      	movs	r6, #18
 8003584:	19bb      	adds	r3, r7, r6
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	238c      	movs	r3, #140	@ 0x8c
 800358a:	f000 f891 	bl	80036b0 <check_frame_available>
                if (frame_available != BMA400_DISABLE)
 800358e:	197b      	adds	r3, r7, r5
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d066      	beq.n	8003664 <unpack_accel_frame+0x3ac>
                {
                    /* Extract and store accel xz data */
                    unpack_accel(fifo, &accel_data[accel_index], &data_index, accel_width, frame_header);
 8003596:	2516      	movs	r5, #22
 8003598:	197b      	adds	r3, r7, r5
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	0013      	movs	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	189b      	adds	r3, r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	001a      	movs	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	1899      	adds	r1, r3, r2
 80035aa:	193b      	adds	r3, r7, r4
 80035ac:	781c      	ldrb	r4, [r3, #0]
 80035ae:	19ba      	adds	r2, r7, r6
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	2315      	movs	r3, #21
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	0023      	movs	r3, r4
 80035bc:	f000 f92e 	bl	800381c <unpack_accel>
                    accel_index++;
 80035c0:	197b      	adds	r3, r7, r5
 80035c2:	881a      	ldrh	r2, [r3, #0]
 80035c4:	197b      	adds	r3, r7, r5
 80035c6:	3201      	adds	r2, #1
 80035c8:	801a      	strh	r2, [r3, #0]
                }

                break;
 80035ca:	e04b      	b.n	8003664 <unpack_accel_frame+0x3ac>
            case BMA400_FIFO_SENSOR_TIME:
                check_frame_available(fifo, &frame_available, accel_width, BMA400_FIFO_SENSOR_TIME, &data_index);
 80035cc:	2314      	movs	r3, #20
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	2411      	movs	r4, #17
 80035d4:	1939      	adds	r1, r7, r4
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	2512      	movs	r5, #18
 80035da:	197b      	adds	r3, r7, r5
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	23a0      	movs	r3, #160	@ 0xa0
 80035e0:	f000 f866 	bl	80036b0 <check_frame_available>
                if (frame_available != BMA400_DISABLE)
 80035e4:	193b      	adds	r3, r7, r4
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d03d      	beq.n	8003668 <unpack_accel_frame+0x3b0>
                {
                    /* Unpack and store the sensor time data */
                    unpack_sensortime_frame(fifo, &data_index);
 80035ec:	197a      	adds	r2, r7, r5
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	0011      	movs	r1, r2
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 fa96 	bl	8003b24 <unpack_sensortime_frame>
                }

                break;
 80035f8:	e036      	b.n	8003668 <unpack_accel_frame+0x3b0>
            case BMA400_FIFO_EMPTY_FRAME:

                /* Update the data index as complete */
                data_index = fifo->length;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	889a      	ldrh	r2, [r3, #4]
 80035fe:	2312      	movs	r3, #18
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	801a      	strh	r2, [r3, #0]
                break;
 8003604:	e033      	b.n	800366e <unpack_accel_frame+0x3b6>
            case BMA400_FIFO_CONTROL_FRAME:
                check_frame_available(fifo, &frame_available, accel_width, BMA400_FIFO_CONTROL_FRAME, &data_index);
 8003606:	2314      	movs	r3, #20
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	2511      	movs	r5, #17
 800360e:	1979      	adds	r1, r7, r5
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	2412      	movs	r4, #18
 8003614:	193b      	adds	r3, r7, r4
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	2348      	movs	r3, #72	@ 0x48
 800361a:	f000 f849 	bl	80036b0 <check_frame_available>
                if (frame_available != BMA400_DISABLE)
 800361e:	197b      	adds	r3, r7, r5
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d022      	beq.n	800366c <unpack_accel_frame+0x3b4>
                {
                    /* Store the configuration change data from FIFO */
                    fifo->conf_change = fifo->data[data_index++];
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	193b      	adds	r3, r7, r4
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	1c59      	adds	r1, r3, #1
 8003630:	b288      	uxth	r0, r1
 8003632:	1939      	adds	r1, r7, r4
 8003634:	8008      	strh	r0, [r1, #0]
 8003636:	18d3      	adds	r3, r2, r3
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	731a      	strb	r2, [r3, #12]
                }

                break;
 800363e:	e015      	b.n	800366c <unpack_accel_frame+0x3b4>
            default:

                /* Update the data index as complete */
                data_index = fifo->length;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	889a      	ldrh	r2, [r3, #4]
 8003644:	2312      	movs	r3, #18
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	801a      	strh	r2, [r3, #0]
                break;
 800364a:	e010      	b.n	800366e <unpack_accel_frame+0x3b6>
                break;
 800364c:	46c0      	nop			@ (mov r8, r8)
 800364e:	e00e      	b.n	800366e <unpack_accel_frame+0x3b6>
                break;
 8003650:	46c0      	nop			@ (mov r8, r8)
 8003652:	e00c      	b.n	800366e <unpack_accel_frame+0x3b6>
                break;
 8003654:	46c0      	nop			@ (mov r8, r8)
 8003656:	e00a      	b.n	800366e <unpack_accel_frame+0x3b6>
                break;
 8003658:	46c0      	nop			@ (mov r8, r8)
 800365a:	e008      	b.n	800366e <unpack_accel_frame+0x3b6>
                break;
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	e006      	b.n	800366e <unpack_accel_frame+0x3b6>
                break;
 8003660:	46c0      	nop			@ (mov r8, r8)
 8003662:	e004      	b.n	800366e <unpack_accel_frame+0x3b6>
                break;
 8003664:	46c0      	nop			@ (mov r8, r8)
 8003666:	e002      	b.n	800366e <unpack_accel_frame+0x3b6>
                break;
 8003668:	46c0      	nop			@ (mov r8, r8)
 800366a:	e000      	b.n	800366e <unpack_accel_frame+0x3b6>
                break;
 800366c:	46c0      	nop			@ (mov r8, r8)
        }
        if (*frame_count == accel_index)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	2216      	movs	r2, #22
 8003674:	18ba      	adds	r2, r7, r2
 8003676:	8812      	ldrh	r2, [r2, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d008      	beq.n	800368e <unpack_accel_frame+0x3d6>
    for (data_index = fifo->accel_byte_start_idx; data_index < fifo->length;)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	889a      	ldrh	r2, [r3, #4]
 8003680:	2312      	movs	r3, #18
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d900      	bls.n	800368c <unpack_accel_frame+0x3d4>
 800368a:	e637      	b.n	80032fc <unpack_accel_frame+0x44>
 800368c:	e000      	b.n	8003690 <unpack_accel_frame+0x3d8>
        {
            /* Frames read completely*/
            break;
 800368e:	46c0      	nop			@ (mov r8, r8)
        }
    }

    /* Update the data index */
    fifo->accel_byte_start_idx = data_index;
 8003690:	2312      	movs	r3, #18
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	815a      	strh	r2, [r3, #10]

    /* Update number of accel frame index */
    *frame_count = accel_index;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2216      	movs	r2, #22
 800369e:	18ba      	adds	r2, r7, r2
 80036a0:	8812      	ldrh	r2, [r2, #0]
 80036a2:	801a      	strh	r2, [r3, #0]
}
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b007      	add	sp, #28
 80036aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ac:	08007b5c 	.word	0x08007b5c

080036b0 <check_frame_available>:
static void check_frame_available(const struct bma400_fifo_data *fifo,
                                  uint8_t *frame_available,
                                  uint8_t accel_width,
                                  uint8_t data_en,
                                  uint16_t *data_index)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	0019      	movs	r1, r3
 80036bc:	1dfb      	adds	r3, r7, #7
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	1dbb      	adds	r3, r7, #6
 80036c2:	1c0a      	adds	r2, r1, #0
 80036c4:	701a      	strb	r2, [r3, #0]
    switch (data_en)
 80036c6:	1dbb      	adds	r3, r7, #6
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b48      	cmp	r3, #72	@ 0x48
 80036cc:	d100      	bne.n	80036d0 <check_frame_available+0x20>
 80036ce:	e086      	b.n	80037de <check_frame_available+0x12e>
 80036d0:	da00      	bge.n	80036d4 <check_frame_available+0x24>
 80036d2:	e092      	b.n	80037fa <check_frame_available+0x14a>
 80036d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80036d6:	dd00      	ble.n	80036da <check_frame_available+0x2a>
 80036d8:	e08f      	b.n	80037fa <check_frame_available+0x14a>
 80036da:	2b82      	cmp	r3, #130	@ 0x82
 80036dc:	da00      	bge.n	80036e0 <check_frame_available+0x30>
 80036de:	e08c      	b.n	80037fa <check_frame_available+0x14a>
 80036e0:	3b82      	subs	r3, #130	@ 0x82
 80036e2:	2b1e      	cmp	r3, #30
 80036e4:	d900      	bls.n	80036e8 <check_frame_available+0x38>
 80036e6:	e088      	b.n	80037fa <check_frame_available+0x14a>
 80036e8:	009a      	lsls	r2, r3, #2
 80036ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003818 <check_frame_available+0x168>)
 80036ec:	18d3      	adds	r3, r2, r3
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	469f      	mov	pc, r3
    {
        case BMA400_FIFO_XYZ_ENABLE:

            /* Handling case of 12 bit/ 8 bit data available in FIFO */
            if (accel_width == BMA400_12_BIT_FIFO_DATA)
 80036f2:	1dfb      	adds	r3, r7, #7
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10f      	bne.n	800371a <check_frame_available+0x6a>
            {
                if ((*data_index + 6) > fifo->length)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	3305      	adds	r3, #5
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	8892      	ldrh	r2, [r2, #4]
 8003704:	4293      	cmp	r3, r2
 8003706:	da00      	bge.n	800370a <check_frame_available+0x5a>
 8003708:	e079      	b.n	80037fe <check_frame_available+0x14e>
                {
                    /* Partial frame available */
                    *data_index = fifo->length;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	889a      	ldrh	r2, [r3, #4]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	801a      	strh	r2, [r3, #0]
                    *frame_available = BMA400_DISABLE;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
                /* Partial frame available */
                *data_index = fifo->length;
                *frame_available = BMA400_DISABLE;
            }

            break;
 8003718:	e071      	b.n	80037fe <check_frame_available+0x14e>
            else if ((*data_index + 3) > fifo->length)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	3302      	adds	r3, #2
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	8892      	ldrh	r2, [r2, #4]
 8003724:	4293      	cmp	r3, r2
 8003726:	da00      	bge.n	800372a <check_frame_available+0x7a>
 8003728:	e069      	b.n	80037fe <check_frame_available+0x14e>
                *data_index = fifo->length;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	889a      	ldrh	r2, [r3, #4]
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	801a      	strh	r2, [r3, #0]
                *frame_available = BMA400_DISABLE;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
            break;
 8003738:	e061      	b.n	80037fe <check_frame_available+0x14e>
        case BMA400_FIFO_X_ENABLE:
        case BMA400_FIFO_Y_ENABLE:
        case BMA400_FIFO_Z_ENABLE:

            /* Handling case of 12 bit/ 8 bit data available in FIFO */
            if (accel_width == BMA400_12_BIT_FIFO_DATA)
 800373a:	1dfb      	adds	r3, r7, #7
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10e      	bne.n	8003760 <check_frame_available+0xb0>
            {
                if ((*data_index + 2) > fifo->length)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	8892      	ldrh	r2, [r2, #4]
 800374c:	4293      	cmp	r3, r2
 800374e:	db58      	blt.n	8003802 <check_frame_available+0x152>
                {
                    /* Partial frame available */
                    *data_index = fifo->length;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	889a      	ldrh	r2, [r3, #4]
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	801a      	strh	r2, [r3, #0]
                    *frame_available = BMA400_DISABLE;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]
                /* Partial frame available */
                *data_index = fifo->length;
                *frame_available = BMA400_DISABLE;
            }

            break;
 800375e:	e050      	b.n	8003802 <check_frame_available+0x152>
            else if ((*data_index + 1) > fifo->length)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	881a      	ldrh	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	889b      	ldrh	r3, [r3, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d34a      	bcc.n	8003802 <check_frame_available+0x152>
                *data_index = fifo->length;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	889a      	ldrh	r2, [r3, #4]
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	801a      	strh	r2, [r3, #0]
                *frame_available = BMA400_DISABLE;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
            break;
 800377a:	e042      	b.n	8003802 <check_frame_available+0x152>
        case BMA400_FIFO_XY_ENABLE:
        case BMA400_FIFO_YZ_ENABLE:
        case BMA400_FIFO_XZ_ENABLE:

            /* Handling case of 12 bit/ 8 bit data available in FIFO */
            if (accel_width == BMA400_12_BIT_FIFO_DATA)
 800377c:	1dfb      	adds	r3, r7, #7
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d10e      	bne.n	80037a2 <check_frame_available+0xf2>
            {
                if ((*data_index + 4) > fifo->length)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	3303      	adds	r3, #3
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	8892      	ldrh	r2, [r2, #4]
 800378e:	4293      	cmp	r3, r2
 8003790:	db39      	blt.n	8003806 <check_frame_available+0x156>
                {
                    /* Partial frame available */
                    *data_index = fifo->length;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	889a      	ldrh	r2, [r3, #4]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	801a      	strh	r2, [r3, #0]
                    *frame_available = BMA400_DISABLE;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
                /* Partial frame available */
                *data_index = fifo->length;
                *frame_available = BMA400_DISABLE;
            }

            break;
 80037a0:	e031      	b.n	8003806 <check_frame_available+0x156>
            else if ((*data_index + 2) > fifo->length)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	8892      	ldrh	r2, [r2, #4]
 80037ac:	4293      	cmp	r3, r2
 80037ae:	db2a      	blt.n	8003806 <check_frame_available+0x156>
                *data_index = fifo->length;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	889a      	ldrh	r2, [r3, #4]
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	801a      	strh	r2, [r3, #0]
                *frame_available = BMA400_DISABLE;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
            break;
 80037be:	e022      	b.n	8003806 <check_frame_available+0x156>
        case BMA400_FIFO_SENSOR_TIME:
            if ((*data_index + 3) > fifo->length)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	3302      	adds	r3, #2
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	8892      	ldrh	r2, [r2, #4]
 80037ca:	4293      	cmp	r3, r2
 80037cc:	db1d      	blt.n	800380a <check_frame_available+0x15a>
            {
                /* Partial frame available */
                *data_index = fifo->length;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	889a      	ldrh	r2, [r3, #4]
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	801a      	strh	r2, [r3, #0]
                *frame_available = BMA400_DISABLE;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
            }

            break;
 80037dc:	e015      	b.n	800380a <check_frame_available+0x15a>
        case BMA400_FIFO_CONTROL_FRAME:
            if ((*data_index + 1) > fifo->length)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	881a      	ldrh	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	889b      	ldrh	r3, [r3, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d311      	bcc.n	800380e <check_frame_available+0x15e>
            {
                /* Partial frame available */
                *data_index = fifo->length;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	889a      	ldrh	r2, [r3, #4]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	801a      	strh	r2, [r3, #0]
                *frame_available = BMA400_DISABLE;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
            }

            break;
 80037f8:	e009      	b.n	800380e <check_frame_available+0x15e>
        default:
            break;
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	e008      	b.n	8003810 <check_frame_available+0x160>
            break;
 80037fe:	46c0      	nop			@ (mov r8, r8)
 8003800:	e006      	b.n	8003810 <check_frame_available+0x160>
            break;
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	e004      	b.n	8003810 <check_frame_available+0x160>
            break;
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	e002      	b.n	8003810 <check_frame_available+0x160>
            break;
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	e000      	b.n	8003810 <check_frame_available+0x160>
            break;
 800380e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8003810:	46c0      	nop			@ (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	b004      	add	sp, #16
 8003816:	bd80      	pop	{r7, pc}
 8003818:	08007be0 	.word	0x08007be0

0800381c <unpack_accel>:
static void unpack_accel(const struct bma400_fifo_data *fifo,
                         struct bma400_fifo_sensor_data *accel_data,
                         uint16_t *data_index,
                         uint8_t accel_width,
                         uint8_t frame_header)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	001a      	movs	r2, r3
 800382a:	1cfb      	adds	r3, r7, #3
 800382c:	701a      	strb	r2, [r3, #0]
    uint8_t data_lsb;
    uint8_t data_msb;

    /* Header information of enabled axes */
    frame_header = frame_header & BMA400_FIFO_DATA_EN_MASK;
 800382e:	2020      	movs	r0, #32
 8003830:	2408      	movs	r4, #8
 8003832:	1903      	adds	r3, r0, r4
 8003834:	19db      	adds	r3, r3, r7
 8003836:	1902      	adds	r2, r0, r4
 8003838:	19d2      	adds	r2, r2, r7
 800383a:	7812      	ldrb	r2, [r2, #0]
 800383c:	210e      	movs	r1, #14
 800383e:	400a      	ands	r2, r1
 8003840:	701a      	strb	r2, [r3, #0]
    if (accel_width == BMA400_12_BIT_FIFO_DATA)
 8003842:	1cfb      	adds	r3, r7, #3
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d000      	beq.n	800384c <unpack_accel+0x30>
 800384a:	e0ce      	b.n	80039ea <unpack_accel+0x1ce>
    {
        if (frame_header & BMA400_FIFO_X_ENABLE)
 800384c:	1903      	adds	r3, r0, r4
 800384e:	19db      	adds	r3, r3, r7
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2282      	movs	r2, #130	@ 0x82
 8003854:	4013      	ands	r3, r2
 8003856:	d039      	beq.n	80038cc <unpack_accel+0xb0>
        {
            /* Accel x data */
            data_lsb = fifo->data[(*data_index)++];
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	1c59      	adds	r1, r3, #1
 8003862:	b288      	uxth	r0, r1
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	8008      	strh	r0, [r1, #0]
 8003868:	18d2      	adds	r2, r2, r3
 800386a:	2416      	movs	r4, #22
 800386c:	193b      	adds	r3, r7, r4
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	701a      	strb	r2, [r3, #0]
            data_msb = fifo->data[(*data_index)++];
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	1c59      	adds	r1, r3, #1
 800387c:	b288      	uxth	r0, r1
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	8008      	strh	r0, [r1, #0]
 8003882:	18d2      	adds	r2, r2, r3
 8003884:	2117      	movs	r1, #23
 8003886:	187b      	adds	r3, r7, r1
 8003888:	7812      	ldrb	r2, [r2, #0]
 800388a:	701a      	strb	r2, [r3, #0]
            accel_data->x = (int16_t)(((uint16_t)(data_msb << 4)) | data_lsb);
 800388c:	187b      	adds	r3, r7, r1
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	b29a      	uxth	r2, r3
 8003896:	193b      	adds	r3, r7, r4
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	4313      	orrs	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	b21a      	sxth	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	801a      	strh	r2, [r3, #0]
            if (accel_data->x > 2047)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2200      	movs	r2, #0
 80038aa:	5e9a      	ldrsh	r2, [r3, r2]
 80038ac:	2380      	movs	r3, #128	@ 0x80
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	429a      	cmp	r2, r3
 80038b2:	db0e      	blt.n	80038d2 <unpack_accel+0xb6>
            {
                /* Computing accel x data negative value */
                accel_data->x = accel_data->x - 4096;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2200      	movs	r2, #0
 80038b8:	5e9b      	ldrsh	r3, [r3, r2]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	4a98      	ldr	r2, [pc, #608]	@ (8003b20 <unpack_accel+0x304>)
 80038be:	4694      	mov	ip, r2
 80038c0:	4463      	add	r3, ip
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	b21a      	sxth	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	801a      	strh	r2, [r3, #0]
 80038ca:	e002      	b.n	80038d2 <unpack_accel+0xb6>
            }
        }
        else
        {
            /* Accel x not available */
            accel_data->x = 0;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2200      	movs	r2, #0
 80038d0:	801a      	strh	r2, [r3, #0]
        }

        if (frame_header & BMA400_FIFO_Y_ENABLE)
 80038d2:	2320      	movs	r3, #32
 80038d4:	2208      	movs	r2, #8
 80038d6:	189b      	adds	r3, r3, r2
 80038d8:	19db      	adds	r3, r3, r7
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2284      	movs	r2, #132	@ 0x84
 80038de:	4013      	ands	r3, r2
 80038e0:	d039      	beq.n	8003956 <unpack_accel+0x13a>
        {
            /* Accel y data */
            data_lsb = fifo->data[(*data_index)++];
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	1c59      	adds	r1, r3, #1
 80038ec:	b288      	uxth	r0, r1
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	8008      	strh	r0, [r1, #0]
 80038f2:	18d2      	adds	r2, r2, r3
 80038f4:	2416      	movs	r4, #22
 80038f6:	193b      	adds	r3, r7, r4
 80038f8:	7812      	ldrb	r2, [r2, #0]
 80038fa:	701a      	strb	r2, [r3, #0]
            data_msb = fifo->data[(*data_index)++];
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	1c59      	adds	r1, r3, #1
 8003906:	b288      	uxth	r0, r1
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	8008      	strh	r0, [r1, #0]
 800390c:	18d2      	adds	r2, r2, r3
 800390e:	2117      	movs	r1, #23
 8003910:	187b      	adds	r3, r7, r1
 8003912:	7812      	ldrb	r2, [r2, #0]
 8003914:	701a      	strb	r2, [r3, #0]
            accel_data->y = (int16_t)(((uint16_t)(data_msb << 4)) | data_lsb);
 8003916:	187b      	adds	r3, r7, r1
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	b29a      	uxth	r2, r3
 8003920:	193b      	adds	r3, r7, r4
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	b29b      	uxth	r3, r3
 8003926:	4313      	orrs	r3, r2
 8003928:	b29b      	uxth	r3, r3
 800392a:	b21a      	sxth	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	805a      	strh	r2, [r3, #2]
            if (accel_data->y > 2047)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2202      	movs	r2, #2
 8003934:	5e9a      	ldrsh	r2, [r3, r2]
 8003936:	2380      	movs	r3, #128	@ 0x80
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	429a      	cmp	r2, r3
 800393c:	db0e      	blt.n	800395c <unpack_accel+0x140>
            {
                /* Computing accel y data negative value */
                accel_data->y = accel_data->y - 4096;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2202      	movs	r2, #2
 8003942:	5e9b      	ldrsh	r3, [r3, r2]
 8003944:	b29b      	uxth	r3, r3
 8003946:	4a76      	ldr	r2, [pc, #472]	@ (8003b20 <unpack_accel+0x304>)
 8003948:	4694      	mov	ip, r2
 800394a:	4463      	add	r3, ip
 800394c:	b29b      	uxth	r3, r3
 800394e:	b21a      	sxth	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	805a      	strh	r2, [r3, #2]
 8003954:	e002      	b.n	800395c <unpack_accel+0x140>
            }
        }
        else
        {
            /* Accel y not available */
            accel_data->y = 0;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2200      	movs	r2, #0
 800395a:	805a      	strh	r2, [r3, #2]
        }

        if (frame_header & BMA400_FIFO_Z_ENABLE)
 800395c:	2320      	movs	r3, #32
 800395e:	2208      	movs	r2, #8
 8003960:	189b      	adds	r3, r3, r2
 8003962:	19db      	adds	r3, r3, r7
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2288      	movs	r2, #136	@ 0x88
 8003968:	4013      	ands	r3, r2
 800396a:	d03a      	beq.n	80039e2 <unpack_accel+0x1c6>
        {
            /* Accel z data */
            data_lsb = fifo->data[(*data_index)++];
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	1c59      	adds	r1, r3, #1
 8003976:	b288      	uxth	r0, r1
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	8008      	strh	r0, [r1, #0]
 800397c:	18d2      	adds	r2, r2, r3
 800397e:	2416      	movs	r4, #22
 8003980:	193b      	adds	r3, r7, r4
 8003982:	7812      	ldrb	r2, [r2, #0]
 8003984:	701a      	strb	r2, [r3, #0]
            data_msb = fifo->data[(*data_index)++];
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	1c59      	adds	r1, r3, #1
 8003990:	b288      	uxth	r0, r1
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	8008      	strh	r0, [r1, #0]
 8003996:	18d2      	adds	r2, r2, r3
 8003998:	2117      	movs	r1, #23
 800399a:	187b      	adds	r3, r7, r1
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	701a      	strb	r2, [r3, #0]
            accel_data->z = (int16_t)(((uint16_t)(data_msb << 4)) | data_lsb);
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	193b      	adds	r3, r7, r4
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	4313      	orrs	r3, r2
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	b21a      	sxth	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	809a      	strh	r2, [r3, #4]
            if (accel_data->z > 2047)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2204      	movs	r2, #4
 80039be:	5e9a      	ldrsh	r2, [r3, r2]
 80039c0:	2380      	movs	r3, #128	@ 0x80
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	429a      	cmp	r2, r3
 80039c6:	da00      	bge.n	80039ca <unpack_accel+0x1ae>
 80039c8:	e0a5      	b.n	8003b16 <unpack_accel+0x2fa>
            {
                /* Computing accel z data negative value */
                accel_data->z = accel_data->z - 4096;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2204      	movs	r2, #4
 80039ce:	5e9b      	ldrsh	r3, [r3, r2]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	4a53      	ldr	r2, [pc, #332]	@ (8003b20 <unpack_accel+0x304>)
 80039d4:	4694      	mov	ip, r2
 80039d6:	4463      	add	r3, ip
 80039d8:	b29b      	uxth	r3, r3
 80039da:	b21a      	sxth	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	809a      	strh	r2, [r3, #4]
        {
            /* Accel z not available */
            accel_data->z = 0;
        }
    }
}
 80039e0:	e099      	b.n	8003b16 <unpack_accel+0x2fa>
            accel_data->z = 0;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2200      	movs	r2, #0
 80039e6:	809a      	strh	r2, [r3, #4]
}
 80039e8:	e095      	b.n	8003b16 <unpack_accel+0x2fa>
        if (frame_header & BMA400_FIFO_X_ENABLE)
 80039ea:	2320      	movs	r3, #32
 80039ec:	2208      	movs	r2, #8
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	19db      	adds	r3, r3, r7
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2282      	movs	r2, #130	@ 0x82
 80039f6:	4013      	ands	r3, r2
 80039f8:	d026      	beq.n	8003a48 <unpack_accel+0x22c>
            data_msb = fifo->data[(*data_index)++];
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	1c59      	adds	r1, r3, #1
 8003a04:	b288      	uxth	r0, r1
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	8008      	strh	r0, [r1, #0]
 8003a0a:	18d2      	adds	r2, r2, r3
 8003a0c:	2117      	movs	r1, #23
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	7812      	ldrb	r2, [r2, #0]
 8003a12:	701a      	strb	r2, [r3, #0]
            accel_data->x = (int16_t)((uint16_t)(data_msb << 4));
 8003a14:	187b      	adds	r3, r7, r1
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	b21b      	sxth	r3, r3
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	b21a      	sxth	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	801a      	strh	r2, [r3, #0]
            if (accel_data->x > 2047)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2200      	movs	r2, #0
 8003a26:	5e9a      	ldrsh	r2, [r3, r2]
 8003a28:	2380      	movs	r3, #128	@ 0x80
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	db0e      	blt.n	8003a4e <unpack_accel+0x232>
                accel_data->x = accel_data->x - 4096;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2200      	movs	r2, #0
 8003a34:	5e9b      	ldrsh	r3, [r3, r2]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	4a39      	ldr	r2, [pc, #228]	@ (8003b20 <unpack_accel+0x304>)
 8003a3a:	4694      	mov	ip, r2
 8003a3c:	4463      	add	r3, ip
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	b21a      	sxth	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	e002      	b.n	8003a4e <unpack_accel+0x232>
            accel_data->x = 0;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	801a      	strh	r2, [r3, #0]
        if (frame_header & BMA400_FIFO_Y_ENABLE)
 8003a4e:	2320      	movs	r3, #32
 8003a50:	2208      	movs	r2, #8
 8003a52:	189b      	adds	r3, r3, r2
 8003a54:	19db      	adds	r3, r3, r7
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2284      	movs	r2, #132	@ 0x84
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	d026      	beq.n	8003aac <unpack_accel+0x290>
            data_msb = fifo->data[(*data_index)++];
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	1c59      	adds	r1, r3, #1
 8003a68:	b288      	uxth	r0, r1
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	8008      	strh	r0, [r1, #0]
 8003a6e:	18d2      	adds	r2, r2, r3
 8003a70:	2117      	movs	r1, #23
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	701a      	strb	r2, [r3, #0]
            accel_data->y = (int16_t)((uint16_t)(data_msb << 4));
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b21b      	sxth	r3, r3
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	b21a      	sxth	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	805a      	strh	r2, [r3, #2]
            if (accel_data->y > 2047)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	5e9a      	ldrsh	r2, [r3, r2]
 8003a8c:	2380      	movs	r3, #128	@ 0x80
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	429a      	cmp	r2, r3
 8003a92:	db0e      	blt.n	8003ab2 <unpack_accel+0x296>
                accel_data->y = accel_data->y - 4096;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2202      	movs	r2, #2
 8003a98:	5e9b      	ldrsh	r3, [r3, r2]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	4a20      	ldr	r2, [pc, #128]	@ (8003b20 <unpack_accel+0x304>)
 8003a9e:	4694      	mov	ip, r2
 8003aa0:	4463      	add	r3, ip
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	b21a      	sxth	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	805a      	strh	r2, [r3, #2]
 8003aaa:	e002      	b.n	8003ab2 <unpack_accel+0x296>
            accel_data->y = 0;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	805a      	strh	r2, [r3, #2]
        if (frame_header & BMA400_FIFO_Z_ENABLE)
 8003ab2:	2320      	movs	r3, #32
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	189b      	adds	r3, r3, r2
 8003ab8:	19db      	adds	r3, r3, r7
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2288      	movs	r2, #136	@ 0x88
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d026      	beq.n	8003b10 <unpack_accel+0x2f4>
            data_msb = fifo->data[(*data_index)++];
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	1c59      	adds	r1, r3, #1
 8003acc:	b288      	uxth	r0, r1
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	8008      	strh	r0, [r1, #0]
 8003ad2:	18d2      	adds	r2, r2, r3
 8003ad4:	2117      	movs	r1, #23
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	7812      	ldrb	r2, [r2, #0]
 8003ada:	701a      	strb	r2, [r3, #0]
            accel_data->z = (int16_t)((uint16_t)(data_msb << 4));
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b21b      	sxth	r3, r3
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	b21a      	sxth	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	809a      	strh	r2, [r3, #4]
            if (accel_data->z > 2047)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2204      	movs	r2, #4
 8003aee:	5e9a      	ldrsh	r2, [r3, r2]
 8003af0:	2380      	movs	r3, #128	@ 0x80
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	429a      	cmp	r2, r3
 8003af6:	db0e      	blt.n	8003b16 <unpack_accel+0x2fa>
                accel_data->z = accel_data->z - 4096;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2204      	movs	r2, #4
 8003afc:	5e9b      	ldrsh	r3, [r3, r2]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	4a07      	ldr	r2, [pc, #28]	@ (8003b20 <unpack_accel+0x304>)
 8003b02:	4694      	mov	ip, r2
 8003b04:	4463      	add	r3, ip
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	b21a      	sxth	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	809a      	strh	r2, [r3, #4]
}
 8003b0e:	e002      	b.n	8003b16 <unpack_accel+0x2fa>
            accel_data->z = 0;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2200      	movs	r2, #0
 8003b14:	809a      	strh	r2, [r3, #4]
}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b007      	add	sp, #28
 8003b1c:	bd90      	pop	{r4, r7, pc}
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	fffff000 	.word	0xfffff000

08003b24 <unpack_sensortime_frame>:

static void unpack_sensortime_frame(struct bma400_fifo_data *fifo, uint16_t *data_index)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
    uint32_t time_msb;
    uint16_t time_lsb;
    uint8_t time_xlsb;

    time_msb = fifo->data[(*data_index) + 2] << 16;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	3302      	adds	r3, #2
 8003b38:	18d3      	adds	r3, r2, r3
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	041b      	lsls	r3, r3, #16
 8003b3e:	60fb      	str	r3, [r7, #12]
    time_lsb = fifo->data[(*data_index) + 1] << 8;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	18d3      	adds	r3, r2, r3
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	001a      	movs	r2, r3
 8003b50:	210a      	movs	r1, #10
 8003b52:	187b      	adds	r3, r7, r1
 8003b54:	0212      	lsls	r2, r2, #8
 8003b56:	801a      	strh	r2, [r3, #0]
    time_xlsb = fifo->data[(*data_index)];
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	8812      	ldrh	r2, [r2, #0]
 8003b60:	189a      	adds	r2, r3, r2
 8003b62:	2009      	movs	r0, #9
 8003b64:	183b      	adds	r3, r7, r0
 8003b66:	7812      	ldrb	r2, [r2, #0]
 8003b68:	701a      	strb	r2, [r3, #0]

    /* Sensor time */
    fifo->fifo_sensor_time = (uint32_t)(time_msb | time_lsb | time_xlsb);
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	881a      	ldrh	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	183b      	adds	r3, r7, r0
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	611a      	str	r2, [r3, #16]
    *data_index = (*data_index) + 3;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	3303      	adds	r3, #3
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	801a      	strh	r2, [r3, #0]
}
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b004      	add	sp, #16
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <user_i2c_read>:

    return rslt;
}

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	@ 0x28
 8003b94:	af04      	add	r7, sp, #16
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	210f      	movs	r1, #15
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	1c02      	adds	r2, r0, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Read(hi2c, BMA400_I2C_ADDR, reg_addr,
 8003ba8:	187b      	adds	r3, r7, r1
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b299      	uxth	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	6978      	ldr	r0, [r7, #20]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4252      	negs	r2, r2
 8003bb8:	9202      	str	r2, [sp, #8]
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	000a      	movs	r2, r1
 8003bc4:	2128      	movs	r1, #40	@ 0x28
 8003bc6:	f001 fa73 	bl	80050b0 <HAL_I2C_Mem_Read>
 8003bca:	1e03      	subs	r3, r0, #0
 8003bcc:	d101      	bne.n	8003bd2 <user_i2c_read+0x42>
                         I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e001      	b.n	8003bd6 <user_i2c_read+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	425b      	negs	r3, r3
    }
}
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b006      	add	sp, #24
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b08a      	sub	sp, #40	@ 0x28
 8003be2:	af04      	add	r7, sp, #16
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	210f      	movs	r1, #15
 8003bec:	187b      	adds	r3, r7, r1
 8003bee:	1c02      	adds	r2, r0, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Write(hi2c, BMA400_I2C_ADDR, reg_addr,
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b299      	uxth	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	6978      	ldr	r0, [r7, #20]
 8003c02:	2201      	movs	r2, #1
 8003c04:	4252      	negs	r2, r2
 8003c06:	9202      	str	r2, [sp, #8]
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2301      	movs	r3, #1
 8003c10:	000a      	movs	r2, r1
 8003c12:	2128      	movs	r1, #40	@ 0x28
 8003c14:	f001 f91e 	bl	8004e54 <HAL_I2C_Mem_Write>
 8003c18:	1e03      	subs	r3, r0, #0
 8003c1a:	d101      	bne.n	8003c20 <user_i2c_write+0x42>
                          I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e001      	b.n	8003c24 <user_i2c_write+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 8003c20:	2302      	movs	r3, #2
 8003c22:	425b      	negs	r3, r3
    }
}
 8003c24:	0018      	movs	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b006      	add	sp, #24
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
    // Zakładamy, że potrzebne opóźnienia mają ≥ 1000us (1ms)
    HAL_Delay(period / 1000);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	22fa      	movs	r2, #250	@ 0xfa
 8003c3a:	0091      	lsls	r1, r2, #2
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f7fc fa6b 	bl	8000118 <__udivsi3>
 8003c42:	0003      	movs	r3, r0
 8003c44:	0018      	movs	r0, r3
 8003c46:	f000 fdef 	bl	8004828 <HAL_Delay>

    // Jeśli potrzebujesz dokładniejszych opóźnień — patrz niżej
}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b002      	add	sp, #8
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b08b      	sub	sp, #44	@ 0x2c
 8003c58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5a:	2414      	movs	r4, #20
 8003c5c:	193b      	adds	r3, r7, r4
 8003c5e:	0018      	movs	r0, r3
 8003c60:	2314      	movs	r3, #20
 8003c62:	001a      	movs	r2, r3
 8003c64:	2100      	movs	r1, #0
 8003c66:	f003 f9fd 	bl	8007064 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6a:	4b38      	ldr	r3, [pc, #224]	@ (8003d4c <MX_GPIO_Init+0xf8>)
 8003c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c6e:	4b37      	ldr	r3, [pc, #220]	@ (8003d4c <MX_GPIO_Init+0xf8>)
 8003c70:	2104      	movs	r1, #4
 8003c72:	430a      	orrs	r2, r1
 8003c74:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c76:	4b35      	ldr	r3, [pc, #212]	@ (8003d4c <MX_GPIO_Init+0xf8>)
 8003c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c82:	4b32      	ldr	r3, [pc, #200]	@ (8003d4c <MX_GPIO_Init+0xf8>)
 8003c84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c86:	4b31      	ldr	r3, [pc, #196]	@ (8003d4c <MX_GPIO_Init+0xf8>)
 8003c88:	2120      	movs	r1, #32
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d4c <MX_GPIO_Init+0xf8>)
 8003c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c92:	2220      	movs	r2, #32
 8003c94:	4013      	ands	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003d4c <MX_GPIO_Init+0xf8>)
 8003c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8003d4c <MX_GPIO_Init+0xf8>)
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ca6:	4b29      	ldr	r3, [pc, #164]	@ (8003d4c <MX_GPIO_Init+0xf8>)
 8003ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003caa:	2201      	movs	r2, #1
 8003cac:	4013      	ands	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb2:	4b26      	ldr	r3, [pc, #152]	@ (8003d4c <MX_GPIO_Init+0xf8>)
 8003cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cb6:	4b25      	ldr	r3, [pc, #148]	@ (8003d4c <MX_GPIO_Init+0xf8>)
 8003cb8:	2102      	movs	r1, #2
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cbe:	4b23      	ldr	r3, [pc, #140]	@ (8003d4c <MX_GPIO_Init+0xf8>)
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	607b      	str	r3, [r7, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_IO_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003cca:	23d0      	movs	r3, #208	@ 0xd0
 8003ccc:	0059      	lsls	r1, r3, #1
 8003cce:	23a0      	movs	r3, #160	@ 0xa0
 8003cd0:	05db      	lsls	r3, r3, #23
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f000 fff9 	bl	8004ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8003cda:	193b      	adds	r3, r7, r4
 8003cdc:	2204      	movs	r2, #4
 8003cde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ce0:	193b      	adds	r3, r7, r4
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce6:	193b      	adds	r3, r7, r4
 8003ce8:	2200      	movs	r2, #0
 8003cea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8003cec:	193b      	adds	r3, r7, r4
 8003cee:	4a18      	ldr	r2, [pc, #96]	@ (8003d50 <MX_GPIO_Init+0xfc>)
 8003cf0:	0019      	movs	r1, r3
 8003cf2:	0010      	movs	r0, r2
 8003cf4:	f000 fe80 	bl	80049f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_IO_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = EN_IO_Pin|LED1_Pin|LED2_Pin;
 8003cf8:	0021      	movs	r1, r4
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	22d0      	movs	r2, #208	@ 0xd0
 8003cfe:	0052      	lsls	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d02:	000c      	movs	r4, r1
 8003d04:	193b      	adds	r3, r7, r4
 8003d06:	2201      	movs	r2, #1
 8003d08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	193b      	adds	r3, r7, r4
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d10:	193b      	adds	r3, r7, r4
 8003d12:	2200      	movs	r2, #0
 8003d14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d16:	193a      	adds	r2, r7, r4
 8003d18:	23a0      	movs	r3, #160	@ 0xa0
 8003d1a:	05db      	lsls	r3, r3, #23
 8003d1c:	0011      	movs	r1, r2
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 fe6a 	bl	80049f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8003d24:	193b      	adds	r3, r7, r4
 8003d26:	2240      	movs	r2, #64	@ 0x40
 8003d28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d2a:	193b      	adds	r3, r7, r4
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d30:	193b      	adds	r3, r7, r4
 8003d32:	2201      	movs	r2, #1
 8003d34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8003d36:	193a      	adds	r2, r7, r4
 8003d38:	23a0      	movs	r3, #160	@ 0xa0
 8003d3a:	05db      	lsls	r3, r3, #23
 8003d3c:	0011      	movs	r1, r2
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f000 fe5a 	bl	80049f8 <HAL_GPIO_Init>

}
 8003d44:	46c0      	nop			@ (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b00b      	add	sp, #44	@ 0x2c
 8003d4a:	bd90      	pop	{r4, r7, pc}
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	50001400 	.word	0x50001400

08003d54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d58:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <MX_I2C1_Init+0x74>)
 8003d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dcc <MX_I2C1_Init+0x78>)
 8003d5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc8 <MX_I2C1_Init+0x74>)
 8003d60:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd0 <MX_I2C1_Init+0x7c>)
 8003d62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003d64:	4b18      	ldr	r3, [pc, #96]	@ (8003dc8 <MX_I2C1_Init+0x74>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d6a:	4b17      	ldr	r3, [pc, #92]	@ (8003dc8 <MX_I2C1_Init+0x74>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d70:	4b15      	ldr	r3, [pc, #84]	@ (8003dc8 <MX_I2C1_Init+0x74>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003d76:	4b14      	ldr	r3, [pc, #80]	@ (8003dc8 <MX_I2C1_Init+0x74>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d7c:	4b12      	ldr	r3, [pc, #72]	@ (8003dc8 <MX_I2C1_Init+0x74>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d82:	4b11      	ldr	r3, [pc, #68]	@ (8003dc8 <MX_I2C1_Init+0x74>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d88:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <MX_I2C1_Init+0x74>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc8 <MX_I2C1_Init+0x74>)
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 ffb9 	bl	8004d08 <HAL_I2C_Init>
 8003d96:	1e03      	subs	r3, r0, #0
 8003d98:	d001      	beq.n	8003d9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003d9a:	f000 fb4b 	bl	8004434 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <MX_I2C1_Init+0x74>)
 8003da0:	2100      	movs	r1, #0
 8003da2:	0018      	movs	r0, r3
 8003da4:	f001 fdb4 	bl	8005910 <HAL_I2CEx_ConfigAnalogFilter>
 8003da8:	1e03      	subs	r3, r0, #0
 8003daa:	d001      	beq.n	8003db0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003dac:	f000 fb42 	bl	8004434 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <MX_I2C1_Init+0x74>)
 8003db2:	2100      	movs	r1, #0
 8003db4:	0018      	movs	r0, r3
 8003db6:	f001 fdf7 	bl	80059a8 <HAL_I2CEx_ConfigDigitalFilter>
 8003dba:	1e03      	subs	r3, r0, #0
 8003dbc:	d001      	beq.n	8003dc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003dbe:	f000 fb39 	bl	8004434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000078 	.word	0x20000078
 8003dcc:	40005400 	.word	0x40005400
 8003dd0:	00402d41 	.word	0x00402d41

08003dd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b091      	sub	sp, #68	@ 0x44
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ddc:	232c      	movs	r3, #44	@ 0x2c
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	0018      	movs	r0, r3
 8003de2:	2314      	movs	r3, #20
 8003de4:	001a      	movs	r2, r3
 8003de6:	2100      	movs	r1, #0
 8003de8:	f003 f93c 	bl	8007064 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dec:	2410      	movs	r4, #16
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	0018      	movs	r0, r3
 8003df2:	231c      	movs	r3, #28
 8003df4:	001a      	movs	r2, r3
 8003df6:	2100      	movs	r1, #0
 8003df8:	f003 f934 	bl	8007064 <memset>
  if(i2cHandle->Instance==I2C1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a22      	ldr	r2, [pc, #136]	@ (8003e8c <HAL_I2C_MspInit+0xb8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d13d      	bne.n	8003e82 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003e06:	193b      	adds	r3, r7, r4
 8003e08:	2202      	movs	r2, #2
 8003e0a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003e0c:	193b      	adds	r3, r7, r4
 8003e0e:	2200      	movs	r2, #0
 8003e10:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e12:	193b      	adds	r3, r7, r4
 8003e14:	0018      	movs	r0, r3
 8003e16:	f002 f9a9 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 8003e1a:	1e03      	subs	r3, r0, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003e1e:	f000 fb09 	bl	8004434 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e22:	4b1b      	ldr	r3, [pc, #108]	@ (8003e90 <HAL_I2C_MspInit+0xbc>)
 8003e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e26:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <HAL_I2C_MspInit+0xbc>)
 8003e28:	2102      	movs	r1, #2
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e2e:	4b18      	ldr	r3, [pc, #96]	@ (8003e90 <HAL_I2C_MspInit+0xbc>)
 8003e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e32:	2202      	movs	r2, #2
 8003e34:	4013      	ands	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e3a:	212c      	movs	r1, #44	@ 0x2c
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	22c0      	movs	r2, #192	@ 0xc0
 8003e40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e42:	187b      	adds	r3, r7, r1
 8003e44:	2212      	movs	r2, #18
 8003e46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e48:	187b      	adds	r3, r7, r1
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4e:	187b      	adds	r3, r7, r1
 8003e50:	2200      	movs	r2, #0
 8003e52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003e54:	187b      	adds	r3, r7, r1
 8003e56:	2206      	movs	r2, #6
 8003e58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e5a:	187b      	adds	r3, r7, r1
 8003e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e94 <HAL_I2C_MspInit+0xc0>)
 8003e5e:	0019      	movs	r1, r3
 8003e60:	0010      	movs	r0, r2
 8003e62:	f000 fdc9 	bl	80049f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e66:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <HAL_I2C_MspInit+0xbc>)
 8003e68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e6a:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <HAL_I2C_MspInit+0xbc>)
 8003e6c:	2180      	movs	r1, #128	@ 0x80
 8003e6e:	0389      	lsls	r1, r1, #14
 8003e70:	430a      	orrs	r2, r1
 8003e72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e74:	4b06      	ldr	r3, [pc, #24]	@ (8003e90 <HAL_I2C_MspInit+0xbc>)
 8003e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e78:	2380      	movs	r3, #128	@ 0x80
 8003e7a:	039b      	lsls	r3, r3, #14
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b011      	add	sp, #68	@ 0x44
 8003e88:	bd90      	pop	{r4, r7, pc}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	40005400 	.word	0x40005400
 8003e90:	40021000 	.word	0x40021000
 8003e94:	50000400 	.word	0x50000400

08003e98 <enterStandby>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enterStandby(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8003e9c:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <enterStandby+0x1c>)
 8003e9e:	4a06      	ldr	r2, [pc, #24]	@ (8003eb8 <enterStandby+0x20>)
 8003ea0:	619a      	str	r2, [r3, #24]
  	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8003ea2:	2001      	movs	r0, #1
 8003ea4:	f001 fdcc 	bl	8005a40 <HAL_PWR_EnableWakeUpPin>
    HAL_PWR_EnterSTANDBYMode();
 8003ea8:	f001 fdea 	bl	8005a80 <HAL_PWR_EnterSTANDBYMode>
}
 8003eac:	46c0      	nop			@ (mov r8, r8)
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	0001002f 	.word	0x0001002f

08003ebc <configureBMA400>:

// Configure BMA400 for low power + wake-up on Y-axis motion
void configureBMA400(struct bma400_dev *dev)
{
 8003ebc:	b590      	push	{r4, r7, lr}
 8003ebe:	b091      	sub	sp, #68	@ 0x44
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	bma400_set_power_mode(BMA400_MODE_LOW_POWER, dev);	// set initial power mode to low power
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	2001      	movs	r0, #1
 8003eca:	f7fd fc21 	bl	8001710 <bma400_set_power_mode>

	struct bma400_device_conf dev_conf[] = {
 8003ece:	2420      	movs	r4, #32
 8003ed0:	193b      	adds	r3, r7, r4
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	231e      	movs	r3, #30
 8003ed6:	001a      	movs	r2, r3
 8003ed8:	2100      	movs	r1, #0
 8003eda:	f003 f8c3 	bl	8007064 <memset>
 8003ede:	0021      	movs	r1, r4
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	187b      	adds	r3, r7, r1
 8003ee8:	220e      	movs	r2, #14
 8003eea:	709a      	strb	r2, [r3, #2]
 8003eec:	187b      	adds	r3, r7, r1
 8003eee:	228c      	movs	r2, #140	@ 0x8c
 8003ef0:	809a      	strh	r2, [r3, #4]
 8003ef2:	187b      	adds	r3, r7, r1
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	729a      	strb	r2, [r3, #10]
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	2201      	movs	r2, #1
 8003efc:	731a      	strb	r2, [r3, #12]
 8003efe:	187b      	adds	r3, r7, r1
 8003f00:	2201      	movs	r2, #1
 8003f02:	735a      	strb	r2, [r3, #13]
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	2202      	movs	r2, #2
 8003f08:	739a      	strb	r2, [r3, #14]
 8003f0a:	187b      	adds	r3, r7, r1
 8003f0c:	220f      	movs	r2, #15
 8003f0e:	73da      	strb	r2, [r3, #15]
 8003f10:	187b      	adds	r3, r7, r1
 8003f12:	2201      	movs	r2, #1
 8003f14:	74da      	strb	r2, [r3, #19]
 8003f16:	187b      	adds	r3, r7, r1
 8003f18:	2203      	movs	r2, #3
 8003f1a:	751a      	strb	r2, [r3, #20]
 8003f1c:	187b      	adds	r3, r7, r1
 8003f1e:	2201      	movs	r2, #1
 8003f20:	759a      	strb	r2, [r3, #22]
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	2202      	movs	r2, #2
 8003f26:	75da      	strb	r2, [r3, #23]
				.pin_conf = BMA400_INT_OPEN_DRAIN_ACTIVE_0
			}
		}
	};

	bma400_set_device_conf(dev_conf, 3, dev);
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	2103      	movs	r1, #3
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7fd fcce 	bl	80018d0 <bma400_set_device_conf>

	struct bma400_sensor_conf sensor_conf = {
 8003f34:	240c      	movs	r4, #12
 8003f36:	193b      	adds	r3, r7, r4
 8003f38:	0018      	movs	r0, r3
 8003f3a:	2314      	movs	r3, #20
 8003f3c:	001a      	movs	r2, r3
 8003f3e:	2100      	movs	r1, #0
 8003f40:	f003 f890 	bl	8007064 <memset>
 8003f44:	0021      	movs	r1, r4
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	2208      	movs	r2, #8
 8003f4a:	709a      	strb	r2, [r3, #2]
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	2201      	movs	r2, #1
 8003f50:	711a      	strb	r2, [r3, #4]
 8003f52:	187b      	adds	r3, r7, r1
 8003f54:	2203      	movs	r2, #3
 8003f56:	715a      	strb	r2, [r3, #5]
			.osr = BMA400_ACCEL_OSR_SETTING_3,
			.odr = BMA400_ODR_100HZ
		}
	};

	bma400_set_sensor_conf(&sensor_conf, 1, dev);
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7fd fc38 	bl	80017d4 <bma400_set_sensor_conf>
	set_auto_wakeup(BMA400_ENABLE, dev);	// enable auto wake up
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	0019      	movs	r1, r3
 8003f68:	2001      	movs	r0, #1
 8003f6a:	f7fe f8be 	bl	80020ea <set_auto_wakeup>
}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b011      	add	sp, #68	@ 0x44
 8003f74:	bd90      	pop	{r4, r7, pc}

08003f76 <configureFifo>:

void configureFifo(struct bma400_dev *dev)
{
 8003f76:	b590      	push	{r4, r7, lr}
 8003f78:	b087      	sub	sp, #28
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
	// stream mode, don't stop on full
	struct bma400_device_conf fifo_conf = {
 8003f7e:	240c      	movs	r4, #12
 8003f80:	193b      	adds	r3, r7, r4
 8003f82:	0018      	movs	r0, r3
 8003f84:	230a      	movs	r3, #10
 8003f86:	001a      	movs	r2, r3
 8003f88:	2100      	movs	r1, #0
 8003f8a:	f003 f86b 	bl	8007064 <memset>
 8003f8e:	0021      	movs	r1, r4
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	2205      	movs	r2, #5
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	2248      	movs	r2, #72	@ 0x48
 8003f9a:	709a      	strb	r2, [r3, #2]
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	70da      	strb	r2, [r3, #3]
			.conf_regs = BMA400_FIFO_Y_EN | BMA400_FIFO_DATA_SRC,
			.conf_status = BMA400_ENABLE
		}
	};

	if (bma400_set_device_conf(&fifo_conf, 1, dev) != BMA400_OK ||
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7fd fc91 	bl	80018d0 <bma400_set_device_conf>
 8003fae:	1e03      	subs	r3, r0, #0
 8003fb0:	d105      	bne.n	8003fbe <configureFifo+0x48>
		bma400_set_fifo_flush(dev) != BMA400_OK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f7fd fe8d 	bl	8001cd4 <bma400_set_fifo_flush>
 8003fba:	1e03      	subs	r3, r0, #0
	if (bma400_set_device_conf(&fifo_conf, 1, dev) != BMA400_OK ||
 8003fbc:	d001      	beq.n	8003fc2 <configureFifo+0x4c>
		Error_Handler();
 8003fbe:	f000 fa39 	bl	8004434 <Error_Handler>
	HAL_Delay(10);
 8003fc2:	200a      	movs	r0, #10
 8003fc4:	f000 fc30 	bl	8004828 <HAL_Delay>
}
 8003fc8:	46c0      	nop			@ (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b007      	add	sp, #28
 8003fce:	bd90      	pop	{r4, r7, pc}

08003fd0 <readFifoY>:

uint8_t readFifoY(int16_t *out, uint8_t max_samples, struct bma400_dev *dev)
{
 8003fd0:	b590      	push	{r4, r7, lr}
 8003fd2:	b0bd      	sub	sp, #244	@ 0xf4
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	230b      	movs	r3, #11
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	1c0a      	adds	r2, r1, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
    struct bma400_fifo_data fifo = {0};
 8003fe2:	24d8      	movs	r4, #216	@ 0xd8
 8003fe4:	193b      	adds	r3, r7, r4
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	2314      	movs	r3, #20
 8003fea:	001a      	movs	r2, r3
 8003fec:	2100      	movs	r1, #0
 8003fee:	f003 f839 	bl	8007064 <memset>
    static uint8_t fifo_data[MAX_FIFO_SAMPLES * 3];		// buffer for raw FIFO bytes (1 byte header + 2 bytes per Y sample)

    struct bma400_fifo_sensor_data accel_data[MAX_FIFO_SAMPLES];	// buuffer for decoded samples
    uint16_t accel_count = MAX_FIFO_SAMPLES;
 8003ff2:	2316      	movs	r3, #22
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	801a      	strh	r2, [r3, #0]

    fifo.data = fifo_data;
 8003ffa:	193b      	adds	r3, r7, r4
 8003ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80040b0 <readFifoY+0xe0>)
 8003ffe:	601a      	str	r2, [r3, #0]
    fifo.length = sizeof(fifo_data);
 8004000:	193b      	adds	r3, r7, r4
 8004002:	2260      	movs	r2, #96	@ 0x60
 8004004:	809a      	strh	r2, [r3, #4]

    if (bma400_get_fifo_data(&fifo, dev) != BMA400_OK)	// read raw FIFO data
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	193b      	adds	r3, r7, r4
 800400a:	0011      	movs	r1, r2
 800400c:	0018      	movs	r0, r3
 800400e:	f7fd fd9b 	bl	8001b48 <bma400_get_fifo_data>
 8004012:	1e03      	subs	r3, r0, #0
 8004014:	d001      	beq.n	800401a <readFifoY+0x4a>
        return 0;
 8004016:	2300      	movs	r3, #0
 8004018:	e046      	b.n	80040a8 <readFifoY+0xd8>

    if (bma400_extract_accel(&fifo, accel_data, &accel_count, dev) != BMA400_OK)	// decode FIFO data (eg. 1024)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2216      	movs	r2, #22
 800401e:	18ba      	adds	r2, r7, r2
 8004020:	2118      	movs	r1, #24
 8004022:	1879      	adds	r1, r7, r1
 8004024:	20d8      	movs	r0, #216	@ 0xd8
 8004026:	1838      	adds	r0, r7, r0
 8004028:	f7fd fe24 	bl	8001c74 <bma400_extract_accel>
 800402c:	1e03      	subs	r3, r0, #0
 800402e:	d001      	beq.n	8004034 <readFifoY+0x64>
        return 0;
 8004030:	2300      	movs	r3, #0
 8004032:	e039      	b.n	80040a8 <readFifoY+0xd8>

    uint8_t copied = (accel_count > max_samples) ? max_samples : accel_count;	// limit number of samples copied to buffer
 8004034:	230b      	movs	r3, #11
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	b29a      	uxth	r2, r3
 800403c:	2116      	movs	r1, #22
 800403e:	187b      	adds	r3, r7, r1
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d303      	bcc.n	800404e <readFifoY+0x7e>
 8004046:	187b      	adds	r3, r7, r1
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	e002      	b.n	8004054 <readFifoY+0x84>
 800404e:	230b      	movs	r3, #11
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	22ee      	movs	r2, #238	@ 0xee
 8004056:	18ba      	adds	r2, r7, r2
 8004058:	7013      	strb	r3, [r2, #0]

    for (uint8_t i = 0; i < copied; i++)
 800405a:	23ef      	movs	r3, #239	@ 0xef
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	e017      	b.n	8004094 <readFifoY+0xc4>
    {
        out[i] = accel_data[i].y;
 8004064:	24ef      	movs	r4, #239	@ 0xef
 8004066:	193b      	adds	r3, r7, r4
 8004068:	781a      	ldrb	r2, [r3, #0]
 800406a:	193b      	adds	r3, r7, r4
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	68f9      	ldr	r1, [r7, #12]
 8004072:	18c9      	adds	r1, r1, r3
 8004074:	2318      	movs	r3, #24
 8004076:	18f8      	adds	r0, r7, r3
 8004078:	0013      	movs	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	189b      	adds	r3, r3, r2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	18c3      	adds	r3, r0, r3
 8004082:	3302      	adds	r3, #2
 8004084:	2200      	movs	r2, #0
 8004086:	5e9b      	ldrsh	r3, [r3, r2]
 8004088:	800b      	strh	r3, [r1, #0]
    for (uint8_t i = 0; i < copied; i++)
 800408a:	193b      	adds	r3, r7, r4
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	193b      	adds	r3, r7, r4
 8004090:	3201      	adds	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	23ef      	movs	r3, #239	@ 0xef
 8004096:	18fa      	adds	r2, r7, r3
 8004098:	21ee      	movs	r1, #238	@ 0xee
 800409a:	187b      	adds	r3, r7, r1
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d3df      	bcc.n	8004064 <readFifoY+0x94>
    }

    return copied;
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	781b      	ldrb	r3, [r3, #0]
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b03d      	add	sp, #244	@ 0xf4
 80040ae:	bd90      	pop	{r4, r7, pc}
 80040b0:	200000cc 	.word	0x200000cc

080040b4 <detectGateMotion>:

bool detectGateMotion(const int16_t *data)
{
 80040b4:	b5b0      	push	{r4, r5, r7, lr}
 80040b6:	b08e      	sub	sp, #56	@ 0x38
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
    float sigma[4] = {0};
 80040bc:	230c      	movs	r3, #12
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	0018      	movs	r0, r3
 80040c2:	2310      	movs	r3, #16
 80040c4:	001a      	movs	r2, r3
 80040c6:	2100      	movs	r1, #0
 80040c8:	f002 ffcc 	bl	8007064 <memset>

    // calculate SD from 4 blocks of 8 samples each
    for (uint8_t block = 0; block < 4; block++)
 80040cc:	2337      	movs	r3, #55	@ 0x37
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]
 80040d4:	e079      	b.n	80041ca <detectGateMotion+0x116>
    {
        float sum = 0, mean = 0, sum_diff_squared = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040da:	2300      	movs	r3, #0
 80040dc:	623b      	str	r3, [r7, #32]
 80040de:	2300      	movs	r3, #0
 80040e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const int16_t *ptr = &data[block * 8];			// pointer to start of current block
 80040e2:	2337      	movs	r3, #55	@ 0x37
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	18d3      	adds	r3, r2, r3
 80040ee:	61fb      	str	r3, [r7, #28]

        // calculate mean of the 8 samples
        for (uint8_t i = 0; i < 8; i++)
 80040f0:	232b      	movs	r3, #43	@ 0x2b
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e016      	b.n	8004128 <detectGateMotion+0x74>
        {
            sum += ptr[i];
 80040fa:	242b      	movs	r4, #43	@ 0x2b
 80040fc:	193b      	adds	r3, r7, r4
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	18d3      	adds	r3, r2, r3
 8004106:	2200      	movs	r2, #0
 8004108:	5e9b      	ldrsh	r3, [r3, r2]
 800410a:	0018      	movs	r0, r3
 800410c:	f7fd f948 	bl	80013a0 <__aeabi_i2f>
 8004110:	1c03      	adds	r3, r0, #0
 8004112:	1c19      	adds	r1, r3, #0
 8004114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004116:	f7fc f9af 	bl	8000478 <__aeabi_fadd>
 800411a:	1c03      	adds	r3, r0, #0
 800411c:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < 8; i++)
 800411e:	193b      	adds	r3, r7, r4
 8004120:	781a      	ldrb	r2, [r3, #0]
 8004122:	193b      	adds	r3, r7, r4
 8004124:	3201      	adds	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
 8004128:	232b      	movs	r3, #43	@ 0x2b
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b07      	cmp	r3, #7
 8004130:	d9e3      	bls.n	80040fa <detectGateMotion+0x46>
        }
        mean = sum / 8.0f;
 8004132:	2182      	movs	r1, #130	@ 0x82
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004138:	f7fc fb90 	bl	800085c <__aeabi_fdiv>
 800413c:	1c03      	adds	r3, r0, #0
 800413e:	623b      	str	r3, [r7, #32]

        // calculate sum of squared differences from the mean
        for (uint8_t i = 0; i < 8; i++)
 8004140:	232a      	movs	r3, #42	@ 0x2a
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e023      	b.n	8004192 <detectGateMotion+0xde>
        {
        	sum_diff_squared += powf(ptr[i] - mean, 2);
 800414a:	242a      	movs	r4, #42	@ 0x2a
 800414c:	193b      	adds	r3, r7, r4
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	18d3      	adds	r3, r2, r3
 8004156:	2200      	movs	r2, #0
 8004158:	5e9b      	ldrsh	r3, [r3, r2]
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd f920 	bl	80013a0 <__aeabi_i2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	6a39      	ldr	r1, [r7, #32]
 8004164:	1c18      	adds	r0, r3, #0
 8004166:	f7fc fea1 	bl	8000eac <__aeabi_fsub>
 800416a:	1c03      	adds	r3, r0, #0
 800416c:	1c1a      	adds	r2, r3, #0
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	05db      	lsls	r3, r3, #23
 8004172:	1c19      	adds	r1, r3, #0
 8004174:	1c10      	adds	r0, r2, #0
 8004176:	f002 ffa7 	bl	80070c8 <powf>
 800417a:	1c03      	adds	r3, r0, #0
 800417c:	1c19      	adds	r1, r3, #0
 800417e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004180:	f7fc f97a 	bl	8000478 <__aeabi_fadd>
 8004184:	1c03      	adds	r3, r0, #0
 8004186:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < 8; i++)
 8004188:	193b      	adds	r3, r7, r4
 800418a:	781a      	ldrb	r2, [r3, #0]
 800418c:	193b      	adds	r3, r7, r4
 800418e:	3201      	adds	r2, #1
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	232a      	movs	r3, #42	@ 0x2a
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b07      	cmp	r3, #7
 800419a:	d9d6      	bls.n	800414a <detectGateMotion+0x96>
        }

        sigma[block] = sqrtf(sum_diff_squared / 8.0f); // calculate standard deviation
 800419c:	2182      	movs	r1, #130	@ 0x82
 800419e:	05c9      	lsls	r1, r1, #23
 80041a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80041a2:	f7fc fb5b 	bl	800085c <__aeabi_fdiv>
 80041a6:	1c03      	adds	r3, r0, #0
 80041a8:	1c1a      	adds	r2, r3, #0
 80041aa:	2537      	movs	r5, #55	@ 0x37
 80041ac:	197b      	adds	r3, r7, r5
 80041ae:	781c      	ldrb	r4, [r3, #0]
 80041b0:	1c10      	adds	r0, r2, #0
 80041b2:	f002 ffdd 	bl	8007170 <sqrtf>
 80041b6:	1c01      	adds	r1, r0, #0
 80041b8:	230c      	movs	r3, #12
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	00a2      	lsls	r2, r4, #2
 80041be:	50d1      	str	r1, [r2, r3]
    for (uint8_t block = 0; block < 4; block++)
 80041c0:	197b      	adds	r3, r7, r5
 80041c2:	781a      	ldrb	r2, [r3, #0]
 80041c4:	197b      	adds	r3, r7, r5
 80041c6:	3201      	adds	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	2337      	movs	r3, #55	@ 0x37
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d980      	bls.n	80040d6 <detectGateMotion+0x22>
    }

    // count how many times the difference between adjacent sigmas exceeds threshold (5 LSB)
    uint8_t count = 0;
 80041d4:	2329      	movs	r3, #41	@ 0x29
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; i++)
 80041dc:	2328      	movs	r3, #40	@ 0x28
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
 80041e4:	e025      	b.n	8004232 <detectGateMotion+0x17e>
    {
        float diff = fabsf(sigma[i + 1] - sigma[i]);
 80041e6:	2128      	movs	r1, #40	@ 0x28
 80041e8:	187b      	adds	r3, r7, r1
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	240c      	movs	r4, #12
 80041f0:	193b      	adds	r3, r7, r4
 80041f2:	0092      	lsls	r2, r2, #2
 80041f4:	58d0      	ldr	r0, [r2, r3]
 80041f6:	187b      	adds	r3, r7, r1
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	193b      	adds	r3, r7, r4
 80041fc:	0092      	lsls	r2, r2, #2
 80041fe:	58d3      	ldr	r3, [r2, r3]
 8004200:	1c19      	adds	r1, r3, #0
 8004202:	f7fc fe53 	bl	8000eac <__aeabi_fsub>
 8004206:	1c03      	adds	r3, r0, #0
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
        if (diff >= 5.0f)
 800420e:	4911      	ldr	r1, [pc, #68]	@ (8004254 <detectGateMotion+0x1a0>)
 8004210:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004212:	f7fc f927 	bl	8000464 <__aeabi_fcmpge>
 8004216:	1e03      	subs	r3, r0, #0
 8004218:	d005      	beq.n	8004226 <detectGateMotion+0x172>
            count++;
 800421a:	2129      	movs	r1, #41	@ 0x29
 800421c:	187b      	adds	r3, r7, r1
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	187b      	adds	r3, r7, r1
 8004222:	3201      	adds	r2, #1
 8004224:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; i++)
 8004226:	2128      	movs	r1, #40	@ 0x28
 8004228:	187b      	adds	r3, r7, r1
 800422a:	781a      	ldrb	r2, [r3, #0]
 800422c:	187b      	adds	r3, r7, r1
 800422e:	3201      	adds	r2, #1
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	2328      	movs	r3, #40	@ 0x28
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d9d4      	bls.n	80041e6 <detectGateMotion+0x132>
    }

    return (count >= 3); // if 3 times threshold was exceeded -> motion detected
 800423c:	2329      	movs	r3, #41	@ 0x29
 800423e:	18fb      	adds	r3, r7, r3
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2202      	movs	r2, #2
 8004244:	429a      	cmp	r2, r3
 8004246:	419b      	sbcs	r3, r3
 8004248:	425b      	negs	r3, r3
 800424a:	b2db      	uxtb	r3, r3
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	b00e      	add	sp, #56	@ 0x38
 8004252:	bdb0      	pop	{r4, r5, r7, pc}
 8004254:	40a00000 	.word	0x40a00000

08004258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425a:	b09d      	sub	sp, #116	@ 0x74
 800425c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	struct bma400_dev bma400 = {
 800425e:	2448      	movs	r4, #72	@ 0x48
 8004260:	193b      	adds	r3, r7, r4
 8004262:	0018      	movs	r0, r3
 8004264:	2320      	movs	r3, #32
 8004266:	001a      	movs	r2, r3
 8004268:	2100      	movs	r1, #0
 800426a:	f002 fefb 	bl	8007064 <memset>
 800426e:	0021      	movs	r1, r4
 8004270:	187b      	adds	r3, r7, r1
 8004272:	2201      	movs	r2, #1
 8004274:	705a      	strb	r2, [r3, #1]
 8004276:	000c      	movs	r4, r1
 8004278:	193b      	adds	r3, r7, r4
 800427a:	4a41      	ldr	r2, [pc, #260]	@ (8004380 <main+0x128>)
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	193b      	adds	r3, r7, r4
 8004280:	4a40      	ldr	r2, [pc, #256]	@ (8004384 <main+0x12c>)
 8004282:	60da      	str	r2, [r3, #12]
 8004284:	193b      	adds	r3, r7, r4
 8004286:	4a40      	ldr	r2, [pc, #256]	@ (8004388 <main+0x130>)
 8004288:	611a      	str	r2, [r3, #16]
 800428a:	193b      	adds	r3, r7, r4
 800428c:	4a3f      	ldr	r2, [pc, #252]	@ (800438c <main+0x134>)
 800428e:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004290:	f000 fa4d 	bl	800472e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004294:	f000 f882 	bl	800439c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004298:	f7ff fcdc 	bl	8003c54 <MX_GPIO_Init>
  MX_I2C1_Init();
 800429c:	f7ff fd5a 	bl	8003d54 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80042a0:	f000 f968 	bl	8004574 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80042a4:	f000 f922 	bl	80044ec <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); // dbg - check power mode state
  bma400_init(&bma400);
 80042a8:	193b      	adds	r3, r7, r4
 80042aa:	0018      	movs	r0, r3
 80042ac:	f7fd f8e6 	bl	800147c <bma400_init>
  configureBMA400(&bma400);
 80042b0:	193b      	adds	r3, r7, r4
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7ff fe02 	bl	8003ebc <configureBMA400>
  configureFifo(&bma400);
 80042b8:	193b      	adds	r3, r7, r4
 80042ba:	0018      	movs	r0, r3
 80042bc:	f7ff fe5b 	bl	8003f76 <configureFifo>

  uint16_t fifo_len = 0;
 80042c0:	236e      	movs	r3, #110	@ 0x6e
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	2200      	movs	r2, #0
 80042c6:	801a      	strh	r2, [r3, #0]
  do {
      uint8_t fifo_len_raw[2];
      bma400_get_regs(0x12, fifo_len_raw, 2, &bma400);
 80042c8:	2548      	movs	r5, #72	@ 0x48
 80042ca:	197b      	adds	r3, r7, r5
 80042cc:	1d39      	adds	r1, r7, #4
 80042ce:	2202      	movs	r2, #2
 80042d0:	2012      	movs	r0, #18
 80042d2:	f7fd f9af 	bl	8001634 <bma400_get_regs>
      fifo_len = fifo_len_raw[0] | (fifo_len_raw[1] << 8);
 80042d6:	1d3b      	adds	r3, r7, #4
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	b21a      	sxth	r2, r3
 80042dc:	1d3b      	adds	r3, r7, #4
 80042de:	785b      	ldrb	r3, [r3, #1]
 80042e0:	b21b      	sxth	r3, r3
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	b21b      	sxth	r3, r3
 80042e6:	4313      	orrs	r3, r2
 80042e8:	b21a      	sxth	r2, r3
 80042ea:	246e      	movs	r4, #110	@ 0x6e
 80042ec:	193b      	adds	r3, r7, r4
 80042ee:	801a      	strh	r2, [r3, #0]
      HAL_Delay(5);
 80042f0:	2005      	movs	r0, #5
 80042f2:	f000 fa99 	bl	8004828 <HAL_Delay>
  } while (fifo_len < 96);  // zbierzesz dokładnie 32 próbki Y (3 bajty każda)
 80042f6:	193b      	adds	r3, r7, r4
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	2b5f      	cmp	r3, #95	@ 0x5f
 80042fc:	d9e4      	bls.n	80042c8 <main+0x70>

  int16_t y_samples[32];
  uint8_t count = readFifoY(y_samples, 32, &bma400);
 80042fe:	266d      	movs	r6, #109	@ 0x6d
 8004300:	19bc      	adds	r4, r7, r6
 8004302:	197a      	adds	r2, r7, r5
 8004304:	2508      	movs	r5, #8
 8004306:	197b      	adds	r3, r7, r5
 8004308:	2120      	movs	r1, #32
 800430a:	0018      	movs	r0, r3
 800430c:	f7ff fe60 	bl	8003fd0 <readFifoY>
 8004310:	0003      	movs	r3, r0
 8004312:	7023      	strb	r3, [r4, #0]
  __NOP();
 8004314:	46c0      	nop			@ (mov r8, r8)
  if (count == 32) // FIFO has to fill up with 32 samples
 8004316:	19bb      	adds	r3, r7, r6
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b20      	cmp	r3, #32
 800431c:	d12c      	bne.n	8004378 <main+0x120>
  {
      bool is_moving = detectGateMotion(y_samples);
 800431e:	266c      	movs	r6, #108	@ 0x6c
 8004320:	19bc      	adds	r4, r7, r6
 8004322:	197b      	adds	r3, r7, r5
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff fec5 	bl	80040b4 <detectGateMotion>
 800432a:	0003      	movs	r3, r0
 800432c:	7023      	strb	r3, [r4, #0]
      const char *msg = is_moving ? "moving\n" : "stop\n";
 800432e:	19bb      	adds	r3, r7, r6
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <main+0xe2>
 8004336:	4b16      	ldr	r3, [pc, #88]	@ (8004390 <main+0x138>)
 8004338:	e000      	b.n	800433c <main+0xe4>
 800433a:	4b16      	ldr	r3, [pc, #88]	@ (8004394 <main+0x13c>)
 800433c:	66bb      	str	r3, [r7, #104]	@ 0x68
      HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, SET);
 800433e:	23a0      	movs	r3, #160	@ 0xa0
 8004340:	05db      	lsls	r3, r3, #23
 8004342:	2201      	movs	r2, #1
 8004344:	2120      	movs	r1, #32
 8004346:	0018      	movs	r0, r3
 8004348:	f000 fcc0 	bl	8004ccc <HAL_GPIO_WritePin>
      HAL_Delay(200);
 800434c:	20c8      	movs	r0, #200	@ 0xc8
 800434e:	f000 fa6b 	bl	8004828 <HAL_Delay>
      HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8004352:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004354:	0018      	movs	r0, r3
 8004356:	f7fb fed7 	bl	8000108 <strlen>
 800435a:	0003      	movs	r3, r0
 800435c:	b29a      	uxth	r2, r3
 800435e:	2301      	movs	r3, #1
 8004360:	425b      	negs	r3, r3
 8004362:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004364:	480c      	ldr	r0, [pc, #48]	@ (8004398 <main+0x140>)
 8004366:	f002 f90d 	bl	8006584 <HAL_UART_Transmit>
      HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, RESET);
 800436a:	23a0      	movs	r3, #160	@ 0xa0
 800436c:	05db      	lsls	r3, r3, #23
 800436e:	2200      	movs	r2, #0
 8004370:	2120      	movs	r1, #32
 8004372:	0018      	movs	r0, r3
 8004374:	f000 fcaa 	bl	8004ccc <HAL_GPIO_WritePin>
  }
  enterStandby();
 8004378:	f7ff fd8e 	bl	8003e98 <enterStandby>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800437c:	46c0      	nop			@ (mov r8, r8)
 800437e:	e7fd      	b.n	800437c <main+0x124>
 8004380:	20000078 	.word	0x20000078
 8004384:	08003b91 	.word	0x08003b91
 8004388:	08003bdf 	.word	0x08003bdf
 800438c:	08003c2d 	.word	0x08003c2d
 8004390:	08007a88 	.word	0x08007a88
 8004394:	08007a90 	.word	0x08007a90
 8004398:	20000178 	.word	0x20000178

0800439c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b08d      	sub	sp, #52	@ 0x34
 80043a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043a2:	2414      	movs	r4, #20
 80043a4:	193b      	adds	r3, r7, r4
 80043a6:	0018      	movs	r0, r3
 80043a8:	231c      	movs	r3, #28
 80043aa:	001a      	movs	r2, r3
 80043ac:	2100      	movs	r1, #0
 80043ae:	f002 fe59 	bl	8007064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043b2:	003b      	movs	r3, r7
 80043b4:	0018      	movs	r0, r3
 80043b6:	2314      	movs	r3, #20
 80043b8:	001a      	movs	r2, r3
 80043ba:	2100      	movs	r1, #0
 80043bc:	f002 fe52 	bl	8007064 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80043c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <SystemClock_Config+0x94>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004430 <SystemClock_Config+0x94>)
 80043c6:	2107      	movs	r1, #7
 80043c8:	438a      	bics	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80043cc:	193b      	adds	r3, r7, r4
 80043ce:	2202      	movs	r2, #2
 80043d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043d2:	193b      	adds	r3, r7, r4
 80043d4:	2280      	movs	r2, #128	@ 0x80
 80043d6:	0052      	lsls	r2, r2, #1
 80043d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80043da:	193b      	adds	r3, r7, r4
 80043dc:	2280      	movs	r2, #128	@ 0x80
 80043de:	0152      	lsls	r2, r2, #5
 80043e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80043e2:	193b      	adds	r3, r7, r4
 80043e4:	2240      	movs	r2, #64	@ 0x40
 80043e6:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043e8:	193b      	adds	r3, r7, r4
 80043ea:	0018      	movs	r0, r3
 80043ec:	f001 fb62 	bl	8005ab4 <HAL_RCC_OscConfig>
 80043f0:	1e03      	subs	r3, r0, #0
 80043f2:	d001      	beq.n	80043f8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80043f4:	f000 f81e 	bl	8004434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043f8:	003b      	movs	r3, r7
 80043fa:	2207      	movs	r2, #7
 80043fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80043fe:	003b      	movs	r3, r7
 8004400:	2200      	movs	r2, #0
 8004402:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004404:	003b      	movs	r3, r7
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800440a:	003b      	movs	r3, r7
 800440c:	2200      	movs	r2, #0
 800440e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8004410:	003b      	movs	r3, r7
 8004412:	2200      	movs	r2, #0
 8004414:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004416:	003b      	movs	r3, r7
 8004418:	2100      	movs	r1, #0
 800441a:	0018      	movs	r0, r3
 800441c:	f001 fd2e 	bl	8005e7c <HAL_RCC_ClockConfig>
 8004420:	1e03      	subs	r3, r0, #0
 8004422:	d001      	beq.n	8004428 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004424:	f000 f806 	bl	8004434 <Error_Handler>
  }
}
 8004428:	46c0      	nop			@ (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	b00d      	add	sp, #52	@ 0x34
 800442e:	bd90      	pop	{r4, r7, pc}
 8004430:	40022000 	.word	0x40022000

08004434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8004438:	2380      	movs	r3, #128	@ 0x80
 800443a:	0059      	lsls	r1, r3, #1
 800443c:	23a0      	movs	r3, #160	@ 0xa0
 800443e:	05db      	lsls	r3, r3, #23
 8004440:	2201      	movs	r2, #1
 8004442:	0018      	movs	r0, r3
 8004444:	f000 fc42 	bl	8004ccc <HAL_GPIO_WritePin>
  while (1)
 8004448:	46c0      	nop			@ (mov r8, r8)
 800444a:	e7fd      	b.n	8004448 <Error_Handler+0x14>

0800444c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004452:	4b12      	ldr	r3, [pc, #72]	@ (800449c <HAL_MspInit+0x50>)
 8004454:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004456:	4b11      	ldr	r3, [pc, #68]	@ (800449c <HAL_MspInit+0x50>)
 8004458:	2101      	movs	r1, #1
 800445a:	430a      	orrs	r2, r1
 800445c:	641a      	str	r2, [r3, #64]	@ 0x40
 800445e:	4b0f      	ldr	r3, [pc, #60]	@ (800449c <HAL_MspInit+0x50>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	2201      	movs	r2, #1
 8004464:	4013      	ands	r3, r2
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800446a:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <HAL_MspInit+0x50>)
 800446c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800446e:	4b0b      	ldr	r3, [pc, #44]	@ (800449c <HAL_MspInit+0x50>)
 8004470:	2180      	movs	r1, #128	@ 0x80
 8004472:	0549      	lsls	r1, r1, #21
 8004474:	430a      	orrs	r2, r1
 8004476:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004478:	4b08      	ldr	r3, [pc, #32]	@ (800449c <HAL_MspInit+0x50>)
 800447a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800447c:	2380      	movs	r3, #128	@ 0x80
 800447e:	055b      	lsls	r3, r3, #21
 8004480:	4013      	ands	r3, r2
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8004486:	2008      	movs	r0, #8
 8004488:	f000 f9f2 	bl	8004870 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 800448c:	2010      	movs	r0, #16
 800448e:	f000 f9ef 	bl	8004870 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004492:	46c0      	nop			@ (mov r8, r8)
 8004494:	46bd      	mov	sp, r7
 8004496:	b002      	add	sp, #8
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	40021000 	.word	0x40021000

080044a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80044a4:	46c0      	nop			@ (mov r8, r8)
 80044a6:	e7fd      	b.n	80044a4 <NMI_Handler+0x4>

080044a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044ac:	46c0      	nop			@ (mov r8, r8)
 80044ae:	e7fd      	b.n	80044ac <HardFault_Handler+0x4>

080044b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80044b4:	46c0      	nop			@ (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044c8:	f000 f992 	bl	80047f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044cc:	46c0      	nop			@ (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80044d8:	4b03      	ldr	r3, [pc, #12]	@ (80044e8 <SystemInit+0x14>)
 80044da:	2280      	movs	r2, #128	@ 0x80
 80044dc:	0512      	lsls	r2, r2, #20
 80044de:	609a      	str	r2, [r3, #8]
#endif
}
 80044e0:	46c0      	nop			@ (mov r8, r8)
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80044f0:	4b0e      	ldr	r3, [pc, #56]	@ (800452c <MX_TIM14_Init+0x40>)
 80044f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004530 <MX_TIM14_Init+0x44>)
 80044f4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 80044f6:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <MX_TIM14_Init+0x40>)
 80044f8:	2263      	movs	r2, #99	@ 0x63
 80044fa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044fc:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <MX_TIM14_Init+0x40>)
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 119;
 8004502:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <MX_TIM14_Init+0x40>)
 8004504:	2277      	movs	r2, #119	@ 0x77
 8004506:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004508:	4b08      	ldr	r3, [pc, #32]	@ (800452c <MX_TIM14_Init+0x40>)
 800450a:	2200      	movs	r2, #0
 800450c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800450e:	4b07      	ldr	r3, [pc, #28]	@ (800452c <MX_TIM14_Init+0x40>)
 8004510:	2200      	movs	r2, #0
 8004512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004514:	4b05      	ldr	r3, [pc, #20]	@ (800452c <MX_TIM14_Init+0x40>)
 8004516:	0018      	movs	r0, r3
 8004518:	f001 ff14 	bl	8006344 <HAL_TIM_Base_Init>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d001      	beq.n	8004524 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8004520:	f7ff ff88 	bl	8004434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004524:	46c0      	nop			@ (mov r8, r8)
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	46c0      	nop			@ (mov r8, r8)
 800452c:	2000012c 	.word	0x2000012c
 8004530:	40002000 	.word	0x40002000

08004534 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a0a      	ldr	r2, [pc, #40]	@ (800456c <HAL_TIM_Base_MspInit+0x38>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d10d      	bne.n	8004562 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004546:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <HAL_TIM_Base_MspInit+0x3c>)
 8004548:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800454a:	4b09      	ldr	r3, [pc, #36]	@ (8004570 <HAL_TIM_Base_MspInit+0x3c>)
 800454c:	2180      	movs	r1, #128	@ 0x80
 800454e:	0209      	lsls	r1, r1, #8
 8004550:	430a      	orrs	r2, r1
 8004552:	641a      	str	r2, [r3, #64]	@ 0x40
 8004554:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_TIM_Base_MspInit+0x3c>)
 8004556:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004558:	2380      	movs	r3, #128	@ 0x80
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	4013      	ands	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	46bd      	mov	sp, r7
 8004566:	b004      	add	sp, #16
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	40002000 	.word	0x40002000
 8004570:	40021000 	.word	0x40021000

08004574 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004578:	4b25      	ldr	r3, [pc, #148]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 800457a:	4a26      	ldr	r2, [pc, #152]	@ (8004614 <MX_USART1_UART_Init+0xa0>)
 800457c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800457e:	4b24      	ldr	r3, [pc, #144]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 8004580:	22e1      	movs	r2, #225	@ 0xe1
 8004582:	0252      	lsls	r2, r2, #9
 8004584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004586:	4b22      	ldr	r3, [pc, #136]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 8004588:	2200      	movs	r2, #0
 800458a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800458c:	4b20      	ldr	r3, [pc, #128]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 800458e:	2200      	movs	r2, #0
 8004590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004592:	4b1f      	ldr	r3, [pc, #124]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 8004594:	2200      	movs	r2, #0
 8004596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004598:	4b1d      	ldr	r3, [pc, #116]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 800459a:	220c      	movs	r2, #12
 800459c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800459e:	4b1c      	ldr	r3, [pc, #112]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045aa:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045b0:	4b17      	ldr	r3, [pc, #92]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80045b6:	4b16      	ldr	r3, [pc, #88]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 80045b8:	2208      	movs	r2, #8
 80045ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80045bc:	4b14      	ldr	r3, [pc, #80]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 80045be:	2280      	movs	r2, #128	@ 0x80
 80045c0:	0212      	lsls	r2, r2, #8
 80045c2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045c4:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 80045c6:	0018      	movs	r0, r3
 80045c8:	f001 ff86 	bl	80064d8 <HAL_UART_Init>
 80045cc:	1e03      	subs	r3, r0, #0
 80045ce:	d001      	beq.n	80045d4 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80045d0:	f7ff ff30 	bl	8004434 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 80045d6:	2100      	movs	r1, #0
 80045d8:	0018      	movs	r0, r3
 80045da:	f002 fc63 	bl	8006ea4 <HAL_UARTEx_SetTxFifoThreshold>
 80045de:	1e03      	subs	r3, r0, #0
 80045e0:	d001      	beq.n	80045e6 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 80045e2:	f7ff ff27 	bl	8004434 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 80045e8:	2100      	movs	r1, #0
 80045ea:	0018      	movs	r0, r3
 80045ec:	f002 fc9a 	bl	8006f24 <HAL_UARTEx_SetRxFifoThreshold>
 80045f0:	1e03      	subs	r3, r0, #0
 80045f2:	d001      	beq.n	80045f8 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 80045f4:	f7ff ff1e 	bl	8004434 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <MX_USART1_UART_Init+0x9c>)
 80045fa:	0018      	movs	r0, r3
 80045fc:	f002 fc18 	bl	8006e30 <HAL_UARTEx_DisableFifoMode>
 8004600:	1e03      	subs	r3, r0, #0
 8004602:	d001      	beq.n	8004608 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8004604:	f7ff ff16 	bl	8004434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004608:	46c0      	nop			@ (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	20000178 	.word	0x20000178
 8004614:	40013800 	.word	0x40013800

08004618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004618:	b590      	push	{r4, r7, lr}
 800461a:	b091      	sub	sp, #68	@ 0x44
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004620:	232c      	movs	r3, #44	@ 0x2c
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	0018      	movs	r0, r3
 8004626:	2314      	movs	r3, #20
 8004628:	001a      	movs	r2, r3
 800462a:	2100      	movs	r1, #0
 800462c:	f002 fd1a 	bl	8007064 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004630:	2410      	movs	r4, #16
 8004632:	193b      	adds	r3, r7, r4
 8004634:	0018      	movs	r0, r3
 8004636:	231c      	movs	r3, #28
 8004638:	001a      	movs	r2, r3
 800463a:	2100      	movs	r1, #0
 800463c:	f002 fd12 	bl	8007064 <memset>
  if(uartHandle->Instance==USART1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a23      	ldr	r2, [pc, #140]	@ (80046d4 <HAL_UART_MspInit+0xbc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d13f      	bne.n	80046ca <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800464a:	193b      	adds	r3, r7, r4
 800464c:	2201      	movs	r2, #1
 800464e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004650:	193b      	adds	r3, r7, r4
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004656:	193b      	adds	r3, r7, r4
 8004658:	0018      	movs	r0, r3
 800465a:	f001 fd87 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 800465e:	1e03      	subs	r3, r0, #0
 8004660:	d001      	beq.n	8004666 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004662:	f7ff fee7 	bl	8004434 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004666:	4b1c      	ldr	r3, [pc, #112]	@ (80046d8 <HAL_UART_MspInit+0xc0>)
 8004668:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800466a:	4b1b      	ldr	r3, [pc, #108]	@ (80046d8 <HAL_UART_MspInit+0xc0>)
 800466c:	2180      	movs	r1, #128	@ 0x80
 800466e:	01c9      	lsls	r1, r1, #7
 8004670:	430a      	orrs	r2, r1
 8004672:	641a      	str	r2, [r3, #64]	@ 0x40
 8004674:	4b18      	ldr	r3, [pc, #96]	@ (80046d8 <HAL_UART_MspInit+0xc0>)
 8004676:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004678:	2380      	movs	r3, #128	@ 0x80
 800467a:	01db      	lsls	r3, r3, #7
 800467c:	4013      	ands	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004682:	4b15      	ldr	r3, [pc, #84]	@ (80046d8 <HAL_UART_MspInit+0xc0>)
 8004684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004686:	4b14      	ldr	r3, [pc, #80]	@ (80046d8 <HAL_UART_MspInit+0xc0>)
 8004688:	2101      	movs	r1, #1
 800468a:	430a      	orrs	r2, r1
 800468c:	635a      	str	r2, [r3, #52]	@ 0x34
 800468e:	4b12      	ldr	r3, [pc, #72]	@ (80046d8 <HAL_UART_MspInit+0xc0>)
 8004690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004692:	2201      	movs	r2, #1
 8004694:	4013      	ands	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800469a:	212c      	movs	r1, #44	@ 0x2c
 800469c:	187b      	adds	r3, r7, r1
 800469e:	22c0      	movs	r2, #192	@ 0xc0
 80046a0:	00d2      	lsls	r2, r2, #3
 80046a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a4:	187b      	adds	r3, r7, r1
 80046a6:	2202      	movs	r2, #2
 80046a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046aa:	187b      	adds	r3, r7, r1
 80046ac:	2200      	movs	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	2200      	movs	r2, #0
 80046b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	2201      	movs	r2, #1
 80046ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046bc:	187a      	adds	r2, r7, r1
 80046be:	23a0      	movs	r3, #160	@ 0xa0
 80046c0:	05db      	lsls	r3, r3, #23
 80046c2:	0011      	movs	r1, r2
 80046c4:	0018      	movs	r0, r3
 80046c6:	f000 f997 	bl	80049f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80046ca:	46c0      	nop			@ (mov r8, r8)
 80046cc:	46bd      	mov	sp, r7
 80046ce:	b011      	add	sp, #68	@ 0x44
 80046d0:	bd90      	pop	{r4, r7, pc}
 80046d2:	46c0      	nop			@ (mov r8, r8)
 80046d4:	40013800 	.word	0x40013800
 80046d8:	40021000 	.word	0x40021000

080046dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80046dc:	480d      	ldr	r0, [pc, #52]	@ (8004714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80046de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80046e0:	f7ff fef8 	bl	80044d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80046e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80046e6:	e003      	b.n	80046f0 <LoopCopyDataInit>

080046e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80046e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80046ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80046ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80046ee:	3104      	adds	r1, #4

080046f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80046f0:	480a      	ldr	r0, [pc, #40]	@ (800471c <LoopForever+0xa>)
  ldr r3, =_edata
 80046f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <LoopForever+0xe>)
  adds r2, r0, r1
 80046f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80046f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80046f8:	d3f6      	bcc.n	80046e8 <CopyDataInit>
  ldr r2, =_sbss
 80046fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004724 <LoopForever+0x12>)
  b LoopFillZerobss
 80046fc:	e002      	b.n	8004704 <LoopFillZerobss>

080046fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80046fe:	2300      	movs	r3, #0
  str  r3, [r2]
 8004700:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004702:	3204      	adds	r2, #4

08004704 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004704:	4b08      	ldr	r3, [pc, #32]	@ (8004728 <LoopForever+0x16>)
  cmp r2, r3
 8004706:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004708:	d3f9      	bcc.n	80046fe <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800470a:	f002 fcb9 	bl	8007080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800470e:	f7ff fda3 	bl	8004258 <main>

08004712 <LoopForever>:

LoopForever:
    b LoopForever
 8004712:	e7fe      	b.n	8004712 <LoopForever>
  ldr   r0, =_estack
 8004714:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8004718:	08007d0c 	.word	0x08007d0c
  ldr r0, =_sdata
 800471c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004720:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8004724:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8004728:	20000348 	.word	0x20000348

0800472c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800472c:	e7fe      	b.n	800472c <ADC1_IRQHandler>

0800472e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004734:	1dfb      	adds	r3, r7, #7
 8004736:	2200      	movs	r2, #0
 8004738:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800473a:	2003      	movs	r0, #3
 800473c:	f000 f80e 	bl	800475c <HAL_InitTick>
 8004740:	1e03      	subs	r3, r0, #0
 8004742:	d003      	beq.n	800474c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8004744:	1dfb      	adds	r3, r7, #7
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e001      	b.n	8004750 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800474c:	f7ff fe7e 	bl	800444c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004750:	1dfb      	adds	r3, r7, #7
 8004752:	781b      	ldrb	r3, [r3, #0]
}
 8004754:	0018      	movs	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	b002      	add	sp, #8
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004764:	230f      	movs	r3, #15
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800476c:	4b1d      	ldr	r3, [pc, #116]	@ (80047e4 <HAL_InitTick+0x88>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d02b      	beq.n	80047cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8004774:	4b1c      	ldr	r3, [pc, #112]	@ (80047e8 <HAL_InitTick+0x8c>)
 8004776:	681c      	ldr	r4, [r3, #0]
 8004778:	4b1a      	ldr	r3, [pc, #104]	@ (80047e4 <HAL_InitTick+0x88>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	0019      	movs	r1, r3
 800477e:	23fa      	movs	r3, #250	@ 0xfa
 8004780:	0098      	lsls	r0, r3, #2
 8004782:	f7fb fcc9 	bl	8000118 <__udivsi3>
 8004786:	0003      	movs	r3, r0
 8004788:	0019      	movs	r1, r3
 800478a:	0020      	movs	r0, r4
 800478c:	f7fb fcc4 	bl	8000118 <__udivsi3>
 8004790:	0003      	movs	r3, r0
 8004792:	0018      	movs	r0, r3
 8004794:	f000 f923 	bl	80049de <HAL_SYSTICK_Config>
 8004798:	1e03      	subs	r3, r0, #0
 800479a:	d112      	bne.n	80047c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d80a      	bhi.n	80047b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	2301      	movs	r3, #1
 80047a6:	425b      	negs	r3, r3
 80047a8:	2200      	movs	r2, #0
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 f902 	bl	80049b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047b0:	4b0e      	ldr	r3, [pc, #56]	@ (80047ec <HAL_InitTick+0x90>)
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e00d      	b.n	80047d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80047b8:	230f      	movs	r3, #15
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	e008      	b.n	80047d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047c2:	230f      	movs	r3, #15
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e003      	b.n	80047d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047cc:	230f      	movs	r3, #15
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80047d4:	230f      	movs	r3, #15
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	781b      	ldrb	r3, [r3, #0]
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b005      	add	sp, #20
 80047e0:	bd90      	pop	{r4, r7, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	20000008 	.word	0x20000008
 80047e8:	20000000 	.word	0x20000000
 80047ec:	20000004 	.word	0x20000004

080047f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <HAL_IncTick+0x1c>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	001a      	movs	r2, r3
 80047fa:	4b05      	ldr	r3, [pc, #20]	@ (8004810 <HAL_IncTick+0x20>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	18d2      	adds	r2, r2, r3
 8004800:	4b03      	ldr	r3, [pc, #12]	@ (8004810 <HAL_IncTick+0x20>)
 8004802:	601a      	str	r2, [r3, #0]
}
 8004804:	46c0      	nop			@ (mov r8, r8)
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	46c0      	nop			@ (mov r8, r8)
 800480c:	20000008 	.word	0x20000008
 8004810:	2000020c 	.word	0x2000020c

08004814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  return uwTick;
 8004818:	4b02      	ldr	r3, [pc, #8]	@ (8004824 <HAL_GetTick+0x10>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	2000020c 	.word	0x2000020c

08004828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004830:	f7ff fff0 	bl	8004814 <HAL_GetTick>
 8004834:	0003      	movs	r3, r0
 8004836:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3301      	adds	r3, #1
 8004840:	d005      	beq.n	800484e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004842:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <HAL_Delay+0x44>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	001a      	movs	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	189b      	adds	r3, r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	f7ff ffe0 	bl	8004814 <HAL_GetTick>
 8004854:	0002      	movs	r2, r0
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	429a      	cmp	r2, r3
 800485e:	d8f7      	bhi.n	8004850 <HAL_Delay+0x28>
  {
  }
}
 8004860:	46c0      	nop			@ (mov r8, r8)
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	46bd      	mov	sp, r7
 8004866:	b004      	add	sp, #16
 8004868:	bd80      	pop	{r7, pc}
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	20000008 	.word	0x20000008

08004870 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8004878:	4b04      	ldr	r3, [pc, #16]	@ (800488c <HAL_SYSCFG_EnableRemap+0x1c>)
 800487a:	6819      	ldr	r1, [r3, #0]
 800487c:	4b03      	ldr	r3, [pc, #12]	@ (800488c <HAL_SYSCFG_EnableRemap+0x1c>)
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	430a      	orrs	r2, r1
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	46c0      	nop			@ (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b002      	add	sp, #8
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40010000 	.word	0x40010000

08004890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	0002      	movs	r2, r0
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	1dfb      	adds	r3, r7, #7
 800489c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800489e:	1dfb      	adds	r3, r7, #7
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80048a4:	d828      	bhi.n	80048f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004964 <__NVIC_SetPriority+0xd4>)
 80048a8:	1dfb      	adds	r3, r7, #7
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	b25b      	sxtb	r3, r3
 80048ae:	089b      	lsrs	r3, r3, #2
 80048b0:	33c0      	adds	r3, #192	@ 0xc0
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	589b      	ldr	r3, [r3, r2]
 80048b6:	1dfa      	adds	r2, r7, #7
 80048b8:	7812      	ldrb	r2, [r2, #0]
 80048ba:	0011      	movs	r1, r2
 80048bc:	2203      	movs	r2, #3
 80048be:	400a      	ands	r2, r1
 80048c0:	00d2      	lsls	r2, r2, #3
 80048c2:	21ff      	movs	r1, #255	@ 0xff
 80048c4:	4091      	lsls	r1, r2
 80048c6:	000a      	movs	r2, r1
 80048c8:	43d2      	mvns	r2, r2
 80048ca:	401a      	ands	r2, r3
 80048cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	019b      	lsls	r3, r3, #6
 80048d2:	22ff      	movs	r2, #255	@ 0xff
 80048d4:	401a      	ands	r2, r3
 80048d6:	1dfb      	adds	r3, r7, #7
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	0018      	movs	r0, r3
 80048dc:	2303      	movs	r3, #3
 80048de:	4003      	ands	r3, r0
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048e4:	481f      	ldr	r0, [pc, #124]	@ (8004964 <__NVIC_SetPriority+0xd4>)
 80048e6:	1dfb      	adds	r3, r7, #7
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	b25b      	sxtb	r3, r3
 80048ec:	089b      	lsrs	r3, r3, #2
 80048ee:	430a      	orrs	r2, r1
 80048f0:	33c0      	adds	r3, #192	@ 0xc0
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80048f6:	e031      	b.n	800495c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004968 <__NVIC_SetPriority+0xd8>)
 80048fa:	1dfb      	adds	r3, r7, #7
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	0019      	movs	r1, r3
 8004900:	230f      	movs	r3, #15
 8004902:	400b      	ands	r3, r1
 8004904:	3b08      	subs	r3, #8
 8004906:	089b      	lsrs	r3, r3, #2
 8004908:	3306      	adds	r3, #6
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	18d3      	adds	r3, r2, r3
 800490e:	3304      	adds	r3, #4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	1dfa      	adds	r2, r7, #7
 8004914:	7812      	ldrb	r2, [r2, #0]
 8004916:	0011      	movs	r1, r2
 8004918:	2203      	movs	r2, #3
 800491a:	400a      	ands	r2, r1
 800491c:	00d2      	lsls	r2, r2, #3
 800491e:	21ff      	movs	r1, #255	@ 0xff
 8004920:	4091      	lsls	r1, r2
 8004922:	000a      	movs	r2, r1
 8004924:	43d2      	mvns	r2, r2
 8004926:	401a      	ands	r2, r3
 8004928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	019b      	lsls	r3, r3, #6
 800492e:	22ff      	movs	r2, #255	@ 0xff
 8004930:	401a      	ands	r2, r3
 8004932:	1dfb      	adds	r3, r7, #7
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	0018      	movs	r0, r3
 8004938:	2303      	movs	r3, #3
 800493a:	4003      	ands	r3, r0
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004940:	4809      	ldr	r0, [pc, #36]	@ (8004968 <__NVIC_SetPriority+0xd8>)
 8004942:	1dfb      	adds	r3, r7, #7
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	001c      	movs	r4, r3
 8004948:	230f      	movs	r3, #15
 800494a:	4023      	ands	r3, r4
 800494c:	3b08      	subs	r3, #8
 800494e:	089b      	lsrs	r3, r3, #2
 8004950:	430a      	orrs	r2, r1
 8004952:	3306      	adds	r3, #6
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	18c3      	adds	r3, r0, r3
 8004958:	3304      	adds	r3, #4
 800495a:	601a      	str	r2, [r3, #0]
}
 800495c:	46c0      	nop			@ (mov r8, r8)
 800495e:	46bd      	mov	sp, r7
 8004960:	b003      	add	sp, #12
 8004962:	bd90      	pop	{r4, r7, pc}
 8004964:	e000e100 	.word	0xe000e100
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	1e5a      	subs	r2, r3, #1
 8004978:	2380      	movs	r3, #128	@ 0x80
 800497a:	045b      	lsls	r3, r3, #17
 800497c:	429a      	cmp	r2, r3
 800497e:	d301      	bcc.n	8004984 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004980:	2301      	movs	r3, #1
 8004982:	e010      	b.n	80049a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004984:	4b0a      	ldr	r3, [pc, #40]	@ (80049b0 <SysTick_Config+0x44>)
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	3a01      	subs	r2, #1
 800498a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800498c:	2301      	movs	r3, #1
 800498e:	425b      	negs	r3, r3
 8004990:	2103      	movs	r1, #3
 8004992:	0018      	movs	r0, r3
 8004994:	f7ff ff7c 	bl	8004890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004998:	4b05      	ldr	r3, [pc, #20]	@ (80049b0 <SysTick_Config+0x44>)
 800499a:	2200      	movs	r2, #0
 800499c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800499e:	4b04      	ldr	r3, [pc, #16]	@ (80049b0 <SysTick_Config+0x44>)
 80049a0:	2207      	movs	r2, #7
 80049a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b002      	add	sp, #8
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	46c0      	nop			@ (mov r8, r8)
 80049b0:	e000e010 	.word	0xe000e010

080049b4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	210f      	movs	r1, #15
 80049c0:	187b      	adds	r3, r7, r1
 80049c2:	1c02      	adds	r2, r0, #0
 80049c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	187b      	adds	r3, r7, r1
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	b25b      	sxtb	r3, r3
 80049ce:	0011      	movs	r1, r2
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7ff ff5d 	bl	8004890 <__NVIC_SetPriority>
}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	46bd      	mov	sp, r7
 80049da:	b004      	add	sp, #16
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7ff ffbf 	bl	800496c <SysTick_Config>
 80049ee:	0003      	movs	r3, r0
}
 80049f0:	0018      	movs	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b002      	add	sp, #8
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004a06:	e14d      	b.n	8004ca4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4091      	lsls	r1, r2
 8004a12:	000a      	movs	r2, r1
 8004a14:	4013      	ands	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d100      	bne.n	8004a20 <HAL_GPIO_Init+0x28>
 8004a1e:	e13e      	b.n	8004c9e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d003      	beq.n	8004a30 <HAL_GPIO_Init+0x38>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b12      	cmp	r3, #18
 8004a2e:	d125      	bne.n	8004a7c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	08da      	lsrs	r2, r3, #3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3208      	adds	r2, #8
 8004a38:	0092      	lsls	r2, r2, #2
 8004a3a:	58d3      	ldr	r3, [r2, r3]
 8004a3c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2207      	movs	r2, #7
 8004a42:	4013      	ands	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	220f      	movs	r2, #15
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	0013      	movs	r3, r2
 8004a4c:	43da      	mvns	r2, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	4013      	ands	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	220f      	movs	r2, #15
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2107      	movs	r1, #7
 8004a60:	400b      	ands	r3, r1
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	409a      	lsls	r2, r3
 8004a66:	0013      	movs	r3, r2
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	08da      	lsrs	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3208      	adds	r2, #8
 8004a76:	0092      	lsls	r2, r2, #2
 8004a78:	6979      	ldr	r1, [r7, #20]
 8004a7a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	2203      	movs	r2, #3
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	0013      	movs	r3, r2
 8004a8c:	43da      	mvns	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	4013      	ands	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2203      	movs	r2, #3
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	409a      	lsls	r2, r3
 8004aa2:	0013      	movs	r3, r2
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d00b      	beq.n	8004ad0 <HAL_GPIO_Init+0xd8>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d007      	beq.n	8004ad0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ac4:	2b11      	cmp	r3, #17
 8004ac6:	d003      	beq.n	8004ad0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b12      	cmp	r3, #18
 8004ace:	d130      	bne.n	8004b32 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	2203      	movs	r2, #3
 8004adc:	409a      	lsls	r2, r3
 8004ade:	0013      	movs	r3, r2
 8004ae0:	43da      	mvns	r2, r3
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	409a      	lsls	r2, r3
 8004af2:	0013      	movs	r3, r2
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b06:	2201      	movs	r2, #1
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	0013      	movs	r3, r2
 8004b0e:	43da      	mvns	r2, r3
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	4013      	ands	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	091b      	lsrs	r3, r3, #4
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	401a      	ands	r2, r3
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	409a      	lsls	r2, r3
 8004b24:	0013      	movs	r3, r2
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d017      	beq.n	8004b6a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	2203      	movs	r2, #3
 8004b46:	409a      	lsls	r2, r3
 8004b48:	0013      	movs	r3, r2
 8004b4a:	43da      	mvns	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	0013      	movs	r3, r2
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	2380      	movs	r3, #128	@ 0x80
 8004b70:	055b      	lsls	r3, r3, #21
 8004b72:	4013      	ands	r3, r2
 8004b74:	d100      	bne.n	8004b78 <HAL_GPIO_Init+0x180>
 8004b76:	e092      	b.n	8004c9e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004b78:	4a50      	ldr	r2, [pc, #320]	@ (8004cbc <HAL_GPIO_Init+0x2c4>)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	3318      	adds	r3, #24
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	589b      	ldr	r3, [r3, r2]
 8004b84:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	220f      	movs	r2, #15
 8004b90:	409a      	lsls	r2, r3
 8004b92:	0013      	movs	r3, r2
 8004b94:	43da      	mvns	r2, r3
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	23a0      	movs	r3, #160	@ 0xa0
 8004ba0:	05db      	lsls	r3, r3, #23
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d013      	beq.n	8004bce <HAL_GPIO_Init+0x1d6>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a45      	ldr	r2, [pc, #276]	@ (8004cc0 <HAL_GPIO_Init+0x2c8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00d      	beq.n	8004bca <HAL_GPIO_Init+0x1d2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a44      	ldr	r2, [pc, #272]	@ (8004cc4 <HAL_GPIO_Init+0x2cc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d007      	beq.n	8004bc6 <HAL_GPIO_Init+0x1ce>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a43      	ldr	r2, [pc, #268]	@ (8004cc8 <HAL_GPIO_Init+0x2d0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d101      	bne.n	8004bc2 <HAL_GPIO_Init+0x1ca>
 8004bbe:	2305      	movs	r3, #5
 8004bc0:	e006      	b.n	8004bd0 <HAL_GPIO_Init+0x1d8>
 8004bc2:	2306      	movs	r3, #6
 8004bc4:	e004      	b.n	8004bd0 <HAL_GPIO_Init+0x1d8>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e002      	b.n	8004bd0 <HAL_GPIO_Init+0x1d8>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <HAL_GPIO_Init+0x1d8>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	2103      	movs	r1, #3
 8004bd4:	400a      	ands	r2, r1
 8004bd6:	00d2      	lsls	r2, r2, #3
 8004bd8:	4093      	lsls	r3, r2
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004be0:	4936      	ldr	r1, [pc, #216]	@ (8004cbc <HAL_GPIO_Init+0x2c4>)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	089b      	lsrs	r3, r3, #2
 8004be6:	3318      	adds	r3, #24
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8004bee:	4a33      	ldr	r2, [pc, #204]	@ (8004cbc <HAL_GPIO_Init+0x2c4>)
 8004bf0:	2380      	movs	r3, #128	@ 0x80
 8004bf2:	58d3      	ldr	r3, [r2, r3]
 8004bf4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	43da      	mvns	r2, r3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	2380      	movs	r3, #128	@ 0x80
 8004c06:	025b      	lsls	r3, r3, #9
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004c14:	4929      	ldr	r1, [pc, #164]	@ (8004cbc <HAL_GPIO_Init+0x2c4>)
 8004c16:	2280      	movs	r2, #128	@ 0x80
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8004c1c:	4a27      	ldr	r2, [pc, #156]	@ (8004cbc <HAL_GPIO_Init+0x2c4>)
 8004c1e:	2384      	movs	r3, #132	@ 0x84
 8004c20:	58d3      	ldr	r3, [r2, r3]
 8004c22:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	43da      	mvns	r2, r3
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	2380      	movs	r3, #128	@ 0x80
 8004c34:	029b      	lsls	r3, r3, #10
 8004c36:	4013      	ands	r3, r2
 8004c38:	d003      	beq.n	8004c42 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004c42:	491e      	ldr	r1, [pc, #120]	@ (8004cbc <HAL_GPIO_Init+0x2c4>)
 8004c44:	2284      	movs	r2, #132	@ 0x84
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cbc <HAL_GPIO_Init+0x2c4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	43da      	mvns	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	4013      	ands	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	2380      	movs	r3, #128	@ 0x80
 8004c60:	035b      	lsls	r3, r3, #13
 8004c62:	4013      	ands	r3, r2
 8004c64:	d003      	beq.n	8004c6e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004c6e:	4b13      	ldr	r3, [pc, #76]	@ (8004cbc <HAL_GPIO_Init+0x2c4>)
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8004c74:	4b11      	ldr	r3, [pc, #68]	@ (8004cbc <HAL_GPIO_Init+0x2c4>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	43da      	mvns	r2, r3
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	4013      	ands	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	2380      	movs	r3, #128	@ 0x80
 8004c8a:	039b      	lsls	r3, r3, #14
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004c98:	4b08      	ldr	r3, [pc, #32]	@ (8004cbc <HAL_GPIO_Init+0x2c4>)
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	40da      	lsrs	r2, r3
 8004cac:	1e13      	subs	r3, r2, #0
 8004cae:	d000      	beq.n	8004cb2 <HAL_GPIO_Init+0x2ba>
 8004cb0:	e6aa      	b.n	8004a08 <HAL_GPIO_Init+0x10>
  }
}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	46c0      	nop			@ (mov r8, r8)
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b006      	add	sp, #24
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40021800 	.word	0x40021800
 8004cc0:	50000400 	.word	0x50000400
 8004cc4:	50000800 	.word	0x50000800
 8004cc8:	50001400 	.word	0x50001400

08004ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	0008      	movs	r0, r1
 8004cd6:	0011      	movs	r1, r2
 8004cd8:	1cbb      	adds	r3, r7, #2
 8004cda:	1c02      	adds	r2, r0, #0
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	1c7b      	adds	r3, r7, #1
 8004ce0:	1c0a      	adds	r2, r1, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ce4:	1c7b      	adds	r3, r7, #1
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cec:	1cbb      	adds	r3, r7, #2
 8004cee:	881a      	ldrh	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004cf4:	e003      	b.n	8004cfe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004cf6:	1cbb      	adds	r3, r7, #2
 8004cf8:	881a      	ldrh	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b002      	add	sp, #8
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e08f      	b.n	8004e3a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2241      	movs	r2, #65	@ 0x41
 8004d1e:	5c9b      	ldrb	r3, [r3, r2]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d107      	bne.n	8004d36 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2240      	movs	r2, #64	@ 0x40
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	0018      	movs	r0, r3
 8004d32:	f7ff f84f 	bl	8003dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2241      	movs	r2, #65	@ 0x41
 8004d3a:	2124      	movs	r1, #36	@ 0x24
 8004d3c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	438a      	bics	r2, r1
 8004d4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	493b      	ldr	r1, [pc, #236]	@ (8004e44 <HAL_I2C_Init+0x13c>)
 8004d58:	400a      	ands	r2, r1
 8004d5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4938      	ldr	r1, [pc, #224]	@ (8004e48 <HAL_I2C_Init+0x140>)
 8004d68:	400a      	ands	r2, r1
 8004d6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d108      	bne.n	8004d86 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2180      	movs	r1, #128	@ 0x80
 8004d7e:	0209      	lsls	r1, r1, #8
 8004d80:	430a      	orrs	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]
 8004d84:	e007      	b.n	8004d96 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2184      	movs	r1, #132	@ 0x84
 8004d90:	0209      	lsls	r1, r1, #8
 8004d92:	430a      	orrs	r2, r1
 8004d94:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d109      	bne.n	8004db2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2180      	movs	r1, #128	@ 0x80
 8004daa:	0109      	lsls	r1, r1, #4
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	e007      	b.n	8004dc2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4923      	ldr	r1, [pc, #140]	@ (8004e4c <HAL_I2C_Init+0x144>)
 8004dbe:	400a      	ands	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4920      	ldr	r1, [pc, #128]	@ (8004e50 <HAL_I2C_Init+0x148>)
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	491a      	ldr	r1, [pc, #104]	@ (8004e48 <HAL_I2C_Init+0x140>)
 8004dde:	400a      	ands	r2, r1
 8004de0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69d9      	ldr	r1, [r3, #28]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1a      	ldr	r2, [r3, #32]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2101      	movs	r1, #1
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2241      	movs	r2, #65	@ 0x41
 8004e26:	2120      	movs	r1, #32
 8004e28:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2242      	movs	r2, #66	@ 0x42
 8004e34:	2100      	movs	r1, #0
 8004e36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b002      	add	sp, #8
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	46c0      	nop			@ (mov r8, r8)
 8004e44:	f0ffffff 	.word	0xf0ffffff
 8004e48:	ffff7fff 	.word	0xffff7fff
 8004e4c:	fffff7ff 	.word	0xfffff7ff
 8004e50:	02008000 	.word	0x02008000

08004e54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e54:	b590      	push	{r4, r7, lr}
 8004e56:	b089      	sub	sp, #36	@ 0x24
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	000c      	movs	r4, r1
 8004e5e:	0010      	movs	r0, r2
 8004e60:	0019      	movs	r1, r3
 8004e62:	230a      	movs	r3, #10
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	1c22      	adds	r2, r4, #0
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	1c02      	adds	r2, r0, #0
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	1dbb      	adds	r3, r7, #6
 8004e74:	1c0a      	adds	r2, r1, #0
 8004e76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2241      	movs	r2, #65	@ 0x41
 8004e7c:	5c9b      	ldrb	r3, [r3, r2]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d000      	beq.n	8004e86 <HAL_I2C_Mem_Write+0x32>
 8004e84:	e10c      	b.n	80050a0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <HAL_I2C_Mem_Write+0x42>
 8004e8c:	232c      	movs	r3, #44	@ 0x2c
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2280      	movs	r2, #128	@ 0x80
 8004e9a:	0092      	lsls	r2, r2, #2
 8004e9c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e0ff      	b.n	80050a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2240      	movs	r2, #64	@ 0x40
 8004ea6:	5c9b      	ldrb	r3, [r3, r2]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_I2C_Mem_Write+0x5c>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e0f8      	b.n	80050a2 <HAL_I2C_Mem_Write+0x24e>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2240      	movs	r2, #64	@ 0x40
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004eb8:	f7ff fcac 	bl	8004814 <HAL_GetTick>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ec0:	2380      	movs	r3, #128	@ 0x80
 8004ec2:	0219      	lsls	r1, r3, #8
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	2319      	movs	r3, #25
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f000 fb0b 	bl	80054e8 <I2C_WaitOnFlagUntilTimeout>
 8004ed2:	1e03      	subs	r3, r0, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e0e3      	b.n	80050a2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2241      	movs	r2, #65	@ 0x41
 8004ede:	2121      	movs	r1, #33	@ 0x21
 8004ee0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2242      	movs	r2, #66	@ 0x42
 8004ee6:	2140      	movs	r1, #64	@ 0x40
 8004ee8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ef4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	222c      	movs	r2, #44	@ 0x2c
 8004efa:	18ba      	adds	r2, r7, r2
 8004efc:	8812      	ldrh	r2, [r2, #0]
 8004efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f06:	1dbb      	adds	r3, r7, #6
 8004f08:	881c      	ldrh	r4, [r3, #0]
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	881a      	ldrh	r2, [r3, #0]
 8004f10:	230a      	movs	r3, #10
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	8819      	ldrh	r1, [r3, #0]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	0023      	movs	r3, r4
 8004f22:	f000 f9f9 	bl	8005318 <I2C_RequestMemoryWrite>
 8004f26:	1e03      	subs	r3, r0, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2240      	movs	r2, #64	@ 0x40
 8004f2e:	2100      	movs	r1, #0
 8004f30:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e0b5      	b.n	80050a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2bff      	cmp	r3, #255	@ 0xff
 8004f3e:	d911      	bls.n	8004f64 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	22ff      	movs	r2, #255	@ 0xff
 8004f44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	2380      	movs	r3, #128	@ 0x80
 8004f4e:	045c      	lsls	r4, r3, #17
 8004f50:	230a      	movs	r3, #10
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	8819      	ldrh	r1, [r3, #0]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	0023      	movs	r3, r4
 8004f5e:	f000 fc9d 	bl	800589c <I2C_TransferConfig>
 8004f62:	e012      	b.n	8004f8a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	2380      	movs	r3, #128	@ 0x80
 8004f76:	049c      	lsls	r4, r3, #18
 8004f78:	230a      	movs	r3, #10
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	8819      	ldrh	r1, [r3, #0]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	2300      	movs	r3, #0
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	0023      	movs	r3, r4
 8004f86:	f000 fc89 	bl	800589c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	0018      	movs	r0, r3
 8004f92:	f000 fb01 	bl	8005598 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f96:	1e03      	subs	r3, r0, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e081      	b.n	80050a2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	781a      	ldrb	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d03a      	beq.n	800504e <HAL_I2C_Mem_Write+0x1fa>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d136      	bne.n	800504e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	0013      	movs	r3, r2
 8004fea:	2200      	movs	r2, #0
 8004fec:	2180      	movs	r1, #128	@ 0x80
 8004fee:	f000 fa7b 	bl	80054e8 <I2C_WaitOnFlagUntilTimeout>
 8004ff2:	1e03      	subs	r3, r0, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e053      	b.n	80050a2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2bff      	cmp	r3, #255	@ 0xff
 8005002:	d911      	bls.n	8005028 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	22ff      	movs	r2, #255	@ 0xff
 8005008:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500e:	b2da      	uxtb	r2, r3
 8005010:	2380      	movs	r3, #128	@ 0x80
 8005012:	045c      	lsls	r4, r3, #17
 8005014:	230a      	movs	r3, #10
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	8819      	ldrh	r1, [r3, #0]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	2300      	movs	r3, #0
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	0023      	movs	r3, r4
 8005022:	f000 fc3b 	bl	800589c <I2C_TransferConfig>
 8005026:	e012      	b.n	800504e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005036:	b2da      	uxtb	r2, r3
 8005038:	2380      	movs	r3, #128	@ 0x80
 800503a:	049c      	lsls	r4, r3, #18
 800503c:	230a      	movs	r3, #10
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	8819      	ldrh	r1, [r3, #0]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	2300      	movs	r3, #0
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	0023      	movs	r3, r4
 800504a:	f000 fc27 	bl	800589c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d198      	bne.n	8004f8a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	0018      	movs	r0, r3
 8005060:	f000 fae0 	bl	8005624 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005064:	1e03      	subs	r3, r0, #0
 8005066:	d001      	beq.n	800506c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e01a      	b.n	80050a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2220      	movs	r2, #32
 8005072:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	490b      	ldr	r1, [pc, #44]	@ (80050ac <HAL_I2C_Mem_Write+0x258>)
 8005080:	400a      	ands	r2, r1
 8005082:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2241      	movs	r2, #65	@ 0x41
 8005088:	2120      	movs	r1, #32
 800508a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2242      	movs	r2, #66	@ 0x42
 8005090:	2100      	movs	r1, #0
 8005092:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2240      	movs	r2, #64	@ 0x40
 8005098:	2100      	movs	r1, #0
 800509a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	e000      	b.n	80050a2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80050a0:	2302      	movs	r3, #2
  }
}
 80050a2:	0018      	movs	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b007      	add	sp, #28
 80050a8:	bd90      	pop	{r4, r7, pc}
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	fe00e800 	.word	0xfe00e800

080050b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b089      	sub	sp, #36	@ 0x24
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	000c      	movs	r4, r1
 80050ba:	0010      	movs	r0, r2
 80050bc:	0019      	movs	r1, r3
 80050be:	230a      	movs	r3, #10
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	1c22      	adds	r2, r4, #0
 80050c4:	801a      	strh	r2, [r3, #0]
 80050c6:	2308      	movs	r3, #8
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	1c02      	adds	r2, r0, #0
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	1dbb      	adds	r3, r7, #6
 80050d0:	1c0a      	adds	r2, r1, #0
 80050d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2241      	movs	r2, #65	@ 0x41
 80050d8:	5c9b      	ldrb	r3, [r3, r2]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d000      	beq.n	80050e2 <HAL_I2C_Mem_Read+0x32>
 80050e0:	e110      	b.n	8005304 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <HAL_I2C_Mem_Read+0x42>
 80050e8:	232c      	movs	r3, #44	@ 0x2c
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d105      	bne.n	80050fe <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2280      	movs	r2, #128	@ 0x80
 80050f6:	0092      	lsls	r2, r2, #2
 80050f8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e103      	b.n	8005306 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2240      	movs	r2, #64	@ 0x40
 8005102:	5c9b      	ldrb	r3, [r3, r2]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_I2C_Mem_Read+0x5c>
 8005108:	2302      	movs	r3, #2
 800510a:	e0fc      	b.n	8005306 <HAL_I2C_Mem_Read+0x256>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2240      	movs	r2, #64	@ 0x40
 8005110:	2101      	movs	r1, #1
 8005112:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005114:	f7ff fb7e 	bl	8004814 <HAL_GetTick>
 8005118:	0003      	movs	r3, r0
 800511a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800511c:	2380      	movs	r3, #128	@ 0x80
 800511e:	0219      	lsls	r1, r3, #8
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	2319      	movs	r3, #25
 8005128:	2201      	movs	r2, #1
 800512a:	f000 f9dd 	bl	80054e8 <I2C_WaitOnFlagUntilTimeout>
 800512e:	1e03      	subs	r3, r0, #0
 8005130:	d001      	beq.n	8005136 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e0e7      	b.n	8005306 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2241      	movs	r2, #65	@ 0x41
 800513a:	2122      	movs	r1, #34	@ 0x22
 800513c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2242      	movs	r2, #66	@ 0x42
 8005142:	2140      	movs	r1, #64	@ 0x40
 8005144:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005150:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	222c      	movs	r2, #44	@ 0x2c
 8005156:	18ba      	adds	r2, r7, r2
 8005158:	8812      	ldrh	r2, [r2, #0]
 800515a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005162:	1dbb      	adds	r3, r7, #6
 8005164:	881c      	ldrh	r4, [r3, #0]
 8005166:	2308      	movs	r3, #8
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	881a      	ldrh	r2, [r3, #0]
 800516c:	230a      	movs	r3, #10
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	8819      	ldrh	r1, [r3, #0]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	0023      	movs	r3, r4
 800517e:	f000 f92f 	bl	80053e0 <I2C_RequestMemoryRead>
 8005182:	1e03      	subs	r3, r0, #0
 8005184:	d005      	beq.n	8005192 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2240      	movs	r2, #64	@ 0x40
 800518a:	2100      	movs	r1, #0
 800518c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e0b9      	b.n	8005306 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	2bff      	cmp	r3, #255	@ 0xff
 800519a:	d911      	bls.n	80051c0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	22ff      	movs	r2, #255	@ 0xff
 80051a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	2380      	movs	r3, #128	@ 0x80
 80051aa:	045c      	lsls	r4, r3, #17
 80051ac:	230a      	movs	r3, #10
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	8819      	ldrh	r1, [r3, #0]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	4b56      	ldr	r3, [pc, #344]	@ (8005310 <HAL_I2C_Mem_Read+0x260>)
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	0023      	movs	r3, r4
 80051ba:	f000 fb6f 	bl	800589c <I2C_TransferConfig>
 80051be:	e012      	b.n	80051e6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	2380      	movs	r3, #128	@ 0x80
 80051d2:	049c      	lsls	r4, r3, #18
 80051d4:	230a      	movs	r3, #10
 80051d6:	18fb      	adds	r3, r7, r3
 80051d8:	8819      	ldrh	r1, [r3, #0]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	4b4c      	ldr	r3, [pc, #304]	@ (8005310 <HAL_I2C_Mem_Read+0x260>)
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	0023      	movs	r3, r4
 80051e2:	f000 fb5b 	bl	800589c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80051e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	0013      	movs	r3, r2
 80051f0:	2200      	movs	r2, #0
 80051f2:	2104      	movs	r1, #4
 80051f4:	f000 f978 	bl	80054e8 <I2C_WaitOnFlagUntilTimeout>
 80051f8:	1e03      	subs	r3, r0, #0
 80051fa:	d001      	beq.n	8005200 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e082      	b.n	8005306 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d03a      	beq.n	80052b2 <HAL_I2C_Mem_Read+0x202>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005240:	2b00      	cmp	r3, #0
 8005242:	d136      	bne.n	80052b2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	0013      	movs	r3, r2
 800524e:	2200      	movs	r2, #0
 8005250:	2180      	movs	r1, #128	@ 0x80
 8005252:	f000 f949 	bl	80054e8 <I2C_WaitOnFlagUntilTimeout>
 8005256:	1e03      	subs	r3, r0, #0
 8005258:	d001      	beq.n	800525e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e053      	b.n	8005306 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005262:	b29b      	uxth	r3, r3
 8005264:	2bff      	cmp	r3, #255	@ 0xff
 8005266:	d911      	bls.n	800528c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	22ff      	movs	r2, #255	@ 0xff
 800526c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005272:	b2da      	uxtb	r2, r3
 8005274:	2380      	movs	r3, #128	@ 0x80
 8005276:	045c      	lsls	r4, r3, #17
 8005278:	230a      	movs	r3, #10
 800527a:	18fb      	adds	r3, r7, r3
 800527c:	8819      	ldrh	r1, [r3, #0]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	2300      	movs	r3, #0
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	0023      	movs	r3, r4
 8005286:	f000 fb09 	bl	800589c <I2C_TransferConfig>
 800528a:	e012      	b.n	80052b2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529a:	b2da      	uxtb	r2, r3
 800529c:	2380      	movs	r3, #128	@ 0x80
 800529e:	049c      	lsls	r4, r3, #18
 80052a0:	230a      	movs	r3, #10
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	8819      	ldrh	r1, [r3, #0]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	2300      	movs	r3, #0
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	0023      	movs	r3, r4
 80052ae:	f000 faf5 	bl	800589c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d194      	bne.n	80051e6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	0018      	movs	r0, r3
 80052c4:	f000 f9ae 	bl	8005624 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052c8:	1e03      	subs	r3, r0, #0
 80052ca:	d001      	beq.n	80052d0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e01a      	b.n	8005306 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2220      	movs	r2, #32
 80052d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	490c      	ldr	r1, [pc, #48]	@ (8005314 <HAL_I2C_Mem_Read+0x264>)
 80052e4:	400a      	ands	r2, r1
 80052e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2241      	movs	r2, #65	@ 0x41
 80052ec:	2120      	movs	r1, #32
 80052ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2242      	movs	r2, #66	@ 0x42
 80052f4:	2100      	movs	r1, #0
 80052f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2240      	movs	r2, #64	@ 0x40
 80052fc:	2100      	movs	r1, #0
 80052fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e000      	b.n	8005306 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005304:	2302      	movs	r3, #2
  }
}
 8005306:	0018      	movs	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	b007      	add	sp, #28
 800530c:	bd90      	pop	{r4, r7, pc}
 800530e:	46c0      	nop			@ (mov r8, r8)
 8005310:	80002400 	.word	0x80002400
 8005314:	fe00e800 	.word	0xfe00e800

08005318 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005318:	b5b0      	push	{r4, r5, r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	000c      	movs	r4, r1
 8005322:	0010      	movs	r0, r2
 8005324:	0019      	movs	r1, r3
 8005326:	250a      	movs	r5, #10
 8005328:	197b      	adds	r3, r7, r5
 800532a:	1c22      	adds	r2, r4, #0
 800532c:	801a      	strh	r2, [r3, #0]
 800532e:	2308      	movs	r3, #8
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	1c02      	adds	r2, r0, #0
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	1dbb      	adds	r3, r7, #6
 8005338:	1c0a      	adds	r2, r1, #0
 800533a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800533c:	1dbb      	adds	r3, r7, #6
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	2380      	movs	r3, #128	@ 0x80
 8005344:	045c      	lsls	r4, r3, #17
 8005346:	197b      	adds	r3, r7, r5
 8005348:	8819      	ldrh	r1, [r3, #0]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	4b23      	ldr	r3, [pc, #140]	@ (80053dc <I2C_RequestMemoryWrite+0xc4>)
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	0023      	movs	r3, r4
 8005352:	f000 faa3 	bl	800589c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005358:	6a39      	ldr	r1, [r7, #32]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	0018      	movs	r0, r3
 800535e:	f000 f91b 	bl	8005598 <I2C_WaitOnTXISFlagUntilTimeout>
 8005362:	1e03      	subs	r3, r0, #0
 8005364:	d001      	beq.n	800536a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e033      	b.n	80053d2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800536a:	1dbb      	adds	r3, r7, #6
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d107      	bne.n	8005382 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005372:	2308      	movs	r3, #8
 8005374:	18fb      	adds	r3, r7, r3
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b2da      	uxtb	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005380:	e019      	b.n	80053b6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005382:	2308      	movs	r3, #8
 8005384:	18fb      	adds	r3, r7, r3
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	0a1b      	lsrs	r3, r3, #8
 800538a:	b29b      	uxth	r3, r3
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005396:	6a39      	ldr	r1, [r7, #32]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	0018      	movs	r0, r3
 800539c:	f000 f8fc 	bl	8005598 <I2C_WaitOnTXISFlagUntilTimeout>
 80053a0:	1e03      	subs	r3, r0, #0
 80053a2:	d001      	beq.n	80053a8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e014      	b.n	80053d2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053a8:	2308      	movs	r3, #8
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80053b6:	6a3a      	ldr	r2, [r7, #32]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	0013      	movs	r3, r2
 80053c0:	2200      	movs	r2, #0
 80053c2:	2180      	movs	r1, #128	@ 0x80
 80053c4:	f000 f890 	bl	80054e8 <I2C_WaitOnFlagUntilTimeout>
 80053c8:	1e03      	subs	r3, r0, #0
 80053ca:	d001      	beq.n	80053d0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	0018      	movs	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b004      	add	sp, #16
 80053d8:	bdb0      	pop	{r4, r5, r7, pc}
 80053da:	46c0      	nop			@ (mov r8, r8)
 80053dc:	80002000 	.word	0x80002000

080053e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80053e0:	b5b0      	push	{r4, r5, r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	000c      	movs	r4, r1
 80053ea:	0010      	movs	r0, r2
 80053ec:	0019      	movs	r1, r3
 80053ee:	250a      	movs	r5, #10
 80053f0:	197b      	adds	r3, r7, r5
 80053f2:	1c22      	adds	r2, r4, #0
 80053f4:	801a      	strh	r2, [r3, #0]
 80053f6:	2308      	movs	r3, #8
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	1c02      	adds	r2, r0, #0
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	1dbb      	adds	r3, r7, #6
 8005400:	1c0a      	adds	r2, r1, #0
 8005402:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005404:	1dbb      	adds	r3, r7, #6
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b2da      	uxtb	r2, r3
 800540a:	197b      	adds	r3, r7, r5
 800540c:	8819      	ldrh	r1, [r3, #0]
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	4b23      	ldr	r3, [pc, #140]	@ (80054a0 <I2C_RequestMemoryRead+0xc0>)
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	2300      	movs	r3, #0
 8005416:	f000 fa41 	bl	800589c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800541a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800541c:	6a39      	ldr	r1, [r7, #32]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	0018      	movs	r0, r3
 8005422:	f000 f8b9 	bl	8005598 <I2C_WaitOnTXISFlagUntilTimeout>
 8005426:	1e03      	subs	r3, r0, #0
 8005428:	d001      	beq.n	800542e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e033      	b.n	8005496 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800542e:	1dbb      	adds	r3, r7, #6
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d107      	bne.n	8005446 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005436:	2308      	movs	r3, #8
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	629a      	str	r2, [r3, #40]	@ 0x28
 8005444:	e019      	b.n	800547a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005446:	2308      	movs	r3, #8
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	0a1b      	lsrs	r3, r3, #8
 800544e:	b29b      	uxth	r3, r3
 8005450:	b2da      	uxtb	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800545a:	6a39      	ldr	r1, [r7, #32]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	0018      	movs	r0, r3
 8005460:	f000 f89a 	bl	8005598 <I2C_WaitOnTXISFlagUntilTimeout>
 8005464:	1e03      	subs	r3, r0, #0
 8005466:	d001      	beq.n	800546c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e014      	b.n	8005496 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800546c:	2308      	movs	r3, #8
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b2da      	uxtb	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800547a:	6a3a      	ldr	r2, [r7, #32]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	0013      	movs	r3, r2
 8005484:	2200      	movs	r2, #0
 8005486:	2140      	movs	r1, #64	@ 0x40
 8005488:	f000 f82e 	bl	80054e8 <I2C_WaitOnFlagUntilTimeout>
 800548c:	1e03      	subs	r3, r0, #0
 800548e:	d001      	beq.n	8005494 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	0018      	movs	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	b004      	add	sp, #16
 800549c:	bdb0      	pop	{r4, r5, r7, pc}
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	80002000 	.word	0x80002000

080054a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2202      	movs	r2, #2
 80054b4:	4013      	ands	r3, r2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d103      	bne.n	80054c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2200      	movs	r2, #0
 80054c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	2201      	movs	r2, #1
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d007      	beq.n	80054e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2101      	movs	r1, #1
 80054dc:	430a      	orrs	r2, r1
 80054de:	619a      	str	r2, [r3, #24]
  }
}
 80054e0:	46c0      	nop			@ (mov r8, r8)
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b002      	add	sp, #8
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	1dfb      	adds	r3, r7, #7
 80054f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054f8:	e03a      	b.n	8005570 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	0018      	movs	r0, r3
 8005502:	f000 f8d3 	bl	80056ac <I2C_IsErrorOccurred>
 8005506:	1e03      	subs	r3, r0, #0
 8005508:	d001      	beq.n	800550e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e040      	b.n	8005590 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	3301      	adds	r3, #1
 8005512:	d02d      	beq.n	8005570 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005514:	f7ff f97e 	bl	8004814 <HAL_GetTick>
 8005518:	0002      	movs	r2, r0
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <I2C_WaitOnFlagUntilTimeout+0x42>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d122      	bne.n	8005570 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	4013      	ands	r3, r2
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	425a      	negs	r2, r3
 800553a:	4153      	adcs	r3, r2
 800553c:	b2db      	uxtb	r3, r3
 800553e:	001a      	movs	r2, r3
 8005540:	1dfb      	adds	r3, r7, #7
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d113      	bne.n	8005570 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554c:	2220      	movs	r2, #32
 800554e:	431a      	orrs	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2241      	movs	r2, #65	@ 0x41
 8005558:	2120      	movs	r1, #32
 800555a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2242      	movs	r2, #66	@ 0x42
 8005560:	2100      	movs	r1, #0
 8005562:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2240      	movs	r2, #64	@ 0x40
 8005568:	2100      	movs	r1, #0
 800556a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e00f      	b.n	8005590 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	4013      	ands	r3, r2
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	425a      	negs	r2, r3
 8005580:	4153      	adcs	r3, r2
 8005582:	b2db      	uxtb	r3, r3
 8005584:	001a      	movs	r2, r3
 8005586:	1dfb      	adds	r3, r7, #7
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d0b5      	beq.n	80054fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	0018      	movs	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	b004      	add	sp, #16
 8005596:	bd80      	pop	{r7, pc}

08005598 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055a4:	e032      	b.n	800560c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	0018      	movs	r0, r3
 80055ae:	f000 f87d 	bl	80056ac <I2C_IsErrorOccurred>
 80055b2:	1e03      	subs	r3, r0, #0
 80055b4:	d001      	beq.n	80055ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e030      	b.n	800561c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	3301      	adds	r3, #1
 80055be:	d025      	beq.n	800560c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c0:	f7ff f928 	bl	8004814 <HAL_GetTick>
 80055c4:	0002      	movs	r2, r0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d302      	bcc.n	80055d6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d11a      	bne.n	800560c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	2202      	movs	r2, #2
 80055de:	4013      	ands	r3, r2
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d013      	beq.n	800560c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e8:	2220      	movs	r2, #32
 80055ea:	431a      	orrs	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2241      	movs	r2, #65	@ 0x41
 80055f4:	2120      	movs	r1, #32
 80055f6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2242      	movs	r2, #66	@ 0x42
 80055fc:	2100      	movs	r1, #0
 80055fe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2240      	movs	r2, #64	@ 0x40
 8005604:	2100      	movs	r1, #0
 8005606:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e007      	b.n	800561c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2202      	movs	r2, #2
 8005614:	4013      	ands	r3, r2
 8005616:	2b02      	cmp	r3, #2
 8005618:	d1c5      	bne.n	80055a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	0018      	movs	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	b004      	add	sp, #16
 8005622:	bd80      	pop	{r7, pc}

08005624 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005630:	e02f      	b.n	8005692 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	0018      	movs	r0, r3
 800563a:	f000 f837 	bl	80056ac <I2C_IsErrorOccurred>
 800563e:	1e03      	subs	r3, r0, #0
 8005640:	d001      	beq.n	8005646 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e02d      	b.n	80056a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005646:	f7ff f8e5 	bl	8004814 <HAL_GetTick>
 800564a:	0002      	movs	r2, r0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	429a      	cmp	r2, r3
 8005654:	d302      	bcc.n	800565c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11a      	bne.n	8005692 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2220      	movs	r2, #32
 8005664:	4013      	ands	r3, r2
 8005666:	2b20      	cmp	r3, #32
 8005668:	d013      	beq.n	8005692 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566e:	2220      	movs	r2, #32
 8005670:	431a      	orrs	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2241      	movs	r2, #65	@ 0x41
 800567a:	2120      	movs	r1, #32
 800567c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2242      	movs	r2, #66	@ 0x42
 8005682:	2100      	movs	r1, #0
 8005684:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2240      	movs	r2, #64	@ 0x40
 800568a:	2100      	movs	r1, #0
 800568c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e007      	b.n	80056a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2220      	movs	r2, #32
 800569a:	4013      	ands	r3, r2
 800569c:	2b20      	cmp	r3, #32
 800569e:	d1c8      	bne.n	8005632 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	0018      	movs	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b004      	add	sp, #16
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	@ 0x28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b8:	2327      	movs	r3, #39	@ 0x27
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2210      	movs	r2, #16
 80056d4:	4013      	ands	r3, r2
 80056d6:	d100      	bne.n	80056da <I2C_IsErrorOccurred+0x2e>
 80056d8:	e079      	b.n	80057ce <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2210      	movs	r2, #16
 80056e0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056e2:	e057      	b.n	8005794 <I2C_IsErrorOccurred+0xe8>
 80056e4:	2227      	movs	r2, #39	@ 0x27
 80056e6:	18bb      	adds	r3, r7, r2
 80056e8:	18ba      	adds	r2, r7, r2
 80056ea:	7812      	ldrb	r2, [r2, #0]
 80056ec:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	3301      	adds	r3, #1
 80056f2:	d04f      	beq.n	8005794 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056f4:	f7ff f88e 	bl	8004814 <HAL_GetTick>
 80056f8:	0002      	movs	r2, r0
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	429a      	cmp	r2, r3
 8005702:	d302      	bcc.n	800570a <I2C_IsErrorOccurred+0x5e>
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d144      	bne.n	8005794 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	2380      	movs	r3, #128	@ 0x80
 8005712:	01db      	lsls	r3, r3, #7
 8005714:	4013      	ands	r3, r2
 8005716:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005718:	2013      	movs	r0, #19
 800571a:	183b      	adds	r3, r7, r0
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	2142      	movs	r1, #66	@ 0x42
 8005720:	5c52      	ldrb	r2, [r2, r1]
 8005722:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	2380      	movs	r3, #128	@ 0x80
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	401a      	ands	r2, r3
 8005730:	2380      	movs	r3, #128	@ 0x80
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	429a      	cmp	r2, r3
 8005736:	d126      	bne.n	8005786 <I2C_IsErrorOccurred+0xda>
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	2380      	movs	r3, #128	@ 0x80
 800573c:	01db      	lsls	r3, r3, #7
 800573e:	429a      	cmp	r2, r3
 8005740:	d021      	beq.n	8005786 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005742:	183b      	adds	r3, r7, r0
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b20      	cmp	r3, #32
 8005748:	d01d      	beq.n	8005786 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2180      	movs	r1, #128	@ 0x80
 8005756:	01c9      	lsls	r1, r1, #7
 8005758:	430a      	orrs	r2, r1
 800575a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800575c:	f7ff f85a 	bl	8004814 <HAL_GetTick>
 8005760:	0003      	movs	r3, r0
 8005762:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005764:	e00f      	b.n	8005786 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005766:	f7ff f855 	bl	8004814 <HAL_GetTick>
 800576a:	0002      	movs	r2, r0
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b19      	cmp	r3, #25
 8005772:	d908      	bls.n	8005786 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	2220      	movs	r2, #32
 8005778:	4313      	orrs	r3, r2
 800577a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800577c:	2327      	movs	r3, #39	@ 0x27
 800577e:	18fb      	adds	r3, r7, r3
 8005780:	2201      	movs	r2, #1
 8005782:	701a      	strb	r2, [r3, #0]

              break;
 8005784:	e006      	b.n	8005794 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	2220      	movs	r2, #32
 800578e:	4013      	ands	r3, r2
 8005790:	2b20      	cmp	r3, #32
 8005792:	d1e8      	bne.n	8005766 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	2220      	movs	r2, #32
 800579c:	4013      	ands	r3, r2
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d004      	beq.n	80057ac <I2C_IsErrorOccurred+0x100>
 80057a2:	2327      	movs	r3, #39	@ 0x27
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d09b      	beq.n	80056e4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80057ac:	2327      	movs	r3, #39	@ 0x27
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2220      	movs	r2, #32
 80057bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	2204      	movs	r2, #4
 80057c2:	4313      	orrs	r3, r2
 80057c4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80057c6:	2327      	movs	r3, #39	@ 0x27
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	2380      	movs	r3, #128	@ 0x80
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	4013      	ands	r3, r2
 80057de:	d00c      	beq.n	80057fa <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	2201      	movs	r2, #1
 80057e4:	4313      	orrs	r3, r2
 80057e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2280      	movs	r2, #128	@ 0x80
 80057ee:	0052      	lsls	r2, r2, #1
 80057f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057f2:	2327      	movs	r3, #39	@ 0x27
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	2201      	movs	r2, #1
 80057f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	2380      	movs	r3, #128	@ 0x80
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4013      	ands	r3, r2
 8005802:	d00c      	beq.n	800581e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	2208      	movs	r2, #8
 8005808:	4313      	orrs	r3, r2
 800580a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2280      	movs	r2, #128	@ 0x80
 8005812:	00d2      	lsls	r2, r2, #3
 8005814:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005816:	2327      	movs	r3, #39	@ 0x27
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	2380      	movs	r3, #128	@ 0x80
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4013      	ands	r3, r2
 8005826:	d00c      	beq.n	8005842 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	2202      	movs	r2, #2
 800582c:	4313      	orrs	r3, r2
 800582e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2280      	movs	r2, #128	@ 0x80
 8005836:	0092      	lsls	r2, r2, #2
 8005838:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800583a:	2327      	movs	r3, #39	@ 0x27
 800583c:	18fb      	adds	r3, r7, r3
 800583e:	2201      	movs	r2, #1
 8005840:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005842:	2327      	movs	r3, #39	@ 0x27
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01d      	beq.n	8005888 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	0018      	movs	r0, r3
 8005850:	f7ff fe28 	bl	80054a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	490e      	ldr	r1, [pc, #56]	@ (8005898 <I2C_IsErrorOccurred+0x1ec>)
 8005860:	400a      	ands	r2, r1
 8005862:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	431a      	orrs	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2241      	movs	r2, #65	@ 0x41
 8005874:	2120      	movs	r1, #32
 8005876:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2242      	movs	r2, #66	@ 0x42
 800587c:	2100      	movs	r1, #0
 800587e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2240      	movs	r2, #64	@ 0x40
 8005884:	2100      	movs	r1, #0
 8005886:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005888:	2327      	movs	r3, #39	@ 0x27
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	781b      	ldrb	r3, [r3, #0]
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	b00a      	add	sp, #40	@ 0x28
 8005894:	bd80      	pop	{r7, pc}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	fe00e800 	.word	0xfe00e800

0800589c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800589c:	b590      	push	{r4, r7, lr}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	0008      	movs	r0, r1
 80058a6:	0011      	movs	r1, r2
 80058a8:	607b      	str	r3, [r7, #4]
 80058aa:	240a      	movs	r4, #10
 80058ac:	193b      	adds	r3, r7, r4
 80058ae:	1c02      	adds	r2, r0, #0
 80058b0:	801a      	strh	r2, [r3, #0]
 80058b2:	2009      	movs	r0, #9
 80058b4:	183b      	adds	r3, r7, r0
 80058b6:	1c0a      	adds	r2, r1, #0
 80058b8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058ba:	193b      	adds	r3, r7, r4
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	059b      	lsls	r3, r3, #22
 80058c0:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058c2:	183b      	adds	r3, r7, r0
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	0419      	lsls	r1, r3, #16
 80058c8:	23ff      	movs	r3, #255	@ 0xff
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058ce:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d6:	4313      	orrs	r3, r2
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058e6:	0d51      	lsrs	r1, r2, #21
 80058e8:	2280      	movs	r2, #128	@ 0x80
 80058ea:	00d2      	lsls	r2, r2, #3
 80058ec:	400a      	ands	r2, r1
 80058ee:	4907      	ldr	r1, [pc, #28]	@ (800590c <I2C_TransferConfig+0x70>)
 80058f0:	430a      	orrs	r2, r1
 80058f2:	43d2      	mvns	r2, r2
 80058f4:	401a      	ands	r2, r3
 80058f6:	0011      	movs	r1, r2
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005902:	46c0      	nop			@ (mov r8, r8)
 8005904:	46bd      	mov	sp, r7
 8005906:	b007      	add	sp, #28
 8005908:	bd90      	pop	{r4, r7, pc}
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	03ff63ff 	.word	0x03ff63ff

08005910 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2241      	movs	r2, #65	@ 0x41
 800591e:	5c9b      	ldrb	r3, [r3, r2]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b20      	cmp	r3, #32
 8005924:	d138      	bne.n	8005998 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2240      	movs	r2, #64	@ 0x40
 800592a:	5c9b      	ldrb	r3, [r3, r2]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005930:	2302      	movs	r3, #2
 8005932:	e032      	b.n	800599a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2240      	movs	r2, #64	@ 0x40
 8005938:	2101      	movs	r1, #1
 800593a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2241      	movs	r2, #65	@ 0x41
 8005940:	2124      	movs	r1, #36	@ 0x24
 8005942:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2101      	movs	r1, #1
 8005950:	438a      	bics	r2, r1
 8005952:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4911      	ldr	r1, [pc, #68]	@ (80059a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005960:	400a      	ands	r2, r1
 8005962:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2101      	movs	r1, #1
 8005980:	430a      	orrs	r2, r1
 8005982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2241      	movs	r2, #65	@ 0x41
 8005988:	2120      	movs	r1, #32
 800598a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2240      	movs	r2, #64	@ 0x40
 8005990:	2100      	movs	r1, #0
 8005992:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	e000      	b.n	800599a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005998:	2302      	movs	r3, #2
  }
}
 800599a:	0018      	movs	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	b002      	add	sp, #8
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	46c0      	nop			@ (mov r8, r8)
 80059a4:	ffffefff 	.word	0xffffefff

080059a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2241      	movs	r2, #65	@ 0x41
 80059b6:	5c9b      	ldrb	r3, [r3, r2]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d139      	bne.n	8005a32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2240      	movs	r2, #64	@ 0x40
 80059c2:	5c9b      	ldrb	r3, [r3, r2]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e033      	b.n	8005a34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2240      	movs	r2, #64	@ 0x40
 80059d0:	2101      	movs	r1, #1
 80059d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2241      	movs	r2, #65	@ 0x41
 80059d8:	2124      	movs	r1, #36	@ 0x24
 80059da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2101      	movs	r1, #1
 80059e8:	438a      	bics	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4a11      	ldr	r2, [pc, #68]	@ (8005a3c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	021b      	lsls	r3, r3, #8
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2101      	movs	r1, #1
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2241      	movs	r2, #65	@ 0x41
 8005a22:	2120      	movs	r1, #32
 8005a24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2240      	movs	r2, #64	@ 0x40
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e000      	b.n	8005a34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a32:	2302      	movs	r3, #2
  }
}
 8005a34:	0018      	movs	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b004      	add	sp, #16
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	fffff0ff 	.word	0xfffff0ff

08005a40 <HAL_PWR_EnableWakeUpPin>:
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @note  (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR4_WP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8005a48:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	212f      	movs	r1, #47	@ 0x2f
 8005a50:	400a      	ands	r2, r1
 8005a52:	43d2      	mvns	r2, r2
 8005a54:	401a      	ands	r2, r3
 8005a56:	0011      	movs	r1, r2
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0a1a      	lsrs	r2, r3, #8
 8005a5c:	4b07      	ldr	r3, [pc, #28]	@ (8005a7c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	60da      	str	r2, [r3, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8005a62:	4b06      	ldr	r3, [pc, #24]	@ (8005a7c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8005a64:	6899      	ldr	r1, [r3, #8]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	222f      	movs	r2, #47	@ 0x2f
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	4b03      	ldr	r3, [pc, #12]	@ (8005a7c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	609a      	str	r2, [r3, #8]
}
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	46bd      	mov	sp, r7
 8005a76:	b002      	add	sp, #8
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	46c0      	nop			@ (mov r8, r8)
 8005a7c:	40007000 	.word	0x40007000

08005a80 <HAL_PWR_EnterSTANDBYMode>:
  *         disable the same. These states are effective in Standby mode only if
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8005a84:	4b09      	ldr	r3, [pc, #36]	@ (8005aac <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2207      	movs	r2, #7
 8005a8a:	4393      	bics	r3, r2
 8005a8c:	001a      	movs	r2, r3
 8005a8e:	4b07      	ldr	r3, [pc, #28]	@ (8005aac <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005a90:	2103      	movs	r1, #3
 8005a92:	430a      	orrs	r2, r1
 8005a94:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a96:	4b06      	ldr	r3, [pc, #24]	@ (8005ab0 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	4b05      	ldr	r3, [pc, #20]	@ (8005ab0 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8005a9c:	2104      	movs	r1, #4
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	611a      	str	r2, [r3, #16]

  /* Request Wait For Interrupt */
  __WFI();
 8005aa2:	bf30      	wfi
}
 8005aa4:	46c0      	nop			@ (mov r8, r8)
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	40007000 	.word	0x40007000
 8005ab0:	e000ed00 	.word	0xe000ed00

08005ab4 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e1d0      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2201      	movs	r2, #1
 8005acc:	4013      	ands	r3, r2
 8005ace:	d100      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x1e>
 8005ad0:	e069      	b.n	8005ba6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad2:	4bc8      	ldr	r3, [pc, #800]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2238      	movs	r2, #56	@ 0x38
 8005ad8:	4013      	ands	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d105      	bne.n	8005aee <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d15d      	bne.n	8005ba6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e1bc      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	2380      	movs	r3, #128	@ 0x80
 8005af4:	025b      	lsls	r3, r3, #9
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d107      	bne.n	8005b0a <HAL_RCC_OscConfig+0x56>
 8005afa:	4bbe      	ldr	r3, [pc, #760]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4bbd      	ldr	r3, [pc, #756]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005b00:	2180      	movs	r1, #128	@ 0x80
 8005b02:	0249      	lsls	r1, r1, #9
 8005b04:	430a      	orrs	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	e020      	b.n	8005b4c <HAL_RCC_OscConfig+0x98>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	23a0      	movs	r3, #160	@ 0xa0
 8005b10:	02db      	lsls	r3, r3, #11
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d10e      	bne.n	8005b34 <HAL_RCC_OscConfig+0x80>
 8005b16:	4bb7      	ldr	r3, [pc, #732]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4bb6      	ldr	r3, [pc, #728]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005b1c:	2180      	movs	r1, #128	@ 0x80
 8005b1e:	02c9      	lsls	r1, r1, #11
 8005b20:	430a      	orrs	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	4bb3      	ldr	r3, [pc, #716]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	4bb2      	ldr	r3, [pc, #712]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005b2a:	2180      	movs	r1, #128	@ 0x80
 8005b2c:	0249      	lsls	r1, r1, #9
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	e00b      	b.n	8005b4c <HAL_RCC_OscConfig+0x98>
 8005b34:	4baf      	ldr	r3, [pc, #700]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	4bae      	ldr	r3, [pc, #696]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005b3a:	49af      	ldr	r1, [pc, #700]	@ (8005df8 <HAL_RCC_OscConfig+0x344>)
 8005b3c:	400a      	ands	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	4bac      	ldr	r3, [pc, #688]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4bab      	ldr	r3, [pc, #684]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005b46:	49ad      	ldr	r1, [pc, #692]	@ (8005dfc <HAL_RCC_OscConfig+0x348>)
 8005b48:	400a      	ands	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d014      	beq.n	8005b7e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b54:	f7fe fe5e 	bl	8004814 <HAL_GetTick>
 8005b58:	0003      	movs	r3, r0
 8005b5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005b5e:	f7fe fe59 	bl	8004814 <HAL_GetTick>
 8005b62:	0002      	movs	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b64      	cmp	r3, #100	@ 0x64
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e17b      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b70:	4ba0      	ldr	r3, [pc, #640]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	2380      	movs	r3, #128	@ 0x80
 8005b76:	029b      	lsls	r3, r3, #10
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d0f0      	beq.n	8005b5e <HAL_RCC_OscConfig+0xaa>
 8005b7c:	e013      	b.n	8005ba6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7e:	f7fe fe49 	bl	8004814 <HAL_GetTick>
 8005b82:	0003      	movs	r3, r0
 8005b84:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005b88:	f7fe fe44 	bl	8004814 <HAL_GetTick>
 8005b8c:	0002      	movs	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b64      	cmp	r3, #100	@ 0x64
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e166      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b9a:	4b96      	ldr	r3, [pc, #600]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	2380      	movs	r3, #128	@ 0x80
 8005ba0:	029b      	lsls	r3, r3, #10
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2202      	movs	r2, #2
 8005bac:	4013      	ands	r3, r2
 8005bae:	d100      	bne.n	8005bb2 <HAL_RCC_OscConfig+0xfe>
 8005bb0:	e086      	b.n	8005cc0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bb2:	4b90      	ldr	r3, [pc, #576]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2238      	movs	r2, #56	@ 0x38
 8005bb8:	4013      	ands	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d12f      	bne.n	8005c22 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e14c      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bce:	4b89      	ldr	r3, [pc, #548]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	4a8b      	ldr	r2, [pc, #556]	@ (8005e00 <HAL_RCC_OscConfig+0x34c>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	021a      	lsls	r2, r3, #8
 8005bde:	4b85      	ldr	r3, [pc, #532]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005be0:	430a      	orrs	r2, r1
 8005be2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d112      	bne.n	8005c10 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005bea:	4b82      	ldr	r3, [pc, #520]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a85      	ldr	r2, [pc, #532]	@ (8005e04 <HAL_RCC_OscConfig+0x350>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	0019      	movs	r1, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005bfe:	4b7d      	ldr	r3, [pc, #500]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	0adb      	lsrs	r3, r3, #11
 8005c04:	2207      	movs	r2, #7
 8005c06:	4013      	ands	r3, r2
 8005c08:	4a7f      	ldr	r2, [pc, #508]	@ (8005e08 <HAL_RCC_OscConfig+0x354>)
 8005c0a:	40da      	lsrs	r2, r3
 8005c0c:	4b7f      	ldr	r3, [pc, #508]	@ (8005e0c <HAL_RCC_OscConfig+0x358>)
 8005c0e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005c10:	4b7f      	ldr	r3, [pc, #508]	@ (8005e10 <HAL_RCC_OscConfig+0x35c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f7fe fda1 	bl	800475c <HAL_InitTick>
 8005c1a:	1e03      	subs	r3, r0, #0
 8005c1c:	d050      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e122      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d030      	beq.n	8005c8c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005c2a:	4b72      	ldr	r3, [pc, #456]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a75      	ldr	r2, [pc, #468]	@ (8005e04 <HAL_RCC_OscConfig+0x350>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	0019      	movs	r1, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	4b6e      	ldr	r3, [pc, #440]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8005c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b6c      	ldr	r3, [pc, #432]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005c44:	2180      	movs	r1, #128	@ 0x80
 8005c46:	0049      	lsls	r1, r1, #1
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4c:	f7fe fde2 	bl	8004814 <HAL_GetTick>
 8005c50:	0003      	movs	r3, r0
 8005c52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c54:	e008      	b.n	8005c68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005c56:	f7fe fddd 	bl	8004814 <HAL_GetTick>
 8005c5a:	0002      	movs	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e0ff      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c68:	4b62      	ldr	r3, [pc, #392]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	2380      	movs	r3, #128	@ 0x80
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	4013      	ands	r3, r2
 8005c72:	d0f0      	beq.n	8005c56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c74:	4b5f      	ldr	r3, [pc, #380]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4a61      	ldr	r2, [pc, #388]	@ (8005e00 <HAL_RCC_OscConfig+0x34c>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	0019      	movs	r1, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	021a      	lsls	r2, r3, #8
 8005c84:	4b5b      	ldr	r3, [pc, #364]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
 8005c8a:	e019      	b.n	8005cc0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8005c8c:	4b59      	ldr	r3, [pc, #356]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	4b58      	ldr	r3, [pc, #352]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005c92:	4960      	ldr	r1, [pc, #384]	@ (8005e14 <HAL_RCC_OscConfig+0x360>)
 8005c94:	400a      	ands	r2, r1
 8005c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c98:	f7fe fdbc 	bl	8004814 <HAL_GetTick>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005ca2:	f7fe fdb7 	bl	8004814 <HAL_GetTick>
 8005ca6:	0002      	movs	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e0d9      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	2380      	movs	r3, #128	@ 0x80
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d1f0      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d042      	beq.n	8005d50 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005cca:	4b4a      	ldr	r3, [pc, #296]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2238      	movs	r2, #56	@ 0x38
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b18      	cmp	r3, #24
 8005cd4:	d105      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d138      	bne.n	8005d50 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e0c2      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d019      	beq.n	8005d1e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005cea:	4b42      	ldr	r3, [pc, #264]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005cec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005cee:	4b41      	ldr	r3, [pc, #260]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf6:	f7fe fd8d 	bl	8004814 <HAL_GetTick>
 8005cfa:	0003      	movs	r3, r0
 8005cfc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005d00:	f7fe fd88 	bl	8004814 <HAL_GetTick>
 8005d04:	0002      	movs	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e0aa      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005d12:	4b38      	ldr	r3, [pc, #224]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d16:	2202      	movs	r2, #2
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d0f1      	beq.n	8005d00 <HAL_RCC_OscConfig+0x24c>
 8005d1c:	e018      	b.n	8005d50 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005d1e:	4b35      	ldr	r3, [pc, #212]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005d20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005d22:	4b34      	ldr	r3, [pc, #208]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005d24:	2101      	movs	r1, #1
 8005d26:	438a      	bics	r2, r1
 8005d28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2a:	f7fe fd73 	bl	8004814 <HAL_GetTick>
 8005d2e:	0003      	movs	r3, r0
 8005d30:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005d34:	f7fe fd6e 	bl	8004814 <HAL_GetTick>
 8005d38:	0002      	movs	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e090      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005d46:	4b2b      	ldr	r3, [pc, #172]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	d1f1      	bne.n	8005d34 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2204      	movs	r2, #4
 8005d56:	4013      	ands	r3, r2
 8005d58:	d100      	bne.n	8005d5c <HAL_RCC_OscConfig+0x2a8>
 8005d5a:	e084      	b.n	8005e66 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d5c:	230f      	movs	r3, #15
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005d64:	4b23      	ldr	r3, [pc, #140]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2238      	movs	r2, #56	@ 0x38
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d106      	bne.n	8005d7e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d000      	beq.n	8005d7a <HAL_RCC_OscConfig+0x2c6>
 8005d78:	e075      	b.n	8005e66 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e074      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d106      	bne.n	8005d94 <HAL_RCC_OscConfig+0x2e0>
 8005d86:	4b1b      	ldr	r3, [pc, #108]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005d88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d92:	e01c      	b.n	8005dce <HAL_RCC_OscConfig+0x31a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b05      	cmp	r3, #5
 8005d9a:	d10c      	bne.n	8005db6 <HAL_RCC_OscConfig+0x302>
 8005d9c:	4b15      	ldr	r3, [pc, #84]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005d9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005da0:	4b14      	ldr	r3, [pc, #80]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005da2:	2104      	movs	r1, #4
 8005da4:	430a      	orrs	r2, r1
 8005da6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005da8:	4b12      	ldr	r3, [pc, #72]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005daa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dac:	4b11      	ldr	r3, [pc, #68]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005dae:	2101      	movs	r1, #1
 8005db0:	430a      	orrs	r2, r1
 8005db2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005db4:	e00b      	b.n	8005dce <HAL_RCC_OscConfig+0x31a>
 8005db6:	4b0f      	ldr	r3, [pc, #60]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005db8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dba:	4b0e      	ldr	r3, [pc, #56]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	438a      	bics	r2, r1
 8005dc0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005dc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005df4 <HAL_RCC_OscConfig+0x340>)
 8005dc8:	2104      	movs	r1, #4
 8005dca:	438a      	bics	r2, r1
 8005dcc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d028      	beq.n	8005e28 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd6:	f7fe fd1d 	bl	8004814 <HAL_GetTick>
 8005dda:	0003      	movs	r3, r0
 8005ddc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005dde:	e01d      	b.n	8005e1c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de0:	f7fe fd18 	bl	8004814 <HAL_GetTick>
 8005de4:	0002      	movs	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	4a0b      	ldr	r2, [pc, #44]	@ (8005e18 <HAL_RCC_OscConfig+0x364>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d915      	bls.n	8005e1c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e039      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
 8005df4:	40021000 	.word	0x40021000
 8005df8:	fffeffff 	.word	0xfffeffff
 8005dfc:	fffbffff 	.word	0xfffbffff
 8005e00:	ffff80ff 	.word	0xffff80ff
 8005e04:	ffffc7ff 	.word	0xffffc7ff
 8005e08:	02dc6c00 	.word	0x02dc6c00
 8005e0c:	20000000 	.word	0x20000000
 8005e10:	20000004 	.word	0x20000004
 8005e14:	fffffeff 	.word	0xfffffeff
 8005e18:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005e1c:	4b14      	ldr	r3, [pc, #80]	@ (8005e70 <HAL_RCC_OscConfig+0x3bc>)
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e20:	2202      	movs	r2, #2
 8005e22:	4013      	ands	r3, r2
 8005e24:	d0dc      	beq.n	8005de0 <HAL_RCC_OscConfig+0x32c>
 8005e26:	e013      	b.n	8005e50 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e28:	f7fe fcf4 	bl	8004814 <HAL_GetTick>
 8005e2c:	0003      	movs	r3, r0
 8005e2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005e30:	e009      	b.n	8005e46 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e32:	f7fe fcef 	bl	8004814 <HAL_GetTick>
 8005e36:	0002      	movs	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005e74 <HAL_RCC_OscConfig+0x3c0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e010      	b.n	8005e68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005e46:	4b0a      	ldr	r3, [pc, #40]	@ (8005e70 <HAL_RCC_OscConfig+0x3bc>)
 8005e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d1f0      	bne.n	8005e32 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005e50:	230f      	movs	r3, #15
 8005e52:	18fb      	adds	r3, r7, r3
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d105      	bne.n	8005e66 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005e5a:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <HAL_RCC_OscConfig+0x3bc>)
 8005e5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e5e:	4b04      	ldr	r3, [pc, #16]	@ (8005e70 <HAL_RCC_OscConfig+0x3bc>)
 8005e60:	4905      	ldr	r1, [pc, #20]	@ (8005e78 <HAL_RCC_OscConfig+0x3c4>)
 8005e62:	400a      	ands	r2, r1
 8005e64:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	0018      	movs	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b006      	add	sp, #24
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40021000 	.word	0x40021000
 8005e74:	00001388 	.word	0x00001388
 8005e78:	efffffff 	.word	0xefffffff

08005e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e0df      	b.n	8006050 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e90:	4b71      	ldr	r3, [pc, #452]	@ (8006058 <HAL_RCC_ClockConfig+0x1dc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2207      	movs	r2, #7
 8005e96:	4013      	ands	r3, r2
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d91e      	bls.n	8005edc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9e:	4b6e      	ldr	r3, [pc, #440]	@ (8006058 <HAL_RCC_ClockConfig+0x1dc>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2207      	movs	r2, #7
 8005ea4:	4393      	bics	r3, r2
 8005ea6:	0019      	movs	r1, r3
 8005ea8:	4b6b      	ldr	r3, [pc, #428]	@ (8006058 <HAL_RCC_ClockConfig+0x1dc>)
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005eb0:	f7fe fcb0 	bl	8004814 <HAL_GetTick>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005eb8:	e009      	b.n	8005ece <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005eba:	f7fe fcab 	bl	8004814 <HAL_GetTick>
 8005ebe:	0002      	movs	r2, r0
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	4a65      	ldr	r2, [pc, #404]	@ (800605c <HAL_RCC_ClockConfig+0x1e0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e0c0      	b.n	8006050 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ece:	4b62      	ldr	r3, [pc, #392]	@ (8006058 <HAL_RCC_ClockConfig+0x1dc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2207      	movs	r2, #7
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d1ee      	bne.n	8005eba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d017      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2204      	movs	r2, #4
 8005eec:	4013      	ands	r3, r2
 8005eee:	d008      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005ef0:	4b5b      	ldr	r3, [pc, #364]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	4a5b      	ldr	r2, [pc, #364]	@ (8006064 <HAL_RCC_ClockConfig+0x1e8>)
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	4b59      	ldr	r3, [pc, #356]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 8005efa:	21b0      	movs	r1, #176	@ 0xb0
 8005efc:	0109      	lsls	r1, r1, #4
 8005efe:	430a      	orrs	r2, r1
 8005f00:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f02:	4b57      	ldr	r3, [pc, #348]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	4a58      	ldr	r2, [pc, #352]	@ (8006068 <HAL_RCC_ClockConfig+0x1ec>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	0019      	movs	r1, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	4b53      	ldr	r3, [pc, #332]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 8005f12:	430a      	orrs	r2, r1
 8005f14:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d04b      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d107      	bne.n	8005f38 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f28:	4b4d      	ldr	r3, [pc, #308]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	2380      	movs	r3, #128	@ 0x80
 8005f2e:	029b      	lsls	r3, r3, #10
 8005f30:	4013      	ands	r3, r2
 8005f32:	d11f      	bne.n	8005f74 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e08b      	b.n	8006050 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d107      	bne.n	8005f50 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f40:	4b47      	ldr	r3, [pc, #284]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	2380      	movs	r3, #128	@ 0x80
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d113      	bne.n	8005f74 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e07f      	b.n	8006050 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d106      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005f58:	4b41      	ldr	r3, [pc, #260]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 8005f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	4013      	ands	r3, r2
 8005f60:	d108      	bne.n	8005f74 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e074      	b.n	8006050 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005f66:	4b3e      	ldr	r3, [pc, #248]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 8005f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	d101      	bne.n	8005f74 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e06d      	b.n	8006050 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f74:	4b3a      	ldr	r3, [pc, #232]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2207      	movs	r2, #7
 8005f7a:	4393      	bics	r3, r2
 8005f7c:	0019      	movs	r1, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	4b37      	ldr	r3, [pc, #220]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 8005f84:	430a      	orrs	r2, r1
 8005f86:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f88:	f7fe fc44 	bl	8004814 <HAL_GetTick>
 8005f8c:	0003      	movs	r3, r0
 8005f8e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f90:	e009      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005f92:	f7fe fc3f 	bl	8004814 <HAL_GetTick>
 8005f96:	0002      	movs	r2, r0
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800605c <HAL_RCC_ClockConfig+0x1e0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e054      	b.n	8006050 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2238      	movs	r2, #56	@ 0x38
 8005fac:	401a      	ands	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d1ec      	bne.n	8005f92 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fb8:	4b27      	ldr	r3, [pc, #156]	@ (8006058 <HAL_RCC_ClockConfig+0x1dc>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2207      	movs	r2, #7
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d21e      	bcs.n	8006004 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc6:	4b24      	ldr	r3, [pc, #144]	@ (8006058 <HAL_RCC_ClockConfig+0x1dc>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2207      	movs	r2, #7
 8005fcc:	4393      	bics	r3, r2
 8005fce:	0019      	movs	r1, r3
 8005fd0:	4b21      	ldr	r3, [pc, #132]	@ (8006058 <HAL_RCC_ClockConfig+0x1dc>)
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fd8:	f7fe fc1c 	bl	8004814 <HAL_GetTick>
 8005fdc:	0003      	movs	r3, r0
 8005fde:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005fe0:	e009      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe2:	f7fe fc17 	bl	8004814 <HAL_GetTick>
 8005fe6:	0002      	movs	r2, r0
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	4a1b      	ldr	r2, [pc, #108]	@ (800605c <HAL_RCC_ClockConfig+0x1e0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e02c      	b.n	8006050 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ff6:	4b18      	ldr	r3, [pc, #96]	@ (8006058 <HAL_RCC_ClockConfig+0x1dc>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2207      	movs	r2, #7
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d1ee      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2204      	movs	r2, #4
 800600a:	4013      	ands	r3, r2
 800600c:	d009      	beq.n	8006022 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800600e:	4b14      	ldr	r3, [pc, #80]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	4a16      	ldr	r2, [pc, #88]	@ (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8006014:	4013      	ands	r3, r2
 8006016:	0019      	movs	r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	4b10      	ldr	r3, [pc, #64]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 800601e:	430a      	orrs	r2, r1
 8006020:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8006022:	f000 f82b 	bl	800607c <HAL_RCC_GetSysClockFreq>
 8006026:	0001      	movs	r1, r0
 8006028:	4b0d      	ldr	r3, [pc, #52]	@ (8006060 <HAL_RCC_ClockConfig+0x1e4>)
 800602a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800602c:	0a1b      	lsrs	r3, r3, #8
 800602e:	220f      	movs	r2, #15
 8006030:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8006032:	4b0f      	ldr	r3, [pc, #60]	@ (8006070 <HAL_RCC_ClockConfig+0x1f4>)
 8006034:	0092      	lsls	r2, r2, #2
 8006036:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006038:	221f      	movs	r2, #31
 800603a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800603c:	000a      	movs	r2, r1
 800603e:	40da      	lsrs	r2, r3
 8006040:	4b0c      	ldr	r3, [pc, #48]	@ (8006074 <HAL_RCC_ClockConfig+0x1f8>)
 8006042:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006044:	4b0c      	ldr	r3, [pc, #48]	@ (8006078 <HAL_RCC_ClockConfig+0x1fc>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	0018      	movs	r0, r3
 800604a:	f7fe fb87 	bl	800475c <HAL_InitTick>
 800604e:	0003      	movs	r3, r0
}
 8006050:	0018      	movs	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	b004      	add	sp, #16
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40022000 	.word	0x40022000
 800605c:	00001388 	.word	0x00001388
 8006060:	40021000 	.word	0x40021000
 8006064:	ffff84ff 	.word	0xffff84ff
 8006068:	fffff0ff 	.word	0xfffff0ff
 800606c:	ffff8fff 	.word	0xffff8fff
 8006070:	08007c5c 	.word	0x08007c5c
 8006074:	20000000 	.word	0x20000000
 8006078:	20000004 	.word	0x20000004

0800607c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006082:	4b1c      	ldr	r3, [pc, #112]	@ (80060f4 <HAL_RCC_GetSysClockFreq+0x78>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	2238      	movs	r2, #56	@ 0x38
 8006088:	4013      	ands	r3, r2
 800608a:	d10f      	bne.n	80060ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800608c:	4b19      	ldr	r3, [pc, #100]	@ (80060f4 <HAL_RCC_GetSysClockFreq+0x78>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	0adb      	lsrs	r3, r3, #11
 8006092:	2207      	movs	r2, #7
 8006094:	4013      	ands	r3, r2
 8006096:	2201      	movs	r2, #1
 8006098:	409a      	lsls	r2, r3
 800609a:	0013      	movs	r3, r2
 800609c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	4815      	ldr	r0, [pc, #84]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x7c>)
 80060a2:	f7fa f839 	bl	8000118 <__udivsi3>
 80060a6:	0003      	movs	r3, r0
 80060a8:	607b      	str	r3, [r7, #4]
 80060aa:	e01e      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80060ac:	4b11      	ldr	r3, [pc, #68]	@ (80060f4 <HAL_RCC_GetSysClockFreq+0x78>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2238      	movs	r2, #56	@ 0x38
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d102      	bne.n	80060be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060b8:	4b10      	ldr	r3, [pc, #64]	@ (80060fc <HAL_RCC_GetSysClockFreq+0x80>)
 80060ba:	607b      	str	r3, [r7, #4]
 80060bc:	e015      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80060be:	4b0d      	ldr	r3, [pc, #52]	@ (80060f4 <HAL_RCC_GetSysClockFreq+0x78>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	2238      	movs	r2, #56	@ 0x38
 80060c4:	4013      	ands	r3, r2
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d103      	bne.n	80060d2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80060ca:	2380      	movs	r3, #128	@ 0x80
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	607b      	str	r3, [r7, #4]
 80060d0:	e00b      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80060d2:	4b08      	ldr	r3, [pc, #32]	@ (80060f4 <HAL_RCC_GetSysClockFreq+0x78>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2238      	movs	r2, #56	@ 0x38
 80060d8:	4013      	ands	r3, r2
 80060da:	2b18      	cmp	r3, #24
 80060dc:	d103      	bne.n	80060e6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80060de:	23fa      	movs	r3, #250	@ 0xfa
 80060e0:	01db      	lsls	r3, r3, #7
 80060e2:	607b      	str	r3, [r7, #4]
 80060e4:	e001      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80060ea:	687b      	ldr	r3, [r7, #4]
}
 80060ec:	0018      	movs	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b002      	add	sp, #8
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40021000 	.word	0x40021000
 80060f8:	02dc6c00 	.word	0x02dc6c00
 80060fc:	007a1200 	.word	0x007a1200

08006100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8006104:	f7ff ffba 	bl	800607c <HAL_RCC_GetSysClockFreq>
 8006108:	0001      	movs	r1, r0
 800610a:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <HAL_RCC_GetHCLKFreq+0x30>)
 800610c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800610e:	0a1b      	lsrs	r3, r3, #8
 8006110:	220f      	movs	r2, #15
 8006112:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8006114:	4b07      	ldr	r3, [pc, #28]	@ (8006134 <HAL_RCC_GetHCLKFreq+0x34>)
 8006116:	0092      	lsls	r2, r2, #2
 8006118:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800611a:	221f      	movs	r2, #31
 800611c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800611e:	000a      	movs	r2, r1
 8006120:	40da      	lsrs	r2, r3
 8006122:	4b05      	ldr	r3, [pc, #20]	@ (8006138 <HAL_RCC_GetHCLKFreq+0x38>)
 8006124:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8006126:	4b04      	ldr	r3, [pc, #16]	@ (8006138 <HAL_RCC_GetHCLKFreq+0x38>)
 8006128:	681b      	ldr	r3, [r3, #0]
}
 800612a:	0018      	movs	r0, r3
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40021000 	.word	0x40021000
 8006134:	08007c5c 	.word	0x08007c5c
 8006138:	20000000 	.word	0x20000000

0800613c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8006140:	f7ff ffde 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 8006144:	0001      	movs	r1, r0
 8006146:	4b07      	ldr	r3, [pc, #28]	@ (8006164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	0b1b      	lsrs	r3, r3, #12
 800614c:	2207      	movs	r2, #7
 800614e:	401a      	ands	r2, r3
 8006150:	4b05      	ldr	r3, [pc, #20]	@ (8006168 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006152:	0092      	lsls	r2, r2, #2
 8006154:	58d3      	ldr	r3, [r2, r3]
 8006156:	221f      	movs	r2, #31
 8006158:	4013      	ands	r3, r2
 800615a:	40d9      	lsrs	r1, r3
 800615c:	000b      	movs	r3, r1
}
 800615e:	0018      	movs	r0, r3
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40021000 	.word	0x40021000
 8006168:	08007c9c 	.word	0x08007c9c

0800616c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006174:	2313      	movs	r3, #19
 8006176:	18fb      	adds	r3, r7, r3
 8006178:	2200      	movs	r2, #0
 800617a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800617c:	2312      	movs	r3, #18
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2240      	movs	r2, #64	@ 0x40
 800618a:	4013      	ands	r3, r2
 800618c:	d100      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800618e:	e079      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006190:	2011      	movs	r0, #17
 8006192:	183b      	adds	r3, r7, r0
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006198:	4b63      	ldr	r3, [pc, #396]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800619a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800619c:	2380      	movs	r3, #128	@ 0x80
 800619e:	055b      	lsls	r3, r3, #21
 80061a0:	4013      	ands	r3, r2
 80061a2:	d110      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061a4:	4b60      	ldr	r3, [pc, #384]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061a8:	4b5f      	ldr	r3, [pc, #380]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061aa:	2180      	movs	r1, #128	@ 0x80
 80061ac:	0549      	lsls	r1, r1, #21
 80061ae:	430a      	orrs	r2, r1
 80061b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80061b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061b6:	2380      	movs	r3, #128	@ 0x80
 80061b8:	055b      	lsls	r3, r3, #21
 80061ba:	4013      	ands	r3, r2
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061c0:	183b      	adds	r3, r7, r0
 80061c2:	2201      	movs	r2, #1
 80061c4:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80061c6:	4b58      	ldr	r3, [pc, #352]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061ca:	23c0      	movs	r3, #192	@ 0xc0
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4013      	ands	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d019      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d014      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80061e2:	4b51      	ldr	r3, [pc, #324]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e6:	4a51      	ldr	r2, [pc, #324]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061ec:	4b4e      	ldr	r3, [pc, #312]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061f0:	4b4d      	ldr	r3, [pc, #308]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061f2:	2180      	movs	r1, #128	@ 0x80
 80061f4:	0249      	lsls	r1, r1, #9
 80061f6:	430a      	orrs	r2, r1
 80061f8:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061fa:	4b4b      	ldr	r3, [pc, #300]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061fe:	4b4a      	ldr	r3, [pc, #296]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006200:	494b      	ldr	r1, [pc, #300]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006202:	400a      	ands	r2, r1
 8006204:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8006206:	4b48      	ldr	r3, [pc, #288]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2201      	movs	r2, #1
 8006210:	4013      	ands	r3, r2
 8006212:	d016      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006214:	f7fe fafe 	bl	8004814 <HAL_GetTick>
 8006218:	0003      	movs	r3, r0
 800621a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800621c:	e00c      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800621e:	f7fe faf9 	bl	8004814 <HAL_GetTick>
 8006222:	0002      	movs	r2, r0
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	4a42      	ldr	r2, [pc, #264]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d904      	bls.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800622e:	2313      	movs	r3, #19
 8006230:	18fb      	adds	r3, r7, r3
 8006232:	2203      	movs	r2, #3
 8006234:	701a      	strb	r2, [r3, #0]
          break;
 8006236:	e004      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8006238:	4b3b      	ldr	r3, [pc, #236]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800623a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800623c:	2202      	movs	r2, #2
 800623e:	4013      	ands	r3, r2
 8006240:	d0ed      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8006242:	2313      	movs	r3, #19
 8006244:	18fb      	adds	r3, r7, r3
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800624c:	4b36      	ldr	r3, [pc, #216]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800624e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006250:	4a36      	ldr	r2, [pc, #216]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006252:	4013      	ands	r3, r2
 8006254:	0019      	movs	r1, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699a      	ldr	r2, [r3, #24]
 800625a:	4b33      	ldr	r3, [pc, #204]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800625c:	430a      	orrs	r2, r1
 800625e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006260:	e005      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006262:	2312      	movs	r3, #18
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	2213      	movs	r2, #19
 8006268:	18ba      	adds	r2, r7, r2
 800626a:	7812      	ldrb	r2, [r2, #0]
 800626c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800626e:	2311      	movs	r3, #17
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d105      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006278:	4b2b      	ldr	r3, [pc, #172]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800627a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800627c:	4b2a      	ldr	r3, [pc, #168]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800627e:	492e      	ldr	r1, [pc, #184]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006280:	400a      	ands	r2, r1
 8006282:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2201      	movs	r2, #1
 800628a:	4013      	ands	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800628e:	4b26      	ldr	r3, [pc, #152]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006292:	2203      	movs	r2, #3
 8006294:	4393      	bics	r3, r2
 8006296:	0019      	movs	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	4b22      	ldr	r3, [pc, #136]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800629e:	430a      	orrs	r2, r1
 80062a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2202      	movs	r2, #2
 80062a8:	4013      	ands	r3, r2
 80062aa:	d009      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b0:	4a22      	ldr	r2, [pc, #136]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	0019      	movs	r1, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062bc:	430a      	orrs	r2, r1
 80062be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2220      	movs	r2, #32
 80062c6:	4013      	ands	r3, r2
 80062c8:	d008      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062ca:	4b17      	ldr	r3, [pc, #92]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	0899      	lsrs	r1, r3, #2
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	695a      	ldr	r2, [r3, #20]
 80062d6:	4b14      	ldr	r3, [pc, #80]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062d8:	430a      	orrs	r2, r1
 80062da:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2204      	movs	r2, #4
 80062e2:	4013      	ands	r3, r2
 80062e4:	d009      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80062e6:	4b10      	ldr	r3, [pc, #64]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ea:	4a15      	ldr	r2, [pc, #84]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	0019      	movs	r1, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062f6:	430a      	orrs	r2, r1
 80062f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2280      	movs	r2, #128	@ 0x80
 8006300:	4013      	ands	r3, r2
 8006302:	d009      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8006304:	4b08      	ldr	r3, [pc, #32]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	22e0      	movs	r2, #224	@ 0xe0
 800630a:	4393      	bics	r3, r2
 800630c:	0019      	movs	r1, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	4b05      	ldr	r3, [pc, #20]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006314:	430a      	orrs	r2, r1
 8006316:	601a      	str	r2, [r3, #0]
  }
  return status;
 8006318:	2312      	movs	r3, #18
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	781b      	ldrb	r3, [r3, #0]
}
 800631e:	0018      	movs	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	b006      	add	sp, #24
 8006324:	bd80      	pop	{r7, pc}
 8006326:	46c0      	nop			@ (mov r8, r8)
 8006328:	40021000 	.word	0x40021000
 800632c:	fffffcff 	.word	0xfffffcff
 8006330:	fffeffff 	.word	0xfffeffff
 8006334:	00001388 	.word	0x00001388
 8006338:	efffffff 	.word	0xefffffff
 800633c:	ffffcfff 	.word	0xffffcfff
 8006340:	ffff3fff 	.word	0xffff3fff

08006344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e04a      	b.n	80063ec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	223d      	movs	r2, #61	@ 0x3d
 800635a:	5c9b      	ldrb	r3, [r3, r2]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d107      	bne.n	8006372 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	223c      	movs	r2, #60	@ 0x3c
 8006366:	2100      	movs	r1, #0
 8006368:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	0018      	movs	r0, r3
 800636e:	f7fe f8e1 	bl	8004534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	223d      	movs	r2, #61	@ 0x3d
 8006376:	2102      	movs	r1, #2
 8006378:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3304      	adds	r3, #4
 8006382:	0019      	movs	r1, r3
 8006384:	0010      	movs	r0, r2
 8006386:	f000 f835 	bl	80063f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2248      	movs	r2, #72	@ 0x48
 800638e:	2101      	movs	r1, #1
 8006390:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	223e      	movs	r2, #62	@ 0x3e
 8006396:	2101      	movs	r1, #1
 8006398:	5499      	strb	r1, [r3, r2]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	223f      	movs	r2, #63	@ 0x3f
 800639e:	2101      	movs	r1, #1
 80063a0:	5499      	strb	r1, [r3, r2]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2240      	movs	r2, #64	@ 0x40
 80063a6:	2101      	movs	r1, #1
 80063a8:	5499      	strb	r1, [r3, r2]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2241      	movs	r2, #65	@ 0x41
 80063ae:	2101      	movs	r1, #1
 80063b0:	5499      	strb	r1, [r3, r2]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2242      	movs	r2, #66	@ 0x42
 80063b6:	2101      	movs	r1, #1
 80063b8:	5499      	strb	r1, [r3, r2]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2243      	movs	r2, #67	@ 0x43
 80063be:	2101      	movs	r1, #1
 80063c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2244      	movs	r2, #68	@ 0x44
 80063c6:	2101      	movs	r1, #1
 80063c8:	5499      	strb	r1, [r3, r2]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2245      	movs	r2, #69	@ 0x45
 80063ce:	2101      	movs	r1, #1
 80063d0:	5499      	strb	r1, [r3, r2]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2246      	movs	r2, #70	@ 0x46
 80063d6:	2101      	movs	r1, #1
 80063d8:	5499      	strb	r1, [r3, r2]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2247      	movs	r2, #71	@ 0x47
 80063de:	2101      	movs	r1, #1
 80063e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	223d      	movs	r2, #61	@ 0x3d
 80063e6:	2101      	movs	r1, #1
 80063e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	0018      	movs	r0, r3
 80063ee:	46bd      	mov	sp, r7
 80063f0:	b002      	add	sp, #8
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a2e      	ldr	r2, [pc, #184]	@ (80064c0 <TIM_Base_SetConfig+0xcc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_Base_SetConfig+0x20>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a2d      	ldr	r2, [pc, #180]	@ (80064c4 <TIM_Base_SetConfig+0xd0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d108      	bne.n	8006426 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2270      	movs	r2, #112	@ 0x70
 8006418:	4393      	bics	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a25      	ldr	r2, [pc, #148]	@ (80064c0 <TIM_Base_SetConfig+0xcc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00f      	beq.n	800644e <TIM_Base_SetConfig+0x5a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a24      	ldr	r2, [pc, #144]	@ (80064c4 <TIM_Base_SetConfig+0xd0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00b      	beq.n	800644e <TIM_Base_SetConfig+0x5a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a23      	ldr	r2, [pc, #140]	@ (80064c8 <TIM_Base_SetConfig+0xd4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d007      	beq.n	800644e <TIM_Base_SetConfig+0x5a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a22      	ldr	r2, [pc, #136]	@ (80064cc <TIM_Base_SetConfig+0xd8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d003      	beq.n	800644e <TIM_Base_SetConfig+0x5a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a21      	ldr	r2, [pc, #132]	@ (80064d0 <TIM_Base_SetConfig+0xdc>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d108      	bne.n	8006460 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a20      	ldr	r2, [pc, #128]	@ (80064d4 <TIM_Base_SetConfig+0xe0>)
 8006452:	4013      	ands	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2280      	movs	r2, #128	@ 0x80
 8006464:	4393      	bics	r3, r2
 8006466:	001a      	movs	r2, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a0f      	ldr	r2, [pc, #60]	@ (80064c0 <TIM_Base_SetConfig+0xcc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d007      	beq.n	8006498 <TIM_Base_SetConfig+0xa4>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a10      	ldr	r2, [pc, #64]	@ (80064cc <TIM_Base_SetConfig+0xd8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_Base_SetConfig+0xa4>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a0f      	ldr	r2, [pc, #60]	@ (80064d0 <TIM_Base_SetConfig+0xdc>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d103      	bne.n	80064a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2204      	movs	r2, #4
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	601a      	str	r2, [r3, #0]
}
 80064b8:	46c0      	nop			@ (mov r8, r8)
 80064ba:	46bd      	mov	sp, r7
 80064bc:	b004      	add	sp, #16
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40000400 	.word	0x40000400
 80064c8:	40002000 	.word	0x40002000
 80064cc:	40014400 	.word	0x40014400
 80064d0:	40014800 	.word	0x40014800
 80064d4:	fffffcff 	.word	0xfffffcff

080064d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e046      	b.n	8006578 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2288      	movs	r2, #136	@ 0x88
 80064ee:	589b      	ldr	r3, [r3, r2]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2284      	movs	r2, #132	@ 0x84
 80064f8:	2100      	movs	r1, #0
 80064fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	0018      	movs	r0, r3
 8006500:	f7fe f88a 	bl	8004618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2288      	movs	r2, #136	@ 0x88
 8006508:	2124      	movs	r1, #36	@ 0x24
 800650a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2101      	movs	r1, #1
 8006518:	438a      	bics	r2, r1
 800651a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	0018      	movs	r0, r3
 8006528:	f000 fa4e 	bl	80069c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	0018      	movs	r0, r3
 8006530:	f000 f8cc 	bl	80066cc <UART_SetConfig>
 8006534:	0003      	movs	r3, r0
 8006536:	2b01      	cmp	r3, #1
 8006538:	d101      	bne.n	800653e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e01c      	b.n	8006578 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	490d      	ldr	r1, [pc, #52]	@ (8006580 <HAL_UART_Init+0xa8>)
 800654a:	400a      	ands	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	212a      	movs	r1, #42	@ 0x2a
 800655a:	438a      	bics	r2, r1
 800655c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2101      	movs	r1, #1
 800656a:	430a      	orrs	r2, r1
 800656c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	0018      	movs	r0, r3
 8006572:	f000 fadd 	bl	8006b30 <UART_CheckIdleState>
 8006576:	0003      	movs	r3, r0
}
 8006578:	0018      	movs	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}
 8006580:	ffffb7ff 	.word	0xffffb7ff

08006584 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08a      	sub	sp, #40	@ 0x28
 8006588:	af02      	add	r7, sp, #8
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	1dbb      	adds	r3, r7, #6
 8006592:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2288      	movs	r2, #136	@ 0x88
 8006598:	589b      	ldr	r3, [r3, r2]
 800659a:	2b20      	cmp	r3, #32
 800659c:	d000      	beq.n	80065a0 <HAL_UART_Transmit+0x1c>
 800659e:	e090      	b.n	80066c2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_UART_Transmit+0x2a>
 80065a6:	1dbb      	adds	r3, r7, #6
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e088      	b.n	80066c4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	2380      	movs	r3, #128	@ 0x80
 80065b8:	015b      	lsls	r3, r3, #5
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d109      	bne.n	80065d2 <HAL_UART_Transmit+0x4e>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d105      	bne.n	80065d2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2201      	movs	r2, #1
 80065ca:	4013      	ands	r3, r2
 80065cc:	d001      	beq.n	80065d2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e078      	b.n	80066c4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2290      	movs	r2, #144	@ 0x90
 80065d6:	2100      	movs	r1, #0
 80065d8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2288      	movs	r2, #136	@ 0x88
 80065de:	2121      	movs	r1, #33	@ 0x21
 80065e0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065e2:	f7fe f917 	bl	8004814 <HAL_GetTick>
 80065e6:	0003      	movs	r3, r0
 80065e8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1dba      	adds	r2, r7, #6
 80065ee:	2154      	movs	r1, #84	@ 0x54
 80065f0:	8812      	ldrh	r2, [r2, #0]
 80065f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	1dba      	adds	r2, r7, #6
 80065f8:	2156      	movs	r1, #86	@ 0x56
 80065fa:	8812      	ldrh	r2, [r2, #0]
 80065fc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	2380      	movs	r3, #128	@ 0x80
 8006604:	015b      	lsls	r3, r3, #5
 8006606:	429a      	cmp	r2, r3
 8006608:	d108      	bne.n	800661c <HAL_UART_Transmit+0x98>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006612:	2300      	movs	r3, #0
 8006614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	e003      	b.n	8006624 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006620:	2300      	movs	r3, #0
 8006622:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006624:	e030      	b.n	8006688 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	0013      	movs	r3, r2
 8006630:	2200      	movs	r2, #0
 8006632:	2180      	movs	r1, #128	@ 0x80
 8006634:	f000 fb26 	bl	8006c84 <UART_WaitOnFlagUntilTimeout>
 8006638:	1e03      	subs	r3, r0, #0
 800663a:	d005      	beq.n	8006648 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2288      	movs	r2, #136	@ 0x88
 8006640:	2120      	movs	r1, #32
 8006642:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e03d      	b.n	80066c4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10b      	bne.n	8006666 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	001a      	movs	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	05d2      	lsls	r2, r2, #23
 800665a:	0dd2      	lsrs	r2, r2, #23
 800665c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	3302      	adds	r3, #2
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	e007      	b.n	8006676 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	3301      	adds	r3, #1
 8006674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2256      	movs	r2, #86	@ 0x56
 800667a:	5a9b      	ldrh	r3, [r3, r2]
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	b299      	uxth	r1, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2256      	movs	r2, #86	@ 0x56
 8006686:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2256      	movs	r2, #86	@ 0x56
 800668c:	5a9b      	ldrh	r3, [r3, r2]
 800668e:	b29b      	uxth	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1c8      	bne.n	8006626 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	0013      	movs	r3, r2
 800669e:	2200      	movs	r2, #0
 80066a0:	2140      	movs	r1, #64	@ 0x40
 80066a2:	f000 faef 	bl	8006c84 <UART_WaitOnFlagUntilTimeout>
 80066a6:	1e03      	subs	r3, r0, #0
 80066a8:	d005      	beq.n	80066b6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2288      	movs	r2, #136	@ 0x88
 80066ae:	2120      	movs	r1, #32
 80066b0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e006      	b.n	80066c4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2288      	movs	r2, #136	@ 0x88
 80066ba:	2120      	movs	r1, #32
 80066bc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	e000      	b.n	80066c4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80066c2:	2302      	movs	r3, #2
  }
}
 80066c4:	0018      	movs	r0, r3
 80066c6:	46bd      	mov	sp, r7
 80066c8:	b008      	add	sp, #32
 80066ca:	bd80      	pop	{r7, pc}

080066cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066d4:	231e      	movs	r3, #30
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	2200      	movs	r2, #0
 80066da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4aab      	ldr	r2, [pc, #684]	@ (80069a8 <UART_SetConfig+0x2dc>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	0019      	movs	r1, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	430a      	orrs	r2, r1
 8006708:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	4aa6      	ldr	r2, [pc, #664]	@ (80069ac <UART_SetConfig+0x2e0>)
 8006712:	4013      	ands	r3, r2
 8006714:	0019      	movs	r1, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4a9d      	ldr	r2, [pc, #628]	@ (80069b0 <UART_SetConfig+0x2e4>)
 800673a:	4013      	ands	r3, r2
 800673c:	0019      	movs	r1, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	430a      	orrs	r2, r1
 8006746:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674e:	220f      	movs	r2, #15
 8006750:	4393      	bics	r3, r2
 8006752:	0019      	movs	r1, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a93      	ldr	r2, [pc, #588]	@ (80069b4 <UART_SetConfig+0x2e8>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d127      	bne.n	80067ba <UART_SetConfig+0xee>
 800676a:	4b93      	ldr	r3, [pc, #588]	@ (80069b8 <UART_SetConfig+0x2ec>)
 800676c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800676e:	2203      	movs	r2, #3
 8006770:	4013      	ands	r3, r2
 8006772:	2b03      	cmp	r3, #3
 8006774:	d017      	beq.n	80067a6 <UART_SetConfig+0xda>
 8006776:	d81b      	bhi.n	80067b0 <UART_SetConfig+0xe4>
 8006778:	2b02      	cmp	r3, #2
 800677a:	d00a      	beq.n	8006792 <UART_SetConfig+0xc6>
 800677c:	d818      	bhi.n	80067b0 <UART_SetConfig+0xe4>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <UART_SetConfig+0xbc>
 8006782:	2b01      	cmp	r3, #1
 8006784:	d00a      	beq.n	800679c <UART_SetConfig+0xd0>
 8006786:	e013      	b.n	80067b0 <UART_SetConfig+0xe4>
 8006788:	231f      	movs	r3, #31
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	2200      	movs	r2, #0
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	e021      	b.n	80067d6 <UART_SetConfig+0x10a>
 8006792:	231f      	movs	r3, #31
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	2202      	movs	r2, #2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	e01c      	b.n	80067d6 <UART_SetConfig+0x10a>
 800679c:	231f      	movs	r3, #31
 800679e:	18fb      	adds	r3, r7, r3
 80067a0:	2204      	movs	r2, #4
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	e017      	b.n	80067d6 <UART_SetConfig+0x10a>
 80067a6:	231f      	movs	r3, #31
 80067a8:	18fb      	adds	r3, r7, r3
 80067aa:	2208      	movs	r2, #8
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e012      	b.n	80067d6 <UART_SetConfig+0x10a>
 80067b0:	231f      	movs	r3, #31
 80067b2:	18fb      	adds	r3, r7, r3
 80067b4:	2210      	movs	r2, #16
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	e00d      	b.n	80067d6 <UART_SetConfig+0x10a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a7f      	ldr	r2, [pc, #508]	@ (80069bc <UART_SetConfig+0x2f0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d104      	bne.n	80067ce <UART_SetConfig+0x102>
 80067c4:	231f      	movs	r3, #31
 80067c6:	18fb      	adds	r3, r7, r3
 80067c8:	2200      	movs	r2, #0
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	e003      	b.n	80067d6 <UART_SetConfig+0x10a>
 80067ce:	231f      	movs	r3, #31
 80067d0:	18fb      	adds	r3, r7, r3
 80067d2:	2210      	movs	r2, #16
 80067d4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69da      	ldr	r2, [r3, #28]
 80067da:	2380      	movs	r3, #128	@ 0x80
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	429a      	cmp	r2, r3
 80067e0:	d000      	beq.n	80067e4 <UART_SetConfig+0x118>
 80067e2:	e06f      	b.n	80068c4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80067e4:	231f      	movs	r3, #31
 80067e6:	18fb      	adds	r3, r7, r3
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d01f      	beq.n	800682e <UART_SetConfig+0x162>
 80067ee:	dc22      	bgt.n	8006836 <UART_SetConfig+0x16a>
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d017      	beq.n	8006824 <UART_SetConfig+0x158>
 80067f4:	dc1f      	bgt.n	8006836 <UART_SetConfig+0x16a>
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <UART_SetConfig+0x134>
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d005      	beq.n	800680a <UART_SetConfig+0x13e>
 80067fe:	e01a      	b.n	8006836 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006800:	f7ff fc9c 	bl	800613c <HAL_RCC_GetPCLK1Freq>
 8006804:	0003      	movs	r3, r0
 8006806:	61bb      	str	r3, [r7, #24]
        break;
 8006808:	e01c      	b.n	8006844 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800680a:	4b6b      	ldr	r3, [pc, #428]	@ (80069b8 <UART_SetConfig+0x2ec>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	2207      	movs	r2, #7
 8006812:	4013      	ands	r3, r2
 8006814:	3301      	adds	r3, #1
 8006816:	0019      	movs	r1, r3
 8006818:	4869      	ldr	r0, [pc, #420]	@ (80069c0 <UART_SetConfig+0x2f4>)
 800681a:	f7f9 fc7d 	bl	8000118 <__udivsi3>
 800681e:	0003      	movs	r3, r0
 8006820:	61bb      	str	r3, [r7, #24]
        break;
 8006822:	e00f      	b.n	8006844 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006824:	f7ff fc2a 	bl	800607c <HAL_RCC_GetSysClockFreq>
 8006828:	0003      	movs	r3, r0
 800682a:	61bb      	str	r3, [r7, #24]
        break;
 800682c:	e00a      	b.n	8006844 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682e:	2380      	movs	r3, #128	@ 0x80
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	61bb      	str	r3, [r7, #24]
        break;
 8006834:	e006      	b.n	8006844 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800683a:	231e      	movs	r3, #30
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	2201      	movs	r2, #1
 8006840:	701a      	strb	r2, [r3, #0]
        break;
 8006842:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d100      	bne.n	800684c <UART_SetConfig+0x180>
 800684a:	e097      	b.n	800697c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006850:	4b5c      	ldr	r3, [pc, #368]	@ (80069c4 <UART_SetConfig+0x2f8>)
 8006852:	0052      	lsls	r2, r2, #1
 8006854:	5ad3      	ldrh	r3, [r2, r3]
 8006856:	0019      	movs	r1, r3
 8006858:	69b8      	ldr	r0, [r7, #24]
 800685a:	f7f9 fc5d 	bl	8000118 <__udivsi3>
 800685e:	0003      	movs	r3, r0
 8006860:	005a      	lsls	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	085b      	lsrs	r3, r3, #1
 8006868:	18d2      	adds	r2, r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	0019      	movs	r1, r3
 8006870:	0010      	movs	r0, r2
 8006872:	f7f9 fc51 	bl	8000118 <__udivsi3>
 8006876:	0003      	movs	r3, r0
 8006878:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b0f      	cmp	r3, #15
 800687e:	d91c      	bls.n	80068ba <UART_SetConfig+0x1ee>
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	2380      	movs	r3, #128	@ 0x80
 8006884:	025b      	lsls	r3, r3, #9
 8006886:	429a      	cmp	r2, r3
 8006888:	d217      	bcs.n	80068ba <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	b29a      	uxth	r2, r3
 800688e:	200e      	movs	r0, #14
 8006890:	183b      	adds	r3, r7, r0
 8006892:	210f      	movs	r1, #15
 8006894:	438a      	bics	r2, r1
 8006896:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	b29b      	uxth	r3, r3
 800689e:	2207      	movs	r2, #7
 80068a0:	4013      	ands	r3, r2
 80068a2:	b299      	uxth	r1, r3
 80068a4:	183b      	adds	r3, r7, r0
 80068a6:	183a      	adds	r2, r7, r0
 80068a8:	8812      	ldrh	r2, [r2, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	183a      	adds	r2, r7, r0
 80068b4:	8812      	ldrh	r2, [r2, #0]
 80068b6:	60da      	str	r2, [r3, #12]
 80068b8:	e060      	b.n	800697c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80068ba:	231e      	movs	r3, #30
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	2201      	movs	r2, #1
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e05b      	b.n	800697c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068c4:	231f      	movs	r3, #31
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d01f      	beq.n	800690e <UART_SetConfig+0x242>
 80068ce:	dc22      	bgt.n	8006916 <UART_SetConfig+0x24a>
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	d017      	beq.n	8006904 <UART_SetConfig+0x238>
 80068d4:	dc1f      	bgt.n	8006916 <UART_SetConfig+0x24a>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <UART_SetConfig+0x214>
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d005      	beq.n	80068ea <UART_SetConfig+0x21e>
 80068de:	e01a      	b.n	8006916 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e0:	f7ff fc2c 	bl	800613c <HAL_RCC_GetPCLK1Freq>
 80068e4:	0003      	movs	r3, r0
 80068e6:	61bb      	str	r3, [r7, #24]
        break;
 80068e8:	e01c      	b.n	8006924 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80068ea:	4b33      	ldr	r3, [pc, #204]	@ (80069b8 <UART_SetConfig+0x2ec>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	2207      	movs	r2, #7
 80068f2:	4013      	ands	r3, r2
 80068f4:	3301      	adds	r3, #1
 80068f6:	0019      	movs	r1, r3
 80068f8:	4831      	ldr	r0, [pc, #196]	@ (80069c0 <UART_SetConfig+0x2f4>)
 80068fa:	f7f9 fc0d 	bl	8000118 <__udivsi3>
 80068fe:	0003      	movs	r3, r0
 8006900:	61bb      	str	r3, [r7, #24]
        break;
 8006902:	e00f      	b.n	8006924 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006904:	f7ff fbba 	bl	800607c <HAL_RCC_GetSysClockFreq>
 8006908:	0003      	movs	r3, r0
 800690a:	61bb      	str	r3, [r7, #24]
        break;
 800690c:	e00a      	b.n	8006924 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690e:	2380      	movs	r3, #128	@ 0x80
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	61bb      	str	r3, [r7, #24]
        break;
 8006914:	e006      	b.n	8006924 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800691a:	231e      	movs	r3, #30
 800691c:	18fb      	adds	r3, r7, r3
 800691e:	2201      	movs	r2, #1
 8006920:	701a      	strb	r2, [r3, #0]
        break;
 8006922:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d028      	beq.n	800697c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800692e:	4b25      	ldr	r3, [pc, #148]	@ (80069c4 <UART_SetConfig+0x2f8>)
 8006930:	0052      	lsls	r2, r2, #1
 8006932:	5ad3      	ldrh	r3, [r2, r3]
 8006934:	0019      	movs	r1, r3
 8006936:	69b8      	ldr	r0, [r7, #24]
 8006938:	f7f9 fbee 	bl	8000118 <__udivsi3>
 800693c:	0003      	movs	r3, r0
 800693e:	001a      	movs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	18d2      	adds	r2, r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	0019      	movs	r1, r3
 800694e:	0010      	movs	r0, r2
 8006950:	f7f9 fbe2 	bl	8000118 <__udivsi3>
 8006954:	0003      	movs	r3, r0
 8006956:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	2b0f      	cmp	r3, #15
 800695c:	d90a      	bls.n	8006974 <UART_SetConfig+0x2a8>
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	2380      	movs	r3, #128	@ 0x80
 8006962:	025b      	lsls	r3, r3, #9
 8006964:	429a      	cmp	r2, r3
 8006966:	d205      	bcs.n	8006974 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	b29a      	uxth	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60da      	str	r2, [r3, #12]
 8006972:	e003      	b.n	800697c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006974:	231e      	movs	r3, #30
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	2201      	movs	r2, #1
 800697a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	226a      	movs	r2, #106	@ 0x6a
 8006980:	2101      	movs	r1, #1
 8006982:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2268      	movs	r2, #104	@ 0x68
 8006988:	2101      	movs	r1, #1
 800698a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006998:	231e      	movs	r3, #30
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	781b      	ldrb	r3, [r3, #0]
}
 800699e:	0018      	movs	r0, r3
 80069a0:	46bd      	mov	sp, r7
 80069a2:	b008      	add	sp, #32
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	46c0      	nop			@ (mov r8, r8)
 80069a8:	cfff69f3 	.word	0xcfff69f3
 80069ac:	ffffcfff 	.word	0xffffcfff
 80069b0:	11fff4ff 	.word	0x11fff4ff
 80069b4:	40013800 	.word	0x40013800
 80069b8:	40021000 	.word	0x40021000
 80069bc:	40004400 	.word	0x40004400
 80069c0:	02dc6c00 	.word	0x02dc6c00
 80069c4:	08007cbc 	.word	0x08007cbc

080069c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d4:	2208      	movs	r2, #8
 80069d6:	4013      	ands	r3, r2
 80069d8:	d00b      	beq.n	80069f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	4a4a      	ldr	r2, [pc, #296]	@ (8006b0c <UART_AdvFeatureConfig+0x144>)
 80069e2:	4013      	ands	r3, r2
 80069e4:	0019      	movs	r1, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f6:	2201      	movs	r2, #1
 80069f8:	4013      	ands	r3, r2
 80069fa:	d00b      	beq.n	8006a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	4a43      	ldr	r2, [pc, #268]	@ (8006b10 <UART_AdvFeatureConfig+0x148>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	0019      	movs	r1, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	2202      	movs	r2, #2
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	d00b      	beq.n	8006a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	4a3b      	ldr	r2, [pc, #236]	@ (8006b14 <UART_AdvFeatureConfig+0x14c>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	0019      	movs	r1, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d00b      	beq.n	8006a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	4a34      	ldr	r2, [pc, #208]	@ (8006b18 <UART_AdvFeatureConfig+0x150>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	0019      	movs	r1, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5c:	2210      	movs	r2, #16
 8006a5e:	4013      	ands	r3, r2
 8006a60:	d00b      	beq.n	8006a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	4a2c      	ldr	r2, [pc, #176]	@ (8006b1c <UART_AdvFeatureConfig+0x154>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	0019      	movs	r1, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7e:	2220      	movs	r2, #32
 8006a80:	4013      	ands	r3, r2
 8006a82:	d00b      	beq.n	8006a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	4a25      	ldr	r2, [pc, #148]	@ (8006b20 <UART_AdvFeatureConfig+0x158>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	0019      	movs	r1, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa0:	2240      	movs	r2, #64	@ 0x40
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d01d      	beq.n	8006ae2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	4a1d      	ldr	r2, [pc, #116]	@ (8006b24 <UART_AdvFeatureConfig+0x15c>)
 8006aae:	4013      	ands	r3, r2
 8006ab0:	0019      	movs	r1, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ac2:	2380      	movs	r3, #128	@ 0x80
 8006ac4:	035b      	lsls	r3, r3, #13
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d10b      	bne.n	8006ae2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	4a15      	ldr	r2, [pc, #84]	@ (8006b28 <UART_AdvFeatureConfig+0x160>)
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	0019      	movs	r1, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae6:	2280      	movs	r2, #128	@ 0x80
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d00b      	beq.n	8006b04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	4a0e      	ldr	r2, [pc, #56]	@ (8006b2c <UART_AdvFeatureConfig+0x164>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	0019      	movs	r1, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	605a      	str	r2, [r3, #4]
  }
}
 8006b04:	46c0      	nop			@ (mov r8, r8)
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b002      	add	sp, #8
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	ffff7fff 	.word	0xffff7fff
 8006b10:	fffdffff 	.word	0xfffdffff
 8006b14:	fffeffff 	.word	0xfffeffff
 8006b18:	fffbffff 	.word	0xfffbffff
 8006b1c:	ffffefff 	.word	0xffffefff
 8006b20:	ffffdfff 	.word	0xffffdfff
 8006b24:	ffefffff 	.word	0xffefffff
 8006b28:	ff9fffff 	.word	0xff9fffff
 8006b2c:	fff7ffff 	.word	0xfff7ffff

08006b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b092      	sub	sp, #72	@ 0x48
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2290      	movs	r2, #144	@ 0x90
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b40:	f7fd fe68 	bl	8004814 <HAL_GetTick>
 8006b44:	0003      	movs	r3, r0
 8006b46:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2208      	movs	r2, #8
 8006b50:	4013      	ands	r3, r2
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d12d      	bne.n	8006bb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b58:	2280      	movs	r2, #128	@ 0x80
 8006b5a:	0391      	lsls	r1, r2, #14
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	4a47      	ldr	r2, [pc, #284]	@ (8006c7c <UART_CheckIdleState+0x14c>)
 8006b60:	9200      	str	r2, [sp, #0]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f000 f88e 	bl	8006c84 <UART_WaitOnFlagUntilTimeout>
 8006b68:	1e03      	subs	r3, r0, #0
 8006b6a:	d022      	beq.n	8006bb2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b70:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b76:	2301      	movs	r3, #1
 8006b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7c:	f383 8810 	msr	PRIMASK, r3
}
 8006b80:	46c0      	nop			@ (mov r8, r8)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2180      	movs	r1, #128	@ 0x80
 8006b8e:	438a      	bics	r2, r1
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b98:	f383 8810 	msr	PRIMASK, r3
}
 8006b9c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2288      	movs	r2, #136	@ 0x88
 8006ba2:	2120      	movs	r1, #32
 8006ba4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2284      	movs	r2, #132	@ 0x84
 8006baa:	2100      	movs	r1, #0
 8006bac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e060      	b.n	8006c74 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2204      	movs	r2, #4
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d146      	bne.n	8006c4e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc2:	2280      	movs	r2, #128	@ 0x80
 8006bc4:	03d1      	lsls	r1, r2, #15
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8006c7c <UART_CheckIdleState+0x14c>)
 8006bca:	9200      	str	r2, [sp, #0]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f000 f859 	bl	8006c84 <UART_WaitOnFlagUntilTimeout>
 8006bd2:	1e03      	subs	r3, r0, #0
 8006bd4:	d03b      	beq.n	8006c4e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8006bda:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be0:	2301      	movs	r3, #1
 8006be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f383 8810 	msr	PRIMASK, r3
}
 8006bea:	46c0      	nop			@ (mov r8, r8)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4922      	ldr	r1, [pc, #136]	@ (8006c80 <UART_CheckIdleState+0x150>)
 8006bf8:	400a      	ands	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f383 8810 	msr	PRIMASK, r3
}
 8006c06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006c08:	f3ef 8310 	mrs	r3, PRIMASK
 8006c0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c12:	2301      	movs	r3, #1
 8006c14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	f383 8810 	msr	PRIMASK, r3
}
 8006c1c:	46c0      	nop			@ (mov r8, r8)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2101      	movs	r1, #1
 8006c2a:	438a      	bics	r2, r1
 8006c2c:	609a      	str	r2, [r3, #8]
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	f383 8810 	msr	PRIMASK, r3
}
 8006c38:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	228c      	movs	r2, #140	@ 0x8c
 8006c3e:	2120      	movs	r1, #32
 8006c40:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2284      	movs	r2, #132	@ 0x84
 8006c46:	2100      	movs	r1, #0
 8006c48:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e012      	b.n	8006c74 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2288      	movs	r2, #136	@ 0x88
 8006c52:	2120      	movs	r1, #32
 8006c54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	228c      	movs	r2, #140	@ 0x8c
 8006c5a:	2120      	movs	r1, #32
 8006c5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2284      	movs	r2, #132	@ 0x84
 8006c6e:	2100      	movs	r1, #0
 8006c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	0018      	movs	r0, r3
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b010      	add	sp, #64	@ 0x40
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	01ffffff 	.word	0x01ffffff
 8006c80:	fffffedf 	.word	0xfffffedf

08006c84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	1dfb      	adds	r3, r7, #7
 8006c92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c94:	e051      	b.n	8006d3a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	d04e      	beq.n	8006d3a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9c:	f7fd fdba 	bl	8004814 <HAL_GetTick>
 8006ca0:	0002      	movs	r2, r0
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d302      	bcc.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e051      	b.n	8006d5a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2204      	movs	r2, #4
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	d03b      	beq.n	8006d3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b80      	cmp	r3, #128	@ 0x80
 8006cc6:	d038      	beq.n	8006d3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b40      	cmp	r3, #64	@ 0x40
 8006ccc:	d035      	beq.n	8006d3a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d111      	bne.n	8006d00 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2208      	movs	r2, #8
 8006ce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	f000 f83c 	bl	8006d64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2290      	movs	r2, #144	@ 0x90
 8006cf0:	2108      	movs	r1, #8
 8006cf2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2284      	movs	r2, #132	@ 0x84
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e02c      	b.n	8006d5a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	69da      	ldr	r2, [r3, #28]
 8006d06:	2380      	movs	r3, #128	@ 0x80
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	401a      	ands	r2, r3
 8006d0c:	2380      	movs	r3, #128	@ 0x80
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d112      	bne.n	8006d3a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2280      	movs	r2, #128	@ 0x80
 8006d1a:	0112      	lsls	r2, r2, #4
 8006d1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	0018      	movs	r0, r3
 8006d22:	f000 f81f 	bl	8006d64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2290      	movs	r2, #144	@ 0x90
 8006d2a:	2120      	movs	r1, #32
 8006d2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2284      	movs	r2, #132	@ 0x84
 8006d32:	2100      	movs	r1, #0
 8006d34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e00f      	b.n	8006d5a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	4013      	ands	r3, r2
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	425a      	negs	r2, r3
 8006d4a:	4153      	adcs	r3, r2
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	001a      	movs	r2, r3
 8006d50:	1dfb      	adds	r3, r7, #7
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d09e      	beq.n	8006c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	b004      	add	sp, #16
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08e      	sub	sp, #56	@ 0x38
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d70:	617b      	str	r3, [r7, #20]
  return(result);
 8006d72:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d76:	2301      	movs	r3, #1
 8006d78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	f383 8810 	msr	PRIMASK, r3
}
 8006d80:	46c0      	nop			@ (mov r8, r8)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4926      	ldr	r1, [pc, #152]	@ (8006e28 <UART_EndRxTransfer+0xc4>)
 8006d8e:	400a      	ands	r2, r1
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f383 8810 	msr	PRIMASK, r3
}
 8006d9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006da2:	623b      	str	r3, [r7, #32]
  return(result);
 8006da4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006da6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006da8:	2301      	movs	r3, #1
 8006daa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dae:	f383 8810 	msr	PRIMASK, r3
}
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	491b      	ldr	r1, [pc, #108]	@ (8006e2c <UART_EndRxTransfer+0xc8>)
 8006dc0:	400a      	ands	r2, r1
 8006dc2:	609a      	str	r2, [r3, #8]
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dca:	f383 8810 	msr	PRIMASK, r3
}
 8006dce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d118      	bne.n	8006e0a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ddc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dde:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006de2:	2301      	movs	r3, #1
 8006de4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f383 8810 	msr	PRIMASK, r3
}
 8006dec:	46c0      	nop			@ (mov r8, r8)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2110      	movs	r1, #16
 8006dfa:	438a      	bics	r2, r1
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f383 8810 	msr	PRIMASK, r3
}
 8006e08:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	228c      	movs	r2, #140	@ 0x8c
 8006e0e:	2120      	movs	r1, #32
 8006e10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e1e:	46c0      	nop			@ (mov r8, r8)
 8006e20:	46bd      	mov	sp, r7
 8006e22:	b00e      	add	sp, #56	@ 0x38
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	fffffedf 	.word	0xfffffedf
 8006e2c:	effffffe 	.word	0xeffffffe

08006e30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2284      	movs	r2, #132	@ 0x84
 8006e3c:	5c9b      	ldrb	r3, [r3, r2]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d101      	bne.n	8006e46 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e42:	2302      	movs	r3, #2
 8006e44:	e027      	b.n	8006e96 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2284      	movs	r2, #132	@ 0x84
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2288      	movs	r2, #136	@ 0x88
 8006e52:	2124      	movs	r1, #36	@ 0x24
 8006e54:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2101      	movs	r1, #1
 8006e6a:	438a      	bics	r2, r1
 8006e6c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a0b      	ldr	r2, [pc, #44]	@ (8006ea0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2288      	movs	r2, #136	@ 0x88
 8006e88:	2120      	movs	r1, #32
 8006e8a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2284      	movs	r2, #132	@ 0x84
 8006e90:	2100      	movs	r1, #0
 8006e92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	0018      	movs	r0, r3
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	b004      	add	sp, #16
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	46c0      	nop			@ (mov r8, r8)
 8006ea0:	dfffffff 	.word	0xdfffffff

08006ea4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2284      	movs	r2, #132	@ 0x84
 8006eb2:	5c9b      	ldrb	r3, [r3, r2]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e02e      	b.n	8006f1a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2284      	movs	r2, #132	@ 0x84
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2288      	movs	r2, #136	@ 0x88
 8006ec8:	2124      	movs	r1, #36	@ 0x24
 8006eca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2101      	movs	r1, #1
 8006ee0:	438a      	bics	r2, r1
 8006ee2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	08d9      	lsrs	r1, r3, #3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	0018      	movs	r0, r3
 8006efc:	f000 f854 	bl	8006fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2288      	movs	r2, #136	@ 0x88
 8006f0c:	2120      	movs	r1, #32
 8006f0e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2284      	movs	r2, #132	@ 0x84
 8006f14:	2100      	movs	r1, #0
 8006f16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	b004      	add	sp, #16
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2284      	movs	r2, #132	@ 0x84
 8006f32:	5c9b      	ldrb	r3, [r3, r2]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e02f      	b.n	8006f9c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2284      	movs	r2, #132	@ 0x84
 8006f40:	2101      	movs	r1, #1
 8006f42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2288      	movs	r2, #136	@ 0x88
 8006f48:	2124      	movs	r1, #36	@ 0x24
 8006f4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2101      	movs	r1, #1
 8006f60:	438a      	bics	r2, r1
 8006f62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8006fa4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	0019      	movs	r1, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f000 f813 	bl	8006fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2288      	movs	r2, #136	@ 0x88
 8006f8e:	2120      	movs	r1, #32
 8006f90:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2284      	movs	r2, #132	@ 0x84
 8006f96:	2100      	movs	r1, #0
 8006f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	b004      	add	sp, #16
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	f1ffffff 	.word	0xf1ffffff

08006fa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d108      	bne.n	8006fca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	226a      	movs	r2, #106	@ 0x6a
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2268      	movs	r2, #104	@ 0x68
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fc8:	e043      	b.n	8007052 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fca:	260f      	movs	r6, #15
 8006fcc:	19bb      	adds	r3, r7, r6
 8006fce:	2208      	movs	r2, #8
 8006fd0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fd2:	200e      	movs	r0, #14
 8006fd4:	183b      	adds	r3, r7, r0
 8006fd6:	2208      	movs	r2, #8
 8006fd8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	0e5b      	lsrs	r3, r3, #25
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	240d      	movs	r4, #13
 8006fe6:	193b      	adds	r3, r7, r4
 8006fe8:	2107      	movs	r1, #7
 8006fea:	400a      	ands	r2, r1
 8006fec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	0f5b      	lsrs	r3, r3, #29
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	250c      	movs	r5, #12
 8006ffa:	197b      	adds	r3, r7, r5
 8006ffc:	2107      	movs	r1, #7
 8006ffe:	400a      	ands	r2, r1
 8007000:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007002:	183b      	adds	r3, r7, r0
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	197a      	adds	r2, r7, r5
 8007008:	7812      	ldrb	r2, [r2, #0]
 800700a:	4914      	ldr	r1, [pc, #80]	@ (800705c <UARTEx_SetNbDataToProcess+0xb4>)
 800700c:	5c8a      	ldrb	r2, [r1, r2]
 800700e:	435a      	muls	r2, r3
 8007010:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007012:	197b      	adds	r3, r7, r5
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	4a12      	ldr	r2, [pc, #72]	@ (8007060 <UARTEx_SetNbDataToProcess+0xb8>)
 8007018:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800701a:	0019      	movs	r1, r3
 800701c:	f7f9 f906 	bl	800022c <__divsi3>
 8007020:	0003      	movs	r3, r0
 8007022:	b299      	uxth	r1, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	226a      	movs	r2, #106	@ 0x6a
 8007028:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800702a:	19bb      	adds	r3, r7, r6
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	193a      	adds	r2, r7, r4
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	490a      	ldr	r1, [pc, #40]	@ (800705c <UARTEx_SetNbDataToProcess+0xb4>)
 8007034:	5c8a      	ldrb	r2, [r1, r2]
 8007036:	435a      	muls	r2, r3
 8007038:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800703a:	193b      	adds	r3, r7, r4
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	4a08      	ldr	r2, [pc, #32]	@ (8007060 <UARTEx_SetNbDataToProcess+0xb8>)
 8007040:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007042:	0019      	movs	r1, r3
 8007044:	f7f9 f8f2 	bl	800022c <__divsi3>
 8007048:	0003      	movs	r3, r0
 800704a:	b299      	uxth	r1, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2268      	movs	r2, #104	@ 0x68
 8007050:	5299      	strh	r1, [r3, r2]
}
 8007052:	46c0      	nop			@ (mov r8, r8)
 8007054:	46bd      	mov	sp, r7
 8007056:	b005      	add	sp, #20
 8007058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705a:	46c0      	nop			@ (mov r8, r8)
 800705c:	08007cd4 	.word	0x08007cd4
 8007060:	08007cdc 	.word	0x08007cdc

08007064 <memset>:
 8007064:	0003      	movs	r3, r0
 8007066:	1882      	adds	r2, r0, r2
 8007068:	4293      	cmp	r3, r2
 800706a:	d100      	bne.n	800706e <memset+0xa>
 800706c:	4770      	bx	lr
 800706e:	7019      	strb	r1, [r3, #0]
 8007070:	3301      	adds	r3, #1
 8007072:	e7f9      	b.n	8007068 <memset+0x4>

08007074 <__errno>:
 8007074:	4b01      	ldr	r3, [pc, #4]	@ (800707c <__errno+0x8>)
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	4770      	bx	lr
 800707a:	46c0      	nop			@ (mov r8, r8)
 800707c:	2000000c 	.word	0x2000000c

08007080 <__libc_init_array>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	2600      	movs	r6, #0
 8007084:	4c0c      	ldr	r4, [pc, #48]	@ (80070b8 <__libc_init_array+0x38>)
 8007086:	4d0d      	ldr	r5, [pc, #52]	@ (80070bc <__libc_init_array+0x3c>)
 8007088:	1b64      	subs	r4, r4, r5
 800708a:	10a4      	asrs	r4, r4, #2
 800708c:	42a6      	cmp	r6, r4
 800708e:	d109      	bne.n	80070a4 <__libc_init_array+0x24>
 8007090:	2600      	movs	r6, #0
 8007092:	f000 fceb 	bl	8007a6c <_init>
 8007096:	4c0a      	ldr	r4, [pc, #40]	@ (80070c0 <__libc_init_array+0x40>)
 8007098:	4d0a      	ldr	r5, [pc, #40]	@ (80070c4 <__libc_init_array+0x44>)
 800709a:	1b64      	subs	r4, r4, r5
 800709c:	10a4      	asrs	r4, r4, #2
 800709e:	42a6      	cmp	r6, r4
 80070a0:	d105      	bne.n	80070ae <__libc_init_array+0x2e>
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
 80070a4:	00b3      	lsls	r3, r6, #2
 80070a6:	58eb      	ldr	r3, [r5, r3]
 80070a8:	4798      	blx	r3
 80070aa:	3601      	adds	r6, #1
 80070ac:	e7ee      	b.n	800708c <__libc_init_array+0xc>
 80070ae:	00b3      	lsls	r3, r6, #2
 80070b0:	58eb      	ldr	r3, [r5, r3]
 80070b2:	4798      	blx	r3
 80070b4:	3601      	adds	r6, #1
 80070b6:	e7f2      	b.n	800709e <__libc_init_array+0x1e>
 80070b8:	08007d04 	.word	0x08007d04
 80070bc:	08007d04 	.word	0x08007d04
 80070c0:	08007d08 	.word	0x08007d08
 80070c4:	08007d04 	.word	0x08007d04

080070c8 <powf>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	1c0c      	adds	r4, r1, #0
 80070cc:	1c06      	adds	r6, r0, #0
 80070ce:	f000 f8e9 	bl	80072a4 <__ieee754_powf>
 80070d2:	1c21      	adds	r1, r4, #0
 80070d4:	1c05      	adds	r5, r0, #0
 80070d6:	1c20      	adds	r0, r4, #0
 80070d8:	f7fa f94c 	bl	8001374 <__aeabi_fcmpun>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d133      	bne.n	8007148 <powf+0x80>
 80070e0:	2100      	movs	r1, #0
 80070e2:	1c30      	adds	r0, r6, #0
 80070e4:	f7f9 f99a 	bl	800041c <__aeabi_fcmpeq>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d014      	beq.n	8007116 <powf+0x4e>
 80070ec:	2100      	movs	r1, #0
 80070ee:	1c20      	adds	r0, r4, #0
 80070f0:	f7f9 f994 	bl	800041c <__aeabi_fcmpeq>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d138      	bne.n	800716a <powf+0xa2>
 80070f8:	1c20      	adds	r0, r4, #0
 80070fa:	f000 f855 	bl	80071a8 <finitef>
 80070fe:	2800      	cmp	r0, #0
 8007100:	d022      	beq.n	8007148 <powf+0x80>
 8007102:	2100      	movs	r1, #0
 8007104:	1c20      	adds	r0, r4, #0
 8007106:	f7f9 f98f 	bl	8000428 <__aeabi_fcmplt>
 800710a:	2800      	cmp	r0, #0
 800710c:	d01c      	beq.n	8007148 <powf+0x80>
 800710e:	f7ff ffb1 	bl	8007074 <__errno>
 8007112:	2322      	movs	r3, #34	@ 0x22
 8007114:	e017      	b.n	8007146 <powf+0x7e>
 8007116:	1c28      	adds	r0, r5, #0
 8007118:	f000 f846 	bl	80071a8 <finitef>
 800711c:	2800      	cmp	r0, #0
 800711e:	d115      	bne.n	800714c <powf+0x84>
 8007120:	1c30      	adds	r0, r6, #0
 8007122:	f000 f841 	bl	80071a8 <finitef>
 8007126:	2800      	cmp	r0, #0
 8007128:	d010      	beq.n	800714c <powf+0x84>
 800712a:	1c20      	adds	r0, r4, #0
 800712c:	f000 f83c 	bl	80071a8 <finitef>
 8007130:	2800      	cmp	r0, #0
 8007132:	d00b      	beq.n	800714c <powf+0x84>
 8007134:	1c29      	adds	r1, r5, #0
 8007136:	1c28      	adds	r0, r5, #0
 8007138:	f7fa f91c 	bl	8001374 <__aeabi_fcmpun>
 800713c:	2800      	cmp	r0, #0
 800713e:	d0e6      	beq.n	800710e <powf+0x46>
 8007140:	f7ff ff98 	bl	8007074 <__errno>
 8007144:	2321      	movs	r3, #33	@ 0x21
 8007146:	6003      	str	r3, [r0, #0]
 8007148:	1c28      	adds	r0, r5, #0
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	2100      	movs	r1, #0
 800714e:	1c28      	adds	r0, r5, #0
 8007150:	f7f9 f964 	bl	800041c <__aeabi_fcmpeq>
 8007154:	2800      	cmp	r0, #0
 8007156:	d0f7      	beq.n	8007148 <powf+0x80>
 8007158:	1c30      	adds	r0, r6, #0
 800715a:	f000 f825 	bl	80071a8 <finitef>
 800715e:	2800      	cmp	r0, #0
 8007160:	d0f2      	beq.n	8007148 <powf+0x80>
 8007162:	1c20      	adds	r0, r4, #0
 8007164:	f000 f820 	bl	80071a8 <finitef>
 8007168:	e7cf      	b.n	800710a <powf+0x42>
 800716a:	25fe      	movs	r5, #254	@ 0xfe
 800716c:	05ad      	lsls	r5, r5, #22
 800716e:	e7eb      	b.n	8007148 <powf+0x80>

08007170 <sqrtf>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	1c05      	adds	r5, r0, #0
 8007174:	f000 f822 	bl	80071bc <__ieee754_sqrtf>
 8007178:	1c29      	adds	r1, r5, #0
 800717a:	1c04      	adds	r4, r0, #0
 800717c:	1c28      	adds	r0, r5, #0
 800717e:	f7fa f8f9 	bl	8001374 <__aeabi_fcmpun>
 8007182:	2800      	cmp	r0, #0
 8007184:	d10e      	bne.n	80071a4 <sqrtf+0x34>
 8007186:	2100      	movs	r1, #0
 8007188:	1c28      	adds	r0, r5, #0
 800718a:	f7f9 f94d 	bl	8000428 <__aeabi_fcmplt>
 800718e:	2800      	cmp	r0, #0
 8007190:	d008      	beq.n	80071a4 <sqrtf+0x34>
 8007192:	f7ff ff6f 	bl	8007074 <__errno>
 8007196:	2321      	movs	r3, #33	@ 0x21
 8007198:	2100      	movs	r1, #0
 800719a:	6003      	str	r3, [r0, #0]
 800719c:	1c08      	adds	r0, r1, #0
 800719e:	f7f9 fb5d 	bl	800085c <__aeabi_fdiv>
 80071a2:	1c04      	adds	r4, r0, #0
 80071a4:	1c20      	adds	r0, r4, #0
 80071a6:	bd70      	pop	{r4, r5, r6, pc}

080071a8 <finitef>:
 80071a8:	22ff      	movs	r2, #255	@ 0xff
 80071aa:	0043      	lsls	r3, r0, #1
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	2001      	movs	r0, #1
 80071b0:	05d2      	lsls	r2, r2, #23
 80071b2:	4293      	cmp	r3, r2
 80071b4:	db00      	blt.n	80071b8 <finitef+0x10>
 80071b6:	2000      	movs	r0, #0
 80071b8:	4770      	bx	lr
	...

080071bc <__ieee754_sqrtf>:
 80071bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071be:	21ff      	movs	r1, #255	@ 0xff
 80071c0:	0042      	lsls	r2, r0, #1
 80071c2:	0003      	movs	r3, r0
 80071c4:	1c04      	adds	r4, r0, #0
 80071c6:	0852      	lsrs	r2, r2, #1
 80071c8:	05c9      	lsls	r1, r1, #23
 80071ca:	428a      	cmp	r2, r1
 80071cc:	d309      	bcc.n	80071e2 <__ieee754_sqrtf+0x26>
 80071ce:	1c01      	adds	r1, r0, #0
 80071d0:	f7f9 fd12 	bl	8000bf8 <__aeabi_fmul>
 80071d4:	1c01      	adds	r1, r0, #0
 80071d6:	1c20      	adds	r0, r4, #0
 80071d8:	f7f9 f94e 	bl	8000478 <__aeabi_fadd>
 80071dc:	1c04      	adds	r4, r0, #0
 80071de:	1c20      	adds	r0, r4, #0
 80071e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	d0fb      	beq.n	80071de <__ieee754_sqrtf+0x22>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	da06      	bge.n	80071f8 <__ieee754_sqrtf+0x3c>
 80071ea:	1c01      	adds	r1, r0, #0
 80071ec:	f7f9 fe5e 	bl	8000eac <__aeabi_fsub>
 80071f0:	1c01      	adds	r1, r0, #0
 80071f2:	f7f9 fb33 	bl	800085c <__aeabi_fdiv>
 80071f6:	e7f1      	b.n	80071dc <__ieee754_sqrtf+0x20>
 80071f8:	0002      	movs	r2, r0
 80071fa:	400a      	ands	r2, r1
 80071fc:	4208      	tst	r0, r1
 80071fe:	d040      	beq.n	8007282 <__ieee754_sqrtf+0xc6>
 8007200:	15c1      	asrs	r1, r0, #23
 8007202:	2280      	movs	r2, #128	@ 0x80
 8007204:	000f      	movs	r7, r1
 8007206:	025b      	lsls	r3, r3, #9
 8007208:	0a5b      	lsrs	r3, r3, #9
 800720a:	0412      	lsls	r2, r2, #16
 800720c:	3f7f      	subs	r7, #127	@ 0x7f
 800720e:	4313      	orrs	r3, r2
 8007210:	07c9      	lsls	r1, r1, #31
 8007212:	d400      	bmi.n	8007216 <__ieee754_sqrtf+0x5a>
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	2400      	movs	r4, #0
 8007218:	2180      	movs	r1, #128	@ 0x80
 800721a:	2019      	movs	r0, #25
 800721c:	0026      	movs	r6, r4
 800721e:	107f      	asrs	r7, r7, #1
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	0449      	lsls	r1, r1, #17
 8007224:	1875      	adds	r5, r6, r1
 8007226:	001a      	movs	r2, r3
 8007228:	429d      	cmp	r5, r3
 800722a:	dc02      	bgt.n	8007232 <__ieee754_sqrtf+0x76>
 800722c:	186e      	adds	r6, r5, r1
 800722e:	1b5a      	subs	r2, r3, r5
 8007230:	1864      	adds	r4, r4, r1
 8007232:	3801      	subs	r0, #1
 8007234:	0053      	lsls	r3, r2, #1
 8007236:	0849      	lsrs	r1, r1, #1
 8007238:	2800      	cmp	r0, #0
 800723a:	d1f3      	bne.n	8007224 <__ieee754_sqrtf+0x68>
 800723c:	2a00      	cmp	r2, #0
 800723e:	d019      	beq.n	8007274 <__ieee754_sqrtf+0xb8>
 8007240:	4d16      	ldr	r5, [pc, #88]	@ (800729c <__ieee754_sqrtf+0xe0>)
 8007242:	4e17      	ldr	r6, [pc, #92]	@ (80072a0 <__ieee754_sqrtf+0xe4>)
 8007244:	6828      	ldr	r0, [r5, #0]
 8007246:	6831      	ldr	r1, [r6, #0]
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	f7f9 fe2e 	bl	8000eac <__aeabi_fsub>
 8007250:	1c01      	adds	r1, r0, #0
 8007252:	9801      	ldr	r0, [sp, #4]
 8007254:	f7f9 f8f2 	bl	800043c <__aeabi_fcmple>
 8007258:	2800      	cmp	r0, #0
 800725a:	d00b      	beq.n	8007274 <__ieee754_sqrtf+0xb8>
 800725c:	6828      	ldr	r0, [r5, #0]
 800725e:	6831      	ldr	r1, [r6, #0]
 8007260:	f7f9 f90a 	bl	8000478 <__aeabi_fadd>
 8007264:	682d      	ldr	r5, [r5, #0]
 8007266:	1c01      	adds	r1, r0, #0
 8007268:	1c28      	adds	r0, r5, #0
 800726a:	f7f9 f8dd 	bl	8000428 <__aeabi_fcmplt>
 800726e:	2800      	cmp	r0, #0
 8007270:	d010      	beq.n	8007294 <__ieee754_sqrtf+0xd8>
 8007272:	3402      	adds	r4, #2
 8007274:	23fc      	movs	r3, #252	@ 0xfc
 8007276:	1064      	asrs	r4, r4, #1
 8007278:	059b      	lsls	r3, r3, #22
 800727a:	18e3      	adds	r3, r4, r3
 800727c:	05fc      	lsls	r4, r7, #23
 800727e:	18e4      	adds	r4, r4, r3
 8007280:	e7ad      	b.n	80071de <__ieee754_sqrtf+0x22>
 8007282:	2080      	movs	r0, #128	@ 0x80
 8007284:	0400      	lsls	r0, r0, #16
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	0011      	movs	r1, r2
 800728a:	3201      	adds	r2, #1
 800728c:	4203      	tst	r3, r0
 800728e:	d0fa      	beq.n	8007286 <__ieee754_sqrtf+0xca>
 8007290:	4249      	negs	r1, r1
 8007292:	e7b6      	b.n	8007202 <__ieee754_sqrtf+0x46>
 8007294:	2301      	movs	r3, #1
 8007296:	3401      	adds	r4, #1
 8007298:	439c      	bics	r4, r3
 800729a:	e7eb      	b.n	8007274 <__ieee754_sqrtf+0xb8>
 800729c:	08007ce8 	.word	0x08007ce8
 80072a0:	08007ce4 	.word	0x08007ce4

080072a4 <__ieee754_powf>:
 80072a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072a6:	b08b      	sub	sp, #44	@ 0x2c
 80072a8:	9101      	str	r1, [sp, #4]
 80072aa:	9f01      	ldr	r7, [sp, #4]
 80072ac:	1c04      	adds	r4, r0, #0
 80072ae:	007b      	lsls	r3, r7, #1
 80072b0:	9004      	str	r0, [sp, #16]
 80072b2:	085e      	lsrs	r6, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10d      	bne.n	80072d4 <__ieee754_powf+0x30>
 80072b8:	2380      	movs	r3, #128	@ 0x80
 80072ba:	03db      	lsls	r3, r3, #15
 80072bc:	4043      	eors	r3, r0
 80072be:	4a88      	ldr	r2, [pc, #544]	@ (80074e0 <__ieee754_powf+0x23c>)
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d800      	bhi.n	80072c8 <__ieee754_powf+0x24>
 80072c6:	e2f2      	b.n	80078ae <__ieee754_powf+0x60a>
 80072c8:	9901      	ldr	r1, [sp, #4]
 80072ca:	1c20      	adds	r0, r4, #0
 80072cc:	f7f9 f8d4 	bl	8000478 <__aeabi_fadd>
 80072d0:	b00b      	add	sp, #44	@ 0x2c
 80072d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d4:	23ff      	movs	r3, #255	@ 0xff
 80072d6:	22fe      	movs	r2, #254	@ 0xfe
 80072d8:	0045      	lsls	r5, r0, #1
 80072da:	086d      	lsrs	r5, r5, #1
 80072dc:	05db      	lsls	r3, r3, #23
 80072de:	0592      	lsls	r2, r2, #22
 80072e0:	429d      	cmp	r5, r3
 80072e2:	d801      	bhi.n	80072e8 <__ieee754_powf+0x44>
 80072e4:	429e      	cmp	r6, r3
 80072e6:	d906      	bls.n	80072f6 <__ieee754_powf+0x52>
 80072e8:	4294      	cmp	r4, r2
 80072ea:	d1ed      	bne.n	80072c8 <__ieee754_powf+0x24>
 80072ec:	2380      	movs	r3, #128	@ 0x80
 80072ee:	9a01      	ldr	r2, [sp, #4]
 80072f0:	03db      	lsls	r3, r3, #15
 80072f2:	4053      	eors	r3, r2
 80072f4:	e7e3      	b.n	80072be <__ieee754_powf+0x1a>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	da24      	bge.n	8007344 <__ieee754_powf+0xa0>
 80072fa:	2197      	movs	r1, #151	@ 0x97
 80072fc:	05c9      	lsls	r1, r1, #23
 80072fe:	428e      	cmp	r6, r1
 8007300:	d300      	bcc.n	8007304 <__ieee754_powf+0x60>
 8007302:	e30d      	b.n	8007920 <__ieee754_powf+0x67c>
 8007304:	4296      	cmp	r6, r2
 8007306:	d333      	bcc.n	8007370 <__ieee754_powf+0xcc>
 8007308:	2296      	movs	r2, #150	@ 0x96
 800730a:	15f3      	asrs	r3, r6, #23
 800730c:	1ad2      	subs	r2, r2, r3
 800730e:	0033      	movs	r3, r6
 8007310:	4113      	asrs	r3, r2
 8007312:	0019      	movs	r1, r3
 8007314:	4091      	lsls	r1, r2
 8007316:	000a      	movs	r2, r1
 8007318:	2100      	movs	r1, #0
 800731a:	9102      	str	r1, [sp, #8]
 800731c:	42b2      	cmp	r2, r6
 800731e:	d104      	bne.n	800732a <__ieee754_powf+0x86>
 8007320:	2201      	movs	r2, #1
 8007322:	4013      	ands	r3, r2
 8007324:	1892      	adds	r2, r2, r2
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	9302      	str	r3, [sp, #8]
 800732a:	23fe      	movs	r3, #254	@ 0xfe
 800732c:	059b      	lsls	r3, r3, #22
 800732e:	429e      	cmp	r6, r3
 8007330:	d120      	bne.n	8007374 <__ieee754_powf+0xd0>
 8007332:	1c20      	adds	r0, r4, #0
 8007334:	2f00      	cmp	r7, #0
 8007336:	dacb      	bge.n	80072d0 <__ieee754_powf+0x2c>
 8007338:	20fe      	movs	r0, #254	@ 0xfe
 800733a:	1c21      	adds	r1, r4, #0
 800733c:	0580      	lsls	r0, r0, #22
 800733e:	f7f9 fa8d 	bl	800085c <__aeabi_fdiv>
 8007342:	e7c5      	b.n	80072d0 <__ieee754_powf+0x2c>
 8007344:	2100      	movs	r1, #0
 8007346:	9102      	str	r1, [sp, #8]
 8007348:	429e      	cmp	r6, r3
 800734a:	d1ee      	bne.n	800732a <__ieee754_powf+0x86>
 800734c:	4295      	cmp	r5, r2
 800734e:	d100      	bne.n	8007352 <__ieee754_powf+0xae>
 8007350:	e2ad      	b.n	80078ae <__ieee754_powf+0x60a>
 8007352:	d904      	bls.n	800735e <__ieee754_powf+0xba>
 8007354:	9801      	ldr	r0, [sp, #4]
 8007356:	2f00      	cmp	r7, #0
 8007358:	daba      	bge.n	80072d0 <__ieee754_powf+0x2c>
 800735a:	2000      	movs	r0, #0
 800735c:	e7b8      	b.n	80072d0 <__ieee754_powf+0x2c>
 800735e:	2f00      	cmp	r7, #0
 8007360:	dafb      	bge.n	800735a <__ieee754_powf+0xb6>
 8007362:	2280      	movs	r2, #128	@ 0x80
 8007364:	0612      	lsls	r2, r2, #24
 8007366:	4694      	mov	ip, r2
 8007368:	9b01      	ldr	r3, [sp, #4]
 800736a:	4463      	add	r3, ip
 800736c:	0018      	movs	r0, r3
 800736e:	e7af      	b.n	80072d0 <__ieee754_powf+0x2c>
 8007370:	2300      	movs	r3, #0
 8007372:	9302      	str	r3, [sp, #8]
 8007374:	2380      	movs	r3, #128	@ 0x80
 8007376:	05db      	lsls	r3, r3, #23
 8007378:	429f      	cmp	r7, r3
 800737a:	d104      	bne.n	8007386 <__ieee754_powf+0xe2>
 800737c:	1c21      	adds	r1, r4, #0
 800737e:	1c20      	adds	r0, r4, #0
 8007380:	f7f9 fc3a 	bl	8000bf8 <__aeabi_fmul>
 8007384:	e7a4      	b.n	80072d0 <__ieee754_powf+0x2c>
 8007386:	23fc      	movs	r3, #252	@ 0xfc
 8007388:	059b      	lsls	r3, r3, #22
 800738a:	429f      	cmp	r7, r3
 800738c:	d000      	beq.n	8007390 <__ieee754_powf+0xec>
 800738e:	e2cc      	b.n	800792a <__ieee754_powf+0x686>
 8007390:	2c00      	cmp	r4, #0
 8007392:	da00      	bge.n	8007396 <__ieee754_powf+0xf2>
 8007394:	e2c9      	b.n	800792a <__ieee754_powf+0x686>
 8007396:	1c20      	adds	r0, r4, #0
 8007398:	f7ff ff10 	bl	80071bc <__ieee754_sqrtf>
 800739c:	e798      	b.n	80072d0 <__ieee754_powf+0x2c>
 800739e:	9b02      	ldr	r3, [sp, #8]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d000      	beq.n	80073a6 <__ieee754_powf+0x102>
 80073a4:	e794      	b.n	80072d0 <__ieee754_powf+0x2c>
 80073a6:	2380      	movs	r3, #128	@ 0x80
 80073a8:	061b      	lsls	r3, r3, #24
 80073aa:	18c0      	adds	r0, r0, r3
 80073ac:	e790      	b.n	80072d0 <__ieee754_powf+0x2c>
 80073ae:	0fe3      	lsrs	r3, r4, #31
 80073b0:	3b01      	subs	r3, #1
 80073b2:	9305      	str	r3, [sp, #20]
 80073b4:	9a05      	ldr	r2, [sp, #20]
 80073b6:	9b02      	ldr	r3, [sp, #8]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	d102      	bne.n	80073c2 <__ieee754_powf+0x11e>
 80073bc:	1c21      	adds	r1, r4, #0
 80073be:	1c20      	adds	r0, r4, #0
 80073c0:	e2d2      	b.n	8007968 <__ieee754_powf+0x6c4>
 80073c2:	239a      	movs	r3, #154	@ 0x9a
 80073c4:	05db      	lsls	r3, r3, #23
 80073c6:	429e      	cmp	r6, r3
 80073c8:	d800      	bhi.n	80073cc <__ieee754_powf+0x128>
 80073ca:	e097      	b.n	80074fc <__ieee754_powf+0x258>
 80073cc:	4b45      	ldr	r3, [pc, #276]	@ (80074e4 <__ieee754_powf+0x240>)
 80073ce:	429d      	cmp	r5, r3
 80073d0:	d805      	bhi.n	80073de <__ieee754_powf+0x13a>
 80073d2:	2f00      	cmp	r7, #0
 80073d4:	da08      	bge.n	80073e8 <__ieee754_powf+0x144>
 80073d6:	2000      	movs	r0, #0
 80073d8:	f000 fb42 	bl	8007a60 <__math_oflowf>
 80073dc:	e778      	b.n	80072d0 <__ieee754_powf+0x2c>
 80073de:	4b42      	ldr	r3, [pc, #264]	@ (80074e8 <__ieee754_powf+0x244>)
 80073e0:	429d      	cmp	r5, r3
 80073e2:	d905      	bls.n	80073f0 <__ieee754_powf+0x14c>
 80073e4:	2f00      	cmp	r7, #0
 80073e6:	dcf6      	bgt.n	80073d6 <__ieee754_powf+0x132>
 80073e8:	2000      	movs	r0, #0
 80073ea:	f000 fb33 	bl	8007a54 <__math_uflowf>
 80073ee:	e76f      	b.n	80072d0 <__ieee754_powf+0x2c>
 80073f0:	21fe      	movs	r1, #254	@ 0xfe
 80073f2:	0589      	lsls	r1, r1, #22
 80073f4:	f7f9 fd5a 	bl	8000eac <__aeabi_fsub>
 80073f8:	493c      	ldr	r1, [pc, #240]	@ (80074ec <__ieee754_powf+0x248>)
 80073fa:	1c04      	adds	r4, r0, #0
 80073fc:	f7f9 fbfc 	bl	8000bf8 <__aeabi_fmul>
 8007400:	493b      	ldr	r1, [pc, #236]	@ (80074f0 <__ieee754_powf+0x24c>)
 8007402:	1c05      	adds	r5, r0, #0
 8007404:	1c20      	adds	r0, r4, #0
 8007406:	f7f9 fbf7 	bl	8000bf8 <__aeabi_fmul>
 800740a:	21fa      	movs	r1, #250	@ 0xfa
 800740c:	1c06      	adds	r6, r0, #0
 800740e:	0589      	lsls	r1, r1, #22
 8007410:	1c20      	adds	r0, r4, #0
 8007412:	f7f9 fbf1 	bl	8000bf8 <__aeabi_fmul>
 8007416:	1c01      	adds	r1, r0, #0
 8007418:	4836      	ldr	r0, [pc, #216]	@ (80074f4 <__ieee754_powf+0x250>)
 800741a:	f7f9 fd47 	bl	8000eac <__aeabi_fsub>
 800741e:	1c21      	adds	r1, r4, #0
 8007420:	f7f9 fbea 	bl	8000bf8 <__aeabi_fmul>
 8007424:	1c01      	adds	r1, r0, #0
 8007426:	20fc      	movs	r0, #252	@ 0xfc
 8007428:	0580      	lsls	r0, r0, #22
 800742a:	f7f9 fd3f 	bl	8000eac <__aeabi_fsub>
 800742e:	1c21      	adds	r1, r4, #0
 8007430:	1c07      	adds	r7, r0, #0
 8007432:	1c20      	adds	r0, r4, #0
 8007434:	f7f9 fbe0 	bl	8000bf8 <__aeabi_fmul>
 8007438:	1c01      	adds	r1, r0, #0
 800743a:	1c38      	adds	r0, r7, #0
 800743c:	f7f9 fbdc 	bl	8000bf8 <__aeabi_fmul>
 8007440:	492d      	ldr	r1, [pc, #180]	@ (80074f8 <__ieee754_powf+0x254>)
 8007442:	f7f9 fbd9 	bl	8000bf8 <__aeabi_fmul>
 8007446:	1c01      	adds	r1, r0, #0
 8007448:	1c30      	adds	r0, r6, #0
 800744a:	f7f9 fd2f 	bl	8000eac <__aeabi_fsub>
 800744e:	1c01      	adds	r1, r0, #0
 8007450:	1c06      	adds	r6, r0, #0
 8007452:	1c28      	adds	r0, r5, #0
 8007454:	f7f9 f810 	bl	8000478 <__aeabi_fadd>
 8007458:	0b04      	lsrs	r4, r0, #12
 800745a:	0324      	lsls	r4, r4, #12
 800745c:	1c29      	adds	r1, r5, #0
 800745e:	1c20      	adds	r0, r4, #0
 8007460:	f7f9 fd24 	bl	8000eac <__aeabi_fsub>
 8007464:	1c01      	adds	r1, r0, #0
 8007466:	1c30      	adds	r0, r6, #0
 8007468:	f7f9 fd20 	bl	8000eac <__aeabi_fsub>
 800746c:	9b02      	ldr	r3, [sp, #8]
 800746e:	9a05      	ldr	r2, [sp, #20]
 8007470:	3b01      	subs	r3, #1
 8007472:	1c06      	adds	r6, r0, #0
 8007474:	4313      	orrs	r3, r2
 8007476:	d100      	bne.n	800747a <__ieee754_powf+0x1d6>
 8007478:	e14d      	b.n	8007716 <__ieee754_powf+0x472>
 800747a:	27fe      	movs	r7, #254	@ 0xfe
 800747c:	05bf      	lsls	r7, r7, #22
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	9801      	ldr	r0, [sp, #4]
 8007482:	0b1d      	lsrs	r5, r3, #12
 8007484:	032d      	lsls	r5, r5, #12
 8007486:	1c29      	adds	r1, r5, #0
 8007488:	f7f9 fd10 	bl	8000eac <__aeabi_fsub>
 800748c:	1c21      	adds	r1, r4, #0
 800748e:	f7f9 fbb3 	bl	8000bf8 <__aeabi_fmul>
 8007492:	9901      	ldr	r1, [sp, #4]
 8007494:	9002      	str	r0, [sp, #8]
 8007496:	1c30      	adds	r0, r6, #0
 8007498:	f7f9 fbae 	bl	8000bf8 <__aeabi_fmul>
 800749c:	1c01      	adds	r1, r0, #0
 800749e:	9802      	ldr	r0, [sp, #8]
 80074a0:	f7f8 ffea 	bl	8000478 <__aeabi_fadd>
 80074a4:	1c29      	adds	r1, r5, #0
 80074a6:	9001      	str	r0, [sp, #4]
 80074a8:	1c20      	adds	r0, r4, #0
 80074aa:	f7f9 fba5 	bl	8000bf8 <__aeabi_fmul>
 80074ae:	1c01      	adds	r1, r0, #0
 80074b0:	1c04      	adds	r4, r0, #0
 80074b2:	9801      	ldr	r0, [sp, #4]
 80074b4:	f7f8 ffe0 	bl	8000478 <__aeabi_fadd>
 80074b8:	0043      	lsls	r3, r0, #1
 80074ba:	1c06      	adds	r6, r0, #0
 80074bc:	9002      	str	r0, [sp, #8]
 80074be:	085b      	lsrs	r3, r3, #1
 80074c0:	2800      	cmp	r0, #0
 80074c2:	dc00      	bgt.n	80074c6 <__ieee754_powf+0x222>
 80074c4:	e13d      	b.n	8007742 <__ieee754_powf+0x49e>
 80074c6:	2286      	movs	r2, #134	@ 0x86
 80074c8:	05d2      	lsls	r2, r2, #23
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d800      	bhi.n	80074d0 <__ieee754_powf+0x22c>
 80074ce:	e124      	b.n	800771a <__ieee754_powf+0x476>
 80074d0:	2100      	movs	r1, #0
 80074d2:	1c38      	adds	r0, r7, #0
 80074d4:	f7f8 ffa8 	bl	8000428 <__aeabi_fcmplt>
 80074d8:	1e43      	subs	r3, r0, #1
 80074da:	4198      	sbcs	r0, r3
 80074dc:	e77c      	b.n	80073d8 <__ieee754_powf+0x134>
 80074de:	46c0      	nop			@ (mov r8, r8)
 80074e0:	ff800000 	.word	0xff800000
 80074e4:	3f7ffff3 	.word	0x3f7ffff3
 80074e8:	3f800007 	.word	0x3f800007
 80074ec:	3fb8aa00 	.word	0x3fb8aa00
 80074f0:	36eca570 	.word	0x36eca570
 80074f4:	3eaaaaab 	.word	0x3eaaaaab
 80074f8:	3fb8aa3b 	.word	0x3fb8aa3b
 80074fc:	23ff      	movs	r3, #255	@ 0xff
 80074fe:	05db      	lsls	r3, r3, #23
 8007500:	2200      	movs	r2, #0
 8007502:	4223      	tst	r3, r4
 8007504:	d106      	bne.n	8007514 <__ieee754_powf+0x270>
 8007506:	2197      	movs	r1, #151	@ 0x97
 8007508:	05c9      	lsls	r1, r1, #23
 800750a:	f7f9 fb75 	bl	8000bf8 <__aeabi_fmul>
 800750e:	2218      	movs	r2, #24
 8007510:	9003      	str	r0, [sp, #12]
 8007512:	4252      	negs	r2, r2
 8007514:	24fe      	movs	r4, #254	@ 0xfe
 8007516:	9b03      	ldr	r3, [sp, #12]
 8007518:	05a4      	lsls	r4, r4, #22
 800751a:	15db      	asrs	r3, r3, #23
 800751c:	3b7f      	subs	r3, #127	@ 0x7f
 800751e:	189b      	adds	r3, r3, r2
 8007520:	9304      	str	r3, [sp, #16]
 8007522:	9b03      	ldr	r3, [sp, #12]
 8007524:	4ae3      	ldr	r2, [pc, #908]	@ (80078b4 <__ieee754_powf+0x610>)
 8007526:	025b      	lsls	r3, r3, #9
 8007528:	0a5b      	lsrs	r3, r3, #9
 800752a:	2500      	movs	r5, #0
 800752c:	431c      	orrs	r4, r3
 800752e:	4293      	cmp	r3, r2
 8007530:	dd09      	ble.n	8007546 <__ieee754_powf+0x2a2>
 8007532:	4ae1      	ldr	r2, [pc, #900]	@ (80078b8 <__ieee754_powf+0x614>)
 8007534:	3501      	adds	r5, #1
 8007536:	4293      	cmp	r3, r2
 8007538:	dd05      	ble.n	8007546 <__ieee754_powf+0x2a2>
 800753a:	9b04      	ldr	r3, [sp, #16]
 800753c:	195b      	adds	r3, r3, r5
 800753e:	2500      	movs	r5, #0
 8007540:	9304      	str	r3, [sp, #16]
 8007542:	4bde      	ldr	r3, [pc, #888]	@ (80078bc <__ieee754_powf+0x618>)
 8007544:	18e4      	adds	r4, r4, r3
 8007546:	4bde      	ldr	r3, [pc, #888]	@ (80078c0 <__ieee754_powf+0x61c>)
 8007548:	00aa      	lsls	r2, r5, #2
 800754a:	58d7      	ldr	r7, [r2, r3]
 800754c:	1c20      	adds	r0, r4, #0
 800754e:	1c39      	adds	r1, r7, #0
 8007550:	9206      	str	r2, [sp, #24]
 8007552:	9409      	str	r4, [sp, #36]	@ 0x24
 8007554:	f7f9 fcaa 	bl	8000eac <__aeabi_fsub>
 8007558:	1c21      	adds	r1, r4, #0
 800755a:	9007      	str	r0, [sp, #28]
 800755c:	1c38      	adds	r0, r7, #0
 800755e:	f7f8 ff8b 	bl	8000478 <__aeabi_fadd>
 8007562:	1c01      	adds	r1, r0, #0
 8007564:	20fe      	movs	r0, #254	@ 0xfe
 8007566:	0580      	lsls	r0, r0, #22
 8007568:	f7f9 f978 	bl	800085c <__aeabi_fdiv>
 800756c:	1c01      	adds	r1, r0, #0
 800756e:	9008      	str	r0, [sp, #32]
 8007570:	9807      	ldr	r0, [sp, #28]
 8007572:	f7f9 fb41 	bl	8000bf8 <__aeabi_fmul>
 8007576:	9003      	str	r0, [sp, #12]
 8007578:	9b03      	ldr	r3, [sp, #12]
 800757a:	2280      	movs	r2, #128	@ 0x80
 800757c:	0b1e      	lsrs	r6, r3, #12
 800757e:	2380      	movs	r3, #128	@ 0x80
 8007580:	1064      	asrs	r4, r4, #1
 8007582:	0592      	lsls	r2, r2, #22
 8007584:	02db      	lsls	r3, r3, #11
 8007586:	4322      	orrs	r2, r4
 8007588:	18d2      	adds	r2, r2, r3
 800758a:	056d      	lsls	r5, r5, #21
 800758c:	1955      	adds	r5, r2, r5
 800758e:	0336      	lsls	r6, r6, #12
 8007590:	1c29      	adds	r1, r5, #0
 8007592:	1c30      	adds	r0, r6, #0
 8007594:	f7f9 fb30 	bl	8000bf8 <__aeabi_fmul>
 8007598:	1c01      	adds	r1, r0, #0
 800759a:	9807      	ldr	r0, [sp, #28]
 800759c:	f7f9 fc86 	bl	8000eac <__aeabi_fsub>
 80075a0:	1c39      	adds	r1, r7, #0
 80075a2:	1c04      	adds	r4, r0, #0
 80075a4:	1c28      	adds	r0, r5, #0
 80075a6:	f7f9 fc81 	bl	8000eac <__aeabi_fsub>
 80075aa:	1c01      	adds	r1, r0, #0
 80075ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075ae:	f7f9 fc7d 	bl	8000eac <__aeabi_fsub>
 80075b2:	1c31      	adds	r1, r6, #0
 80075b4:	f7f9 fb20 	bl	8000bf8 <__aeabi_fmul>
 80075b8:	1c01      	adds	r1, r0, #0
 80075ba:	1c20      	adds	r0, r4, #0
 80075bc:	f7f9 fc76 	bl	8000eac <__aeabi_fsub>
 80075c0:	9908      	ldr	r1, [sp, #32]
 80075c2:	f7f9 fb19 	bl	8000bf8 <__aeabi_fmul>
 80075c6:	9903      	ldr	r1, [sp, #12]
 80075c8:	9007      	str	r0, [sp, #28]
 80075ca:	1c08      	adds	r0, r1, #0
 80075cc:	f7f9 fb14 	bl	8000bf8 <__aeabi_fmul>
 80075d0:	49bc      	ldr	r1, [pc, #752]	@ (80078c4 <__ieee754_powf+0x620>)
 80075d2:	1c04      	adds	r4, r0, #0
 80075d4:	f7f9 fb10 	bl	8000bf8 <__aeabi_fmul>
 80075d8:	49bb      	ldr	r1, [pc, #748]	@ (80078c8 <__ieee754_powf+0x624>)
 80075da:	f7f8 ff4d 	bl	8000478 <__aeabi_fadd>
 80075de:	1c21      	adds	r1, r4, #0
 80075e0:	f7f9 fb0a 	bl	8000bf8 <__aeabi_fmul>
 80075e4:	49b9      	ldr	r1, [pc, #740]	@ (80078cc <__ieee754_powf+0x628>)
 80075e6:	f7f8 ff47 	bl	8000478 <__aeabi_fadd>
 80075ea:	1c21      	adds	r1, r4, #0
 80075ec:	f7f9 fb04 	bl	8000bf8 <__aeabi_fmul>
 80075f0:	49b7      	ldr	r1, [pc, #732]	@ (80078d0 <__ieee754_powf+0x62c>)
 80075f2:	f7f8 ff41 	bl	8000478 <__aeabi_fadd>
 80075f6:	1c21      	adds	r1, r4, #0
 80075f8:	f7f9 fafe 	bl	8000bf8 <__aeabi_fmul>
 80075fc:	49b5      	ldr	r1, [pc, #724]	@ (80078d4 <__ieee754_powf+0x630>)
 80075fe:	f7f8 ff3b 	bl	8000478 <__aeabi_fadd>
 8007602:	1c21      	adds	r1, r4, #0
 8007604:	f7f9 faf8 	bl	8000bf8 <__aeabi_fmul>
 8007608:	49b3      	ldr	r1, [pc, #716]	@ (80078d8 <__ieee754_powf+0x634>)
 800760a:	f7f8 ff35 	bl	8000478 <__aeabi_fadd>
 800760e:	1c21      	adds	r1, r4, #0
 8007610:	1c05      	adds	r5, r0, #0
 8007612:	1c20      	adds	r0, r4, #0
 8007614:	f7f9 faf0 	bl	8000bf8 <__aeabi_fmul>
 8007618:	1c01      	adds	r1, r0, #0
 800761a:	1c28      	adds	r0, r5, #0
 800761c:	f7f9 faec 	bl	8000bf8 <__aeabi_fmul>
 8007620:	1c31      	adds	r1, r6, #0
 8007622:	1c04      	adds	r4, r0, #0
 8007624:	9803      	ldr	r0, [sp, #12]
 8007626:	f7f8 ff27 	bl	8000478 <__aeabi_fadd>
 800762a:	9907      	ldr	r1, [sp, #28]
 800762c:	f7f9 fae4 	bl	8000bf8 <__aeabi_fmul>
 8007630:	1c21      	adds	r1, r4, #0
 8007632:	f7f8 ff21 	bl	8000478 <__aeabi_fadd>
 8007636:	1c31      	adds	r1, r6, #0
 8007638:	9008      	str	r0, [sp, #32]
 800763a:	1c30      	adds	r0, r6, #0
 800763c:	f7f9 fadc 	bl	8000bf8 <__aeabi_fmul>
 8007640:	49a6      	ldr	r1, [pc, #664]	@ (80078dc <__ieee754_powf+0x638>)
 8007642:	1c07      	adds	r7, r0, #0
 8007644:	f7f8 ff18 	bl	8000478 <__aeabi_fadd>
 8007648:	9908      	ldr	r1, [sp, #32]
 800764a:	f7f8 ff15 	bl	8000478 <__aeabi_fadd>
 800764e:	0b04      	lsrs	r4, r0, #12
 8007650:	0324      	lsls	r4, r4, #12
 8007652:	1c21      	adds	r1, r4, #0
 8007654:	1c30      	adds	r0, r6, #0
 8007656:	f7f9 facf 	bl	8000bf8 <__aeabi_fmul>
 800765a:	49a0      	ldr	r1, [pc, #640]	@ (80078dc <__ieee754_powf+0x638>)
 800765c:	1c05      	adds	r5, r0, #0
 800765e:	1c20      	adds	r0, r4, #0
 8007660:	f7f9 fc24 	bl	8000eac <__aeabi_fsub>
 8007664:	1c39      	adds	r1, r7, #0
 8007666:	f7f9 fc21 	bl	8000eac <__aeabi_fsub>
 800766a:	1c01      	adds	r1, r0, #0
 800766c:	9808      	ldr	r0, [sp, #32]
 800766e:	f7f9 fc1d 	bl	8000eac <__aeabi_fsub>
 8007672:	9903      	ldr	r1, [sp, #12]
 8007674:	f7f9 fac0 	bl	8000bf8 <__aeabi_fmul>
 8007678:	1c21      	adds	r1, r4, #0
 800767a:	1c06      	adds	r6, r0, #0
 800767c:	9807      	ldr	r0, [sp, #28]
 800767e:	f7f9 fabb 	bl	8000bf8 <__aeabi_fmul>
 8007682:	1c01      	adds	r1, r0, #0
 8007684:	1c30      	adds	r0, r6, #0
 8007686:	f7f8 fef7 	bl	8000478 <__aeabi_fadd>
 800768a:	1c06      	adds	r6, r0, #0
 800768c:	1c01      	adds	r1, r0, #0
 800768e:	1c28      	adds	r0, r5, #0
 8007690:	f7f8 fef2 	bl	8000478 <__aeabi_fadd>
 8007694:	0b04      	lsrs	r4, r0, #12
 8007696:	0324      	lsls	r4, r4, #12
 8007698:	4991      	ldr	r1, [pc, #580]	@ (80078e0 <__ieee754_powf+0x63c>)
 800769a:	1c20      	adds	r0, r4, #0
 800769c:	f7f9 faac 	bl	8000bf8 <__aeabi_fmul>
 80076a0:	1c29      	adds	r1, r5, #0
 80076a2:	9003      	str	r0, [sp, #12]
 80076a4:	1c20      	adds	r0, r4, #0
 80076a6:	f7f9 fc01 	bl	8000eac <__aeabi_fsub>
 80076aa:	1c01      	adds	r1, r0, #0
 80076ac:	1c30      	adds	r0, r6, #0
 80076ae:	f7f9 fbfd 	bl	8000eac <__aeabi_fsub>
 80076b2:	498c      	ldr	r1, [pc, #560]	@ (80078e4 <__ieee754_powf+0x640>)
 80076b4:	f7f9 faa0 	bl	8000bf8 <__aeabi_fmul>
 80076b8:	498b      	ldr	r1, [pc, #556]	@ (80078e8 <__ieee754_powf+0x644>)
 80076ba:	1c05      	adds	r5, r0, #0
 80076bc:	1c20      	adds	r0, r4, #0
 80076be:	f7f9 fa9b 	bl	8000bf8 <__aeabi_fmul>
 80076c2:	1c01      	adds	r1, r0, #0
 80076c4:	1c28      	adds	r0, r5, #0
 80076c6:	f7f8 fed7 	bl	8000478 <__aeabi_fadd>
 80076ca:	9a06      	ldr	r2, [sp, #24]
 80076cc:	4b87      	ldr	r3, [pc, #540]	@ (80078ec <__ieee754_powf+0x648>)
 80076ce:	58d1      	ldr	r1, [r2, r3]
 80076d0:	f7f8 fed2 	bl	8000478 <__aeabi_fadd>
 80076d4:	1c05      	adds	r5, r0, #0
 80076d6:	9804      	ldr	r0, [sp, #16]
 80076d8:	f7f9 fe62 	bl	80013a0 <__aeabi_i2f>
 80076dc:	4b84      	ldr	r3, [pc, #528]	@ (80078f0 <__ieee754_powf+0x64c>)
 80076de:	9a06      	ldr	r2, [sp, #24]
 80076e0:	1c06      	adds	r6, r0, #0
 80076e2:	58d7      	ldr	r7, [r2, r3]
 80076e4:	1c29      	adds	r1, r5, #0
 80076e6:	9803      	ldr	r0, [sp, #12]
 80076e8:	f7f8 fec6 	bl	8000478 <__aeabi_fadd>
 80076ec:	1c39      	adds	r1, r7, #0
 80076ee:	f7f8 fec3 	bl	8000478 <__aeabi_fadd>
 80076f2:	1c31      	adds	r1, r6, #0
 80076f4:	f7f8 fec0 	bl	8000478 <__aeabi_fadd>
 80076f8:	0b04      	lsrs	r4, r0, #12
 80076fa:	0324      	lsls	r4, r4, #12
 80076fc:	1c31      	adds	r1, r6, #0
 80076fe:	1c20      	adds	r0, r4, #0
 8007700:	f7f9 fbd4 	bl	8000eac <__aeabi_fsub>
 8007704:	1c39      	adds	r1, r7, #0
 8007706:	f7f9 fbd1 	bl	8000eac <__aeabi_fsub>
 800770a:	9903      	ldr	r1, [sp, #12]
 800770c:	f7f9 fbce 	bl	8000eac <__aeabi_fsub>
 8007710:	1c01      	adds	r1, r0, #0
 8007712:	1c28      	adds	r0, r5, #0
 8007714:	e6a8      	b.n	8007468 <__ieee754_powf+0x1c4>
 8007716:	4f77      	ldr	r7, [pc, #476]	@ (80078f4 <__ieee754_powf+0x650>)
 8007718:	e6b1      	b.n	800747e <__ieee754_powf+0x1da>
 800771a:	4293      	cmp	r3, r2
 800771c:	d126      	bne.n	800776c <__ieee754_powf+0x4c8>
 800771e:	4976      	ldr	r1, [pc, #472]	@ (80078f8 <__ieee754_powf+0x654>)
 8007720:	9801      	ldr	r0, [sp, #4]
 8007722:	f7f8 fea9 	bl	8000478 <__aeabi_fadd>
 8007726:	1c21      	adds	r1, r4, #0
 8007728:	1c05      	adds	r5, r0, #0
 800772a:	1c30      	adds	r0, r6, #0
 800772c:	f7f9 fbbe 	bl	8000eac <__aeabi_fsub>
 8007730:	1c01      	adds	r1, r0, #0
 8007732:	1c28      	adds	r0, r5, #0
 8007734:	f7f8 fe8c 	bl	8000450 <__aeabi_fcmpgt>
 8007738:	2800      	cmp	r0, #0
 800773a:	d000      	beq.n	800773e <__ieee754_powf+0x49a>
 800773c:	e6c8      	b.n	80074d0 <__ieee754_powf+0x22c>
 800773e:	2386      	movs	r3, #134	@ 0x86
 8007740:	e01a      	b.n	8007778 <__ieee754_powf+0x4d4>
 8007742:	4a6e      	ldr	r2, [pc, #440]	@ (80078fc <__ieee754_powf+0x658>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d906      	bls.n	8007756 <__ieee754_powf+0x4b2>
 8007748:	2100      	movs	r1, #0
 800774a:	1c38      	adds	r0, r7, #0
 800774c:	f7f8 fe6c 	bl	8000428 <__aeabi_fcmplt>
 8007750:	1e43      	subs	r3, r0, #1
 8007752:	4198      	sbcs	r0, r3
 8007754:	e649      	b.n	80073ea <__ieee754_powf+0x146>
 8007756:	4293      	cmp	r3, r2
 8007758:	d108      	bne.n	800776c <__ieee754_powf+0x4c8>
 800775a:	1c21      	adds	r1, r4, #0
 800775c:	f7f9 fba6 	bl	8000eac <__aeabi_fsub>
 8007760:	9901      	ldr	r1, [sp, #4]
 8007762:	f7f8 fe7f 	bl	8000464 <__aeabi_fcmpge>
 8007766:	2800      	cmp	r0, #0
 8007768:	d0e9      	beq.n	800773e <__ieee754_powf+0x49a>
 800776a:	e7ed      	b.n	8007748 <__ieee754_powf+0x4a4>
 800776c:	22fc      	movs	r2, #252	@ 0xfc
 800776e:	2500      	movs	r5, #0
 8007770:	0592      	lsls	r2, r2, #22
 8007772:	4293      	cmp	r3, r2
 8007774:	d91a      	bls.n	80077ac <__ieee754_powf+0x508>
 8007776:	15db      	asrs	r3, r3, #23
 8007778:	2580      	movs	r5, #128	@ 0x80
 800777a:	042d      	lsls	r5, r5, #16
 800777c:	002a      	movs	r2, r5
 800777e:	3b7e      	subs	r3, #126	@ 0x7e
 8007780:	411a      	asrs	r2, r3
 8007782:	1993      	adds	r3, r2, r6
 8007784:	15da      	asrs	r2, r3, #23
 8007786:	494d      	ldr	r1, [pc, #308]	@ (80078bc <__ieee754_powf+0x618>)
 8007788:	b2d2      	uxtb	r2, r2
 800778a:	3a7f      	subs	r2, #127	@ 0x7f
 800778c:	4111      	asrs	r1, r2
 800778e:	4019      	ands	r1, r3
 8007790:	025b      	lsls	r3, r3, #9
 8007792:	0a5b      	lsrs	r3, r3, #9
 8007794:	431d      	orrs	r5, r3
 8007796:	2317      	movs	r3, #23
 8007798:	1a9b      	subs	r3, r3, r2
 800779a:	411d      	asrs	r5, r3
 800779c:	9b02      	ldr	r3, [sp, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	da00      	bge.n	80077a4 <__ieee754_powf+0x500>
 80077a2:	426d      	negs	r5, r5
 80077a4:	1c20      	adds	r0, r4, #0
 80077a6:	f7f9 fb81 	bl	8000eac <__aeabi_fsub>
 80077aa:	1c04      	adds	r4, r0, #0
 80077ac:	9901      	ldr	r1, [sp, #4]
 80077ae:	1c20      	adds	r0, r4, #0
 80077b0:	f7f8 fe62 	bl	8000478 <__aeabi_fadd>
 80077b4:	0b00      	lsrs	r0, r0, #12
 80077b6:	0303      	lsls	r3, r0, #12
 80077b8:	1c18      	adds	r0, r3, #0
 80077ba:	4951      	ldr	r1, [pc, #324]	@ (8007900 <__ieee754_powf+0x65c>)
 80077bc:	001e      	movs	r6, r3
 80077be:	f7f9 fa1b 	bl	8000bf8 <__aeabi_fmul>
 80077c2:	1c21      	adds	r1, r4, #0
 80077c4:	9002      	str	r0, [sp, #8]
 80077c6:	1c30      	adds	r0, r6, #0
 80077c8:	f7f9 fb70 	bl	8000eac <__aeabi_fsub>
 80077cc:	1c01      	adds	r1, r0, #0
 80077ce:	9801      	ldr	r0, [sp, #4]
 80077d0:	f7f9 fb6c 	bl	8000eac <__aeabi_fsub>
 80077d4:	494b      	ldr	r1, [pc, #300]	@ (8007904 <__ieee754_powf+0x660>)
 80077d6:	f7f9 fa0f 	bl	8000bf8 <__aeabi_fmul>
 80077da:	494b      	ldr	r1, [pc, #300]	@ (8007908 <__ieee754_powf+0x664>)
 80077dc:	1c04      	adds	r4, r0, #0
 80077de:	1c30      	adds	r0, r6, #0
 80077e0:	f7f9 fa0a 	bl	8000bf8 <__aeabi_fmul>
 80077e4:	1c01      	adds	r1, r0, #0
 80077e6:	1c20      	adds	r0, r4, #0
 80077e8:	f7f8 fe46 	bl	8000478 <__aeabi_fadd>
 80077ec:	1c06      	adds	r6, r0, #0
 80077ee:	1c01      	adds	r1, r0, #0
 80077f0:	9802      	ldr	r0, [sp, #8]
 80077f2:	f7f8 fe41 	bl	8000478 <__aeabi_fadd>
 80077f6:	9902      	ldr	r1, [sp, #8]
 80077f8:	1c04      	adds	r4, r0, #0
 80077fa:	f7f9 fb57 	bl	8000eac <__aeabi_fsub>
 80077fe:	1c01      	adds	r1, r0, #0
 8007800:	1c30      	adds	r0, r6, #0
 8007802:	f7f9 fb53 	bl	8000eac <__aeabi_fsub>
 8007806:	1c21      	adds	r1, r4, #0
 8007808:	9001      	str	r0, [sp, #4]
 800780a:	1c20      	adds	r0, r4, #0
 800780c:	f7f9 f9f4 	bl	8000bf8 <__aeabi_fmul>
 8007810:	493e      	ldr	r1, [pc, #248]	@ (800790c <__ieee754_powf+0x668>)
 8007812:	1c06      	adds	r6, r0, #0
 8007814:	f7f9 f9f0 	bl	8000bf8 <__aeabi_fmul>
 8007818:	493d      	ldr	r1, [pc, #244]	@ (8007910 <__ieee754_powf+0x66c>)
 800781a:	f7f9 fb47 	bl	8000eac <__aeabi_fsub>
 800781e:	1c31      	adds	r1, r6, #0
 8007820:	f7f9 f9ea 	bl	8000bf8 <__aeabi_fmul>
 8007824:	493b      	ldr	r1, [pc, #236]	@ (8007914 <__ieee754_powf+0x670>)
 8007826:	f7f8 fe27 	bl	8000478 <__aeabi_fadd>
 800782a:	1c31      	adds	r1, r6, #0
 800782c:	f7f9 f9e4 	bl	8000bf8 <__aeabi_fmul>
 8007830:	4939      	ldr	r1, [pc, #228]	@ (8007918 <__ieee754_powf+0x674>)
 8007832:	f7f9 fb3b 	bl	8000eac <__aeabi_fsub>
 8007836:	1c31      	adds	r1, r6, #0
 8007838:	f7f9 f9de 	bl	8000bf8 <__aeabi_fmul>
 800783c:	4937      	ldr	r1, [pc, #220]	@ (800791c <__ieee754_powf+0x678>)
 800783e:	f7f8 fe1b 	bl	8000478 <__aeabi_fadd>
 8007842:	1c31      	adds	r1, r6, #0
 8007844:	f7f9 f9d8 	bl	8000bf8 <__aeabi_fmul>
 8007848:	1c01      	adds	r1, r0, #0
 800784a:	1c20      	adds	r0, r4, #0
 800784c:	f7f9 fb2e 	bl	8000eac <__aeabi_fsub>
 8007850:	1c06      	adds	r6, r0, #0
 8007852:	1c01      	adds	r1, r0, #0
 8007854:	1c20      	adds	r0, r4, #0
 8007856:	f7f9 f9cf 	bl	8000bf8 <__aeabi_fmul>
 800785a:	2180      	movs	r1, #128	@ 0x80
 800785c:	9002      	str	r0, [sp, #8]
 800785e:	05c9      	lsls	r1, r1, #23
 8007860:	1c30      	adds	r0, r6, #0
 8007862:	f7f9 fb23 	bl	8000eac <__aeabi_fsub>
 8007866:	1c01      	adds	r1, r0, #0
 8007868:	9802      	ldr	r0, [sp, #8]
 800786a:	f7f8 fff7 	bl	800085c <__aeabi_fdiv>
 800786e:	9901      	ldr	r1, [sp, #4]
 8007870:	1c06      	adds	r6, r0, #0
 8007872:	1c20      	adds	r0, r4, #0
 8007874:	f7f9 f9c0 	bl	8000bf8 <__aeabi_fmul>
 8007878:	9901      	ldr	r1, [sp, #4]
 800787a:	f7f8 fdfd 	bl	8000478 <__aeabi_fadd>
 800787e:	1c01      	adds	r1, r0, #0
 8007880:	1c30      	adds	r0, r6, #0
 8007882:	f7f9 fb13 	bl	8000eac <__aeabi_fsub>
 8007886:	1c21      	adds	r1, r4, #0
 8007888:	f7f9 fb10 	bl	8000eac <__aeabi_fsub>
 800788c:	1c01      	adds	r1, r0, #0
 800788e:	20fe      	movs	r0, #254	@ 0xfe
 8007890:	0580      	lsls	r0, r0, #22
 8007892:	f7f9 fb0b 	bl	8000eac <__aeabi_fsub>
 8007896:	05eb      	lsls	r3, r5, #23
 8007898:	181b      	adds	r3, r3, r0
 800789a:	15da      	asrs	r2, r3, #23
 800789c:	2a00      	cmp	r2, #0
 800789e:	dc04      	bgt.n	80078aa <__ieee754_powf+0x606>
 80078a0:	0029      	movs	r1, r5
 80078a2:	f000 f86b 	bl	800797c <scalbnf>
 80078a6:	1c39      	adds	r1, r7, #0
 80078a8:	e56a      	b.n	8007380 <__ieee754_powf+0xdc>
 80078aa:	1c18      	adds	r0, r3, #0
 80078ac:	e7fb      	b.n	80078a6 <__ieee754_powf+0x602>
 80078ae:	20fe      	movs	r0, #254	@ 0xfe
 80078b0:	0580      	lsls	r0, r0, #22
 80078b2:	e50d      	b.n	80072d0 <__ieee754_powf+0x2c>
 80078b4:	001cc471 	.word	0x001cc471
 80078b8:	005db3d6 	.word	0x005db3d6
 80078bc:	ff800000 	.word	0xff800000
 80078c0:	08007cfc 	.word	0x08007cfc
 80078c4:	3e53f142 	.word	0x3e53f142
 80078c8:	3e6c3255 	.word	0x3e6c3255
 80078cc:	3e8ba305 	.word	0x3e8ba305
 80078d0:	3eaaaaab 	.word	0x3eaaaaab
 80078d4:	3edb6db7 	.word	0x3edb6db7
 80078d8:	3f19999a 	.word	0x3f19999a
 80078dc:	40400000 	.word	0x40400000
 80078e0:	3f763800 	.word	0x3f763800
 80078e4:	3f76384f 	.word	0x3f76384f
 80078e8:	369dc3a0 	.word	0x369dc3a0
 80078ec:	08007cec 	.word	0x08007cec
 80078f0:	08007cf4 	.word	0x08007cf4
 80078f4:	bf800000 	.word	0xbf800000
 80078f8:	3338aa3c 	.word	0x3338aa3c
 80078fc:	43160000 	.word	0x43160000
 8007900:	3f317200 	.word	0x3f317200
 8007904:	3f317218 	.word	0x3f317218
 8007908:	35bfbe8c 	.word	0x35bfbe8c
 800790c:	3331bb4c 	.word	0x3331bb4c
 8007910:	35ddea0e 	.word	0x35ddea0e
 8007914:	388ab355 	.word	0x388ab355
 8007918:	3b360b61 	.word	0x3b360b61
 800791c:	3e2aaaab 	.word	0x3e2aaaab
 8007920:	429e      	cmp	r6, r3
 8007922:	d100      	bne.n	8007926 <__ieee754_powf+0x682>
 8007924:	e512      	b.n	800734c <__ieee754_powf+0xa8>
 8007926:	2302      	movs	r3, #2
 8007928:	9302      	str	r3, [sp, #8]
 800792a:	1c20      	adds	r0, r4, #0
 800792c:	9503      	str	r5, [sp, #12]
 800792e:	f000 f821 	bl	8007974 <fabsf>
 8007932:	22fe      	movs	r2, #254	@ 0xfe
 8007934:	00a3      	lsls	r3, r4, #2
 8007936:	089b      	lsrs	r3, r3, #2
 8007938:	0592      	lsls	r2, r2, #22
 800793a:	4293      	cmp	r3, r2
 800793c:	d002      	beq.n	8007944 <__ieee754_powf+0x6a0>
 800793e:	2d00      	cmp	r5, #0
 8007940:	d000      	beq.n	8007944 <__ieee754_powf+0x6a0>
 8007942:	e534      	b.n	80073ae <__ieee754_powf+0x10a>
 8007944:	2f00      	cmp	r7, #0
 8007946:	da04      	bge.n	8007952 <__ieee754_powf+0x6ae>
 8007948:	1c01      	adds	r1, r0, #0
 800794a:	20fe      	movs	r0, #254	@ 0xfe
 800794c:	0580      	lsls	r0, r0, #22
 800794e:	f7f8 ff85 	bl	800085c <__aeabi_fdiv>
 8007952:	9b04      	ldr	r3, [sp, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	db00      	blt.n	800795a <__ieee754_powf+0x6b6>
 8007958:	e4ba      	b.n	80072d0 <__ieee754_powf+0x2c>
 800795a:	4b05      	ldr	r3, [pc, #20]	@ (8007970 <__ieee754_powf+0x6cc>)
 800795c:	18ed      	adds	r5, r5, r3
 800795e:	9b02      	ldr	r3, [sp, #8]
 8007960:	431d      	orrs	r5, r3
 8007962:	d000      	beq.n	8007966 <__ieee754_powf+0x6c2>
 8007964:	e51b      	b.n	800739e <__ieee754_powf+0xfa>
 8007966:	1c01      	adds	r1, r0, #0
 8007968:	f7f9 faa0 	bl	8000eac <__aeabi_fsub>
 800796c:	1c01      	adds	r1, r0, #0
 800796e:	e4e6      	b.n	800733e <__ieee754_powf+0x9a>
 8007970:	c0800000 	.word	0xc0800000

08007974 <fabsf>:
 8007974:	0040      	lsls	r0, r0, #1
 8007976:	0840      	lsrs	r0, r0, #1
 8007978:	4770      	bx	lr
	...

0800797c <scalbnf>:
 800797c:	0043      	lsls	r3, r0, #1
 800797e:	b570      	push	{r4, r5, r6, lr}
 8007980:	0002      	movs	r2, r0
 8007982:	000c      	movs	r4, r1
 8007984:	085d      	lsrs	r5, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d006      	beq.n	8007998 <scalbnf+0x1c>
 800798a:	21ff      	movs	r1, #255	@ 0xff
 800798c:	05c9      	lsls	r1, r1, #23
 800798e:	428d      	cmp	r5, r1
 8007990:	d303      	bcc.n	800799a <scalbnf+0x1e>
 8007992:	1c01      	adds	r1, r0, #0
 8007994:	f7f8 fd70 	bl	8000478 <__aeabi_fadd>
 8007998:	bd70      	pop	{r4, r5, r6, pc}
 800799a:	4208      	tst	r0, r1
 800799c:	d118      	bne.n	80079d0 <scalbnf+0x54>
 800799e:	2198      	movs	r1, #152	@ 0x98
 80079a0:	05c9      	lsls	r1, r1, #23
 80079a2:	f7f9 f929 	bl	8000bf8 <__aeabi_fmul>
 80079a6:	4b19      	ldr	r3, [pc, #100]	@ (8007a0c <scalbnf+0x90>)
 80079a8:	429c      	cmp	r4, r3
 80079aa:	db0d      	blt.n	80079c8 <scalbnf+0x4c>
 80079ac:	0002      	movs	r2, r0
 80079ae:	15c3      	asrs	r3, r0, #23
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	3b19      	subs	r3, #25
 80079b4:	4916      	ldr	r1, [pc, #88]	@ (8007a10 <scalbnf+0x94>)
 80079b6:	428c      	cmp	r4, r1
 80079b8:	dd0c      	ble.n	80079d4 <scalbnf+0x58>
 80079ba:	4b16      	ldr	r3, [pc, #88]	@ (8007a14 <scalbnf+0x98>)
 80079bc:	2800      	cmp	r0, #0
 80079be:	da00      	bge.n	80079c2 <scalbnf+0x46>
 80079c0:	4b15      	ldr	r3, [pc, #84]	@ (8007a18 <scalbnf+0x9c>)
 80079c2:	4914      	ldr	r1, [pc, #80]	@ (8007a14 <scalbnf+0x98>)
 80079c4:	1c18      	adds	r0, r3, #0
 80079c6:	e000      	b.n	80079ca <scalbnf+0x4e>
 80079c8:	4914      	ldr	r1, [pc, #80]	@ (8007a1c <scalbnf+0xa0>)
 80079ca:	f7f9 f915 	bl	8000bf8 <__aeabi_fmul>
 80079ce:	e7e3      	b.n	8007998 <scalbnf+0x1c>
 80079d0:	0e1b      	lsrs	r3, r3, #24
 80079d2:	e7ef      	b.n	80079b4 <scalbnf+0x38>
 80079d4:	1919      	adds	r1, r3, r4
 80079d6:	29fe      	cmp	r1, #254	@ 0xfe
 80079d8:	dcef      	bgt.n	80079ba <scalbnf+0x3e>
 80079da:	2900      	cmp	r1, #0
 80079dc:	dd04      	ble.n	80079e8 <scalbnf+0x6c>
 80079de:	4810      	ldr	r0, [pc, #64]	@ (8007a20 <scalbnf+0xa4>)
 80079e0:	05c9      	lsls	r1, r1, #23
 80079e2:	4010      	ands	r0, r2
 80079e4:	4308      	orrs	r0, r1
 80079e6:	e7d7      	b.n	8007998 <scalbnf+0x1c>
 80079e8:	000b      	movs	r3, r1
 80079ea:	3316      	adds	r3, #22
 80079ec:	da05      	bge.n	80079fa <scalbnf+0x7e>
 80079ee:	4b0b      	ldr	r3, [pc, #44]	@ (8007a1c <scalbnf+0xa0>)
 80079f0:	2800      	cmp	r0, #0
 80079f2:	da00      	bge.n	80079f6 <scalbnf+0x7a>
 80079f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007a24 <scalbnf+0xa8>)
 80079f6:	4909      	ldr	r1, [pc, #36]	@ (8007a1c <scalbnf+0xa0>)
 80079f8:	e7e4      	b.n	80079c4 <scalbnf+0x48>
 80079fa:	3119      	adds	r1, #25
 80079fc:	05c8      	lsls	r0, r1, #23
 80079fe:	21cc      	movs	r1, #204	@ 0xcc
 8007a00:	4b07      	ldr	r3, [pc, #28]	@ (8007a20 <scalbnf+0xa4>)
 8007a02:	0589      	lsls	r1, r1, #22
 8007a04:	401a      	ands	r2, r3
 8007a06:	4310      	orrs	r0, r2
 8007a08:	e7df      	b.n	80079ca <scalbnf+0x4e>
 8007a0a:	46c0      	nop			@ (mov r8, r8)
 8007a0c:	ffff3cb0 	.word	0xffff3cb0
 8007a10:	0000c350 	.word	0x0000c350
 8007a14:	7149f2ca 	.word	0x7149f2ca
 8007a18:	f149f2ca 	.word	0xf149f2ca
 8007a1c:	0da24260 	.word	0x0da24260
 8007a20:	807fffff 	.word	0x807fffff
 8007a24:	8da24260 	.word	0x8da24260

08007a28 <with_errnof>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	000d      	movs	r5, r1
 8007a2c:	1c04      	adds	r4, r0, #0
 8007a2e:	f7ff fb21 	bl	8007074 <__errno>
 8007a32:	6005      	str	r5, [r0, #0]
 8007a34:	1c20      	adds	r0, r4, #0
 8007a36:	bd70      	pop	{r4, r5, r6, pc}

08007a38 <xflowf>:
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	1c0b      	adds	r3, r1, #0
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d002      	beq.n	8007a46 <xflowf+0xe>
 8007a40:	2380      	movs	r3, #128	@ 0x80
 8007a42:	061b      	lsls	r3, r3, #24
 8007a44:	18cb      	adds	r3, r1, r3
 8007a46:	1c18      	adds	r0, r3, #0
 8007a48:	f7f9 f8d6 	bl	8000bf8 <__aeabi_fmul>
 8007a4c:	2122      	movs	r1, #34	@ 0x22
 8007a4e:	f7ff ffeb 	bl	8007a28 <with_errnof>
 8007a52:	bd10      	pop	{r4, pc}

08007a54 <__math_uflowf>:
 8007a54:	2180      	movs	r1, #128	@ 0x80
 8007a56:	b510      	push	{r4, lr}
 8007a58:	0549      	lsls	r1, r1, #21
 8007a5a:	f7ff ffed 	bl	8007a38 <xflowf>
 8007a5e:	bd10      	pop	{r4, pc}

08007a60 <__math_oflowf>:
 8007a60:	21e0      	movs	r1, #224	@ 0xe0
 8007a62:	b510      	push	{r4, lr}
 8007a64:	05c9      	lsls	r1, r1, #23
 8007a66:	f7ff ffe7 	bl	8007a38 <xflowf>
 8007a6a:	bd10      	pop	{r4, pc}

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	46c0      	nop			@ (mov r8, r8)
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	46c0      	nop			@ (mov r8, r8)
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
