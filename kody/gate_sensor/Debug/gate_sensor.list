
gate_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005164  08005164  00006164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005238  08005238  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005238  08005238  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005238  08005238  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005238  08005238  00006238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800523c  0800523c  0000623c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005240  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  0800524c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  0800524c  00007160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145ba  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c4  00000000  00000000  0001b5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0001dfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d82  00000000  00000000  0001f0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157da  00000000  00000000  0001fe5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c72  00000000  00000000  00035634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084efa  00000000  00000000  0004c2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d11a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e88  00000000  00000000  000d11e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d506c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800514c 	.word	0x0800514c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800514c 	.word	0x0800514c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <bma400_init>:
/************************************************************************************/
/*********************** User function definitions **********************************/
/************************************************************************************/

int8_t bma400_init(struct bma400_dev *dev)
{
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80003fc:	260e      	movs	r6, #14
 80003fe:	19bb      	adds	r3, r7, r6
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000404:	250f      	movs	r5, #15
 8000406:	197c      	adds	r4, r7, r5
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	0018      	movs	r0, r3
 800040c:	f000 fb58 	bl	8000ac0 <null_ptr_check>
 8000410:	0003      	movs	r3, r0
 8000412:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8000414:	002c      	movs	r4, r5
 8000416:	193b      	adds	r3, r7, r4
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	b25b      	sxtb	r3, r3
 800041c:	2b00      	cmp	r3, #0
 800041e:	d13c      	bne.n	800049a <bma400_init+0xa6>
    {
        /* Initial power-up time */
        dev->delay_us(5000, dev->intf_ptr);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	4820      	ldr	r0, [pc, #128]	@ (80004ac <bma400_init+0xb8>)
 800042a:	0019      	movs	r1, r3
 800042c:	4790      	blx	r2

        /* Assigning dummy byte value */
        if (dev->intf == BMA400_SPI_INTF)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	785b      	ldrb	r3, [r3, #1]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d10c      	bne.n	8000450 <bma400_init+0x5c>
        {
            /* Dummy Byte availability */
            dev->dummy_byte = 1;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	721a      	strb	r2, [r3, #8]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 800043c:	193c      	adds	r4, r7, r4
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	19b9      	adds	r1, r7, r6
 8000442:	2201      	movs	r2, #1
 8000444:	2000      	movs	r0, #0
 8000446:	f000 f8b1 	bl	80005ac <bma400_get_regs>
 800044a:	0003      	movs	r3, r0
 800044c:	7023      	strb	r3, [r4, #0]
 800044e:	e002      	b.n	8000456 <bma400_init+0x62>
        }
        else
        {
            dev->dummy_byte = 0;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2200      	movs	r2, #0
 8000454:	721a      	strb	r2, [r3, #8]
        }

        if (rslt == BMA400_OK)
 8000456:	250f      	movs	r5, #15
 8000458:	197b      	adds	r3, r7, r5
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	b25b      	sxtb	r3, r3
 800045e:	2b00      	cmp	r3, #0
 8000460:	d11b      	bne.n	800049a <bma400_init+0xa6>
        {
            /* Chip ID of the sensor is read */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8000462:	197c      	adds	r4, r7, r5
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	260e      	movs	r6, #14
 8000468:	19b9      	adds	r1, r7, r6
 800046a:	2201      	movs	r2, #1
 800046c:	2000      	movs	r0, #0
 800046e:	f000 f89d 	bl	80005ac <bma400_get_regs>
 8000472:	0003      	movs	r3, r0
 8000474:	7023      	strb	r3, [r4, #0]

            /* Proceed if everything is fine until now */
            if (rslt == BMA400_OK)
 8000476:	197b      	adds	r3, r7, r5
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b25b      	sxtb	r3, r3
 800047c:	2b00      	cmp	r3, #0
 800047e:	d10c      	bne.n	800049a <bma400_init+0xa6>
            {
                /* Check for chip id validity */
                if (chip_id == BMA400_CHIP_ID)
 8000480:	19bb      	adds	r3, r7, r6
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b90      	cmp	r3, #144	@ 0x90
 8000486:	d104      	bne.n	8000492 <bma400_init+0x9e>
                {
                    /* Store the chip ID in dev structure */
                    dev->chip_id = chip_id;
 8000488:	19bb      	adds	r3, r7, r6
 800048a:	781a      	ldrb	r2, [r3, #0]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	701a      	strb	r2, [r3, #0]
 8000490:	e003      	b.n	800049a <bma400_init+0xa6>
                }
                else
                {
                    rslt = BMA400_E_DEV_NOT_FOUND;
 8000492:	230f      	movs	r3, #15
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	22fd      	movs	r2, #253	@ 0xfd
 8000498:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    return rslt;
 800049a:	230f      	movs	r3, #15
 800049c:	18fb      	adds	r3, r7, r3
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	b25b      	sxtb	r3, r3
}
 80004a2:	0018      	movs	r0, r3
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b005      	add	sp, #20
 80004a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	00001388 	.word	0x00001388

080004b0 <bma400_set_regs>:

int8_t bma400_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60b9      	str	r1, [r7, #8]
 80004b8:	607a      	str	r2, [r7, #4]
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	230f      	movs	r3, #15
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	1c02      	adds	r2, r0, #0
 80004c2:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t count;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80004c4:	2617      	movs	r6, #23
 80004c6:	19bc      	adds	r4, r7, r6
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 faf8 	bl	8000ac0 <null_ptr_check>
 80004d0:	0003      	movs	r3, r0
 80004d2:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 80004d4:	19bb      	adds	r3, r7, r6
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	b25b      	sxtb	r3, r3
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d158      	bne.n	8000590 <bma400_set_regs+0xe0>
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d055      	beq.n	8000590 <bma400_set_regs+0xe0>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        if (len == 1)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d116      	bne.n	8000518 <bma400_set_regs+0x68>
        {
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	691c      	ldr	r4, [r3, #16]
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	685d      	ldr	r5, [r3, #4]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	68b9      	ldr	r1, [r7, #8]
 80004f6:	230f      	movs	r3, #15
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	7818      	ldrb	r0, [r3, #0]
 80004fc:	002b      	movs	r3, r5
 80004fe:	47a0      	blx	r4
 8000500:	0003      	movs	r3, r0
 8000502:	001a      	movs	r2, r3
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	771a      	strb	r2, [r3, #28]
            if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	7f1b      	ldrb	r3, [r3, #28]
 800050c:	b25b      	sxtb	r3, r3
 800050e:	2b00      	cmp	r3, #0
 8000510:	d002      	beq.n	8000518 <bma400_set_regs+0x68>
            {
                /* Failure case */
                rslt = BMA400_E_COM_FAIL;
 8000512:	19bb      	adds	r3, r7, r6
 8000514:	22fe      	movs	r2, #254	@ 0xfe
 8000516:	701a      	strb	r2, [r3, #0]

        /* Burst write is not allowed thus we split burst case write
         * into single byte writes Thus user can write multiple bytes
         * with ease
         */
        if (len > 1)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d93d      	bls.n	800059a <bma400_set_regs+0xea>
        {
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 800051e:	2316      	movs	r3, #22
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e026      	b.n	8000576 <bma400_set_regs+0xc6>
            {
                dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	691c      	ldr	r4, [r3, #16]
 800052c:	2316      	movs	r3, #22
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	18d1      	adds	r1, r2, r3
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	685a      	ldr	r2, [r3, #4]
 800053a:	250f      	movs	r5, #15
 800053c:	197b      	adds	r3, r7, r5
 800053e:	7818      	ldrb	r0, [r3, #0]
 8000540:	0013      	movs	r3, r2
 8000542:	2201      	movs	r2, #1
 8000544:	47a0      	blx	r4
 8000546:	0003      	movs	r3, r0
 8000548:	001a      	movs	r2, r3
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	771a      	strb	r2, [r3, #28]
                reg_addr++;
 800054e:	197b      	adds	r3, r7, r5
 8000550:	781a      	ldrb	r2, [r3, #0]
 8000552:	197b      	adds	r3, r7, r5
 8000554:	3201      	adds	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
                if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	7f1b      	ldrb	r3, [r3, #28]
 800055c:	b25b      	sxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d003      	beq.n	800056a <bma400_set_regs+0xba>
                {
                    /* Failure case */
                    rslt = BMA400_E_COM_FAIL;
 8000562:	2317      	movs	r3, #23
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	22fe      	movs	r2, #254	@ 0xfe
 8000568:	701a      	strb	r2, [r3, #0]
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 800056a:	2116      	movs	r1, #22
 800056c:	187b      	adds	r3, r7, r1
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	187b      	adds	r3, r7, r1
 8000572:	3201      	adds	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	2316      	movs	r3, #22
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	429a      	cmp	r2, r3
 8000580:	d90b      	bls.n	800059a <bma400_set_regs+0xea>
 8000582:	2317      	movs	r3, #23
 8000584:	18fb      	adds	r3, r7, r3
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b25b      	sxtb	r3, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0cc      	beq.n	8000528 <bma400_set_regs+0x78>
        if (len > 1)
 800058e:	e004      	b.n	800059a <bma400_set_regs+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8000590:	2317      	movs	r3, #23
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	22ff      	movs	r2, #255	@ 0xff
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	e000      	b.n	800059c <bma400_set_regs+0xec>
        if (len > 1)
 800059a:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 800059c:	2317      	movs	r3, #23
 800059e:	18fb      	adds	r3, r7, r3
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b25b      	sxtb	r3, r3
}
 80005a4:	0018      	movs	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b007      	add	sp, #28
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005ac <bma400_get_regs>:

int8_t bma400_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	b0a7      	sub	sp, #156	@ 0x9c
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	607a      	str	r2, [r7, #4]
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	250f      	movs	r5, #15
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	1c02      	adds	r2, r0, #0
 80005be:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t index;
    uint8_t temp_buff[BMA400_MAX_LEN];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80005c0:	2697      	movs	r6, #151	@ 0x97
 80005c2:	19bc      	adds	r4, r7, r6
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 fa7a 	bl	8000ac0 <null_ptr_check>
 80005cc:	0003      	movs	r3, r0
 80005ce:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 80005d0:	19bb      	adds	r3, r7, r6
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d14a      	bne.n	8000670 <bma400_get_regs+0xc4>
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d047      	beq.n	8000670 <bma400_get_regs+0xc4>
    {
        if (dev->intf != BMA400_I2C_INTF)
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	785b      	ldrb	r3, [r3, #1]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d006      	beq.n	80005f6 <bma400_get_regs+0x4a>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 80005e8:	197b      	adds	r3, r7, r5
 80005ea:	197a      	adds	r2, r7, r5
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	2180      	movs	r1, #128	@ 0x80
 80005f0:	4249      	negs	r1, r1
 80005f2:	430a      	orrs	r2, r1
 80005f4:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr);
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	68dc      	ldr	r4, [r3, #12]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	7a1b      	ldrb	r3, [r3, #8]
 80005fe:	001a      	movs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	18d2      	adds	r2, r2, r3
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	685d      	ldr	r5, [r3, #4]
 8000608:	2314      	movs	r3, #20
 800060a:	18f9      	adds	r1, r7, r3
 800060c:	230f      	movs	r3, #15
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	7818      	ldrb	r0, [r3, #0]
 8000612:	002b      	movs	r3, r5
 8000614:	47a0      	blx	r4
 8000616:	0003      	movs	r3, r0
 8000618:	001a      	movs	r2, r3
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	771a      	strb	r2, [r3, #28]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	7f1b      	ldrb	r3, [r3, #28]
 8000622:	b25b      	sxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d11e      	bne.n	8000666 <bma400_get_regs+0xba>
        {
            for (index = 0; index < len; index++)
 8000628:	2394      	movs	r3, #148	@ 0x94
 800062a:	18fb      	adds	r3, r7, r3
 800062c:	2200      	movs	r2, #0
 800062e:	801a      	strh	r2, [r3, #0]
 8000630:	e012      	b.n	8000658 <bma400_get_regs+0xac>
            {
                /* Parse the data read and store in "reg_data"
                 * buffer so that the dummy byte is removed
                 * and user will get only valid data
                 */
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 8000632:	2094      	movs	r0, #148	@ 0x94
 8000634:	183b      	adds	r3, r7, r0
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	683a      	ldr	r2, [r7, #0]
 800063a:	7a12      	ldrb	r2, [r2, #8]
 800063c:	189a      	adds	r2, r3, r2
 800063e:	183b      	adds	r3, r7, r0
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	68b9      	ldr	r1, [r7, #8]
 8000644:	18cb      	adds	r3, r1, r3
 8000646:	2114      	movs	r1, #20
 8000648:	1879      	adds	r1, r7, r1
 800064a:	5c8a      	ldrb	r2, [r1, r2]
 800064c:	701a      	strb	r2, [r3, #0]
            for (index = 0; index < len; index++)
 800064e:	183b      	adds	r3, r7, r0
 8000650:	881a      	ldrh	r2, [r3, #0]
 8000652:	183b      	adds	r3, r7, r0
 8000654:	3201      	adds	r2, #1
 8000656:	801a      	strh	r2, [r3, #0]
 8000658:	2394      	movs	r3, #148	@ 0x94
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	429a      	cmp	r2, r3
 8000662:	d8e6      	bhi.n	8000632 <bma400_get_regs+0x86>
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8000664:	e008      	b.n	8000678 <bma400_get_regs+0xcc>
            }
        }
        else
        {
            /* Failure case */
            rslt = BMA400_E_COM_FAIL;
 8000666:	2397      	movs	r3, #151	@ 0x97
 8000668:	18fb      	adds	r3, r7, r3
 800066a:	22fe      	movs	r2, #254	@ 0xfe
 800066c:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 800066e:	e003      	b.n	8000678 <bma400_get_regs+0xcc>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8000670:	2397      	movs	r3, #151	@ 0x97
 8000672:	18fb      	adds	r3, r7, r3
 8000674:	22ff      	movs	r2, #255	@ 0xff
 8000676:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8000678:	2397      	movs	r3, #151	@ 0x97
 800067a:	18fb      	adds	r3, r7, r3
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	b25b      	sxtb	r3, r3
}
 8000680:	0018      	movs	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	b027      	add	sp, #156	@ 0x9c
 8000686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000688 <bma400_set_power_mode>:

    return rslt;
}

int8_t bma400_set_power_mode(uint8_t power_mode, struct bma400_dev *dev)
{
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	0002      	movs	r2, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data = 0;
 8000696:	260e      	movs	r6, #14
 8000698:	19bb      	adds	r3, r7, r6
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]

    rslt = null_ptr_check(dev);
 800069e:	250f      	movs	r5, #15
 80006a0:	197c      	adds	r4, r7, r5
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fa0b 	bl	8000ac0 <null_ptr_check>
 80006aa:	0003      	movs	r3, r0
 80006ac:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 80006ae:	197b      	adds	r3, r7, r5
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d108      	bne.n	80006ca <bma400_set_power_mode+0x42>
    {
        rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 80006b8:	197c      	adds	r4, r7, r5
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	19b9      	adds	r1, r7, r6
 80006be:	2201      	movs	r2, #1
 80006c0:	2019      	movs	r0, #25
 80006c2:	f7ff ff73 	bl	80005ac <bma400_get_regs>
 80006c6:	0003      	movs	r3, r0
 80006c8:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BMA400_OK)
 80006ca:	240f      	movs	r4, #15
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d12d      	bne.n	8000732 <bma400_set_power_mode+0xaa>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 80006d6:	200e      	movs	r0, #14
 80006d8:	183b      	adds	r3, r7, r0
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	2203      	movs	r2, #3
 80006e0:	4393      	bics	r3, r2
 80006e2:	b25a      	sxtb	r2, r3
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	2103      	movs	r1, #3
 80006ec:	400b      	ands	r3, r1
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	183b      	adds	r3, r7, r0
 80006f8:	701a      	strb	r2, [r3, #0]

        /* Set the power mode of sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 80006fa:	193c      	adds	r4, r7, r4
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	1839      	adds	r1, r7, r0
 8000700:	2201      	movs	r2, #1
 8000702:	2019      	movs	r0, #25
 8000704:	f7ff fed4 	bl	80004b0 <bma400_set_regs>
 8000708:	0003      	movs	r3, r0
 800070a:	7023      	strb	r3, [r4, #0]
        if (power_mode == BMA400_MODE_LOW_POWER)
 800070c:	1dfb      	adds	r3, r7, #7
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d107      	bne.n	8000724 <bma400_set_power_mode+0x9c>
        {
            /* A delay of 1/ODR is required to switch power modes
             * Low power mode has 25Hz frequency and hence it needs
             * 40ms delay to enter low power mode
             */
            dev->delay_us(40000, dev->intf_ptr);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	695a      	ldr	r2, [r3, #20]
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <bma400_set_power_mode+0xbc>)
 800071e:	0019      	movs	r1, r3
 8000720:	4790      	blx	r2
 8000722:	e006      	b.n	8000732 <bma400_set_power_mode+0xaa>
        }
        else
        {
            dev->delay_us(10000, dev->intf_ptr); /* TBC */
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	695a      	ldr	r2, [r3, #20]
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	4806      	ldr	r0, [pc, #24]	@ (8000748 <bma400_set_power_mode+0xc0>)
 800072e:	0019      	movs	r1, r3
 8000730:	4790      	blx	r2
        }
    }

    return rslt;
 8000732:	230f      	movs	r3, #15
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b25b      	sxtb	r3, r3
}
 800073a:	0018      	movs	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	b005      	add	sp, #20
 8000740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	00009c40 	.word	0x00009c40
 8000748:	00002710 	.word	0x00002710

0800074c <bma400_set_sensor_conf>:

    return rslt;
}

int8_t bma400_set_sensor_conf(const struct bma400_sensor_conf *conf, uint16_t n_sett, struct bma400_dev *dev)
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074e:	b087      	sub	sp, #28
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	607a      	str	r2, [r7, #4]
 8000756:	230a      	movs	r3, #10
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	1c0a      	adds	r2, r1, #0
 800075c:	801a      	strh	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx = 0;
 800075e:	2614      	movs	r6, #20
 8000760:	19bb      	adds	r3, r7, r6
 8000762:	2200      	movs	r2, #0
 8000764:	801a      	strh	r2, [r3, #0]
    uint8_t data_array[3] = { 0 };
 8000766:	2310      	movs	r3, #16
 8000768:	18fb      	adds	r3, r7, r3
 800076a:	0018      	movs	r0, r3
 800076c:	2303      	movs	r3, #3
 800076e:	001a      	movs	r2, r3
 8000770:	2100      	movs	r1, #0
 8000772:	f004 fcbf 	bl	80050f4 <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000776:	2517      	movs	r5, #23
 8000778:	197c      	adds	r4, r7, r5
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	0018      	movs	r0, r3
 800077e:	f000 f99f 	bl	8000ac0 <null_ptr_check>
 8000782:	0003      	movs	r3, r0
 8000784:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (conf != NULL))
 8000786:	197b      	adds	r3, r7, r5
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b25b      	sxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d14d      	bne.n	800082c <bma400_set_sensor_conf+0xe0>
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d04a      	beq.n	800082c <bma400_set_sensor_conf+0xe0>
    {
        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8000796:	197c      	adds	r4, r7, r5
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2210      	movs	r2, #16
 800079c:	18b9      	adds	r1, r7, r2
 800079e:	2203      	movs	r2, #3
 80007a0:	2021      	movs	r0, #33	@ 0x21
 80007a2:	f7ff ff03 	bl	80005ac <bma400_get_regs>
 80007a6:	0003      	movs	r3, r0
 80007a8:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 80007aa:	197b      	adds	r3, r7, r5
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d140      	bne.n	8000836 <bma400_set_sensor_conf+0xea>
        {
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80007b4:	19bb      	adds	r3, r7, r6
 80007b6:	2200      	movs	r2, #0
 80007b8:	801a      	strh	r2, [r3, #0]
 80007ba:	e018      	b.n	80007ee <bma400_set_sensor_conf+0xa2>
            {
                rslt = set_sensor_conf(data_array, conf + idx, dev);
 80007bc:	2514      	movs	r5, #20
 80007be:	197b      	adds	r3, r7, r5
 80007c0:	881a      	ldrh	r2, [r3, #0]
 80007c2:	0013      	movs	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	189b      	adds	r3, r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	001a      	movs	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	1899      	adds	r1, r3, r2
 80007d0:	2317      	movs	r3, #23
 80007d2:	18fc      	adds	r4, r7, r3
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	2310      	movs	r3, #16
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 f994 	bl	8000b08 <set_sensor_conf>
 80007e0:	0003      	movs	r3, r0
 80007e2:	7023      	strb	r3, [r4, #0]
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80007e4:	197b      	adds	r3, r7, r5
 80007e6:	881a      	ldrh	r2, [r3, #0]
 80007e8:	197b      	adds	r3, r7, r5
 80007ea:	3201      	adds	r2, #1
 80007ec:	801a      	strh	r2, [r3, #0]
 80007ee:	2314      	movs	r3, #20
 80007f0:	18fa      	adds	r2, r7, r3
 80007f2:	230a      	movs	r3, #10
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	8812      	ldrh	r2, [r2, #0]
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d205      	bcs.n	800080a <bma400_set_sensor_conf+0xbe>
 80007fe:	2317      	movs	r3, #23
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b25b      	sxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0d8      	beq.n	80007bc <bma400_set_sensor_conf+0x70>
            }

            if (rslt == BMA400_OK)
 800080a:	2217      	movs	r2, #23
 800080c:	18bb      	adds	r3, r7, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b25b      	sxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10f      	bne.n	8000836 <bma400_set_sensor_conf+0xea>
            {
                /* Set the interrupt pin mapping configurations */
                rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8000816:	18bc      	adds	r4, r7, r2
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2210      	movs	r2, #16
 800081c:	18b9      	adds	r1, r7, r2
 800081e:	2203      	movs	r2, #3
 8000820:	2021      	movs	r0, #33	@ 0x21
 8000822:	f7ff fe45 	bl	80004b0 <bma400_set_regs>
 8000826:	0003      	movs	r3, r0
 8000828:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 800082a:	e004      	b.n	8000836 <bma400_set_sensor_conf+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 800082c:	2317      	movs	r3, #23
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	22ff      	movs	r2, #255	@ 0xff
 8000832:	701a      	strb	r2, [r3, #0]
 8000834:	e000      	b.n	8000838 <bma400_set_sensor_conf+0xec>
        if (rslt == BMA400_OK)
 8000836:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 8000838:	2317      	movs	r3, #23
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b25b      	sxtb	r3, r3
}
 8000840:	0018      	movs	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	b007      	add	sp, #28
 8000846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000848 <bma400_set_device_conf>:

    return rslt;
}

int8_t bma400_set_device_conf(const struct bma400_device_conf *conf, uint8_t n_sett, struct bma400_dev *dev)
{
 8000848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084a:	b087      	sub	sp, #28
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	230b      	movs	r3, #11
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	1c0a      	adds	r2, r1, #0
 8000858:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx;
    uint8_t data_array[3] = { 0 };
 800085a:	2610      	movs	r6, #16
 800085c:	19bb      	adds	r3, r7, r6
 800085e:	0018      	movs	r0, r3
 8000860:	2303      	movs	r3, #3
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	f004 fc45 	bl	80050f4 <memset>

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800086a:	2517      	movs	r5, #23
 800086c:	197c      	adds	r4, r7, r5
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	0018      	movs	r0, r3
 8000872:	f000 f925 	bl	8000ac0 <null_ptr_check>
 8000876:	0003      	movs	r3, r0
 8000878:	7023      	strb	r3, [r4, #0]

    if ((rslt == BMA400_OK) && (conf != NULL))
 800087a:	197b      	adds	r3, r7, r5
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b25b      	sxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d000      	beq.n	8000886 <bma400_set_device_conf+0x3e>
 8000884:	e10e      	b.n	8000aa4 <bma400_set_device_conf+0x25c>
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d100      	bne.n	800088e <bma400_set_device_conf+0x46>
 800088c:	e10a      	b.n	8000aa4 <bma400_set_device_conf+0x25c>
    {

        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 800088e:	197c      	adds	r4, r7, r5
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	19b9      	adds	r1, r7, r6
 8000894:	2203      	movs	r2, #3
 8000896:	2021      	movs	r0, #33	@ 0x21
 8000898:	f7ff fe88 	bl	80005ac <bma400_get_regs>
 800089c:	0003      	movs	r3, r0
 800089e:	7023      	strb	r3, [r4, #0]

        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80008a0:	2314      	movs	r3, #20
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	2200      	movs	r2, #0
 80008a6:	801a      	strh	r2, [r3, #0]
 80008a8:	e0db      	b.n	8000a62 <bma400_set_device_conf+0x21a>
        {
            switch (conf[idx].type)
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	881a      	ldrh	r2, [r3, #0]
 80008b0:	0013      	movs	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	189b      	adds	r3, r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	001a      	movs	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	189b      	adds	r3, r3, r2
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b05      	cmp	r3, #5
 80008c2:	d900      	bls.n	80008c6 <bma400_set_device_conf+0x7e>
 80008c4:	e0bf      	b.n	8000a46 <bma400_set_device_conf+0x1fe>
 80008c6:	009a      	lsls	r2, r3, #2
 80008c8:	4b7c      	ldr	r3, [pc, #496]	@ (8000abc <bma400_set_device_conf+0x274>)
 80008ca:	18d3      	adds	r3, r2, r3
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	469f      	mov	pc, r3
            {
                case BMA400_AUTOWAKEUP_TIMEOUT:
                    rslt = set_autowakeup_timeout(&conf[idx].param.auto_wakeup, dev);
 80008d0:	2314      	movs	r3, #20
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	881a      	ldrh	r2, [r3, #0]
 80008d6:	0013      	movs	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	189b      	adds	r3, r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	001a      	movs	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	189b      	adds	r3, r3, r2
 80008e4:	3302      	adds	r3, #2
 80008e6:	2217      	movs	r2, #23
 80008e8:	18bc      	adds	r4, r7, r2
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	0011      	movs	r1, r2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fa6c 	bl	8000dcc <set_autowakeup_timeout>
 80008f4:	0003      	movs	r3, r0
 80008f6:	7023      	strb	r3, [r4, #0]
                    break;
 80008f8:	e0ad      	b.n	8000a56 <bma400_set_device_conf+0x20e>
                case BMA400_AUTOWAKEUP_INT:
                    rslt = set_autowakeup_interrupt(&conf[idx].param.wakeup, dev);
 80008fa:	2514      	movs	r5, #20
 80008fc:	197b      	adds	r3, r7, r5
 80008fe:	881a      	ldrh	r2, [r3, #0]
 8000900:	0013      	movs	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	189b      	adds	r3, r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	001a      	movs	r2, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	189b      	adds	r3, r3, r2
 800090e:	3302      	adds	r3, #2
 8000910:	2617      	movs	r6, #23
 8000912:	19bc      	adds	r4, r7, r6
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 faf3 	bl	8000f04 <set_autowakeup_interrupt>
 800091e:	0003      	movs	r3, r0
 8000920:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 8000922:	19bb      	adds	r3, r7, r6
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b25b      	sxtb	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	d000      	beq.n	800092e <bma400_set_device_conf+0xe6>
 800092c:	e090      	b.n	8000a50 <bma400_set_device_conf+0x208>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_WAKEUP_INT_MAP, conf[idx].param.wakeup.int_chan);
 800092e:	197b      	adds	r3, r7, r5
 8000930:	881a      	ldrh	r2, [r3, #0]
 8000932:	0013      	movs	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	189b      	adds	r3, r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	001a      	movs	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	189b      	adds	r3, r3, r2
 8000940:	7a5a      	ldrb	r2, [r3, #9]
 8000942:	2310      	movs	r3, #16
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	2107      	movs	r1, #7
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fecd 	bl	80016e8 <map_int_pin>
                    }

                    break;
 800094e:	e07f      	b.n	8000a50 <bma400_set_device_conf+0x208>
                case BMA400_AUTO_LOW_POWER:
                    rslt = set_auto_low_power(&conf[idx].param.auto_lp, dev);
 8000950:	2314      	movs	r3, #20
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	881a      	ldrh	r2, [r3, #0]
 8000956:	0013      	movs	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	189b      	adds	r3, r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	001a      	movs	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	189b      	adds	r3, r3, r2
 8000964:	3302      	adds	r3, #2
 8000966:	2217      	movs	r2, #23
 8000968:	18bc      	adds	r4, r7, r2
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	0011      	movs	r1, r2
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fb2c 	bl	8000fcc <set_auto_low_power>
 8000974:	0003      	movs	r3, r0
 8000976:	7023      	strb	r3, [r4, #0]
                    break;
 8000978:	e06d      	b.n	8000a56 <bma400_set_device_conf+0x20e>
                case BMA400_INT_PIN_CONF:
                    rslt = set_int_pin_conf(conf[idx].param.int_conf, dev);
 800097a:	2314      	movs	r3, #20
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	881a      	ldrh	r2, [r3, #0]
 8000980:	0013      	movs	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	189b      	adds	r3, r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	001a      	movs	r2, r3
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	189b      	adds	r3, r3, r2
 800098e:	2217      	movs	r2, #23
 8000990:	18bc      	adds	r4, r7, r2
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	2202      	movs	r2, #2
 8000996:	5a9a      	ldrh	r2, [r3, r2]
 8000998:	2300      	movs	r3, #0
 800099a:	0412      	lsls	r2, r2, #16
 800099c:	0c12      	lsrs	r2, r2, #16
 800099e:	0c1b      	lsrs	r3, r3, #16
 80009a0:	041b      	lsls	r3, r3, #16
 80009a2:	4313      	orrs	r3, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 f9bf 	bl	8001d28 <set_int_pin_conf>
 80009aa:	0003      	movs	r3, r0
 80009ac:	7023      	strb	r3, [r4, #0]
                    break;
 80009ae:	e052      	b.n	8000a56 <bma400_set_device_conf+0x20e>
                case BMA400_INT_OVERRUN_CONF:

                    /* Interrupt pin mapping */
                    map_int_pin(data_array, BMA400_INT_OVERRUN_MAP, conf[idx].param.overrun_int.int_chan);
 80009b0:	2314      	movs	r3, #20
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	881a      	ldrh	r2, [r3, #0]
 80009b6:	0013      	movs	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	189b      	adds	r3, r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	001a      	movs	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	189b      	adds	r3, r3, r2
 80009c4:	789a      	ldrb	r2, [r3, #2]
 80009c6:	2310      	movs	r3, #16
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	210b      	movs	r1, #11
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 fe8b 	bl	80016e8 <map_int_pin>
                    break;
 80009d2:	e040      	b.n	8000a56 <bma400_set_device_conf+0x20e>
                case BMA400_FIFO_CONF:
                    rslt = set_fifo_conf(&conf[idx].param.fifo_conf, dev);
 80009d4:	2514      	movs	r5, #20
 80009d6:	197b      	adds	r3, r7, r5
 80009d8:	881a      	ldrh	r2, [r3, #0]
 80009da:	0013      	movs	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	189b      	adds	r3, r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	001a      	movs	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	189b      	adds	r3, r3, r2
 80009e8:	3302      	adds	r3, #2
 80009ea:	2617      	movs	r6, #23
 80009ec:	19bc      	adds	r4, r7, r6
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	0011      	movs	r1, r2
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 f9f1 	bl	8001dda <set_fifo_conf>
 80009f8:	0003      	movs	r3, r0
 80009fa:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 80009fc:	19bb      	adds	r3, r7, r6
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d126      	bne.n	8000a54 <bma400_set_device_conf+0x20c>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_FIFO_WM_INT_MAP, conf[idx].param.fifo_conf.fifo_wm_channel);
 8000a06:	197b      	adds	r3, r7, r5
 8000a08:	881a      	ldrh	r2, [r3, #0]
 8000a0a:	0013      	movs	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	189b      	adds	r3, r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	001a      	movs	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	189b      	adds	r3, r3, r2
 8000a18:	79da      	ldrb	r2, [r3, #7]
 8000a1a:	2410      	movs	r4, #16
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	2102      	movs	r1, #2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 fe61 	bl	80016e8 <map_int_pin>
                        map_int_pin(data_array, BMA400_FIFO_FULL_INT_MAP, conf[idx].param.fifo_conf.fifo_full_channel);
 8000a26:	197b      	adds	r3, r7, r5
 8000a28:	881a      	ldrh	r2, [r3, #0]
 8000a2a:	0013      	movs	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	189b      	adds	r3, r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	001a      	movs	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	189b      	adds	r3, r3, r2
 8000a38:	799a      	ldrb	r2, [r3, #6]
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 fe52 	bl	80016e8 <map_int_pin>
                    }

                    break;
 8000a44:	e006      	b.n	8000a54 <bma400_set_device_conf+0x20c>
                default:
                    rslt = BMA400_E_INVALID_CONFIG;
 8000a46:	2317      	movs	r3, #23
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	22fc      	movs	r2, #252	@ 0xfc
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	e002      	b.n	8000a56 <bma400_set_device_conf+0x20e>
                    break;
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	e000      	b.n	8000a56 <bma400_set_device_conf+0x20e>
                    break;
 8000a54:	46c0      	nop			@ (mov r8, r8)
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8000a56:	2114      	movs	r1, #20
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	881a      	ldrh	r2, [r3, #0]
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	3201      	adds	r2, #1
 8000a60:	801a      	strh	r2, [r3, #0]
 8000a62:	230b      	movs	r3, #11
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	2214      	movs	r2, #20
 8000a6c:	18ba      	adds	r2, r7, r2
 8000a6e:	8812      	ldrh	r2, [r2, #0]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d206      	bcs.n	8000a82 <bma400_set_device_conf+0x23a>
 8000a74:	2317      	movs	r3, #23
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d100      	bne.n	8000a82 <bma400_set_device_conf+0x23a>
 8000a80:	e713      	b.n	80008aa <bma400_set_device_conf+0x62>
            }
        }

        if (rslt == BMA400_OK)
 8000a82:	2217      	movs	r2, #23
 8000a84:	18bb      	adds	r3, r7, r2
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d10e      	bne.n	8000aac <bma400_set_device_conf+0x264>
        {
            /* Set the interrupt pin mapping configurations */
            rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8000a8e:	18bc      	adds	r4, r7, r2
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2210      	movs	r2, #16
 8000a94:	18b9      	adds	r1, r7, r2
 8000a96:	2203      	movs	r2, #3
 8000a98:	2021      	movs	r0, #33	@ 0x21
 8000a9a:	f7ff fd09 	bl	80004b0 <bma400_set_regs>
 8000a9e:	0003      	movs	r3, r0
 8000aa0:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8000aa2:	e003      	b.n	8000aac <bma400_set_device_conf+0x264>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8000aa4:	2317      	movs	r3, #23
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	22ff      	movs	r2, #255	@ 0xff
 8000aaa:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8000aac:	2317      	movs	r3, #23
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b25b      	sxtb	r3, r3
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b007      	add	sp, #28
 8000aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000abc:	08005168 	.word	0x08005168

08000ac0 <null_ptr_check>:
/************************************************************************************/
/*********************** Static function definitions **********************************/
/************************************************************************************/

static int8_t null_ptr_check(const struct bma400_dev *dev)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->intf_ptr == NULL))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00b      	beq.n	8000ae6 <null_ptr_check+0x26>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <null_ptr_check+0x26>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <null_ptr_check+0x26>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d104      	bne.n	8000af0 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BMA400_E_NULL_PTR;
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	22ff      	movs	r2, #255	@ 0xff
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	e003      	b.n	8000af8 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMA400_OK;
 8000af0:	230f      	movs	r3, #15
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8000af8:	230f      	movs	r3, #15
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b25b      	sxtb	r3, r3
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b004      	add	sp, #16
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <set_sensor_conf>:

static int8_t set_sensor_conf(uint8_t *data, const struct bma400_sensor_conf *conf, struct bma400_dev *dev)
{
 8000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMA400_E_INVALID_CONFIG;
 8000b14:	2117      	movs	r1, #23
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	22fc      	movs	r2, #252	@ 0xfc
 8000b1a:	701a      	strb	r2, [r3, #0]
    uint8_t int_enable = 0;
 8000b1c:	2516      	movs	r5, #22
 8000b1e:	197b      	adds	r3, r7, r5
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
    enum bma400_int_chan int_map = BMA400_UNMAP_INT_PIN;
 8000b24:	2615      	movs	r6, #21
 8000b26:	19bb      	adds	r3, r7, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]

    if (BMA400_ACCEL == conf->type)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d110      	bne.n	8000b56 <set_sensor_conf+0x4e>
    {
        /* Setting Accel configurations */
        rslt = set_accel_conf(&conf->param.accel, dev);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	3302      	adds	r3, #2
 8000b38:	187c      	adds	r4, r7, r1
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 f8aa 	bl	8000c98 <set_accel_conf>
 8000b44:	0003      	movs	r3, r0
 8000b46:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_DATA_READY_INT_MAP;
 8000b48:	197b      	adds	r3, r7, r5
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.accel.int_chan;
 8000b4e:	19bb      	adds	r3, r7, r6
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	7a12      	ldrb	r2, [r2, #8]
 8000b54:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_TAP_INT == conf->type)
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d113      	bne.n	8000b86 <set_sensor_conf+0x7e>
    {
        /* Setting tap configurations */
        rslt = set_tap_conf(&conf->param.tap, dev);
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	3302      	adds	r3, #2
 8000b62:	2217      	movs	r2, #23
 8000b64:	18bc      	adds	r4, r7, r2
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	0011      	movs	r1, r2
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 faac 	bl	80010c8 <set_tap_conf>
 8000b70:	0003      	movs	r3, r0
 8000b72:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_TAP_INT_MAP;
 8000b74:	2316      	movs	r3, #22
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	2209      	movs	r2, #9
 8000b7a:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.tap.int_chan;
 8000b7c:	2315      	movs	r3, #21
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	68ba      	ldr	r2, [r7, #8]
 8000b82:	79d2      	ldrb	r2, [r2, #7]
 8000b84:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ACTIVITY_CHANGE_INT == conf->type)
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d113      	bne.n	8000bb6 <set_sensor_conf+0xae>
    {
        /* Setting activity change configurations */
        rslt = set_activity_change_conf(&conf->param.act_ch, dev);
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	3302      	adds	r3, #2
 8000b92:	2217      	movs	r2, #23
 8000b94:	18bc      	adds	r4, r7, r2
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	0011      	movs	r1, r2
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fb1a 	bl	80011d4 <set_activity_change_conf>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ACT_CH_INT_MAP;
 8000ba4:	2316      	movs	r3, #22
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2208      	movs	r2, #8
 8000baa:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.act_ch.int_chan;
 8000bac:	2315      	movs	r3, #21
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	7992      	ldrb	r2, [r2, #6]
 8000bb4:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN1_INT == conf->type)
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d113      	bne.n	8000be6 <set_sensor_conf+0xde>
    {
        /* Setting generic int 1 configurations */
        rslt = set_gen1_int(&conf->param.gen_int, dev);
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	2217      	movs	r2, #23
 8000bc4:	18bc      	adds	r4, r7, r2
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	0011      	movs	r1, r2
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 fb54 	bl	8001278 <set_gen1_int>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN1_INT_MAP;
 8000bd4:	2316      	movs	r3, #22
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2205      	movs	r2, #5
 8000bda:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 8000bdc:	2315      	movs	r3, #21
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	7c92      	ldrb	r2, [r2, #18]
 8000be4:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN2_INT == conf->type)
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d113      	bne.n	8000c16 <set_sensor_conf+0x10e>
    {
        /* Setting generic int 2 configurations */
        rslt = set_gen2_int(&conf->param.gen_int, dev);
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	2217      	movs	r2, #23
 8000bf4:	18bc      	adds	r4, r7, r2
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fc0c 	bl	8001418 <set_gen2_int>
 8000c00:	0003      	movs	r3, r0
 8000c02:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN2_INT_MAP;
 8000c04:	2316      	movs	r3, #22
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	2204      	movs	r2, #4
 8000c0a:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 8000c0c:	2315      	movs	r3, #21
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	68ba      	ldr	r2, [r7, #8]
 8000c12:	7c92      	ldrb	r2, [r2, #18]
 8000c14:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ORIENT_CHANGE_INT == conf->type)
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b05      	cmp	r3, #5
 8000c1c:	d113      	bne.n	8000c46 <set_sensor_conf+0x13e>
    {
        /* Setting orient int configurations */
        rslt = set_orient_int(&conf->param.orient, dev);
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	3302      	adds	r3, #2
 8000c22:	2217      	movs	r2, #23
 8000c24:	18bc      	adds	r4, r7, r2
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	0011      	movs	r1, r2
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 fcc4 	bl	80015b8 <set_orient_int>
 8000c30:	0003      	movs	r3, r0
 8000c32:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ORIENT_CH_INT_MAP;
 8000c34:	2316      	movs	r3, #22
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	2206      	movs	r2, #6
 8000c3a:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.orient.int_chan;
 8000c3c:	2315      	movs	r3, #21
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	68ba      	ldr	r2, [r7, #8]
 8000c42:	7b92      	ldrb	r2, [r2, #14]
 8000c44:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_STEP_COUNTER_INT == conf->type)
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d10c      	bne.n	8000c68 <set_sensor_conf+0x160>
    {
        rslt = BMA400_OK;
 8000c4e:	2317      	movs	r3, #23
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
        int_enable = BMA400_STEP_INT_MAP;
 8000c56:	2316      	movs	r3, #22
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	220a      	movs	r2, #10
 8000c5c:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.step_cnt.int_chan;
 8000c5e:	2315      	movs	r3, #21
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	7892      	ldrb	r2, [r2, #2]
 8000c66:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BMA400_OK)
 8000c68:	2317      	movs	r3, #23
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d109      	bne.n	8000c88 <set_sensor_conf+0x180>
    {
        /* Int pin mapping settings */
        map_int_pin(data, int_enable, int_map);
 8000c74:	2315      	movs	r3, #21
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	2316      	movs	r3, #22
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	7819      	ldrb	r1, [r3, #0]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 fd30 	bl	80016e8 <map_int_pin>
    }

    return rslt;
 8000c88:	2317      	movs	r3, #23
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b25b      	sxtb	r3, r3
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b007      	add	sp, #28
 8000c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c98 <set_accel_conf>:

    return rslt;
}

static int8_t set_accel_conf(const struct bma400_acc_conf *accel_conf, struct bma400_dev *dev)
{
 8000c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 8000ca2:	250c      	movs	r5, #12
 8000ca4:	197b      	adds	r3, r7, r5
 8000ca6:	4a48      	ldr	r2, [pc, #288]	@ (8000dc8 <set_accel_conf+0x130>)
 8000ca8:	8811      	ldrh	r1, [r2, #0]
 8000caa:	8019      	strh	r1, [r3, #0]
 8000cac:	7892      	ldrb	r2, [r2, #2]
 8000cae:	709a      	strb	r2, [r3, #2]

    /* Update the accel configurations from the user structure
     * accel_conf
     */
    rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8000cb0:	260f      	movs	r6, #15
 8000cb2:	19bc      	adds	r4, r7, r6
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	1979      	adds	r1, r7, r5
 8000cb8:	2203      	movs	r2, #3
 8000cba:	2019      	movs	r0, #25
 8000cbc:	f7ff fc76 	bl	80005ac <bma400_get_regs>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8000cc4:	0034      	movs	r4, r6
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d173      	bne.n	8000db8 <set_accel_conf+0x120>
    {
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 8000cd0:	0028      	movs	r0, r5
 8000cd2:	183b      	adds	r3, r7, r0
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	227f      	movs	r2, #127	@ 0x7f
 8000cda:	4013      	ands	r3, r2
 8000cdc:	b25a      	sxtb	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	795b      	ldrb	r3, [r3, #5]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	01db      	lsls	r3, r3, #7
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	183b      	adds	r3, r7, r0
 8000cf0:	701a      	strb	r2, [r3, #0]
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 8000cf2:	183b      	adds	r3, r7, r0
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	2260      	movs	r2, #96	@ 0x60
 8000cfa:	4393      	bics	r3, r2
 8000cfc:	b25a      	sxtb	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	791b      	ldrb	r3, [r3, #4]
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	015b      	lsls	r3, r3, #5
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	2160      	movs	r1, #96	@ 0x60
 8000d0a:	400b      	ands	r3, r1
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	183b      	adds	r3, r7, r0
 8000d16:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 8000d18:	183b      	adds	r3, r7, r0
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	223f      	movs	r2, #63	@ 0x3f
 8000d20:	4013      	ands	r3, r2
 8000d22:	b25a      	sxtb	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	785b      	ldrb	r3, [r3, #1]
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	019b      	lsls	r3, r3, #6
 8000d2c:	b25b      	sxtb	r3, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	183b      	adds	r3, r7, r0
 8000d36:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 8000d38:	183b      	adds	r3, r7, r0
 8000d3a:	785b      	ldrb	r3, [r3, #1]
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	2230      	movs	r2, #48	@ 0x30
 8000d40:	4393      	bics	r3, r2
 8000d42:	b25a      	sxtb	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	78db      	ldrb	r3, [r3, #3]
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	2130      	movs	r1, #48	@ 0x30
 8000d50:	400b      	ands	r3, r1
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	183b      	adds	r3, r7, r0
 8000d5c:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 8000d5e:	183b      	adds	r3, r7, r0
 8000d60:	785b      	ldrb	r3, [r3, #1]
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	220f      	movs	r2, #15
 8000d66:	4393      	bics	r3, r2
 8000d68:	b25a      	sxtb	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	210f      	movs	r1, #15
 8000d72:	400b      	ands	r3, r1
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	183b      	adds	r3, r7, r0
 8000d7e:	705a      	strb	r2, [r3, #1]
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 8000d80:	183b      	adds	r3, r7, r0
 8000d82:	789b      	ldrb	r3, [r3, #2]
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	220c      	movs	r2, #12
 8000d88:	4393      	bics	r3, r2
 8000d8a:	b25a      	sxtb	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	789b      	ldrb	r3, [r3, #2]
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	210c      	movs	r1, #12
 8000d98:	400b      	ands	r3, r1
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	183b      	adds	r3, r7, r0
 8000da4:	709a      	strb	r2, [r3, #2]

        /* Set the accel configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	1839      	adds	r1, r7, r0
 8000dac:	2203      	movs	r2, #3
 8000dae:	2019      	movs	r0, #25
 8000db0:	f7ff fb7e 	bl	80004b0 <bma400_set_regs>
 8000db4:	0003      	movs	r3, r0
 8000db6:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8000db8:	230f      	movs	r3, #15
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b25b      	sxtb	r3, r3
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b005      	add	sp, #20
 8000dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc8:	08005164 	.word	0x08005164

08000dcc <set_autowakeup_timeout>:

    return rslt;
}

static int8_t set_autowakeup_timeout(const struct bma400_auto_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 8000dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2];
    uint8_t lsb;
    uint8_t msb;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &data_array[1], 1, dev);
 8000dd6:	260f      	movs	r6, #15
 8000dd8:	19bc      	adds	r4, r7, r6
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	2508      	movs	r5, #8
 8000dde:	197b      	adds	r3, r7, r5
 8000de0:	1c59      	adds	r1, r3, #1
 8000de2:	0013      	movs	r3, r2
 8000de4:	2201      	movs	r2, #1
 8000de6:	202d      	movs	r0, #45	@ 0x2d
 8000de8:	f7ff fbe0 	bl	80005ac <bma400_get_regs>
 8000dec:	0003      	movs	r3, r0
 8000dee:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8000df0:	0034      	movs	r4, r6
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d13e      	bne.n	8000e7a <set_autowakeup_timeout+0xae>
    {
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 8000dfc:	0028      	movs	r0, r5
 8000dfe:	183b      	adds	r3, r7, r0
 8000e00:	785b      	ldrb	r3, [r3, #1]
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	2204      	movs	r2, #4
 8000e06:	4393      	bics	r3, r2
 8000e08:	b25a      	sxtb	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	2104      	movs	r1, #4
 8000e16:	400b      	ands	r3, r1
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	183b      	adds	r3, r7, r0
 8000e22:	705a      	strb	r2, [r3, #1]

        /* LSB of timeout threshold */
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	885b      	ldrh	r3, [r3, #2]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	250e      	movs	r5, #14
 8000e2c:	197b      	adds	r3, r7, r5
 8000e2e:	210f      	movs	r1, #15
 8000e30:	400a      	ands	r2, r1
 8000e32:	701a      	strb	r2, [r3, #0]

        /* MSB of timeout threshold */
        msb = BMA400_GET_BITS(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_MSB);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	885b      	ldrh	r3, [r3, #2]
 8000e38:	111a      	asrs	r2, r3, #4
 8000e3a:	210d      	movs	r1, #13
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	701a      	strb	r2, [r3, #0]

        /* Set the value in the data_array */
        data_array[0] = msb;
 8000e40:	183b      	adds	r3, r7, r0
 8000e42:	187a      	adds	r2, r7, r1
 8000e44:	7812      	ldrb	r2, [r2, #0]
 8000e46:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT_THRES, lsb);
 8000e48:	183b      	adds	r3, r7, r0
 8000e4a:	785b      	ldrb	r3, [r3, #1]
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	220f      	movs	r2, #15
 8000e50:	4013      	ands	r3, r2
 8000e52:	b25a      	sxtb	r2, r3
 8000e54:	197b      	adds	r3, r7, r5
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	183b      	adds	r3, r7, r0
 8000e66:	705a      	strb	r2, [r3, #1]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_0, data_array, 2, dev);
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	1839      	adds	r1, r7, r0
 8000e6e:	2202      	movs	r2, #2
 8000e70:	202c      	movs	r0, #44	@ 0x2c
 8000e72:	f7ff fb1d 	bl	80004b0 <bma400_set_regs>
 8000e76:	0003      	movs	r3, r0
 8000e78:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b25b      	sxtb	r3, r3
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b005      	add	sp, #20
 8000e88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e8a <set_auto_wakeup>:

    return rslt;
}

int8_t set_auto_wakeup(uint8_t conf, struct bma400_dev *dev)
{
 8000e8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8c:	b085      	sub	sp, #20
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	0002      	movs	r2, r0
 8000e92:	6039      	str	r1, [r7, #0]
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 8000e98:	260f      	movs	r6, #15
 8000e9a:	19bc      	adds	r4, r7, r6
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	250e      	movs	r5, #14
 8000ea0:	1979      	adds	r1, r7, r5
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	202d      	movs	r0, #45	@ 0x2d
 8000ea6:	f7ff fb81 	bl	80005ac <bma400_get_regs>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8000eae:	0034      	movs	r4, r6
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d11c      	bne.n	8000ef4 <set_auto_wakeup+0x6a>
    {
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 8000eba:	0028      	movs	r0, r5
 8000ebc:	183b      	adds	r3, r7, r0
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	4393      	bics	r3, r2
 8000ec6:	b25a      	sxtb	r2, r3
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	18db      	adds	r3, r3, r3
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	400b      	ands	r3, r1
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	183b      	adds	r3, r7, r0
 8000ee0:	701a      	strb	r2, [r3, #0]

        /* Enabling the Auto wakeup interrupt */
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 8000ee2:	193c      	adds	r4, r7, r4
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	1839      	adds	r1, r7, r0
 8000ee8:	2201      	movs	r2, #1
 8000eea:	202d      	movs	r0, #45	@ 0x2d
 8000eec:	f7ff fae0 	bl	80004b0 <bma400_set_regs>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b25b      	sxtb	r3, r3
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b005      	add	sp, #20
 8000f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f04 <set_autowakeup_interrupt>:

static int8_t set_autowakeup_interrupt(const struct bma400_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[5] = { 0 };
 8000f0e:	2408      	movs	r4, #8
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	0018      	movs	r0, r3
 8000f14:	2305      	movs	r3, #5
 8000f16:	001a      	movs	r2, r3
 8000f18:	2100      	movs	r1, #0
 8000f1a:	f004 f8eb 	bl	80050f4 <memset>

    /* Set the wakeup reference update */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 8000f1e:	0020      	movs	r0, r4
 8000f20:	183b      	adds	r3, r7, r0
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	2203      	movs	r2, #3
 8000f28:	4393      	bics	r3, r2
 8000f2a:	b25a      	sxtb	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	2103      	movs	r1, #3
 8000f34:	400b      	ands	r3, r1
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	183b      	adds	r3, r7, r0
 8000f40:	701a      	strb	r2, [r3, #0]

    /* Set the number of samples for interrupt condition evaluation */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 8000f42:	183b      	adds	r3, r7, r0
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	221c      	movs	r2, #28
 8000f4a:	4393      	bics	r3, r2
 8000f4c:	b25a      	sxtb	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	785b      	ldrb	r3, [r3, #1]
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	211c      	movs	r1, #28
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	183b      	adds	r3, r7, r0
 8000f66:	701a      	strb	r2, [r3, #0]

    /* Enable low power wake-up interrupt for X,Y,Z axes*/
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 8000f68:	183b      	adds	r3, r7, r0
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	221f      	movs	r2, #31
 8000f70:	4013      	ands	r3, r2
 8000f72:	b25a      	sxtb	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	789b      	ldrb	r3, [r3, #2]
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	015b      	lsls	r3, r3, #5
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	0001      	movs	r1, r0
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	701a      	strb	r2, [r3, #0]

    /* Set interrupt threshold configuration  */
    data_array[1] = wakeup_conf->int_wkup_threshold;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	78da      	ldrb	r2, [r3, #3]
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	705a      	strb	r2, [r3, #1]

    /* Set the reference acceleration x-axis for the wake-up interrupt */
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	791a      	ldrb	r2, [r3, #4]
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	709a      	strb	r2, [r3, #2]

    /* Set the reference acceleration y-axis for the wake-up interrupt */
    data_array[3] = wakeup_conf->int_wkup_ref_y;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	795a      	ldrb	r2, [r3, #5]
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	70da      	strb	r2, [r3, #3]

    /* Set the reference acceleration z-axis for the wake-up interrupt */
    data_array[4] = wakeup_conf->int_wkup_ref_z;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	799a      	ldrb	r2, [r3, #6]
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	711a      	strb	r2, [r3, #4]

    /* Set the wakeup interrupt configurations in the sensor */
    rslt = bma400_set_regs(BMA400_REG_WAKEUP_INT_CONF_0, data_array, 5, dev);
 8000faa:	250f      	movs	r5, #15
 8000fac:	197c      	adds	r4, r7, r5
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	1879      	adds	r1, r7, r1
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	202f      	movs	r0, #47	@ 0x2f
 8000fb6:	f7ff fa7b 	bl	80004b0 <bma400_set_regs>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	7023      	strb	r3, [r4, #0]

    return rslt;
 8000fbe:	197b      	adds	r3, r7, r5
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b25b      	sxtb	r3, r3
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b004      	add	sp, #16
 8000fca:	bdb0      	pop	{r4, r5, r7, pc}

08000fcc <set_auto_low_power>:

    return rslt;
}

static int8_t set_auto_low_power(const struct bma400_auto_lp_conf *auto_lp_conf, struct bma400_dev *dev)
{
 8000fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t timeout_msb;
    uint8_t timeout_lsb;

    rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8000fd6:	250f      	movs	r5, #15
 8000fd8:	197c      	adds	r4, r7, r5
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	260d      	movs	r6, #13
 8000fde:	19b9      	adds	r1, r7, r6
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	202b      	movs	r0, #43	@ 0x2b
 8000fe4:	f7ff fae2 	bl	80005ac <bma400_get_regs>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8000fec:	0028      	movs	r0, r5
 8000fee:	183b      	adds	r3, r7, r0
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d15f      	bne.n	80010b8 <set_auto_low_power+0xec>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_AUTO_LOW_POW, auto_lp_conf->auto_low_power_trigger);
 8000ff8:	19bb      	adds	r3, r7, r6
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	220f      	movs	r2, #15
 8001000:	4393      	bics	r3, r2
 8001002:	b25a      	sxtb	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	210f      	movs	r1, #15
 800100c:	400b      	ands	r3, r1
 800100e:	b25b      	sxtb	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b25b      	sxtb	r3, r3
 8001014:	b2da      	uxtb	r2, r3
 8001016:	19bb      	adds	r3, r7, r6
 8001018:	701a      	strb	r2, [r3, #0]

        /* If auto Low power timeout threshold is enabled */
        if (auto_lp_conf->auto_low_power_trigger & 0x0C)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	001a      	movs	r2, r3
 8001020:	230c      	movs	r3, #12
 8001022:	4013      	ands	r3, r2
 8001024:	d038      	beq.n	8001098 <set_auto_low_power+0xcc>
        {
            rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8001026:	0005      	movs	r5, r0
 8001028:	183c      	adds	r4, r7, r0
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	220c      	movs	r2, #12
 800102e:	18b9      	adds	r1, r7, r2
 8001030:	2201      	movs	r2, #1
 8001032:	202a      	movs	r0, #42	@ 0x2a
 8001034:	f7ff faba 	bl	80005ac <bma400_get_regs>
 8001038:	0003      	movs	r3, r0
 800103a:	7023      	strb	r3, [r4, #0]
            if (rslt == BMA400_OK)
 800103c:	0028      	movs	r0, r5
 800103e:	183b      	adds	r3, r7, r0
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b25b      	sxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d127      	bne.n	8001098 <set_auto_low_power+0xcc>
            {
                /* Compute the timeout threshold MSB value */
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	885b      	ldrh	r3, [r3, #2]
 800104c:	111b      	asrs	r3, r3, #4
 800104e:	b2da      	uxtb	r2, r3
 8001050:	250c      	movs	r5, #12
 8001052:	197b      	adds	r3, r7, r5
 8001054:	701a      	strb	r2, [r3, #0]

                /* Compute the timeout threshold LSB value */
                timeout_lsb = BMA400_GET_BITS_POS_0(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES_LSB);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	885b      	ldrh	r3, [r3, #2]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	240e      	movs	r4, #14
 800105e:	193b      	adds	r3, r7, r4
 8001060:	210f      	movs	r1, #15
 8001062:	400a      	ands	r2, r1
 8001064:	701a      	strb	r2, [r3, #0]
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 8001066:	19bb      	adds	r3, r7, r6
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	220f      	movs	r2, #15
 800106e:	4013      	ands	r3, r2
 8001070:	b25a      	sxtb	r2, r3
 8001072:	193b      	adds	r3, r7, r4
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b25b      	sxtb	r3, r3
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	b25b      	sxtb	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b25b      	sxtb	r3, r3
 8001080:	b2da      	uxtb	r2, r3
 8001082:	19bb      	adds	r3, r7, r6
 8001084:	701a      	strb	r2, [r3, #0]

                /* Set the timeout threshold MSB value */
                rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8001086:	183c      	adds	r4, r7, r0
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	1979      	adds	r1, r7, r5
 800108c:	2201      	movs	r2, #1
 800108e:	202a      	movs	r0, #42	@ 0x2a
 8001090:	f7ff fa0e 	bl	80004b0 <bma400_set_regs>
 8001094:	0003      	movs	r3, r0
 8001096:	7023      	strb	r3, [r4, #0]
            }
        }

        if (rslt == BMA400_OK)
 8001098:	220f      	movs	r2, #15
 800109a:	18bb      	adds	r3, r7, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d109      	bne.n	80010b8 <set_auto_low_power+0xec>
        {
            /* Set the Auto low power configurations */
            rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 80010a4:	18bc      	adds	r4, r7, r2
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	220d      	movs	r2, #13
 80010aa:	18b9      	adds	r1, r7, r2
 80010ac:	2201      	movs	r2, #1
 80010ae:	202b      	movs	r0, #43	@ 0x2b
 80010b0:	f7ff f9fe 	bl	80004b0 <bma400_set_regs>
 80010b4:	0003      	movs	r3, r0
 80010b6:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b25b      	sxtb	r3, r3
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b005      	add	sp, #20
 80010c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010c8 <set_tap_conf>:

    return rslt;
}

static int8_t set_tap_conf(const struct bma400_tap_conf *tap_set, struct bma400_dev *dev)
{
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[2] = { 0, 0 };
 80010d2:	250c      	movs	r5, #12
 80010d4:	197b      	adds	r3, r7, r5
 80010d6:	2200      	movs	r2, #0
 80010d8:	801a      	strh	r2, [r3, #0]

    rslt = bma400_get_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 80010da:	260f      	movs	r6, #15
 80010dc:	19bc      	adds	r4, r7, r6
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	1979      	adds	r1, r7, r5
 80010e2:	2202      	movs	r2, #2
 80010e4:	2057      	movs	r0, #87	@ 0x57
 80010e6:	f7ff fa61 	bl	80005ac <bma400_get_regs>
 80010ea:	0003      	movs	r3, r0
 80010ec:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 80010ee:	0034      	movs	r4, r6
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d164      	bne.n	80011c4 <set_tap_conf+0xfc>
    {
        /* Set the axis to sense for tap */
        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_TAP_AXES_EN, tap_set->axes_sel);
 80010fa:	0028      	movs	r0, r5
 80010fc:	183b      	adds	r3, r7, r0
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b25b      	sxtb	r3, r3
 8001102:	2218      	movs	r2, #24
 8001104:	4393      	bics	r3, r2
 8001106:	b25a      	sxtb	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b25b      	sxtb	r3, r3
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	b25b      	sxtb	r3, r3
 8001112:	2118      	movs	r1, #24
 8001114:	400b      	ands	r3, r1
 8001116:	b25b      	sxtb	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b25b      	sxtb	r3, r3
 800111c:	b2da      	uxtb	r2, r3
 800111e:	183b      	adds	r3, r7, r0
 8001120:	701a      	strb	r2, [r3, #0]

        /* Set the threshold for tap sensing */
        reg_data[0] = BMA400_SET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY, tap_set->sensitivity);
 8001122:	183b      	adds	r3, r7, r0
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b25b      	sxtb	r3, r3
 8001128:	2207      	movs	r2, #7
 800112a:	4393      	bics	r3, r2
 800112c:	b25a      	sxtb	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	b25b      	sxtb	r3, r3
 8001134:	2107      	movs	r1, #7
 8001136:	400b      	ands	r3, r1
 8001138:	b25b      	sxtb	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b25b      	sxtb	r3, r3
 800113e:	b2da      	uxtb	r2, r3
 8001140:	183b      	adds	r3, r7, r0
 8001142:	701a      	strb	r2, [r3, #0]

        /* Set the Quiet_dt setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET_DT, tap_set->quiet_dt);
 8001144:	183b      	adds	r3, r7, r0
 8001146:	785b      	ldrb	r3, [r3, #1]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	2230      	movs	r2, #48	@ 0x30
 800114c:	4393      	bics	r3, r2
 800114e:	b25a      	sxtb	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	791b      	ldrb	r3, [r3, #4]
 8001154:	b25b      	sxtb	r3, r3
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	b25b      	sxtb	r3, r3
 800115a:	2130      	movs	r1, #48	@ 0x30
 800115c:	400b      	ands	r3, r1
 800115e:	b25b      	sxtb	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	b25b      	sxtb	r3, r3
 8001164:	b2da      	uxtb	r2, r3
 8001166:	183b      	adds	r3, r7, r0
 8001168:	705a      	strb	r2, [r3, #1]

        /* Set the Quiet setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET, tap_set->quiet);
 800116a:	183b      	adds	r3, r7, r0
 800116c:	785b      	ldrb	r3, [r3, #1]
 800116e:	b25b      	sxtb	r3, r3
 8001170:	220c      	movs	r2, #12
 8001172:	4393      	bics	r3, r2
 8001174:	b25a      	sxtb	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	78db      	ldrb	r3, [r3, #3]
 800117a:	b25b      	sxtb	r3, r3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	b25b      	sxtb	r3, r3
 8001180:	210c      	movs	r1, #12
 8001182:	400b      	ands	r3, r1
 8001184:	b25b      	sxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	b2da      	uxtb	r2, r3
 800118c:	183b      	adds	r3, r7, r0
 800118e:	705a      	strb	r2, [r3, #1]

        /* Set the tics_th setting */
        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH, tap_set->tics_th);
 8001190:	183b      	adds	r3, r7, r0
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	b25b      	sxtb	r3, r3
 8001196:	2203      	movs	r2, #3
 8001198:	4393      	bics	r3, r2
 800119a:	b25a      	sxtb	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	789b      	ldrb	r3, [r3, #2]
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	2103      	movs	r1, #3
 80011a4:	400b      	ands	r3, r1
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	183b      	adds	r3, r7, r0
 80011b0:	705a      	strb	r2, [r3, #1]

        /* Set the TAP configuration in the sensor*/
        rslt = bma400_set_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 80011b2:	193c      	adds	r4, r7, r4
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	1839      	adds	r1, r7, r0
 80011b8:	2202      	movs	r2, #2
 80011ba:	2057      	movs	r0, #87	@ 0x57
 80011bc:	f7ff f978 	bl	80004b0 <bma400_set_regs>
 80011c0:	0003      	movs	r3, r0
 80011c2:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b25b      	sxtb	r3, r3
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b005      	add	sp, #20
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011d4 <set_activity_change_conf>:

    return rslt;
}

static int8_t set_activity_change_conf(const struct bma400_act_ch_conf *act_ch_set, struct bma400_dev *dev)
{
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2] = { 0 };
 80011de:	200c      	movs	r0, #12
 80011e0:	183b      	adds	r3, r7, r0
 80011e2:	2200      	movs	r2, #0
 80011e4:	801a      	strh	r2, [r3, #0]

    /* Set the activity change threshold */
    data_array[0] = act_ch_set->act_ch_thres;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	183b      	adds	r3, r7, r0
 80011ec:	701a      	strb	r2, [r3, #0]

    /* Set the axis to sense for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN, act_ch_set->axes_sel);
 80011ee:	183b      	adds	r3, r7, r0
 80011f0:	785b      	ldrb	r3, [r3, #1]
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	221f      	movs	r2, #31
 80011f6:	4013      	ands	r3, r2
 80011f8:	b25a      	sxtb	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	785b      	ldrb	r3, [r3, #1]
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	015b      	lsls	r3, r3, #5
 8001202:	b25b      	sxtb	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b25b      	sxtb	r3, r3
 8001208:	b2da      	uxtb	r2, r3
 800120a:	183b      	adds	r3, r7, r0
 800120c:	705a      	strb	r2, [r3, #1]

    /* Set the data source for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC, act_ch_set->data_source);
 800120e:	183b      	adds	r3, r7, r0
 8001210:	785b      	ldrb	r3, [r3, #1]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	2210      	movs	r2, #16
 8001216:	4393      	bics	r3, r2
 8001218:	b25a      	sxtb	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	789b      	ldrb	r3, [r3, #2]
 800121e:	b25b      	sxtb	r3, r3
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	b25b      	sxtb	r3, r3
 8001224:	2110      	movs	r1, #16
 8001226:	400b      	ands	r3, r1
 8001228:	b25b      	sxtb	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b25b      	sxtb	r3, r3
 800122e:	b2da      	uxtb	r2, r3
 8001230:	183b      	adds	r3, r7, r0
 8001232:	705a      	strb	r2, [r3, #1]

    /* Set the Number of sample points(NPTS)
     * for sensing activity change
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 8001234:	183b      	adds	r3, r7, r0
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	b25b      	sxtb	r3, r3
 800123a:	220f      	movs	r2, #15
 800123c:	4393      	bics	r3, r2
 800123e:	b25a      	sxtb	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	78db      	ldrb	r3, [r3, #3]
 8001244:	b25b      	sxtb	r3, r3
 8001246:	210f      	movs	r1, #15
 8001248:	400b      	ands	r3, r1
 800124a:	b25b      	sxtb	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b25b      	sxtb	r3, r3
 8001250:	b2da      	uxtb	r2, r3
 8001252:	183b      	adds	r3, r7, r0
 8001254:	705a      	strb	r2, [r3, #1]

    /* Set the Activity change configuration in the sensor*/
    rslt = bma400_set_regs(BMA400_REG_ACT_CH_CONFIG_0, data_array, 2, dev);
 8001256:	250f      	movs	r5, #15
 8001258:	197c      	adds	r4, r7, r5
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	1839      	adds	r1, r7, r0
 800125e:	2202      	movs	r2, #2
 8001260:	2055      	movs	r0, #85	@ 0x55
 8001262:	f7ff f925 	bl	80004b0 <bma400_set_regs>
 8001266:	0003      	movs	r3, r0
 8001268:	7023      	strb	r3, [r4, #0]

    return rslt;
 800126a:	197b      	adds	r3, r7, r5
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b25b      	sxtb	r3, r3
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bdb0      	pop	{r4, r5, r7, pc}

08001278 <set_gen1_int>:

    return rslt;
}

static int8_t set_gen1_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 8001282:	240c      	movs	r4, #12
 8001284:	193b      	adds	r3, r7, r4
 8001286:	0018      	movs	r0, r3
 8001288:	230b      	movs	r3, #11
 800128a:	001a      	movs	r2, r3
 800128c:	2100      	movs	r1, #0
 800128e:	f003 ff31 	bl	80050f4 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8001292:	0020      	movs	r0, r4
 8001294:	183b      	adds	r3, r7, r0
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b25b      	sxtb	r3, r3
 800129a:	221f      	movs	r2, #31
 800129c:	4013      	ands	r3, r2
 800129e:	b25a      	sxtb	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	791b      	ldrb	r3, [r3, #4]
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	015b      	lsls	r3, r3, #5
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	183b      	adds	r3, r7, r0
 80012b2:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 80012b4:	183b      	adds	r3, r7, r0
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	2210      	movs	r2, #16
 80012bc:	4393      	bics	r3, r2
 80012be:	b25a      	sxtb	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	795b      	ldrb	r3, [r3, #5]
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	2110      	movs	r1, #16
 80012cc:	400b      	ands	r3, r1
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	183b      	adds	r3, r7, r0
 80012d8:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 80012da:	183b      	adds	r3, r7, r0
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	220c      	movs	r2, #12
 80012e2:	4393      	bics	r3, r2
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7a1b      	ldrb	r3, [r3, #8]
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	210c      	movs	r1, #12
 80012f2:	400b      	ands	r3, r1
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	183b      	adds	r3, r7, r0
 80012fe:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8001300:	183b      	adds	r3, r7, r0
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b25b      	sxtb	r3, r3
 8001306:	2203      	movs	r2, #3
 8001308:	4393      	bics	r3, r2
 800130a:	b25a      	sxtb	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7a5b      	ldrb	r3, [r3, #9]
 8001310:	b25b      	sxtb	r3, r3
 8001312:	2103      	movs	r1, #3
 8001314:	400b      	ands	r3, r1
 8001316:	b25b      	sxtb	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	b2da      	uxtb	r2, r3
 800131e:	183b      	adds	r3, r7, r0
 8001320:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8001322:	183b      	adds	r3, r7, r0
 8001324:	785b      	ldrb	r3, [r3, #1]
 8001326:	b25b      	sxtb	r3, r3
 8001328:	2202      	movs	r2, #2
 800132a:	4393      	bics	r3, r2
 800132c:	b25a      	sxtb	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	799b      	ldrb	r3, [r3, #6]
 8001332:	b25b      	sxtb	r3, r3
 8001334:	18db      	adds	r3, r3, r3
 8001336:	b25b      	sxtb	r3, r3
 8001338:	2102      	movs	r1, #2
 800133a:	400b      	ands	r3, r1
 800133c:	b25b      	sxtb	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b25b      	sxtb	r3, r3
 8001342:	b2da      	uxtb	r2, r3
 8001344:	183b      	adds	r3, r7, r0
 8001346:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8001348:	183b      	adds	r3, r7, r0
 800134a:	785b      	ldrb	r3, [r3, #1]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	2201      	movs	r2, #1
 8001350:	4393      	bics	r3, r2
 8001352:	b25a      	sxtb	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	79db      	ldrb	r3, [r3, #7]
 8001358:	b25b      	sxtb	r3, r3
 800135a:	2101      	movs	r1, #1
 800135c:	400b      	ands	r3, r1
 800135e:	b25b      	sxtb	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b25b      	sxtb	r3, r3
 8001364:	b2da      	uxtb	r2, r3
 8001366:	0001      	movs	r1, r0
 8001368:	187b      	adds	r3, r7, r1
 800136a:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	187b      	adds	r3, r7, r1
 8001372:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	885b      	ldrh	r3, [r3, #2]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2da      	uxtb	r2, r3
 800137e:	187b      	adds	r3, r7, r1
 8001380:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	885b      	ldrh	r3, [r3, #2]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	187b      	adds	r3, r7, r1
 800138a:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7a1b      	ldrb	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d12e      	bne.n	80013f2 <set_gen1_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	895b      	ldrh	r3, [r3, #10]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	187b      	adds	r3, r7, r1
 800139c:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	895b      	ldrh	r3, [r3, #10]
 80013a2:	0a1b      	lsrs	r3, r3, #8
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	899b      	ldrh	r3, [r3, #12]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	899b      	ldrh	r3, [r3, #12]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	89db      	ldrh	r3, [r3, #14]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	89db      	ldrh	r3, [r3, #14]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	729a      	strb	r2, [r3, #10]

        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 11, dev);
 80013dc:	2317      	movs	r3, #23
 80013de:	18fc      	adds	r4, r7, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	1879      	adds	r1, r7, r1
 80013e4:	220b      	movs	r2, #11
 80013e6:	203f      	movs	r0, #63	@ 0x3f
 80013e8:	f7ff f862 	bl	80004b0 <bma400_set_regs>
 80013ec:	0003      	movs	r3, r0
 80013ee:	7023      	strb	r3, [r4, #0]
 80013f0:	e00a      	b.n	8001408 <set_gen1_int+0x190>
    }
    else
    {
        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 5, dev);
 80013f2:	2317      	movs	r3, #23
 80013f4:	18fc      	adds	r4, r7, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	220c      	movs	r2, #12
 80013fa:	18b9      	adds	r1, r7, r2
 80013fc:	2205      	movs	r2, #5
 80013fe:	203f      	movs	r0, #63	@ 0x3f
 8001400:	f7ff f856 	bl	80004b0 <bma400_set_regs>
 8001404:	0003      	movs	r3, r0
 8001406:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001408:	2317      	movs	r3, #23
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
}
 8001410:	0018      	movs	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	b007      	add	sp, #28
 8001416:	bd90      	pop	{r4, r7, pc}

08001418 <set_gen2_int>:

    return rslt;
}

static int8_t set_gen2_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 8001422:	240c      	movs	r4, #12
 8001424:	193b      	adds	r3, r7, r4
 8001426:	0018      	movs	r0, r3
 8001428:	230b      	movs	r3, #11
 800142a:	001a      	movs	r2, r3
 800142c:	2100      	movs	r1, #0
 800142e:	f003 fe61 	bl	80050f4 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8001432:	0020      	movs	r0, r4
 8001434:	183b      	adds	r3, r7, r0
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b25b      	sxtb	r3, r3
 800143a:	221f      	movs	r2, #31
 800143c:	4013      	ands	r3, r2
 800143e:	b25a      	sxtb	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	b25b      	sxtb	r3, r3
 8001446:	015b      	lsls	r3, r3, #5
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2da      	uxtb	r2, r3
 8001450:	183b      	adds	r3, r7, r0
 8001452:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8001454:	183b      	adds	r3, r7, r0
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b25b      	sxtb	r3, r3
 800145a:	2210      	movs	r2, #16
 800145c:	4393      	bics	r3, r2
 800145e:	b25a      	sxtb	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	795b      	ldrb	r3, [r3, #5]
 8001464:	b25b      	sxtb	r3, r3
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	b25b      	sxtb	r3, r3
 800146a:	2110      	movs	r1, #16
 800146c:	400b      	ands	r3, r1
 800146e:	b25b      	sxtb	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b25b      	sxtb	r3, r3
 8001474:	b2da      	uxtb	r2, r3
 8001476:	183b      	adds	r3, r7, r0
 8001478:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 800147a:	183b      	adds	r3, r7, r0
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b25b      	sxtb	r3, r3
 8001480:	220c      	movs	r2, #12
 8001482:	4393      	bics	r3, r2
 8001484:	b25a      	sxtb	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7a1b      	ldrb	r3, [r3, #8]
 800148a:	b25b      	sxtb	r3, r3
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	b25b      	sxtb	r3, r3
 8001490:	210c      	movs	r1, #12
 8001492:	400b      	ands	r3, r1
 8001494:	b25b      	sxtb	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b25b      	sxtb	r3, r3
 800149a:	b2da      	uxtb	r2, r3
 800149c:	183b      	adds	r3, r7, r0
 800149e:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 80014a0:	183b      	adds	r3, r7, r0
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	2203      	movs	r2, #3
 80014a8:	4393      	bics	r3, r2
 80014aa:	b25a      	sxtb	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7a5b      	ldrb	r3, [r3, #9]
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	2103      	movs	r1, #3
 80014b4:	400b      	ands	r3, r1
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	183b      	adds	r3, r7, r0
 80014c0:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 80014c2:	183b      	adds	r3, r7, r0
 80014c4:	785b      	ldrb	r3, [r3, #1]
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	2202      	movs	r2, #2
 80014ca:	4393      	bics	r3, r2
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	799b      	ldrb	r3, [r3, #6]
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	18db      	adds	r3, r3, r3
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	2102      	movs	r1, #2
 80014da:	400b      	ands	r3, r1
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	183b      	adds	r3, r7, r0
 80014e6:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 80014e8:	183b      	adds	r3, r7, r0
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	2201      	movs	r2, #1
 80014f0:	4393      	bics	r3, r2
 80014f2:	b25a      	sxtb	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	79db      	ldrb	r3, [r3, #7]
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	2101      	movs	r1, #1
 80014fc:	400b      	ands	r3, r1
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b25b      	sxtb	r3, r3
 8001504:	b2da      	uxtb	r2, r3
 8001506:	0001      	movs	r1, r0
 8001508:	187b      	adds	r3, r7, r1
 800150a:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	187b      	adds	r3, r7, r1
 8001512:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	885b      	ldrh	r3, [r3, #2]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	b29b      	uxth	r3, r3
 800151c:	b2da      	uxtb	r2, r3
 800151e:	187b      	adds	r3, r7, r1
 8001520:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	885b      	ldrh	r3, [r3, #2]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	187b      	adds	r3, r7, r1
 800152a:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7a1b      	ldrb	r3, [r3, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d12e      	bne.n	8001592 <set_gen2_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	895b      	ldrh	r3, [r3, #10]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	187b      	adds	r3, r7, r1
 800153c:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	895b      	ldrh	r3, [r3, #10]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	b29b      	uxth	r3, r3
 8001546:	b2da      	uxtb	r2, r3
 8001548:	187b      	adds	r3, r7, r1
 800154a:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	899b      	ldrh	r3, [r3, #12]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	187b      	adds	r3, r7, r1
 8001554:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	899b      	ldrh	r3, [r3, #12]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	b29b      	uxth	r3, r3
 800155e:	b2da      	uxtb	r2, r3
 8001560:	187b      	adds	r3, r7, r1
 8001562:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	89db      	ldrh	r3, [r3, #14]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	187b      	adds	r3, r7, r1
 800156c:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	89db      	ldrh	r3, [r3, #14]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	b29b      	uxth	r3, r3
 8001576:	b2da      	uxtb	r2, r3
 8001578:	187b      	adds	r3, r7, r1
 800157a:	729a      	strb	r2, [r3, #10]

        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 11, dev);
 800157c:	2317      	movs	r3, #23
 800157e:	18fc      	adds	r4, r7, r3
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	1879      	adds	r1, r7, r1
 8001584:	220b      	movs	r2, #11
 8001586:	204a      	movs	r0, #74	@ 0x4a
 8001588:	f7fe ff92 	bl	80004b0 <bma400_set_regs>
 800158c:	0003      	movs	r3, r0
 800158e:	7023      	strb	r3, [r4, #0]
 8001590:	e00a      	b.n	80015a8 <set_gen2_int+0x190>
    }
    else
    {
        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 5, dev);
 8001592:	2317      	movs	r3, #23
 8001594:	18fc      	adds	r4, r7, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	220c      	movs	r2, #12
 800159a:	18b9      	adds	r1, r7, r2
 800159c:	2205      	movs	r2, #5
 800159e:	204a      	movs	r0, #74	@ 0x4a
 80015a0:	f7fe ff86 	bl	80004b0 <bma400_set_regs>
 80015a4:	0003      	movs	r3, r0
 80015a6:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80015a8:	2317      	movs	r3, #23
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b25b      	sxtb	r3, r3
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b007      	add	sp, #28
 80015b6:	bd90      	pop	{r4, r7, pc}

080015b8 <set_orient_int>:

    return rslt;
}

static int8_t set_orient_int(const struct bma400_orient_int_conf *orient_conf, struct bma400_dev *dev)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[10] = { 0 };
 80015c2:	240c      	movs	r4, #12
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	0018      	movs	r0, r3
 80015c8:	230a      	movs	r3, #10
 80015ca:	001a      	movs	r2, r3
 80015cc:	2100      	movs	r1, #0
 80015ce:	f003 fd91 	bl	80050f4 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 80015d2:	0020      	movs	r0, r4
 80015d4:	183b      	adds	r3, r7, r0
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	221f      	movs	r2, #31
 80015dc:	4013      	ands	r3, r2
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	183b      	adds	r3, r7, r0
 80015f2:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 80015f4:	183b      	adds	r3, r7, r0
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	2210      	movs	r2, #16
 80015fc:	4393      	bics	r3, r2
 80015fe:	b25a      	sxtb	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	785b      	ldrb	r3, [r3, #1]
 8001604:	b25b      	sxtb	r3, r3
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	b25b      	sxtb	r3, r3
 800160a:	2110      	movs	r1, #16
 800160c:	400b      	ands	r3, r1
 800160e:	b25b      	sxtb	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b25b      	sxtb	r3, r3
 8001614:	b2da      	uxtb	r2, r3
 8001616:	183b      	adds	r3, r7, r0
 8001618:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 800161a:	183b      	adds	r3, r7, r0
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b25b      	sxtb	r3, r3
 8001620:	220c      	movs	r2, #12
 8001622:	4393      	bics	r3, r2
 8001624:	b25a      	sxtb	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	789b      	ldrb	r3, [r3, #2]
 800162a:	b25b      	sxtb	r3, r3
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	b25b      	sxtb	r3, r3
 8001630:	210c      	movs	r1, #12
 8001632:	400b      	ands	r3, r1
 8001634:	b25b      	sxtb	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b25b      	sxtb	r3, r3
 800163a:	b2da      	uxtb	r2, r3
 800163c:	0001      	movs	r1, r0
 800163e:	187b      	adds	r3, r7, r1
 8001640:	701a      	strb	r2, [r3, #0]

    /* Set the threshold for interrupt calculation */
    data_array[1] = orient_conf->orient_thres;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	78da      	ldrb	r2, [r3, #3]
 8001646:	187b      	adds	r3, r7, r1
 8001648:	705a      	strb	r2, [r3, #1]

    /* Set the stability threshold */
    data_array[2] = orient_conf->stability_thres;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	791a      	ldrb	r2, [r3, #4]
 800164e:	187b      	adds	r3, r7, r1
 8001650:	709a      	strb	r2, [r3, #2]

    /* Set the interrupt duration */
    data_array[3] = orient_conf->orient_int_dur;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	795a      	ldrb	r2, [r3, #5]
 8001656:	187b      	adds	r3, r7, r1
 8001658:	70da      	strb	r2, [r3, #3]

    /* Handling case of manual reference update */
    if (orient_conf->ref_update == BMA400_UPDATE_MANUAL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	789b      	ldrb	r3, [r3, #2]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d12e      	bne.n	80016c0 <set_orient_int+0x108>
    {
        /* Set the LSB of reference x threshold */
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	88db      	ldrh	r3, [r3, #6]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	187b      	adds	r3, r7, r1
 800166a:	711a      	strb	r2, [r3, #4]

        /* Set the MSB of reference x threshold */
        data_array[5] = BMA400_GET_MSB(orient_conf->orient_ref_x);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	88db      	ldrh	r3, [r3, #6]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b29b      	uxth	r3, r3
 8001674:	b2da      	uxtb	r2, r3
 8001676:	187b      	adds	r3, r7, r1
 8001678:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	891b      	ldrh	r3, [r3, #8]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	187b      	adds	r3, r7, r1
 8001682:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_MSB(orient_conf->orient_ref_y);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	891b      	ldrh	r3, [r3, #8]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	b29b      	uxth	r3, r3
 800168c:	b2da      	uxtb	r2, r3
 800168e:	187b      	adds	r3, r7, r1
 8001690:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	895b      	ldrh	r3, [r3, #10]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	187b      	adds	r3, r7, r1
 800169a:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_MSB(orient_conf->orient_ref_z);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	895b      	ldrh	r3, [r3, #10]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	725a      	strb	r2, [r3, #9]

        /* Set the orient configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 10, dev);
 80016aa:	2317      	movs	r3, #23
 80016ac:	18fc      	adds	r4, r7, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	1879      	adds	r1, r7, r1
 80016b2:	220a      	movs	r2, #10
 80016b4:	2035      	movs	r0, #53	@ 0x35
 80016b6:	f7fe fefb 	bl	80004b0 <bma400_set_regs>
 80016ba:	0003      	movs	r3, r0
 80016bc:	7023      	strb	r3, [r4, #0]
 80016be:	e00a      	b.n	80016d6 <set_orient_int+0x11e>
    else
    {
        /* Set the orient configurations in the sensor excluding
         * reference values of x,y,z
         */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 4, dev);
 80016c0:	2317      	movs	r3, #23
 80016c2:	18fc      	adds	r4, r7, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	220c      	movs	r2, #12
 80016c8:	18b9      	adds	r1, r7, r2
 80016ca:	2204      	movs	r2, #4
 80016cc:	2035      	movs	r0, #53	@ 0x35
 80016ce:	f7fe feef 	bl	80004b0 <bma400_set_regs>
 80016d2:	0003      	movs	r3, r0
 80016d4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80016d6:	2317      	movs	r3, #23
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b25b      	sxtb	r3, r3
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b007      	add	sp, #28
 80016e4:	bd90      	pop	{r4, r7, pc}
	...

080016e8 <map_int_pin>:

    return rslt;
}

static void map_int_pin(uint8_t *data_array, uint8_t int_enable, enum bma400_int_chan int_map)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	0008      	movs	r0, r1
 80016f2:	0011      	movs	r1, r2
 80016f4:	1cfb      	adds	r3, r7, #3
 80016f6:	1c02      	adds	r2, r0, #0
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	1cbb      	adds	r3, r7, #2
 80016fc:	1c0a      	adds	r2, r1, #0
 80016fe:	701a      	strb	r2, [r3, #0]
    switch (int_enable)
 8001700:	1cfb      	adds	r3, r7, #3
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b0b      	cmp	r3, #11
 8001706:	d900      	bls.n	800170a <map_int_pin+0x22>
 8001708:	e2f3      	b.n	8001cf2 <map_int_pin+0x60a>
 800170a:	009a      	lsls	r2, r3, #2
 800170c:	4bc9      	ldr	r3, [pc, #804]	@ (8001a34 <map_int_pin+0x34c>)
 800170e:	18d3      	adds	r3, r2, r3
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	469f      	mov	pc, r3
    {
        case BMA400_DATA_READY_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001714:	1cbb      	adds	r3, r7, #2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d107      	bne.n	800172c <map_int_pin+0x44>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2280      	movs	r2, #128	@ 0x80
 8001722:	4252      	negs	r2, r2
 8001724:	4313      	orrs	r3, r2
 8001726:	b2da      	uxtb	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800172c:	1cbb      	adds	r3, r7, #2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d109      	bne.n	8001748 <map_int_pin+0x60>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3301      	adds	r3, #1
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3301      	adds	r3, #1
 800173e:	2180      	movs	r1, #128	@ 0x80
 8001740:	4249      	negs	r1, r1
 8001742:	430a      	orrs	r2, r1
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001748:	1cbb      	adds	r3, r7, #2
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10f      	bne.n	8001770 <map_int_pin+0x88>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_DRDY);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	227f      	movs	r2, #127	@ 0x7f
 8001756:	4013      	ands	r3, r2
 8001758:	b2da      	uxtb	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_DRDY);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3301      	adds	r3, #1
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3301      	adds	r3, #1
 8001768:	217f      	movs	r1, #127	@ 0x7f
 800176a:	400a      	ands	r2, r1
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001770:	1cbb      	adds	r3, r7, #2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d000      	beq.n	800177a <map_int_pin+0x92>
 8001778:	e2bd      	b.n	8001cf6 <map_int_pin+0x60e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2280      	movs	r2, #128	@ 0x80
 8001780:	4252      	negs	r2, r2
 8001782:	4313      	orrs	r3, r2
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3301      	adds	r3, #1
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3301      	adds	r3, #1
 8001794:	2180      	movs	r1, #128	@ 0x80
 8001796:	4249      	negs	r1, r1
 8001798:	430a      	orrs	r2, r1
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]
            }

            break;
 800179e:	e2aa      	b.n	8001cf6 <map_int_pin+0x60e>
        case BMA400_FIFO_WM_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80017a0:	1cbb      	adds	r3, r7, #2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <map_int_pin+0xce>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2240      	movs	r2, #64	@ 0x40
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80017b6:	1cbb      	adds	r3, r7, #2
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d108      	bne.n	80017d0 <map_int_pin+0xe8>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3301      	adds	r3, #1
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3301      	adds	r3, #1
 80017c8:	2140      	movs	r1, #64	@ 0x40
 80017ca:	430a      	orrs	r2, r1
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80017d0:	1cbb      	adds	r3, r7, #2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10f      	bne.n	80017f8 <map_int_pin+0x110>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_WM);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2240      	movs	r2, #64	@ 0x40
 80017de:	4393      	bics	r3, r2
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_WM);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3301      	adds	r3, #1
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3301      	adds	r3, #1
 80017f0:	2140      	movs	r1, #64	@ 0x40
 80017f2:	438a      	bics	r2, r1
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80017f8:	1cbb      	adds	r3, r7, #2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d000      	beq.n	8001802 <map_int_pin+0x11a>
 8001800:	e27b      	b.n	8001cfa <map_int_pin+0x612>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2240      	movs	r2, #64	@ 0x40
 8001808:	4313      	orrs	r3, r2
 800180a:	b2da      	uxtb	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3301      	adds	r3, #1
 8001814:	781a      	ldrb	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3301      	adds	r3, #1
 800181a:	2140      	movs	r1, #64	@ 0x40
 800181c:	430a      	orrs	r2, r1
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001822:	e26a      	b.n	8001cfa <map_int_pin+0x612>
        case BMA400_FIFO_FULL_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001824:	1cbb      	adds	r3, r7, #2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d106      	bne.n	800183a <map_int_pin+0x152>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2220      	movs	r2, #32
 8001832:	4313      	orrs	r3, r2
 8001834:	b2da      	uxtb	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800183a:	1cbb      	adds	r3, r7, #2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d108      	bne.n	8001854 <map_int_pin+0x16c>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3301      	adds	r3, #1
 8001846:	781a      	ldrb	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3301      	adds	r3, #1
 800184c:	2120      	movs	r1, #32
 800184e:	430a      	orrs	r2, r1
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001854:	1cbb      	adds	r3, r7, #2
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10f      	bne.n	800187c <map_int_pin+0x194>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2220      	movs	r2, #32
 8001862:	4393      	bics	r3, r2
 8001864:	b2da      	uxtb	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_FULL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3301      	adds	r3, #1
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3301      	adds	r3, #1
 8001874:	2120      	movs	r1, #32
 8001876:	438a      	bics	r2, r1
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800187c:	1cbb      	adds	r3, r7, #2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d000      	beq.n	8001886 <map_int_pin+0x19e>
 8001884:	e23b      	b.n	8001cfe <map_int_pin+0x616>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2220      	movs	r2, #32
 800188c:	4313      	orrs	r3, r2
 800188e:	b2da      	uxtb	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3301      	adds	r3, #1
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3301      	adds	r3, #1
 800189e:	2120      	movs	r1, #32
 80018a0:	430a      	orrs	r2, r1
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]
            }

            break;
 80018a6:	e22a      	b.n	8001cfe <map_int_pin+0x616>
        case BMA400_INT_OVERRUN_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80018a8:	1cbb      	adds	r3, r7, #2
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d106      	bne.n	80018be <map_int_pin+0x1d6>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2210      	movs	r2, #16
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80018be:	1cbb      	adds	r3, r7, #2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d108      	bne.n	80018d8 <map_int_pin+0x1f0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3301      	adds	r3, #1
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3301      	adds	r3, #1
 80018d0:	2110      	movs	r1, #16
 80018d2:	430a      	orrs	r2, r1
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80018d8:	1cbb      	adds	r3, r7, #2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10f      	bne.n	8001900 <map_int_pin+0x218>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_INT_OVERRUN);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2210      	movs	r2, #16
 80018e6:	4393      	bics	r3, r2
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_INT_OVERRUN);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3301      	adds	r3, #1
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3301      	adds	r3, #1
 80018f8:	2110      	movs	r1, #16
 80018fa:	438a      	bics	r2, r1
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001900:	1cbb      	adds	r3, r7, #2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d000      	beq.n	800190a <map_int_pin+0x222>
 8001908:	e1fb      	b.n	8001d02 <map_int_pin+0x61a>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2210      	movs	r2, #16
 8001910:	4313      	orrs	r3, r2
 8001912:	b2da      	uxtb	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3301      	adds	r3, #1
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3301      	adds	r3, #1
 8001922:	2110      	movs	r1, #16
 8001924:	430a      	orrs	r2, r1
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]
            }

            break;
 800192a:	e1ea      	b.n	8001d02 <map_int_pin+0x61a>
        case BMA400_GEN2_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 800192c:	1cbb      	adds	r3, r7, #2
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d106      	bne.n	8001942 <map_int_pin+0x25a>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2208      	movs	r2, #8
 800193a:	4313      	orrs	r3, r2
 800193c:	b2da      	uxtb	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001942:	1cbb      	adds	r3, r7, #2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d108      	bne.n	800195c <map_int_pin+0x274>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3301      	adds	r3, #1
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3301      	adds	r3, #1
 8001954:	2108      	movs	r1, #8
 8001956:	430a      	orrs	r2, r1
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 800195c:	1cbb      	adds	r3, r7, #2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10f      	bne.n	8001984 <map_int_pin+0x29c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN2);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2208      	movs	r2, #8
 800196a:	4393      	bics	r3, r2
 800196c:	b2da      	uxtb	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN2);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3301      	adds	r3, #1
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3301      	adds	r3, #1
 800197c:	2108      	movs	r1, #8
 800197e:	438a      	bics	r2, r1
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001984:	1cbb      	adds	r3, r7, #2
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d000      	beq.n	800198e <map_int_pin+0x2a6>
 800198c:	e1bb      	b.n	8001d06 <map_int_pin+0x61e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2208      	movs	r2, #8
 8001994:	4313      	orrs	r3, r2
 8001996:	b2da      	uxtb	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3301      	adds	r3, #1
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3301      	adds	r3, #1
 80019a6:	2108      	movs	r1, #8
 80019a8:	430a      	orrs	r2, r1
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]
            }

            break;
 80019ae:	e1aa      	b.n	8001d06 <map_int_pin+0x61e>
        case BMA400_GEN1_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80019b0:	1cbb      	adds	r3, r7, #2
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d106      	bne.n	80019c6 <map_int_pin+0x2de>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2204      	movs	r2, #4
 80019be:	4313      	orrs	r3, r2
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80019c6:	1cbb      	adds	r3, r7, #2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d108      	bne.n	80019e0 <map_int_pin+0x2f8>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3301      	adds	r3, #1
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3301      	adds	r3, #1
 80019d8:	2104      	movs	r1, #4
 80019da:	430a      	orrs	r2, r1
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80019e0:	1cbb      	adds	r3, r7, #2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10f      	bne.n	8001a08 <map_int_pin+0x320>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN1);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2204      	movs	r2, #4
 80019ee:	4393      	bics	r3, r2
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN1);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3301      	adds	r3, #1
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3301      	adds	r3, #1
 8001a00:	2104      	movs	r1, #4
 8001a02:	438a      	bics	r2, r1
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001a08:	1cbb      	adds	r3, r7, #2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d000      	beq.n	8001a12 <map_int_pin+0x32a>
 8001a10:	e17b      	b.n	8001d0a <map_int_pin+0x622>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2204      	movs	r2, #4
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3301      	adds	r3, #1
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001a32:	e16a      	b.n	8001d0a <map_int_pin+0x622>
 8001a34:	08005180 	.word	0x08005180
        case BMA400_ORIENT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001a38:	1cbb      	adds	r3, r7, #2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d106      	bne.n	8001a4e <map_int_pin+0x366>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2202      	movs	r2, #2
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001a4e:	1cbb      	adds	r3, r7, #2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d108      	bne.n	8001a68 <map_int_pin+0x380>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	2102      	movs	r1, #2
 8001a62:	430a      	orrs	r2, r1
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001a68:	1cbb      	adds	r3, r7, #2
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10f      	bne.n	8001a90 <map_int_pin+0x3a8>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2202      	movs	r2, #2
 8001a76:	4393      	bics	r3, r2
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_ORIENT_CH);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3301      	adds	r3, #1
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3301      	adds	r3, #1
 8001a88:	2102      	movs	r1, #2
 8001a8a:	438a      	bics	r2, r1
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001a90:	1cbb      	adds	r3, r7, #2
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d000      	beq.n	8001a9a <map_int_pin+0x3b2>
 8001a98:	e139      	b.n	8001d0e <map_int_pin+0x626>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001aba:	e128      	b.n	8001d0e <map_int_pin+0x626>
        case BMA400_WAKEUP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001abc:	1cbb      	adds	r3, r7, #2
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d106      	bne.n	8001ad2 <map_int_pin+0x3ea>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001ad2:	1cbb      	adds	r3, r7, #2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d108      	bne.n	8001aec <map_int_pin+0x404>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3301      	adds	r3, #1
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001aec:	1cbb      	adds	r3, r7, #2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10f      	bne.n	8001b14 <map_int_pin+0x42c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_WAKEUP_INT);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2201      	movs	r2, #1
 8001afa:	4393      	bics	r3, r2
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_WAKEUP_INT);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3301      	adds	r3, #1
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	438a      	bics	r2, r1
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001b14:	1cbb      	adds	r3, r7, #2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d000      	beq.n	8001b1e <map_int_pin+0x436>
 8001b1c:	e0f9      	b.n	8001d12 <map_int_pin+0x62a>
            {
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2201      	movs	r2, #1
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3301      	adds	r3, #1
 8001b36:	2101      	movs	r1, #1
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001b3e:	e0e8      	b.n	8001d12 <map_int_pin+0x62a>
        case BMA400_ACT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001b40:	1cbb      	adds	r3, r7, #2
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d108      	bne.n	8001b5a <map_int_pin+0x472>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3302      	adds	r3, #2
 8001b52:	2108      	movs	r1, #8
 8001b54:	430a      	orrs	r2, r1
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001b5a:	1cbb      	adds	r3, r7, #2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d109      	bne.n	8001b76 <map_int_pin+0x48e>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3302      	adds	r3, #2
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	2180      	movs	r1, #128	@ 0x80
 8001b6e:	4249      	negs	r1, r1
 8001b70:	430a      	orrs	r2, r1
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001b76:	1cbb      	adds	r3, r7, #2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d111      	bne.n	8001ba2 <map_int_pin+0x4ba>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3302      	adds	r3, #2
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3302      	adds	r3, #2
 8001b88:	2108      	movs	r1, #8
 8001b8a:	438a      	bics	r2, r1
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT2);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3302      	adds	r3, #2
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3302      	adds	r3, #2
 8001b9a:	217f      	movs	r1, #127	@ 0x7f
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001ba2:	1cbb      	adds	r3, r7, #2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d000      	beq.n	8001bac <map_int_pin+0x4c4>
 8001baa:	e0b4      	b.n	8001d16 <map_int_pin+0x62e>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3302      	adds	r3, #2
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	2108      	movs	r1, #8
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	2180      	movs	r1, #128	@ 0x80
 8001bca:	4249      	negs	r1, r1
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001bd2:	e0a0      	b.n	8001d16 <map_int_pin+0x62e>
        case BMA400_TAP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001bd4:	1cbb      	adds	r3, r7, #2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d108      	bne.n	8001bee <map_int_pin+0x506>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3302      	adds	r3, #2
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3302      	adds	r3, #2
 8001be6:	2104      	movs	r1, #4
 8001be8:	430a      	orrs	r2, r1
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001bee:	1cbb      	adds	r3, r7, #2
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d108      	bne.n	8001c08 <map_int_pin+0x520>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3302      	adds	r3, #2
 8001c00:	2140      	movs	r1, #64	@ 0x40
 8001c02:	430a      	orrs	r2, r1
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001c08:	1cbb      	adds	r3, r7, #2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d111      	bne.n	8001c34 <map_int_pin+0x54c>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT1);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3302      	adds	r3, #2
 8001c14:	781a      	ldrb	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3302      	adds	r3, #2
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT2);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3302      	adds	r3, #2
 8001c26:	781a      	ldrb	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	2140      	movs	r1, #64	@ 0x40
 8001c2e:	438a      	bics	r2, r1
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001c34:	1cbb      	adds	r3, r7, #2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d000      	beq.n	8001c3e <map_int_pin+0x556>
 8001c3c:	e06d      	b.n	8001d1a <map_int_pin+0x632>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3302      	adds	r3, #2
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3302      	adds	r3, #2
 8001c48:	2104      	movs	r1, #4
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3302      	adds	r3, #2
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3302      	adds	r3, #2
 8001c5a:	2140      	movs	r1, #64	@ 0x40
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001c62:	e05a      	b.n	8001d1a <map_int_pin+0x632>
        case BMA400_STEP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8001c64:	1cbb      	adds	r3, r7, #2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d108      	bne.n	8001c7e <map_int_pin+0x596>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3302      	adds	r3, #2
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3302      	adds	r3, #2
 8001c76:	2101      	movs	r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8001c7e:	1cbb      	adds	r3, r7, #2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d108      	bne.n	8001c98 <map_int_pin+0x5b0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3302      	adds	r3, #2
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3302      	adds	r3, #2
 8001c90:	2110      	movs	r1, #16
 8001c92:	430a      	orrs	r2, r1
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8001c98:	1cbb      	adds	r3, r7, #2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d111      	bne.n	8001cc4 <map_int_pin+0x5dc>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_EN_STEP_INT);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3302      	adds	r3, #2
 8001caa:	2101      	movs	r1, #1
 8001cac:	438a      	bics	r2, r1
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3302      	adds	r3, #2
 8001cbc:	2110      	movs	r1, #16
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8001cc4:	1cbb      	adds	r3, r7, #2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d128      	bne.n	8001d1e <map_int_pin+0x636>
            {
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3302      	adds	r3, #2
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	2110      	movs	r1, #16
 8001cea:	430a      	orrs	r2, r1
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001cf0:	e015      	b.n	8001d1e <map_int_pin+0x636>
        default:
            break;
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	e014      	b.n	8001d20 <map_int_pin+0x638>
            break;
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	e012      	b.n	8001d20 <map_int_pin+0x638>
            break;
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	e010      	b.n	8001d20 <map_int_pin+0x638>
            break;
 8001cfe:	46c0      	nop			@ (mov r8, r8)
 8001d00:	e00e      	b.n	8001d20 <map_int_pin+0x638>
            break;
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	e00c      	b.n	8001d20 <map_int_pin+0x638>
            break;
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	e00a      	b.n	8001d20 <map_int_pin+0x638>
            break;
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	e008      	b.n	8001d20 <map_int_pin+0x638>
            break;
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	e006      	b.n	8001d20 <map_int_pin+0x638>
            break;
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	e004      	b.n	8001d20 <map_int_pin+0x638>
            break;
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	e002      	b.n	8001d20 <map_int_pin+0x638>
            break;
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	e000      	b.n	8001d20 <map_int_pin+0x638>
            break;
 8001d1e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001d20:	46c0      	nop			@ (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <set_int_pin_conf>:
            break;
    }
}

static int8_t set_int_pin_conf(struct bma400_int_pin_conf int_conf, struct bma400_dev *dev)
{
 8001d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	8018      	strh	r0, [r3, #0]
 8001d32:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8001d34:	260f      	movs	r6, #15
 8001d36:	19bc      	adds	r4, r7, r6
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	250e      	movs	r5, #14
 8001d3c:	1979      	adds	r1, r7, r5
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2024      	movs	r0, #36	@ 0x24
 8001d42:	f7fe fc33 	bl	80005ac <bma400_get_regs>
 8001d46:	0003      	movs	r3, r0
 8001d48:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8001d4a:	19bb      	adds	r3, r7, r6
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d13a      	bne.n	8001dca <set_int_pin_conf+0xa2>
    {
        if (int_conf.int_chan == BMA400_INT_CHANNEL_1)
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d113      	bne.n	8001d84 <set_int_pin_conf+0x5c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
 8001d5c:	0028      	movs	r0, r5
 8001d5e:	183b      	adds	r3, r7, r0
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b25b      	sxtb	r3, r3
 8001d64:	2206      	movs	r2, #6
 8001d66:	4393      	bics	r3, r2
 8001d68:	b25a      	sxtb	r2, r3
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	785b      	ldrb	r3, [r3, #1]
 8001d6e:	b25b      	sxtb	r3, r3
 8001d70:	18db      	adds	r3, r3, r3
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	2106      	movs	r1, #6
 8001d76:	400b      	ands	r3, r1
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	183b      	adds	r3, r7, r0
 8001d82:	701a      	strb	r2, [r3, #0]
        }

        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d113      	bne.n	8001db4 <set_int_pin_conf+0x8c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 8001d8c:	200e      	movs	r0, #14
 8001d8e:	183b      	adds	r3, r7, r0
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	2260      	movs	r2, #96	@ 0x60
 8001d96:	4393      	bics	r3, r2
 8001d98:	b25a      	sxtb	r2, r3
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	015b      	lsls	r3, r3, #5
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	2160      	movs	r1, #96	@ 0x60
 8001da6:	400b      	ands	r3, r1
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	183b      	adds	r3, r7, r0
 8001db2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8001db4:	230f      	movs	r3, #15
 8001db6:	18fc      	adds	r4, r7, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	220e      	movs	r2, #14
 8001dbc:	18b9      	adds	r1, r7, r2
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2024      	movs	r0, #36	@ 0x24
 8001dc2:	f7fe fb75 	bl	80004b0 <bma400_set_regs>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001dca:	230f      	movs	r3, #15
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b25b      	sxtb	r3, r3
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b005      	add	sp, #20
 8001dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dda <set_fifo_conf>:

    return rslt;
}

static int8_t set_fifo_conf(const struct bma400_fifo_conf *fifo_conf, struct bma400_dev *dev)
{
 8001dda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ddc:	b085      	sub	sp, #20
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3];
    uint8_t sens_data[3];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001de4:	250f      	movs	r5, #15
 8001de6:	197c      	adds	r4, r7, r5
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f7fe fe68 	bl	8000ac0 <null_ptr_check>
 8001df0:	0003      	movs	r3, r0
 8001df2:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8001df4:	197b      	adds	r3, r7, r5
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d15b      	bne.n	8001eb6 <set_fifo_conf+0xdc>
    {
        /* Get the FIFO configurations and water-mark
         * values from the sensor
         */
        rslt = bma400_get_regs(BMA400_REG_FIFO_CONFIG_0, sens_data, 3, dev);
 8001dfe:	197c      	adds	r4, r7, r5
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2608      	movs	r6, #8
 8001e04:	19b9      	adds	r1, r7, r6
 8001e06:	2203      	movs	r2, #3
 8001e08:	2026      	movs	r0, #38	@ 0x26
 8001e0a:	f7fe fbcf 	bl	80005ac <bma400_get_regs>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8001e12:	197b      	adds	r3, r7, r5
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b25b      	sxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d14c      	bne.n	8001eb6 <set_fifo_conf+0xdc>
        {
            /* FIFO configurations */
            data_array[0] = fifo_conf->conf_regs;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	210c      	movs	r1, #12
 8001e22:	187b      	adds	r3, r7, r1
 8001e24:	701a      	strb	r2, [r3, #0]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	785b      	ldrb	r3, [r3, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10c      	bne.n	8001e48 <set_fifo_conf+0x6e>
            {
                /* Disable the selected interrupt status */
                data_array[0] = sens_data[0] & (~data_array[0]);
 8001e2e:	19bb      	adds	r3, r7, r6
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	187a      	adds	r2, r7, r1
 8001e36:	7812      	ldrb	r2, [r2, #0]
 8001e38:	b252      	sxtb	r2, r2
 8001e3a:	43d2      	mvns	r2, r2
 8001e3c:	b252      	sxtb	r2, r2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	701a      	strb	r2, [r3, #0]
            }

            /* FIFO water-mark values */
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	885b      	ldrh	r3, [r3, #2]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	210c      	movs	r1, #12
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	705a      	strb	r2, [r3, #1]
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	885b      	ldrh	r3, [r3, #2]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	709a      	strb	r2, [r3, #2]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	789b      	ldrb	r3, [r3, #2]
 8001e66:	2207      	movs	r2, #7
 8001e68:	4013      	ands	r3, r2
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	709a      	strb	r2, [r3, #2]
            if ((data_array[1] == sens_data[1]) && (data_array[2] == sens_data[2]))
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	785a      	ldrb	r2, [r3, #1]
 8001e74:	2008      	movs	r0, #8
 8001e76:	183b      	adds	r3, r7, r0
 8001e78:	785b      	ldrb	r3, [r3, #1]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d110      	bne.n	8001ea0 <set_fifo_conf+0xc6>
 8001e7e:	187b      	adds	r3, r7, r1
 8001e80:	789a      	ldrb	r2, [r3, #2]
 8001e82:	183b      	adds	r3, r7, r0
 8001e84:	789b      	ldrb	r3, [r3, #2]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d10a      	bne.n	8001ea0 <set_fifo_conf+0xc6>
            {
                /* Set the FIFO configurations in the
                 * sensor excluding the watermark value
                 */
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 1, dev);
 8001e8a:	230f      	movs	r3, #15
 8001e8c:	18fc      	adds	r4, r7, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	1879      	adds	r1, r7, r1
 8001e92:	2201      	movs	r2, #1
 8001e94:	2026      	movs	r0, #38	@ 0x26
 8001e96:	f7fe fb0b 	bl	80004b0 <bma400_set_regs>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	7023      	strb	r3, [r4, #0]
 8001e9e:	e00a      	b.n	8001eb6 <set_fifo_conf+0xdc>
            }
            else
            {
                /* Set the FIFO configurations in the sensor*/
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 3, dev);
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	18fc      	adds	r4, r7, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	18b9      	adds	r1, r7, r2
 8001eaa:	2203      	movs	r2, #3
 8001eac:	2026      	movs	r0, #38	@ 0x26
 8001eae:	f7fe faff 	bl	80004b0 <bma400_set_regs>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8001eb6:	230f      	movs	r3, #15
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b25b      	sxtb	r3, r3
}
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b005      	add	sp, #20
 8001ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ec6 <user_i2c_read>:

    return rslt;
}

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b08a      	sub	sp, #40	@ 0x28
 8001eca:	af04      	add	r7, sp, #16
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	1c02      	adds	r2, r0, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Read(hi2c, BMA400_I2C_ADDR, reg_addr,
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b299      	uxth	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	6978      	ldr	r0, [r7, #20]
 8001eea:	2201      	movs	r2, #1
 8001eec:	4252      	negs	r2, r2
 8001eee:	9202      	str	r2, [sp, #8]
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	000a      	movs	r2, r1
 8001efa:	2128      	movs	r1, #40	@ 0x28
 8001efc:	f001 f8de 	bl	80030bc <HAL_I2C_Mem_Read>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d101      	bne.n	8001f08 <user_i2c_read+0x42>
                         I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e001      	b.n	8001f0c <user_i2c_read+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	425b      	negs	r3, r3
    }
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b006      	add	sp, #24
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af04      	add	r7, sp, #16
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	210f      	movs	r1, #15
 8001f22:	187b      	adds	r3, r7, r1
 8001f24:	1c02      	adds	r2, r0, #0
 8001f26:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Write(hi2c, BMA400_I2C_ADDR, reg_addr,
 8001f2c:	187b      	adds	r3, r7, r1
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b299      	uxth	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4252      	negs	r2, r2
 8001f3c:	9202      	str	r2, [sp, #8]
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2301      	movs	r3, #1
 8001f46:	000a      	movs	r2, r1
 8001f48:	2128      	movs	r1, #40	@ 0x28
 8001f4a:	f000 ff89 	bl	8002e60 <HAL_I2C_Mem_Write>
 8001f4e:	1e03      	subs	r3, r0, #0
 8001f50:	d101      	bne.n	8001f56 <user_i2c_write+0x42>
                          I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e001      	b.n	8001f5a <user_i2c_write+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 8001f56:	2302      	movs	r3, #2
 8001f58:	425b      	negs	r3, r3
    }
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b006      	add	sp, #24
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
    // Zakładamy, że potrzebne opóźnienia mają ≥ 1000us (1ms)
    HAL_Delay(period / 1000);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	22fa      	movs	r2, #250	@ 0xfa
 8001f70:	0091      	lsls	r1, r2, #2
 8001f72:	0018      	movs	r0, r3
 8001f74:	f7fe f8c8 	bl	8000108 <__udivsi3>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f000 fc5a 	bl	8002834 <HAL_Delay>

    // Jeśli potrzebujesz dokładniejszych opóźnień — patrz niżej
}
 8001f80:	46c0      	nop			@ (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b08b      	sub	sp, #44	@ 0x2c
 8001f8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8e:	2414      	movs	r4, #20
 8001f90:	193b      	adds	r3, r7, r4
 8001f92:	0018      	movs	r0, r3
 8001f94:	2314      	movs	r3, #20
 8001f96:	001a      	movs	r2, r3
 8001f98:	2100      	movs	r1, #0
 8001f9a:	f003 f8ab 	bl	80050f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	4b38      	ldr	r3, [pc, #224]	@ (8002080 <MX_GPIO_Init+0xf8>)
 8001fa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fa2:	4b37      	ldr	r3, [pc, #220]	@ (8002080 <MX_GPIO_Init+0xf8>)
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001faa:	4b35      	ldr	r3, [pc, #212]	@ (8002080 <MX_GPIO_Init+0xf8>)
 8001fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fae:	2204      	movs	r2, #4
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fb6:	4b32      	ldr	r3, [pc, #200]	@ (8002080 <MX_GPIO_Init+0xf8>)
 8001fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fba:	4b31      	ldr	r3, [pc, #196]	@ (8002080 <MX_GPIO_Init+0xf8>)
 8001fbc:	2120      	movs	r1, #32
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002080 <MX_GPIO_Init+0xf8>)
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	4b2c      	ldr	r3, [pc, #176]	@ (8002080 <MX_GPIO_Init+0xf8>)
 8001fd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002080 <MX_GPIO_Init+0xf8>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fda:	4b29      	ldr	r3, [pc, #164]	@ (8002080 <MX_GPIO_Init+0xf8>)
 8001fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe6:	4b26      	ldr	r3, [pc, #152]	@ (8002080 <MX_GPIO_Init+0xf8>)
 8001fe8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fea:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <MX_GPIO_Init+0xf8>)
 8001fec:	2102      	movs	r1, #2
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ff2:	4b23      	ldr	r3, [pc, #140]	@ (8002080 <MX_GPIO_Init+0xf8>)
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_IO_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001ffe:	23d0      	movs	r3, #208	@ 0xd0
 8002000:	0059      	lsls	r1, r3, #1
 8002002:	23a0      	movs	r3, #160	@ 0xa0
 8002004:	05db      	lsls	r3, r3, #23
 8002006:	2200      	movs	r2, #0
 8002008:	0018      	movs	r0, r3
 800200a:	f000 fe65 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 800200e:	193b      	adds	r3, r7, r4
 8002010:	2204      	movs	r2, #4
 8002012:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002014:	193b      	adds	r3, r7, r4
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	193b      	adds	r3, r7, r4
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8002020:	193b      	adds	r3, r7, r4
 8002022:	4a18      	ldr	r2, [pc, #96]	@ (8002084 <MX_GPIO_Init+0xfc>)
 8002024:	0019      	movs	r1, r3
 8002026:	0010      	movs	r0, r2
 8002028:	f000 fcec 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_IO_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = EN_IO_Pin|LED1_Pin|LED2_Pin;
 800202c:	0021      	movs	r1, r4
 800202e:	187b      	adds	r3, r7, r1
 8002030:	22d0      	movs	r2, #208	@ 0xd0
 8002032:	0052      	lsls	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	000c      	movs	r4, r1
 8002038:	193b      	adds	r3, r7, r4
 800203a:	2201      	movs	r2, #1
 800203c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	193b      	adds	r3, r7, r4
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	193b      	adds	r3, r7, r4
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	193a      	adds	r2, r7, r4
 800204c:	23a0      	movs	r3, #160	@ 0xa0
 800204e:	05db      	lsls	r3, r3, #23
 8002050:	0011      	movs	r1, r2
 8002052:	0018      	movs	r0, r3
 8002054:	f000 fcd6 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002058:	193b      	adds	r3, r7, r4
 800205a:	2240      	movs	r2, #64	@ 0x40
 800205c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205e:	193b      	adds	r3, r7, r4
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002064:	193b      	adds	r3, r7, r4
 8002066:	2201      	movs	r2, #1
 8002068:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800206a:	193a      	adds	r2, r7, r4
 800206c:	23a0      	movs	r3, #160	@ 0xa0
 800206e:	05db      	lsls	r3, r3, #23
 8002070:	0011      	movs	r1, r2
 8002072:	0018      	movs	r0, r3
 8002074:	f000 fcc6 	bl	8002a04 <HAL_GPIO_Init>

}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b00b      	add	sp, #44	@ 0x2c
 800207e:	bd90      	pop	{r4, r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	50001400 	.word	0x50001400

08002088 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800208c:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <MX_I2C1_Init+0x74>)
 800208e:	4a1c      	ldr	r2, [pc, #112]	@ (8002100 <MX_I2C1_Init+0x78>)
 8002090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8002092:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <MX_I2C1_Init+0x74>)
 8002094:	4a1b      	ldr	r2, [pc, #108]	@ (8002104 <MX_I2C1_Init+0x7c>)
 8002096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002098:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <MX_I2C1_Init+0x74>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800209e:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020a4:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020aa:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020b0:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020b6:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020c2:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fe25 	bl	8002d14 <HAL_I2C_Init>
 80020ca:	1e03      	subs	r3, r0, #0
 80020cc:	d001      	beq.n	80020d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020ce:	f000 f9b7 	bl	8002440 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020d2:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020d4:	2100      	movs	r1, #0
 80020d6:	0018      	movs	r0, r3
 80020d8:	f001 fc20 	bl	800391c <HAL_I2CEx_ConfigAnalogFilter>
 80020dc:	1e03      	subs	r3, r0, #0
 80020de:	d001      	beq.n	80020e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020e0:	f000 f9ae 	bl	8002440 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <MX_I2C1_Init+0x74>)
 80020e6:	2100      	movs	r1, #0
 80020e8:	0018      	movs	r0, r3
 80020ea:	f001 fc63 	bl	80039b4 <HAL_I2CEx_ConfigDigitalFilter>
 80020ee:	1e03      	subs	r3, r0, #0
 80020f0:	d001      	beq.n	80020f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020f2:	f000 f9a5 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000028 	.word	0x20000028
 8002100:	40005400 	.word	0x40005400
 8002104:	00402d41 	.word	0x00402d41

08002108 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b091      	sub	sp, #68	@ 0x44
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	232c      	movs	r3, #44	@ 0x2c
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	0018      	movs	r0, r3
 8002116:	2314      	movs	r3, #20
 8002118:	001a      	movs	r2, r3
 800211a:	2100      	movs	r1, #0
 800211c:	f002 ffea 	bl	80050f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002120:	2410      	movs	r4, #16
 8002122:	193b      	adds	r3, r7, r4
 8002124:	0018      	movs	r0, r3
 8002126:	231c      	movs	r3, #28
 8002128:	001a      	movs	r2, r3
 800212a:	2100      	movs	r1, #0
 800212c:	f002 ffe2 	bl	80050f4 <memset>
  if(i2cHandle->Instance==I2C1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a22      	ldr	r2, [pc, #136]	@ (80021c0 <HAL_I2C_MspInit+0xb8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d13d      	bne.n	80021b6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800213a:	193b      	adds	r3, r7, r4
 800213c:	2202      	movs	r2, #2
 800213e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002140:	193b      	adds	r3, r7, r4
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002146:	193b      	adds	r3, r7, r4
 8002148:	0018      	movs	r0, r3
 800214a:	f002 f815 	bl	8004178 <HAL_RCCEx_PeriphCLKConfig>
 800214e:	1e03      	subs	r3, r0, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002152:	f000 f975 	bl	8002440 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_I2C_MspInit+0xbc>)
 8002158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <HAL_I2C_MspInit+0xbc>)
 800215c:	2102      	movs	r1, #2
 800215e:	430a      	orrs	r2, r1
 8002160:	635a      	str	r2, [r3, #52]	@ 0x34
 8002162:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <HAL_I2C_MspInit+0xbc>)
 8002164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002166:	2202      	movs	r2, #2
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800216e:	212c      	movs	r1, #44	@ 0x2c
 8002170:	187b      	adds	r3, r7, r1
 8002172:	22c0      	movs	r2, #192	@ 0xc0
 8002174:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002176:	187b      	adds	r3, r7, r1
 8002178:	2212      	movs	r2, #18
 800217a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800217c:	187b      	adds	r3, r7, r1
 800217e:	2201      	movs	r2, #1
 8002180:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	187b      	adds	r3, r7, r1
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002188:	187b      	adds	r3, r7, r1
 800218a:	2206      	movs	r2, #6
 800218c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218e:	187b      	adds	r3, r7, r1
 8002190:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <HAL_I2C_MspInit+0xc0>)
 8002192:	0019      	movs	r1, r3
 8002194:	0010      	movs	r0, r2
 8002196:	f000 fc35 	bl	8002a04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_I2C_MspInit+0xbc>)
 800219c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <HAL_I2C_MspInit+0xbc>)
 80021a0:	2180      	movs	r1, #128	@ 0x80
 80021a2:	0389      	lsls	r1, r1, #14
 80021a4:	430a      	orrs	r2, r1
 80021a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_I2C_MspInit+0xbc>)
 80021aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	039b      	lsls	r3, r3, #14
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b011      	add	sp, #68	@ 0x44
 80021bc:	bd90      	pop	{r4, r7, pc}
 80021be:	46c0      	nop			@ (mov r8, r8)
 80021c0:	40005400 	.word	0x40005400
 80021c4:	40021000 	.word	0x40021000
 80021c8:	50000400 	.word	0x50000400

080021cc <enterStandby>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enterStandby(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <enterStandby+0x1c>)
 80021d2:	4a06      	ldr	r2, [pc, #24]	@ (80021ec <enterStandby+0x20>)
 80021d4:	619a      	str	r2, [r3, #24]
  	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f001 fc38 	bl	8003a4c <HAL_PWR_EnableWakeUpPin>
    HAL_PWR_EnterSTANDBYMode();
 80021dc:	f001 fc56 	bl	8003a8c <HAL_PWR_EnterSTANDBYMode>
}
 80021e0:	46c0      	nop			@ (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	40007000 	.word	0x40007000
 80021ec:	0001002f 	.word	0x0001002f

080021f0 <configureBMA400>:

void configureBMA400(struct bma400_dev *dev)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b090      	sub	sp, #64	@ 0x40
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    uint8_t rslt;
    struct bma400_device_conf dev_conf[3];
    struct bma400_sensor_conf sensor_conf;

    // Set initial power mode to low power
    rslt = bma400_set_power_mode(BMA400_MODE_LOW_POWER, dev);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0019      	movs	r1, r3
 80021fc:	2001      	movs	r0, #1
 80021fe:	f7fe fa43 	bl	8000688 <bma400_set_power_mode>
 8002202:	0003      	movs	r3, r0
 8002204:	001a      	movs	r2, r3
 8002206:	213f      	movs	r1, #63	@ 0x3f
 8002208:	187b      	adds	r3, r7, r1
 800220a:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 800220c:	187b      	adds	r3, r7, r1
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <configureBMA400+0x28>
    {
        Error_Handler();
 8002214:	f000 f914 	bl	8002440 <Error_Handler>
    }

    // auto low power after movement stops (1 s)
    dev_conf[0].type = BMA400_AUTO_LOW_POWER;
 8002218:	2120      	movs	r1, #32
 800221a:	187b      	adds	r3, r7, r1
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
    dev_conf[0].param.auto_lp.auto_low_power_trigger =
 8002220:	187b      	adds	r3, r7, r1
 8002222:	220e      	movs	r2, #14
 8002224:	709a      	strb	r2, [r3, #2]
        BMA400_AUTO_LP_GEN1_TRIGGER | BMA400_AUTO_LP_TIMEOUT_EN | BMA400_AUTO_LP_TIME_RESET_EN;
    dev_conf[0].param.auto_lp.auto_lp_timeout_threshold = 400; // 400 × 2.5 ms = 1 s
 8002226:	187b      	adds	r3, r7, r1
 8002228:	22c8      	movs	r2, #200	@ 0xc8
 800222a:	0052      	lsls	r2, r2, #1
 800222c:	809a      	strh	r2, [r3, #4]

    // wake-up interrupt on motion detection on Z axe
    dev_conf[1].type = BMA400_AUTOWAKEUP_INT;
 800222e:	187b      	adds	r3, r7, r1
 8002230:	2201      	movs	r2, #1
 8002232:	729a      	strb	r2, [r3, #10]
    dev_conf[1].param.wakeup.wakeup_ref_update = BMA400_UPDATE_ONE_TIME;
 8002234:	187b      	adds	r3, r7, r1
 8002236:	2201      	movs	r2, #1
 8002238:	731a      	strb	r2, [r3, #12]
    dev_conf[1].param.wakeup.sample_count = BMA400_SAMPLE_COUNT_1;
 800223a:	187b      	adds	r3, r7, r1
 800223c:	2200      	movs	r2, #0
 800223e:	735a      	strb	r2, [r3, #13]
    dev_conf[1].param.wakeup.wakeup_axes_en = BMA400_AXIS_Z_EN;
 8002240:	187b      	adds	r3, r7, r1
 8002242:	2204      	movs	r2, #4
 8002244:	739a      	strb	r2, [r3, #14]
    dev_conf[1].param.wakeup.int_wkup_threshold = 3;	// mg threshold
 8002246:	187b      	adds	r3, r7, r1
 8002248:	2203      	movs	r2, #3
 800224a:	73da      	strb	r2, [r3, #15]
    dev_conf[1].param.wakeup.int_wkup_ref_z = 0;
 800224c:	187b      	adds	r3, r7, r1
 800224e:	2200      	movs	r2, #0
 8002250:	749a      	strb	r2, [r3, #18]
    dev_conf[1].param.wakeup.int_chan = BMA400_INT_CHANNEL_1;
 8002252:	187b      	adds	r3, r7, r1
 8002254:	2201      	movs	r2, #1
 8002256:	74da      	strb	r2, [r3, #19]

    dev_conf[2].type = BMA400_INT_PIN_CONF;
 8002258:	187b      	adds	r3, r7, r1
 800225a:	2203      	movs	r2, #3
 800225c:	751a      	strb	r2, [r3, #20]
    dev_conf[2].param.int_conf.int_chan = BMA400_INT_CHANNEL_1;
 800225e:	187b      	adds	r3, r7, r1
 8002260:	2201      	movs	r2, #1
 8002262:	759a      	strb	r2, [r3, #22]
    dev_conf[2].param.int_conf.pin_conf = BMA400_INT_OPEN_DRAIN_ACTIVE_0;
 8002264:	187b      	adds	r3, r7, r1
 8002266:	2202      	movs	r2, #2
 8002268:	75da      	strb	r2, [r3, #23]

    rslt = bma400_set_device_conf(dev_conf, 3, dev);
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	187b      	adds	r3, r7, r1
 800226e:	2103      	movs	r1, #3
 8002270:	0018      	movs	r0, r3
 8002272:	f7fe fae9 	bl	8000848 <bma400_set_device_conf>
 8002276:	0003      	movs	r3, r0
 8002278:	001a      	movs	r2, r3
 800227a:	213f      	movs	r1, #63	@ 0x3f
 800227c:	187b      	adds	r3, r7, r1
 800227e:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 8002280:	187b      	adds	r3, r7, r1
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <configureBMA400+0x9c>
    {
        Error_Handler();
 8002288:	f000 f8da 	bl	8002440 <Error_Handler>
    }

    // configure accelerometer
    sensor_conf.type = BMA400_ACCEL;
 800228c:	210c      	movs	r1, #12
 800228e:	187b      	adds	r3, r7, r1
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
    sensor_conf.param.accel.odr = BMA400_ODR_100HZ;
 8002294:	187b      	adds	r3, r7, r1
 8002296:	2208      	movs	r2, #8
 8002298:	709a      	strb	r2, [r3, #2]
    sensor_conf.param.accel.range = BMA400_RANGE_2G;
 800229a:	187b      	adds	r3, r7, r1
 800229c:	2200      	movs	r2, #0
 800229e:	70da      	strb	r2, [r3, #3]
    sensor_conf.param.accel.data_src = BMA400_DATA_SRC_ACCEL_FILT_LP;
 80022a0:	187b      	adds	r3, r7, r1
 80022a2:	2202      	movs	r2, #2
 80022a4:	711a      	strb	r2, [r3, #4]
    sensor_conf.param.accel.osr = BMA400_ACCEL_OSR_SETTING_3;
 80022a6:	187b      	adds	r3, r7, r1
 80022a8:	2203      	movs	r2, #3
 80022aa:	715a      	strb	r2, [r3, #5]
    sensor_conf.param.accel.filt1_bw = BMA400_ACCEL_FILT1_BW_0;
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	2200      	movs	r2, #0
 80022b0:	71da      	strb	r2, [r3, #7]

    rslt = bma400_set_sensor_conf(&sensor_conf, 1, dev);
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	187b      	adds	r3, r7, r1
 80022b6:	2101      	movs	r1, #1
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7fe fa47 	bl	800074c <bma400_set_sensor_conf>
 80022be:	0003      	movs	r3, r0
 80022c0:	001a      	movs	r2, r3
 80022c2:	213f      	movs	r1, #63	@ 0x3f
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK) Error_Handler();
 80022c8:	187b      	adds	r3, r7, r1
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <configureBMA400+0xe4>
 80022d0:	f000 f8b6 	bl	8002440 <Error_Handler>

    // enable auto wakeup
    rslt = set_auto_wakeup(BMA400_ENABLE, dev);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	0019      	movs	r1, r3
 80022d8:	2001      	movs	r0, #1
 80022da:	f7fe fdd6 	bl	8000e8a <set_auto_wakeup>
 80022de:	0003      	movs	r3, r0
 80022e0:	001a      	movs	r2, r3
 80022e2:	213f      	movs	r1, #63	@ 0x3f
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <configureBMA400+0x104>
    {
        Error_Handler();
 80022f0:	f000 f8a6 	bl	8002440 <Error_Handler>
    }
}
 80022f4:	46c0      	nop			@ (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b010      	add	sp, #64	@ 0x40
 80022fa:	bd80      	pop	{r7, pc}

080022fc <receiveTestByte>:

	HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, RESET);
}

void receiveTestByte(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, GPIO_PIN_SET);
 8002302:	23a0      	movs	r3, #160	@ 0xa0
 8002304:	05db      	lsls	r3, r3, #23
 8002306:	2201      	movs	r2, #1
 8002308:	2120      	movs	r1, #32
 800230a:	0018      	movs	r0, r3
 800230c:	f000 fce4 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8002310:	20c8      	movs	r0, #200	@ 0xc8
 8002312:	f000 fa8f 	bl	8002834 <HAL_Delay>

    uint8_t test;
    HAL_UART_Receive(&huart1, &test, 1, HAL_MAX_DELAY);
 8002316:	2301      	movs	r3, #1
 8002318:	425b      	negs	r3, r3
 800231a:	1df9      	adds	r1, r7, #7
 800231c:	4807      	ldr	r0, [pc, #28]	@ (800233c <receiveTestByte+0x40>)
 800231e:	2201      	movs	r2, #1
 8002320:	f002 f936 	bl	8004590 <HAL_UART_Receive>

    HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, GPIO_PIN_RESET);
 8002324:	23a0      	movs	r3, #160	@ 0xa0
 8002326:	05db      	lsls	r3, r3, #23
 8002328:	2200      	movs	r2, #0
 800232a:	2120      	movs	r1, #32
 800232c:	0018      	movs	r0, r3
 800232e:	f000 fcd3 	bl	8002cd8 <HAL_GPIO_WritePin>
}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	200000c8 	.word	0x200000c8

08002340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	struct bma400_dev bma400;

	bma400.intf = BMA400_I2C_INTF;
 8002346:	003b      	movs	r3, r7
 8002348:	2201      	movs	r2, #1
 800234a:	705a      	strb	r2, [r3, #1]
	bma400.intf_ptr = &hi2c1;
 800234c:	003b      	movs	r3, r7
 800234e:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <main+0x58>)
 8002350:	605a      	str	r2, [r3, #4]
	bma400.read = user_i2c_read;
 8002352:	003b      	movs	r3, r7
 8002354:	4a11      	ldr	r2, [pc, #68]	@ (800239c <main+0x5c>)
 8002356:	60da      	str	r2, [r3, #12]
	bma400.write = user_i2c_write;
 8002358:	003b      	movs	r3, r7
 800235a:	4a11      	ldr	r2, [pc, #68]	@ (80023a0 <main+0x60>)
 800235c:	611a      	str	r2, [r3, #16]
	bma400.delay_us = user_delay_us;
 800235e:	003b      	movs	r3, r7
 8002360:	4a10      	ldr	r2, [pc, #64]	@ (80023a4 <main+0x64>)
 8002362:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002364:	f000 f9e9 	bl	800273a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002368:	f000 f81e 	bl	80023a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800236c:	f7ff fe0c 	bl	8001f88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002370:	f7ff fe8a 	bl	8002088 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002374:	f000 f904 	bl	8002580 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8002378:	f000 f8be 	bl	80024f8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); // dbg - check power mode state
  bma400_init(&bma400);
 800237c:	003b      	movs	r3, r7
 800237e:	0018      	movs	r0, r3
 8002380:	f7fe f838 	bl	80003f4 <bma400_init>
  configureBMA400(&bma400);
 8002384:	003b      	movs	r3, r7
 8002386:	0018      	movs	r0, r3
 8002388:	f7ff ff32 	bl	80021f0 <configureBMA400>

  receiveTestByte();
 800238c:	f7ff ffb6 	bl	80022fc <receiveTestByte>
	  snprintf(msg, sizeof(msg), "%d\n", percent_open);
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// send data to esp

	  HAL_GPIO_WritePin(EN_IO_GPIO_Port, EN_IO_Pin, RESET);*/

	  enterStandby();
 8002390:	f7ff ff1c 	bl	80021cc <enterStandby>
 8002394:	e7fc      	b.n	8002390 <main+0x50>
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	20000028 	.word	0x20000028
 800239c:	08001ec7 	.word	0x08001ec7
 80023a0:	08001f15 	.word	0x08001f15
 80023a4:	08001f63 	.word	0x08001f63

080023a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b08d      	sub	sp, #52	@ 0x34
 80023ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ae:	2414      	movs	r4, #20
 80023b0:	193b      	adds	r3, r7, r4
 80023b2:	0018      	movs	r0, r3
 80023b4:	231c      	movs	r3, #28
 80023b6:	001a      	movs	r2, r3
 80023b8:	2100      	movs	r1, #0
 80023ba:	f002 fe9b 	bl	80050f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023be:	003b      	movs	r3, r7
 80023c0:	0018      	movs	r0, r3
 80023c2:	2314      	movs	r3, #20
 80023c4:	001a      	movs	r2, r3
 80023c6:	2100      	movs	r1, #0
 80023c8:	f002 fe94 	bl	80050f4 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <SystemClock_Config+0x94>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <SystemClock_Config+0x94>)
 80023d2:	2107      	movs	r1, #7
 80023d4:	438a      	bics	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023d8:	193b      	adds	r3, r7, r4
 80023da:	2202      	movs	r2, #2
 80023dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023de:	193b      	adds	r3, r7, r4
 80023e0:	2280      	movs	r2, #128	@ 0x80
 80023e2:	0052      	lsls	r2, r2, #1
 80023e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80023e6:	193b      	adds	r3, r7, r4
 80023e8:	2280      	movs	r2, #128	@ 0x80
 80023ea:	0152      	lsls	r2, r2, #5
 80023ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023ee:	193b      	adds	r3, r7, r4
 80023f0:	2240      	movs	r2, #64	@ 0x40
 80023f2:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f4:	193b      	adds	r3, r7, r4
 80023f6:	0018      	movs	r0, r3
 80023f8:	f001 fb62 	bl	8003ac0 <HAL_RCC_OscConfig>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d001      	beq.n	8002404 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002400:	f000 f81e 	bl	8002440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002404:	003b      	movs	r3, r7
 8002406:	2207      	movs	r2, #7
 8002408:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800240a:	003b      	movs	r3, r7
 800240c:	2200      	movs	r2, #0
 800240e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002410:	003b      	movs	r3, r7
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002416:	003b      	movs	r3, r7
 8002418:	2200      	movs	r2, #0
 800241a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800241c:	003b      	movs	r3, r7
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002422:	003b      	movs	r3, r7
 8002424:	2100      	movs	r1, #0
 8002426:	0018      	movs	r0, r3
 8002428:	f001 fd2e 	bl	8003e88 <HAL_RCC_ClockConfig>
 800242c:	1e03      	subs	r3, r0, #0
 800242e:	d001      	beq.n	8002434 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002430:	f000 f806 	bl	8002440 <Error_Handler>
  }
}
 8002434:	46c0      	nop			@ (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b00d      	add	sp, #52	@ 0x34
 800243a:	bd90      	pop	{r4, r7, pc}
 800243c:	40022000 	.word	0x40022000

08002440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	0059      	lsls	r1, r3, #1
 8002448:	23a0      	movs	r3, #160	@ 0xa0
 800244a:	05db      	lsls	r3, r3, #23
 800244c:	2201      	movs	r2, #1
 800244e:	0018      	movs	r0, r3
 8002450:	f000 fc42 	bl	8002cd8 <HAL_GPIO_WritePin>
  while (1)
 8002454:	46c0      	nop			@ (mov r8, r8)
 8002456:	e7fd      	b.n	8002454 <Error_Handler+0x14>

08002458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_MspInit+0x50>)
 8002460:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_MspInit+0x50>)
 8002464:	2101      	movs	r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	641a      	str	r2, [r3, #64]	@ 0x40
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <HAL_MspInit+0x50>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	2201      	movs	r2, #1
 8002470:	4013      	ands	r3, r2
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <HAL_MspInit+0x50>)
 8002478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800247a:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <HAL_MspInit+0x50>)
 800247c:	2180      	movs	r1, #128	@ 0x80
 800247e:	0549      	lsls	r1, r1, #21
 8002480:	430a      	orrs	r2, r1
 8002482:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002484:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <HAL_MspInit+0x50>)
 8002486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002488:	2380      	movs	r3, #128	@ 0x80
 800248a:	055b      	lsls	r3, r3, #21
 800248c:	4013      	ands	r3, r2
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8002492:	2008      	movs	r0, #8
 8002494:	f000 f9f2 	bl	800287c <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8002498:	2010      	movs	r0, #16
 800249a:	f000 f9ef 	bl	800287c <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b002      	add	sp, #8
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	40021000 	.word	0x40021000

080024ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024b0:	46c0      	nop			@ (mov r8, r8)
 80024b2:	e7fd      	b.n	80024b0 <NMI_Handler+0x4>

080024b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b8:	46c0      	nop			@ (mov r8, r8)
 80024ba:	e7fd      	b.n	80024b8 <HardFault_Handler+0x4>

080024bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d4:	f000 f992 	bl	80027fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d8:	46c0      	nop			@ (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024e4:	4b03      	ldr	r3, [pc, #12]	@ (80024f4 <SystemInit+0x14>)
 80024e6:	2280      	movs	r2, #128	@ 0x80
 80024e8:	0512      	lsls	r2, r2, #20
 80024ea:	609a      	str	r2, [r3, #8]
#endif
}
 80024ec:	46c0      	nop			@ (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80024fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002538 <MX_TIM14_Init+0x40>)
 80024fe:	4a0f      	ldr	r2, [pc, #60]	@ (800253c <MX_TIM14_Init+0x44>)
 8002500:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 8002502:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <MX_TIM14_Init+0x40>)
 8002504:	2263      	movs	r2, #99	@ 0x63
 8002506:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002508:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <MX_TIM14_Init+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 119;
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <MX_TIM14_Init+0x40>)
 8002510:	2277      	movs	r2, #119	@ 0x77
 8002512:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <MX_TIM14_Init+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <MX_TIM14_Init+0x40>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <MX_TIM14_Init+0x40>)
 8002522:	0018      	movs	r0, r3
 8002524:	f001 ff14 	bl	8004350 <HAL_TIM_Base_Init>
 8002528:	1e03      	subs	r3, r0, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800252c:	f7ff ff88 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002530:	46c0      	nop			@ (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	2000007c 	.word	0x2000007c
 800253c:	40002000 	.word	0x40002000

08002540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <HAL_TIM_Base_MspInit+0x38>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10d      	bne.n	800256e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002552:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <HAL_TIM_Base_MspInit+0x3c>)
 8002554:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <HAL_TIM_Base_MspInit+0x3c>)
 8002558:	2180      	movs	r1, #128	@ 0x80
 800255a:	0209      	lsls	r1, r1, #8
 800255c:	430a      	orrs	r2, r1
 800255e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_TIM_Base_MspInit+0x3c>)
 8002562:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002564:	2380      	movs	r3, #128	@ 0x80
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	4013      	ands	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b004      	add	sp, #16
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			@ (mov r8, r8)
 8002578:	40002000 	.word	0x40002000
 800257c:	40021000 	.word	0x40021000

08002580 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002584:	4b25      	ldr	r3, [pc, #148]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 8002586:	4a26      	ldr	r2, [pc, #152]	@ (8002620 <MX_USART1_UART_Init+0xa0>)
 8002588:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800258a:	4b24      	ldr	r3, [pc, #144]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 800258c:	22e1      	movs	r2, #225	@ 0xe1
 800258e:	0252      	lsls	r2, r2, #9
 8002590:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002592:	4b22      	ldr	r3, [pc, #136]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002598:	4b20      	ldr	r3, [pc, #128]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800259e:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025a4:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 80025a6:	220c      	movs	r2, #12
 80025a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025b6:	4b19      	ldr	r3, [pc, #100]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025bc:	4b17      	ldr	r3, [pc, #92]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80025c2:	4b16      	ldr	r3, [pc, #88]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 80025c4:	2208      	movs	r2, #8
 80025c6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80025c8:	4b14      	ldr	r3, [pc, #80]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 80025ca:	2280      	movs	r2, #128	@ 0x80
 80025cc:	0212      	lsls	r2, r2, #8
 80025ce:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025d0:	4b12      	ldr	r3, [pc, #72]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 80025d2:	0018      	movs	r0, r3
 80025d4:	f001 ff86 	bl	80044e4 <HAL_UART_Init>
 80025d8:	1e03      	subs	r3, r0, #0
 80025da:	d001      	beq.n	80025e0 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80025dc:	f7ff ff30 	bl	8002440 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025e0:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 80025e2:	2100      	movs	r1, #0
 80025e4:	0018      	movs	r0, r3
 80025e6:	f002 fca5 	bl	8004f34 <HAL_UARTEx_SetTxFifoThreshold>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d001      	beq.n	80025f2 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 80025ee:	f7ff ff27 	bl	8002440 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025f2:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 80025f4:	2100      	movs	r1, #0
 80025f6:	0018      	movs	r0, r3
 80025f8:	f002 fcdc 	bl	8004fb4 <HAL_UARTEx_SetRxFifoThreshold>
 80025fc:	1e03      	subs	r3, r0, #0
 80025fe:	d001      	beq.n	8002604 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8002600:	f7ff ff1e 	bl	8002440 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002604:	4b05      	ldr	r3, [pc, #20]	@ (800261c <MX_USART1_UART_Init+0x9c>)
 8002606:	0018      	movs	r0, r3
 8002608:	f002 fc5a 	bl	8004ec0 <HAL_UARTEx_DisableFifoMode>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d001      	beq.n	8002614 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8002610:	f7ff ff16 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002614:	46c0      	nop			@ (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	200000c8 	.word	0x200000c8
 8002620:	40013800 	.word	0x40013800

08002624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b091      	sub	sp, #68	@ 0x44
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	232c      	movs	r3, #44	@ 0x2c
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	0018      	movs	r0, r3
 8002632:	2314      	movs	r3, #20
 8002634:	001a      	movs	r2, r3
 8002636:	2100      	movs	r1, #0
 8002638:	f002 fd5c 	bl	80050f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800263c:	2410      	movs	r4, #16
 800263e:	193b      	adds	r3, r7, r4
 8002640:	0018      	movs	r0, r3
 8002642:	231c      	movs	r3, #28
 8002644:	001a      	movs	r2, r3
 8002646:	2100      	movs	r1, #0
 8002648:	f002 fd54 	bl	80050f4 <memset>
  if(uartHandle->Instance==USART1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a23      	ldr	r2, [pc, #140]	@ (80026e0 <HAL_UART_MspInit+0xbc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d13f      	bne.n	80026d6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002656:	193b      	adds	r3, r7, r4
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800265c:	193b      	adds	r3, r7, r4
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002662:	193b      	adds	r3, r7, r4
 8002664:	0018      	movs	r0, r3
 8002666:	f001 fd87 	bl	8004178 <HAL_RCCEx_PeriphCLKConfig>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d001      	beq.n	8002672 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800266e:	f7ff fee7 	bl	8002440 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <HAL_UART_MspInit+0xc0>)
 8002674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002676:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <HAL_UART_MspInit+0xc0>)
 8002678:	2180      	movs	r1, #128	@ 0x80
 800267a:	01c9      	lsls	r1, r1, #7
 800267c:	430a      	orrs	r2, r1
 800267e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002680:	4b18      	ldr	r3, [pc, #96]	@ (80026e4 <HAL_UART_MspInit+0xc0>)
 8002682:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	01db      	lsls	r3, r3, #7
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <HAL_UART_MspInit+0xc0>)
 8002690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002692:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <HAL_UART_MspInit+0xc0>)
 8002694:	2101      	movs	r1, #1
 8002696:	430a      	orrs	r2, r1
 8002698:	635a      	str	r2, [r3, #52]	@ 0x34
 800269a:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <HAL_UART_MspInit+0xc0>)
 800269c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269e:	2201      	movs	r2, #1
 80026a0:	4013      	ands	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026a6:	212c      	movs	r1, #44	@ 0x2c
 80026a8:	187b      	adds	r3, r7, r1
 80026aa:	22c0      	movs	r2, #192	@ 0xc0
 80026ac:	00d2      	lsls	r2, r2, #3
 80026ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	2202      	movs	r2, #2
 80026b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2201      	movs	r2, #1
 80026c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	187a      	adds	r2, r7, r1
 80026ca:	23a0      	movs	r3, #160	@ 0xa0
 80026cc:	05db      	lsls	r3, r3, #23
 80026ce:	0011      	movs	r1, r2
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 f997 	bl	8002a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	b011      	add	sp, #68	@ 0x44
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	46c0      	nop			@ (mov r8, r8)
 80026e0:	40013800 	.word	0x40013800
 80026e4:	40021000 	.word	0x40021000

080026e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026e8:	480d      	ldr	r0, [pc, #52]	@ (8002720 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026ec:	f7ff fef8 	bl	80024e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026f2:	e003      	b.n	80026fc <LoopCopyDataInit>

080026f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002724 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80026f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026fa:	3104      	adds	r1, #4

080026fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026fc:	480a      	ldr	r0, [pc, #40]	@ (8002728 <LoopForever+0xa>)
  ldr r3, =_edata
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <LoopForever+0xe>)
  adds r2, r0, r1
 8002700:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002702:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002704:	d3f6      	bcc.n	80026f4 <CopyDataInit>
  ldr r2, =_sbss
 8002706:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <LoopForever+0x12>)
  b LoopFillZerobss
 8002708:	e002      	b.n	8002710 <LoopFillZerobss>

0800270a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800270a:	2300      	movs	r3, #0
  str  r3, [r2]
 800270c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800270e:	3204      	adds	r2, #4

08002710 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002710:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <LoopForever+0x16>)
  cmp r2, r3
 8002712:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002714:	d3f9      	bcc.n	800270a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002716:	f002 fcf5 	bl	8005104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800271a:	f7ff fe11 	bl	8002340 <main>

0800271e <LoopForever>:

LoopForever:
    b LoopForever
 800271e:	e7fe      	b.n	800271e <LoopForever>
  ldr   r0, =_estack
 8002720:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8002724:	08005240 	.word	0x08005240
  ldr r0, =_sdata
 8002728:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800272c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002730:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002734:	20000160 	.word	0x20000160

08002738 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002738:	e7fe      	b.n	8002738 <ADC1_IRQHandler>

0800273a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002740:	1dfb      	adds	r3, r7, #7
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002746:	2003      	movs	r0, #3
 8002748:	f000 f80e 	bl	8002768 <HAL_InitTick>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d003      	beq.n	8002758 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002750:	1dfb      	adds	r3, r7, #7
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e001      	b.n	800275c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002758:	f7ff fe7e 	bl	8002458 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800275c:	1dfb      	adds	r3, r7, #7
 800275e:	781b      	ldrb	r3, [r3, #0]
}
 8002760:	0018      	movs	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	b002      	add	sp, #8
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002770:	230f      	movs	r3, #15
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8002778:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <HAL_InitTick+0x88>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d02b      	beq.n	80027d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002780:	4b1c      	ldr	r3, [pc, #112]	@ (80027f4 <HAL_InitTick+0x8c>)
 8002782:	681c      	ldr	r4, [r3, #0]
 8002784:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <HAL_InitTick+0x88>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	0019      	movs	r1, r3
 800278a:	23fa      	movs	r3, #250	@ 0xfa
 800278c:	0098      	lsls	r0, r3, #2
 800278e:	f7fd fcbb 	bl	8000108 <__udivsi3>
 8002792:	0003      	movs	r3, r0
 8002794:	0019      	movs	r1, r3
 8002796:	0020      	movs	r0, r4
 8002798:	f7fd fcb6 	bl	8000108 <__udivsi3>
 800279c:	0003      	movs	r3, r0
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 f923 	bl	80029ea <HAL_SYSTICK_Config>
 80027a4:	1e03      	subs	r3, r0, #0
 80027a6:	d112      	bne.n	80027ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d80a      	bhi.n	80027c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	2301      	movs	r3, #1
 80027b2:	425b      	negs	r3, r3
 80027b4:	2200      	movs	r2, #0
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 f902 	bl	80029c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027bc:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <HAL_InitTick+0x90>)
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e00d      	b.n	80027e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80027c4:	230f      	movs	r3, #15
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e008      	b.n	80027e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027ce:	230f      	movs	r3, #15
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e003      	b.n	80027e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027d8:	230f      	movs	r3, #15
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80027e0:	230f      	movs	r3, #15
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	781b      	ldrb	r3, [r3, #0]
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b005      	add	sp, #20
 80027ec:	bd90      	pop	{r4, r7, pc}
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	20000008 	.word	0x20000008
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000004 	.word	0x20000004

080027fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002800:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_IncTick+0x1c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	001a      	movs	r2, r3
 8002806:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_IncTick+0x20>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	18d2      	adds	r2, r2, r3
 800280c:	4b03      	ldr	r3, [pc, #12]	@ (800281c <HAL_IncTick+0x20>)
 800280e:	601a      	str	r2, [r3, #0]
}
 8002810:	46c0      	nop			@ (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	20000008 	.word	0x20000008
 800281c:	2000015c 	.word	0x2000015c

08002820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b02      	ldr	r3, [pc, #8]	@ (8002830 <HAL_GetTick+0x10>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	2000015c 	.word	0x2000015c

08002834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800283c:	f7ff fff0 	bl	8002820 <HAL_GetTick>
 8002840:	0003      	movs	r3, r0
 8002842:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3301      	adds	r3, #1
 800284c:	d005      	beq.n	800285a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800284e:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <HAL_Delay+0x44>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	001a      	movs	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	189b      	adds	r3, r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	f7ff ffe0 	bl	8002820 <HAL_GetTick>
 8002860:	0002      	movs	r2, r0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	429a      	cmp	r2, r3
 800286a:	d8f7      	bhi.n	800285c <HAL_Delay+0x28>
  {
  }
}
 800286c:	46c0      	nop			@ (mov r8, r8)
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b004      	add	sp, #16
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	20000008 	.word	0x20000008

0800287c <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8002884:	4b04      	ldr	r3, [pc, #16]	@ (8002898 <HAL_SYSCFG_EnableRemap+0x1c>)
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <HAL_SYSCFG_EnableRemap+0x1c>)
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
}
 8002890:	46c0      	nop			@ (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b002      	add	sp, #8
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40010000 	.word	0x40010000

0800289c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	0002      	movs	r2, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028aa:	1dfb      	adds	r3, r7, #7
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80028b0:	d828      	bhi.n	8002904 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002970 <__NVIC_SetPriority+0xd4>)
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b25b      	sxtb	r3, r3
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	33c0      	adds	r3, #192	@ 0xc0
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	589b      	ldr	r3, [r3, r2]
 80028c2:	1dfa      	adds	r2, r7, #7
 80028c4:	7812      	ldrb	r2, [r2, #0]
 80028c6:	0011      	movs	r1, r2
 80028c8:	2203      	movs	r2, #3
 80028ca:	400a      	ands	r2, r1
 80028cc:	00d2      	lsls	r2, r2, #3
 80028ce:	21ff      	movs	r1, #255	@ 0xff
 80028d0:	4091      	lsls	r1, r2
 80028d2:	000a      	movs	r2, r1
 80028d4:	43d2      	mvns	r2, r2
 80028d6:	401a      	ands	r2, r3
 80028d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	019b      	lsls	r3, r3, #6
 80028de:	22ff      	movs	r2, #255	@ 0xff
 80028e0:	401a      	ands	r2, r3
 80028e2:	1dfb      	adds	r3, r7, #7
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	0018      	movs	r0, r3
 80028e8:	2303      	movs	r3, #3
 80028ea:	4003      	ands	r3, r0
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028f0:	481f      	ldr	r0, [pc, #124]	@ (8002970 <__NVIC_SetPriority+0xd4>)
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b25b      	sxtb	r3, r3
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	430a      	orrs	r2, r1
 80028fc:	33c0      	adds	r3, #192	@ 0xc0
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002902:	e031      	b.n	8002968 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002904:	4a1b      	ldr	r2, [pc, #108]	@ (8002974 <__NVIC_SetPriority+0xd8>)
 8002906:	1dfb      	adds	r3, r7, #7
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	0019      	movs	r1, r3
 800290c:	230f      	movs	r3, #15
 800290e:	400b      	ands	r3, r1
 8002910:	3b08      	subs	r3, #8
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3306      	adds	r3, #6
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	18d3      	adds	r3, r2, r3
 800291a:	3304      	adds	r3, #4
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	1dfa      	adds	r2, r7, #7
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	0011      	movs	r1, r2
 8002924:	2203      	movs	r2, #3
 8002926:	400a      	ands	r2, r1
 8002928:	00d2      	lsls	r2, r2, #3
 800292a:	21ff      	movs	r1, #255	@ 0xff
 800292c:	4091      	lsls	r1, r2
 800292e:	000a      	movs	r2, r1
 8002930:	43d2      	mvns	r2, r2
 8002932:	401a      	ands	r2, r3
 8002934:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	22ff      	movs	r2, #255	@ 0xff
 800293c:	401a      	ands	r2, r3
 800293e:	1dfb      	adds	r3, r7, #7
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	0018      	movs	r0, r3
 8002944:	2303      	movs	r3, #3
 8002946:	4003      	ands	r3, r0
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800294c:	4809      	ldr	r0, [pc, #36]	@ (8002974 <__NVIC_SetPriority+0xd8>)
 800294e:	1dfb      	adds	r3, r7, #7
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	001c      	movs	r4, r3
 8002954:	230f      	movs	r3, #15
 8002956:	4023      	ands	r3, r4
 8002958:	3b08      	subs	r3, #8
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	430a      	orrs	r2, r1
 800295e:	3306      	adds	r3, #6
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	18c3      	adds	r3, r0, r3
 8002964:	3304      	adds	r3, #4
 8002966:	601a      	str	r2, [r3, #0]
}
 8002968:	46c0      	nop			@ (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b003      	add	sp, #12
 800296e:	bd90      	pop	{r4, r7, pc}
 8002970:	e000e100 	.word	0xe000e100
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	1e5a      	subs	r2, r3, #1
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	045b      	lsls	r3, r3, #17
 8002988:	429a      	cmp	r2, r3
 800298a:	d301      	bcc.n	8002990 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298c:	2301      	movs	r3, #1
 800298e:	e010      	b.n	80029b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002990:	4b0a      	ldr	r3, [pc, #40]	@ (80029bc <SysTick_Config+0x44>)
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	3a01      	subs	r2, #1
 8002996:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002998:	2301      	movs	r3, #1
 800299a:	425b      	negs	r3, r3
 800299c:	2103      	movs	r1, #3
 800299e:	0018      	movs	r0, r3
 80029a0:	f7ff ff7c 	bl	800289c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a4:	4b05      	ldr	r3, [pc, #20]	@ (80029bc <SysTick_Config+0x44>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029aa:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <SysTick_Config+0x44>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b002      	add	sp, #8
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	210f      	movs	r1, #15
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	1c02      	adds	r2, r0, #0
 80029d0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b25b      	sxtb	r3, r3
 80029da:	0011      	movs	r1, r2
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff ff5d 	bl	800289c <__NVIC_SetPriority>
}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7ff ffbf 	bl	8002978 <SysTick_Config>
 80029fa:	0003      	movs	r3, r0
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a12:	e14d      	b.n	8002cb0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2101      	movs	r1, #1
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4091      	lsls	r1, r2
 8002a1e:	000a      	movs	r2, r1
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d100      	bne.n	8002a2c <HAL_GPIO_Init+0x28>
 8002a2a:	e13e      	b.n	8002caa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x38>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b12      	cmp	r3, #18
 8002a3a:	d125      	bne.n	8002a88 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	58d3      	ldr	r3, [r2, r3]
 8002a48:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	4013      	ands	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	409a      	lsls	r2, r3
 8002a56:	0013      	movs	r3, r2
 8002a58:	43da      	mvns	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	220f      	movs	r2, #15
 8002a66:	401a      	ands	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2107      	movs	r1, #7
 8002a6c:	400b      	ands	r3, r1
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	409a      	lsls	r2, r3
 8002a72:	0013      	movs	r3, r2
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	0092      	lsls	r2, r2, #2
 8002a84:	6979      	ldr	r1, [r7, #20]
 8002a86:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	409a      	lsls	r2, r3
 8002a96:	0013      	movs	r3, r2
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	409a      	lsls	r2, r3
 8002aae:	0013      	movs	r3, r2
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d00b      	beq.n	8002adc <HAL_GPIO_Init+0xd8>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d007      	beq.n	8002adc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad0:	2b11      	cmp	r3, #17
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b12      	cmp	r3, #18
 8002ada:	d130      	bne.n	8002b3e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	0013      	movs	r3, r2
 8002aec:	43da      	mvns	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	4013      	ands	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	409a      	lsls	r2, r3
 8002afe:	0013      	movs	r3, r2
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b12:	2201      	movs	r2, #1
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	409a      	lsls	r2, r3
 8002b18:	0013      	movs	r3, r2
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	2201      	movs	r2, #1
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	0013      	movs	r3, r2
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d017      	beq.n	8002b76 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	409a      	lsls	r2, r3
 8002b54:	0013      	movs	r3, r2
 8002b56:	43da      	mvns	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	409a      	lsls	r2, r3
 8002b68:	0013      	movs	r3, r2
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	055b      	lsls	r3, r3, #21
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d100      	bne.n	8002b84 <HAL_GPIO_Init+0x180>
 8002b82:	e092      	b.n	8002caa <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002b84:	4a50      	ldr	r2, [pc, #320]	@ (8002cc8 <HAL_GPIO_Init+0x2c4>)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3318      	adds	r3, #24
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	589b      	ldr	r3, [r3, r2]
 8002b90:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2203      	movs	r2, #3
 8002b96:	4013      	ands	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	0013      	movs	r3, r2
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	23a0      	movs	r3, #160	@ 0xa0
 8002bac:	05db      	lsls	r3, r3, #23
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d013      	beq.n	8002bda <HAL_GPIO_Init+0x1d6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a45      	ldr	r2, [pc, #276]	@ (8002ccc <HAL_GPIO_Init+0x2c8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00d      	beq.n	8002bd6 <HAL_GPIO_Init+0x1d2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a44      	ldr	r2, [pc, #272]	@ (8002cd0 <HAL_GPIO_Init+0x2cc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d007      	beq.n	8002bd2 <HAL_GPIO_Init+0x1ce>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a43      	ldr	r2, [pc, #268]	@ (8002cd4 <HAL_GPIO_Init+0x2d0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d101      	bne.n	8002bce <HAL_GPIO_Init+0x1ca>
 8002bca:	2305      	movs	r3, #5
 8002bcc:	e006      	b.n	8002bdc <HAL_GPIO_Init+0x1d8>
 8002bce:	2306      	movs	r3, #6
 8002bd0:	e004      	b.n	8002bdc <HAL_GPIO_Init+0x1d8>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e002      	b.n	8002bdc <HAL_GPIO_Init+0x1d8>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_GPIO_Init+0x1d8>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	2103      	movs	r1, #3
 8002be0:	400a      	ands	r2, r1
 8002be2:	00d2      	lsls	r2, r2, #3
 8002be4:	4093      	lsls	r3, r2
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002bec:	4936      	ldr	r1, [pc, #216]	@ (8002cc8 <HAL_GPIO_Init+0x2c4>)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	3318      	adds	r3, #24
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002bfa:	4a33      	ldr	r2, [pc, #204]	@ (8002cc8 <HAL_GPIO_Init+0x2c4>)
 8002bfc:	2380      	movs	r3, #128	@ 0x80
 8002bfe:	58d3      	ldr	r3, [r2, r3]
 8002c00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	43da      	mvns	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	2380      	movs	r3, #128	@ 0x80
 8002c12:	025b      	lsls	r3, r3, #9
 8002c14:	4013      	ands	r3, r2
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002c20:	4929      	ldr	r1, [pc, #164]	@ (8002cc8 <HAL_GPIO_Init+0x2c4>)
 8002c22:	2280      	movs	r2, #128	@ 0x80
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002c28:	4a27      	ldr	r2, [pc, #156]	@ (8002cc8 <HAL_GPIO_Init+0x2c4>)
 8002c2a:	2384      	movs	r3, #132	@ 0x84
 8002c2c:	58d3      	ldr	r3, [r2, r3]
 8002c2e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	4013      	ands	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	2380      	movs	r3, #128	@ 0x80
 8002c40:	029b      	lsls	r3, r3, #10
 8002c42:	4013      	ands	r3, r2
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002c4e:	491e      	ldr	r1, [pc, #120]	@ (8002cc8 <HAL_GPIO_Init+0x2c4>)
 8002c50:	2284      	movs	r2, #132	@ 0x84
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002c56:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc8 <HAL_GPIO_Init+0x2c4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	4013      	ands	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	2380      	movs	r3, #128	@ 0x80
 8002c6c:	035b      	lsls	r3, r3, #13
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002c7a:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <HAL_GPIO_Init+0x2c4>)
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002c80:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <HAL_GPIO_Init+0x2c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	43da      	mvns	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	2380      	movs	r3, #128	@ 0x80
 8002c96:	039b      	lsls	r3, r3, #14
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <HAL_GPIO_Init+0x2c4>)
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	3301      	adds	r3, #1
 8002cae:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	40da      	lsrs	r2, r3
 8002cb8:	1e13      	subs	r3, r2, #0
 8002cba:	d000      	beq.n	8002cbe <HAL_GPIO_Init+0x2ba>
 8002cbc:	e6aa      	b.n	8002a14 <HAL_GPIO_Init+0x10>
  }
}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	46c0      	nop			@ (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b006      	add	sp, #24
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021800 	.word	0x40021800
 8002ccc:	50000400 	.word	0x50000400
 8002cd0:	50000800 	.word	0x50000800
 8002cd4:	50001400 	.word	0x50001400

08002cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	0008      	movs	r0, r1
 8002ce2:	0011      	movs	r1, r2
 8002ce4:	1cbb      	adds	r3, r7, #2
 8002ce6:	1c02      	adds	r2, r0, #0
 8002ce8:	801a      	strh	r2, [r3, #0]
 8002cea:	1c7b      	adds	r3, r7, #1
 8002cec:	1c0a      	adds	r2, r1, #0
 8002cee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf0:	1c7b      	adds	r3, r7, #1
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cf8:	1cbb      	adds	r3, r7, #2
 8002cfa:	881a      	ldrh	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d00:	e003      	b.n	8002d0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d02:	1cbb      	adds	r3, r7, #2
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b002      	add	sp, #8
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e08f      	b.n	8002e46 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2241      	movs	r2, #65	@ 0x41
 8002d2a:	5c9b      	ldrb	r3, [r3, r2]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d107      	bne.n	8002d42 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2240      	movs	r2, #64	@ 0x40
 8002d36:	2100      	movs	r1, #0
 8002d38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff f9e3 	bl	8002108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2241      	movs	r2, #65	@ 0x41
 8002d46:	2124      	movs	r1, #36	@ 0x24
 8002d48:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	438a      	bics	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	493b      	ldr	r1, [pc, #236]	@ (8002e50 <HAL_I2C_Init+0x13c>)
 8002d64:	400a      	ands	r2, r1
 8002d66:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4938      	ldr	r1, [pc, #224]	@ (8002e54 <HAL_I2C_Init+0x140>)
 8002d74:	400a      	ands	r2, r1
 8002d76:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d108      	bne.n	8002d92 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2180      	movs	r1, #128	@ 0x80
 8002d8a:	0209      	lsls	r1, r1, #8
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	e007      	b.n	8002da2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2184      	movs	r1, #132	@ 0x84
 8002d9c:	0209      	lsls	r1, r1, #8
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d109      	bne.n	8002dbe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2180      	movs	r1, #128	@ 0x80
 8002db6:	0109      	lsls	r1, r1, #4
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	e007      	b.n	8002dce <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4923      	ldr	r1, [pc, #140]	@ (8002e58 <HAL_I2C_Init+0x144>)
 8002dca:	400a      	ands	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4920      	ldr	r1, [pc, #128]	@ (8002e5c <HAL_I2C_Init+0x148>)
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	491a      	ldr	r1, [pc, #104]	@ (8002e54 <HAL_I2C_Init+0x140>)
 8002dea:	400a      	ands	r2, r1
 8002dec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69d9      	ldr	r1, [r3, #28]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1a      	ldr	r2, [r3, #32]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2101      	movs	r1, #1
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2241      	movs	r2, #65	@ 0x41
 8002e32:	2120      	movs	r1, #32
 8002e34:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2242      	movs	r2, #66	@ 0x42
 8002e40:	2100      	movs	r1, #0
 8002e42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	0018      	movs	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	f0ffffff 	.word	0xf0ffffff
 8002e54:	ffff7fff 	.word	0xffff7fff
 8002e58:	fffff7ff 	.word	0xfffff7ff
 8002e5c:	02008000 	.word	0x02008000

08002e60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b089      	sub	sp, #36	@ 0x24
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	000c      	movs	r4, r1
 8002e6a:	0010      	movs	r0, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	230a      	movs	r3, #10
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	1c22      	adds	r2, r4, #0
 8002e74:	801a      	strh	r2, [r3, #0]
 8002e76:	2308      	movs	r3, #8
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	1c02      	adds	r2, r0, #0
 8002e7c:	801a      	strh	r2, [r3, #0]
 8002e7e:	1dbb      	adds	r3, r7, #6
 8002e80:	1c0a      	adds	r2, r1, #0
 8002e82:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2241      	movs	r2, #65	@ 0x41
 8002e88:	5c9b      	ldrb	r3, [r3, r2]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d000      	beq.n	8002e92 <HAL_I2C_Mem_Write+0x32>
 8002e90:	e10c      	b.n	80030ac <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <HAL_I2C_Mem_Write+0x42>
 8002e98:	232c      	movs	r3, #44	@ 0x2c
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2280      	movs	r2, #128	@ 0x80
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0ff      	b.n	80030ae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2240      	movs	r2, #64	@ 0x40
 8002eb2:	5c9b      	ldrb	r3, [r3, r2]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_I2C_Mem_Write+0x5c>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0f8      	b.n	80030ae <HAL_I2C_Mem_Write+0x24e>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2240      	movs	r2, #64	@ 0x40
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ec4:	f7ff fcac 	bl	8002820 <HAL_GetTick>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ecc:	2380      	movs	r3, #128	@ 0x80
 8002ece:	0219      	lsls	r1, r3, #8
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2319      	movs	r3, #25
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f000 fb0b 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8002ede:	1e03      	subs	r3, r0, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0e3      	b.n	80030ae <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2241      	movs	r2, #65	@ 0x41
 8002eea:	2121      	movs	r1, #33	@ 0x21
 8002eec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2242      	movs	r2, #66	@ 0x42
 8002ef2:	2140      	movs	r1, #64	@ 0x40
 8002ef4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	222c      	movs	r2, #44	@ 0x2c
 8002f06:	18ba      	adds	r2, r7, r2
 8002f08:	8812      	ldrh	r2, [r2, #0]
 8002f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f12:	1dbb      	adds	r3, r7, #6
 8002f14:	881c      	ldrh	r4, [r3, #0]
 8002f16:	2308      	movs	r3, #8
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	881a      	ldrh	r2, [r3, #0]
 8002f1c:	230a      	movs	r3, #10
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	8819      	ldrh	r1, [r3, #0]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	0023      	movs	r3, r4
 8002f2e:	f000 f9f9 	bl	8003324 <I2C_RequestMemoryWrite>
 8002f32:	1e03      	subs	r3, r0, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2240      	movs	r2, #64	@ 0x40
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0b5      	b.n	80030ae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2bff      	cmp	r3, #255	@ 0xff
 8002f4a:	d911      	bls.n	8002f70 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	22ff      	movs	r2, #255	@ 0xff
 8002f50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	2380      	movs	r3, #128	@ 0x80
 8002f5a:	045c      	lsls	r4, r3, #17
 8002f5c:	230a      	movs	r3, #10
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	8819      	ldrh	r1, [r3, #0]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	2300      	movs	r3, #0
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	0023      	movs	r3, r4
 8002f6a:	f000 fc9d 	bl	80038a8 <I2C_TransferConfig>
 8002f6e:	e012      	b.n	8002f96 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	049c      	lsls	r4, r3, #18
 8002f84:	230a      	movs	r3, #10
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	8819      	ldrh	r1, [r3, #0]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	0023      	movs	r3, r4
 8002f92:	f000 fc89 	bl	80038a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f000 fb01 	bl	80035a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fa2:	1e03      	subs	r3, r0, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e081      	b.n	80030ae <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d03a      	beq.n	800305a <HAL_I2C_Mem_Write+0x1fa>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d136      	bne.n	800305a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	0013      	movs	r3, r2
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2180      	movs	r1, #128	@ 0x80
 8002ffa:	f000 fa7b 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e053      	b.n	80030ae <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2bff      	cmp	r3, #255	@ 0xff
 800300e:	d911      	bls.n	8003034 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	22ff      	movs	r2, #255	@ 0xff
 8003014:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301a:	b2da      	uxtb	r2, r3
 800301c:	2380      	movs	r3, #128	@ 0x80
 800301e:	045c      	lsls	r4, r3, #17
 8003020:	230a      	movs	r3, #10
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	8819      	ldrh	r1, [r3, #0]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	2300      	movs	r3, #0
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	0023      	movs	r3, r4
 800302e:	f000 fc3b 	bl	80038a8 <I2C_TransferConfig>
 8003032:	e012      	b.n	800305a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003042:	b2da      	uxtb	r2, r3
 8003044:	2380      	movs	r3, #128	@ 0x80
 8003046:	049c      	lsls	r4, r3, #18
 8003048:	230a      	movs	r3, #10
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	8819      	ldrh	r1, [r3, #0]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	2300      	movs	r3, #0
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	0023      	movs	r3, r4
 8003056:	f000 fc27 	bl	80038a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d198      	bne.n	8002f96 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	0018      	movs	r0, r3
 800306c:	f000 fae0 	bl	8003630 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003070:	1e03      	subs	r3, r0, #0
 8003072:	d001      	beq.n	8003078 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e01a      	b.n	80030ae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2220      	movs	r2, #32
 800307e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	490b      	ldr	r1, [pc, #44]	@ (80030b8 <HAL_I2C_Mem_Write+0x258>)
 800308c:	400a      	ands	r2, r1
 800308e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2241      	movs	r2, #65	@ 0x41
 8003094:	2120      	movs	r1, #32
 8003096:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2242      	movs	r2, #66	@ 0x42
 800309c:	2100      	movs	r1, #0
 800309e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2240      	movs	r2, #64	@ 0x40
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e000      	b.n	80030ae <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
  }
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b007      	add	sp, #28
 80030b4:	bd90      	pop	{r4, r7, pc}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	fe00e800 	.word	0xfe00e800

080030bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b089      	sub	sp, #36	@ 0x24
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	000c      	movs	r4, r1
 80030c6:	0010      	movs	r0, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	230a      	movs	r3, #10
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	1c22      	adds	r2, r4, #0
 80030d0:	801a      	strh	r2, [r3, #0]
 80030d2:	2308      	movs	r3, #8
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	1c02      	adds	r2, r0, #0
 80030d8:	801a      	strh	r2, [r3, #0]
 80030da:	1dbb      	adds	r3, r7, #6
 80030dc:	1c0a      	adds	r2, r1, #0
 80030de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2241      	movs	r2, #65	@ 0x41
 80030e4:	5c9b      	ldrb	r3, [r3, r2]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d000      	beq.n	80030ee <HAL_I2C_Mem_Read+0x32>
 80030ec:	e110      	b.n	8003310 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d004      	beq.n	80030fe <HAL_I2C_Mem_Read+0x42>
 80030f4:	232c      	movs	r3, #44	@ 0x2c
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2280      	movs	r2, #128	@ 0x80
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e103      	b.n	8003312 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2240      	movs	r2, #64	@ 0x40
 800310e:	5c9b      	ldrb	r3, [r3, r2]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_I2C_Mem_Read+0x5c>
 8003114:	2302      	movs	r3, #2
 8003116:	e0fc      	b.n	8003312 <HAL_I2C_Mem_Read+0x256>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2240      	movs	r2, #64	@ 0x40
 800311c:	2101      	movs	r1, #1
 800311e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003120:	f7ff fb7e 	bl	8002820 <HAL_GetTick>
 8003124:	0003      	movs	r3, r0
 8003126:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	0219      	lsls	r1, r3, #8
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	2319      	movs	r3, #25
 8003134:	2201      	movs	r2, #1
 8003136:	f000 f9dd 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 800313a:	1e03      	subs	r3, r0, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0e7      	b.n	8003312 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2241      	movs	r2, #65	@ 0x41
 8003146:	2122      	movs	r1, #34	@ 0x22
 8003148:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2242      	movs	r2, #66	@ 0x42
 800314e:	2140      	movs	r1, #64	@ 0x40
 8003150:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800315c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	222c      	movs	r2, #44	@ 0x2c
 8003162:	18ba      	adds	r2, r7, r2
 8003164:	8812      	ldrh	r2, [r2, #0]
 8003166:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800316e:	1dbb      	adds	r3, r7, #6
 8003170:	881c      	ldrh	r4, [r3, #0]
 8003172:	2308      	movs	r3, #8
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	881a      	ldrh	r2, [r3, #0]
 8003178:	230a      	movs	r3, #10
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	8819      	ldrh	r1, [r3, #0]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	0023      	movs	r3, r4
 800318a:	f000 f92f 	bl	80033ec <I2C_RequestMemoryRead>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d005      	beq.n	800319e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2240      	movs	r2, #64	@ 0x40
 8003196:	2100      	movs	r1, #0
 8003198:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0b9      	b.n	8003312 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2bff      	cmp	r3, #255	@ 0xff
 80031a6:	d911      	bls.n	80031cc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	22ff      	movs	r2, #255	@ 0xff
 80031ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	045c      	lsls	r4, r3, #17
 80031b8:	230a      	movs	r3, #10
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	8819      	ldrh	r1, [r3, #0]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	4b56      	ldr	r3, [pc, #344]	@ (800331c <HAL_I2C_Mem_Read+0x260>)
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	0023      	movs	r3, r4
 80031c6:	f000 fb6f 	bl	80038a8 <I2C_TransferConfig>
 80031ca:	e012      	b.n	80031f2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	2380      	movs	r3, #128	@ 0x80
 80031de:	049c      	lsls	r4, r3, #18
 80031e0:	230a      	movs	r3, #10
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	8819      	ldrh	r1, [r3, #0]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	4b4c      	ldr	r3, [pc, #304]	@ (800331c <HAL_I2C_Mem_Read+0x260>)
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	0023      	movs	r3, r4
 80031ee:	f000 fb5b 	bl	80038a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80031f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	0013      	movs	r3, r2
 80031fc:	2200      	movs	r2, #0
 80031fe:	2104      	movs	r1, #4
 8003200:	f000 f978 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e082      	b.n	8003312 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d03a      	beq.n	80032be <HAL_I2C_Mem_Read+0x202>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d136      	bne.n	80032be <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	0013      	movs	r3, r2
 800325a:	2200      	movs	r2, #0
 800325c:	2180      	movs	r1, #128	@ 0x80
 800325e:	f000 f949 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8003262:	1e03      	subs	r3, r0, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e053      	b.n	8003312 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326e:	b29b      	uxth	r3, r3
 8003270:	2bff      	cmp	r3, #255	@ 0xff
 8003272:	d911      	bls.n	8003298 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	22ff      	movs	r2, #255	@ 0xff
 8003278:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327e:	b2da      	uxtb	r2, r3
 8003280:	2380      	movs	r3, #128	@ 0x80
 8003282:	045c      	lsls	r4, r3, #17
 8003284:	230a      	movs	r3, #10
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	8819      	ldrh	r1, [r3, #0]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	2300      	movs	r3, #0
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	0023      	movs	r3, r4
 8003292:	f000 fb09 	bl	80038a8 <I2C_TransferConfig>
 8003296:	e012      	b.n	80032be <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	2380      	movs	r3, #128	@ 0x80
 80032aa:	049c      	lsls	r4, r3, #18
 80032ac:	230a      	movs	r3, #10
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	8819      	ldrh	r1, [r3, #0]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	2300      	movs	r3, #0
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	0023      	movs	r3, r4
 80032ba:	f000 faf5 	bl	80038a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d194      	bne.n	80031f2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 f9ae 	bl	8003630 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e01a      	b.n	8003312 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2220      	movs	r2, #32
 80032e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	490c      	ldr	r1, [pc, #48]	@ (8003320 <HAL_I2C_Mem_Read+0x264>)
 80032f0:	400a      	ands	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2241      	movs	r2, #65	@ 0x41
 80032f8:	2120      	movs	r1, #32
 80032fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2242      	movs	r2, #66	@ 0x42
 8003300:	2100      	movs	r1, #0
 8003302:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2240      	movs	r2, #64	@ 0x40
 8003308:	2100      	movs	r1, #0
 800330a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b007      	add	sp, #28
 8003318:	bd90      	pop	{r4, r7, pc}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	80002400 	.word	0x80002400
 8003320:	fe00e800 	.word	0xfe00e800

08003324 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003324:	b5b0      	push	{r4, r5, r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	000c      	movs	r4, r1
 800332e:	0010      	movs	r0, r2
 8003330:	0019      	movs	r1, r3
 8003332:	250a      	movs	r5, #10
 8003334:	197b      	adds	r3, r7, r5
 8003336:	1c22      	adds	r2, r4, #0
 8003338:	801a      	strh	r2, [r3, #0]
 800333a:	2308      	movs	r3, #8
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	1c02      	adds	r2, r0, #0
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	1dbb      	adds	r3, r7, #6
 8003344:	1c0a      	adds	r2, r1, #0
 8003346:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003348:	1dbb      	adds	r3, r7, #6
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	2380      	movs	r3, #128	@ 0x80
 8003350:	045c      	lsls	r4, r3, #17
 8003352:	197b      	adds	r3, r7, r5
 8003354:	8819      	ldrh	r1, [r3, #0]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	4b23      	ldr	r3, [pc, #140]	@ (80033e8 <I2C_RequestMemoryWrite+0xc4>)
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	0023      	movs	r3, r4
 800335e:	f000 faa3 	bl	80038a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003364:	6a39      	ldr	r1, [r7, #32]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	0018      	movs	r0, r3
 800336a:	f000 f91b 	bl	80035a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800336e:	1e03      	subs	r3, r0, #0
 8003370:	d001      	beq.n	8003376 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e033      	b.n	80033de <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003376:	1dbb      	adds	r3, r7, #6
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d107      	bne.n	800338e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800337e:	2308      	movs	r3, #8
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	629a      	str	r2, [r3, #40]	@ 0x28
 800338c:	e019      	b.n	80033c2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800338e:	2308      	movs	r3, #8
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	b29b      	uxth	r3, r3
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a2:	6a39      	ldr	r1, [r7, #32]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 f8fc 	bl	80035a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80033ac:	1e03      	subs	r3, r0, #0
 80033ae:	d001      	beq.n	80033b4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e014      	b.n	80033de <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033b4:	2308      	movs	r3, #8
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033c2:	6a3a      	ldr	r2, [r7, #32]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	0013      	movs	r3, r2
 80033cc:	2200      	movs	r2, #0
 80033ce:	2180      	movs	r1, #128	@ 0x80
 80033d0:	f000 f890 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 80033d4:	1e03      	subs	r3, r0, #0
 80033d6:	d001      	beq.n	80033dc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	0018      	movs	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b004      	add	sp, #16
 80033e4:	bdb0      	pop	{r4, r5, r7, pc}
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	80002000 	.word	0x80002000

080033ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	000c      	movs	r4, r1
 80033f6:	0010      	movs	r0, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	250a      	movs	r5, #10
 80033fc:	197b      	adds	r3, r7, r5
 80033fe:	1c22      	adds	r2, r4, #0
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	2308      	movs	r3, #8
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	1c02      	adds	r2, r0, #0
 8003408:	801a      	strh	r2, [r3, #0]
 800340a:	1dbb      	adds	r3, r7, #6
 800340c:	1c0a      	adds	r2, r1, #0
 800340e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003410:	1dbb      	adds	r3, r7, #6
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	197b      	adds	r3, r7, r5
 8003418:	8819      	ldrh	r1, [r3, #0]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	4b23      	ldr	r3, [pc, #140]	@ (80034ac <I2C_RequestMemoryRead+0xc0>)
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	2300      	movs	r3, #0
 8003422:	f000 fa41 	bl	80038a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003428:	6a39      	ldr	r1, [r7, #32]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	0018      	movs	r0, r3
 800342e:	f000 f8b9 	bl	80035a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003432:	1e03      	subs	r3, r0, #0
 8003434:	d001      	beq.n	800343a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e033      	b.n	80034a2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800343a:	1dbb      	adds	r3, r7, #6
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003442:	2308      	movs	r3, #8
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003450:	e019      	b.n	8003486 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003452:	2308      	movs	r3, #8
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	b29b      	uxth	r3, r3
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003466:	6a39      	ldr	r1, [r7, #32]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	0018      	movs	r0, r3
 800346c:	f000 f89a 	bl	80035a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003470:	1e03      	subs	r3, r0, #0
 8003472:	d001      	beq.n	8003478 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e014      	b.n	80034a2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003478:	2308      	movs	r3, #8
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b2da      	uxtb	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	0013      	movs	r3, r2
 8003490:	2200      	movs	r2, #0
 8003492:	2140      	movs	r1, #64	@ 0x40
 8003494:	f000 f82e 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d001      	beq.n	80034a0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b004      	add	sp, #16
 80034a8:	bdb0      	pop	{r4, r5, r7, pc}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	80002000 	.word	0x80002000

080034b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2202      	movs	r2, #2
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d103      	bne.n	80034ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2200      	movs	r2, #0
 80034cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2201      	movs	r2, #1
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d007      	beq.n	80034ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2101      	movs	r1, #1
 80034e8:	430a      	orrs	r2, r1
 80034ea:	619a      	str	r2, [r3, #24]
  }
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	1dfb      	adds	r3, r7, #7
 8003502:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003504:	e03a      	b.n	800357c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	6839      	ldr	r1, [r7, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 f8d3 	bl	80036b8 <I2C_IsErrorOccurred>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e040      	b.n	800359c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	3301      	adds	r3, #1
 800351e:	d02d      	beq.n	800357c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003520:	f7ff f97e 	bl	8002820 <HAL_GetTick>
 8003524:	0002      	movs	r2, r0
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d302      	bcc.n	8003536 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d122      	bne.n	800357c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	4013      	ands	r3, r2
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	425a      	negs	r2, r3
 8003546:	4153      	adcs	r3, r2
 8003548:	b2db      	uxtb	r3, r3
 800354a:	001a      	movs	r2, r3
 800354c:	1dfb      	adds	r3, r7, #7
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d113      	bne.n	800357c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003558:	2220      	movs	r2, #32
 800355a:	431a      	orrs	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2241      	movs	r2, #65	@ 0x41
 8003564:	2120      	movs	r1, #32
 8003566:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2242      	movs	r2, #66	@ 0x42
 800356c:	2100      	movs	r1, #0
 800356e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2240      	movs	r2, #64	@ 0x40
 8003574:	2100      	movs	r1, #0
 8003576:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e00f      	b.n	800359c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	425a      	negs	r2, r3
 800358c:	4153      	adcs	r3, r2
 800358e:	b2db      	uxtb	r3, r3
 8003590:	001a      	movs	r2, r3
 8003592:	1dfb      	adds	r3, r7, #7
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d0b5      	beq.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	0018      	movs	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	b004      	add	sp, #16
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035b0:	e032      	b.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f000 f87d 	bl	80036b8 <I2C_IsErrorOccurred>
 80035be:	1e03      	subs	r3, r0, #0
 80035c0:	d001      	beq.n	80035c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e030      	b.n	8003628 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3301      	adds	r3, #1
 80035ca:	d025      	beq.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035cc:	f7ff f928 	bl	8002820 <HAL_GetTick>
 80035d0:	0002      	movs	r2, r0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d302      	bcc.n	80035e2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d11a      	bne.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2202      	movs	r2, #2
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d013      	beq.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f4:	2220      	movs	r2, #32
 80035f6:	431a      	orrs	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2241      	movs	r2, #65	@ 0x41
 8003600:	2120      	movs	r1, #32
 8003602:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2242      	movs	r2, #66	@ 0x42
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2240      	movs	r2, #64	@ 0x40
 8003610:	2100      	movs	r1, #0
 8003612:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e007      	b.n	8003628 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2202      	movs	r2, #2
 8003620:	4013      	ands	r3, r2
 8003622:	2b02      	cmp	r3, #2
 8003624:	d1c5      	bne.n	80035b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b004      	add	sp, #16
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800363c:	e02f      	b.n	800369e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	0018      	movs	r0, r3
 8003646:	f000 f837 	bl	80036b8 <I2C_IsErrorOccurred>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d001      	beq.n	8003652 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e02d      	b.n	80036ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7ff f8e5 	bl	8002820 <HAL_GetTick>
 8003656:	0002      	movs	r2, r0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d11a      	bne.n	800369e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2220      	movs	r2, #32
 8003670:	4013      	ands	r3, r2
 8003672:	2b20      	cmp	r3, #32
 8003674:	d013      	beq.n	800369e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367a:	2220      	movs	r2, #32
 800367c:	431a      	orrs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2241      	movs	r2, #65	@ 0x41
 8003686:	2120      	movs	r1, #32
 8003688:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2242      	movs	r2, #66	@ 0x42
 800368e:	2100      	movs	r1, #0
 8003690:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2240      	movs	r2, #64	@ 0x40
 8003696:	2100      	movs	r1, #0
 8003698:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e007      	b.n	80036ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2220      	movs	r2, #32
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d1c8      	bne.n	800363e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	@ 0x28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c4:	2327      	movs	r3, #39	@ 0x27
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2210      	movs	r2, #16
 80036e0:	4013      	ands	r3, r2
 80036e2:	d100      	bne.n	80036e6 <I2C_IsErrorOccurred+0x2e>
 80036e4:	e079      	b.n	80037da <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2210      	movs	r2, #16
 80036ec:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ee:	e057      	b.n	80037a0 <I2C_IsErrorOccurred+0xe8>
 80036f0:	2227      	movs	r2, #39	@ 0x27
 80036f2:	18bb      	adds	r3, r7, r2
 80036f4:	18ba      	adds	r2, r7, r2
 80036f6:	7812      	ldrb	r2, [r2, #0]
 80036f8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3301      	adds	r3, #1
 80036fe:	d04f      	beq.n	80037a0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003700:	f7ff f88e 	bl	8002820 <HAL_GetTick>
 8003704:	0002      	movs	r2, r0
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	429a      	cmp	r2, r3
 800370e:	d302      	bcc.n	8003716 <I2C_IsErrorOccurred+0x5e>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d144      	bne.n	80037a0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	2380      	movs	r3, #128	@ 0x80
 800371e:	01db      	lsls	r3, r3, #7
 8003720:	4013      	ands	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003724:	2013      	movs	r0, #19
 8003726:	183b      	adds	r3, r7, r0
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	2142      	movs	r1, #66	@ 0x42
 800372c:	5c52      	ldrb	r2, [r2, r1]
 800372e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	401a      	ands	r2, r3
 800373c:	2380      	movs	r3, #128	@ 0x80
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	429a      	cmp	r2, r3
 8003742:	d126      	bne.n	8003792 <I2C_IsErrorOccurred+0xda>
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	2380      	movs	r3, #128	@ 0x80
 8003748:	01db      	lsls	r3, r3, #7
 800374a:	429a      	cmp	r2, r3
 800374c:	d021      	beq.n	8003792 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800374e:	183b      	adds	r3, r7, r0
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b20      	cmp	r3, #32
 8003754:	d01d      	beq.n	8003792 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2180      	movs	r1, #128	@ 0x80
 8003762:	01c9      	lsls	r1, r1, #7
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003768:	f7ff f85a 	bl	8002820 <HAL_GetTick>
 800376c:	0003      	movs	r3, r0
 800376e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003770:	e00f      	b.n	8003792 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003772:	f7ff f855 	bl	8002820 <HAL_GetTick>
 8003776:	0002      	movs	r2, r0
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b19      	cmp	r3, #25
 800377e:	d908      	bls.n	8003792 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	2220      	movs	r2, #32
 8003784:	4313      	orrs	r3, r2
 8003786:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003788:	2327      	movs	r3, #39	@ 0x27
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]

              break;
 8003790:	e006      	b.n	80037a0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2220      	movs	r2, #32
 800379a:	4013      	ands	r3, r2
 800379c:	2b20      	cmp	r3, #32
 800379e:	d1e8      	bne.n	8003772 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2220      	movs	r2, #32
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d004      	beq.n	80037b8 <I2C_IsErrorOccurred+0x100>
 80037ae:	2327      	movs	r3, #39	@ 0x27
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d09b      	beq.n	80036f0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037b8:	2327      	movs	r3, #39	@ 0x27
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2220      	movs	r2, #32
 80037c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	2204      	movs	r2, #4
 80037ce:	4313      	orrs	r3, r2
 80037d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037d2:	2327      	movs	r3, #39	@ 0x27
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	2201      	movs	r2, #1
 80037d8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	2380      	movs	r3, #128	@ 0x80
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4013      	ands	r3, r2
 80037ea:	d00c      	beq.n	8003806 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	2201      	movs	r2, #1
 80037f0:	4313      	orrs	r3, r2
 80037f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2280      	movs	r2, #128	@ 0x80
 80037fa:	0052      	lsls	r2, r2, #1
 80037fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037fe:	2327      	movs	r3, #39	@ 0x27
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	2380      	movs	r3, #128	@ 0x80
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4013      	ands	r3, r2
 800380e:	d00c      	beq.n	800382a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	2208      	movs	r2, #8
 8003814:	4313      	orrs	r3, r2
 8003816:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2280      	movs	r2, #128	@ 0x80
 800381e:	00d2      	lsls	r2, r2, #3
 8003820:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003822:	2327      	movs	r3, #39	@ 0x27
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	2380      	movs	r3, #128	@ 0x80
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4013      	ands	r3, r2
 8003832:	d00c      	beq.n	800384e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	2202      	movs	r2, #2
 8003838:	4313      	orrs	r3, r2
 800383a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2280      	movs	r2, #128	@ 0x80
 8003842:	0092      	lsls	r2, r2, #2
 8003844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003846:	2327      	movs	r3, #39	@ 0x27
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800384e:	2327      	movs	r3, #39	@ 0x27
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01d      	beq.n	8003894 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	0018      	movs	r0, r3
 800385c:	f7ff fe28 	bl	80034b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	490e      	ldr	r1, [pc, #56]	@ (80038a4 <I2C_IsErrorOccurred+0x1ec>)
 800386c:	400a      	ands	r2, r1
 800386e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	431a      	orrs	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2241      	movs	r2, #65	@ 0x41
 8003880:	2120      	movs	r1, #32
 8003882:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2242      	movs	r2, #66	@ 0x42
 8003888:	2100      	movs	r1, #0
 800388a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2240      	movs	r2, #64	@ 0x40
 8003890:	2100      	movs	r1, #0
 8003892:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003894:	2327      	movs	r3, #39	@ 0x27
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	781b      	ldrb	r3, [r3, #0]
}
 800389a:	0018      	movs	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	b00a      	add	sp, #40	@ 0x28
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	fe00e800 	.word	0xfe00e800

080038a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	0008      	movs	r0, r1
 80038b2:	0011      	movs	r1, r2
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	240a      	movs	r4, #10
 80038b8:	193b      	adds	r3, r7, r4
 80038ba:	1c02      	adds	r2, r0, #0
 80038bc:	801a      	strh	r2, [r3, #0]
 80038be:	2009      	movs	r0, #9
 80038c0:	183b      	adds	r3, r7, r0
 80038c2:	1c0a      	adds	r2, r1, #0
 80038c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038c6:	193b      	adds	r3, r7, r4
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	059b      	lsls	r3, r3, #22
 80038cc:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ce:	183b      	adds	r3, r7, r0
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	0419      	lsls	r1, r3, #16
 80038d4:	23ff      	movs	r3, #255	@ 0xff
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038da:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e2:	4313      	orrs	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038f2:	0d51      	lsrs	r1, r2, #21
 80038f4:	2280      	movs	r2, #128	@ 0x80
 80038f6:	00d2      	lsls	r2, r2, #3
 80038f8:	400a      	ands	r2, r1
 80038fa:	4907      	ldr	r1, [pc, #28]	@ (8003918 <I2C_TransferConfig+0x70>)
 80038fc:	430a      	orrs	r2, r1
 80038fe:	43d2      	mvns	r2, r2
 8003900:	401a      	ands	r2, r3
 8003902:	0011      	movs	r1, r2
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	b007      	add	sp, #28
 8003914:	bd90      	pop	{r4, r7, pc}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	03ff63ff 	.word	0x03ff63ff

0800391c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2241      	movs	r2, #65	@ 0x41
 800392a:	5c9b      	ldrb	r3, [r3, r2]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b20      	cmp	r3, #32
 8003930:	d138      	bne.n	80039a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2240      	movs	r2, #64	@ 0x40
 8003936:	5c9b      	ldrb	r3, [r3, r2]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800393c:	2302      	movs	r3, #2
 800393e:	e032      	b.n	80039a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2240      	movs	r2, #64	@ 0x40
 8003944:	2101      	movs	r1, #1
 8003946:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2241      	movs	r2, #65	@ 0x41
 800394c:	2124      	movs	r1, #36	@ 0x24
 800394e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2101      	movs	r1, #1
 800395c:	438a      	bics	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4911      	ldr	r1, [pc, #68]	@ (80039b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800396c:	400a      	ands	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2101      	movs	r1, #1
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2241      	movs	r2, #65	@ 0x41
 8003994:	2120      	movs	r1, #32
 8003996:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2240      	movs	r2, #64	@ 0x40
 800399c:	2100      	movs	r1, #0
 800399e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b002      	add	sp, #8
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	ffffefff 	.word	0xffffefff

080039b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2241      	movs	r2, #65	@ 0x41
 80039c2:	5c9b      	ldrb	r3, [r3, r2]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d139      	bne.n	8003a3e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2240      	movs	r2, #64	@ 0x40
 80039ce:	5c9b      	ldrb	r3, [r3, r2]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e033      	b.n	8003a40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2240      	movs	r2, #64	@ 0x40
 80039dc:	2101      	movs	r1, #1
 80039de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2241      	movs	r2, #65	@ 0x41
 80039e4:	2124      	movs	r1, #36	@ 0x24
 80039e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2101      	movs	r1, #1
 80039f4:	438a      	bics	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a11      	ldr	r2, [pc, #68]	@ (8003a48 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2101      	movs	r1, #1
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2241      	movs	r2, #65	@ 0x41
 8003a2e:	2120      	movs	r1, #32
 8003a30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2240      	movs	r2, #64	@ 0x40
 8003a36:	2100      	movs	r1, #0
 8003a38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e000      	b.n	8003a40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a3e:	2302      	movs	r3, #2
  }
}
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b004      	add	sp, #16
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	fffff0ff 	.word	0xfffff0ff

08003a4c <HAL_PWR_EnableWakeUpPin>:
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @note  (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR4_WP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8003a54:	4b0c      	ldr	r3, [pc, #48]	@ (8003a88 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	212f      	movs	r1, #47	@ 0x2f
 8003a5c:	400a      	ands	r2, r1
 8003a5e:	43d2      	mvns	r2, r2
 8003a60:	401a      	ands	r2, r3
 8003a62:	0011      	movs	r1, r2
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0a1a      	lsrs	r2, r3, #8
 8003a68:	4b07      	ldr	r3, [pc, #28]	@ (8003a88 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	60da      	str	r2, [r3, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8003a6e:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003a70:	6899      	ldr	r1, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	222f      	movs	r2, #47	@ 0x2f
 8003a76:	401a      	ands	r2, r3
 8003a78:	4b03      	ldr	r3, [pc, #12]	@ (8003a88 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	609a      	str	r2, [r3, #8]
}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	40007000 	.word	0x40007000

08003a8c <HAL_PWR_EnterSTANDBYMode>:
  *         disable the same. These states are effective in Standby mode only if
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8003a90:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2207      	movs	r2, #7
 8003a96:	4393      	bics	r3, r2
 8003a98:	001a      	movs	r2, r3
 8003a9a:	4b07      	ldr	r3, [pc, #28]	@ (8003ab8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003a9c:	2103      	movs	r1, #3
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	4b05      	ldr	r3, [pc, #20]	@ (8003abc <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003aa8:	2104      	movs	r1, #4
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	611a      	str	r2, [r3, #16]

  /* Request Wait For Interrupt */
  __WFI();
 8003aae:	bf30      	wfi
}
 8003ab0:	46c0      	nop			@ (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e1d0      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d100      	bne.n	8003ade <HAL_RCC_OscConfig+0x1e>
 8003adc:	e069      	b.n	8003bb2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ade:	4bc8      	ldr	r3, [pc, #800]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2238      	movs	r2, #56	@ 0x38
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d105      	bne.n	8003afa <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d15d      	bne.n	8003bb2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e1bc      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	2380      	movs	r3, #128	@ 0x80
 8003b00:	025b      	lsls	r3, r3, #9
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d107      	bne.n	8003b16 <HAL_RCC_OscConfig+0x56>
 8003b06:	4bbe      	ldr	r3, [pc, #760]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4bbd      	ldr	r3, [pc, #756]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003b0c:	2180      	movs	r1, #128	@ 0x80
 8003b0e:	0249      	lsls	r1, r1, #9
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e020      	b.n	8003b58 <HAL_RCC_OscConfig+0x98>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	23a0      	movs	r3, #160	@ 0xa0
 8003b1c:	02db      	lsls	r3, r3, #11
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d10e      	bne.n	8003b40 <HAL_RCC_OscConfig+0x80>
 8003b22:	4bb7      	ldr	r3, [pc, #732]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4bb6      	ldr	r3, [pc, #728]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003b28:	2180      	movs	r1, #128	@ 0x80
 8003b2a:	02c9      	lsls	r1, r1, #11
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	4bb3      	ldr	r3, [pc, #716]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4bb2      	ldr	r3, [pc, #712]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	0249      	lsls	r1, r1, #9
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	e00b      	b.n	8003b58 <HAL_RCC_OscConfig+0x98>
 8003b40:	4baf      	ldr	r3, [pc, #700]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4bae      	ldr	r3, [pc, #696]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003b46:	49af      	ldr	r1, [pc, #700]	@ (8003e04 <HAL_RCC_OscConfig+0x344>)
 8003b48:	400a      	ands	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	4bac      	ldr	r3, [pc, #688]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4bab      	ldr	r3, [pc, #684]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003b52:	49ad      	ldr	r1, [pc, #692]	@ (8003e08 <HAL_RCC_OscConfig+0x348>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d014      	beq.n	8003b8a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fe fe5e 	bl	8002820 <HAL_GetTick>
 8003b64:	0003      	movs	r3, r0
 8003b66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003b6a:	f7fe fe59 	bl	8002820 <HAL_GetTick>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	@ 0x64
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e17b      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b7c:	4ba0      	ldr	r3, [pc, #640]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2380      	movs	r3, #128	@ 0x80
 8003b82:	029b      	lsls	r3, r3, #10
 8003b84:	4013      	ands	r3, r2
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0xaa>
 8003b88:	e013      	b.n	8003bb2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fe fe49 	bl	8002820 <HAL_GetTick>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003b94:	f7fe fe44 	bl	8002820 <HAL_GetTick>
 8003b98:	0002      	movs	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e166      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ba6:	4b96      	ldr	r3, [pc, #600]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	2380      	movs	r3, #128	@ 0x80
 8003bac:	029b      	lsls	r3, r3, #10
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d100      	bne.n	8003bbe <HAL_RCC_OscConfig+0xfe>
 8003bbc:	e086      	b.n	8003ccc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bbe:	4b90      	ldr	r3, [pc, #576]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2238      	movs	r2, #56	@ 0x38
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d12f      	bne.n	8003c2e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e14c      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b89      	ldr	r3, [pc, #548]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4a8b      	ldr	r2, [pc, #556]	@ (8003e0c <HAL_RCC_OscConfig+0x34c>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	0019      	movs	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	021a      	lsls	r2, r3, #8
 8003bea:	4b85      	ldr	r3, [pc, #532]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d112      	bne.n	8003c1c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003bf6:	4b82      	ldr	r3, [pc, #520]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a85      	ldr	r2, [pc, #532]	@ (8003e10 <HAL_RCC_OscConfig+0x350>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	4b7e      	ldr	r3, [pc, #504]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003c06:	430a      	orrs	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003c0a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	0adb      	lsrs	r3, r3, #11
 8003c10:	2207      	movs	r2, #7
 8003c12:	4013      	ands	r3, r2
 8003c14:	4a7f      	ldr	r2, [pc, #508]	@ (8003e14 <HAL_RCC_OscConfig+0x354>)
 8003c16:	40da      	lsrs	r2, r3
 8003c18:	4b7f      	ldr	r3, [pc, #508]	@ (8003e18 <HAL_RCC_OscConfig+0x358>)
 8003c1a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c1c:	4b7f      	ldr	r3, [pc, #508]	@ (8003e1c <HAL_RCC_OscConfig+0x35c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7fe fda1 	bl	8002768 <HAL_InitTick>
 8003c26:	1e03      	subs	r3, r0, #0
 8003c28:	d050      	beq.n	8003ccc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e122      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d030      	beq.n	8003c98 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c36:	4b72      	ldr	r3, [pc, #456]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a75      	ldr	r2, [pc, #468]	@ (8003e10 <HAL_RCC_OscConfig+0x350>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	0019      	movs	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	4b6e      	ldr	r3, [pc, #440]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8003c4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b6c      	ldr	r3, [pc, #432]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003c50:	2180      	movs	r1, #128	@ 0x80
 8003c52:	0049      	lsls	r1, r1, #1
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fde2 	bl	8002820 <HAL_GetTick>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003c62:	f7fe fddd 	bl	8002820 <HAL_GetTick>
 8003c66:	0002      	movs	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e0ff      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c74:	4b62      	ldr	r3, [pc, #392]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	2380      	movs	r3, #128	@ 0x80
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c80:	4b5f      	ldr	r3, [pc, #380]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4a61      	ldr	r2, [pc, #388]	@ (8003e0c <HAL_RCC_OscConfig+0x34c>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	0019      	movs	r1, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	021a      	lsls	r2, r3, #8
 8003c90:	4b5b      	ldr	r3, [pc, #364]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	e019      	b.n	8003ccc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003c98:	4b59      	ldr	r3, [pc, #356]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b58      	ldr	r3, [pc, #352]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003c9e:	4960      	ldr	r1, [pc, #384]	@ (8003e20 <HAL_RCC_OscConfig+0x360>)
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fdbc 	bl	8002820 <HAL_GetTick>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003cae:	f7fe fdb7 	bl	8002820 <HAL_GetTick>
 8003cb2:	0002      	movs	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e0d9      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	2380      	movs	r3, #128	@ 0x80
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d1f0      	bne.n	8003cae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d042      	beq.n	8003d5c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2238      	movs	r2, #56	@ 0x38
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b18      	cmp	r3, #24
 8003ce0:	d105      	bne.n	8003cee <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d138      	bne.n	8003d5c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0c2      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d019      	beq.n	8003d2a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003cf6:	4b42      	ldr	r3, [pc, #264]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003cf8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003cfa:	4b41      	ldr	r3, [pc, #260]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fe fd8d 	bl	8002820 <HAL_GetTick>
 8003d06:	0003      	movs	r3, r0
 8003d08:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003d0c:	f7fe fd88 	bl	8002820 <HAL_GetTick>
 8003d10:	0002      	movs	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0aa      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003d1e:	4b38      	ldr	r3, [pc, #224]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d22:	2202      	movs	r2, #2
 8003d24:	4013      	ands	r3, r2
 8003d26:	d0f1      	beq.n	8003d0c <HAL_RCC_OscConfig+0x24c>
 8003d28:	e018      	b.n	8003d5c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003d2a:	4b35      	ldr	r3, [pc, #212]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003d2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d2e:	4b34      	ldr	r3, [pc, #208]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003d30:	2101      	movs	r1, #1
 8003d32:	438a      	bics	r2, r1
 8003d34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d36:	f7fe fd73 	bl	8002820 <HAL_GetTick>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003d40:	f7fe fd6e 	bl	8002820 <HAL_GetTick>
 8003d44:	0002      	movs	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e090      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003d52:	4b2b      	ldr	r3, [pc, #172]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d56:	2202      	movs	r2, #2
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d1f1      	bne.n	8003d40 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2204      	movs	r2, #4
 8003d62:	4013      	ands	r3, r2
 8003d64:	d100      	bne.n	8003d68 <HAL_RCC_OscConfig+0x2a8>
 8003d66:	e084      	b.n	8003e72 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d68:	230f      	movs	r3, #15
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003d70:	4b23      	ldr	r3, [pc, #140]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2238      	movs	r2, #56	@ 0x38
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d106      	bne.n	8003d8a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d000      	beq.n	8003d86 <HAL_RCC_OscConfig+0x2c6>
 8003d84:	e075      	b.n	8003e72 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e074      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d106      	bne.n	8003da0 <HAL_RCC_OscConfig+0x2e0>
 8003d92:	4b1b      	ldr	r3, [pc, #108]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003d94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d96:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003d98:	2101      	movs	r1, #1
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d9e:	e01c      	b.n	8003dda <HAL_RCC_OscConfig+0x31a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b05      	cmp	r3, #5
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x302>
 8003da8:	4b15      	ldr	r3, [pc, #84]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003daa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dac:	4b14      	ldr	r3, [pc, #80]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003dae:	2104      	movs	r1, #4
 8003db0:	430a      	orrs	r2, r1
 8003db2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003db4:	4b12      	ldr	r3, [pc, #72]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003db6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003db8:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003dba:	2101      	movs	r1, #1
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dc0:	e00b      	b.n	8003dda <HAL_RCC_OscConfig+0x31a>
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003dc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003dc8:	2101      	movs	r1, #1
 8003dca:	438a      	bics	r2, r1
 8003dcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dce:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003dd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <HAL_RCC_OscConfig+0x340>)
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	438a      	bics	r2, r1
 8003dd8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d028      	beq.n	8003e34 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de2:	f7fe fd1d 	bl	8002820 <HAL_GetTick>
 8003de6:	0003      	movs	r3, r0
 8003de8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003dea:	e01d      	b.n	8003e28 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fe fd18 	bl	8002820 <HAL_GetTick>
 8003df0:	0002      	movs	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	4a0b      	ldr	r2, [pc, #44]	@ (8003e24 <HAL_RCC_OscConfig+0x364>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d915      	bls.n	8003e28 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e039      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
 8003e00:	40021000 	.word	0x40021000
 8003e04:	fffeffff 	.word	0xfffeffff
 8003e08:	fffbffff 	.word	0xfffbffff
 8003e0c:	ffff80ff 	.word	0xffff80ff
 8003e10:	ffffc7ff 	.word	0xffffc7ff
 8003e14:	02dc6c00 	.word	0x02dc6c00
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	20000004 	.word	0x20000004
 8003e20:	fffffeff 	.word	0xfffffeff
 8003e24:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003e28:	4b14      	ldr	r3, [pc, #80]	@ (8003e7c <HAL_RCC_OscConfig+0x3bc>)
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d0dc      	beq.n	8003dec <HAL_RCC_OscConfig+0x32c>
 8003e32:	e013      	b.n	8003e5c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fe fcf4 	bl	8002820 <HAL_GetTick>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003e3c:	e009      	b.n	8003e52 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fe fcef 	bl	8002820 <HAL_GetTick>
 8003e42:	0002      	movs	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	4a0d      	ldr	r2, [pc, #52]	@ (8003e80 <HAL_RCC_OscConfig+0x3c0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e010      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003e52:	4b0a      	ldr	r3, [pc, #40]	@ (8003e7c <HAL_RCC_OscConfig+0x3bc>)
 8003e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e56:	2202      	movs	r2, #2
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d1f0      	bne.n	8003e3e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e5c:	230f      	movs	r3, #15
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e66:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <HAL_RCC_OscConfig+0x3bc>)
 8003e68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e6a:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <HAL_RCC_OscConfig+0x3bc>)
 8003e6c:	4905      	ldr	r1, [pc, #20]	@ (8003e84 <HAL_RCC_OscConfig+0x3c4>)
 8003e6e:	400a      	ands	r2, r1
 8003e70:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b006      	add	sp, #24
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	00001388 	.word	0x00001388
 8003e84:	efffffff 	.word	0xefffffff

08003e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0df      	b.n	800405c <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e9c:	4b71      	ldr	r3, [pc, #452]	@ (8004064 <HAL_RCC_ClockConfig+0x1dc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d91e      	bls.n	8003ee8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8004064 <HAL_RCC_ClockConfig+0x1dc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2207      	movs	r2, #7
 8003eb0:	4393      	bics	r3, r2
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	4b6b      	ldr	r3, [pc, #428]	@ (8004064 <HAL_RCC_ClockConfig+0x1dc>)
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ebc:	f7fe fcb0 	bl	8002820 <HAL_GetTick>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ec4:	e009      	b.n	8003eda <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec6:	f7fe fcab 	bl	8002820 <HAL_GetTick>
 8003eca:	0002      	movs	r2, r0
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	4a65      	ldr	r2, [pc, #404]	@ (8004068 <HAL_RCC_ClockConfig+0x1e0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0c0      	b.n	800405c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003eda:	4b62      	ldr	r3, [pc, #392]	@ (8004064 <HAL_RCC_ClockConfig+0x1dc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2207      	movs	r2, #7
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d1ee      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2202      	movs	r2, #2
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d017      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d008      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003efc:	4b5b      	ldr	r3, [pc, #364]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a5b      	ldr	r2, [pc, #364]	@ (8004070 <HAL_RCC_ClockConfig+0x1e8>)
 8003f02:	401a      	ands	r2, r3
 8003f04:	4b59      	ldr	r3, [pc, #356]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 8003f06:	21b0      	movs	r1, #176	@ 0xb0
 8003f08:	0109      	lsls	r1, r1, #4
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0e:	4b57      	ldr	r3, [pc, #348]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4a58      	ldr	r2, [pc, #352]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	0019      	movs	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	4b53      	ldr	r3, [pc, #332]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2201      	movs	r2, #1
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d04b      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d107      	bne.n	8003f44 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f34:	4b4d      	ldr	r3, [pc, #308]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	2380      	movs	r3, #128	@ 0x80
 8003f3a:	029b      	lsls	r3, r3, #10
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d11f      	bne.n	8003f80 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e08b      	b.n	800405c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f4c:	4b47      	ldr	r3, [pc, #284]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	2380      	movs	r3, #128	@ 0x80
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4013      	ands	r3, r2
 8003f56:	d113      	bne.n	8003f80 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e07f      	b.n	800405c <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003f64:	4b41      	ldr	r3, [pc, #260]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 8003f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f68:	2202      	movs	r2, #2
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d108      	bne.n	8003f80 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e074      	b.n	800405c <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003f72:	4b3e      	ldr	r3, [pc, #248]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 8003f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f76:	2202      	movs	r2, #2
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e06d      	b.n	800405c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f80:	4b3a      	ldr	r3, [pc, #232]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2207      	movs	r2, #7
 8003f86:	4393      	bics	r3, r2
 8003f88:	0019      	movs	r1, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	4b37      	ldr	r3, [pc, #220]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 8003f90:	430a      	orrs	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f94:	f7fe fc44 	bl	8002820 <HAL_GetTick>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9c:	e009      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9e:	f7fe fc3f 	bl	8002820 <HAL_GetTick>
 8003fa2:	0002      	movs	r2, r0
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8004068 <HAL_RCC_ClockConfig+0x1e0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e054      	b.n	800405c <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2238      	movs	r2, #56	@ 0x38
 8003fb8:	401a      	ands	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d1ec      	bne.n	8003f9e <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc4:	4b27      	ldr	r3, [pc, #156]	@ (8004064 <HAL_RCC_ClockConfig+0x1dc>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2207      	movs	r2, #7
 8003fca:	4013      	ands	r3, r2
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d21e      	bcs.n	8004010 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd2:	4b24      	ldr	r3, [pc, #144]	@ (8004064 <HAL_RCC_ClockConfig+0x1dc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2207      	movs	r2, #7
 8003fd8:	4393      	bics	r3, r2
 8003fda:	0019      	movs	r1, r3
 8003fdc:	4b21      	ldr	r3, [pc, #132]	@ (8004064 <HAL_RCC_ClockConfig+0x1dc>)
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fe4:	f7fe fc1c 	bl	8002820 <HAL_GetTick>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fec:	e009      	b.n	8004002 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003fee:	f7fe fc17 	bl	8002820 <HAL_GetTick>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8004068 <HAL_RCC_ClockConfig+0x1e0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e02c      	b.n	800405c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004002:	4b18      	ldr	r3, [pc, #96]	@ (8004064 <HAL_RCC_ClockConfig+0x1dc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2207      	movs	r2, #7
 8004008:	4013      	ands	r3, r2
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d1ee      	bne.n	8003fee <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2204      	movs	r2, #4
 8004016:	4013      	ands	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800401a:	4b14      	ldr	r3, [pc, #80]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	4a16      	ldr	r2, [pc, #88]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8004020:	4013      	ands	r3, r2
 8004022:	0019      	movs	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	4b10      	ldr	r3, [pc, #64]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 800402a:	430a      	orrs	r2, r1
 800402c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800402e:	f000 f82b 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004032:	0001      	movs	r1, r0
 8004034:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <HAL_RCC_ClockConfig+0x1e4>)
 8004036:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	220f      	movs	r2, #15
 800403c:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800403e:	4b0f      	ldr	r3, [pc, #60]	@ (800407c <HAL_RCC_ClockConfig+0x1f4>)
 8004040:	0092      	lsls	r2, r2, #2
 8004042:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004044:	221f      	movs	r2, #31
 8004046:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004048:	000a      	movs	r2, r1
 800404a:	40da      	lsrs	r2, r3
 800404c:	4b0c      	ldr	r3, [pc, #48]	@ (8004080 <HAL_RCC_ClockConfig+0x1f8>)
 800404e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004050:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <HAL_RCC_ClockConfig+0x1fc>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	0018      	movs	r0, r3
 8004056:	f7fe fb87 	bl	8002768 <HAL_InitTick>
 800405a:	0003      	movs	r3, r0
}
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	b004      	add	sp, #16
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40022000 	.word	0x40022000
 8004068:	00001388 	.word	0x00001388
 800406c:	40021000 	.word	0x40021000
 8004070:	ffff84ff 	.word	0xffff84ff
 8004074:	fffff0ff 	.word	0xfffff0ff
 8004078:	ffff8fff 	.word	0xffff8fff
 800407c:	080051b0 	.word	0x080051b0
 8004080:	20000000 	.word	0x20000000
 8004084:	20000004 	.word	0x20000004

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800408e:	4b1c      	ldr	r3, [pc, #112]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x78>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2238      	movs	r2, #56	@ 0x38
 8004094:	4013      	ands	r3, r2
 8004096:	d10f      	bne.n	80040b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004098:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x78>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	0adb      	lsrs	r3, r3, #11
 800409e:	2207      	movs	r2, #7
 80040a0:	4013      	ands	r3, r2
 80040a2:	2201      	movs	r2, #1
 80040a4:	409a      	lsls	r2, r3
 80040a6:	0013      	movs	r3, r2
 80040a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80040aa:	6839      	ldr	r1, [r7, #0]
 80040ac:	4815      	ldr	r0, [pc, #84]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x7c>)
 80040ae:	f7fc f82b 	bl	8000108 <__udivsi3>
 80040b2:	0003      	movs	r3, r0
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	e01e      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040b8:	4b11      	ldr	r3, [pc, #68]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x78>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2238      	movs	r2, #56	@ 0x38
 80040be:	4013      	ands	r3, r2
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d102      	bne.n	80040ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040c4:	4b10      	ldr	r3, [pc, #64]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x80>)
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	e015      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80040ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x78>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2238      	movs	r2, #56	@ 0x38
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d103      	bne.n	80040de <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80040d6:	2380      	movs	r3, #128	@ 0x80
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	e00b      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80040de:	4b08      	ldr	r3, [pc, #32]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x78>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2238      	movs	r2, #56	@ 0x38
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b18      	cmp	r3, #24
 80040e8:	d103      	bne.n	80040f2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80040ea:	23fa      	movs	r3, #250	@ 0xfa
 80040ec:	01db      	lsls	r3, r3, #7
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	e001      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80040f6:	687b      	ldr	r3, [r7, #4]
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b002      	add	sp, #8
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	02dc6c00 	.word	0x02dc6c00
 8004108:	007a1200 	.word	0x007a1200

0800410c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004110:	f7ff ffba 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004114:	0001      	movs	r1, r0
 8004116:	4b09      	ldr	r3, [pc, #36]	@ (800413c <HAL_RCC_GetHCLKFreq+0x30>)
 8004118:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	220f      	movs	r2, #15
 800411e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004120:	4b07      	ldr	r3, [pc, #28]	@ (8004140 <HAL_RCC_GetHCLKFreq+0x34>)
 8004122:	0092      	lsls	r2, r2, #2
 8004124:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004126:	221f      	movs	r2, #31
 8004128:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800412a:	000a      	movs	r2, r1
 800412c:	40da      	lsrs	r2, r3
 800412e:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <HAL_RCC_GetHCLKFreq+0x38>)
 8004130:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8004132:	4b04      	ldr	r3, [pc, #16]	@ (8004144 <HAL_RCC_GetHCLKFreq+0x38>)
 8004134:	681b      	ldr	r3, [r3, #0]
}
 8004136:	0018      	movs	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40021000 	.word	0x40021000
 8004140:	080051b0 	.word	0x080051b0
 8004144:	20000000 	.word	0x20000000

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800414c:	f7ff ffde 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004150:	0001      	movs	r1, r0
 8004152:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0b1b      	lsrs	r3, r3, #12
 8004158:	2207      	movs	r2, #7
 800415a:	401a      	ands	r2, r3
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800415e:	0092      	lsls	r2, r2, #2
 8004160:	58d3      	ldr	r3, [r2, r3]
 8004162:	221f      	movs	r2, #31
 8004164:	4013      	ands	r3, r2
 8004166:	40d9      	lsrs	r1, r3
 8004168:	000b      	movs	r3, r1
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	080051f0 	.word	0x080051f0

08004178 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004180:	2313      	movs	r3, #19
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004188:	2312      	movs	r3, #18
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2240      	movs	r2, #64	@ 0x40
 8004196:	4013      	ands	r3, r2
 8004198:	d100      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x24>
 800419a:	e079      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419c:	2011      	movs	r0, #17
 800419e:	183b      	adds	r3, r7, r0
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a4:	4b63      	ldr	r3, [pc, #396]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041a8:	2380      	movs	r3, #128	@ 0x80
 80041aa:	055b      	lsls	r3, r3, #21
 80041ac:	4013      	ands	r3, r2
 80041ae:	d110      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b0:	4b60      	ldr	r3, [pc, #384]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041b4:	4b5f      	ldr	r3, [pc, #380]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041b6:	2180      	movs	r1, #128	@ 0x80
 80041b8:	0549      	lsls	r1, r1, #21
 80041ba:	430a      	orrs	r2, r1
 80041bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80041be:	4b5d      	ldr	r3, [pc, #372]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041c2:	2380      	movs	r3, #128	@ 0x80
 80041c4:	055b      	lsls	r3, r3, #21
 80041c6:	4013      	ands	r3, r2
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041cc:	183b      	adds	r3, r7, r0
 80041ce:	2201      	movs	r2, #1
 80041d0:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80041d2:	4b58      	ldr	r3, [pc, #352]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041d6:	23c0      	movs	r3, #192	@ 0xc0
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4013      	ands	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d019      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d014      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80041ee:	4b51      	ldr	r3, [pc, #324]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f2:	4a51      	ldr	r2, [pc, #324]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041f8:	4b4e      	ldr	r3, [pc, #312]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041fe:	2180      	movs	r1, #128	@ 0x80
 8004200:	0249      	lsls	r1, r1, #9
 8004202:	430a      	orrs	r2, r1
 8004204:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004206:	4b4b      	ldr	r3, [pc, #300]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004208:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800420a:	4b4a      	ldr	r3, [pc, #296]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800420c:	494b      	ldr	r1, [pc, #300]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800420e:	400a      	ands	r2, r1
 8004210:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004212:	4b48      	ldr	r3, [pc, #288]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2201      	movs	r2, #1
 800421c:	4013      	ands	r3, r2
 800421e:	d016      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fe fafe 	bl	8002820 <HAL_GetTick>
 8004224:	0003      	movs	r3, r0
 8004226:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004228:	e00c      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fe faf9 	bl	8002820 <HAL_GetTick>
 800422e:	0002      	movs	r2, r0
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	4a42      	ldr	r2, [pc, #264]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d904      	bls.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800423a:	2313      	movs	r3, #19
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	2203      	movs	r2, #3
 8004240:	701a      	strb	r2, [r3, #0]
          break;
 8004242:	e004      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004244:	4b3b      	ldr	r3, [pc, #236]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004248:	2202      	movs	r2, #2
 800424a:	4013      	ands	r3, r2
 800424c:	d0ed      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800424e:	2313      	movs	r3, #19
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004258:	4b36      	ldr	r3, [pc, #216]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800425a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425c:	4a36      	ldr	r2, [pc, #216]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800425e:	4013      	ands	r3, r2
 8004260:	0019      	movs	r1, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	4b33      	ldr	r3, [pc, #204]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004268:	430a      	orrs	r2, r1
 800426a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800426c:	e005      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	2312      	movs	r3, #18
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	2213      	movs	r2, #19
 8004274:	18ba      	adds	r2, r7, r2
 8004276:	7812      	ldrb	r2, [r2, #0]
 8004278:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800427a:	2311      	movs	r3, #17
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d105      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004284:	4b2b      	ldr	r3, [pc, #172]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004286:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004288:	4b2a      	ldr	r3, [pc, #168]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800428a:	492e      	ldr	r1, [pc, #184]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800428c:	400a      	ands	r2, r1
 800428e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2201      	movs	r2, #1
 8004296:	4013      	ands	r3, r2
 8004298:	d009      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800429a:	4b26      	ldr	r3, [pc, #152]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800429c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429e:	2203      	movs	r2, #3
 80042a0:	4393      	bics	r3, r2
 80042a2:	0019      	movs	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	4b22      	ldr	r3, [pc, #136]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042aa:	430a      	orrs	r2, r1
 80042ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2202      	movs	r2, #2
 80042b4:	4013      	ands	r3, r2
 80042b6:	d009      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042bc:	4a22      	ldr	r2, [pc, #136]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042be:	4013      	ands	r3, r2
 80042c0:	0019      	movs	r1, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042c8:	430a      	orrs	r2, r1
 80042ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2220      	movs	r2, #32
 80042d2:	4013      	ands	r3, r2
 80042d4:	d008      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d6:	4b17      	ldr	r3, [pc, #92]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	0899      	lsrs	r1, r3, #2
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695a      	ldr	r2, [r3, #20]
 80042e2:	4b14      	ldr	r3, [pc, #80]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042e4:	430a      	orrs	r2, r1
 80042e6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2204      	movs	r2, #4
 80042ee:	4013      	ands	r3, r2
 80042f0:	d009      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80042f2:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f6:	4a15      	ldr	r2, [pc, #84]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	4b0c      	ldr	r3, [pc, #48]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004302:	430a      	orrs	r2, r1
 8004304:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2280      	movs	r2, #128	@ 0x80
 800430c:	4013      	ands	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004310:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	22e0      	movs	r2, #224	@ 0xe0
 8004316:	4393      	bics	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004320:	430a      	orrs	r2, r1
 8004322:	601a      	str	r2, [r3, #0]
  }
  return status;
 8004324:	2312      	movs	r3, #18
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	781b      	ldrb	r3, [r3, #0]
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	b006      	add	sp, #24
 8004330:	bd80      	pop	{r7, pc}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	40021000 	.word	0x40021000
 8004338:	fffffcff 	.word	0xfffffcff
 800433c:	fffeffff 	.word	0xfffeffff
 8004340:	00001388 	.word	0x00001388
 8004344:	efffffff 	.word	0xefffffff
 8004348:	ffffcfff 	.word	0xffffcfff
 800434c:	ffff3fff 	.word	0xffff3fff

08004350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e04a      	b.n	80043f8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	223d      	movs	r2, #61	@ 0x3d
 8004366:	5c9b      	ldrb	r3, [r3, r2]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d107      	bne.n	800437e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	223c      	movs	r2, #60	@ 0x3c
 8004372:	2100      	movs	r1, #0
 8004374:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	0018      	movs	r0, r3
 800437a:	f7fe f8e1 	bl	8002540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	223d      	movs	r2, #61	@ 0x3d
 8004382:	2102      	movs	r1, #2
 8004384:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	0019      	movs	r1, r3
 8004390:	0010      	movs	r0, r2
 8004392:	f000 f835 	bl	8004400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2248      	movs	r2, #72	@ 0x48
 800439a:	2101      	movs	r1, #1
 800439c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	223e      	movs	r2, #62	@ 0x3e
 80043a2:	2101      	movs	r1, #1
 80043a4:	5499      	strb	r1, [r3, r2]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	223f      	movs	r2, #63	@ 0x3f
 80043aa:	2101      	movs	r1, #1
 80043ac:	5499      	strb	r1, [r3, r2]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2240      	movs	r2, #64	@ 0x40
 80043b2:	2101      	movs	r1, #1
 80043b4:	5499      	strb	r1, [r3, r2]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2241      	movs	r2, #65	@ 0x41
 80043ba:	2101      	movs	r1, #1
 80043bc:	5499      	strb	r1, [r3, r2]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2242      	movs	r2, #66	@ 0x42
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2243      	movs	r2, #67	@ 0x43
 80043ca:	2101      	movs	r1, #1
 80043cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2244      	movs	r2, #68	@ 0x44
 80043d2:	2101      	movs	r1, #1
 80043d4:	5499      	strb	r1, [r3, r2]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2245      	movs	r2, #69	@ 0x45
 80043da:	2101      	movs	r1, #1
 80043dc:	5499      	strb	r1, [r3, r2]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2246      	movs	r2, #70	@ 0x46
 80043e2:	2101      	movs	r1, #1
 80043e4:	5499      	strb	r1, [r3, r2]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2247      	movs	r2, #71	@ 0x47
 80043ea:	2101      	movs	r1, #1
 80043ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	223d      	movs	r2, #61	@ 0x3d
 80043f2:	2101      	movs	r1, #1
 80043f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	0018      	movs	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b002      	add	sp, #8
 80043fe:	bd80      	pop	{r7, pc}

08004400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a2e      	ldr	r2, [pc, #184]	@ (80044cc <TIM_Base_SetConfig+0xcc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_Base_SetConfig+0x20>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a2d      	ldr	r2, [pc, #180]	@ (80044d0 <TIM_Base_SetConfig+0xd0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d108      	bne.n	8004432 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2270      	movs	r2, #112	@ 0x70
 8004424:	4393      	bics	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a25      	ldr	r2, [pc, #148]	@ (80044cc <TIM_Base_SetConfig+0xcc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00f      	beq.n	800445a <TIM_Base_SetConfig+0x5a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a24      	ldr	r2, [pc, #144]	@ (80044d0 <TIM_Base_SetConfig+0xd0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00b      	beq.n	800445a <TIM_Base_SetConfig+0x5a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a23      	ldr	r2, [pc, #140]	@ (80044d4 <TIM_Base_SetConfig+0xd4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <TIM_Base_SetConfig+0x5a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a22      	ldr	r2, [pc, #136]	@ (80044d8 <TIM_Base_SetConfig+0xd8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_Base_SetConfig+0x5a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a21      	ldr	r2, [pc, #132]	@ (80044dc <TIM_Base_SetConfig+0xdc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d108      	bne.n	800446c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4a20      	ldr	r2, [pc, #128]	@ (80044e0 <TIM_Base_SetConfig+0xe0>)
 800445e:	4013      	ands	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2280      	movs	r2, #128	@ 0x80
 8004470:	4393      	bics	r3, r2
 8004472:	001a      	movs	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a0f      	ldr	r2, [pc, #60]	@ (80044cc <TIM_Base_SetConfig+0xcc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <TIM_Base_SetConfig+0xa4>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a10      	ldr	r2, [pc, #64]	@ (80044d8 <TIM_Base_SetConfig+0xd8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_Base_SetConfig+0xa4>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a0f      	ldr	r2, [pc, #60]	@ (80044dc <TIM_Base_SetConfig+0xdc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d103      	bne.n	80044ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2204      	movs	r2, #4
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	601a      	str	r2, [r3, #0]
}
 80044c4:	46c0      	nop			@ (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b004      	add	sp, #16
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40002000 	.word	0x40002000
 80044d8:	40014400 	.word	0x40014400
 80044dc:	40014800 	.word	0x40014800
 80044e0:	fffffcff 	.word	0xfffffcff

080044e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e046      	b.n	8004584 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2288      	movs	r2, #136	@ 0x88
 80044fa:	589b      	ldr	r3, [r3, r2]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d107      	bne.n	8004510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2284      	movs	r2, #132	@ 0x84
 8004504:	2100      	movs	r1, #0
 8004506:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	0018      	movs	r0, r3
 800450c:	f7fe f88a 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2288      	movs	r2, #136	@ 0x88
 8004514:	2124      	movs	r1, #36	@ 0x24
 8004516:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2101      	movs	r1, #1
 8004524:	438a      	bics	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	0018      	movs	r0, r3
 8004534:	f000 fa90 	bl	8004a58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	0018      	movs	r0, r3
 800453c:	f000 f90e 	bl	800475c <UART_SetConfig>
 8004540:	0003      	movs	r3, r0
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e01c      	b.n	8004584 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	490d      	ldr	r1, [pc, #52]	@ (800458c <HAL_UART_Init+0xa8>)
 8004556:	400a      	ands	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	212a      	movs	r1, #42	@ 0x2a
 8004566:	438a      	bics	r2, r1
 8004568:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	430a      	orrs	r2, r1
 8004578:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0018      	movs	r0, r3
 800457e:	f000 fb1f 	bl	8004bc0 <UART_CheckIdleState>
 8004582:	0003      	movs	r3, r0
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b002      	add	sp, #8
 800458a:	bd80      	pop	{r7, pc}
 800458c:	ffffb7ff 	.word	0xffffb7ff

08004590 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	@ 0x28
 8004594:	af02      	add	r7, sp, #8
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	1dbb      	adds	r3, r7, #6
 800459e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	228c      	movs	r2, #140	@ 0x8c
 80045a4:	589b      	ldr	r3, [r3, r2]
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d000      	beq.n	80045ac <HAL_UART_Receive+0x1c>
 80045aa:	e0d0      	b.n	800474e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_UART_Receive+0x2a>
 80045b2:	1dbb      	adds	r3, r7, #6
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e0c8      	b.n	8004750 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	2380      	movs	r3, #128	@ 0x80
 80045c4:	015b      	lsls	r3, r3, #5
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d109      	bne.n	80045de <HAL_UART_Receive+0x4e>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d105      	bne.n	80045de <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2201      	movs	r2, #1
 80045d6:	4013      	ands	r3, r2
 80045d8:	d001      	beq.n	80045de <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e0b8      	b.n	8004750 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2290      	movs	r2, #144	@ 0x90
 80045e2:	2100      	movs	r1, #0
 80045e4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	228c      	movs	r2, #140	@ 0x8c
 80045ea:	2122      	movs	r1, #34	@ 0x22
 80045ec:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045f4:	f7fe f914 	bl	8002820 <HAL_GetTick>
 80045f8:	0003      	movs	r3, r0
 80045fa:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1dba      	adds	r2, r7, #6
 8004600:	215c      	movs	r1, #92	@ 0x5c
 8004602:	8812      	ldrh	r2, [r2, #0]
 8004604:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1dba      	adds	r2, r7, #6
 800460a:	215e      	movs	r1, #94	@ 0x5e
 800460c:	8812      	ldrh	r2, [r2, #0]
 800460e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	2380      	movs	r3, #128	@ 0x80
 8004616:	015b      	lsls	r3, r3, #5
 8004618:	429a      	cmp	r2, r3
 800461a:	d10d      	bne.n	8004638 <HAL_UART_Receive+0xa8>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <HAL_UART_Receive+0x9e>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2260      	movs	r2, #96	@ 0x60
 8004628:	494b      	ldr	r1, [pc, #300]	@ (8004758 <HAL_UART_Receive+0x1c8>)
 800462a:	5299      	strh	r1, [r3, r2]
 800462c:	e02e      	b.n	800468c <HAL_UART_Receive+0xfc>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2260      	movs	r2, #96	@ 0x60
 8004632:	21ff      	movs	r1, #255	@ 0xff
 8004634:	5299      	strh	r1, [r3, r2]
 8004636:	e029      	b.n	800468c <HAL_UART_Receive+0xfc>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10d      	bne.n	800465c <HAL_UART_Receive+0xcc>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d104      	bne.n	8004652 <HAL_UART_Receive+0xc2>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2260      	movs	r2, #96	@ 0x60
 800464c:	21ff      	movs	r1, #255	@ 0xff
 800464e:	5299      	strh	r1, [r3, r2]
 8004650:	e01c      	b.n	800468c <HAL_UART_Receive+0xfc>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2260      	movs	r2, #96	@ 0x60
 8004656:	217f      	movs	r1, #127	@ 0x7f
 8004658:	5299      	strh	r1, [r3, r2]
 800465a:	e017      	b.n	800468c <HAL_UART_Receive+0xfc>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	2380      	movs	r3, #128	@ 0x80
 8004662:	055b      	lsls	r3, r3, #21
 8004664:	429a      	cmp	r2, r3
 8004666:	d10d      	bne.n	8004684 <HAL_UART_Receive+0xf4>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <HAL_UART_Receive+0xea>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2260      	movs	r2, #96	@ 0x60
 8004674:	217f      	movs	r1, #127	@ 0x7f
 8004676:	5299      	strh	r1, [r3, r2]
 8004678:	e008      	b.n	800468c <HAL_UART_Receive+0xfc>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2260      	movs	r2, #96	@ 0x60
 800467e:	213f      	movs	r1, #63	@ 0x3f
 8004680:	5299      	strh	r1, [r3, r2]
 8004682:	e003      	b.n	800468c <HAL_UART_Receive+0xfc>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2260      	movs	r2, #96	@ 0x60
 8004688:	2100      	movs	r1, #0
 800468a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800468c:	2312      	movs	r3, #18
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	2160      	movs	r1, #96	@ 0x60
 8004694:	5a52      	ldrh	r2, [r2, r1]
 8004696:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	015b      	lsls	r3, r3, #5
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d108      	bne.n	80046b6 <HAL_UART_Receive+0x126>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d104      	bne.n	80046b6 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	e003      	b.n	80046be <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80046be:	e03a      	b.n	8004736 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	0013      	movs	r3, r2
 80046ca:	2200      	movs	r2, #0
 80046cc:	2120      	movs	r1, #32
 80046ce:	f000 fb21 	bl	8004d14 <UART_WaitOnFlagUntilTimeout>
 80046d2:	1e03      	subs	r3, r0, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	228c      	movs	r2, #140	@ 0x8c
 80046da:	2120      	movs	r1, #32
 80046dc:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e036      	b.n	8004750 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10e      	bne.n	8004706 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2212      	movs	r2, #18
 80046f2:	18ba      	adds	r2, r7, r2
 80046f4:	8812      	ldrh	r2, [r2, #0]
 80046f6:	4013      	ands	r3, r2
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	3302      	adds	r3, #2
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	e00e      	b.n	8004724 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2212      	movs	r2, #18
 8004710:	18ba      	adds	r2, r7, r2
 8004712:	8812      	ldrh	r2, [r2, #0]
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	4013      	ands	r3, r2
 8004718:	b2da      	uxtb	r2, r3
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3301      	adds	r3, #1
 8004722:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	225e      	movs	r2, #94	@ 0x5e
 8004728:	5a9b      	ldrh	r3, [r3, r2]
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b299      	uxth	r1, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	225e      	movs	r2, #94	@ 0x5e
 8004734:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	225e      	movs	r2, #94	@ 0x5e
 800473a:	5a9b      	ldrh	r3, [r3, r2]
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1be      	bne.n	80046c0 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	228c      	movs	r2, #140	@ 0x8c
 8004746:	2120      	movs	r1, #32
 8004748:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	e000      	b.n	8004750 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800474e:	2302      	movs	r3, #2
  }
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	b008      	add	sp, #32
 8004756:	bd80      	pop	{r7, pc}
 8004758:	000001ff 	.word	0x000001ff

0800475c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004764:	231e      	movs	r3, #30
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4aab      	ldr	r2, [pc, #684]	@ (8004a38 <UART_SetConfig+0x2dc>)
 800478c:	4013      	ands	r3, r2
 800478e:	0019      	movs	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	430a      	orrs	r2, r1
 8004798:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4aa6      	ldr	r2, [pc, #664]	@ (8004a3c <UART_SetConfig+0x2e0>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	0019      	movs	r1, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a9d      	ldr	r2, [pc, #628]	@ (8004a40 <UART_SetConfig+0x2e4>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	0019      	movs	r1, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047de:	220f      	movs	r2, #15
 80047e0:	4393      	bics	r3, r2
 80047e2:	0019      	movs	r1, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a93      	ldr	r2, [pc, #588]	@ (8004a44 <UART_SetConfig+0x2e8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d127      	bne.n	800484a <UART_SetConfig+0xee>
 80047fa:	4b93      	ldr	r3, [pc, #588]	@ (8004a48 <UART_SetConfig+0x2ec>)
 80047fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fe:	2203      	movs	r2, #3
 8004800:	4013      	ands	r3, r2
 8004802:	2b03      	cmp	r3, #3
 8004804:	d017      	beq.n	8004836 <UART_SetConfig+0xda>
 8004806:	d81b      	bhi.n	8004840 <UART_SetConfig+0xe4>
 8004808:	2b02      	cmp	r3, #2
 800480a:	d00a      	beq.n	8004822 <UART_SetConfig+0xc6>
 800480c:	d818      	bhi.n	8004840 <UART_SetConfig+0xe4>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <UART_SetConfig+0xbc>
 8004812:	2b01      	cmp	r3, #1
 8004814:	d00a      	beq.n	800482c <UART_SetConfig+0xd0>
 8004816:	e013      	b.n	8004840 <UART_SetConfig+0xe4>
 8004818:	231f      	movs	r3, #31
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	e021      	b.n	8004866 <UART_SetConfig+0x10a>
 8004822:	231f      	movs	r3, #31
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	2202      	movs	r2, #2
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e01c      	b.n	8004866 <UART_SetConfig+0x10a>
 800482c:	231f      	movs	r3, #31
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	2204      	movs	r2, #4
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e017      	b.n	8004866 <UART_SetConfig+0x10a>
 8004836:	231f      	movs	r3, #31
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	2208      	movs	r2, #8
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e012      	b.n	8004866 <UART_SetConfig+0x10a>
 8004840:	231f      	movs	r3, #31
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	2210      	movs	r2, #16
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	e00d      	b.n	8004866 <UART_SetConfig+0x10a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a7f      	ldr	r2, [pc, #508]	@ (8004a4c <UART_SetConfig+0x2f0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d104      	bne.n	800485e <UART_SetConfig+0x102>
 8004854:	231f      	movs	r3, #31
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	e003      	b.n	8004866 <UART_SetConfig+0x10a>
 800485e:	231f      	movs	r3, #31
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	2210      	movs	r2, #16
 8004864:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69da      	ldr	r2, [r3, #28]
 800486a:	2380      	movs	r3, #128	@ 0x80
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	429a      	cmp	r2, r3
 8004870:	d000      	beq.n	8004874 <UART_SetConfig+0x118>
 8004872:	e06f      	b.n	8004954 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004874:	231f      	movs	r3, #31
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b08      	cmp	r3, #8
 800487c:	d01f      	beq.n	80048be <UART_SetConfig+0x162>
 800487e:	dc22      	bgt.n	80048c6 <UART_SetConfig+0x16a>
 8004880:	2b04      	cmp	r3, #4
 8004882:	d017      	beq.n	80048b4 <UART_SetConfig+0x158>
 8004884:	dc1f      	bgt.n	80048c6 <UART_SetConfig+0x16a>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <UART_SetConfig+0x134>
 800488a:	2b02      	cmp	r3, #2
 800488c:	d005      	beq.n	800489a <UART_SetConfig+0x13e>
 800488e:	e01a      	b.n	80048c6 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004890:	f7ff fc5a 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8004894:	0003      	movs	r3, r0
 8004896:	61bb      	str	r3, [r7, #24]
        break;
 8004898:	e01c      	b.n	80048d4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800489a:	4b6b      	ldr	r3, [pc, #428]	@ (8004a48 <UART_SetConfig+0x2ec>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	2207      	movs	r2, #7
 80048a2:	4013      	ands	r3, r2
 80048a4:	3301      	adds	r3, #1
 80048a6:	0019      	movs	r1, r3
 80048a8:	4869      	ldr	r0, [pc, #420]	@ (8004a50 <UART_SetConfig+0x2f4>)
 80048aa:	f7fb fc2d 	bl	8000108 <__udivsi3>
 80048ae:	0003      	movs	r3, r0
 80048b0:	61bb      	str	r3, [r7, #24]
        break;
 80048b2:	e00f      	b.n	80048d4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b4:	f7ff fbe8 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 80048b8:	0003      	movs	r3, r0
 80048ba:	61bb      	str	r3, [r7, #24]
        break;
 80048bc:	e00a      	b.n	80048d4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048be:	2380      	movs	r3, #128	@ 0x80
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	61bb      	str	r3, [r7, #24]
        break;
 80048c4:	e006      	b.n	80048d4 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ca:	231e      	movs	r3, #30
 80048cc:	18fb      	adds	r3, r7, r3
 80048ce:	2201      	movs	r2, #1
 80048d0:	701a      	strb	r2, [r3, #0]
        break;
 80048d2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d100      	bne.n	80048dc <UART_SetConfig+0x180>
 80048da:	e097      	b.n	8004a0c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048e0:	4b5c      	ldr	r3, [pc, #368]	@ (8004a54 <UART_SetConfig+0x2f8>)
 80048e2:	0052      	lsls	r2, r2, #1
 80048e4:	5ad3      	ldrh	r3, [r2, r3]
 80048e6:	0019      	movs	r1, r3
 80048e8:	69b8      	ldr	r0, [r7, #24]
 80048ea:	f7fb fc0d 	bl	8000108 <__udivsi3>
 80048ee:	0003      	movs	r3, r0
 80048f0:	005a      	lsls	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	18d2      	adds	r2, r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	0019      	movs	r1, r3
 8004900:	0010      	movs	r0, r2
 8004902:	f7fb fc01 	bl	8000108 <__udivsi3>
 8004906:	0003      	movs	r3, r0
 8004908:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b0f      	cmp	r3, #15
 800490e:	d91c      	bls.n	800494a <UART_SetConfig+0x1ee>
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	2380      	movs	r3, #128	@ 0x80
 8004914:	025b      	lsls	r3, r3, #9
 8004916:	429a      	cmp	r2, r3
 8004918:	d217      	bcs.n	800494a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	b29a      	uxth	r2, r3
 800491e:	200e      	movs	r0, #14
 8004920:	183b      	adds	r3, r7, r0
 8004922:	210f      	movs	r1, #15
 8004924:	438a      	bics	r2, r1
 8004926:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	b29b      	uxth	r3, r3
 800492e:	2207      	movs	r2, #7
 8004930:	4013      	ands	r3, r2
 8004932:	b299      	uxth	r1, r3
 8004934:	183b      	adds	r3, r7, r0
 8004936:	183a      	adds	r2, r7, r0
 8004938:	8812      	ldrh	r2, [r2, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	183a      	adds	r2, r7, r0
 8004944:	8812      	ldrh	r2, [r2, #0]
 8004946:	60da      	str	r2, [r3, #12]
 8004948:	e060      	b.n	8004a0c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800494a:	231e      	movs	r3, #30
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e05b      	b.n	8004a0c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004954:	231f      	movs	r3, #31
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b08      	cmp	r3, #8
 800495c:	d01f      	beq.n	800499e <UART_SetConfig+0x242>
 800495e:	dc22      	bgt.n	80049a6 <UART_SetConfig+0x24a>
 8004960:	2b04      	cmp	r3, #4
 8004962:	d017      	beq.n	8004994 <UART_SetConfig+0x238>
 8004964:	dc1f      	bgt.n	80049a6 <UART_SetConfig+0x24a>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <UART_SetConfig+0x214>
 800496a:	2b02      	cmp	r3, #2
 800496c:	d005      	beq.n	800497a <UART_SetConfig+0x21e>
 800496e:	e01a      	b.n	80049a6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004970:	f7ff fbea 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8004974:	0003      	movs	r3, r0
 8004976:	61bb      	str	r3, [r7, #24]
        break;
 8004978:	e01c      	b.n	80049b4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800497a:	4b33      	ldr	r3, [pc, #204]	@ (8004a48 <UART_SetConfig+0x2ec>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	2207      	movs	r2, #7
 8004982:	4013      	ands	r3, r2
 8004984:	3301      	adds	r3, #1
 8004986:	0019      	movs	r1, r3
 8004988:	4831      	ldr	r0, [pc, #196]	@ (8004a50 <UART_SetConfig+0x2f4>)
 800498a:	f7fb fbbd 	bl	8000108 <__udivsi3>
 800498e:	0003      	movs	r3, r0
 8004990:	61bb      	str	r3, [r7, #24]
        break;
 8004992:	e00f      	b.n	80049b4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004994:	f7ff fb78 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004998:	0003      	movs	r3, r0
 800499a:	61bb      	str	r3, [r7, #24]
        break;
 800499c:	e00a      	b.n	80049b4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	2380      	movs	r3, #128	@ 0x80
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	61bb      	str	r3, [r7, #24]
        break;
 80049a4:	e006      	b.n	80049b4 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049aa:	231e      	movs	r3, #30
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
        break;
 80049b2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d028      	beq.n	8004a0c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049be:	4b25      	ldr	r3, [pc, #148]	@ (8004a54 <UART_SetConfig+0x2f8>)
 80049c0:	0052      	lsls	r2, r2, #1
 80049c2:	5ad3      	ldrh	r3, [r2, r3]
 80049c4:	0019      	movs	r1, r3
 80049c6:	69b8      	ldr	r0, [r7, #24]
 80049c8:	f7fb fb9e 	bl	8000108 <__udivsi3>
 80049cc:	0003      	movs	r3, r0
 80049ce:	001a      	movs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	085b      	lsrs	r3, r3, #1
 80049d6:	18d2      	adds	r2, r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	0019      	movs	r1, r3
 80049de:	0010      	movs	r0, r2
 80049e0:	f7fb fb92 	bl	8000108 <__udivsi3>
 80049e4:	0003      	movs	r3, r0
 80049e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	d90a      	bls.n	8004a04 <UART_SetConfig+0x2a8>
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	2380      	movs	r3, #128	@ 0x80
 80049f2:	025b      	lsls	r3, r3, #9
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d205      	bcs.n	8004a04 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	e003      	b.n	8004a0c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a04:	231e      	movs	r3, #30
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	2201      	movs	r2, #1
 8004a0a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	226a      	movs	r2, #106	@ 0x6a
 8004a10:	2101      	movs	r1, #1
 8004a12:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2268      	movs	r2, #104	@ 0x68
 8004a18:	2101      	movs	r1, #1
 8004a1a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004a28:	231e      	movs	r3, #30
 8004a2a:	18fb      	adds	r3, r7, r3
 8004a2c:	781b      	ldrb	r3, [r3, #0]
}
 8004a2e:	0018      	movs	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	b008      	add	sp, #32
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	cfff69f3 	.word	0xcfff69f3
 8004a3c:	ffffcfff 	.word	0xffffcfff
 8004a40:	11fff4ff 	.word	0x11fff4ff
 8004a44:	40013800 	.word	0x40013800
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	40004400 	.word	0x40004400
 8004a50:	02dc6c00 	.word	0x02dc6c00
 8004a54:	08005210 	.word	0x08005210

08004a58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a64:	2208      	movs	r2, #8
 8004a66:	4013      	ands	r3, r2
 8004a68:	d00b      	beq.n	8004a82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4a4a      	ldr	r2, [pc, #296]	@ (8004b9c <UART_AdvFeatureConfig+0x144>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	0019      	movs	r1, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	2201      	movs	r2, #1
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d00b      	beq.n	8004aa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4a43      	ldr	r2, [pc, #268]	@ (8004ba0 <UART_AdvFeatureConfig+0x148>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	0019      	movs	r1, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d00b      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ba4 <UART_AdvFeatureConfig+0x14c>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	2204      	movs	r2, #4
 8004acc:	4013      	ands	r3, r2
 8004ace:	d00b      	beq.n	8004ae8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4a34      	ldr	r2, [pc, #208]	@ (8004ba8 <UART_AdvFeatureConfig+0x150>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	0019      	movs	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aec:	2210      	movs	r2, #16
 8004aee:	4013      	ands	r3, r2
 8004af0:	d00b      	beq.n	8004b0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a2c      	ldr	r2, [pc, #176]	@ (8004bac <UART_AdvFeatureConfig+0x154>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	0019      	movs	r1, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0e:	2220      	movs	r2, #32
 8004b10:	4013      	ands	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	4a25      	ldr	r2, [pc, #148]	@ (8004bb0 <UART_AdvFeatureConfig+0x158>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b30:	2240      	movs	r2, #64	@ 0x40
 8004b32:	4013      	ands	r3, r2
 8004b34:	d01d      	beq.n	8004b72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb4 <UART_AdvFeatureConfig+0x15c>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b52:	2380      	movs	r3, #128	@ 0x80
 8004b54:	035b      	lsls	r3, r3, #13
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d10b      	bne.n	8004b72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	4a15      	ldr	r2, [pc, #84]	@ (8004bb8 <UART_AdvFeatureConfig+0x160>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	0019      	movs	r1, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b76:	2280      	movs	r2, #128	@ 0x80
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d00b      	beq.n	8004b94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	4a0e      	ldr	r2, [pc, #56]	@ (8004bbc <UART_AdvFeatureConfig+0x164>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }
}
 8004b94:	46c0      	nop			@ (mov r8, r8)
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b002      	add	sp, #8
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	ffff7fff 	.word	0xffff7fff
 8004ba0:	fffdffff 	.word	0xfffdffff
 8004ba4:	fffeffff 	.word	0xfffeffff
 8004ba8:	fffbffff 	.word	0xfffbffff
 8004bac:	ffffefff 	.word	0xffffefff
 8004bb0:	ffffdfff 	.word	0xffffdfff
 8004bb4:	ffefffff 	.word	0xffefffff
 8004bb8:	ff9fffff 	.word	0xff9fffff
 8004bbc:	fff7ffff 	.word	0xfff7ffff

08004bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b092      	sub	sp, #72	@ 0x48
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2290      	movs	r2, #144	@ 0x90
 8004bcc:	2100      	movs	r1, #0
 8004bce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bd0:	f7fd fe26 	bl	8002820 <HAL_GetTick>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2208      	movs	r2, #8
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d12d      	bne.n	8004c42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be8:	2280      	movs	r2, #128	@ 0x80
 8004bea:	0391      	lsls	r1, r2, #14
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	4a47      	ldr	r2, [pc, #284]	@ (8004d0c <UART_CheckIdleState+0x14c>)
 8004bf0:	9200      	str	r2, [sp, #0]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f000 f88e 	bl	8004d14 <UART_WaitOnFlagUntilTimeout>
 8004bf8:	1e03      	subs	r3, r0, #0
 8004bfa:	d022      	beq.n	8004c42 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c06:	2301      	movs	r3, #1
 8004c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0c:	f383 8810 	msr	PRIMASK, r3
}
 8004c10:	46c0      	nop			@ (mov r8, r8)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2180      	movs	r1, #128	@ 0x80
 8004c1e:	438a      	bics	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c28:	f383 8810 	msr	PRIMASK, r3
}
 8004c2c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2288      	movs	r2, #136	@ 0x88
 8004c32:	2120      	movs	r1, #32
 8004c34:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2284      	movs	r2, #132	@ 0x84
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e060      	b.n	8004d04 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d146      	bne.n	8004cde <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c52:	2280      	movs	r2, #128	@ 0x80
 8004c54:	03d1      	lsls	r1, r2, #15
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4a2c      	ldr	r2, [pc, #176]	@ (8004d0c <UART_CheckIdleState+0x14c>)
 8004c5a:	9200      	str	r2, [sp, #0]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f000 f859 	bl	8004d14 <UART_WaitOnFlagUntilTimeout>
 8004c62:	1e03      	subs	r3, r0, #0
 8004c64:	d03b      	beq.n	8004cde <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c66:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c70:	2301      	movs	r3, #1
 8004c72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f383 8810 	msr	PRIMASK, r3
}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4922      	ldr	r1, [pc, #136]	@ (8004d10 <UART_CheckIdleState+0x150>)
 8004c88:	400a      	ands	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f383 8810 	msr	PRIMASK, r3
}
 8004c96:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c98:	f3ef 8310 	mrs	r3, PRIMASK
 8004c9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f383 8810 	msr	PRIMASK, r3
}
 8004cac:	46c0      	nop			@ (mov r8, r8)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2101      	movs	r1, #1
 8004cba:	438a      	bics	r2, r1
 8004cbc:	609a      	str	r2, [r3, #8]
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f383 8810 	msr	PRIMASK, r3
}
 8004cc8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	228c      	movs	r2, #140	@ 0x8c
 8004cce:	2120      	movs	r1, #32
 8004cd0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2284      	movs	r2, #132	@ 0x84
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e012      	b.n	8004d04 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2288      	movs	r2, #136	@ 0x88
 8004ce2:	2120      	movs	r1, #32
 8004ce4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	228c      	movs	r2, #140	@ 0x8c
 8004cea:	2120      	movs	r1, #32
 8004cec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2284      	movs	r2, #132	@ 0x84
 8004cfe:	2100      	movs	r1, #0
 8004d00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	0018      	movs	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b010      	add	sp, #64	@ 0x40
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	01ffffff 	.word	0x01ffffff
 8004d10:	fffffedf 	.word	0xfffffedf

08004d14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	1dfb      	adds	r3, r7, #7
 8004d22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d24:	e051      	b.n	8004dca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	d04e      	beq.n	8004dca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2c:	f7fd fd78 	bl	8002820 <HAL_GetTick>
 8004d30:	0002      	movs	r2, r0
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d302      	bcc.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e051      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d03b      	beq.n	8004dca <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b80      	cmp	r3, #128	@ 0x80
 8004d56:	d038      	beq.n	8004dca <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b40      	cmp	r3, #64	@ 0x40
 8004d5c:	d035      	beq.n	8004dca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	2208      	movs	r2, #8
 8004d66:	4013      	ands	r3, r2
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d111      	bne.n	8004d90 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2208      	movs	r2, #8
 8004d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	0018      	movs	r0, r3
 8004d78:	f000 f83c 	bl	8004df4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2290      	movs	r2, #144	@ 0x90
 8004d80:	2108      	movs	r1, #8
 8004d82:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2284      	movs	r2, #132	@ 0x84
 8004d88:	2100      	movs	r1, #0
 8004d8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e02c      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d112      	bne.n	8004dca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2280      	movs	r2, #128	@ 0x80
 8004daa:	0112      	lsls	r2, r2, #4
 8004dac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 f81f 	bl	8004df4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2290      	movs	r2, #144	@ 0x90
 8004dba:	2120      	movs	r1, #32
 8004dbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2284      	movs	r2, #132	@ 0x84
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e00f      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	425a      	negs	r2, r3
 8004dda:	4153      	adcs	r3, r2
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	001a      	movs	r2, r3
 8004de0:	1dfb      	adds	r3, r7, #7
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d09e      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	0018      	movs	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b004      	add	sp, #16
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08e      	sub	sp, #56	@ 0x38
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004e00:	617b      	str	r3, [r7, #20]
  return(result);
 8004e02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e06:	2301      	movs	r3, #1
 8004e08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	f383 8810 	msr	PRIMASK, r3
}
 8004e10:	46c0      	nop			@ (mov r8, r8)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4926      	ldr	r1, [pc, #152]	@ (8004eb8 <UART_EndRxTransfer+0xc4>)
 8004e1e:	400a      	ands	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f383 8810 	msr	PRIMASK, r3
}
 8004e2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e32:	623b      	str	r3, [r7, #32]
  return(result);
 8004e34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e36:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e38:	2301      	movs	r3, #1
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	f383 8810 	msr	PRIMASK, r3
}
 8004e42:	46c0      	nop			@ (mov r8, r8)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	491b      	ldr	r1, [pc, #108]	@ (8004ebc <UART_EndRxTransfer+0xc8>)
 8004e50:	400a      	ands	r2, r1
 8004e52:	609a      	str	r2, [r3, #8]
 8004e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5a:	f383 8810 	msr	PRIMASK, r3
}
 8004e5e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d118      	bne.n	8004e9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e68:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e72:	2301      	movs	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f383 8810 	msr	PRIMASK, r3
}
 8004e7c:	46c0      	nop			@ (mov r8, r8)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2110      	movs	r1, #16
 8004e8a:	438a      	bics	r2, r1
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f383 8810 	msr	PRIMASK, r3
}
 8004e98:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	228c      	movs	r2, #140	@ 0x8c
 8004e9e:	2120      	movs	r1, #32
 8004ea0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b00e      	add	sp, #56	@ 0x38
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	fffffedf 	.word	0xfffffedf
 8004ebc:	effffffe 	.word	0xeffffffe

08004ec0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2284      	movs	r2, #132	@ 0x84
 8004ecc:	5c9b      	ldrb	r3, [r3, r2]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e027      	b.n	8004f26 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2284      	movs	r2, #132	@ 0x84
 8004eda:	2101      	movs	r1, #1
 8004edc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2288      	movs	r2, #136	@ 0x88
 8004ee2:	2124      	movs	r1, #36	@ 0x24
 8004ee4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2101      	movs	r1, #1
 8004efa:	438a      	bics	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4a0b      	ldr	r2, [pc, #44]	@ (8004f30 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2288      	movs	r2, #136	@ 0x88
 8004f18:	2120      	movs	r1, #32
 8004f1a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2284      	movs	r2, #132	@ 0x84
 8004f20:	2100      	movs	r1, #0
 8004f22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b004      	add	sp, #16
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	dfffffff 	.word	0xdfffffff

08004f34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2284      	movs	r2, #132	@ 0x84
 8004f42:	5c9b      	ldrb	r3, [r3, r2]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e02e      	b.n	8004faa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2284      	movs	r2, #132	@ 0x84
 8004f50:	2101      	movs	r1, #1
 8004f52:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2288      	movs	r2, #136	@ 0x88
 8004f58:	2124      	movs	r1, #36	@ 0x24
 8004f5a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2101      	movs	r1, #1
 8004f70:	438a      	bics	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	08d9      	lsrs	r1, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f000 f854 	bl	8005038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2288      	movs	r2, #136	@ 0x88
 8004f9c:	2120      	movs	r1, #32
 8004f9e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2284      	movs	r2, #132	@ 0x84
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b004      	add	sp, #16
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2284      	movs	r2, #132	@ 0x84
 8004fc2:	5c9b      	ldrb	r3, [r3, r2]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e02f      	b.n	800502c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2284      	movs	r2, #132	@ 0x84
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2288      	movs	r2, #136	@ 0x88
 8004fd8:	2124      	movs	r1, #36	@ 0x24
 8004fda:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2101      	movs	r1, #1
 8004ff0:	438a      	bics	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8005034 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	0019      	movs	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	0018      	movs	r0, r3
 800500e:	f000 f813 	bl	8005038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2288      	movs	r2, #136	@ 0x88
 800501e:	2120      	movs	r1, #32
 8005020:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2284      	movs	r2, #132	@ 0x84
 8005026:	2100      	movs	r1, #0
 8005028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b004      	add	sp, #16
 8005032:	bd80      	pop	{r7, pc}
 8005034:	f1ffffff 	.word	0xf1ffffff

08005038 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005044:	2b00      	cmp	r3, #0
 8005046:	d108      	bne.n	800505a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	226a      	movs	r2, #106	@ 0x6a
 800504c:	2101      	movs	r1, #1
 800504e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2268      	movs	r2, #104	@ 0x68
 8005054:	2101      	movs	r1, #1
 8005056:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005058:	e043      	b.n	80050e2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800505a:	260f      	movs	r6, #15
 800505c:	19bb      	adds	r3, r7, r6
 800505e:	2208      	movs	r2, #8
 8005060:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005062:	200e      	movs	r0, #14
 8005064:	183b      	adds	r3, r7, r0
 8005066:	2208      	movs	r2, #8
 8005068:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	0e5b      	lsrs	r3, r3, #25
 8005072:	b2da      	uxtb	r2, r3
 8005074:	240d      	movs	r4, #13
 8005076:	193b      	adds	r3, r7, r4
 8005078:	2107      	movs	r1, #7
 800507a:	400a      	ands	r2, r1
 800507c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	0f5b      	lsrs	r3, r3, #29
 8005086:	b2da      	uxtb	r2, r3
 8005088:	250c      	movs	r5, #12
 800508a:	197b      	adds	r3, r7, r5
 800508c:	2107      	movs	r1, #7
 800508e:	400a      	ands	r2, r1
 8005090:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005092:	183b      	adds	r3, r7, r0
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	197a      	adds	r2, r7, r5
 8005098:	7812      	ldrb	r2, [r2, #0]
 800509a:	4914      	ldr	r1, [pc, #80]	@ (80050ec <UARTEx_SetNbDataToProcess+0xb4>)
 800509c:	5c8a      	ldrb	r2, [r1, r2]
 800509e:	435a      	muls	r2, r3
 80050a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80050a2:	197b      	adds	r3, r7, r5
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	4a12      	ldr	r2, [pc, #72]	@ (80050f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80050a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050aa:	0019      	movs	r1, r3
 80050ac:	f7fb f8b6 	bl	800021c <__divsi3>
 80050b0:	0003      	movs	r3, r0
 80050b2:	b299      	uxth	r1, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	226a      	movs	r2, #106	@ 0x6a
 80050b8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050ba:	19bb      	adds	r3, r7, r6
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	193a      	adds	r2, r7, r4
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	490a      	ldr	r1, [pc, #40]	@ (80050ec <UARTEx_SetNbDataToProcess+0xb4>)
 80050c4:	5c8a      	ldrb	r2, [r1, r2]
 80050c6:	435a      	muls	r2, r3
 80050c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80050ca:	193b      	adds	r3, r7, r4
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	4a08      	ldr	r2, [pc, #32]	@ (80050f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80050d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050d2:	0019      	movs	r1, r3
 80050d4:	f7fb f8a2 	bl	800021c <__divsi3>
 80050d8:	0003      	movs	r3, r0
 80050da:	b299      	uxth	r1, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2268      	movs	r2, #104	@ 0x68
 80050e0:	5299      	strh	r1, [r3, r2]
}
 80050e2:	46c0      	nop			@ (mov r8, r8)
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b005      	add	sp, #20
 80050e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ea:	46c0      	nop			@ (mov r8, r8)
 80050ec:	08005228 	.word	0x08005228
 80050f0:	08005230 	.word	0x08005230

080050f4 <memset>:
 80050f4:	0003      	movs	r3, r0
 80050f6:	1882      	adds	r2, r0, r2
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d100      	bne.n	80050fe <memset+0xa>
 80050fc:	4770      	bx	lr
 80050fe:	7019      	strb	r1, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	e7f9      	b.n	80050f8 <memset+0x4>

08005104 <__libc_init_array>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	2600      	movs	r6, #0
 8005108:	4c0c      	ldr	r4, [pc, #48]	@ (800513c <__libc_init_array+0x38>)
 800510a:	4d0d      	ldr	r5, [pc, #52]	@ (8005140 <__libc_init_array+0x3c>)
 800510c:	1b64      	subs	r4, r4, r5
 800510e:	10a4      	asrs	r4, r4, #2
 8005110:	42a6      	cmp	r6, r4
 8005112:	d109      	bne.n	8005128 <__libc_init_array+0x24>
 8005114:	2600      	movs	r6, #0
 8005116:	f000 f819 	bl	800514c <_init>
 800511a:	4c0a      	ldr	r4, [pc, #40]	@ (8005144 <__libc_init_array+0x40>)
 800511c:	4d0a      	ldr	r5, [pc, #40]	@ (8005148 <__libc_init_array+0x44>)
 800511e:	1b64      	subs	r4, r4, r5
 8005120:	10a4      	asrs	r4, r4, #2
 8005122:	42a6      	cmp	r6, r4
 8005124:	d105      	bne.n	8005132 <__libc_init_array+0x2e>
 8005126:	bd70      	pop	{r4, r5, r6, pc}
 8005128:	00b3      	lsls	r3, r6, #2
 800512a:	58eb      	ldr	r3, [r5, r3]
 800512c:	4798      	blx	r3
 800512e:	3601      	adds	r6, #1
 8005130:	e7ee      	b.n	8005110 <__libc_init_array+0xc>
 8005132:	00b3      	lsls	r3, r6, #2
 8005134:	58eb      	ldr	r3, [r5, r3]
 8005136:	4798      	blx	r3
 8005138:	3601      	adds	r6, #1
 800513a:	e7f2      	b.n	8005122 <__libc_init_array+0x1e>
 800513c:	08005238 	.word	0x08005238
 8005140:	08005238 	.word	0x08005238
 8005144:	0800523c 	.word	0x0800523c
 8005148:	08005238 	.word	0x08005238

0800514c <_init>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	46c0      	nop			@ (mov r8, r8)
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr

08005158 <_fini>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr
