
gate_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08006da0  08006da0  00007da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006efc  08006efc  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006efc  08006efc  0000805c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006efc  08006efc  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006efc  08006efc  00007efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f00  08006f00  00007f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006f04  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000005c  08006f60  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08006f60  000082a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011033  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002674  00000000  00000000  000190b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0001b730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3a  00000000  00000000  0001c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014482  00000000  00000000  0001ce7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124e3  00000000  00000000  000312fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a90f  00000000  00000000  000437df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be0ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000334c  00000000  00000000  000be134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000c1480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d88 	.word	0x08006d88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006d88 	.word	0x08006d88

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fbab 	bl	8000b58 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fb33 	bl	8000a78 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb9d 	bl	8000b58 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb93 	bl	8000b58 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fb41 	bl	8000ac8 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fb37 	bl	8000ac8 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_fadd>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	024b      	lsls	r3, r1, #9
 800046c:	0a5a      	lsrs	r2, r3, #9
 800046e:	4694      	mov	ip, r2
 8000470:	004a      	lsls	r2, r1, #1
 8000472:	0fc9      	lsrs	r1, r1, #31
 8000474:	46ce      	mov	lr, r9
 8000476:	4647      	mov	r7, r8
 8000478:	4689      	mov	r9, r1
 800047a:	0045      	lsls	r5, r0, #1
 800047c:	0246      	lsls	r6, r0, #9
 800047e:	0e2d      	lsrs	r5, r5, #24
 8000480:	0e12      	lsrs	r2, r2, #24
 8000482:	b580      	push	{r7, lr}
 8000484:	0999      	lsrs	r1, r3, #6
 8000486:	0a77      	lsrs	r7, r6, #9
 8000488:	0fc4      	lsrs	r4, r0, #31
 800048a:	09b6      	lsrs	r6, r6, #6
 800048c:	1aab      	subs	r3, r5, r2
 800048e:	454c      	cmp	r4, r9
 8000490:	d020      	beq.n	80004d4 <__aeabi_fadd+0x6c>
 8000492:	2b00      	cmp	r3, #0
 8000494:	dd0c      	ble.n	80004b0 <__aeabi_fadd+0x48>
 8000496:	2a00      	cmp	r2, #0
 8000498:	d134      	bne.n	8000504 <__aeabi_fadd+0x9c>
 800049a:	2900      	cmp	r1, #0
 800049c:	d02a      	beq.n	80004f4 <__aeabi_fadd+0x8c>
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fadd+0x3e>
 80004a4:	e08f      	b.n	80005c6 <__aeabi_fadd+0x15e>
 80004a6:	2bff      	cmp	r3, #255	@ 0xff
 80004a8:	d100      	bne.n	80004ac <__aeabi_fadd+0x44>
 80004aa:	e0cd      	b.n	8000648 <__aeabi_fadd+0x1e0>
 80004ac:	0013      	movs	r3, r2
 80004ae:	e02f      	b.n	8000510 <__aeabi_fadd+0xa8>
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d060      	beq.n	8000576 <__aeabi_fadd+0x10e>
 80004b4:	1b53      	subs	r3, r2, r5
 80004b6:	2d00      	cmp	r5, #0
 80004b8:	d000      	beq.n	80004bc <__aeabi_fadd+0x54>
 80004ba:	e0ee      	b.n	800069a <__aeabi_fadd+0x232>
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d100      	bne.n	80004c2 <__aeabi_fadd+0x5a>
 80004c0:	e13e      	b.n	8000740 <__aeabi_fadd+0x2d8>
 80004c2:	1e5c      	subs	r4, r3, #1
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d100      	bne.n	80004ca <__aeabi_fadd+0x62>
 80004c8:	e16b      	b.n	80007a2 <__aeabi_fadd+0x33a>
 80004ca:	2bff      	cmp	r3, #255	@ 0xff
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x68>
 80004ce:	e0b9      	b.n	8000644 <__aeabi_fadd+0x1dc>
 80004d0:	0023      	movs	r3, r4
 80004d2:	e0e7      	b.n	80006a4 <__aeabi_fadd+0x23c>
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	dc00      	bgt.n	80004da <__aeabi_fadd+0x72>
 80004d8:	e0a4      	b.n	8000624 <__aeabi_fadd+0x1bc>
 80004da:	2a00      	cmp	r2, #0
 80004dc:	d069      	beq.n	80005b2 <__aeabi_fadd+0x14a>
 80004de:	2dff      	cmp	r5, #255	@ 0xff
 80004e0:	d100      	bne.n	80004e4 <__aeabi_fadd+0x7c>
 80004e2:	e0b1      	b.n	8000648 <__aeabi_fadd+0x1e0>
 80004e4:	2280      	movs	r2, #128	@ 0x80
 80004e6:	04d2      	lsls	r2, r2, #19
 80004e8:	4311      	orrs	r1, r2
 80004ea:	2b1b      	cmp	r3, #27
 80004ec:	dc00      	bgt.n	80004f0 <__aeabi_fadd+0x88>
 80004ee:	e0e9      	b.n	80006c4 <__aeabi_fadd+0x25c>
 80004f0:	002b      	movs	r3, r5
 80004f2:	3605      	adds	r6, #5
 80004f4:	08f7      	lsrs	r7, r6, #3
 80004f6:	2bff      	cmp	r3, #255	@ 0xff
 80004f8:	d100      	bne.n	80004fc <__aeabi_fadd+0x94>
 80004fa:	e0a5      	b.n	8000648 <__aeabi_fadd+0x1e0>
 80004fc:	027a      	lsls	r2, r7, #9
 80004fe:	0a52      	lsrs	r2, r2, #9
 8000500:	b2d8      	uxtb	r0, r3
 8000502:	e030      	b.n	8000566 <__aeabi_fadd+0xfe>
 8000504:	2dff      	cmp	r5, #255	@ 0xff
 8000506:	d100      	bne.n	800050a <__aeabi_fadd+0xa2>
 8000508:	e09e      	b.n	8000648 <__aeabi_fadd+0x1e0>
 800050a:	2280      	movs	r2, #128	@ 0x80
 800050c:	04d2      	lsls	r2, r2, #19
 800050e:	4311      	orrs	r1, r2
 8000510:	2001      	movs	r0, #1
 8000512:	2b1b      	cmp	r3, #27
 8000514:	dc08      	bgt.n	8000528 <__aeabi_fadd+0xc0>
 8000516:	0008      	movs	r0, r1
 8000518:	2220      	movs	r2, #32
 800051a:	40d8      	lsrs	r0, r3
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	4099      	lsls	r1, r3
 8000520:	000b      	movs	r3, r1
 8000522:	1e5a      	subs	r2, r3, #1
 8000524:	4193      	sbcs	r3, r2
 8000526:	4318      	orrs	r0, r3
 8000528:	1a36      	subs	r6, r6, r0
 800052a:	0173      	lsls	r3, r6, #5
 800052c:	d400      	bmi.n	8000530 <__aeabi_fadd+0xc8>
 800052e:	e071      	b.n	8000614 <__aeabi_fadd+0x1ac>
 8000530:	01b6      	lsls	r6, r6, #6
 8000532:	09b7      	lsrs	r7, r6, #6
 8000534:	0038      	movs	r0, r7
 8000536:	f001 fb2b 	bl	8001b90 <__clzsi2>
 800053a:	003b      	movs	r3, r7
 800053c:	3805      	subs	r0, #5
 800053e:	4083      	lsls	r3, r0
 8000540:	4285      	cmp	r5, r0
 8000542:	dd4d      	ble.n	80005e0 <__aeabi_fadd+0x178>
 8000544:	4eb4      	ldr	r6, [pc, #720]	@ (8000818 <__aeabi_fadd+0x3b0>)
 8000546:	1a2d      	subs	r5, r5, r0
 8000548:	401e      	ands	r6, r3
 800054a:	075a      	lsls	r2, r3, #29
 800054c:	d068      	beq.n	8000620 <__aeabi_fadd+0x1b8>
 800054e:	220f      	movs	r2, #15
 8000550:	4013      	ands	r3, r2
 8000552:	2b04      	cmp	r3, #4
 8000554:	d064      	beq.n	8000620 <__aeabi_fadd+0x1b8>
 8000556:	3604      	adds	r6, #4
 8000558:	0173      	lsls	r3, r6, #5
 800055a:	d561      	bpl.n	8000620 <__aeabi_fadd+0x1b8>
 800055c:	1c68      	adds	r0, r5, #1
 800055e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000560:	d154      	bne.n	800060c <__aeabi_fadd+0x1a4>
 8000562:	20ff      	movs	r0, #255	@ 0xff
 8000564:	2200      	movs	r2, #0
 8000566:	05c0      	lsls	r0, r0, #23
 8000568:	4310      	orrs	r0, r2
 800056a:	07e4      	lsls	r4, r4, #31
 800056c:	4320      	orrs	r0, r4
 800056e:	bcc0      	pop	{r6, r7}
 8000570:	46b9      	mov	r9, r7
 8000572:	46b0      	mov	r8, r6
 8000574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000576:	22fe      	movs	r2, #254	@ 0xfe
 8000578:	4690      	mov	r8, r2
 800057a:	1c68      	adds	r0, r5, #1
 800057c:	0002      	movs	r2, r0
 800057e:	4640      	mov	r0, r8
 8000580:	4210      	tst	r0, r2
 8000582:	d16b      	bne.n	800065c <__aeabi_fadd+0x1f4>
 8000584:	2d00      	cmp	r5, #0
 8000586:	d000      	beq.n	800058a <__aeabi_fadd+0x122>
 8000588:	e0dd      	b.n	8000746 <__aeabi_fadd+0x2de>
 800058a:	2e00      	cmp	r6, #0
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x128>
 800058e:	e102      	b.n	8000796 <__aeabi_fadd+0x32e>
 8000590:	2900      	cmp	r1, #0
 8000592:	d0b3      	beq.n	80004fc <__aeabi_fadd+0x94>
 8000594:	2280      	movs	r2, #128	@ 0x80
 8000596:	1a77      	subs	r7, r6, r1
 8000598:	04d2      	lsls	r2, r2, #19
 800059a:	4217      	tst	r7, r2
 800059c:	d100      	bne.n	80005a0 <__aeabi_fadd+0x138>
 800059e:	e136      	b.n	800080e <__aeabi_fadd+0x3a6>
 80005a0:	464c      	mov	r4, r9
 80005a2:	1b8e      	subs	r6, r1, r6
 80005a4:	d061      	beq.n	800066a <__aeabi_fadd+0x202>
 80005a6:	2001      	movs	r0, #1
 80005a8:	4216      	tst	r6, r2
 80005aa:	d130      	bne.n	800060e <__aeabi_fadd+0x1a6>
 80005ac:	2300      	movs	r3, #0
 80005ae:	08f7      	lsrs	r7, r6, #3
 80005b0:	e7a4      	b.n	80004fc <__aeabi_fadd+0x94>
 80005b2:	2900      	cmp	r1, #0
 80005b4:	d09e      	beq.n	80004f4 <__aeabi_fadd+0x8c>
 80005b6:	1e5a      	subs	r2, r3, #1
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0x156>
 80005bc:	e0ca      	b.n	8000754 <__aeabi_fadd+0x2ec>
 80005be:	2bff      	cmp	r3, #255	@ 0xff
 80005c0:	d042      	beq.n	8000648 <__aeabi_fadd+0x1e0>
 80005c2:	0013      	movs	r3, r2
 80005c4:	e791      	b.n	80004ea <__aeabi_fadd+0x82>
 80005c6:	1a71      	subs	r1, r6, r1
 80005c8:	014b      	lsls	r3, r1, #5
 80005ca:	d400      	bmi.n	80005ce <__aeabi_fadd+0x166>
 80005cc:	e0d1      	b.n	8000772 <__aeabi_fadd+0x30a>
 80005ce:	018f      	lsls	r7, r1, #6
 80005d0:	09bf      	lsrs	r7, r7, #6
 80005d2:	0038      	movs	r0, r7
 80005d4:	f001 fadc 	bl	8001b90 <__clzsi2>
 80005d8:	003b      	movs	r3, r7
 80005da:	3805      	subs	r0, #5
 80005dc:	4083      	lsls	r3, r0
 80005de:	2501      	movs	r5, #1
 80005e0:	2220      	movs	r2, #32
 80005e2:	1b40      	subs	r0, r0, r5
 80005e4:	3001      	adds	r0, #1
 80005e6:	1a12      	subs	r2, r2, r0
 80005e8:	001e      	movs	r6, r3
 80005ea:	4093      	lsls	r3, r2
 80005ec:	40c6      	lsrs	r6, r0
 80005ee:	1e5a      	subs	r2, r3, #1
 80005f0:	4193      	sbcs	r3, r2
 80005f2:	431e      	orrs	r6, r3
 80005f4:	d039      	beq.n	800066a <__aeabi_fadd+0x202>
 80005f6:	0773      	lsls	r3, r6, #29
 80005f8:	d100      	bne.n	80005fc <__aeabi_fadd+0x194>
 80005fa:	e11b      	b.n	8000834 <__aeabi_fadd+0x3cc>
 80005fc:	230f      	movs	r3, #15
 80005fe:	2500      	movs	r5, #0
 8000600:	4033      	ands	r3, r6
 8000602:	2b04      	cmp	r3, #4
 8000604:	d1a7      	bne.n	8000556 <__aeabi_fadd+0xee>
 8000606:	2001      	movs	r0, #1
 8000608:	0172      	lsls	r2, r6, #5
 800060a:	d57c      	bpl.n	8000706 <__aeabi_fadd+0x29e>
 800060c:	b2c0      	uxtb	r0, r0
 800060e:	01b2      	lsls	r2, r6, #6
 8000610:	0a52      	lsrs	r2, r2, #9
 8000612:	e7a8      	b.n	8000566 <__aeabi_fadd+0xfe>
 8000614:	0773      	lsls	r3, r6, #29
 8000616:	d003      	beq.n	8000620 <__aeabi_fadd+0x1b8>
 8000618:	230f      	movs	r3, #15
 800061a:	4033      	ands	r3, r6
 800061c:	2b04      	cmp	r3, #4
 800061e:	d19a      	bne.n	8000556 <__aeabi_fadd+0xee>
 8000620:	002b      	movs	r3, r5
 8000622:	e767      	b.n	80004f4 <__aeabi_fadd+0x8c>
 8000624:	2b00      	cmp	r3, #0
 8000626:	d023      	beq.n	8000670 <__aeabi_fadd+0x208>
 8000628:	1b53      	subs	r3, r2, r5
 800062a:	2d00      	cmp	r5, #0
 800062c:	d17b      	bne.n	8000726 <__aeabi_fadd+0x2be>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x1cc>
 8000632:	e086      	b.n	8000742 <__aeabi_fadd+0x2da>
 8000634:	1e5d      	subs	r5, r3, #1
 8000636:	2b01      	cmp	r3, #1
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x1d4>
 800063a:	e08b      	b.n	8000754 <__aeabi_fadd+0x2ec>
 800063c:	2bff      	cmp	r3, #255	@ 0xff
 800063e:	d002      	beq.n	8000646 <__aeabi_fadd+0x1de>
 8000640:	002b      	movs	r3, r5
 8000642:	e075      	b.n	8000730 <__aeabi_fadd+0x2c8>
 8000644:	464c      	mov	r4, r9
 8000646:	4667      	mov	r7, ip
 8000648:	2f00      	cmp	r7, #0
 800064a:	d100      	bne.n	800064e <__aeabi_fadd+0x1e6>
 800064c:	e789      	b.n	8000562 <__aeabi_fadd+0xfa>
 800064e:	2280      	movs	r2, #128	@ 0x80
 8000650:	03d2      	lsls	r2, r2, #15
 8000652:	433a      	orrs	r2, r7
 8000654:	0252      	lsls	r2, r2, #9
 8000656:	20ff      	movs	r0, #255	@ 0xff
 8000658:	0a52      	lsrs	r2, r2, #9
 800065a:	e784      	b.n	8000566 <__aeabi_fadd+0xfe>
 800065c:	1a77      	subs	r7, r6, r1
 800065e:	017b      	lsls	r3, r7, #5
 8000660:	d46b      	bmi.n	800073a <__aeabi_fadd+0x2d2>
 8000662:	2f00      	cmp	r7, #0
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0x200>
 8000666:	e765      	b.n	8000534 <__aeabi_fadd+0xcc>
 8000668:	2400      	movs	r4, #0
 800066a:	2000      	movs	r0, #0
 800066c:	2200      	movs	r2, #0
 800066e:	e77a      	b.n	8000566 <__aeabi_fadd+0xfe>
 8000670:	22fe      	movs	r2, #254	@ 0xfe
 8000672:	1c6b      	adds	r3, r5, #1
 8000674:	421a      	tst	r2, r3
 8000676:	d149      	bne.n	800070c <__aeabi_fadd+0x2a4>
 8000678:	2d00      	cmp	r5, #0
 800067a:	d000      	beq.n	800067e <__aeabi_fadd+0x216>
 800067c:	e09f      	b.n	80007be <__aeabi_fadd+0x356>
 800067e:	2e00      	cmp	r6, #0
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x21c>
 8000682:	e0ba      	b.n	80007fa <__aeabi_fadd+0x392>
 8000684:	2900      	cmp	r1, #0
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x222>
 8000688:	e0cf      	b.n	800082a <__aeabi_fadd+0x3c2>
 800068a:	1872      	adds	r2, r6, r1
 800068c:	0153      	lsls	r3, r2, #5
 800068e:	d400      	bmi.n	8000692 <__aeabi_fadd+0x22a>
 8000690:	e0cd      	b.n	800082e <__aeabi_fadd+0x3c6>
 8000692:	0192      	lsls	r2, r2, #6
 8000694:	2001      	movs	r0, #1
 8000696:	0a52      	lsrs	r2, r2, #9
 8000698:	e765      	b.n	8000566 <__aeabi_fadd+0xfe>
 800069a:	2aff      	cmp	r2, #255	@ 0xff
 800069c:	d0d2      	beq.n	8000644 <__aeabi_fadd+0x1dc>
 800069e:	2080      	movs	r0, #128	@ 0x80
 80006a0:	04c0      	lsls	r0, r0, #19
 80006a2:	4306      	orrs	r6, r0
 80006a4:	2001      	movs	r0, #1
 80006a6:	2b1b      	cmp	r3, #27
 80006a8:	dc08      	bgt.n	80006bc <__aeabi_fadd+0x254>
 80006aa:	0030      	movs	r0, r6
 80006ac:	2420      	movs	r4, #32
 80006ae:	40d8      	lsrs	r0, r3
 80006b0:	1ae3      	subs	r3, r4, r3
 80006b2:	409e      	lsls	r6, r3
 80006b4:	0033      	movs	r3, r6
 80006b6:	1e5c      	subs	r4, r3, #1
 80006b8:	41a3      	sbcs	r3, r4
 80006ba:	4318      	orrs	r0, r3
 80006bc:	464c      	mov	r4, r9
 80006be:	0015      	movs	r5, r2
 80006c0:	1a0e      	subs	r6, r1, r0
 80006c2:	e732      	b.n	800052a <__aeabi_fadd+0xc2>
 80006c4:	0008      	movs	r0, r1
 80006c6:	2220      	movs	r2, #32
 80006c8:	40d8      	lsrs	r0, r3
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	4099      	lsls	r1, r3
 80006ce:	000b      	movs	r3, r1
 80006d0:	1e5a      	subs	r2, r3, #1
 80006d2:	4193      	sbcs	r3, r2
 80006d4:	4303      	orrs	r3, r0
 80006d6:	18f6      	adds	r6, r6, r3
 80006d8:	0173      	lsls	r3, r6, #5
 80006da:	d59b      	bpl.n	8000614 <__aeabi_fadd+0x1ac>
 80006dc:	3501      	adds	r5, #1
 80006de:	2dff      	cmp	r5, #255	@ 0xff
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0x27c>
 80006e2:	e73e      	b.n	8000562 <__aeabi_fadd+0xfa>
 80006e4:	2301      	movs	r3, #1
 80006e6:	494d      	ldr	r1, [pc, #308]	@ (800081c <__aeabi_fadd+0x3b4>)
 80006e8:	0872      	lsrs	r2, r6, #1
 80006ea:	4033      	ands	r3, r6
 80006ec:	400a      	ands	r2, r1
 80006ee:	431a      	orrs	r2, r3
 80006f0:	0016      	movs	r6, r2
 80006f2:	0753      	lsls	r3, r2, #29
 80006f4:	d004      	beq.n	8000700 <__aeabi_fadd+0x298>
 80006f6:	230f      	movs	r3, #15
 80006f8:	4013      	ands	r3, r2
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d000      	beq.n	8000700 <__aeabi_fadd+0x298>
 80006fe:	e72a      	b.n	8000556 <__aeabi_fadd+0xee>
 8000700:	0173      	lsls	r3, r6, #5
 8000702:	d500      	bpl.n	8000706 <__aeabi_fadd+0x29e>
 8000704:	e72a      	b.n	800055c <__aeabi_fadd+0xf4>
 8000706:	002b      	movs	r3, r5
 8000708:	08f7      	lsrs	r7, r6, #3
 800070a:	e6f7      	b.n	80004fc <__aeabi_fadd+0x94>
 800070c:	2bff      	cmp	r3, #255	@ 0xff
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x2aa>
 8000710:	e727      	b.n	8000562 <__aeabi_fadd+0xfa>
 8000712:	1871      	adds	r1, r6, r1
 8000714:	0849      	lsrs	r1, r1, #1
 8000716:	074a      	lsls	r2, r1, #29
 8000718:	d02f      	beq.n	800077a <__aeabi_fadd+0x312>
 800071a:	220f      	movs	r2, #15
 800071c:	400a      	ands	r2, r1
 800071e:	2a04      	cmp	r2, #4
 8000720:	d02b      	beq.n	800077a <__aeabi_fadd+0x312>
 8000722:	1d0e      	adds	r6, r1, #4
 8000724:	e6e6      	b.n	80004f4 <__aeabi_fadd+0x8c>
 8000726:	2aff      	cmp	r2, #255	@ 0xff
 8000728:	d08d      	beq.n	8000646 <__aeabi_fadd+0x1de>
 800072a:	2080      	movs	r0, #128	@ 0x80
 800072c:	04c0      	lsls	r0, r0, #19
 800072e:	4306      	orrs	r6, r0
 8000730:	2b1b      	cmp	r3, #27
 8000732:	dd24      	ble.n	800077e <__aeabi_fadd+0x316>
 8000734:	0013      	movs	r3, r2
 8000736:	1d4e      	adds	r6, r1, #5
 8000738:	e6dc      	b.n	80004f4 <__aeabi_fadd+0x8c>
 800073a:	464c      	mov	r4, r9
 800073c:	1b8f      	subs	r7, r1, r6
 800073e:	e6f9      	b.n	8000534 <__aeabi_fadd+0xcc>
 8000740:	464c      	mov	r4, r9
 8000742:	000e      	movs	r6, r1
 8000744:	e6d6      	b.n	80004f4 <__aeabi_fadd+0x8c>
 8000746:	2e00      	cmp	r6, #0
 8000748:	d149      	bne.n	80007de <__aeabi_fadd+0x376>
 800074a:	2900      	cmp	r1, #0
 800074c:	d068      	beq.n	8000820 <__aeabi_fadd+0x3b8>
 800074e:	4667      	mov	r7, ip
 8000750:	464c      	mov	r4, r9
 8000752:	e77c      	b.n	800064e <__aeabi_fadd+0x1e6>
 8000754:	1870      	adds	r0, r6, r1
 8000756:	0143      	lsls	r3, r0, #5
 8000758:	d574      	bpl.n	8000844 <__aeabi_fadd+0x3dc>
 800075a:	4930      	ldr	r1, [pc, #192]	@ (800081c <__aeabi_fadd+0x3b4>)
 800075c:	0840      	lsrs	r0, r0, #1
 800075e:	4001      	ands	r1, r0
 8000760:	0743      	lsls	r3, r0, #29
 8000762:	d009      	beq.n	8000778 <__aeabi_fadd+0x310>
 8000764:	230f      	movs	r3, #15
 8000766:	4003      	ands	r3, r0
 8000768:	2b04      	cmp	r3, #4
 800076a:	d005      	beq.n	8000778 <__aeabi_fadd+0x310>
 800076c:	2302      	movs	r3, #2
 800076e:	1d0e      	adds	r6, r1, #4
 8000770:	e6c0      	b.n	80004f4 <__aeabi_fadd+0x8c>
 8000772:	2301      	movs	r3, #1
 8000774:	08cf      	lsrs	r7, r1, #3
 8000776:	e6c1      	b.n	80004fc <__aeabi_fadd+0x94>
 8000778:	2302      	movs	r3, #2
 800077a:	08cf      	lsrs	r7, r1, #3
 800077c:	e6be      	b.n	80004fc <__aeabi_fadd+0x94>
 800077e:	2520      	movs	r5, #32
 8000780:	0030      	movs	r0, r6
 8000782:	40d8      	lsrs	r0, r3
 8000784:	1aeb      	subs	r3, r5, r3
 8000786:	409e      	lsls	r6, r3
 8000788:	0033      	movs	r3, r6
 800078a:	1e5d      	subs	r5, r3, #1
 800078c:	41ab      	sbcs	r3, r5
 800078e:	4303      	orrs	r3, r0
 8000790:	0015      	movs	r5, r2
 8000792:	185e      	adds	r6, r3, r1
 8000794:	e7a0      	b.n	80006d8 <__aeabi_fadd+0x270>
 8000796:	2900      	cmp	r1, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x334>
 800079a:	e765      	b.n	8000668 <__aeabi_fadd+0x200>
 800079c:	464c      	mov	r4, r9
 800079e:	4667      	mov	r7, ip
 80007a0:	e6ac      	b.n	80004fc <__aeabi_fadd+0x94>
 80007a2:	1b8f      	subs	r7, r1, r6
 80007a4:	017b      	lsls	r3, r7, #5
 80007a6:	d52e      	bpl.n	8000806 <__aeabi_fadd+0x39e>
 80007a8:	01bf      	lsls	r7, r7, #6
 80007aa:	09bf      	lsrs	r7, r7, #6
 80007ac:	0038      	movs	r0, r7
 80007ae:	f001 f9ef 	bl	8001b90 <__clzsi2>
 80007b2:	003b      	movs	r3, r7
 80007b4:	3805      	subs	r0, #5
 80007b6:	4083      	lsls	r3, r0
 80007b8:	464c      	mov	r4, r9
 80007ba:	3501      	adds	r5, #1
 80007bc:	e710      	b.n	80005e0 <__aeabi_fadd+0x178>
 80007be:	2e00      	cmp	r6, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x35c>
 80007c2:	e740      	b.n	8000646 <__aeabi_fadd+0x1de>
 80007c4:	2900      	cmp	r1, #0
 80007c6:	d100      	bne.n	80007ca <__aeabi_fadd+0x362>
 80007c8:	e741      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007ca:	2380      	movs	r3, #128	@ 0x80
 80007cc:	03db      	lsls	r3, r3, #15
 80007ce:	429f      	cmp	r7, r3
 80007d0:	d200      	bcs.n	80007d4 <__aeabi_fadd+0x36c>
 80007d2:	e73c      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007d4:	459c      	cmp	ip, r3
 80007d6:	d300      	bcc.n	80007da <__aeabi_fadd+0x372>
 80007d8:	e739      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007da:	4667      	mov	r7, ip
 80007dc:	e737      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007de:	2900      	cmp	r1, #0
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fadd+0x37c>
 80007e2:	e734      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007e4:	2380      	movs	r3, #128	@ 0x80
 80007e6:	03db      	lsls	r3, r3, #15
 80007e8:	429f      	cmp	r7, r3
 80007ea:	d200      	bcs.n	80007ee <__aeabi_fadd+0x386>
 80007ec:	e72f      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007ee:	459c      	cmp	ip, r3
 80007f0:	d300      	bcc.n	80007f4 <__aeabi_fadd+0x38c>
 80007f2:	e72c      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007f4:	464c      	mov	r4, r9
 80007f6:	4667      	mov	r7, ip
 80007f8:	e729      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007fa:	2900      	cmp	r1, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fadd+0x398>
 80007fe:	e734      	b.n	800066a <__aeabi_fadd+0x202>
 8000800:	2300      	movs	r3, #0
 8000802:	08cf      	lsrs	r7, r1, #3
 8000804:	e67a      	b.n	80004fc <__aeabi_fadd+0x94>
 8000806:	464c      	mov	r4, r9
 8000808:	2301      	movs	r3, #1
 800080a:	08ff      	lsrs	r7, r7, #3
 800080c:	e676      	b.n	80004fc <__aeabi_fadd+0x94>
 800080e:	2f00      	cmp	r7, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x3ac>
 8000812:	e729      	b.n	8000668 <__aeabi_fadd+0x200>
 8000814:	08ff      	lsrs	r7, r7, #3
 8000816:	e671      	b.n	80004fc <__aeabi_fadd+0x94>
 8000818:	fbffffff 	.word	0xfbffffff
 800081c:	7dffffff 	.word	0x7dffffff
 8000820:	2280      	movs	r2, #128	@ 0x80
 8000822:	2400      	movs	r4, #0
 8000824:	20ff      	movs	r0, #255	@ 0xff
 8000826:	03d2      	lsls	r2, r2, #15
 8000828:	e69d      	b.n	8000566 <__aeabi_fadd+0xfe>
 800082a:	2300      	movs	r3, #0
 800082c:	e666      	b.n	80004fc <__aeabi_fadd+0x94>
 800082e:	2300      	movs	r3, #0
 8000830:	08d7      	lsrs	r7, r2, #3
 8000832:	e663      	b.n	80004fc <__aeabi_fadd+0x94>
 8000834:	2001      	movs	r0, #1
 8000836:	0172      	lsls	r2, r6, #5
 8000838:	d500      	bpl.n	800083c <__aeabi_fadd+0x3d4>
 800083a:	e6e7      	b.n	800060c <__aeabi_fadd+0x1a4>
 800083c:	0031      	movs	r1, r6
 800083e:	2300      	movs	r3, #0
 8000840:	08cf      	lsrs	r7, r1, #3
 8000842:	e65b      	b.n	80004fc <__aeabi_fadd+0x94>
 8000844:	2301      	movs	r3, #1
 8000846:	08c7      	lsrs	r7, r0, #3
 8000848:	e658      	b.n	80004fc <__aeabi_fadd+0x94>
 800084a:	46c0      	nop			@ (mov r8, r8)

0800084c <__aeabi_fdiv>:
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084e:	4646      	mov	r6, r8
 8000850:	464f      	mov	r7, r9
 8000852:	46d6      	mov	lr, sl
 8000854:	0245      	lsls	r5, r0, #9
 8000856:	b5c0      	push	{r6, r7, lr}
 8000858:	0fc3      	lsrs	r3, r0, #31
 800085a:	0047      	lsls	r7, r0, #1
 800085c:	4698      	mov	r8, r3
 800085e:	1c0e      	adds	r6, r1, #0
 8000860:	0a6d      	lsrs	r5, r5, #9
 8000862:	0e3f      	lsrs	r7, r7, #24
 8000864:	d05b      	beq.n	800091e <__aeabi_fdiv+0xd2>
 8000866:	2fff      	cmp	r7, #255	@ 0xff
 8000868:	d021      	beq.n	80008ae <__aeabi_fdiv+0x62>
 800086a:	2380      	movs	r3, #128	@ 0x80
 800086c:	00ed      	lsls	r5, r5, #3
 800086e:	04db      	lsls	r3, r3, #19
 8000870:	431d      	orrs	r5, r3
 8000872:	2300      	movs	r3, #0
 8000874:	4699      	mov	r9, r3
 8000876:	469a      	mov	sl, r3
 8000878:	3f7f      	subs	r7, #127	@ 0x7f
 800087a:	0274      	lsls	r4, r6, #9
 800087c:	0073      	lsls	r3, r6, #1
 800087e:	0a64      	lsrs	r4, r4, #9
 8000880:	0e1b      	lsrs	r3, r3, #24
 8000882:	0ff6      	lsrs	r6, r6, #31
 8000884:	2b00      	cmp	r3, #0
 8000886:	d020      	beq.n	80008ca <__aeabi_fdiv+0x7e>
 8000888:	2bff      	cmp	r3, #255	@ 0xff
 800088a:	d043      	beq.n	8000914 <__aeabi_fdiv+0xc8>
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	2000      	movs	r0, #0
 8000890:	00e4      	lsls	r4, r4, #3
 8000892:	04d2      	lsls	r2, r2, #19
 8000894:	4314      	orrs	r4, r2
 8000896:	3b7f      	subs	r3, #127	@ 0x7f
 8000898:	4642      	mov	r2, r8
 800089a:	1aff      	subs	r7, r7, r3
 800089c:	464b      	mov	r3, r9
 800089e:	4072      	eors	r2, r6
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d900      	bls.n	80008a6 <__aeabi_fdiv+0x5a>
 80008a4:	e09d      	b.n	80009e2 <__aeabi_fdiv+0x196>
 80008a6:	4971      	ldr	r1, [pc, #452]	@ (8000a6c <__aeabi_fdiv+0x220>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	58cb      	ldr	r3, [r1, r3]
 80008ac:	469f      	mov	pc, r3
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d15a      	bne.n	8000968 <__aeabi_fdiv+0x11c>
 80008b2:	2308      	movs	r3, #8
 80008b4:	4699      	mov	r9, r3
 80008b6:	3b06      	subs	r3, #6
 80008b8:	0274      	lsls	r4, r6, #9
 80008ba:	469a      	mov	sl, r3
 80008bc:	0073      	lsls	r3, r6, #1
 80008be:	27ff      	movs	r7, #255	@ 0xff
 80008c0:	0a64      	lsrs	r4, r4, #9
 80008c2:	0e1b      	lsrs	r3, r3, #24
 80008c4:	0ff6      	lsrs	r6, r6, #31
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1de      	bne.n	8000888 <__aeabi_fdiv+0x3c>
 80008ca:	2c00      	cmp	r4, #0
 80008cc:	d13b      	bne.n	8000946 <__aeabi_fdiv+0xfa>
 80008ce:	2301      	movs	r3, #1
 80008d0:	4642      	mov	r2, r8
 80008d2:	4649      	mov	r1, r9
 80008d4:	4072      	eors	r2, r6
 80008d6:	4319      	orrs	r1, r3
 80008d8:	290e      	cmp	r1, #14
 80008da:	d818      	bhi.n	800090e <__aeabi_fdiv+0xc2>
 80008dc:	4864      	ldr	r0, [pc, #400]	@ (8000a70 <__aeabi_fdiv+0x224>)
 80008de:	0089      	lsls	r1, r1, #2
 80008e0:	5841      	ldr	r1, [r0, r1]
 80008e2:	468f      	mov	pc, r1
 80008e4:	4653      	mov	r3, sl
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d100      	bne.n	80008ec <__aeabi_fdiv+0xa0>
 80008ea:	e0b8      	b.n	8000a5e <__aeabi_fdiv+0x212>
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d06e      	beq.n	80009ce <__aeabi_fdiv+0x182>
 80008f0:	4642      	mov	r2, r8
 80008f2:	002c      	movs	r4, r5
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d140      	bne.n	800097a <__aeabi_fdiv+0x12e>
 80008f8:	2000      	movs	r0, #0
 80008fa:	2400      	movs	r4, #0
 80008fc:	05c0      	lsls	r0, r0, #23
 80008fe:	4320      	orrs	r0, r4
 8000900:	07d2      	lsls	r2, r2, #31
 8000902:	4310      	orrs	r0, r2
 8000904:	bce0      	pop	{r5, r6, r7}
 8000906:	46ba      	mov	sl, r7
 8000908:	46b1      	mov	r9, r6
 800090a:	46a8      	mov	r8, r5
 800090c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090e:	20ff      	movs	r0, #255	@ 0xff
 8000910:	2400      	movs	r4, #0
 8000912:	e7f3      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000914:	2c00      	cmp	r4, #0
 8000916:	d120      	bne.n	800095a <__aeabi_fdiv+0x10e>
 8000918:	2302      	movs	r3, #2
 800091a:	3fff      	subs	r7, #255	@ 0xff
 800091c:	e7d8      	b.n	80008d0 <__aeabi_fdiv+0x84>
 800091e:	2d00      	cmp	r5, #0
 8000920:	d105      	bne.n	800092e <__aeabi_fdiv+0xe2>
 8000922:	2304      	movs	r3, #4
 8000924:	4699      	mov	r9, r3
 8000926:	3b03      	subs	r3, #3
 8000928:	2700      	movs	r7, #0
 800092a:	469a      	mov	sl, r3
 800092c:	e7a5      	b.n	800087a <__aeabi_fdiv+0x2e>
 800092e:	0028      	movs	r0, r5
 8000930:	f001 f92e 	bl	8001b90 <__clzsi2>
 8000934:	2776      	movs	r7, #118	@ 0x76
 8000936:	1f43      	subs	r3, r0, #5
 8000938:	409d      	lsls	r5, r3
 800093a:	2300      	movs	r3, #0
 800093c:	427f      	negs	r7, r7
 800093e:	4699      	mov	r9, r3
 8000940:	469a      	mov	sl, r3
 8000942:	1a3f      	subs	r7, r7, r0
 8000944:	e799      	b.n	800087a <__aeabi_fdiv+0x2e>
 8000946:	0020      	movs	r0, r4
 8000948:	f001 f922 	bl	8001b90 <__clzsi2>
 800094c:	1f43      	subs	r3, r0, #5
 800094e:	409c      	lsls	r4, r3
 8000950:	2376      	movs	r3, #118	@ 0x76
 8000952:	425b      	negs	r3, r3
 8000954:	1a1b      	subs	r3, r3, r0
 8000956:	2000      	movs	r0, #0
 8000958:	e79e      	b.n	8000898 <__aeabi_fdiv+0x4c>
 800095a:	2303      	movs	r3, #3
 800095c:	464a      	mov	r2, r9
 800095e:	431a      	orrs	r2, r3
 8000960:	4691      	mov	r9, r2
 8000962:	2003      	movs	r0, #3
 8000964:	33fc      	adds	r3, #252	@ 0xfc
 8000966:	e797      	b.n	8000898 <__aeabi_fdiv+0x4c>
 8000968:	230c      	movs	r3, #12
 800096a:	4699      	mov	r9, r3
 800096c:	3b09      	subs	r3, #9
 800096e:	27ff      	movs	r7, #255	@ 0xff
 8000970:	469a      	mov	sl, r3
 8000972:	e782      	b.n	800087a <__aeabi_fdiv+0x2e>
 8000974:	2803      	cmp	r0, #3
 8000976:	d02c      	beq.n	80009d2 <__aeabi_fdiv+0x186>
 8000978:	0032      	movs	r2, r6
 800097a:	0038      	movs	r0, r7
 800097c:	307f      	adds	r0, #127	@ 0x7f
 800097e:	2800      	cmp	r0, #0
 8000980:	dd47      	ble.n	8000a12 <__aeabi_fdiv+0x1c6>
 8000982:	0763      	lsls	r3, r4, #29
 8000984:	d004      	beq.n	8000990 <__aeabi_fdiv+0x144>
 8000986:	230f      	movs	r3, #15
 8000988:	4023      	ands	r3, r4
 800098a:	2b04      	cmp	r3, #4
 800098c:	d000      	beq.n	8000990 <__aeabi_fdiv+0x144>
 800098e:	3404      	adds	r4, #4
 8000990:	0123      	lsls	r3, r4, #4
 8000992:	d503      	bpl.n	800099c <__aeabi_fdiv+0x150>
 8000994:	0038      	movs	r0, r7
 8000996:	4b37      	ldr	r3, [pc, #220]	@ (8000a74 <__aeabi_fdiv+0x228>)
 8000998:	3080      	adds	r0, #128	@ 0x80
 800099a:	401c      	ands	r4, r3
 800099c:	28fe      	cmp	r0, #254	@ 0xfe
 800099e:	dcb6      	bgt.n	800090e <__aeabi_fdiv+0xc2>
 80009a0:	01a4      	lsls	r4, r4, #6
 80009a2:	0a64      	lsrs	r4, r4, #9
 80009a4:	b2c0      	uxtb	r0, r0
 80009a6:	e7a9      	b.n	80008fc <__aeabi_fdiv+0xb0>
 80009a8:	2480      	movs	r4, #128	@ 0x80
 80009aa:	2200      	movs	r2, #0
 80009ac:	20ff      	movs	r0, #255	@ 0xff
 80009ae:	03e4      	lsls	r4, r4, #15
 80009b0:	e7a4      	b.n	80008fc <__aeabi_fdiv+0xb0>
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	03db      	lsls	r3, r3, #15
 80009b6:	421d      	tst	r5, r3
 80009b8:	d001      	beq.n	80009be <__aeabi_fdiv+0x172>
 80009ba:	421c      	tst	r4, r3
 80009bc:	d00b      	beq.n	80009d6 <__aeabi_fdiv+0x18a>
 80009be:	2480      	movs	r4, #128	@ 0x80
 80009c0:	03e4      	lsls	r4, r4, #15
 80009c2:	432c      	orrs	r4, r5
 80009c4:	0264      	lsls	r4, r4, #9
 80009c6:	4642      	mov	r2, r8
 80009c8:	20ff      	movs	r0, #255	@ 0xff
 80009ca:	0a64      	lsrs	r4, r4, #9
 80009cc:	e796      	b.n	80008fc <__aeabi_fdiv+0xb0>
 80009ce:	4646      	mov	r6, r8
 80009d0:	002c      	movs	r4, r5
 80009d2:	2380      	movs	r3, #128	@ 0x80
 80009d4:	03db      	lsls	r3, r3, #15
 80009d6:	431c      	orrs	r4, r3
 80009d8:	0264      	lsls	r4, r4, #9
 80009da:	0032      	movs	r2, r6
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	0a64      	lsrs	r4, r4, #9
 80009e0:	e78c      	b.n	80008fc <__aeabi_fdiv+0xb0>
 80009e2:	016d      	lsls	r5, r5, #5
 80009e4:	0160      	lsls	r0, r4, #5
 80009e6:	4285      	cmp	r5, r0
 80009e8:	d22d      	bcs.n	8000a46 <__aeabi_fdiv+0x1fa>
 80009ea:	231b      	movs	r3, #27
 80009ec:	2400      	movs	r4, #0
 80009ee:	3f01      	subs	r7, #1
 80009f0:	2601      	movs	r6, #1
 80009f2:	0029      	movs	r1, r5
 80009f4:	0064      	lsls	r4, r4, #1
 80009f6:	006d      	lsls	r5, r5, #1
 80009f8:	2900      	cmp	r1, #0
 80009fa:	db01      	blt.n	8000a00 <__aeabi_fdiv+0x1b4>
 80009fc:	4285      	cmp	r5, r0
 80009fe:	d301      	bcc.n	8000a04 <__aeabi_fdiv+0x1b8>
 8000a00:	1a2d      	subs	r5, r5, r0
 8000a02:	4334      	orrs	r4, r6
 8000a04:	3b01      	subs	r3, #1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1f3      	bne.n	80009f2 <__aeabi_fdiv+0x1a6>
 8000a0a:	1e6b      	subs	r3, r5, #1
 8000a0c:	419d      	sbcs	r5, r3
 8000a0e:	432c      	orrs	r4, r5
 8000a10:	e7b3      	b.n	800097a <__aeabi_fdiv+0x12e>
 8000a12:	2301      	movs	r3, #1
 8000a14:	1a1b      	subs	r3, r3, r0
 8000a16:	2b1b      	cmp	r3, #27
 8000a18:	dd00      	ble.n	8000a1c <__aeabi_fdiv+0x1d0>
 8000a1a:	e76d      	b.n	80008f8 <__aeabi_fdiv+0xac>
 8000a1c:	0021      	movs	r1, r4
 8000a1e:	379e      	adds	r7, #158	@ 0x9e
 8000a20:	40d9      	lsrs	r1, r3
 8000a22:	40bc      	lsls	r4, r7
 8000a24:	000b      	movs	r3, r1
 8000a26:	1e61      	subs	r1, r4, #1
 8000a28:	418c      	sbcs	r4, r1
 8000a2a:	4323      	orrs	r3, r4
 8000a2c:	0759      	lsls	r1, r3, #29
 8000a2e:	d004      	beq.n	8000a3a <__aeabi_fdiv+0x1ee>
 8000a30:	210f      	movs	r1, #15
 8000a32:	4019      	ands	r1, r3
 8000a34:	2904      	cmp	r1, #4
 8000a36:	d000      	beq.n	8000a3a <__aeabi_fdiv+0x1ee>
 8000a38:	3304      	adds	r3, #4
 8000a3a:	0159      	lsls	r1, r3, #5
 8000a3c:	d413      	bmi.n	8000a66 <__aeabi_fdiv+0x21a>
 8000a3e:	019b      	lsls	r3, r3, #6
 8000a40:	2000      	movs	r0, #0
 8000a42:	0a5c      	lsrs	r4, r3, #9
 8000a44:	e75a      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000a46:	231a      	movs	r3, #26
 8000a48:	2401      	movs	r4, #1
 8000a4a:	1a2d      	subs	r5, r5, r0
 8000a4c:	e7d0      	b.n	80009f0 <__aeabi_fdiv+0x1a4>
 8000a4e:	1e98      	subs	r0, r3, #2
 8000a50:	4243      	negs	r3, r0
 8000a52:	4158      	adcs	r0, r3
 8000a54:	4240      	negs	r0, r0
 8000a56:	0032      	movs	r2, r6
 8000a58:	2400      	movs	r4, #0
 8000a5a:	b2c0      	uxtb	r0, r0
 8000a5c:	e74e      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000a5e:	4642      	mov	r2, r8
 8000a60:	20ff      	movs	r0, #255	@ 0xff
 8000a62:	2400      	movs	r4, #0
 8000a64:	e74a      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000a66:	2001      	movs	r0, #1
 8000a68:	2400      	movs	r4, #0
 8000a6a:	e747      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000a6c:	08006da4 	.word	0x08006da4
 8000a70:	08006de4 	.word	0x08006de4
 8000a74:	f7ffffff 	.word	0xf7ffffff

08000a78 <__eqsf2>:
 8000a78:	b570      	push	{r4, r5, r6, lr}
 8000a7a:	0042      	lsls	r2, r0, #1
 8000a7c:	024e      	lsls	r6, r1, #9
 8000a7e:	004c      	lsls	r4, r1, #1
 8000a80:	0245      	lsls	r5, r0, #9
 8000a82:	0a6d      	lsrs	r5, r5, #9
 8000a84:	0e12      	lsrs	r2, r2, #24
 8000a86:	0fc3      	lsrs	r3, r0, #31
 8000a88:	0a76      	lsrs	r6, r6, #9
 8000a8a:	0e24      	lsrs	r4, r4, #24
 8000a8c:	0fc9      	lsrs	r1, r1, #31
 8000a8e:	2aff      	cmp	r2, #255	@ 0xff
 8000a90:	d010      	beq.n	8000ab4 <__eqsf2+0x3c>
 8000a92:	2cff      	cmp	r4, #255	@ 0xff
 8000a94:	d00c      	beq.n	8000ab0 <__eqsf2+0x38>
 8000a96:	2001      	movs	r0, #1
 8000a98:	42a2      	cmp	r2, r4
 8000a9a:	d10a      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000a9c:	42b5      	cmp	r5, r6
 8000a9e:	d108      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d00f      	beq.n	8000ac4 <__eqsf2+0x4c>
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	d104      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000aa8:	0028      	movs	r0, r5
 8000aaa:	1e43      	subs	r3, r0, #1
 8000aac:	4198      	sbcs	r0, r3
 8000aae:	e000      	b.n	8000ab2 <__eqsf2+0x3a>
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	2cff      	cmp	r4, #255	@ 0xff
 8000ab8:	d1fb      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000aba:	4335      	orrs	r5, r6
 8000abc:	d1f9      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000abe:	404b      	eors	r3, r1
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	e7f6      	b.n	8000ab2 <__eqsf2+0x3a>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e7f4      	b.n	8000ab2 <__eqsf2+0x3a>

08000ac8 <__gesf2>:
 8000ac8:	b530      	push	{r4, r5, lr}
 8000aca:	0042      	lsls	r2, r0, #1
 8000acc:	0244      	lsls	r4, r0, #9
 8000ace:	024d      	lsls	r5, r1, #9
 8000ad0:	0fc3      	lsrs	r3, r0, #31
 8000ad2:	0048      	lsls	r0, r1, #1
 8000ad4:	0a64      	lsrs	r4, r4, #9
 8000ad6:	0e12      	lsrs	r2, r2, #24
 8000ad8:	0a6d      	lsrs	r5, r5, #9
 8000ada:	0e00      	lsrs	r0, r0, #24
 8000adc:	0fc9      	lsrs	r1, r1, #31
 8000ade:	2aff      	cmp	r2, #255	@ 0xff
 8000ae0:	d018      	beq.n	8000b14 <__gesf2+0x4c>
 8000ae2:	28ff      	cmp	r0, #255	@ 0xff
 8000ae4:	d00a      	beq.n	8000afc <__gesf2+0x34>
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	d11e      	bne.n	8000b28 <__gesf2+0x60>
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d10a      	bne.n	8000b04 <__gesf2+0x3c>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d029      	beq.n	8000b46 <__gesf2+0x7e>
 8000af2:	2c00      	cmp	r4, #0
 8000af4:	d12d      	bne.n	8000b52 <__gesf2+0x8a>
 8000af6:	0048      	lsls	r0, r1, #1
 8000af8:	3801      	subs	r0, #1
 8000afa:	bd30      	pop	{r4, r5, pc}
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d125      	bne.n	8000b4c <__gesf2+0x84>
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	d101      	bne.n	8000b08 <__gesf2+0x40>
 8000b04:	2c00      	cmp	r4, #0
 8000b06:	d0f6      	beq.n	8000af6 <__gesf2+0x2e>
 8000b08:	428b      	cmp	r3, r1
 8000b0a:	d019      	beq.n	8000b40 <__gesf2+0x78>
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	4318      	orrs	r0, r3
 8000b12:	e7f2      	b.n	8000afa <__gesf2+0x32>
 8000b14:	2c00      	cmp	r4, #0
 8000b16:	d119      	bne.n	8000b4c <__gesf2+0x84>
 8000b18:	28ff      	cmp	r0, #255	@ 0xff
 8000b1a:	d1f7      	bne.n	8000b0c <__gesf2+0x44>
 8000b1c:	2d00      	cmp	r5, #0
 8000b1e:	d115      	bne.n	8000b4c <__gesf2+0x84>
 8000b20:	2000      	movs	r0, #0
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d1f2      	bne.n	8000b0c <__gesf2+0x44>
 8000b26:	e7e8      	b.n	8000afa <__gesf2+0x32>
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d0ef      	beq.n	8000b0c <__gesf2+0x44>
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	d1ed      	bne.n	8000b0c <__gesf2+0x44>
 8000b30:	4282      	cmp	r2, r0
 8000b32:	dceb      	bgt.n	8000b0c <__gesf2+0x44>
 8000b34:	db04      	blt.n	8000b40 <__gesf2+0x78>
 8000b36:	42ac      	cmp	r4, r5
 8000b38:	d8e8      	bhi.n	8000b0c <__gesf2+0x44>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	42ac      	cmp	r4, r5
 8000b3e:	d2dc      	bcs.n	8000afa <__gesf2+0x32>
 8000b40:	0058      	lsls	r0, r3, #1
 8000b42:	3801      	subs	r0, #1
 8000b44:	e7d9      	b.n	8000afa <__gesf2+0x32>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d0d7      	beq.n	8000afa <__gesf2+0x32>
 8000b4a:	e7df      	b.n	8000b0c <__gesf2+0x44>
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	4240      	negs	r0, r0
 8000b50:	e7d3      	b.n	8000afa <__gesf2+0x32>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d1da      	bne.n	8000b0c <__gesf2+0x44>
 8000b56:	e7ee      	b.n	8000b36 <__gesf2+0x6e>

08000b58 <__lesf2>:
 8000b58:	b530      	push	{r4, r5, lr}
 8000b5a:	0042      	lsls	r2, r0, #1
 8000b5c:	0244      	lsls	r4, r0, #9
 8000b5e:	024d      	lsls	r5, r1, #9
 8000b60:	0fc3      	lsrs	r3, r0, #31
 8000b62:	0048      	lsls	r0, r1, #1
 8000b64:	0a64      	lsrs	r4, r4, #9
 8000b66:	0e12      	lsrs	r2, r2, #24
 8000b68:	0a6d      	lsrs	r5, r5, #9
 8000b6a:	0e00      	lsrs	r0, r0, #24
 8000b6c:	0fc9      	lsrs	r1, r1, #31
 8000b6e:	2aff      	cmp	r2, #255	@ 0xff
 8000b70:	d017      	beq.n	8000ba2 <__lesf2+0x4a>
 8000b72:	28ff      	cmp	r0, #255	@ 0xff
 8000b74:	d00a      	beq.n	8000b8c <__lesf2+0x34>
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	d11b      	bne.n	8000bb2 <__lesf2+0x5a>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d10a      	bne.n	8000b94 <__lesf2+0x3c>
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d01d      	beq.n	8000bbe <__lesf2+0x66>
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d12d      	bne.n	8000be2 <__lesf2+0x8a>
 8000b86:	0048      	lsls	r0, r1, #1
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e011      	b.n	8000bb0 <__lesf2+0x58>
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d10e      	bne.n	8000bae <__lesf2+0x56>
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d101      	bne.n	8000b98 <__lesf2+0x40>
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	d0f6      	beq.n	8000b86 <__lesf2+0x2e>
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d10c      	bne.n	8000bb6 <__lesf2+0x5e>
 8000b9c:	0058      	lsls	r0, r3, #1
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e006      	b.n	8000bb0 <__lesf2+0x58>
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d103      	bne.n	8000bae <__lesf2+0x56>
 8000ba6:	28ff      	cmp	r0, #255	@ 0xff
 8000ba8:	d105      	bne.n	8000bb6 <__lesf2+0x5e>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d015      	beq.n	8000bda <__lesf2+0x82>
 8000bae:	2002      	movs	r0, #2
 8000bb0:	bd30      	pop	{r4, r5, pc}
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d106      	bne.n	8000bc4 <__lesf2+0x6c>
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	425b      	negs	r3, r3
 8000bba:	4318      	orrs	r0, r3
 8000bbc:	e7f8      	b.n	8000bb0 <__lesf2+0x58>
 8000bbe:	2c00      	cmp	r4, #0
 8000bc0:	d0f6      	beq.n	8000bb0 <__lesf2+0x58>
 8000bc2:	e7f8      	b.n	8000bb6 <__lesf2+0x5e>
 8000bc4:	428b      	cmp	r3, r1
 8000bc6:	d1f6      	bne.n	8000bb6 <__lesf2+0x5e>
 8000bc8:	4282      	cmp	r2, r0
 8000bca:	dcf4      	bgt.n	8000bb6 <__lesf2+0x5e>
 8000bcc:	dbe6      	blt.n	8000b9c <__lesf2+0x44>
 8000bce:	42ac      	cmp	r4, r5
 8000bd0:	d8f1      	bhi.n	8000bb6 <__lesf2+0x5e>
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	42ac      	cmp	r4, r5
 8000bd6:	d2eb      	bcs.n	8000bb0 <__lesf2+0x58>
 8000bd8:	e7e0      	b.n	8000b9c <__lesf2+0x44>
 8000bda:	2000      	movs	r0, #0
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	d1ea      	bne.n	8000bb6 <__lesf2+0x5e>
 8000be0:	e7e6      	b.n	8000bb0 <__lesf2+0x58>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d1e7      	bne.n	8000bb6 <__lesf2+0x5e>
 8000be6:	e7f2      	b.n	8000bce <__lesf2+0x76>

08000be8 <__aeabi_fmul>:
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	464f      	mov	r7, r9
 8000bec:	4646      	mov	r6, r8
 8000bee:	46d6      	mov	lr, sl
 8000bf0:	0044      	lsls	r4, r0, #1
 8000bf2:	b5c0      	push	{r6, r7, lr}
 8000bf4:	0246      	lsls	r6, r0, #9
 8000bf6:	1c0f      	adds	r7, r1, #0
 8000bf8:	0a76      	lsrs	r6, r6, #9
 8000bfa:	0e24      	lsrs	r4, r4, #24
 8000bfc:	0fc5      	lsrs	r5, r0, #31
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fmul+0x1c>
 8000c02:	e0da      	b.n	8000dba <__aeabi_fmul+0x1d2>
 8000c04:	2cff      	cmp	r4, #255	@ 0xff
 8000c06:	d074      	beq.n	8000cf2 <__aeabi_fmul+0x10a>
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	00f6      	lsls	r6, r6, #3
 8000c0c:	04db      	lsls	r3, r3, #19
 8000c0e:	431e      	orrs	r6, r3
 8000c10:	2300      	movs	r3, #0
 8000c12:	4699      	mov	r9, r3
 8000c14:	469a      	mov	sl, r3
 8000c16:	3c7f      	subs	r4, #127	@ 0x7f
 8000c18:	027b      	lsls	r3, r7, #9
 8000c1a:	0a5b      	lsrs	r3, r3, #9
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	007b      	lsls	r3, r7, #1
 8000c20:	0e1b      	lsrs	r3, r3, #24
 8000c22:	0fff      	lsrs	r7, r7, #31
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d074      	beq.n	8000d12 <__aeabi_fmul+0x12a>
 8000c28:	2bff      	cmp	r3, #255	@ 0xff
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fmul+0x46>
 8000c2c:	e08e      	b.n	8000d4c <__aeabi_fmul+0x164>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	2180      	movs	r1, #128	@ 0x80
 8000c32:	00d2      	lsls	r2, r2, #3
 8000c34:	04c9      	lsls	r1, r1, #19
 8000c36:	4311      	orrs	r1, r2
 8000c38:	3b7f      	subs	r3, #127	@ 0x7f
 8000c3a:	002a      	movs	r2, r5
 8000c3c:	18e4      	adds	r4, r4, r3
 8000c3e:	464b      	mov	r3, r9
 8000c40:	407a      	eors	r2, r7
 8000c42:	4688      	mov	r8, r1
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	2b0a      	cmp	r3, #10
 8000c48:	dc75      	bgt.n	8000d36 <__aeabi_fmul+0x14e>
 8000c4a:	464b      	mov	r3, r9
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	dd0f      	ble.n	8000c72 <__aeabi_fmul+0x8a>
 8000c52:	4649      	mov	r1, r9
 8000c54:	2301      	movs	r3, #1
 8000c56:	408b      	lsls	r3, r1
 8000c58:	21a6      	movs	r1, #166	@ 0xa6
 8000c5a:	00c9      	lsls	r1, r1, #3
 8000c5c:	420b      	tst	r3, r1
 8000c5e:	d169      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000c60:	2190      	movs	r1, #144	@ 0x90
 8000c62:	0089      	lsls	r1, r1, #2
 8000c64:	420b      	tst	r3, r1
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fmul+0x82>
 8000c68:	e100      	b.n	8000e6c <__aeabi_fmul+0x284>
 8000c6a:	2188      	movs	r1, #136	@ 0x88
 8000c6c:	4219      	tst	r1, r3
 8000c6e:	d000      	beq.n	8000c72 <__aeabi_fmul+0x8a>
 8000c70:	e0f5      	b.n	8000e5e <__aeabi_fmul+0x276>
 8000c72:	4641      	mov	r1, r8
 8000c74:	0409      	lsls	r1, r1, #16
 8000c76:	0c09      	lsrs	r1, r1, #16
 8000c78:	4643      	mov	r3, r8
 8000c7a:	0008      	movs	r0, r1
 8000c7c:	0c35      	lsrs	r5, r6, #16
 8000c7e:	0436      	lsls	r6, r6, #16
 8000c80:	0c1b      	lsrs	r3, r3, #16
 8000c82:	0c36      	lsrs	r6, r6, #16
 8000c84:	4370      	muls	r0, r6
 8000c86:	4369      	muls	r1, r5
 8000c88:	435e      	muls	r6, r3
 8000c8a:	435d      	muls	r5, r3
 8000c8c:	1876      	adds	r6, r6, r1
 8000c8e:	0c03      	lsrs	r3, r0, #16
 8000c90:	199b      	adds	r3, r3, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d903      	bls.n	8000c9e <__aeabi_fmul+0xb6>
 8000c96:	2180      	movs	r1, #128	@ 0x80
 8000c98:	0249      	lsls	r1, r1, #9
 8000c9a:	468c      	mov	ip, r1
 8000c9c:	4465      	add	r5, ip
 8000c9e:	0400      	lsls	r0, r0, #16
 8000ca0:	0419      	lsls	r1, r3, #16
 8000ca2:	0c00      	lsrs	r0, r0, #16
 8000ca4:	1809      	adds	r1, r1, r0
 8000ca6:	018e      	lsls	r6, r1, #6
 8000ca8:	1e70      	subs	r0, r6, #1
 8000caa:	4186      	sbcs	r6, r0
 8000cac:	0c1b      	lsrs	r3, r3, #16
 8000cae:	0e89      	lsrs	r1, r1, #26
 8000cb0:	195b      	adds	r3, r3, r5
 8000cb2:	430e      	orrs	r6, r1
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	431e      	orrs	r6, r3
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	d46c      	bmi.n	8000d96 <__aeabi_fmul+0x1ae>
 8000cbc:	0023      	movs	r3, r4
 8000cbe:	337f      	adds	r3, #127	@ 0x7f
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dc00      	bgt.n	8000cc6 <__aeabi_fmul+0xde>
 8000cc4:	e0b1      	b.n	8000e2a <__aeabi_fmul+0x242>
 8000cc6:	0015      	movs	r5, r2
 8000cc8:	0771      	lsls	r1, r6, #29
 8000cca:	d00b      	beq.n	8000ce4 <__aeabi_fmul+0xfc>
 8000ccc:	200f      	movs	r0, #15
 8000cce:	0021      	movs	r1, r4
 8000cd0:	4030      	ands	r0, r6
 8000cd2:	2804      	cmp	r0, #4
 8000cd4:	d006      	beq.n	8000ce4 <__aeabi_fmul+0xfc>
 8000cd6:	3604      	adds	r6, #4
 8000cd8:	0132      	lsls	r2, r6, #4
 8000cda:	d503      	bpl.n	8000ce4 <__aeabi_fmul+0xfc>
 8000cdc:	4b6e      	ldr	r3, [pc, #440]	@ (8000e98 <__aeabi_fmul+0x2b0>)
 8000cde:	401e      	ands	r6, r3
 8000ce0:	000b      	movs	r3, r1
 8000ce2:	3380      	adds	r3, #128	@ 0x80
 8000ce4:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ce6:	dd00      	ble.n	8000cea <__aeabi_fmul+0x102>
 8000ce8:	e0bd      	b.n	8000e66 <__aeabi_fmul+0x27e>
 8000cea:	01b2      	lsls	r2, r6, #6
 8000cec:	0a52      	lsrs	r2, r2, #9
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	e048      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_fmul+0x110>
 8000cf6:	e092      	b.n	8000e1e <__aeabi_fmul+0x236>
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	4699      	mov	r9, r3
 8000cfc:	3b06      	subs	r3, #6
 8000cfe:	469a      	mov	sl, r3
 8000d00:	027b      	lsls	r3, r7, #9
 8000d02:	0a5b      	lsrs	r3, r3, #9
 8000d04:	4698      	mov	r8, r3
 8000d06:	007b      	lsls	r3, r7, #1
 8000d08:	24ff      	movs	r4, #255	@ 0xff
 8000d0a:	0e1b      	lsrs	r3, r3, #24
 8000d0c:	0fff      	lsrs	r7, r7, #31
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d18a      	bne.n	8000c28 <__aeabi_fmul+0x40>
 8000d12:	4642      	mov	r2, r8
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	d164      	bne.n	8000de2 <__aeabi_fmul+0x1fa>
 8000d18:	4649      	mov	r1, r9
 8000d1a:	3201      	adds	r2, #1
 8000d1c:	4311      	orrs	r1, r2
 8000d1e:	4689      	mov	r9, r1
 8000d20:	290a      	cmp	r1, #10
 8000d22:	dc08      	bgt.n	8000d36 <__aeabi_fmul+0x14e>
 8000d24:	407d      	eors	r5, r7
 8000d26:	2001      	movs	r0, #1
 8000d28:	b2ea      	uxtb	r2, r5
 8000d2a:	2902      	cmp	r1, #2
 8000d2c:	dc91      	bgt.n	8000c52 <__aeabi_fmul+0x6a>
 8000d2e:	0015      	movs	r5, r2
 8000d30:	2200      	movs	r2, #0
 8000d32:	e027      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000d34:	0015      	movs	r5, r2
 8000d36:	4653      	mov	r3, sl
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_fmul+0x156>
 8000d3c:	e093      	b.n	8000e66 <__aeabi_fmul+0x27e>
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d01a      	beq.n	8000d78 <__aeabi_fmul+0x190>
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d12c      	bne.n	8000da0 <__aeabi_fmul+0x1b8>
 8000d46:	2300      	movs	r3, #0
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e01b      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	34ff      	adds	r4, #255	@ 0xff
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d055      	beq.n	8000e00 <__aeabi_fmul+0x218>
 8000d54:	2103      	movs	r1, #3
 8000d56:	464b      	mov	r3, r9
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	2b0a      	cmp	r3, #10
 8000d5e:	dc00      	bgt.n	8000d62 <__aeabi_fmul+0x17a>
 8000d60:	e092      	b.n	8000e88 <__aeabi_fmul+0x2a0>
 8000d62:	2b0f      	cmp	r3, #15
 8000d64:	d000      	beq.n	8000d68 <__aeabi_fmul+0x180>
 8000d66:	e08c      	b.n	8000e82 <__aeabi_fmul+0x29a>
 8000d68:	2280      	movs	r2, #128	@ 0x80
 8000d6a:	03d2      	lsls	r2, r2, #15
 8000d6c:	4216      	tst	r6, r2
 8000d6e:	d003      	beq.n	8000d78 <__aeabi_fmul+0x190>
 8000d70:	4643      	mov	r3, r8
 8000d72:	4213      	tst	r3, r2
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fmul+0x190>
 8000d76:	e07d      	b.n	8000e74 <__aeabi_fmul+0x28c>
 8000d78:	2280      	movs	r2, #128	@ 0x80
 8000d7a:	03d2      	lsls	r2, r2, #15
 8000d7c:	4332      	orrs	r2, r6
 8000d7e:	0252      	lsls	r2, r2, #9
 8000d80:	0a52      	lsrs	r2, r2, #9
 8000d82:	23ff      	movs	r3, #255	@ 0xff
 8000d84:	05d8      	lsls	r0, r3, #23
 8000d86:	07ed      	lsls	r5, r5, #31
 8000d88:	4310      	orrs	r0, r2
 8000d8a:	4328      	orrs	r0, r5
 8000d8c:	bce0      	pop	{r5, r6, r7}
 8000d8e:	46ba      	mov	sl, r7
 8000d90:	46b1      	mov	r9, r6
 8000d92:	46a8      	mov	r8, r5
 8000d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d96:	2301      	movs	r3, #1
 8000d98:	0015      	movs	r5, r2
 8000d9a:	0871      	lsrs	r1, r6, #1
 8000d9c:	401e      	ands	r6, r3
 8000d9e:	430e      	orrs	r6, r1
 8000da0:	0023      	movs	r3, r4
 8000da2:	3380      	adds	r3, #128	@ 0x80
 8000da4:	1c61      	adds	r1, r4, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	dd41      	ble.n	8000e2e <__aeabi_fmul+0x246>
 8000daa:	0772      	lsls	r2, r6, #29
 8000dac:	d094      	beq.n	8000cd8 <__aeabi_fmul+0xf0>
 8000dae:	220f      	movs	r2, #15
 8000db0:	4032      	ands	r2, r6
 8000db2:	2a04      	cmp	r2, #4
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fmul+0x1d0>
 8000db6:	e78e      	b.n	8000cd6 <__aeabi_fmul+0xee>
 8000db8:	e78e      	b.n	8000cd8 <__aeabi_fmul+0xf0>
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d105      	bne.n	8000dca <__aeabi_fmul+0x1e2>
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	4699      	mov	r9, r3
 8000dc2:	3b03      	subs	r3, #3
 8000dc4:	2400      	movs	r4, #0
 8000dc6:	469a      	mov	sl, r3
 8000dc8:	e726      	b.n	8000c18 <__aeabi_fmul+0x30>
 8000dca:	0030      	movs	r0, r6
 8000dcc:	f000 fee0 	bl	8001b90 <__clzsi2>
 8000dd0:	2476      	movs	r4, #118	@ 0x76
 8000dd2:	1f43      	subs	r3, r0, #5
 8000dd4:	409e      	lsls	r6, r3
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	4264      	negs	r4, r4
 8000dda:	4699      	mov	r9, r3
 8000ddc:	469a      	mov	sl, r3
 8000dde:	1a24      	subs	r4, r4, r0
 8000de0:	e71a      	b.n	8000c18 <__aeabi_fmul+0x30>
 8000de2:	4640      	mov	r0, r8
 8000de4:	f000 fed4 	bl	8001b90 <__clzsi2>
 8000de8:	464b      	mov	r3, r9
 8000dea:	1a24      	subs	r4, r4, r0
 8000dec:	3c76      	subs	r4, #118	@ 0x76
 8000dee:	2b0a      	cmp	r3, #10
 8000df0:	dca1      	bgt.n	8000d36 <__aeabi_fmul+0x14e>
 8000df2:	4643      	mov	r3, r8
 8000df4:	3805      	subs	r0, #5
 8000df6:	4083      	lsls	r3, r0
 8000df8:	407d      	eors	r5, r7
 8000dfa:	4698      	mov	r8, r3
 8000dfc:	b2ea      	uxtb	r2, r5
 8000dfe:	e724      	b.n	8000c4a <__aeabi_fmul+0x62>
 8000e00:	464a      	mov	r2, r9
 8000e02:	3302      	adds	r3, #2
 8000e04:	4313      	orrs	r3, r2
 8000e06:	002a      	movs	r2, r5
 8000e08:	407a      	eors	r2, r7
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	2b0a      	cmp	r3, #10
 8000e0e:	dc92      	bgt.n	8000d36 <__aeabi_fmul+0x14e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	0015      	movs	r5, r2
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d026      	beq.n	8000e66 <__aeabi_fmul+0x27e>
 8000e18:	4699      	mov	r9, r3
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	e719      	b.n	8000c52 <__aeabi_fmul+0x6a>
 8000e1e:	230c      	movs	r3, #12
 8000e20:	4699      	mov	r9, r3
 8000e22:	3b09      	subs	r3, #9
 8000e24:	24ff      	movs	r4, #255	@ 0xff
 8000e26:	469a      	mov	sl, r3
 8000e28:	e6f6      	b.n	8000c18 <__aeabi_fmul+0x30>
 8000e2a:	0015      	movs	r5, r2
 8000e2c:	0021      	movs	r1, r4
 8000e2e:	2201      	movs	r2, #1
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b1b      	cmp	r3, #27
 8000e34:	dd00      	ble.n	8000e38 <__aeabi_fmul+0x250>
 8000e36:	e786      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e38:	319e      	adds	r1, #158	@ 0x9e
 8000e3a:	0032      	movs	r2, r6
 8000e3c:	408e      	lsls	r6, r1
 8000e3e:	40da      	lsrs	r2, r3
 8000e40:	1e73      	subs	r3, r6, #1
 8000e42:	419e      	sbcs	r6, r3
 8000e44:	4332      	orrs	r2, r6
 8000e46:	0753      	lsls	r3, r2, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x26c>
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x26c>
 8000e52:	3204      	adds	r2, #4
 8000e54:	0153      	lsls	r3, r2, #5
 8000e56:	d510      	bpl.n	8000e7a <__aeabi_fmul+0x292>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	e792      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000e5e:	003d      	movs	r5, r7
 8000e60:	4646      	mov	r6, r8
 8000e62:	4682      	mov	sl, r0
 8000e64:	e767      	b.n	8000d36 <__aeabi_fmul+0x14e>
 8000e66:	23ff      	movs	r3, #255	@ 0xff
 8000e68:	2200      	movs	r2, #0
 8000e6a:	e78b      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000e6c:	2280      	movs	r2, #128	@ 0x80
 8000e6e:	2500      	movs	r5, #0
 8000e70:	03d2      	lsls	r2, r2, #15
 8000e72:	e786      	b.n	8000d82 <__aeabi_fmul+0x19a>
 8000e74:	003d      	movs	r5, r7
 8000e76:	431a      	orrs	r2, r3
 8000e78:	e783      	b.n	8000d82 <__aeabi_fmul+0x19a>
 8000e7a:	0192      	lsls	r2, r2, #6
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	0a52      	lsrs	r2, r2, #9
 8000e80:	e780      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000e82:	003d      	movs	r5, r7
 8000e84:	4646      	mov	r6, r8
 8000e86:	e777      	b.n	8000d78 <__aeabi_fmul+0x190>
 8000e88:	002a      	movs	r2, r5
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	407a      	eors	r2, r7
 8000e8e:	408b      	lsls	r3, r1
 8000e90:	2003      	movs	r0, #3
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	e6e9      	b.n	8000c6a <__aeabi_fmul+0x82>
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	f7ffffff 	.word	0xf7ffffff

08000e9c <__aeabi_fsub>:
 8000e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9e:	4647      	mov	r7, r8
 8000ea0:	46ce      	mov	lr, r9
 8000ea2:	0243      	lsls	r3, r0, #9
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	0a5f      	lsrs	r7, r3, #9
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	0045      	lsls	r5, r0, #1
 8000eac:	004a      	lsls	r2, r1, #1
 8000eae:	469c      	mov	ip, r3
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	0fc4      	lsrs	r4, r0, #31
 8000eb4:	0fce      	lsrs	r6, r1, #31
 8000eb6:	0e2d      	lsrs	r5, r5, #24
 8000eb8:	0a58      	lsrs	r0, r3, #9
 8000eba:	0e12      	lsrs	r2, r2, #24
 8000ebc:	0999      	lsrs	r1, r3, #6
 8000ebe:	2aff      	cmp	r2, #255	@ 0xff
 8000ec0:	d06b      	beq.n	8000f9a <__aeabi_fsub+0xfe>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	405e      	eors	r6, r3
 8000ec6:	1aab      	subs	r3, r5, r2
 8000ec8:	42b4      	cmp	r4, r6
 8000eca:	d04b      	beq.n	8000f64 <__aeabi_fsub+0xc8>
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	dc00      	bgt.n	8000ed2 <__aeabi_fsub+0x36>
 8000ed0:	e0ff      	b.n	80010d2 <__aeabi_fsub+0x236>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0x3c>
 8000ed6:	e088      	b.n	8000fea <__aeabi_fsub+0x14e>
 8000ed8:	2dff      	cmp	r5, #255	@ 0xff
 8000eda:	d100      	bne.n	8000ede <__aeabi_fsub+0x42>
 8000edc:	e0ef      	b.n	80010be <__aeabi_fsub+0x222>
 8000ede:	2280      	movs	r2, #128	@ 0x80
 8000ee0:	04d2      	lsls	r2, r2, #19
 8000ee2:	4311      	orrs	r1, r2
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	2b1b      	cmp	r3, #27
 8000ee8:	dc08      	bgt.n	8000efc <__aeabi_fsub+0x60>
 8000eea:	0008      	movs	r0, r1
 8000eec:	2220      	movs	r2, #32
 8000eee:	40d8      	lsrs	r0, r3
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	4099      	lsls	r1, r3
 8000ef4:	000b      	movs	r3, r1
 8000ef6:	1e5a      	subs	r2, r3, #1
 8000ef8:	4193      	sbcs	r3, r2
 8000efa:	4318      	orrs	r0, r3
 8000efc:	4663      	mov	r3, ip
 8000efe:	1a1b      	subs	r3, r3, r0
 8000f00:	469c      	mov	ip, r3
 8000f02:	4663      	mov	r3, ip
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	d400      	bmi.n	8000f0a <__aeabi_fsub+0x6e>
 8000f08:	e0cd      	b.n	80010a6 <__aeabi_fsub+0x20a>
 8000f0a:	4663      	mov	r3, ip
 8000f0c:	019f      	lsls	r7, r3, #6
 8000f0e:	09bf      	lsrs	r7, r7, #6
 8000f10:	0038      	movs	r0, r7
 8000f12:	f000 fe3d 	bl	8001b90 <__clzsi2>
 8000f16:	003b      	movs	r3, r7
 8000f18:	3805      	subs	r0, #5
 8000f1a:	4083      	lsls	r3, r0
 8000f1c:	4285      	cmp	r5, r0
 8000f1e:	dc00      	bgt.n	8000f22 <__aeabi_fsub+0x86>
 8000f20:	e0a2      	b.n	8001068 <__aeabi_fsub+0x1cc>
 8000f22:	4ab7      	ldr	r2, [pc, #732]	@ (8001200 <__aeabi_fsub+0x364>)
 8000f24:	1a2d      	subs	r5, r5, r0
 8000f26:	401a      	ands	r2, r3
 8000f28:	4694      	mov	ip, r2
 8000f2a:	075a      	lsls	r2, r3, #29
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x94>
 8000f2e:	e0c3      	b.n	80010b8 <__aeabi_fsub+0x21c>
 8000f30:	220f      	movs	r2, #15
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x9e>
 8000f38:	e0be      	b.n	80010b8 <__aeabi_fsub+0x21c>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	44c4      	add	ip, r8
 8000f40:	4663      	mov	r3, ip
 8000f42:	015b      	lsls	r3, r3, #5
 8000f44:	d400      	bmi.n	8000f48 <__aeabi_fsub+0xac>
 8000f46:	e0b7      	b.n	80010b8 <__aeabi_fsub+0x21c>
 8000f48:	1c68      	adds	r0, r5, #1
 8000f4a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f4c:	d000      	beq.n	8000f50 <__aeabi_fsub+0xb4>
 8000f4e:	e0a5      	b.n	800109c <__aeabi_fsub+0x200>
 8000f50:	20ff      	movs	r0, #255	@ 0xff
 8000f52:	2200      	movs	r2, #0
 8000f54:	05c0      	lsls	r0, r0, #23
 8000f56:	4310      	orrs	r0, r2
 8000f58:	07e4      	lsls	r4, r4, #31
 8000f5a:	4320      	orrs	r0, r4
 8000f5c:	bcc0      	pop	{r6, r7}
 8000f5e:	46b9      	mov	r9, r7
 8000f60:	46b0      	mov	r8, r6
 8000f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	dc00      	bgt.n	8000f6a <__aeabi_fsub+0xce>
 8000f68:	e1eb      	b.n	8001342 <__aeabi_fsub+0x4a6>
 8000f6a:	2a00      	cmp	r2, #0
 8000f6c:	d046      	beq.n	8000ffc <__aeabi_fsub+0x160>
 8000f6e:	2dff      	cmp	r5, #255	@ 0xff
 8000f70:	d100      	bne.n	8000f74 <__aeabi_fsub+0xd8>
 8000f72:	e0a4      	b.n	80010be <__aeabi_fsub+0x222>
 8000f74:	2280      	movs	r2, #128	@ 0x80
 8000f76:	04d2      	lsls	r2, r2, #19
 8000f78:	4311      	orrs	r1, r2
 8000f7a:	2b1b      	cmp	r3, #27
 8000f7c:	dc00      	bgt.n	8000f80 <__aeabi_fsub+0xe4>
 8000f7e:	e0fb      	b.n	8001178 <__aeabi_fsub+0x2dc>
 8000f80:	2305      	movs	r3, #5
 8000f82:	4698      	mov	r8, r3
 8000f84:	002b      	movs	r3, r5
 8000f86:	44c4      	add	ip, r8
 8000f88:	4662      	mov	r2, ip
 8000f8a:	08d7      	lsrs	r7, r2, #3
 8000f8c:	2bff      	cmp	r3, #255	@ 0xff
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fsub+0xf6>
 8000f90:	e095      	b.n	80010be <__aeabi_fsub+0x222>
 8000f92:	027a      	lsls	r2, r7, #9
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7dc      	b.n	8000f54 <__aeabi_fsub+0xb8>
 8000f9a:	002b      	movs	r3, r5
 8000f9c:	3bff      	subs	r3, #255	@ 0xff
 8000f9e:	4699      	mov	r9, r3
 8000fa0:	2900      	cmp	r1, #0
 8000fa2:	d118      	bne.n	8000fd6 <__aeabi_fsub+0x13a>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	405e      	eors	r6, r3
 8000fa8:	42b4      	cmp	r4, r6
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x112>
 8000fac:	e0ca      	b.n	8001144 <__aeabi_fsub+0x2a8>
 8000fae:	464b      	mov	r3, r9
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d02d      	beq.n	8001010 <__aeabi_fsub+0x174>
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	d000      	beq.n	8000fba <__aeabi_fsub+0x11e>
 8000fb8:	e13c      	b.n	8001234 <__aeabi_fsub+0x398>
 8000fba:	23ff      	movs	r3, #255	@ 0xff
 8000fbc:	4664      	mov	r4, ip
 8000fbe:	2c00      	cmp	r4, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x128>
 8000fc2:	e15f      	b.n	8001284 <__aeabi_fsub+0x3e8>
 8000fc4:	1e5d      	subs	r5, r3, #1
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_fsub+0x130>
 8000fca:	e174      	b.n	80012b6 <__aeabi_fsub+0x41a>
 8000fcc:	0034      	movs	r4, r6
 8000fce:	2bff      	cmp	r3, #255	@ 0xff
 8000fd0:	d074      	beq.n	80010bc <__aeabi_fsub+0x220>
 8000fd2:	002b      	movs	r3, r5
 8000fd4:	e103      	b.n	80011de <__aeabi_fsub+0x342>
 8000fd6:	42b4      	cmp	r4, r6
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_fsub+0x140>
 8000fda:	e09c      	b.n	8001116 <__aeabi_fsub+0x27a>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d017      	beq.n	8001010 <__aeabi_fsub+0x174>
 8000fe0:	2d00      	cmp	r5, #0
 8000fe2:	d0ea      	beq.n	8000fba <__aeabi_fsub+0x11e>
 8000fe4:	0007      	movs	r7, r0
 8000fe6:	0034      	movs	r4, r6
 8000fe8:	e06c      	b.n	80010c4 <__aeabi_fsub+0x228>
 8000fea:	2900      	cmp	r1, #0
 8000fec:	d0cc      	beq.n	8000f88 <__aeabi_fsub+0xec>
 8000fee:	1e5a      	subs	r2, r3, #1
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d02b      	beq.n	800104c <__aeabi_fsub+0x1b0>
 8000ff4:	2bff      	cmp	r3, #255	@ 0xff
 8000ff6:	d062      	beq.n	80010be <__aeabi_fsub+0x222>
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	e773      	b.n	8000ee4 <__aeabi_fsub+0x48>
 8000ffc:	2900      	cmp	r1, #0
 8000ffe:	d0c3      	beq.n	8000f88 <__aeabi_fsub+0xec>
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	2b01      	cmp	r3, #1
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x16c>
 8001006:	e11e      	b.n	8001246 <__aeabi_fsub+0x3aa>
 8001008:	2bff      	cmp	r3, #255	@ 0xff
 800100a:	d058      	beq.n	80010be <__aeabi_fsub+0x222>
 800100c:	0013      	movs	r3, r2
 800100e:	e7b4      	b.n	8000f7a <__aeabi_fsub+0xde>
 8001010:	22fe      	movs	r2, #254	@ 0xfe
 8001012:	1c6b      	adds	r3, r5, #1
 8001014:	421a      	tst	r2, r3
 8001016:	d10d      	bne.n	8001034 <__aeabi_fsub+0x198>
 8001018:	2d00      	cmp	r5, #0
 800101a:	d060      	beq.n	80010de <__aeabi_fsub+0x242>
 800101c:	4663      	mov	r3, ip
 800101e:	2b00      	cmp	r3, #0
 8001020:	d000      	beq.n	8001024 <__aeabi_fsub+0x188>
 8001022:	e120      	b.n	8001266 <__aeabi_fsub+0x3ca>
 8001024:	2900      	cmp	r1, #0
 8001026:	d000      	beq.n	800102a <__aeabi_fsub+0x18e>
 8001028:	e128      	b.n	800127c <__aeabi_fsub+0x3e0>
 800102a:	2280      	movs	r2, #128	@ 0x80
 800102c:	2400      	movs	r4, #0
 800102e:	20ff      	movs	r0, #255	@ 0xff
 8001030:	03d2      	lsls	r2, r2, #15
 8001032:	e78f      	b.n	8000f54 <__aeabi_fsub+0xb8>
 8001034:	4663      	mov	r3, ip
 8001036:	1a5f      	subs	r7, r3, r1
 8001038:	017b      	lsls	r3, r7, #5
 800103a:	d500      	bpl.n	800103e <__aeabi_fsub+0x1a2>
 800103c:	e0fe      	b.n	800123c <__aeabi_fsub+0x3a0>
 800103e:	2f00      	cmp	r7, #0
 8001040:	d000      	beq.n	8001044 <__aeabi_fsub+0x1a8>
 8001042:	e765      	b.n	8000f10 <__aeabi_fsub+0x74>
 8001044:	2400      	movs	r4, #0
 8001046:	2000      	movs	r0, #0
 8001048:	2200      	movs	r2, #0
 800104a:	e783      	b.n	8000f54 <__aeabi_fsub+0xb8>
 800104c:	4663      	mov	r3, ip
 800104e:	1a59      	subs	r1, r3, r1
 8001050:	014b      	lsls	r3, r1, #5
 8001052:	d400      	bmi.n	8001056 <__aeabi_fsub+0x1ba>
 8001054:	e119      	b.n	800128a <__aeabi_fsub+0x3ee>
 8001056:	018f      	lsls	r7, r1, #6
 8001058:	09bf      	lsrs	r7, r7, #6
 800105a:	0038      	movs	r0, r7
 800105c:	f000 fd98 	bl	8001b90 <__clzsi2>
 8001060:	003b      	movs	r3, r7
 8001062:	3805      	subs	r0, #5
 8001064:	4083      	lsls	r3, r0
 8001066:	2501      	movs	r5, #1
 8001068:	2220      	movs	r2, #32
 800106a:	1b40      	subs	r0, r0, r5
 800106c:	3001      	adds	r0, #1
 800106e:	1a12      	subs	r2, r2, r0
 8001070:	0019      	movs	r1, r3
 8001072:	4093      	lsls	r3, r2
 8001074:	40c1      	lsrs	r1, r0
 8001076:	1e5a      	subs	r2, r3, #1
 8001078:	4193      	sbcs	r3, r2
 800107a:	4319      	orrs	r1, r3
 800107c:	468c      	mov	ip, r1
 800107e:	1e0b      	subs	r3, r1, #0
 8001080:	d0e1      	beq.n	8001046 <__aeabi_fsub+0x1aa>
 8001082:	075b      	lsls	r3, r3, #29
 8001084:	d100      	bne.n	8001088 <__aeabi_fsub+0x1ec>
 8001086:	e152      	b.n	800132e <__aeabi_fsub+0x492>
 8001088:	230f      	movs	r3, #15
 800108a:	2500      	movs	r5, #0
 800108c:	400b      	ands	r3, r1
 800108e:	2b04      	cmp	r3, #4
 8001090:	d000      	beq.n	8001094 <__aeabi_fsub+0x1f8>
 8001092:	e752      	b.n	8000f3a <__aeabi_fsub+0x9e>
 8001094:	2001      	movs	r0, #1
 8001096:	014a      	lsls	r2, r1, #5
 8001098:	d400      	bmi.n	800109c <__aeabi_fsub+0x200>
 800109a:	e092      	b.n	80011c2 <__aeabi_fsub+0x326>
 800109c:	b2c0      	uxtb	r0, r0
 800109e:	4663      	mov	r3, ip
 80010a0:	019a      	lsls	r2, r3, #6
 80010a2:	0a52      	lsrs	r2, r2, #9
 80010a4:	e756      	b.n	8000f54 <__aeabi_fsub+0xb8>
 80010a6:	4663      	mov	r3, ip
 80010a8:	075b      	lsls	r3, r3, #29
 80010aa:	d005      	beq.n	80010b8 <__aeabi_fsub+0x21c>
 80010ac:	230f      	movs	r3, #15
 80010ae:	4662      	mov	r2, ip
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d000      	beq.n	80010b8 <__aeabi_fsub+0x21c>
 80010b6:	e740      	b.n	8000f3a <__aeabi_fsub+0x9e>
 80010b8:	002b      	movs	r3, r5
 80010ba:	e765      	b.n	8000f88 <__aeabi_fsub+0xec>
 80010bc:	0007      	movs	r7, r0
 80010be:	2f00      	cmp	r7, #0
 80010c0:	d100      	bne.n	80010c4 <__aeabi_fsub+0x228>
 80010c2:	e745      	b.n	8000f50 <__aeabi_fsub+0xb4>
 80010c4:	2280      	movs	r2, #128	@ 0x80
 80010c6:	03d2      	lsls	r2, r2, #15
 80010c8:	433a      	orrs	r2, r7
 80010ca:	0252      	lsls	r2, r2, #9
 80010cc:	20ff      	movs	r0, #255	@ 0xff
 80010ce:	0a52      	lsrs	r2, r2, #9
 80010d0:	e740      	b.n	8000f54 <__aeabi_fsub+0xb8>
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d179      	bne.n	80011ca <__aeabi_fsub+0x32e>
 80010d6:	22fe      	movs	r2, #254	@ 0xfe
 80010d8:	1c6b      	adds	r3, r5, #1
 80010da:	421a      	tst	r2, r3
 80010dc:	d1aa      	bne.n	8001034 <__aeabi_fsub+0x198>
 80010de:	4663      	mov	r3, ip
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_fsub+0x24a>
 80010e4:	e0f5      	b.n	80012d2 <__aeabi_fsub+0x436>
 80010e6:	2900      	cmp	r1, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x250>
 80010ea:	e0d1      	b.n	8001290 <__aeabi_fsub+0x3f4>
 80010ec:	1a5f      	subs	r7, r3, r1
 80010ee:	2380      	movs	r3, #128	@ 0x80
 80010f0:	04db      	lsls	r3, r3, #19
 80010f2:	421f      	tst	r7, r3
 80010f4:	d100      	bne.n	80010f8 <__aeabi_fsub+0x25c>
 80010f6:	e10e      	b.n	8001316 <__aeabi_fsub+0x47a>
 80010f8:	4662      	mov	r2, ip
 80010fa:	2401      	movs	r4, #1
 80010fc:	1a8a      	subs	r2, r1, r2
 80010fe:	4694      	mov	ip, r2
 8001100:	2000      	movs	r0, #0
 8001102:	4034      	ands	r4, r6
 8001104:	2a00      	cmp	r2, #0
 8001106:	d100      	bne.n	800110a <__aeabi_fsub+0x26e>
 8001108:	e724      	b.n	8000f54 <__aeabi_fsub+0xb8>
 800110a:	2001      	movs	r0, #1
 800110c:	421a      	tst	r2, r3
 800110e:	d1c6      	bne.n	800109e <__aeabi_fsub+0x202>
 8001110:	2300      	movs	r3, #0
 8001112:	08d7      	lsrs	r7, r2, #3
 8001114:	e73d      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001116:	2b00      	cmp	r3, #0
 8001118:	d017      	beq.n	800114a <__aeabi_fsub+0x2ae>
 800111a:	2d00      	cmp	r5, #0
 800111c:	d000      	beq.n	8001120 <__aeabi_fsub+0x284>
 800111e:	e0af      	b.n	8001280 <__aeabi_fsub+0x3e4>
 8001120:	23ff      	movs	r3, #255	@ 0xff
 8001122:	4665      	mov	r5, ip
 8001124:	2d00      	cmp	r5, #0
 8001126:	d100      	bne.n	800112a <__aeabi_fsub+0x28e>
 8001128:	e0ad      	b.n	8001286 <__aeabi_fsub+0x3ea>
 800112a:	1e5e      	subs	r6, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	d100      	bne.n	8001132 <__aeabi_fsub+0x296>
 8001130:	e089      	b.n	8001246 <__aeabi_fsub+0x3aa>
 8001132:	2bff      	cmp	r3, #255	@ 0xff
 8001134:	d0c2      	beq.n	80010bc <__aeabi_fsub+0x220>
 8001136:	2e1b      	cmp	r6, #27
 8001138:	dc00      	bgt.n	800113c <__aeabi_fsub+0x2a0>
 800113a:	e0ab      	b.n	8001294 <__aeabi_fsub+0x3f8>
 800113c:	1d4b      	adds	r3, r1, #5
 800113e:	469c      	mov	ip, r3
 8001140:	0013      	movs	r3, r2
 8001142:	e721      	b.n	8000f88 <__aeabi_fsub+0xec>
 8001144:	464b      	mov	r3, r9
 8001146:	2b00      	cmp	r3, #0
 8001148:	d170      	bne.n	800122c <__aeabi_fsub+0x390>
 800114a:	22fe      	movs	r2, #254	@ 0xfe
 800114c:	1c6b      	adds	r3, r5, #1
 800114e:	421a      	tst	r2, r3
 8001150:	d15e      	bne.n	8001210 <__aeabi_fsub+0x374>
 8001152:	2d00      	cmp	r5, #0
 8001154:	d000      	beq.n	8001158 <__aeabi_fsub+0x2bc>
 8001156:	e0c3      	b.n	80012e0 <__aeabi_fsub+0x444>
 8001158:	4663      	mov	r3, ip
 800115a:	2b00      	cmp	r3, #0
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x2c4>
 800115e:	e0d0      	b.n	8001302 <__aeabi_fsub+0x466>
 8001160:	2900      	cmp	r1, #0
 8001162:	d100      	bne.n	8001166 <__aeabi_fsub+0x2ca>
 8001164:	e094      	b.n	8001290 <__aeabi_fsub+0x3f4>
 8001166:	000a      	movs	r2, r1
 8001168:	4462      	add	r2, ip
 800116a:	0153      	lsls	r3, r2, #5
 800116c:	d400      	bmi.n	8001170 <__aeabi_fsub+0x2d4>
 800116e:	e0d8      	b.n	8001322 <__aeabi_fsub+0x486>
 8001170:	0192      	lsls	r2, r2, #6
 8001172:	2001      	movs	r0, #1
 8001174:	0a52      	lsrs	r2, r2, #9
 8001176:	e6ed      	b.n	8000f54 <__aeabi_fsub+0xb8>
 8001178:	0008      	movs	r0, r1
 800117a:	2220      	movs	r2, #32
 800117c:	40d8      	lsrs	r0, r3
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4099      	lsls	r1, r3
 8001182:	000b      	movs	r3, r1
 8001184:	1e5a      	subs	r2, r3, #1
 8001186:	4193      	sbcs	r3, r2
 8001188:	4303      	orrs	r3, r0
 800118a:	449c      	add	ip, r3
 800118c:	4663      	mov	r3, ip
 800118e:	015b      	lsls	r3, r3, #5
 8001190:	d589      	bpl.n	80010a6 <__aeabi_fsub+0x20a>
 8001192:	3501      	adds	r5, #1
 8001194:	2dff      	cmp	r5, #255	@ 0xff
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x2fe>
 8001198:	e6da      	b.n	8000f50 <__aeabi_fsub+0xb4>
 800119a:	4662      	mov	r2, ip
 800119c:	2301      	movs	r3, #1
 800119e:	4919      	ldr	r1, [pc, #100]	@ (8001204 <__aeabi_fsub+0x368>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	0852      	lsrs	r2, r2, #1
 80011a4:	400a      	ands	r2, r1
 80011a6:	431a      	orrs	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	4694      	mov	ip, r2
 80011ac:	075b      	lsls	r3, r3, #29
 80011ae:	d004      	beq.n	80011ba <__aeabi_fsub+0x31e>
 80011b0:	230f      	movs	r3, #15
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d000      	beq.n	80011ba <__aeabi_fsub+0x31e>
 80011b8:	e6bf      	b.n	8000f3a <__aeabi_fsub+0x9e>
 80011ba:	4663      	mov	r3, ip
 80011bc:	015b      	lsls	r3, r3, #5
 80011be:	d500      	bpl.n	80011c2 <__aeabi_fsub+0x326>
 80011c0:	e6c2      	b.n	8000f48 <__aeabi_fsub+0xac>
 80011c2:	4663      	mov	r3, ip
 80011c4:	08df      	lsrs	r7, r3, #3
 80011c6:	002b      	movs	r3, r5
 80011c8:	e6e3      	b.n	8000f92 <__aeabi_fsub+0xf6>
 80011ca:	1b53      	subs	r3, r2, r5
 80011cc:	2d00      	cmp	r5, #0
 80011ce:	d100      	bne.n	80011d2 <__aeabi_fsub+0x336>
 80011d0:	e6f4      	b.n	8000fbc <__aeabi_fsub+0x120>
 80011d2:	2080      	movs	r0, #128	@ 0x80
 80011d4:	4664      	mov	r4, ip
 80011d6:	04c0      	lsls	r0, r0, #19
 80011d8:	4304      	orrs	r4, r0
 80011da:	46a4      	mov	ip, r4
 80011dc:	0034      	movs	r4, r6
 80011de:	2001      	movs	r0, #1
 80011e0:	2b1b      	cmp	r3, #27
 80011e2:	dc09      	bgt.n	80011f8 <__aeabi_fsub+0x35c>
 80011e4:	2520      	movs	r5, #32
 80011e6:	4660      	mov	r0, ip
 80011e8:	40d8      	lsrs	r0, r3
 80011ea:	1aeb      	subs	r3, r5, r3
 80011ec:	4665      	mov	r5, ip
 80011ee:	409d      	lsls	r5, r3
 80011f0:	002b      	movs	r3, r5
 80011f2:	1e5d      	subs	r5, r3, #1
 80011f4:	41ab      	sbcs	r3, r5
 80011f6:	4318      	orrs	r0, r3
 80011f8:	1a0b      	subs	r3, r1, r0
 80011fa:	469c      	mov	ip, r3
 80011fc:	0015      	movs	r5, r2
 80011fe:	e680      	b.n	8000f02 <__aeabi_fsub+0x66>
 8001200:	fbffffff 	.word	0xfbffffff
 8001204:	7dffffff 	.word	0x7dffffff
 8001208:	22fe      	movs	r2, #254	@ 0xfe
 800120a:	1c6b      	adds	r3, r5, #1
 800120c:	4213      	tst	r3, r2
 800120e:	d0a3      	beq.n	8001158 <__aeabi_fsub+0x2bc>
 8001210:	2bff      	cmp	r3, #255	@ 0xff
 8001212:	d100      	bne.n	8001216 <__aeabi_fsub+0x37a>
 8001214:	e69c      	b.n	8000f50 <__aeabi_fsub+0xb4>
 8001216:	4461      	add	r1, ip
 8001218:	0849      	lsrs	r1, r1, #1
 800121a:	074a      	lsls	r2, r1, #29
 800121c:	d049      	beq.n	80012b2 <__aeabi_fsub+0x416>
 800121e:	220f      	movs	r2, #15
 8001220:	400a      	ands	r2, r1
 8001222:	2a04      	cmp	r2, #4
 8001224:	d045      	beq.n	80012b2 <__aeabi_fsub+0x416>
 8001226:	1d0a      	adds	r2, r1, #4
 8001228:	4694      	mov	ip, r2
 800122a:	e6ad      	b.n	8000f88 <__aeabi_fsub+0xec>
 800122c:	2d00      	cmp	r5, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_fsub+0x396>
 8001230:	e776      	b.n	8001120 <__aeabi_fsub+0x284>
 8001232:	e68d      	b.n	8000f50 <__aeabi_fsub+0xb4>
 8001234:	0034      	movs	r4, r6
 8001236:	20ff      	movs	r0, #255	@ 0xff
 8001238:	2200      	movs	r2, #0
 800123a:	e68b      	b.n	8000f54 <__aeabi_fsub+0xb8>
 800123c:	4663      	mov	r3, ip
 800123e:	2401      	movs	r4, #1
 8001240:	1acf      	subs	r7, r1, r3
 8001242:	4034      	ands	r4, r6
 8001244:	e664      	b.n	8000f10 <__aeabi_fsub+0x74>
 8001246:	4461      	add	r1, ip
 8001248:	014b      	lsls	r3, r1, #5
 800124a:	d56d      	bpl.n	8001328 <__aeabi_fsub+0x48c>
 800124c:	0848      	lsrs	r0, r1, #1
 800124e:	4944      	ldr	r1, [pc, #272]	@ (8001360 <__aeabi_fsub+0x4c4>)
 8001250:	4001      	ands	r1, r0
 8001252:	0743      	lsls	r3, r0, #29
 8001254:	d02c      	beq.n	80012b0 <__aeabi_fsub+0x414>
 8001256:	230f      	movs	r3, #15
 8001258:	4003      	ands	r3, r0
 800125a:	2b04      	cmp	r3, #4
 800125c:	d028      	beq.n	80012b0 <__aeabi_fsub+0x414>
 800125e:	1d0b      	adds	r3, r1, #4
 8001260:	469c      	mov	ip, r3
 8001262:	2302      	movs	r3, #2
 8001264:	e690      	b.n	8000f88 <__aeabi_fsub+0xec>
 8001266:	2900      	cmp	r1, #0
 8001268:	d100      	bne.n	800126c <__aeabi_fsub+0x3d0>
 800126a:	e72b      	b.n	80010c4 <__aeabi_fsub+0x228>
 800126c:	2380      	movs	r3, #128	@ 0x80
 800126e:	03db      	lsls	r3, r3, #15
 8001270:	429f      	cmp	r7, r3
 8001272:	d200      	bcs.n	8001276 <__aeabi_fsub+0x3da>
 8001274:	e726      	b.n	80010c4 <__aeabi_fsub+0x228>
 8001276:	4298      	cmp	r0, r3
 8001278:	d300      	bcc.n	800127c <__aeabi_fsub+0x3e0>
 800127a:	e723      	b.n	80010c4 <__aeabi_fsub+0x228>
 800127c:	2401      	movs	r4, #1
 800127e:	4034      	ands	r4, r6
 8001280:	0007      	movs	r7, r0
 8001282:	e71f      	b.n	80010c4 <__aeabi_fsub+0x228>
 8001284:	0034      	movs	r4, r6
 8001286:	468c      	mov	ip, r1
 8001288:	e67e      	b.n	8000f88 <__aeabi_fsub+0xec>
 800128a:	2301      	movs	r3, #1
 800128c:	08cf      	lsrs	r7, r1, #3
 800128e:	e680      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001290:	2300      	movs	r3, #0
 8001292:	e67e      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001294:	2020      	movs	r0, #32
 8001296:	4665      	mov	r5, ip
 8001298:	1b80      	subs	r0, r0, r6
 800129a:	4085      	lsls	r5, r0
 800129c:	4663      	mov	r3, ip
 800129e:	0028      	movs	r0, r5
 80012a0:	40f3      	lsrs	r3, r6
 80012a2:	1e45      	subs	r5, r0, #1
 80012a4:	41a8      	sbcs	r0, r5
 80012a6:	4303      	orrs	r3, r0
 80012a8:	469c      	mov	ip, r3
 80012aa:	0015      	movs	r5, r2
 80012ac:	448c      	add	ip, r1
 80012ae:	e76d      	b.n	800118c <__aeabi_fsub+0x2f0>
 80012b0:	2302      	movs	r3, #2
 80012b2:	08cf      	lsrs	r7, r1, #3
 80012b4:	e66d      	b.n	8000f92 <__aeabi_fsub+0xf6>
 80012b6:	1b0f      	subs	r7, r1, r4
 80012b8:	017b      	lsls	r3, r7, #5
 80012ba:	d528      	bpl.n	800130e <__aeabi_fsub+0x472>
 80012bc:	01bf      	lsls	r7, r7, #6
 80012be:	09bf      	lsrs	r7, r7, #6
 80012c0:	0038      	movs	r0, r7
 80012c2:	f000 fc65 	bl	8001b90 <__clzsi2>
 80012c6:	003b      	movs	r3, r7
 80012c8:	3805      	subs	r0, #5
 80012ca:	4083      	lsls	r3, r0
 80012cc:	0034      	movs	r4, r6
 80012ce:	2501      	movs	r5, #1
 80012d0:	e6ca      	b.n	8001068 <__aeabi_fsub+0x1cc>
 80012d2:	2900      	cmp	r1, #0
 80012d4:	d100      	bne.n	80012d8 <__aeabi_fsub+0x43c>
 80012d6:	e6b5      	b.n	8001044 <__aeabi_fsub+0x1a8>
 80012d8:	2401      	movs	r4, #1
 80012da:	0007      	movs	r7, r0
 80012dc:	4034      	ands	r4, r6
 80012de:	e658      	b.n	8000f92 <__aeabi_fsub+0xf6>
 80012e0:	4663      	mov	r3, ip
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d100      	bne.n	80012e8 <__aeabi_fsub+0x44c>
 80012e6:	e6e9      	b.n	80010bc <__aeabi_fsub+0x220>
 80012e8:	2900      	cmp	r1, #0
 80012ea:	d100      	bne.n	80012ee <__aeabi_fsub+0x452>
 80012ec:	e6ea      	b.n	80010c4 <__aeabi_fsub+0x228>
 80012ee:	2380      	movs	r3, #128	@ 0x80
 80012f0:	03db      	lsls	r3, r3, #15
 80012f2:	429f      	cmp	r7, r3
 80012f4:	d200      	bcs.n	80012f8 <__aeabi_fsub+0x45c>
 80012f6:	e6e5      	b.n	80010c4 <__aeabi_fsub+0x228>
 80012f8:	4298      	cmp	r0, r3
 80012fa:	d300      	bcc.n	80012fe <__aeabi_fsub+0x462>
 80012fc:	e6e2      	b.n	80010c4 <__aeabi_fsub+0x228>
 80012fe:	0007      	movs	r7, r0
 8001300:	e6e0      	b.n	80010c4 <__aeabi_fsub+0x228>
 8001302:	2900      	cmp	r1, #0
 8001304:	d100      	bne.n	8001308 <__aeabi_fsub+0x46c>
 8001306:	e69e      	b.n	8001046 <__aeabi_fsub+0x1aa>
 8001308:	2300      	movs	r3, #0
 800130a:	08cf      	lsrs	r7, r1, #3
 800130c:	e641      	b.n	8000f92 <__aeabi_fsub+0xf6>
 800130e:	0034      	movs	r4, r6
 8001310:	2301      	movs	r3, #1
 8001312:	08ff      	lsrs	r7, r7, #3
 8001314:	e63d      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001316:	2f00      	cmp	r7, #0
 8001318:	d100      	bne.n	800131c <__aeabi_fsub+0x480>
 800131a:	e693      	b.n	8001044 <__aeabi_fsub+0x1a8>
 800131c:	2300      	movs	r3, #0
 800131e:	08ff      	lsrs	r7, r7, #3
 8001320:	e637      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001322:	2300      	movs	r3, #0
 8001324:	08d7      	lsrs	r7, r2, #3
 8001326:	e634      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001328:	2301      	movs	r3, #1
 800132a:	08cf      	lsrs	r7, r1, #3
 800132c:	e631      	b.n	8000f92 <__aeabi_fsub+0xf6>
 800132e:	2280      	movs	r2, #128	@ 0x80
 8001330:	000b      	movs	r3, r1
 8001332:	04d2      	lsls	r2, r2, #19
 8001334:	2001      	movs	r0, #1
 8001336:	4013      	ands	r3, r2
 8001338:	4211      	tst	r1, r2
 800133a:	d000      	beq.n	800133e <__aeabi_fsub+0x4a2>
 800133c:	e6ae      	b.n	800109c <__aeabi_fsub+0x200>
 800133e:	08cf      	lsrs	r7, r1, #3
 8001340:	e627      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_fsub+0x4ac>
 8001346:	e75f      	b.n	8001208 <__aeabi_fsub+0x36c>
 8001348:	1b56      	subs	r6, r2, r5
 800134a:	2d00      	cmp	r5, #0
 800134c:	d101      	bne.n	8001352 <__aeabi_fsub+0x4b6>
 800134e:	0033      	movs	r3, r6
 8001350:	e6e7      	b.n	8001122 <__aeabi_fsub+0x286>
 8001352:	2380      	movs	r3, #128	@ 0x80
 8001354:	4660      	mov	r0, ip
 8001356:	04db      	lsls	r3, r3, #19
 8001358:	4318      	orrs	r0, r3
 800135a:	4684      	mov	ip, r0
 800135c:	e6eb      	b.n	8001136 <__aeabi_fsub+0x29a>
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	7dffffff 	.word	0x7dffffff

08001364 <__aeabi_fcmpun>:
 8001364:	0243      	lsls	r3, r0, #9
 8001366:	024a      	lsls	r2, r1, #9
 8001368:	0040      	lsls	r0, r0, #1
 800136a:	0049      	lsls	r1, r1, #1
 800136c:	0a5b      	lsrs	r3, r3, #9
 800136e:	0a52      	lsrs	r2, r2, #9
 8001370:	0e09      	lsrs	r1, r1, #24
 8001372:	0e00      	lsrs	r0, r0, #24
 8001374:	28ff      	cmp	r0, #255	@ 0xff
 8001376:	d006      	beq.n	8001386 <__aeabi_fcmpun+0x22>
 8001378:	2000      	movs	r0, #0
 800137a:	29ff      	cmp	r1, #255	@ 0xff
 800137c:	d102      	bne.n	8001384 <__aeabi_fcmpun+0x20>
 800137e:	1e53      	subs	r3, r2, #1
 8001380:	419a      	sbcs	r2, r3
 8001382:	0010      	movs	r0, r2
 8001384:	4770      	bx	lr
 8001386:	38fe      	subs	r0, #254	@ 0xfe
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1fb      	bne.n	8001384 <__aeabi_fcmpun+0x20>
 800138c:	e7f4      	b.n	8001378 <__aeabi_fcmpun+0x14>
 800138e:	46c0      	nop			@ (mov r8, r8)

08001390 <__aeabi_i2f>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	2800      	cmp	r0, #0
 8001394:	d012      	beq.n	80013bc <__aeabi_i2f+0x2c>
 8001396:	17c3      	asrs	r3, r0, #31
 8001398:	18c5      	adds	r5, r0, r3
 800139a:	405d      	eors	r5, r3
 800139c:	0fc4      	lsrs	r4, r0, #31
 800139e:	0028      	movs	r0, r5
 80013a0:	f000 fbf6 	bl	8001b90 <__clzsi2>
 80013a4:	239e      	movs	r3, #158	@ 0x9e
 80013a6:	1a1b      	subs	r3, r3, r0
 80013a8:	2b96      	cmp	r3, #150	@ 0x96
 80013aa:	dc0f      	bgt.n	80013cc <__aeabi_i2f+0x3c>
 80013ac:	2808      	cmp	r0, #8
 80013ae:	d038      	beq.n	8001422 <__aeabi_i2f+0x92>
 80013b0:	3808      	subs	r0, #8
 80013b2:	4085      	lsls	r5, r0
 80013b4:	026d      	lsls	r5, r5, #9
 80013b6:	0a6d      	lsrs	r5, r5, #9
 80013b8:	b2d8      	uxtb	r0, r3
 80013ba:	e002      	b.n	80013c2 <__aeabi_i2f+0x32>
 80013bc:	2400      	movs	r4, #0
 80013be:	2000      	movs	r0, #0
 80013c0:	2500      	movs	r5, #0
 80013c2:	05c0      	lsls	r0, r0, #23
 80013c4:	4328      	orrs	r0, r5
 80013c6:	07e4      	lsls	r4, r4, #31
 80013c8:	4320      	orrs	r0, r4
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
 80013cc:	2b99      	cmp	r3, #153	@ 0x99
 80013ce:	dc14      	bgt.n	80013fa <__aeabi_i2f+0x6a>
 80013d0:	1f42      	subs	r2, r0, #5
 80013d2:	4095      	lsls	r5, r2
 80013d4:	002a      	movs	r2, r5
 80013d6:	4915      	ldr	r1, [pc, #84]	@ (800142c <__aeabi_i2f+0x9c>)
 80013d8:	4011      	ands	r1, r2
 80013da:	0755      	lsls	r5, r2, #29
 80013dc:	d01c      	beq.n	8001418 <__aeabi_i2f+0x88>
 80013de:	250f      	movs	r5, #15
 80013e0:	402a      	ands	r2, r5
 80013e2:	2a04      	cmp	r2, #4
 80013e4:	d018      	beq.n	8001418 <__aeabi_i2f+0x88>
 80013e6:	3104      	adds	r1, #4
 80013e8:	08ca      	lsrs	r2, r1, #3
 80013ea:	0149      	lsls	r1, r1, #5
 80013ec:	d515      	bpl.n	800141a <__aeabi_i2f+0x8a>
 80013ee:	239f      	movs	r3, #159	@ 0x9f
 80013f0:	0252      	lsls	r2, r2, #9
 80013f2:	1a18      	subs	r0, r3, r0
 80013f4:	0a55      	lsrs	r5, r2, #9
 80013f6:	b2c0      	uxtb	r0, r0
 80013f8:	e7e3      	b.n	80013c2 <__aeabi_i2f+0x32>
 80013fa:	2205      	movs	r2, #5
 80013fc:	0029      	movs	r1, r5
 80013fe:	1a12      	subs	r2, r2, r0
 8001400:	40d1      	lsrs	r1, r2
 8001402:	0002      	movs	r2, r0
 8001404:	321b      	adds	r2, #27
 8001406:	4095      	lsls	r5, r2
 8001408:	002a      	movs	r2, r5
 800140a:	1e55      	subs	r5, r2, #1
 800140c:	41aa      	sbcs	r2, r5
 800140e:	430a      	orrs	r2, r1
 8001410:	4906      	ldr	r1, [pc, #24]	@ (800142c <__aeabi_i2f+0x9c>)
 8001412:	4011      	ands	r1, r2
 8001414:	0755      	lsls	r5, r2, #29
 8001416:	d1e2      	bne.n	80013de <__aeabi_i2f+0x4e>
 8001418:	08ca      	lsrs	r2, r1, #3
 800141a:	0252      	lsls	r2, r2, #9
 800141c:	0a55      	lsrs	r5, r2, #9
 800141e:	b2d8      	uxtb	r0, r3
 8001420:	e7cf      	b.n	80013c2 <__aeabi_i2f+0x32>
 8001422:	026d      	lsls	r5, r5, #9
 8001424:	0a6d      	lsrs	r5, r5, #9
 8001426:	308e      	adds	r0, #142	@ 0x8e
 8001428:	e7cb      	b.n	80013c2 <__aeabi_i2f+0x32>
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	fbffffff 	.word	0xfbffffff

08001430 <__aeabi_dmul>:
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	4657      	mov	r7, sl
 8001434:	464e      	mov	r6, r9
 8001436:	46de      	mov	lr, fp
 8001438:	4645      	mov	r5, r8
 800143a:	b5e0      	push	{r5, r6, r7, lr}
 800143c:	001f      	movs	r7, r3
 800143e:	030b      	lsls	r3, r1, #12
 8001440:	0b1b      	lsrs	r3, r3, #12
 8001442:	0016      	movs	r6, r2
 8001444:	469a      	mov	sl, r3
 8001446:	0fca      	lsrs	r2, r1, #31
 8001448:	004b      	lsls	r3, r1, #1
 800144a:	0004      	movs	r4, r0
 800144c:	4691      	mov	r9, r2
 800144e:	b085      	sub	sp, #20
 8001450:	0d5b      	lsrs	r3, r3, #21
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x26>
 8001454:	e1cf      	b.n	80017f6 <__aeabi_dmul+0x3c6>
 8001456:	4acd      	ldr	r2, [pc, #820]	@ (800178c <__aeabi_dmul+0x35c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d055      	beq.n	8001508 <__aeabi_dmul+0xd8>
 800145c:	4651      	mov	r1, sl
 800145e:	0f42      	lsrs	r2, r0, #29
 8001460:	00c9      	lsls	r1, r1, #3
 8001462:	430a      	orrs	r2, r1
 8001464:	2180      	movs	r1, #128	@ 0x80
 8001466:	0409      	lsls	r1, r1, #16
 8001468:	4311      	orrs	r1, r2
 800146a:	00c2      	lsls	r2, r0, #3
 800146c:	4690      	mov	r8, r2
 800146e:	4ac8      	ldr	r2, [pc, #800]	@ (8001790 <__aeabi_dmul+0x360>)
 8001470:	468a      	mov	sl, r1
 8001472:	4693      	mov	fp, r2
 8001474:	449b      	add	fp, r3
 8001476:	2300      	movs	r3, #0
 8001478:	2500      	movs	r5, #0
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	033c      	lsls	r4, r7, #12
 800147e:	007b      	lsls	r3, r7, #1
 8001480:	0ffa      	lsrs	r2, r7, #31
 8001482:	9601      	str	r6, [sp, #4]
 8001484:	0b24      	lsrs	r4, r4, #12
 8001486:	0d5b      	lsrs	r3, r3, #21
 8001488:	9200      	str	r2, [sp, #0]
 800148a:	d100      	bne.n	800148e <__aeabi_dmul+0x5e>
 800148c:	e188      	b.n	80017a0 <__aeabi_dmul+0x370>
 800148e:	4abf      	ldr	r2, [pc, #764]	@ (800178c <__aeabi_dmul+0x35c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d100      	bne.n	8001496 <__aeabi_dmul+0x66>
 8001494:	e092      	b.n	80015bc <__aeabi_dmul+0x18c>
 8001496:	4abe      	ldr	r2, [pc, #760]	@ (8001790 <__aeabi_dmul+0x360>)
 8001498:	4694      	mov	ip, r2
 800149a:	4463      	add	r3, ip
 800149c:	449b      	add	fp, r3
 800149e:	2d0a      	cmp	r5, #10
 80014a0:	dc42      	bgt.n	8001528 <__aeabi_dmul+0xf8>
 80014a2:	00e4      	lsls	r4, r4, #3
 80014a4:	0f73      	lsrs	r3, r6, #29
 80014a6:	4323      	orrs	r3, r4
 80014a8:	2480      	movs	r4, #128	@ 0x80
 80014aa:	4649      	mov	r1, r9
 80014ac:	0424      	lsls	r4, r4, #16
 80014ae:	431c      	orrs	r4, r3
 80014b0:	00f3      	lsls	r3, r6, #3
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	9b00      	ldr	r3, [sp, #0]
 80014b6:	2000      	movs	r0, #0
 80014b8:	4059      	eors	r1, r3
 80014ba:	b2cb      	uxtb	r3, r1
 80014bc:	9303      	str	r3, [sp, #12]
 80014be:	2d02      	cmp	r5, #2
 80014c0:	dc00      	bgt.n	80014c4 <__aeabi_dmul+0x94>
 80014c2:	e094      	b.n	80015ee <__aeabi_dmul+0x1be>
 80014c4:	2301      	movs	r3, #1
 80014c6:	40ab      	lsls	r3, r5
 80014c8:	001d      	movs	r5, r3
 80014ca:	23a6      	movs	r3, #166	@ 0xa6
 80014cc:	002a      	movs	r2, r5
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	401a      	ands	r2, r3
 80014d2:	421d      	tst	r5, r3
 80014d4:	d000      	beq.n	80014d8 <__aeabi_dmul+0xa8>
 80014d6:	e229      	b.n	800192c <__aeabi_dmul+0x4fc>
 80014d8:	2390      	movs	r3, #144	@ 0x90
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	421d      	tst	r5, r3
 80014de:	d100      	bne.n	80014e2 <__aeabi_dmul+0xb2>
 80014e0:	e24d      	b.n	800197e <__aeabi_dmul+0x54e>
 80014e2:	2300      	movs	r3, #0
 80014e4:	2480      	movs	r4, #128	@ 0x80
 80014e6:	4699      	mov	r9, r3
 80014e8:	0324      	lsls	r4, r4, #12
 80014ea:	4ba8      	ldr	r3, [pc, #672]	@ (800178c <__aeabi_dmul+0x35c>)
 80014ec:	0010      	movs	r0, r2
 80014ee:	464a      	mov	r2, r9
 80014f0:	051b      	lsls	r3, r3, #20
 80014f2:	4323      	orrs	r3, r4
 80014f4:	07d2      	lsls	r2, r2, #31
 80014f6:	4313      	orrs	r3, r2
 80014f8:	0019      	movs	r1, r3
 80014fa:	b005      	add	sp, #20
 80014fc:	bcf0      	pop	{r4, r5, r6, r7}
 80014fe:	46bb      	mov	fp, r7
 8001500:	46b2      	mov	sl, r6
 8001502:	46a9      	mov	r9, r5
 8001504:	46a0      	mov	r8, r4
 8001506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001508:	4652      	mov	r2, sl
 800150a:	4302      	orrs	r2, r0
 800150c:	4690      	mov	r8, r2
 800150e:	d000      	beq.n	8001512 <__aeabi_dmul+0xe2>
 8001510:	e1ac      	b.n	800186c <__aeabi_dmul+0x43c>
 8001512:	469b      	mov	fp, r3
 8001514:	2302      	movs	r3, #2
 8001516:	4692      	mov	sl, r2
 8001518:	2508      	movs	r5, #8
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	e7ae      	b.n	800147c <__aeabi_dmul+0x4c>
 800151e:	9b00      	ldr	r3, [sp, #0]
 8001520:	46a2      	mov	sl, r4
 8001522:	4699      	mov	r9, r3
 8001524:	9b01      	ldr	r3, [sp, #4]
 8001526:	4698      	mov	r8, r3
 8001528:	9b02      	ldr	r3, [sp, #8]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d100      	bne.n	8001530 <__aeabi_dmul+0x100>
 800152e:	e1ca      	b.n	80018c6 <__aeabi_dmul+0x496>
 8001530:	2b03      	cmp	r3, #3
 8001532:	d100      	bne.n	8001536 <__aeabi_dmul+0x106>
 8001534:	e192      	b.n	800185c <__aeabi_dmul+0x42c>
 8001536:	2b01      	cmp	r3, #1
 8001538:	d110      	bne.n	800155c <__aeabi_dmul+0x12c>
 800153a:	2300      	movs	r3, #0
 800153c:	2400      	movs	r4, #0
 800153e:	2200      	movs	r2, #0
 8001540:	e7d4      	b.n	80014ec <__aeabi_dmul+0xbc>
 8001542:	2201      	movs	r2, #1
 8001544:	087b      	lsrs	r3, r7, #1
 8001546:	403a      	ands	r2, r7
 8001548:	4313      	orrs	r3, r2
 800154a:	4652      	mov	r2, sl
 800154c:	07d2      	lsls	r2, r2, #31
 800154e:	4313      	orrs	r3, r2
 8001550:	4698      	mov	r8, r3
 8001552:	4653      	mov	r3, sl
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	469a      	mov	sl, r3
 8001558:	9b03      	ldr	r3, [sp, #12]
 800155a:	4699      	mov	r9, r3
 800155c:	465b      	mov	r3, fp
 800155e:	1c58      	adds	r0, r3, #1
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	445b      	add	r3, fp
 8001566:	2b00      	cmp	r3, #0
 8001568:	dc00      	bgt.n	800156c <__aeabi_dmul+0x13c>
 800156a:	e1b1      	b.n	80018d0 <__aeabi_dmul+0x4a0>
 800156c:	4642      	mov	r2, r8
 800156e:	0752      	lsls	r2, r2, #29
 8001570:	d00b      	beq.n	800158a <__aeabi_dmul+0x15a>
 8001572:	220f      	movs	r2, #15
 8001574:	4641      	mov	r1, r8
 8001576:	400a      	ands	r2, r1
 8001578:	2a04      	cmp	r2, #4
 800157a:	d006      	beq.n	800158a <__aeabi_dmul+0x15a>
 800157c:	4642      	mov	r2, r8
 800157e:	1d11      	adds	r1, r2, #4
 8001580:	4541      	cmp	r1, r8
 8001582:	4192      	sbcs	r2, r2
 8001584:	4688      	mov	r8, r1
 8001586:	4252      	negs	r2, r2
 8001588:	4492      	add	sl, r2
 800158a:	4652      	mov	r2, sl
 800158c:	01d2      	lsls	r2, r2, #7
 800158e:	d506      	bpl.n	800159e <__aeabi_dmul+0x16e>
 8001590:	4652      	mov	r2, sl
 8001592:	4b80      	ldr	r3, [pc, #512]	@ (8001794 <__aeabi_dmul+0x364>)
 8001594:	401a      	ands	r2, r3
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	4692      	mov	sl, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	18c3      	adds	r3, r0, r3
 800159e:	4a7e      	ldr	r2, [pc, #504]	@ (8001798 <__aeabi_dmul+0x368>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	dd00      	ble.n	80015a6 <__aeabi_dmul+0x176>
 80015a4:	e18f      	b.n	80018c6 <__aeabi_dmul+0x496>
 80015a6:	4642      	mov	r2, r8
 80015a8:	08d1      	lsrs	r1, r2, #3
 80015aa:	4652      	mov	r2, sl
 80015ac:	0752      	lsls	r2, r2, #29
 80015ae:	430a      	orrs	r2, r1
 80015b0:	4651      	mov	r1, sl
 80015b2:	055b      	lsls	r3, r3, #21
 80015b4:	024c      	lsls	r4, r1, #9
 80015b6:	0b24      	lsrs	r4, r4, #12
 80015b8:	0d5b      	lsrs	r3, r3, #21
 80015ba:	e797      	b.n	80014ec <__aeabi_dmul+0xbc>
 80015bc:	4b73      	ldr	r3, [pc, #460]	@ (800178c <__aeabi_dmul+0x35c>)
 80015be:	4326      	orrs	r6, r4
 80015c0:	469c      	mov	ip, r3
 80015c2:	44e3      	add	fp, ip
 80015c4:	2e00      	cmp	r6, #0
 80015c6:	d100      	bne.n	80015ca <__aeabi_dmul+0x19a>
 80015c8:	e16f      	b.n	80018aa <__aeabi_dmul+0x47a>
 80015ca:	2303      	movs	r3, #3
 80015cc:	4649      	mov	r1, r9
 80015ce:	431d      	orrs	r5, r3
 80015d0:	9b00      	ldr	r3, [sp, #0]
 80015d2:	4059      	eors	r1, r3
 80015d4:	b2cb      	uxtb	r3, r1
 80015d6:	9303      	str	r3, [sp, #12]
 80015d8:	2d0a      	cmp	r5, #10
 80015da:	dd00      	ble.n	80015de <__aeabi_dmul+0x1ae>
 80015dc:	e133      	b.n	8001846 <__aeabi_dmul+0x416>
 80015de:	2301      	movs	r3, #1
 80015e0:	40ab      	lsls	r3, r5
 80015e2:	001d      	movs	r5, r3
 80015e4:	2303      	movs	r3, #3
 80015e6:	9302      	str	r3, [sp, #8]
 80015e8:	2288      	movs	r2, #136	@ 0x88
 80015ea:	422a      	tst	r2, r5
 80015ec:	d197      	bne.n	800151e <__aeabi_dmul+0xee>
 80015ee:	4642      	mov	r2, r8
 80015f0:	4643      	mov	r3, r8
 80015f2:	0412      	lsls	r2, r2, #16
 80015f4:	0c12      	lsrs	r2, r2, #16
 80015f6:	0016      	movs	r6, r2
 80015f8:	9801      	ldr	r0, [sp, #4]
 80015fa:	0c1d      	lsrs	r5, r3, #16
 80015fc:	0c03      	lsrs	r3, r0, #16
 80015fe:	0400      	lsls	r0, r0, #16
 8001600:	0c00      	lsrs	r0, r0, #16
 8001602:	4346      	muls	r6, r0
 8001604:	46b4      	mov	ip, r6
 8001606:	001e      	movs	r6, r3
 8001608:	436e      	muls	r6, r5
 800160a:	9600      	str	r6, [sp, #0]
 800160c:	0016      	movs	r6, r2
 800160e:	0007      	movs	r7, r0
 8001610:	435e      	muls	r6, r3
 8001612:	4661      	mov	r1, ip
 8001614:	46b0      	mov	r8, r6
 8001616:	436f      	muls	r7, r5
 8001618:	0c0e      	lsrs	r6, r1, #16
 800161a:	44b8      	add	r8, r7
 800161c:	4446      	add	r6, r8
 800161e:	42b7      	cmp	r7, r6
 8001620:	d905      	bls.n	800162e <__aeabi_dmul+0x1fe>
 8001622:	2180      	movs	r1, #128	@ 0x80
 8001624:	0249      	lsls	r1, r1, #9
 8001626:	4688      	mov	r8, r1
 8001628:	9f00      	ldr	r7, [sp, #0]
 800162a:	4447      	add	r7, r8
 800162c:	9700      	str	r7, [sp, #0]
 800162e:	4661      	mov	r1, ip
 8001630:	0409      	lsls	r1, r1, #16
 8001632:	0c09      	lsrs	r1, r1, #16
 8001634:	0c37      	lsrs	r7, r6, #16
 8001636:	0436      	lsls	r6, r6, #16
 8001638:	468c      	mov	ip, r1
 800163a:	0031      	movs	r1, r6
 800163c:	4461      	add	r1, ip
 800163e:	9101      	str	r1, [sp, #4]
 8001640:	0011      	movs	r1, r2
 8001642:	0c26      	lsrs	r6, r4, #16
 8001644:	0424      	lsls	r4, r4, #16
 8001646:	0c24      	lsrs	r4, r4, #16
 8001648:	4361      	muls	r1, r4
 800164a:	468c      	mov	ip, r1
 800164c:	0021      	movs	r1, r4
 800164e:	4369      	muls	r1, r5
 8001650:	4689      	mov	r9, r1
 8001652:	4661      	mov	r1, ip
 8001654:	0c09      	lsrs	r1, r1, #16
 8001656:	4688      	mov	r8, r1
 8001658:	4372      	muls	r2, r6
 800165a:	444a      	add	r2, r9
 800165c:	4442      	add	r2, r8
 800165e:	4375      	muls	r5, r6
 8001660:	4591      	cmp	r9, r2
 8001662:	d903      	bls.n	800166c <__aeabi_dmul+0x23c>
 8001664:	2180      	movs	r1, #128	@ 0x80
 8001666:	0249      	lsls	r1, r1, #9
 8001668:	4688      	mov	r8, r1
 800166a:	4445      	add	r5, r8
 800166c:	0c11      	lsrs	r1, r2, #16
 800166e:	4688      	mov	r8, r1
 8001670:	4661      	mov	r1, ip
 8001672:	0409      	lsls	r1, r1, #16
 8001674:	0c09      	lsrs	r1, r1, #16
 8001676:	468c      	mov	ip, r1
 8001678:	0412      	lsls	r2, r2, #16
 800167a:	4462      	add	r2, ip
 800167c:	18b9      	adds	r1, r7, r2
 800167e:	9102      	str	r1, [sp, #8]
 8001680:	4651      	mov	r1, sl
 8001682:	0c09      	lsrs	r1, r1, #16
 8001684:	468c      	mov	ip, r1
 8001686:	4651      	mov	r1, sl
 8001688:	040f      	lsls	r7, r1, #16
 800168a:	0c3f      	lsrs	r7, r7, #16
 800168c:	0039      	movs	r1, r7
 800168e:	4341      	muls	r1, r0
 8001690:	4445      	add	r5, r8
 8001692:	4688      	mov	r8, r1
 8001694:	4661      	mov	r1, ip
 8001696:	4341      	muls	r1, r0
 8001698:	468a      	mov	sl, r1
 800169a:	4641      	mov	r1, r8
 800169c:	4660      	mov	r0, ip
 800169e:	0c09      	lsrs	r1, r1, #16
 80016a0:	4689      	mov	r9, r1
 80016a2:	4358      	muls	r0, r3
 80016a4:	437b      	muls	r3, r7
 80016a6:	4453      	add	r3, sl
 80016a8:	444b      	add	r3, r9
 80016aa:	459a      	cmp	sl, r3
 80016ac:	d903      	bls.n	80016b6 <__aeabi_dmul+0x286>
 80016ae:	2180      	movs	r1, #128	@ 0x80
 80016b0:	0249      	lsls	r1, r1, #9
 80016b2:	4689      	mov	r9, r1
 80016b4:	4448      	add	r0, r9
 80016b6:	0c19      	lsrs	r1, r3, #16
 80016b8:	4689      	mov	r9, r1
 80016ba:	4641      	mov	r1, r8
 80016bc:	0409      	lsls	r1, r1, #16
 80016be:	0c09      	lsrs	r1, r1, #16
 80016c0:	4688      	mov	r8, r1
 80016c2:	0039      	movs	r1, r7
 80016c4:	4361      	muls	r1, r4
 80016c6:	041b      	lsls	r3, r3, #16
 80016c8:	4443      	add	r3, r8
 80016ca:	4688      	mov	r8, r1
 80016cc:	4661      	mov	r1, ip
 80016ce:	434c      	muls	r4, r1
 80016d0:	4371      	muls	r1, r6
 80016d2:	468c      	mov	ip, r1
 80016d4:	4641      	mov	r1, r8
 80016d6:	4377      	muls	r7, r6
 80016d8:	0c0e      	lsrs	r6, r1, #16
 80016da:	193f      	adds	r7, r7, r4
 80016dc:	19f6      	adds	r6, r6, r7
 80016de:	4448      	add	r0, r9
 80016e0:	42b4      	cmp	r4, r6
 80016e2:	d903      	bls.n	80016ec <__aeabi_dmul+0x2bc>
 80016e4:	2180      	movs	r1, #128	@ 0x80
 80016e6:	0249      	lsls	r1, r1, #9
 80016e8:	4689      	mov	r9, r1
 80016ea:	44cc      	add	ip, r9
 80016ec:	9902      	ldr	r1, [sp, #8]
 80016ee:	9f00      	ldr	r7, [sp, #0]
 80016f0:	4689      	mov	r9, r1
 80016f2:	0431      	lsls	r1, r6, #16
 80016f4:	444f      	add	r7, r9
 80016f6:	4689      	mov	r9, r1
 80016f8:	4641      	mov	r1, r8
 80016fa:	4297      	cmp	r7, r2
 80016fc:	4192      	sbcs	r2, r2
 80016fe:	040c      	lsls	r4, r1, #16
 8001700:	0c24      	lsrs	r4, r4, #16
 8001702:	444c      	add	r4, r9
 8001704:	18ff      	adds	r7, r7, r3
 8001706:	4252      	negs	r2, r2
 8001708:	1964      	adds	r4, r4, r5
 800170a:	18a1      	adds	r1, r4, r2
 800170c:	429f      	cmp	r7, r3
 800170e:	419b      	sbcs	r3, r3
 8001710:	4688      	mov	r8, r1
 8001712:	4682      	mov	sl, r0
 8001714:	425b      	negs	r3, r3
 8001716:	4699      	mov	r9, r3
 8001718:	4590      	cmp	r8, r2
 800171a:	4192      	sbcs	r2, r2
 800171c:	42ac      	cmp	r4, r5
 800171e:	41a4      	sbcs	r4, r4
 8001720:	44c2      	add	sl, r8
 8001722:	44d1      	add	r9, sl
 8001724:	4252      	negs	r2, r2
 8001726:	4264      	negs	r4, r4
 8001728:	4314      	orrs	r4, r2
 800172a:	4599      	cmp	r9, r3
 800172c:	419b      	sbcs	r3, r3
 800172e:	4582      	cmp	sl, r0
 8001730:	4192      	sbcs	r2, r2
 8001732:	425b      	negs	r3, r3
 8001734:	4252      	negs	r2, r2
 8001736:	4313      	orrs	r3, r2
 8001738:	464a      	mov	r2, r9
 800173a:	0c36      	lsrs	r6, r6, #16
 800173c:	19a4      	adds	r4, r4, r6
 800173e:	18e3      	adds	r3, r4, r3
 8001740:	4463      	add	r3, ip
 8001742:	025b      	lsls	r3, r3, #9
 8001744:	0dd2      	lsrs	r2, r2, #23
 8001746:	431a      	orrs	r2, r3
 8001748:	9901      	ldr	r1, [sp, #4]
 800174a:	4692      	mov	sl, r2
 800174c:	027a      	lsls	r2, r7, #9
 800174e:	430a      	orrs	r2, r1
 8001750:	1e50      	subs	r0, r2, #1
 8001752:	4182      	sbcs	r2, r0
 8001754:	0dff      	lsrs	r7, r7, #23
 8001756:	4317      	orrs	r7, r2
 8001758:	464a      	mov	r2, r9
 800175a:	0252      	lsls	r2, r2, #9
 800175c:	4317      	orrs	r7, r2
 800175e:	46b8      	mov	r8, r7
 8001760:	01db      	lsls	r3, r3, #7
 8001762:	d500      	bpl.n	8001766 <__aeabi_dmul+0x336>
 8001764:	e6ed      	b.n	8001542 <__aeabi_dmul+0x112>
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <__aeabi_dmul+0x36c>)
 8001768:	9a03      	ldr	r2, [sp, #12]
 800176a:	445b      	add	r3, fp
 800176c:	4691      	mov	r9, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	dc00      	bgt.n	8001774 <__aeabi_dmul+0x344>
 8001772:	e0ac      	b.n	80018ce <__aeabi_dmul+0x49e>
 8001774:	003a      	movs	r2, r7
 8001776:	0752      	lsls	r2, r2, #29
 8001778:	d100      	bne.n	800177c <__aeabi_dmul+0x34c>
 800177a:	e710      	b.n	800159e <__aeabi_dmul+0x16e>
 800177c:	220f      	movs	r2, #15
 800177e:	4658      	mov	r0, fp
 8001780:	403a      	ands	r2, r7
 8001782:	2a04      	cmp	r2, #4
 8001784:	d000      	beq.n	8001788 <__aeabi_dmul+0x358>
 8001786:	e6f9      	b.n	800157c <__aeabi_dmul+0x14c>
 8001788:	e709      	b.n	800159e <__aeabi_dmul+0x16e>
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	000007ff 	.word	0x000007ff
 8001790:	fffffc01 	.word	0xfffffc01
 8001794:	feffffff 	.word	0xfeffffff
 8001798:	000007fe 	.word	0x000007fe
 800179c:	000003ff 	.word	0x000003ff
 80017a0:	0022      	movs	r2, r4
 80017a2:	4332      	orrs	r2, r6
 80017a4:	d06f      	beq.n	8001886 <__aeabi_dmul+0x456>
 80017a6:	2c00      	cmp	r4, #0
 80017a8:	d100      	bne.n	80017ac <__aeabi_dmul+0x37c>
 80017aa:	e0c2      	b.n	8001932 <__aeabi_dmul+0x502>
 80017ac:	0020      	movs	r0, r4
 80017ae:	f000 f9ef 	bl	8001b90 <__clzsi2>
 80017b2:	0002      	movs	r2, r0
 80017b4:	0003      	movs	r3, r0
 80017b6:	3a0b      	subs	r2, #11
 80017b8:	201d      	movs	r0, #29
 80017ba:	1a82      	subs	r2, r0, r2
 80017bc:	0030      	movs	r0, r6
 80017be:	0019      	movs	r1, r3
 80017c0:	40d0      	lsrs	r0, r2
 80017c2:	3908      	subs	r1, #8
 80017c4:	408c      	lsls	r4, r1
 80017c6:	0002      	movs	r2, r0
 80017c8:	4322      	orrs	r2, r4
 80017ca:	0034      	movs	r4, r6
 80017cc:	408c      	lsls	r4, r1
 80017ce:	4659      	mov	r1, fp
 80017d0:	1acb      	subs	r3, r1, r3
 80017d2:	4986      	ldr	r1, [pc, #536]	@ (80019ec <__aeabi_dmul+0x5bc>)
 80017d4:	468b      	mov	fp, r1
 80017d6:	449b      	add	fp, r3
 80017d8:	2d0a      	cmp	r5, #10
 80017da:	dd00      	ble.n	80017de <__aeabi_dmul+0x3ae>
 80017dc:	e6a4      	b.n	8001528 <__aeabi_dmul+0xf8>
 80017de:	4649      	mov	r1, r9
 80017e0:	9b00      	ldr	r3, [sp, #0]
 80017e2:	9401      	str	r4, [sp, #4]
 80017e4:	4059      	eors	r1, r3
 80017e6:	b2cb      	uxtb	r3, r1
 80017e8:	0014      	movs	r4, r2
 80017ea:	2000      	movs	r0, #0
 80017ec:	9303      	str	r3, [sp, #12]
 80017ee:	2d02      	cmp	r5, #2
 80017f0:	dd00      	ble.n	80017f4 <__aeabi_dmul+0x3c4>
 80017f2:	e667      	b.n	80014c4 <__aeabi_dmul+0x94>
 80017f4:	e6fb      	b.n	80015ee <__aeabi_dmul+0x1be>
 80017f6:	4653      	mov	r3, sl
 80017f8:	4303      	orrs	r3, r0
 80017fa:	4698      	mov	r8, r3
 80017fc:	d03c      	beq.n	8001878 <__aeabi_dmul+0x448>
 80017fe:	4653      	mov	r3, sl
 8001800:	2b00      	cmp	r3, #0
 8001802:	d100      	bne.n	8001806 <__aeabi_dmul+0x3d6>
 8001804:	e0a3      	b.n	800194e <__aeabi_dmul+0x51e>
 8001806:	4650      	mov	r0, sl
 8001808:	f000 f9c2 	bl	8001b90 <__clzsi2>
 800180c:	230b      	movs	r3, #11
 800180e:	425b      	negs	r3, r3
 8001810:	469c      	mov	ip, r3
 8001812:	0002      	movs	r2, r0
 8001814:	4484      	add	ip, r0
 8001816:	0011      	movs	r1, r2
 8001818:	4650      	mov	r0, sl
 800181a:	3908      	subs	r1, #8
 800181c:	4088      	lsls	r0, r1
 800181e:	231d      	movs	r3, #29
 8001820:	4680      	mov	r8, r0
 8001822:	4660      	mov	r0, ip
 8001824:	1a1b      	subs	r3, r3, r0
 8001826:	0020      	movs	r0, r4
 8001828:	40d8      	lsrs	r0, r3
 800182a:	0003      	movs	r3, r0
 800182c:	4640      	mov	r0, r8
 800182e:	4303      	orrs	r3, r0
 8001830:	469a      	mov	sl, r3
 8001832:	0023      	movs	r3, r4
 8001834:	408b      	lsls	r3, r1
 8001836:	4698      	mov	r8, r3
 8001838:	4b6c      	ldr	r3, [pc, #432]	@ (80019ec <__aeabi_dmul+0x5bc>)
 800183a:	2500      	movs	r5, #0
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	469b      	mov	fp, r3
 8001840:	2300      	movs	r3, #0
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	e61a      	b.n	800147c <__aeabi_dmul+0x4c>
 8001846:	2d0f      	cmp	r5, #15
 8001848:	d000      	beq.n	800184c <__aeabi_dmul+0x41c>
 800184a:	e0c9      	b.n	80019e0 <__aeabi_dmul+0x5b0>
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	4652      	mov	r2, sl
 8001850:	031b      	lsls	r3, r3, #12
 8001852:	421a      	tst	r2, r3
 8001854:	d002      	beq.n	800185c <__aeabi_dmul+0x42c>
 8001856:	421c      	tst	r4, r3
 8001858:	d100      	bne.n	800185c <__aeabi_dmul+0x42c>
 800185a:	e092      	b.n	8001982 <__aeabi_dmul+0x552>
 800185c:	2480      	movs	r4, #128	@ 0x80
 800185e:	4653      	mov	r3, sl
 8001860:	0324      	lsls	r4, r4, #12
 8001862:	431c      	orrs	r4, r3
 8001864:	0324      	lsls	r4, r4, #12
 8001866:	4642      	mov	r2, r8
 8001868:	0b24      	lsrs	r4, r4, #12
 800186a:	e63e      	b.n	80014ea <__aeabi_dmul+0xba>
 800186c:	469b      	mov	fp, r3
 800186e:	2303      	movs	r3, #3
 8001870:	4680      	mov	r8, r0
 8001872:	250c      	movs	r5, #12
 8001874:	9302      	str	r3, [sp, #8]
 8001876:	e601      	b.n	800147c <__aeabi_dmul+0x4c>
 8001878:	2300      	movs	r3, #0
 800187a:	469a      	mov	sl, r3
 800187c:	469b      	mov	fp, r3
 800187e:	3301      	adds	r3, #1
 8001880:	2504      	movs	r5, #4
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	e5fa      	b.n	800147c <__aeabi_dmul+0x4c>
 8001886:	2101      	movs	r1, #1
 8001888:	430d      	orrs	r5, r1
 800188a:	2d0a      	cmp	r5, #10
 800188c:	dd00      	ble.n	8001890 <__aeabi_dmul+0x460>
 800188e:	e64b      	b.n	8001528 <__aeabi_dmul+0xf8>
 8001890:	4649      	mov	r1, r9
 8001892:	9800      	ldr	r0, [sp, #0]
 8001894:	4041      	eors	r1, r0
 8001896:	b2c9      	uxtb	r1, r1
 8001898:	9103      	str	r1, [sp, #12]
 800189a:	2d02      	cmp	r5, #2
 800189c:	dc00      	bgt.n	80018a0 <__aeabi_dmul+0x470>
 800189e:	e096      	b.n	80019ce <__aeabi_dmul+0x59e>
 80018a0:	2300      	movs	r3, #0
 80018a2:	2400      	movs	r4, #0
 80018a4:	2001      	movs	r0, #1
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	e60c      	b.n	80014c4 <__aeabi_dmul+0x94>
 80018aa:	4649      	mov	r1, r9
 80018ac:	2302      	movs	r3, #2
 80018ae:	9a00      	ldr	r2, [sp, #0]
 80018b0:	432b      	orrs	r3, r5
 80018b2:	4051      	eors	r1, r2
 80018b4:	b2ca      	uxtb	r2, r1
 80018b6:	9203      	str	r2, [sp, #12]
 80018b8:	2b0a      	cmp	r3, #10
 80018ba:	dd00      	ble.n	80018be <__aeabi_dmul+0x48e>
 80018bc:	e634      	b.n	8001528 <__aeabi_dmul+0xf8>
 80018be:	2d00      	cmp	r5, #0
 80018c0:	d157      	bne.n	8001972 <__aeabi_dmul+0x542>
 80018c2:	9b03      	ldr	r3, [sp, #12]
 80018c4:	4699      	mov	r9, r3
 80018c6:	2400      	movs	r4, #0
 80018c8:	2200      	movs	r2, #0
 80018ca:	4b49      	ldr	r3, [pc, #292]	@ (80019f0 <__aeabi_dmul+0x5c0>)
 80018cc:	e60e      	b.n	80014ec <__aeabi_dmul+0xbc>
 80018ce:	4658      	mov	r0, fp
 80018d0:	2101      	movs	r1, #1
 80018d2:	1ac9      	subs	r1, r1, r3
 80018d4:	2938      	cmp	r1, #56	@ 0x38
 80018d6:	dd00      	ble.n	80018da <__aeabi_dmul+0x4aa>
 80018d8:	e62f      	b.n	800153a <__aeabi_dmul+0x10a>
 80018da:	291f      	cmp	r1, #31
 80018dc:	dd56      	ble.n	800198c <__aeabi_dmul+0x55c>
 80018de:	221f      	movs	r2, #31
 80018e0:	4654      	mov	r4, sl
 80018e2:	4252      	negs	r2, r2
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	40dc      	lsrs	r4, r3
 80018e8:	2920      	cmp	r1, #32
 80018ea:	d007      	beq.n	80018fc <__aeabi_dmul+0x4cc>
 80018ec:	4b41      	ldr	r3, [pc, #260]	@ (80019f4 <__aeabi_dmul+0x5c4>)
 80018ee:	4642      	mov	r2, r8
 80018f0:	469c      	mov	ip, r3
 80018f2:	4653      	mov	r3, sl
 80018f4:	4460      	add	r0, ip
 80018f6:	4083      	lsls	r3, r0
 80018f8:	431a      	orrs	r2, r3
 80018fa:	4690      	mov	r8, r2
 80018fc:	4642      	mov	r2, r8
 80018fe:	2107      	movs	r1, #7
 8001900:	1e53      	subs	r3, r2, #1
 8001902:	419a      	sbcs	r2, r3
 8001904:	000b      	movs	r3, r1
 8001906:	4322      	orrs	r2, r4
 8001908:	4013      	ands	r3, r2
 800190a:	2400      	movs	r4, #0
 800190c:	4211      	tst	r1, r2
 800190e:	d009      	beq.n	8001924 <__aeabi_dmul+0x4f4>
 8001910:	230f      	movs	r3, #15
 8001912:	4013      	ands	r3, r2
 8001914:	2b04      	cmp	r3, #4
 8001916:	d05d      	beq.n	80019d4 <__aeabi_dmul+0x5a4>
 8001918:	1d11      	adds	r1, r2, #4
 800191a:	4291      	cmp	r1, r2
 800191c:	419b      	sbcs	r3, r3
 800191e:	000a      	movs	r2, r1
 8001920:	425b      	negs	r3, r3
 8001922:	075b      	lsls	r3, r3, #29
 8001924:	08d2      	lsrs	r2, r2, #3
 8001926:	431a      	orrs	r2, r3
 8001928:	2300      	movs	r3, #0
 800192a:	e5df      	b.n	80014ec <__aeabi_dmul+0xbc>
 800192c:	9b03      	ldr	r3, [sp, #12]
 800192e:	4699      	mov	r9, r3
 8001930:	e5fa      	b.n	8001528 <__aeabi_dmul+0xf8>
 8001932:	9801      	ldr	r0, [sp, #4]
 8001934:	f000 f92c 	bl	8001b90 <__clzsi2>
 8001938:	0002      	movs	r2, r0
 800193a:	0003      	movs	r3, r0
 800193c:	3215      	adds	r2, #21
 800193e:	3320      	adds	r3, #32
 8001940:	2a1c      	cmp	r2, #28
 8001942:	dc00      	bgt.n	8001946 <__aeabi_dmul+0x516>
 8001944:	e738      	b.n	80017b8 <__aeabi_dmul+0x388>
 8001946:	9a01      	ldr	r2, [sp, #4]
 8001948:	3808      	subs	r0, #8
 800194a:	4082      	lsls	r2, r0
 800194c:	e73f      	b.n	80017ce <__aeabi_dmul+0x39e>
 800194e:	f000 f91f 	bl	8001b90 <__clzsi2>
 8001952:	2315      	movs	r3, #21
 8001954:	469c      	mov	ip, r3
 8001956:	4484      	add	ip, r0
 8001958:	0002      	movs	r2, r0
 800195a:	4663      	mov	r3, ip
 800195c:	3220      	adds	r2, #32
 800195e:	2b1c      	cmp	r3, #28
 8001960:	dc00      	bgt.n	8001964 <__aeabi_dmul+0x534>
 8001962:	e758      	b.n	8001816 <__aeabi_dmul+0x3e6>
 8001964:	2300      	movs	r3, #0
 8001966:	4698      	mov	r8, r3
 8001968:	0023      	movs	r3, r4
 800196a:	3808      	subs	r0, #8
 800196c:	4083      	lsls	r3, r0
 800196e:	469a      	mov	sl, r3
 8001970:	e762      	b.n	8001838 <__aeabi_dmul+0x408>
 8001972:	001d      	movs	r5, r3
 8001974:	2300      	movs	r3, #0
 8001976:	2400      	movs	r4, #0
 8001978:	2002      	movs	r0, #2
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	e5a2      	b.n	80014c4 <__aeabi_dmul+0x94>
 800197e:	9002      	str	r0, [sp, #8]
 8001980:	e632      	b.n	80015e8 <__aeabi_dmul+0x1b8>
 8001982:	431c      	orrs	r4, r3
 8001984:	9b00      	ldr	r3, [sp, #0]
 8001986:	9a01      	ldr	r2, [sp, #4]
 8001988:	4699      	mov	r9, r3
 800198a:	e5ae      	b.n	80014ea <__aeabi_dmul+0xba>
 800198c:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <__aeabi_dmul+0x5c8>)
 800198e:	4652      	mov	r2, sl
 8001990:	18c3      	adds	r3, r0, r3
 8001992:	4640      	mov	r0, r8
 8001994:	409a      	lsls	r2, r3
 8001996:	40c8      	lsrs	r0, r1
 8001998:	4302      	orrs	r2, r0
 800199a:	4640      	mov	r0, r8
 800199c:	4098      	lsls	r0, r3
 800199e:	0003      	movs	r3, r0
 80019a0:	1e58      	subs	r0, r3, #1
 80019a2:	4183      	sbcs	r3, r0
 80019a4:	4654      	mov	r4, sl
 80019a6:	431a      	orrs	r2, r3
 80019a8:	40cc      	lsrs	r4, r1
 80019aa:	0753      	lsls	r3, r2, #29
 80019ac:	d009      	beq.n	80019c2 <__aeabi_dmul+0x592>
 80019ae:	230f      	movs	r3, #15
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d005      	beq.n	80019c2 <__aeabi_dmul+0x592>
 80019b6:	1d13      	adds	r3, r2, #4
 80019b8:	4293      	cmp	r3, r2
 80019ba:	4192      	sbcs	r2, r2
 80019bc:	4252      	negs	r2, r2
 80019be:	18a4      	adds	r4, r4, r2
 80019c0:	001a      	movs	r2, r3
 80019c2:	0223      	lsls	r3, r4, #8
 80019c4:	d508      	bpl.n	80019d8 <__aeabi_dmul+0x5a8>
 80019c6:	2301      	movs	r3, #1
 80019c8:	2400      	movs	r4, #0
 80019ca:	2200      	movs	r2, #0
 80019cc:	e58e      	b.n	80014ec <__aeabi_dmul+0xbc>
 80019ce:	4689      	mov	r9, r1
 80019d0:	2400      	movs	r4, #0
 80019d2:	e58b      	b.n	80014ec <__aeabi_dmul+0xbc>
 80019d4:	2300      	movs	r3, #0
 80019d6:	e7a5      	b.n	8001924 <__aeabi_dmul+0x4f4>
 80019d8:	0763      	lsls	r3, r4, #29
 80019da:	0264      	lsls	r4, r4, #9
 80019dc:	0b24      	lsrs	r4, r4, #12
 80019de:	e7a1      	b.n	8001924 <__aeabi_dmul+0x4f4>
 80019e0:	9b00      	ldr	r3, [sp, #0]
 80019e2:	46a2      	mov	sl, r4
 80019e4:	4699      	mov	r9, r3
 80019e6:	9b01      	ldr	r3, [sp, #4]
 80019e8:	4698      	mov	r8, r3
 80019ea:	e737      	b.n	800185c <__aeabi_dmul+0x42c>
 80019ec:	fffffc0d 	.word	0xfffffc0d
 80019f0:	000007ff 	.word	0x000007ff
 80019f4:	0000043e 	.word	0x0000043e
 80019f8:	0000041e 	.word	0x0000041e

080019fc <__aeabi_f2d>:
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	0242      	lsls	r2, r0, #9
 8001a00:	0043      	lsls	r3, r0, #1
 8001a02:	0fc4      	lsrs	r4, r0, #31
 8001a04:	20fe      	movs	r0, #254	@ 0xfe
 8001a06:	0e1b      	lsrs	r3, r3, #24
 8001a08:	1c59      	adds	r1, r3, #1
 8001a0a:	0a55      	lsrs	r5, r2, #9
 8001a0c:	4208      	tst	r0, r1
 8001a0e:	d00c      	beq.n	8001a2a <__aeabi_f2d+0x2e>
 8001a10:	21e0      	movs	r1, #224	@ 0xe0
 8001a12:	0089      	lsls	r1, r1, #2
 8001a14:	468c      	mov	ip, r1
 8001a16:	076d      	lsls	r5, r5, #29
 8001a18:	0b12      	lsrs	r2, r2, #12
 8001a1a:	4463      	add	r3, ip
 8001a1c:	051b      	lsls	r3, r3, #20
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	07e4      	lsls	r4, r4, #31
 8001a22:	4323      	orrs	r3, r4
 8001a24:	0028      	movs	r0, r5
 8001a26:	0019      	movs	r1, r3
 8001a28:	bd70      	pop	{r4, r5, r6, pc}
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d114      	bne.n	8001a58 <__aeabi_f2d+0x5c>
 8001a2e:	2d00      	cmp	r5, #0
 8001a30:	d01b      	beq.n	8001a6a <__aeabi_f2d+0x6e>
 8001a32:	0028      	movs	r0, r5
 8001a34:	f000 f8ac 	bl	8001b90 <__clzsi2>
 8001a38:	280a      	cmp	r0, #10
 8001a3a:	dc1c      	bgt.n	8001a76 <__aeabi_f2d+0x7a>
 8001a3c:	230b      	movs	r3, #11
 8001a3e:	002a      	movs	r2, r5
 8001a40:	1a1b      	subs	r3, r3, r0
 8001a42:	40da      	lsrs	r2, r3
 8001a44:	0003      	movs	r3, r0
 8001a46:	3315      	adds	r3, #21
 8001a48:	409d      	lsls	r5, r3
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <__aeabi_f2d+0x88>)
 8001a4c:	0312      	lsls	r2, r2, #12
 8001a4e:	1a1b      	subs	r3, r3, r0
 8001a50:	055b      	lsls	r3, r3, #21
 8001a52:	0b12      	lsrs	r2, r2, #12
 8001a54:	0d5b      	lsrs	r3, r3, #21
 8001a56:	e7e1      	b.n	8001a1c <__aeabi_f2d+0x20>
 8001a58:	2d00      	cmp	r5, #0
 8001a5a:	d009      	beq.n	8001a70 <__aeabi_f2d+0x74>
 8001a5c:	0b13      	lsrs	r3, r2, #12
 8001a5e:	2280      	movs	r2, #128	@ 0x80
 8001a60:	0312      	lsls	r2, r2, #12
 8001a62:	431a      	orrs	r2, r3
 8001a64:	076d      	lsls	r5, r5, #29
 8001a66:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <__aeabi_f2d+0x8c>)
 8001a68:	e7d8      	b.n	8001a1c <__aeabi_f2d+0x20>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	e7d5      	b.n	8001a1c <__aeabi_f2d+0x20>
 8001a70:	2200      	movs	r2, #0
 8001a72:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <__aeabi_f2d+0x8c>)
 8001a74:	e7d2      	b.n	8001a1c <__aeabi_f2d+0x20>
 8001a76:	0003      	movs	r3, r0
 8001a78:	002a      	movs	r2, r5
 8001a7a:	3b0b      	subs	r3, #11
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	2500      	movs	r5, #0
 8001a80:	e7e3      	b.n	8001a4a <__aeabi_f2d+0x4e>
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	00000389 	.word	0x00000389
 8001a88:	000007ff 	.word	0x000007ff

08001a8c <__aeabi_d2f>:
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	004b      	lsls	r3, r1, #1
 8001a90:	030f      	lsls	r7, r1, #12
 8001a92:	0d5b      	lsrs	r3, r3, #21
 8001a94:	4c3a      	ldr	r4, [pc, #232]	@ (8001b80 <__aeabi_d2f+0xf4>)
 8001a96:	0f45      	lsrs	r5, r0, #29
 8001a98:	b083      	sub	sp, #12
 8001a9a:	0a7f      	lsrs	r7, r7, #9
 8001a9c:	1c5e      	adds	r6, r3, #1
 8001a9e:	432f      	orrs	r7, r5
 8001aa0:	9000      	str	r0, [sp, #0]
 8001aa2:	9101      	str	r1, [sp, #4]
 8001aa4:	0fca      	lsrs	r2, r1, #31
 8001aa6:	00c5      	lsls	r5, r0, #3
 8001aa8:	4226      	tst	r6, r4
 8001aaa:	d00b      	beq.n	8001ac4 <__aeabi_d2f+0x38>
 8001aac:	4935      	ldr	r1, [pc, #212]	@ (8001b84 <__aeabi_d2f+0xf8>)
 8001aae:	185c      	adds	r4, r3, r1
 8001ab0:	2cfe      	cmp	r4, #254	@ 0xfe
 8001ab2:	dd13      	ble.n	8001adc <__aeabi_d2f+0x50>
 8001ab4:	20ff      	movs	r0, #255	@ 0xff
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	05c0      	lsls	r0, r0, #23
 8001aba:	4318      	orrs	r0, r3
 8001abc:	07d2      	lsls	r2, r2, #31
 8001abe:	4310      	orrs	r0, r2
 8001ac0:	b003      	add	sp, #12
 8001ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac4:	433d      	orrs	r5, r7
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <__aeabi_d2f+0x42>
 8001aca:	2000      	movs	r0, #0
 8001acc:	e7f4      	b.n	8001ab8 <__aeabi_d2f+0x2c>
 8001ace:	2d00      	cmp	r5, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <__aeabi_d2f+0x28>
 8001ad2:	2380      	movs	r3, #128	@ 0x80
 8001ad4:	03db      	lsls	r3, r3, #15
 8001ad6:	20ff      	movs	r0, #255	@ 0xff
 8001ad8:	433b      	orrs	r3, r7
 8001ada:	e7ed      	b.n	8001ab8 <__aeabi_d2f+0x2c>
 8001adc:	2c00      	cmp	r4, #0
 8001ade:	dd0c      	ble.n	8001afa <__aeabi_d2f+0x6e>
 8001ae0:	9b00      	ldr	r3, [sp, #0]
 8001ae2:	00ff      	lsls	r7, r7, #3
 8001ae4:	019b      	lsls	r3, r3, #6
 8001ae6:	1e58      	subs	r0, r3, #1
 8001ae8:	4183      	sbcs	r3, r0
 8001aea:	0f69      	lsrs	r1, r5, #29
 8001aec:	433b      	orrs	r3, r7
 8001aee:	430b      	orrs	r3, r1
 8001af0:	0759      	lsls	r1, r3, #29
 8001af2:	d127      	bne.n	8001b44 <__aeabi_d2f+0xb8>
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	b2e0      	uxtb	r0, r4
 8001af8:	e7de      	b.n	8001ab8 <__aeabi_d2f+0x2c>
 8001afa:	0021      	movs	r1, r4
 8001afc:	3117      	adds	r1, #23
 8001afe:	db31      	blt.n	8001b64 <__aeabi_d2f+0xd8>
 8001b00:	2180      	movs	r1, #128	@ 0x80
 8001b02:	201e      	movs	r0, #30
 8001b04:	0409      	lsls	r1, r1, #16
 8001b06:	4339      	orrs	r1, r7
 8001b08:	1b00      	subs	r0, r0, r4
 8001b0a:	281f      	cmp	r0, #31
 8001b0c:	dd2d      	ble.n	8001b6a <__aeabi_d2f+0xde>
 8001b0e:	2602      	movs	r6, #2
 8001b10:	4276      	negs	r6, r6
 8001b12:	1b34      	subs	r4, r6, r4
 8001b14:	000e      	movs	r6, r1
 8001b16:	40e6      	lsrs	r6, r4
 8001b18:	0034      	movs	r4, r6
 8001b1a:	2820      	cmp	r0, #32
 8001b1c:	d004      	beq.n	8001b28 <__aeabi_d2f+0x9c>
 8001b1e:	481a      	ldr	r0, [pc, #104]	@ (8001b88 <__aeabi_d2f+0xfc>)
 8001b20:	4684      	mov	ip, r0
 8001b22:	4463      	add	r3, ip
 8001b24:	4099      	lsls	r1, r3
 8001b26:	430d      	orrs	r5, r1
 8001b28:	002b      	movs	r3, r5
 8001b2a:	1e59      	subs	r1, r3, #1
 8001b2c:	418b      	sbcs	r3, r1
 8001b2e:	4323      	orrs	r3, r4
 8001b30:	0759      	lsls	r1, r3, #29
 8001b32:	d003      	beq.n	8001b3c <__aeabi_d2f+0xb0>
 8001b34:	210f      	movs	r1, #15
 8001b36:	4019      	ands	r1, r3
 8001b38:	2904      	cmp	r1, #4
 8001b3a:	d10b      	bne.n	8001b54 <__aeabi_d2f+0xc8>
 8001b3c:	019b      	lsls	r3, r3, #6
 8001b3e:	2000      	movs	r0, #0
 8001b40:	0a5b      	lsrs	r3, r3, #9
 8001b42:	e7b9      	b.n	8001ab8 <__aeabi_d2f+0x2c>
 8001b44:	210f      	movs	r1, #15
 8001b46:	4019      	ands	r1, r3
 8001b48:	2904      	cmp	r1, #4
 8001b4a:	d104      	bne.n	8001b56 <__aeabi_d2f+0xca>
 8001b4c:	019b      	lsls	r3, r3, #6
 8001b4e:	0a5b      	lsrs	r3, r3, #9
 8001b50:	b2e0      	uxtb	r0, r4
 8001b52:	e7b1      	b.n	8001ab8 <__aeabi_d2f+0x2c>
 8001b54:	2400      	movs	r4, #0
 8001b56:	3304      	adds	r3, #4
 8001b58:	0159      	lsls	r1, r3, #5
 8001b5a:	d5f7      	bpl.n	8001b4c <__aeabi_d2f+0xc0>
 8001b5c:	3401      	adds	r4, #1
 8001b5e:	2300      	movs	r3, #0
 8001b60:	b2e0      	uxtb	r0, r4
 8001b62:	e7a9      	b.n	8001ab8 <__aeabi_d2f+0x2c>
 8001b64:	2000      	movs	r0, #0
 8001b66:	2300      	movs	r3, #0
 8001b68:	e7a6      	b.n	8001ab8 <__aeabi_d2f+0x2c>
 8001b6a:	4c08      	ldr	r4, [pc, #32]	@ (8001b8c <__aeabi_d2f+0x100>)
 8001b6c:	191c      	adds	r4, r3, r4
 8001b6e:	002b      	movs	r3, r5
 8001b70:	40a5      	lsls	r5, r4
 8001b72:	40c3      	lsrs	r3, r0
 8001b74:	40a1      	lsls	r1, r4
 8001b76:	1e68      	subs	r0, r5, #1
 8001b78:	4185      	sbcs	r5, r0
 8001b7a:	4329      	orrs	r1, r5
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	e7d7      	b.n	8001b30 <__aeabi_d2f+0xa4>
 8001b80:	000007fe 	.word	0x000007fe
 8001b84:	fffffc80 	.word	0xfffffc80
 8001b88:	fffffca2 	.word	0xfffffca2
 8001b8c:	fffffc82 	.word	0xfffffc82

08001b90 <__clzsi2>:
 8001b90:	211c      	movs	r1, #28
 8001b92:	2301      	movs	r3, #1
 8001b94:	041b      	lsls	r3, r3, #16
 8001b96:	4298      	cmp	r0, r3
 8001b98:	d301      	bcc.n	8001b9e <__clzsi2+0xe>
 8001b9a:	0c00      	lsrs	r0, r0, #16
 8001b9c:	3910      	subs	r1, #16
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	4298      	cmp	r0, r3
 8001ba2:	d301      	bcc.n	8001ba8 <__clzsi2+0x18>
 8001ba4:	0a00      	lsrs	r0, r0, #8
 8001ba6:	3908      	subs	r1, #8
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	4298      	cmp	r0, r3
 8001bac:	d301      	bcc.n	8001bb2 <__clzsi2+0x22>
 8001bae:	0900      	lsrs	r0, r0, #4
 8001bb0:	3904      	subs	r1, #4
 8001bb2:	a202      	add	r2, pc, #8	@ (adr r2, 8001bbc <__clzsi2+0x2c>)
 8001bb4:	5c10      	ldrb	r0, [r2, r0]
 8001bb6:	1840      	adds	r0, r0, r1
 8001bb8:	4770      	bx	lr
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	02020304 	.word	0x02020304
 8001bc0:	01010101 	.word	0x01010101
	...

08001bcc <bma400_init>:
/************************************************************************************/
/*********************** User function definitions **********************************/
/************************************************************************************/

int8_t bma400_init(struct bma400_dev *dev)
{
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001bd4:	260e      	movs	r6, #14
 8001bd6:	19bb      	adds	r3, r7, r6
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001bdc:	250f      	movs	r5, #15
 8001bde:	197c      	adds	r4, r7, r5
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	0018      	movs	r0, r3
 8001be4:	f000 fb8a 	bl	80022fc <null_ptr_check>
 8001be8:	0003      	movs	r3, r0
 8001bea:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8001bec:	002c      	movs	r4, r5
 8001bee:	193b      	adds	r3, r7, r4
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b25b      	sxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d13c      	bne.n	8001c72 <bma400_init+0xa6>
    {
        /* Initial power-up time */
        dev->delay_us(5000, dev->intf_ptr);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4820      	ldr	r0, [pc, #128]	@ (8001c84 <bma400_init+0xb8>)
 8001c02:	0019      	movs	r1, r3
 8001c04:	4790      	blx	r2

        /* Assigning dummy byte value */
        if (dev->intf == BMA400_SPI_INTF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	785b      	ldrb	r3, [r3, #1]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10c      	bne.n	8001c28 <bma400_init+0x5c>
        {
            /* Dummy Byte availability */
            dev->dummy_byte = 1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	721a      	strb	r2, [r3, #8]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8001c14:	193c      	adds	r4, r7, r4
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	19b9      	adds	r1, r7, r6
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f000 f8b1 	bl	8001d84 <bma400_get_regs>
 8001c22:	0003      	movs	r3, r0
 8001c24:	7023      	strb	r3, [r4, #0]
 8001c26:	e002      	b.n	8001c2e <bma400_init+0x62>
        }
        else
        {
            dev->dummy_byte = 0;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	721a      	strb	r2, [r3, #8]
        }

        if (rslt == BMA400_OK)
 8001c2e:	250f      	movs	r5, #15
 8001c30:	197b      	adds	r3, r7, r5
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d11b      	bne.n	8001c72 <bma400_init+0xa6>
        {
            /* Chip ID of the sensor is read */
            rslt = bma400_get_regs(BMA400_REG_CHIP_ID, &chip_id, 1, dev);
 8001c3a:	197c      	adds	r4, r7, r5
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	260e      	movs	r6, #14
 8001c40:	19b9      	adds	r1, r7, r6
 8001c42:	2201      	movs	r2, #1
 8001c44:	2000      	movs	r0, #0
 8001c46:	f000 f89d 	bl	8001d84 <bma400_get_regs>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	7023      	strb	r3, [r4, #0]

            /* Proceed if everything is fine until now */
            if (rslt == BMA400_OK)
 8001c4e:	197b      	adds	r3, r7, r5
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10c      	bne.n	8001c72 <bma400_init+0xa6>
            {
                /* Check for chip id validity */
                if (chip_id == BMA400_CHIP_ID)
 8001c58:	19bb      	adds	r3, r7, r6
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b90      	cmp	r3, #144	@ 0x90
 8001c5e:	d104      	bne.n	8001c6a <bma400_init+0x9e>
                {
                    /* Store the chip ID in dev structure */
                    dev->chip_id = chip_id;
 8001c60:	19bb      	adds	r3, r7, r6
 8001c62:	781a      	ldrb	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	e003      	b.n	8001c72 <bma400_init+0xa6>
                }
                else
                {
                    rslt = BMA400_E_DEV_NOT_FOUND;
 8001c6a:	230f      	movs	r3, #15
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	22fd      	movs	r2, #253	@ 0xfd
 8001c70:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    return rslt;
 8001c72:	230f      	movs	r3, #15
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b25b      	sxtb	r3, r3
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b005      	add	sp, #20
 8001c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	00001388 	.word	0x00001388

08001c88 <bma400_set_regs>:

int8_t bma400_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 8001c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	230f      	movs	r3, #15
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	1c02      	adds	r2, r0, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t count;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001c9c:	2617      	movs	r6, #23
 8001c9e:	19bc      	adds	r4, r7, r6
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 fb2a 	bl	80022fc <null_ptr_check>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8001cac:	19bb      	adds	r3, r7, r6
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	b25b      	sxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d158      	bne.n	8001d68 <bma400_set_regs+0xe0>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d055      	beq.n	8001d68 <bma400_set_regs+0xe0>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        if (len == 1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d116      	bne.n	8001cf0 <bma400_set_regs+0x68>
        {
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	691c      	ldr	r4, [r3, #16]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685d      	ldr	r5, [r3, #4]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	230f      	movs	r3, #15
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	7818      	ldrb	r0, [r3, #0]
 8001cd4:	002b      	movs	r3, r5
 8001cd6:	47a0      	blx	r4
 8001cd8:	0003      	movs	r3, r0
 8001cda:	001a      	movs	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	771a      	strb	r2, [r3, #28]
            if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	7f1b      	ldrb	r3, [r3, #28]
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <bma400_set_regs+0x68>
            {
                /* Failure case */
                rslt = BMA400_E_COM_FAIL;
 8001cea:	19bb      	adds	r3, r7, r6
 8001cec:	22fe      	movs	r2, #254	@ 0xfe
 8001cee:	701a      	strb	r2, [r3, #0]

        /* Burst write is not allowed thus we split burst case write
         * into single byte writes Thus user can write multiple bytes
         * with ease
         */
        if (len > 1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d93d      	bls.n	8001d72 <bma400_set_regs+0xea>
        {
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8001cf6:	2316      	movs	r3, #22
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	e026      	b.n	8001d4e <bma400_set_regs+0xc6>
            {
                dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	691c      	ldr	r4, [r3, #16]
 8001d04:	2316      	movs	r3, #22
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	18d1      	adds	r1, r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	250f      	movs	r5, #15
 8001d14:	197b      	adds	r3, r7, r5
 8001d16:	7818      	ldrb	r0, [r3, #0]
 8001d18:	0013      	movs	r3, r2
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	47a0      	blx	r4
 8001d1e:	0003      	movs	r3, r0
 8001d20:	001a      	movs	r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	771a      	strb	r2, [r3, #28]
                reg_addr++;
 8001d26:	197b      	adds	r3, r7, r5
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	197b      	adds	r3, r7, r5
 8001d2c:	3201      	adds	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
                if (dev->intf_rslt != BMA400_INTF_RET_SUCCESS)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	7f1b      	ldrb	r3, [r3, #28]
 8001d34:	b25b      	sxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <bma400_set_regs+0xba>
                {
                    /* Failure case */
                    rslt = BMA400_E_COM_FAIL;
 8001d3a:	2317      	movs	r3, #23
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	22fe      	movs	r2, #254	@ 0xfe
 8001d40:	701a      	strb	r2, [r3, #0]
            for (count = 0; (count < len) && (rslt == BMA400_OK); count++)
 8001d42:	2116      	movs	r1, #22
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	3201      	adds	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	2316      	movs	r3, #22
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d90b      	bls.n	8001d72 <bma400_set_regs+0xea>
 8001d5a:	2317      	movs	r3, #23
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0cc      	beq.n	8001d00 <bma400_set_regs+0x78>
        if (len > 1)
 8001d66:	e004      	b.n	8001d72 <bma400_set_regs+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001d68:	2317      	movs	r3, #23
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	22ff      	movs	r2, #255	@ 0xff
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e000      	b.n	8001d74 <bma400_set_regs+0xec>
        if (len > 1)
 8001d72:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 8001d74:	2317      	movs	r3, #23
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b25b      	sxtb	r3, r3
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b007      	add	sp, #28
 8001d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d84 <bma400_get_regs>:

int8_t bma400_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bma400_dev *dev)
{
 8001d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d86:	b0a7      	sub	sp, #156	@ 0x9c
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	250f      	movs	r5, #15
 8001d92:	197b      	adds	r3, r7, r5
 8001d94:	1c02      	adds	r2, r0, #0
 8001d96:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t index;
    uint8_t temp_buff[BMA400_MAX_LEN];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001d98:	2697      	movs	r6, #151	@ 0x97
 8001d9a:	19bc      	adds	r4, r7, r6
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f000 faac 	bl	80022fc <null_ptr_check>
 8001da4:	0003      	movs	r3, r0
 8001da6:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 8001da8:	19bb      	adds	r3, r7, r6
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d14a      	bne.n	8001e48 <bma400_get_regs+0xc4>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d047      	beq.n	8001e48 <bma400_get_regs+0xc4>
    {
        if (dev->intf != BMA400_I2C_INTF)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d006      	beq.n	8001dce <bma400_get_regs+0x4a>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 8001dc0:	197b      	adds	r3, r7, r5
 8001dc2:	197a      	adds	r2, r7, r5
 8001dc4:	7812      	ldrb	r2, [r2, #0]
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	4249      	negs	r1, r1
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68dc      	ldr	r4, [r3, #12]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	7a1b      	ldrb	r3, [r3, #8]
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	18d2      	adds	r2, r2, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685d      	ldr	r5, [r3, #4]
 8001de0:	2314      	movs	r3, #20
 8001de2:	18f9      	adds	r1, r7, r3
 8001de4:	230f      	movs	r3, #15
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	7818      	ldrb	r0, [r3, #0]
 8001dea:	002b      	movs	r3, r5
 8001dec:	47a0      	blx	r4
 8001dee:	0003      	movs	r3, r0
 8001df0:	001a      	movs	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	771a      	strb	r2, [r3, #28]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	7f1b      	ldrb	r3, [r3, #28]
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d11e      	bne.n	8001e3e <bma400_get_regs+0xba>
        {
            for (index = 0; index < len; index++)
 8001e00:	2394      	movs	r3, #148	@ 0x94
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	2200      	movs	r2, #0
 8001e06:	801a      	strh	r2, [r3, #0]
 8001e08:	e012      	b.n	8001e30 <bma400_get_regs+0xac>
            {
                /* Parse the data read and store in "reg_data"
                 * buffer so that the dummy byte is removed
                 * and user will get only valid data
                 */
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 8001e0a:	2094      	movs	r0, #148	@ 0x94
 8001e0c:	183b      	adds	r3, r7, r0
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	7a12      	ldrb	r2, [r2, #8]
 8001e14:	189a      	adds	r2, r3, r2
 8001e16:	183b      	adds	r3, r7, r0
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	18cb      	adds	r3, r1, r3
 8001e1e:	2114      	movs	r1, #20
 8001e20:	1879      	adds	r1, r7, r1
 8001e22:	5c8a      	ldrb	r2, [r1, r2]
 8001e24:	701a      	strb	r2, [r3, #0]
            for (index = 0; index < len; index++)
 8001e26:	183b      	adds	r3, r7, r0
 8001e28:	881a      	ldrh	r2, [r3, #0]
 8001e2a:	183b      	adds	r3, r7, r0
 8001e2c:	3201      	adds	r2, #1
 8001e2e:	801a      	strh	r2, [r3, #0]
 8001e30:	2394      	movs	r3, #148	@ 0x94
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d8e6      	bhi.n	8001e0a <bma400_get_regs+0x86>
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8001e3c:	e008      	b.n	8001e50 <bma400_get_regs+0xcc>
            }
        }
        else
        {
            /* Failure case */
            rslt = BMA400_E_COM_FAIL;
 8001e3e:	2397      	movs	r3, #151	@ 0x97
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	22fe      	movs	r2, #254	@ 0xfe
 8001e44:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt == BMA400_INTF_RET_SUCCESS)
 8001e46:	e003      	b.n	8001e50 <bma400_get_regs+0xcc>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001e48:	2397      	movs	r3, #151	@ 0x97
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	22ff      	movs	r2, #255	@ 0xff
 8001e4e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001e50:	2397      	movs	r3, #151	@ 0x97
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b25b      	sxtb	r3, r3
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b027      	add	sp, #156	@ 0x9c
 8001e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e60 <bma400_set_power_mode>:

    return rslt;
}

int8_t bma400_set_power_mode(uint8_t power_mode, struct bma400_dev *dev)
{
 8001e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	0002      	movs	r2, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data = 0;
 8001e6e:	260e      	movs	r6, #14
 8001e70:	19bb      	adds	r3, r7, r6
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]

    rslt = null_ptr_check(dev);
 8001e76:	250f      	movs	r5, #15
 8001e78:	197c      	adds	r4, r7, r5
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 fa3d 	bl	80022fc <null_ptr_check>
 8001e82:	0003      	movs	r3, r0
 8001e84:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8001e86:	197b      	adds	r3, r7, r5
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d108      	bne.n	8001ea2 <bma400_set_power_mode+0x42>
    {
        rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 8001e90:	197c      	adds	r4, r7, r5
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	19b9      	adds	r1, r7, r6
 8001e96:	2201      	movs	r2, #1
 8001e98:	2019      	movs	r0, #25
 8001e9a:	f7ff ff73 	bl	8001d84 <bma400_get_regs>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BMA400_OK)
 8001ea2:	240f      	movs	r4, #15
 8001ea4:	193b      	adds	r3, r7, r4
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d12d      	bne.n	8001f0a <bma400_set_power_mode+0xaa>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_POWER_MODE, power_mode);
 8001eae:	200e      	movs	r0, #14
 8001eb0:	183b      	adds	r3, r7, r0
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b25b      	sxtb	r3, r3
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	4393      	bics	r3, r2
 8001eba:	b25a      	sxtb	r2, r3
 8001ebc:	1dfb      	adds	r3, r7, #7
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b25b      	sxtb	r3, r3
 8001ec2:	2103      	movs	r1, #3
 8001ec4:	400b      	ands	r3, r1
 8001ec6:	b25b      	sxtb	r3, r3
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	183b      	adds	r3, r7, r0
 8001ed0:	701a      	strb	r2, [r3, #0]

        /* Set the power mode of sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, &reg_data, 1, dev);
 8001ed2:	193c      	adds	r4, r7, r4
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	1839      	adds	r1, r7, r0
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2019      	movs	r0, #25
 8001edc:	f7ff fed4 	bl	8001c88 <bma400_set_regs>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	7023      	strb	r3, [r4, #0]
        if (power_mode == BMA400_MODE_LOW_POWER)
 8001ee4:	1dfb      	adds	r3, r7, #7
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <bma400_set_power_mode+0x9c>
        {
            /* A delay of 1/ODR is required to switch power modes
             * Low power mode has 25Hz frequency and hence it needs
             * 40ms delay to enter low power mode
             */
            dev->delay_us(40000, dev->intf_ptr);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4809      	ldr	r0, [pc, #36]	@ (8001f1c <bma400_set_power_mode+0xbc>)
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	4790      	blx	r2
 8001efa:	e006      	b.n	8001f0a <bma400_set_power_mode+0xaa>
        }
        else
        {
            dev->delay_us(10000, dev->intf_ptr); /* TBC */
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4806      	ldr	r0, [pc, #24]	@ (8001f20 <bma400_set_power_mode+0xc0>)
 8001f06:	0019      	movs	r1, r3
 8001f08:	4790      	blx	r2
        }
    }

    return rslt;
 8001f0a:	230f      	movs	r3, #15
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b25b      	sxtb	r3, r3
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b005      	add	sp, #20
 8001f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	00009c40 	.word	0x00009c40
 8001f20:	00002710 	.word	0x00002710

08001f24 <bma400_get_accel_data>:

    return rslt;
}

int8_t bma400_get_accel_data(uint8_t data_sel, struct bma400_sensor_data *accel, struct bma400_dev *dev)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	260f      	movs	r6, #15
 8001f30:	19bb      	adds	r3, r7, r6
 8001f32:	1c02      	adds	r2, r0, #0
 8001f34:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001f36:	2517      	movs	r5, #23
 8001f38:	197c      	adds	r4, r7, r5
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f000 f9dd 	bl	80022fc <null_ptr_check>
 8001f42:	0003      	movs	r3, r0
 8001f44:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (accel != NULL))
 8001f46:	002a      	movs	r2, r5
 8001f48:	18bb      	adds	r3, r7, r2
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <bma400_get_accel_data+0x4a>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <bma400_get_accel_data+0x4a>
    {
        /* Read and store the accel data */
        rslt = get_accel_data(data_sel, accel, dev);
 8001f58:	18bc      	adds	r4, r7, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	19bb      	adds	r3, r7, r6
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f000 fb50 	bl	8002608 <get_accel_data>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	7023      	strb	r3, [r4, #0]
 8001f6c:	e003      	b.n	8001f76 <bma400_get_accel_data+0x52>
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8001f6e:	2317      	movs	r3, #23
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	22ff      	movs	r2, #255	@ 0xff
 8001f74:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001f76:	2317      	movs	r3, #23
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	b25b      	sxtb	r3, r3
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b007      	add	sp, #28
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f86 <bma400_set_sensor_conf>:

int8_t bma400_set_sensor_conf(const struct bma400_sensor_conf *conf, uint16_t n_sett, struct bma400_dev *dev)
{
 8001f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f88:	b087      	sub	sp, #28
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	230a      	movs	r3, #10
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	1c0a      	adds	r2, r1, #0
 8001f96:	801a      	strh	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx = 0;
 8001f98:	2614      	movs	r6, #20
 8001f9a:	19bb      	adds	r3, r7, r6
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	801a      	strh	r2, [r3, #0]
    uint8_t data_array[3] = { 0 };
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	001a      	movs	r2, r3
 8001faa:	2100      	movs	r1, #0
 8001fac:	f004 fcbc 	bl	8006928 <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001fb0:	2517      	movs	r5, #23
 8001fb2:	197c      	adds	r4, r7, r5
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f000 f9a0 	bl	80022fc <null_ptr_check>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (conf != NULL))
 8001fc0:	197b      	adds	r3, r7, r5
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d14d      	bne.n	8002066 <bma400_set_sensor_conf+0xe0>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d04a      	beq.n	8002066 <bma400_set_sensor_conf+0xe0>
    {
        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8001fd0:	197c      	adds	r4, r7, r5
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	18b9      	adds	r1, r7, r2
 8001fd8:	2203      	movs	r2, #3
 8001fda:	2021      	movs	r0, #33	@ 0x21
 8001fdc:	f7ff fed2 	bl	8001d84 <bma400_get_regs>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8001fe4:	197b      	adds	r3, r7, r5
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b25b      	sxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d140      	bne.n	8002070 <bma400_set_sensor_conf+0xea>
        {
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8001fee:	19bb      	adds	r3, r7, r6
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	e018      	b.n	8002028 <bma400_set_sensor_conf+0xa2>
            {
                rslt = set_sensor_conf(data_array, conf + idx, dev);
 8001ff6:	2514      	movs	r5, #20
 8001ff8:	197b      	adds	r3, r7, r5
 8001ffa:	881a      	ldrh	r2, [r3, #0]
 8001ffc:	0013      	movs	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	189b      	adds	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	001a      	movs	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1899      	adds	r1, r3, r2
 800200a:	2317      	movs	r3, #23
 800200c:	18fc      	adds	r4, r7, r3
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	2310      	movs	r3, #16
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	0018      	movs	r0, r3
 8002016:	f000 f995 	bl	8002344 <set_sensor_conf>
 800201a:	0003      	movs	r3, r0
 800201c:	7023      	strb	r3, [r4, #0]
            for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 800201e:	197b      	adds	r3, r7, r5
 8002020:	881a      	ldrh	r2, [r3, #0]
 8002022:	197b      	adds	r3, r7, r5
 8002024:	3201      	adds	r2, #1
 8002026:	801a      	strh	r2, [r3, #0]
 8002028:	2314      	movs	r3, #20
 800202a:	18fa      	adds	r2, r7, r3
 800202c:	230a      	movs	r3, #10
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	8812      	ldrh	r2, [r2, #0]
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d205      	bcs.n	8002044 <bma400_set_sensor_conf+0xbe>
 8002038:	2317      	movs	r3, #23
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b25b      	sxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0d8      	beq.n	8001ff6 <bma400_set_sensor_conf+0x70>
            }

            if (rslt == BMA400_OK)
 8002044:	2217      	movs	r2, #23
 8002046:	18bb      	adds	r3, r7, r2
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b25b      	sxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10f      	bne.n	8002070 <bma400_set_sensor_conf+0xea>
            {
                /* Set the interrupt pin mapping configurations */
                rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 8002050:	18bc      	adds	r4, r7, r2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2210      	movs	r2, #16
 8002056:	18b9      	adds	r1, r7, r2
 8002058:	2203      	movs	r2, #3
 800205a:	2021      	movs	r0, #33	@ 0x21
 800205c:	f7ff fe14 	bl	8001c88 <bma400_set_regs>
 8002060:	0003      	movs	r3, r0
 8002062:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8002064:	e004      	b.n	8002070 <bma400_set_sensor_conf+0xea>
            }
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8002066:	2317      	movs	r3, #23
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	22ff      	movs	r2, #255	@ 0xff
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e000      	b.n	8002072 <bma400_set_sensor_conf+0xec>
        if (rslt == BMA400_OK)
 8002070:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 8002072:	2317      	movs	r3, #23
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b25b      	sxtb	r3, r3
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b007      	add	sp, #28
 8002080:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002084 <bma400_set_device_conf>:

    return rslt;
}

int8_t bma400_set_device_conf(const struct bma400_device_conf *conf, uint8_t n_sett, struct bma400_dev *dev)
{
 8002084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	230b      	movs	r3, #11
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	1c0a      	adds	r2, r1, #0
 8002094:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint16_t idx;
    uint8_t data_array[3] = { 0 };
 8002096:	2610      	movs	r6, #16
 8002098:	19bb      	adds	r3, r7, r6
 800209a:	0018      	movs	r0, r3
 800209c:	2303      	movs	r3, #3
 800209e:	001a      	movs	r2, r3
 80020a0:	2100      	movs	r1, #0
 80020a2:	f004 fc41 	bl	8006928 <memset>

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80020a6:	2517      	movs	r5, #23
 80020a8:	197c      	adds	r4, r7, r5
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 f925 	bl	80022fc <null_ptr_check>
 80020b2:	0003      	movs	r3, r0
 80020b4:	7023      	strb	r3, [r4, #0]

    if ((rslt == BMA400_OK) && (conf != NULL))
 80020b6:	197b      	adds	r3, r7, r5
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d000      	beq.n	80020c2 <bma400_set_device_conf+0x3e>
 80020c0:	e10e      	b.n	80022e0 <bma400_set_device_conf+0x25c>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d100      	bne.n	80020ca <bma400_set_device_conf+0x46>
 80020c8:	e10a      	b.n	80022e0 <bma400_set_device_conf+0x25c>
    {

        /* Read the interrupt pin mapping configurations */
        rslt = bma400_get_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 80020ca:	197c      	adds	r4, r7, r5
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	19b9      	adds	r1, r7, r6
 80020d0:	2203      	movs	r2, #3
 80020d2:	2021      	movs	r0, #33	@ 0x21
 80020d4:	f7ff fe56 	bl	8001d84 <bma400_get_regs>
 80020d8:	0003      	movs	r3, r0
 80020da:	7023      	strb	r3, [r4, #0]

        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 80020dc:	2314      	movs	r3, #20
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	2200      	movs	r2, #0
 80020e2:	801a      	strh	r2, [r3, #0]
 80020e4:	e0db      	b.n	800229e <bma400_set_device_conf+0x21a>
        {
            switch (conf[idx].type)
 80020e6:	2314      	movs	r3, #20
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	881a      	ldrh	r2, [r3, #0]
 80020ec:	0013      	movs	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	189b      	adds	r3, r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	001a      	movs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	189b      	adds	r3, r3, r2
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d900      	bls.n	8002102 <bma400_set_device_conf+0x7e>
 8002100:	e0bf      	b.n	8002282 <bma400_set_device_conf+0x1fe>
 8002102:	009a      	lsls	r2, r3, #2
 8002104:	4b7c      	ldr	r3, [pc, #496]	@ (80022f8 <bma400_set_device_conf+0x274>)
 8002106:	18d3      	adds	r3, r2, r3
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	469f      	mov	pc, r3
            {
                case BMA400_AUTOWAKEUP_TIMEOUT:
                    rslt = set_autowakeup_timeout(&conf[idx].param.auto_wakeup, dev);
 800210c:	2314      	movs	r3, #20
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	881a      	ldrh	r2, [r3, #0]
 8002112:	0013      	movs	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	189b      	adds	r3, r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	001a      	movs	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	189b      	adds	r3, r3, r2
 8002120:	3302      	adds	r3, #2
 8002122:	2217      	movs	r2, #23
 8002124:	18bc      	adds	r4, r7, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	0011      	movs	r1, r2
 800212a:	0018      	movs	r0, r3
 800212c:	f000 fb56 	bl	80027dc <set_autowakeup_timeout>
 8002130:	0003      	movs	r3, r0
 8002132:	7023      	strb	r3, [r4, #0]
                    break;
 8002134:	e0ad      	b.n	8002292 <bma400_set_device_conf+0x20e>
                case BMA400_AUTOWAKEUP_INT:
                    rslt = set_autowakeup_interrupt(&conf[idx].param.wakeup, dev);
 8002136:	2514      	movs	r5, #20
 8002138:	197b      	adds	r3, r7, r5
 800213a:	881a      	ldrh	r2, [r3, #0]
 800213c:	0013      	movs	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	189b      	adds	r3, r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	001a      	movs	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	189b      	adds	r3, r3, r2
 800214a:	3302      	adds	r3, #2
 800214c:	2617      	movs	r6, #23
 800214e:	19bc      	adds	r4, r7, r6
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	0011      	movs	r1, r2
 8002154:	0018      	movs	r0, r3
 8002156:	f000 fbdd 	bl	8002914 <set_autowakeup_interrupt>
 800215a:	0003      	movs	r3, r0
 800215c:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 800215e:	19bb      	adds	r3, r7, r6
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	b25b      	sxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d000      	beq.n	800216a <bma400_set_device_conf+0xe6>
 8002168:	e090      	b.n	800228c <bma400_set_device_conf+0x208>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_WAKEUP_INT_MAP, conf[idx].param.wakeup.int_chan);
 800216a:	197b      	adds	r3, r7, r5
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	0013      	movs	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	189b      	adds	r3, r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	001a      	movs	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	189b      	adds	r3, r3, r2
 800217c:	7a5a      	ldrb	r2, [r3, #9]
 800217e:	2310      	movs	r3, #16
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2107      	movs	r1, #7
 8002184:	0018      	movs	r0, r3
 8002186:	f000 ffb7 	bl	80030f8 <map_int_pin>
                    }

                    break;
 800218a:	e07f      	b.n	800228c <bma400_set_device_conf+0x208>
                case BMA400_AUTO_LOW_POWER:
                    rslt = set_auto_low_power(&conf[idx].param.auto_lp, dev);
 800218c:	2314      	movs	r3, #20
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	881a      	ldrh	r2, [r3, #0]
 8002192:	0013      	movs	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	189b      	adds	r3, r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	001a      	movs	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	189b      	adds	r3, r3, r2
 80021a0:	3302      	adds	r3, #2
 80021a2:	2217      	movs	r2, #23
 80021a4:	18bc      	adds	r4, r7, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	0011      	movs	r1, r2
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 fc16 	bl	80029dc <set_auto_low_power>
 80021b0:	0003      	movs	r3, r0
 80021b2:	7023      	strb	r3, [r4, #0]
                    break;
 80021b4:	e06d      	b.n	8002292 <bma400_set_device_conf+0x20e>
                case BMA400_INT_PIN_CONF:
                    rslt = set_int_pin_conf(conf[idx].param.int_conf, dev);
 80021b6:	2314      	movs	r3, #20
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	881a      	ldrh	r2, [r3, #0]
 80021bc:	0013      	movs	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	189b      	adds	r3, r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	001a      	movs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	189b      	adds	r3, r3, r2
 80021ca:	2217      	movs	r2, #23
 80021cc:	18bc      	adds	r4, r7, r2
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	5a9a      	ldrh	r2, [r3, r2]
 80021d4:	2300      	movs	r3, #0
 80021d6:	0412      	lsls	r2, r2, #16
 80021d8:	0c12      	lsrs	r2, r2, #16
 80021da:	0c1b      	lsrs	r3, r3, #16
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	4313      	orrs	r3, r2
 80021e0:	0018      	movs	r0, r3
 80021e2:	f001 faa9 	bl	8003738 <set_int_pin_conf>
 80021e6:	0003      	movs	r3, r0
 80021e8:	7023      	strb	r3, [r4, #0]
                    break;
 80021ea:	e052      	b.n	8002292 <bma400_set_device_conf+0x20e>
                case BMA400_INT_OVERRUN_CONF:

                    /* Interrupt pin mapping */
                    map_int_pin(data_array, BMA400_INT_OVERRUN_MAP, conf[idx].param.overrun_int.int_chan);
 80021ec:	2314      	movs	r3, #20
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	881a      	ldrh	r2, [r3, #0]
 80021f2:	0013      	movs	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	001a      	movs	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	189b      	adds	r3, r3, r2
 8002200:	789a      	ldrb	r2, [r3, #2]
 8002202:	2310      	movs	r3, #16
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	210b      	movs	r1, #11
 8002208:	0018      	movs	r0, r3
 800220a:	f000 ff75 	bl	80030f8 <map_int_pin>
                    break;
 800220e:	e040      	b.n	8002292 <bma400_set_device_conf+0x20e>
                case BMA400_FIFO_CONF:
                    rslt = set_fifo_conf(&conf[idx].param.fifo_conf, dev);
 8002210:	2514      	movs	r5, #20
 8002212:	197b      	adds	r3, r7, r5
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	0013      	movs	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	189b      	adds	r3, r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	001a      	movs	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	189b      	adds	r3, r3, r2
 8002224:	3302      	adds	r3, #2
 8002226:	2617      	movs	r6, #23
 8002228:	19bc      	adds	r4, r7, r6
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	0011      	movs	r1, r2
 800222e:	0018      	movs	r0, r3
 8002230:	f001 fadb 	bl	80037ea <set_fifo_conf>
 8002234:	0003      	movs	r3, r0
 8002236:	7023      	strb	r3, [r4, #0]
                    if (rslt == BMA400_OK)
 8002238:	19bb      	adds	r3, r7, r6
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	b25b      	sxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d126      	bne.n	8002290 <bma400_set_device_conf+0x20c>
                    {
                        /* Interrupt pin mapping */
                        map_int_pin(data_array, BMA400_FIFO_WM_INT_MAP, conf[idx].param.fifo_conf.fifo_wm_channel);
 8002242:	197b      	adds	r3, r7, r5
 8002244:	881a      	ldrh	r2, [r3, #0]
 8002246:	0013      	movs	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	189b      	adds	r3, r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	001a      	movs	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	189b      	adds	r3, r3, r2
 8002254:	79da      	ldrb	r2, [r3, #7]
 8002256:	2410      	movs	r4, #16
 8002258:	193b      	adds	r3, r7, r4
 800225a:	2102      	movs	r1, #2
 800225c:	0018      	movs	r0, r3
 800225e:	f000 ff4b 	bl	80030f8 <map_int_pin>
                        map_int_pin(data_array, BMA400_FIFO_FULL_INT_MAP, conf[idx].param.fifo_conf.fifo_full_channel);
 8002262:	197b      	adds	r3, r7, r5
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	0013      	movs	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	189b      	adds	r3, r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	001a      	movs	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	189b      	adds	r3, r3, r2
 8002274:	799a      	ldrb	r2, [r3, #6]
 8002276:	193b      	adds	r3, r7, r4
 8002278:	2103      	movs	r1, #3
 800227a:	0018      	movs	r0, r3
 800227c:	f000 ff3c 	bl	80030f8 <map_int_pin>
                    }

                    break;
 8002280:	e006      	b.n	8002290 <bma400_set_device_conf+0x20c>
                default:
                    rslt = BMA400_E_INVALID_CONFIG;
 8002282:	2317      	movs	r3, #23
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	22fc      	movs	r2, #252	@ 0xfc
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e002      	b.n	8002292 <bma400_set_device_conf+0x20e>
                    break;
 800228c:	46c0      	nop			@ (mov r8, r8)
 800228e:	e000      	b.n	8002292 <bma400_set_device_conf+0x20e>
                    break;
 8002290:	46c0      	nop			@ (mov r8, r8)
        for (idx = 0; (idx < n_sett) && (rslt == BMA400_OK); idx++)
 8002292:	2114      	movs	r1, #20
 8002294:	187b      	adds	r3, r7, r1
 8002296:	881a      	ldrh	r2, [r3, #0]
 8002298:	187b      	adds	r3, r7, r1
 800229a:	3201      	adds	r2, #1
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	230b      	movs	r3, #11
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2214      	movs	r2, #20
 80022a8:	18ba      	adds	r2, r7, r2
 80022aa:	8812      	ldrh	r2, [r2, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d206      	bcs.n	80022be <bma400_set_device_conf+0x23a>
 80022b0:	2317      	movs	r3, #23
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d100      	bne.n	80022be <bma400_set_device_conf+0x23a>
 80022bc:	e713      	b.n	80020e6 <bma400_set_device_conf+0x62>
            }
        }

        if (rslt == BMA400_OK)
 80022be:	2217      	movs	r2, #23
 80022c0:	18bb      	adds	r3, r7, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10e      	bne.n	80022e8 <bma400_set_device_conf+0x264>
        {
            /* Set the interrupt pin mapping configurations */
            rslt = bma400_set_regs(BMA400_REG_INT_MAP, data_array, 3, dev);
 80022ca:	18bc      	adds	r4, r7, r2
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2210      	movs	r2, #16
 80022d0:	18b9      	adds	r1, r7, r2
 80022d2:	2203      	movs	r2, #3
 80022d4:	2021      	movs	r0, #33	@ 0x21
 80022d6:	f7ff fcd7 	bl	8001c88 <bma400_set_regs>
 80022da:	0003      	movs	r3, r0
 80022dc:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 80022de:	e003      	b.n	80022e8 <bma400_set_device_conf+0x264>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 80022e0:	2317      	movs	r3, #23
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	22ff      	movs	r2, #255	@ 0xff
 80022e6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80022e8:	2317      	movs	r3, #23
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b25b      	sxtb	r3, r3
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b007      	add	sp, #28
 80022f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f8:	08006e20 	.word	0x08006e20

080022fc <null_ptr_check>:
/************************************************************************************/
/*********************** Static function definitions **********************************/
/************************************************************************************/

static int8_t null_ptr_check(const struct bma400_dev *dev)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->intf_ptr == NULL))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <null_ptr_check+0x26>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <null_ptr_check+0x26>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <null_ptr_check+0x26>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d104      	bne.n	800232c <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BMA400_E_NULL_PTR;
 8002322:	230f      	movs	r3, #15
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	22ff      	movs	r2, #255	@ 0xff
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e003      	b.n	8002334 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMA400_OK;
 800232c:	230f      	movs	r3, #15
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002334:	230f      	movs	r3, #15
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b25b      	sxtb	r3, r3
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b004      	add	sp, #16
 8002342:	bd80      	pop	{r7, pc}

08002344 <set_sensor_conf>:

static int8_t set_sensor_conf(uint8_t *data, const struct bma400_sensor_conf *conf, struct bma400_dev *dev)
{
 8002344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMA400_E_INVALID_CONFIG;
 8002350:	2117      	movs	r1, #23
 8002352:	187b      	adds	r3, r7, r1
 8002354:	22fc      	movs	r2, #252	@ 0xfc
 8002356:	701a      	strb	r2, [r3, #0]
    uint8_t int_enable = 0;
 8002358:	2516      	movs	r5, #22
 800235a:	197b      	adds	r3, r7, r5
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
    enum bma400_int_chan int_map = BMA400_UNMAP_INT_PIN;
 8002360:	2615      	movs	r6, #21
 8002362:	19bb      	adds	r3, r7, r6
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]

    if (BMA400_ACCEL == conf->type)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d110      	bne.n	8002392 <set_sensor_conf+0x4e>
    {
        /* Setting Accel configurations */
        rslt = set_accel_conf(&conf->param.accel, dev);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	3302      	adds	r3, #2
 8002374:	187c      	adds	r4, r7, r1
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	0011      	movs	r1, r2
 800237a:	0018      	movs	r0, r3
 800237c:	f000 f8aa 	bl	80024d4 <set_accel_conf>
 8002380:	0003      	movs	r3, r0
 8002382:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_DATA_READY_INT_MAP;
 8002384:	197b      	adds	r3, r7, r5
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.accel.int_chan;
 800238a:	19bb      	adds	r3, r7, r6
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	7a12      	ldrb	r2, [r2, #8]
 8002390:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_TAP_INT == conf->type)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d113      	bne.n	80023c2 <set_sensor_conf+0x7e>
    {
        /* Setting tap configurations */
        rslt = set_tap_conf(&conf->param.tap, dev);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	3302      	adds	r3, #2
 800239e:	2217      	movs	r2, #23
 80023a0:	18bc      	adds	r4, r7, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	0011      	movs	r1, r2
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 fb96 	bl	8002ad8 <set_tap_conf>
 80023ac:	0003      	movs	r3, r0
 80023ae:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_TAP_INT_MAP;
 80023b0:	2316      	movs	r3, #22
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2209      	movs	r2, #9
 80023b6:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.tap.int_chan;
 80023b8:	2315      	movs	r3, #21
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	79d2      	ldrb	r2, [r2, #7]
 80023c0:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ACTIVITY_CHANGE_INT == conf->type)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d113      	bne.n	80023f2 <set_sensor_conf+0xae>
    {
        /* Setting activity change configurations */
        rslt = set_activity_change_conf(&conf->param.act_ch, dev);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3302      	adds	r3, #2
 80023ce:	2217      	movs	r2, #23
 80023d0:	18bc      	adds	r4, r7, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	0011      	movs	r1, r2
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 fc04 	bl	8002be4 <set_activity_change_conf>
 80023dc:	0003      	movs	r3, r0
 80023de:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ACT_CH_INT_MAP;
 80023e0:	2316      	movs	r3, #22
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2208      	movs	r2, #8
 80023e6:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.act_ch.int_chan;
 80023e8:	2315      	movs	r3, #21
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	7992      	ldrb	r2, [r2, #6]
 80023f0:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN1_INT == conf->type)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d113      	bne.n	8002422 <set_sensor_conf+0xde>
    {
        /* Setting generic int 1 configurations */
        rslt = set_gen1_int(&conf->param.gen_int, dev);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3302      	adds	r3, #2
 80023fe:	2217      	movs	r2, #23
 8002400:	18bc      	adds	r4, r7, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	0011      	movs	r1, r2
 8002406:	0018      	movs	r0, r3
 8002408:	f000 fc3e 	bl	8002c88 <set_gen1_int>
 800240c:	0003      	movs	r3, r0
 800240e:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN1_INT_MAP;
 8002410:	2316      	movs	r3, #22
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	2205      	movs	r2, #5
 8002416:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 8002418:	2315      	movs	r3, #21
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	7c92      	ldrb	r2, [r2, #18]
 8002420:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_GEN2_INT == conf->type)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b04      	cmp	r3, #4
 8002428:	d113      	bne.n	8002452 <set_sensor_conf+0x10e>
    {
        /* Setting generic int 2 configurations */
        rslt = set_gen2_int(&conf->param.gen_int, dev);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3302      	adds	r3, #2
 800242e:	2217      	movs	r2, #23
 8002430:	18bc      	adds	r4, r7, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	0011      	movs	r1, r2
 8002436:	0018      	movs	r0, r3
 8002438:	f000 fcf6 	bl	8002e28 <set_gen2_int>
 800243c:	0003      	movs	r3, r0
 800243e:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_GEN2_INT_MAP;
 8002440:	2316      	movs	r3, #22
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	2204      	movs	r2, #4
 8002446:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.gen_int.int_chan;
 8002448:	2315      	movs	r3, #21
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	7c92      	ldrb	r2, [r2, #18]
 8002450:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_ORIENT_CHANGE_INT == conf->type)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b05      	cmp	r3, #5
 8002458:	d113      	bne.n	8002482 <set_sensor_conf+0x13e>
    {
        /* Setting orient int configurations */
        rslt = set_orient_int(&conf->param.orient, dev);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3302      	adds	r3, #2
 800245e:	2217      	movs	r2, #23
 8002460:	18bc      	adds	r4, r7, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	0011      	movs	r1, r2
 8002466:	0018      	movs	r0, r3
 8002468:	f000 fdae 	bl	8002fc8 <set_orient_int>
 800246c:	0003      	movs	r3, r0
 800246e:	7023      	strb	r3, [r4, #0]
        int_enable = BMA400_ORIENT_CH_INT_MAP;
 8002470:	2316      	movs	r3, #22
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2206      	movs	r2, #6
 8002476:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.orient.int_chan;
 8002478:	2315      	movs	r3, #21
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	7b92      	ldrb	r2, [r2, #14]
 8002480:	701a      	strb	r2, [r3, #0]
    }

    if (BMA400_STEP_COUNTER_INT == conf->type)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b06      	cmp	r3, #6
 8002488:	d10c      	bne.n	80024a4 <set_sensor_conf+0x160>
    {
        rslt = BMA400_OK;
 800248a:	2317      	movs	r3, #23
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
        int_enable = BMA400_STEP_INT_MAP;
 8002492:	2316      	movs	r3, #22
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	220a      	movs	r2, #10
 8002498:	701a      	strb	r2, [r3, #0]
        int_map = conf->param.step_cnt.int_chan;
 800249a:	2315      	movs	r3, #21
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	7892      	ldrb	r2, [r2, #2]
 80024a2:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BMA400_OK)
 80024a4:	2317      	movs	r3, #23
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	b25b      	sxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <set_sensor_conf+0x180>
    {
        /* Int pin mapping settings */
        map_int_pin(data, int_enable, int_map);
 80024b0:	2315      	movs	r3, #21
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	781a      	ldrb	r2, [r3, #0]
 80024b6:	2316      	movs	r3, #22
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	7819      	ldrb	r1, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 fe1a 	bl	80030f8 <map_int_pin>
    }

    return rslt;
 80024c4:	2317      	movs	r3, #23
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b25b      	sxtb	r3, r3
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b007      	add	sp, #28
 80024d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024d4 <set_accel_conf>:

    return rslt;
}

static int8_t set_accel_conf(const struct bma400_acc_conf *accel_conf, struct bma400_dev *dev)
{
 80024d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3] = { 0, 0, 0xE0 };
 80024de:	250c      	movs	r5, #12
 80024e0:	197b      	adds	r3, r7, r5
 80024e2:	4a48      	ldr	r2, [pc, #288]	@ (8002604 <set_accel_conf+0x130>)
 80024e4:	8811      	ldrh	r1, [r2, #0]
 80024e6:	8019      	strh	r1, [r3, #0]
 80024e8:	7892      	ldrb	r2, [r2, #2]
 80024ea:	709a      	strb	r2, [r3, #2]

    /* Update the accel configurations from the user structure
     * accel_conf
     */
    rslt = bma400_get_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 80024ec:	260f      	movs	r6, #15
 80024ee:	19bc      	adds	r4, r7, r6
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	1979      	adds	r1, r7, r5
 80024f4:	2203      	movs	r2, #3
 80024f6:	2019      	movs	r0, #25
 80024f8:	f7ff fc44 	bl	8001d84 <bma400_get_regs>
 80024fc:	0003      	movs	r3, r0
 80024fe:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8002500:	0034      	movs	r4, r6
 8002502:	193b      	adds	r3, r7, r4
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	b25b      	sxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d173      	bne.n	80025f4 <set_accel_conf+0x120>
    {
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_FILT_1_BW, accel_conf->filt1_bw);
 800250c:	0028      	movs	r0, r5
 800250e:	183b      	adds	r3, r7, r0
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b25b      	sxtb	r3, r3
 8002514:	227f      	movs	r2, #127	@ 0x7f
 8002516:	4013      	ands	r3, r2
 8002518:	b25a      	sxtb	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	795b      	ldrb	r3, [r3, #5]
 800251e:	b25b      	sxtb	r3, r3
 8002520:	01db      	lsls	r3, r3, #7
 8002522:	b25b      	sxtb	r3, r3
 8002524:	4313      	orrs	r3, r2
 8002526:	b25b      	sxtb	r3, r3
 8002528:	b2da      	uxtb	r2, r3
 800252a:	183b      	adds	r3, r7, r0
 800252c:	701a      	strb	r2, [r3, #0]
        data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_OSR_LP, accel_conf->osr_lp);
 800252e:	183b      	adds	r3, r7, r0
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	b25b      	sxtb	r3, r3
 8002534:	2260      	movs	r2, #96	@ 0x60
 8002536:	4393      	bics	r3, r2
 8002538:	b25a      	sxtb	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	791b      	ldrb	r3, [r3, #4]
 800253e:	b25b      	sxtb	r3, r3
 8002540:	015b      	lsls	r3, r3, #5
 8002542:	b25b      	sxtb	r3, r3
 8002544:	2160      	movs	r1, #96	@ 0x60
 8002546:	400b      	ands	r3, r1
 8002548:	b25b      	sxtb	r3, r3
 800254a:	4313      	orrs	r3, r2
 800254c:	b25b      	sxtb	r3, r3
 800254e:	b2da      	uxtb	r2, r3
 8002550:	183b      	adds	r3, r7, r0
 8002552:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACCEL_RANGE, accel_conf->range);
 8002554:	183b      	adds	r3, r7, r0
 8002556:	785b      	ldrb	r3, [r3, #1]
 8002558:	b25b      	sxtb	r3, r3
 800255a:	223f      	movs	r2, #63	@ 0x3f
 800255c:	4013      	ands	r3, r2
 800255e:	b25a      	sxtb	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	785b      	ldrb	r3, [r3, #1]
 8002564:	b25b      	sxtb	r3, r3
 8002566:	019b      	lsls	r3, r3, #6
 8002568:	b25b      	sxtb	r3, r3
 800256a:	4313      	orrs	r3, r2
 800256c:	b25b      	sxtb	r3, r3
 800256e:	b2da      	uxtb	r2, r3
 8002570:	183b      	adds	r3, r7, r0
 8002572:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_OSR, accel_conf->osr);
 8002574:	183b      	adds	r3, r7, r0
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	b25b      	sxtb	r3, r3
 800257a:	2230      	movs	r2, #48	@ 0x30
 800257c:	4393      	bics	r3, r2
 800257e:	b25a      	sxtb	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	78db      	ldrb	r3, [r3, #3]
 8002584:	b25b      	sxtb	r3, r3
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	b25b      	sxtb	r3, r3
 800258a:	2130      	movs	r1, #48	@ 0x30
 800258c:	400b      	ands	r3, r1
 800258e:	b25b      	sxtb	r3, r3
 8002590:	4313      	orrs	r3, r2
 8002592:	b25b      	sxtb	r3, r3
 8002594:	b2da      	uxtb	r2, r3
 8002596:	183b      	adds	r3, r7, r0
 8002598:	705a      	strb	r2, [r3, #1]
        data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACCEL_ODR, accel_conf->odr);
 800259a:	183b      	adds	r3, r7, r0
 800259c:	785b      	ldrb	r3, [r3, #1]
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	220f      	movs	r2, #15
 80025a2:	4393      	bics	r3, r2
 80025a4:	b25a      	sxtb	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	210f      	movs	r1, #15
 80025ae:	400b      	ands	r3, r1
 80025b0:	b25b      	sxtb	r3, r3
 80025b2:	4313      	orrs	r3, r2
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	183b      	adds	r3, r7, r0
 80025ba:	705a      	strb	r2, [r3, #1]
        data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_DATA_FILTER, accel_conf->data_src);
 80025bc:	183b      	adds	r3, r7, r0
 80025be:	789b      	ldrb	r3, [r3, #2]
 80025c0:	b25b      	sxtb	r3, r3
 80025c2:	220c      	movs	r2, #12
 80025c4:	4393      	bics	r3, r2
 80025c6:	b25a      	sxtb	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	789b      	ldrb	r3, [r3, #2]
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	210c      	movs	r1, #12
 80025d4:	400b      	ands	r3, r1
 80025d6:	b25b      	sxtb	r3, r3
 80025d8:	4313      	orrs	r3, r2
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	183b      	adds	r3, r7, r0
 80025e0:	709a      	strb	r2, [r3, #2]

        /* Set the accel configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ACCEL_CONFIG_0, data_array, 3, dev);
 80025e2:	193c      	adds	r4, r7, r4
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	1839      	adds	r1, r7, r0
 80025e8:	2203      	movs	r2, #3
 80025ea:	2019      	movs	r0, #25
 80025ec:	f7ff fb4c 	bl	8001c88 <bma400_set_regs>
 80025f0:	0003      	movs	r3, r0
 80025f2:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80025f4:	230f      	movs	r3, #15
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b25b      	sxtb	r3, r3
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b005      	add	sp, #20
 8002602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002604:	08006da0 	.word	0x08006da0

08002608 <get_accel_data>:

    return rslt;
}

static int8_t get_accel_data(uint8_t data_sel, struct bma400_sensor_data *accel, struct bma400_dev *dev)
{
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b08a      	sub	sp, #40	@ 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	240f      	movs	r4, #15
 8002614:	193b      	adds	r3, r7, r4
 8002616:	1c02      	adds	r2, r0, #0
 8002618:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t data_array[9] = { 0 };
 800261a:	2510      	movs	r5, #16
 800261c:	197b      	adds	r3, r7, r5
 800261e:	0018      	movs	r0, r3
 8002620:	2309      	movs	r3, #9
 8002622:	001a      	movs	r2, r3
 8002624:	2100      	movs	r1, #0
 8002626:	f004 f97f 	bl	8006928 <memset>
    uint8_t msb;
    uint8_t time_0;
    uint16_t time_1;
    uint32_t time_2;

    if (data_sel == BMA400_DATA_ONLY)
 800262a:	193b      	adds	r3, r7, r4
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10a      	bne.n	8002648 <get_accel_data+0x40>
    {
        /* Read the sensor data registers only */
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 6, dev);
 8002632:	2327      	movs	r3, #39	@ 0x27
 8002634:	18fc      	adds	r4, r7, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	1979      	adds	r1, r7, r5
 800263a:	2206      	movs	r2, #6
 800263c:	2004      	movs	r0, #4
 800263e:	f7ff fba1 	bl	8001d84 <bma400_get_regs>
 8002642:	0003      	movs	r3, r0
 8002644:	7023      	strb	r3, [r4, #0]
 8002646:	e014      	b.n	8002672 <get_accel_data+0x6a>
    }
    else if (data_sel == BMA400_DATA_SENSOR_TIME)
 8002648:	230f      	movs	r3, #15
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d10b      	bne.n	800266a <get_accel_data+0x62>
    {
        /* Read the sensor data along with sensor time */
        rslt = bma400_get_regs(BMA400_REG_ACCEL_DATA, data_array, 9, dev);
 8002652:	2327      	movs	r3, #39	@ 0x27
 8002654:	18fc      	adds	r4, r7, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2210      	movs	r2, #16
 800265a:	18b9      	adds	r1, r7, r2
 800265c:	2209      	movs	r2, #9
 800265e:	2004      	movs	r0, #4
 8002660:	f7ff fb90 	bl	8001d84 <bma400_get_regs>
 8002664:	0003      	movs	r3, r0
 8002666:	7023      	strb	r3, [r4, #0]
 8002668:	e003      	b.n	8002672 <get_accel_data+0x6a>
    }
    else
    {
        /* Invalid use of "data_sel" */
        rslt = BMA400_E_INVALID_CONFIG;
 800266a:	2327      	movs	r3, #39	@ 0x27
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	22fc      	movs	r2, #252	@ 0xfc
 8002670:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BMA400_OK)
 8002672:	2327      	movs	r3, #39	@ 0x27
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	b25b      	sxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d000      	beq.n	8002680 <get_accel_data+0x78>
 800267e:	e0a3      	b.n	80027c8 <get_accel_data+0x1c0>
    {
        lsb = data_array[0];
 8002680:	2110      	movs	r1, #16
 8002682:	187b      	adds	r3, r7, r1
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	2024      	movs	r0, #36	@ 0x24
 8002688:	183b      	adds	r3, r7, r0
 800268a:	801a      	strh	r2, [r3, #0]
        msb = data_array[1];
 800268c:	2423      	movs	r4, #35	@ 0x23
 800268e:	193b      	adds	r3, r7, r4
 8002690:	187a      	adds	r2, r7, r1
 8002692:	7852      	ldrb	r2, [r2, #1]
 8002694:	701a      	strb	r2, [r3, #0]

        /* accel X axis data */
        accel->x = (int16_t)(((uint16_t)msb * 256) + lsb);
 8002696:	193b      	adds	r3, r7, r4
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	b29a      	uxth	r2, r3
 80026a0:	183b      	adds	r3, r7, r0
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	18d3      	adds	r3, r2, r3
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	b21a      	sxth	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	801a      	strh	r2, [r3, #0]
        if (accel->x > 2047)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2200      	movs	r2, #0
 80026b2:	5e9a      	ldrsh	r2, [r3, r2]
 80026b4:	2380      	movs	r3, #128	@ 0x80
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	429a      	cmp	r2, r3
 80026ba:	db0a      	blt.n	80026d2 <get_accel_data+0xca>
        {
            /* Computing accel data negative value */
            accel->x = accel->x - 4096;
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2200      	movs	r2, #0
 80026c0:	5e9b      	ldrsh	r3, [r3, r2]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4a44      	ldr	r2, [pc, #272]	@ (80027d8 <get_accel_data+0x1d0>)
 80026c6:	4694      	mov	ip, r2
 80026c8:	4463      	add	r3, ip
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	801a      	strh	r2, [r3, #0]
        }

        lsb = data_array[2];
 80026d2:	2110      	movs	r1, #16
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	789a      	ldrb	r2, [r3, #2]
 80026d8:	2024      	movs	r0, #36	@ 0x24
 80026da:	183b      	adds	r3, r7, r0
 80026dc:	801a      	strh	r2, [r3, #0]
        msb = data_array[3];
 80026de:	2423      	movs	r4, #35	@ 0x23
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	187a      	adds	r2, r7, r1
 80026e4:	78d2      	ldrb	r2, [r2, #3]
 80026e6:	701a      	strb	r2, [r3, #0]

        /* accel Y axis data */
        accel->y = (int16_t)(((uint16_t)msb * 256) | lsb);
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	b21a      	sxth	r2, r3
 80026f4:	183b      	adds	r3, r7, r0
 80026f6:	2100      	movs	r1, #0
 80026f8:	5e5b      	ldrsh	r3, [r3, r1]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	805a      	strh	r2, [r3, #2]
        if (accel->y > 2047)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2202      	movs	r2, #2
 8002706:	5e9a      	ldrsh	r2, [r3, r2]
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	429a      	cmp	r2, r3
 800270e:	db0a      	blt.n	8002726 <get_accel_data+0x11e>
        {
            /* Computing accel data negative value */
            accel->y = accel->y - 4096;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2202      	movs	r2, #2
 8002714:	5e9b      	ldrsh	r3, [r3, r2]
 8002716:	b29b      	uxth	r3, r3
 8002718:	4a2f      	ldr	r2, [pc, #188]	@ (80027d8 <get_accel_data+0x1d0>)
 800271a:	4694      	mov	ip, r2
 800271c:	4463      	add	r3, ip
 800271e:	b29b      	uxth	r3, r3
 8002720:	b21a      	sxth	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	805a      	strh	r2, [r3, #2]
        }

        lsb = data_array[4];
 8002726:	2110      	movs	r1, #16
 8002728:	187b      	adds	r3, r7, r1
 800272a:	791a      	ldrb	r2, [r3, #4]
 800272c:	2024      	movs	r0, #36	@ 0x24
 800272e:	183b      	adds	r3, r7, r0
 8002730:	801a      	strh	r2, [r3, #0]
        msb = data_array[5];
 8002732:	2423      	movs	r4, #35	@ 0x23
 8002734:	193b      	adds	r3, r7, r4
 8002736:	187a      	adds	r2, r7, r1
 8002738:	7952      	ldrb	r2, [r2, #5]
 800273a:	701a      	strb	r2, [r3, #0]

        /* accel Z axis data */
        accel->z = (int16_t)(((uint16_t)msb * 256) | lsb);
 800273c:	193b      	adds	r3, r7, r4
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	b29b      	uxth	r3, r3
 8002746:	b21a      	sxth	r2, r3
 8002748:	183b      	adds	r3, r7, r0
 800274a:	2100      	movs	r1, #0
 800274c:	5e5b      	ldrsh	r3, [r3, r1]
 800274e:	4313      	orrs	r3, r2
 8002750:	b21a      	sxth	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	809a      	strh	r2, [r3, #4]
        if (accel->z > 2047)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2204      	movs	r2, #4
 800275a:	5e9a      	ldrsh	r2, [r3, r2]
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	429a      	cmp	r2, r3
 8002762:	db0a      	blt.n	800277a <get_accel_data+0x172>
        {
            /* Computing accel data negative value */
            accel->z = accel->z - 4096;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2204      	movs	r2, #4
 8002768:	5e9b      	ldrsh	r3, [r3, r2]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4a1a      	ldr	r2, [pc, #104]	@ (80027d8 <get_accel_data+0x1d0>)
 800276e:	4694      	mov	ip, r2
 8002770:	4463      	add	r3, ip
 8002772:	b29b      	uxth	r3, r3
 8002774:	b21a      	sxth	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	809a      	strh	r2, [r3, #4]
        }

        if (data_sel == BMA400_DATA_ONLY)
 800277a:	230f      	movs	r3, #15
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <get_accel_data+0x182>
        {
            /* Update sensortime as 0 */
            accel->sensortime = 0;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
        }

        if (data_sel == BMA400_DATA_SENSOR_TIME)
 800278a:	230f      	movs	r3, #15
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d119      	bne.n	80027c8 <get_accel_data+0x1c0>
        {
            /* Sensor-time data*/
            time_0 = data_array[6];
 8002794:	2022      	movs	r0, #34	@ 0x22
 8002796:	183b      	adds	r3, r7, r0
 8002798:	2110      	movs	r1, #16
 800279a:	187a      	adds	r2, r7, r1
 800279c:	7992      	ldrb	r2, [r2, #6]
 800279e:	701a      	strb	r2, [r3, #0]
            time_1 = ((uint16_t)data_array[7] << 8);
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	79db      	ldrb	r3, [r3, #7]
 80027a4:	001a      	movs	r2, r3
 80027a6:	2420      	movs	r4, #32
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	0212      	lsls	r2, r2, #8
 80027ac:	801a      	strh	r2, [r3, #0]
            time_2 = ((uint32_t)data_array[8] << 16);
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	7a1b      	ldrb	r3, [r3, #8]
 80027b2:	041b      	lsls	r3, r3, #16
 80027b4:	61fb      	str	r3, [r7, #28]
            accel->sensortime = (uint32_t)(time_2 + time_1 + time_0);
 80027b6:	193b      	adds	r3, r7, r4
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	18d2      	adds	r2, r2, r3
 80027be:	183b      	adds	r3, r7, r0
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	18d2      	adds	r2, r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	609a      	str	r2, [r3, #8]
        }
    }

    return rslt;
 80027c8:	2327      	movs	r3, #39	@ 0x27
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b25b      	sxtb	r3, r3
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b00a      	add	sp, #40	@ 0x28
 80027d6:	bdb0      	pop	{r4, r5, r7, pc}
 80027d8:	fffff000 	.word	0xfffff000

080027dc <set_autowakeup_timeout>:

static int8_t set_autowakeup_timeout(const struct bma400_auto_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 80027dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2];
    uint8_t lsb;
    uint8_t msb;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &data_array[1], 1, dev);
 80027e6:	260f      	movs	r6, #15
 80027e8:	19bc      	adds	r4, r7, r6
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	2508      	movs	r5, #8
 80027ee:	197b      	adds	r3, r7, r5
 80027f0:	1c59      	adds	r1, r3, #1
 80027f2:	0013      	movs	r3, r2
 80027f4:	2201      	movs	r2, #1
 80027f6:	202d      	movs	r0, #45	@ 0x2d
 80027f8:	f7ff fac4 	bl	8001d84 <bma400_get_regs>
 80027fc:	0003      	movs	r3, r0
 80027fe:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8002800:	0034      	movs	r4, r6
 8002802:	193b      	adds	r3, r7, r4
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	b25b      	sxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d13e      	bne.n	800288a <set_autowakeup_timeout+0xae>
    {
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT, wakeup_conf->wakeup_timeout);
 800280c:	0028      	movs	r0, r5
 800280e:	183b      	adds	r3, r7, r0
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	b25b      	sxtb	r3, r3
 8002814:	2204      	movs	r2, #4
 8002816:	4393      	bics	r3, r2
 8002818:	b25a      	sxtb	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b25b      	sxtb	r3, r3
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	b25b      	sxtb	r3, r3
 8002824:	2104      	movs	r1, #4
 8002826:	400b      	ands	r3, r1
 8002828:	b25b      	sxtb	r3, r3
 800282a:	4313      	orrs	r3, r2
 800282c:	b25b      	sxtb	r3, r3
 800282e:	b2da      	uxtb	r2, r3
 8002830:	183b      	adds	r3, r7, r0
 8002832:	705a      	strb	r2, [r3, #1]

        /* LSB of timeout threshold */
        lsb = BMA400_GET_BITS_POS_0(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_LSB);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	885b      	ldrh	r3, [r3, #2]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	250e      	movs	r5, #14
 800283c:	197b      	adds	r3, r7, r5
 800283e:	210f      	movs	r1, #15
 8002840:	400a      	ands	r2, r1
 8002842:	701a      	strb	r2, [r3, #0]

        /* MSB of timeout threshold */
        msb = BMA400_GET_BITS(wakeup_conf->timeout_thres, BMA400_WAKEUP_THRES_MSB);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	885b      	ldrh	r3, [r3, #2]
 8002848:	111a      	asrs	r2, r3, #4
 800284a:	210d      	movs	r1, #13
 800284c:	187b      	adds	r3, r7, r1
 800284e:	701a      	strb	r2, [r3, #0]

        /* Set the value in the data_array */
        data_array[0] = msb;
 8002850:	183b      	adds	r3, r7, r0
 8002852:	187a      	adds	r2, r7, r1
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	701a      	strb	r2, [r3, #0]
        data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_WAKEUP_TIMEOUT_THRES, lsb);
 8002858:	183b      	adds	r3, r7, r0
 800285a:	785b      	ldrb	r3, [r3, #1]
 800285c:	b25b      	sxtb	r3, r3
 800285e:	220f      	movs	r2, #15
 8002860:	4013      	ands	r3, r2
 8002862:	b25a      	sxtb	r2, r3
 8002864:	197b      	adds	r3, r7, r5
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b25b      	sxtb	r3, r3
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	b25b      	sxtb	r3, r3
 800286e:	4313      	orrs	r3, r2
 8002870:	b25b      	sxtb	r3, r3
 8002872:	b2da      	uxtb	r2, r3
 8002874:	183b      	adds	r3, r7, r0
 8002876:	705a      	strb	r2, [r3, #1]
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_0, data_array, 2, dev);
 8002878:	193c      	adds	r4, r7, r4
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	1839      	adds	r1, r7, r0
 800287e:	2202      	movs	r2, #2
 8002880:	202c      	movs	r0, #44	@ 0x2c
 8002882:	f7ff fa01 	bl	8001c88 <bma400_set_regs>
 8002886:	0003      	movs	r3, r0
 8002888:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800288a:	230f      	movs	r3, #15
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b25b      	sxtb	r3, r3
}
 8002892:	0018      	movs	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	b005      	add	sp, #20
 8002898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800289a <set_auto_wakeup>:

    return rslt;
}

int8_t set_auto_wakeup(uint8_t conf, struct bma400_dev *dev)
{
 800289a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	0002      	movs	r2, r0
 80028a2:	6039      	str	r1, [r7, #0]
 80028a4:	1dfb      	adds	r3, r7, #7
 80028a6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 80028a8:	260f      	movs	r6, #15
 80028aa:	19bc      	adds	r4, r7, r6
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	250e      	movs	r5, #14
 80028b0:	1979      	adds	r1, r7, r5
 80028b2:	2201      	movs	r2, #1
 80028b4:	202d      	movs	r0, #45	@ 0x2d
 80028b6:	f7ff fa65 	bl	8001d84 <bma400_get_regs>
 80028ba:	0003      	movs	r3, r0
 80028bc:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 80028be:	0034      	movs	r4, r6
 80028c0:	193b      	adds	r3, r7, r4
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	b25b      	sxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d11c      	bne.n	8002904 <set_auto_wakeup+0x6a>
    {
        reg_data = BMA400_SET_BITS(reg_data, BMA400_WAKEUP_INTERRUPT, conf);
 80028ca:	0028      	movs	r0, r5
 80028cc:	183b      	adds	r3, r7, r0
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	2202      	movs	r2, #2
 80028d4:	4393      	bics	r3, r2
 80028d6:	b25a      	sxtb	r2, r3
 80028d8:	1dfb      	adds	r3, r7, #7
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	18db      	adds	r3, r3, r3
 80028e0:	b25b      	sxtb	r3, r3
 80028e2:	2102      	movs	r1, #2
 80028e4:	400b      	ands	r3, r1
 80028e6:	b25b      	sxtb	r3, r3
 80028e8:	4313      	orrs	r3, r2
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	183b      	adds	r3, r7, r0
 80028f0:	701a      	strb	r2, [r3, #0]

        /* Enabling the Auto wakeup interrupt */
        rslt = bma400_set_regs(BMA400_REG_AUTOWAKEUP_1, &reg_data, 1, dev);
 80028f2:	193c      	adds	r4, r7, r4
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	1839      	adds	r1, r7, r0
 80028f8:	2201      	movs	r2, #1
 80028fa:	202d      	movs	r0, #45	@ 0x2d
 80028fc:	f7ff f9c4 	bl	8001c88 <bma400_set_regs>
 8002900:	0003      	movs	r3, r0
 8002902:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002904:	230f      	movs	r3, #15
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	b25b      	sxtb	r3, r3
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b005      	add	sp, #20
 8002912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002914 <set_autowakeup_interrupt>:

static int8_t set_autowakeup_interrupt(const struct bma400_wakeup_conf *wakeup_conf, struct bma400_dev *dev)
{
 8002914:	b5b0      	push	{r4, r5, r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[5] = { 0 };
 800291e:	2408      	movs	r4, #8
 8002920:	193b      	adds	r3, r7, r4
 8002922:	0018      	movs	r0, r3
 8002924:	2305      	movs	r3, #5
 8002926:	001a      	movs	r2, r3
 8002928:	2100      	movs	r1, #0
 800292a:	f003 fffd 	bl	8006928 <memset>

    /* Set the wakeup reference update */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_WKUP_REF_UPDATE, wakeup_conf->wakeup_ref_update);
 800292e:	0020      	movs	r0, r4
 8002930:	183b      	adds	r3, r7, r0
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	b25b      	sxtb	r3, r3
 8002936:	2203      	movs	r2, #3
 8002938:	4393      	bics	r3, r2
 800293a:	b25a      	sxtb	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b25b      	sxtb	r3, r3
 8002942:	2103      	movs	r1, #3
 8002944:	400b      	ands	r3, r1
 8002946:	b25b      	sxtb	r3, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	b25b      	sxtb	r3, r3
 800294c:	b2da      	uxtb	r2, r3
 800294e:	183b      	adds	r3, r7, r0
 8002950:	701a      	strb	r2, [r3, #0]

    /* Set the number of samples for interrupt condition evaluation */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_SAMPLE_COUNT, wakeup_conf->sample_count);
 8002952:	183b      	adds	r3, r7, r0
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	b25b      	sxtb	r3, r3
 8002958:	221c      	movs	r2, #28
 800295a:	4393      	bics	r3, r2
 800295c:	b25a      	sxtb	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	785b      	ldrb	r3, [r3, #1]
 8002962:	b25b      	sxtb	r3, r3
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	b25b      	sxtb	r3, r3
 8002968:	211c      	movs	r1, #28
 800296a:	400b      	ands	r3, r1
 800296c:	b25b      	sxtb	r3, r3
 800296e:	4313      	orrs	r3, r2
 8002970:	b25b      	sxtb	r3, r3
 8002972:	b2da      	uxtb	r2, r3
 8002974:	183b      	adds	r3, r7, r0
 8002976:	701a      	strb	r2, [r3, #0]

    /* Enable low power wake-up interrupt for X,Y,Z axes*/
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_WAKEUP_EN_AXES, wakeup_conf->wakeup_axes_en);
 8002978:	183b      	adds	r3, r7, r0
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b25b      	sxtb	r3, r3
 800297e:	221f      	movs	r2, #31
 8002980:	4013      	ands	r3, r2
 8002982:	b25a      	sxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	789b      	ldrb	r3, [r3, #2]
 8002988:	b25b      	sxtb	r3, r3
 800298a:	015b      	lsls	r3, r3, #5
 800298c:	b25b      	sxtb	r3, r3
 800298e:	4313      	orrs	r3, r2
 8002990:	b25b      	sxtb	r3, r3
 8002992:	b2da      	uxtb	r2, r3
 8002994:	0001      	movs	r1, r0
 8002996:	187b      	adds	r3, r7, r1
 8002998:	701a      	strb	r2, [r3, #0]

    /* Set interrupt threshold configuration  */
    data_array[1] = wakeup_conf->int_wkup_threshold;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	78da      	ldrb	r2, [r3, #3]
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	705a      	strb	r2, [r3, #1]

    /* Set the reference acceleration x-axis for the wake-up interrupt */
    data_array[2] = wakeup_conf->int_wkup_ref_x;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	791a      	ldrb	r2, [r3, #4]
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	709a      	strb	r2, [r3, #2]

    /* Set the reference acceleration y-axis for the wake-up interrupt */
    data_array[3] = wakeup_conf->int_wkup_ref_y;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	795a      	ldrb	r2, [r3, #5]
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	70da      	strb	r2, [r3, #3]

    /* Set the reference acceleration z-axis for the wake-up interrupt */
    data_array[4] = wakeup_conf->int_wkup_ref_z;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	799a      	ldrb	r2, [r3, #6]
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	711a      	strb	r2, [r3, #4]

    /* Set the wakeup interrupt configurations in the sensor */
    rslt = bma400_set_regs(BMA400_REG_WAKEUP_INT_CONF_0, data_array, 5, dev);
 80029ba:	250f      	movs	r5, #15
 80029bc:	197c      	adds	r4, r7, r5
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	1879      	adds	r1, r7, r1
 80029c2:	2205      	movs	r2, #5
 80029c4:	202f      	movs	r0, #47	@ 0x2f
 80029c6:	f7ff f95f 	bl	8001c88 <bma400_set_regs>
 80029ca:	0003      	movs	r3, r0
 80029cc:	7023      	strb	r3, [r4, #0]

    return rslt;
 80029ce:	197b      	adds	r3, r7, r5
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	b25b      	sxtb	r3, r3
}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b004      	add	sp, #16
 80029da:	bdb0      	pop	{r4, r5, r7, pc}

080029dc <set_auto_low_power>:

    return rslt;
}

static int8_t set_auto_low_power(const struct bma400_auto_lp_conf *auto_lp_conf, struct bma400_dev *dev)
{
 80029dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t timeout_msb;
    uint8_t timeout_lsb;

    rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 80029e6:	250f      	movs	r5, #15
 80029e8:	197c      	adds	r4, r7, r5
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	260d      	movs	r6, #13
 80029ee:	19b9      	adds	r1, r7, r6
 80029f0:	2201      	movs	r2, #1
 80029f2:	202b      	movs	r0, #43	@ 0x2b
 80029f4:	f7ff f9c6 	bl	8001d84 <bma400_get_regs>
 80029f8:	0003      	movs	r3, r0
 80029fa:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 80029fc:	0028      	movs	r0, r5
 80029fe:	183b      	adds	r3, r7, r0
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b25b      	sxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d15f      	bne.n	8002ac8 <set_auto_low_power+0xec>
    {
        reg_data = BMA400_SET_BITS_POS_0(reg_data, BMA400_AUTO_LOW_POW, auto_lp_conf->auto_low_power_trigger);
 8002a08:	19bb      	adds	r3, r7, r6
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b25b      	sxtb	r3, r3
 8002a0e:	220f      	movs	r2, #15
 8002a10:	4393      	bics	r3, r2
 8002a12:	b25a      	sxtb	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b25b      	sxtb	r3, r3
 8002a1a:	210f      	movs	r1, #15
 8002a1c:	400b      	ands	r3, r1
 8002a1e:	b25b      	sxtb	r3, r3
 8002a20:	4313      	orrs	r3, r2
 8002a22:	b25b      	sxtb	r3, r3
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	19bb      	adds	r3, r7, r6
 8002a28:	701a      	strb	r2, [r3, #0]

        /* If auto Low power timeout threshold is enabled */
        if (auto_lp_conf->auto_low_power_trigger & 0x0C)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	001a      	movs	r2, r3
 8002a30:	230c      	movs	r3, #12
 8002a32:	4013      	ands	r3, r2
 8002a34:	d038      	beq.n	8002aa8 <set_auto_low_power+0xcc>
        {
            rslt = bma400_get_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8002a36:	0005      	movs	r5, r0
 8002a38:	183c      	adds	r4, r7, r0
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	220c      	movs	r2, #12
 8002a3e:	18b9      	adds	r1, r7, r2
 8002a40:	2201      	movs	r2, #1
 8002a42:	202a      	movs	r0, #42	@ 0x2a
 8002a44:	f7ff f99e 	bl	8001d84 <bma400_get_regs>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	7023      	strb	r3, [r4, #0]
            if (rslt == BMA400_OK)
 8002a4c:	0028      	movs	r0, r5
 8002a4e:	183b      	adds	r3, r7, r0
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d127      	bne.n	8002aa8 <set_auto_low_power+0xcc>
            {
                /* Compute the timeout threshold MSB value */
                timeout_msb = BMA400_GET_BITS(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	885b      	ldrh	r3, [r3, #2]
 8002a5c:	111b      	asrs	r3, r3, #4
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	250c      	movs	r5, #12
 8002a62:	197b      	adds	r3, r7, r5
 8002a64:	701a      	strb	r2, [r3, #0]

                /* Compute the timeout threshold LSB value */
                timeout_lsb = BMA400_GET_BITS_POS_0(auto_lp_conf->auto_lp_timeout_threshold, BMA400_AUTO_LP_THRES_LSB);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	885b      	ldrh	r3, [r3, #2]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	240e      	movs	r4, #14
 8002a6e:	193b      	adds	r3, r7, r4
 8002a70:	210f      	movs	r1, #15
 8002a72:	400a      	ands	r2, r1
 8002a74:	701a      	strb	r2, [r3, #0]
                reg_data = BMA400_SET_BITS(reg_data, BMA400_AUTO_LP_TIMEOUT_LSB, timeout_lsb);
 8002a76:	19bb      	adds	r3, r7, r6
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b25b      	sxtb	r3, r3
 8002a7c:	220f      	movs	r2, #15
 8002a7e:	4013      	ands	r3, r2
 8002a80:	b25a      	sxtb	r2, r3
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	b25b      	sxtb	r3, r3
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	b25b      	sxtb	r3, r3
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	19bb      	adds	r3, r7, r6
 8002a94:	701a      	strb	r2, [r3, #0]

                /* Set the timeout threshold MSB value */
                rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_0, &timeout_msb, 1, dev);
 8002a96:	183c      	adds	r4, r7, r0
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	1979      	adds	r1, r7, r5
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	202a      	movs	r0, #42	@ 0x2a
 8002aa0:	f7ff f8f2 	bl	8001c88 <bma400_set_regs>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	7023      	strb	r3, [r4, #0]
            }
        }

        if (rslt == BMA400_OK)
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	18bb      	adds	r3, r7, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b25b      	sxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <set_auto_low_power+0xec>
        {
            /* Set the Auto low power configurations */
            rslt = bma400_set_regs(BMA400_REG_AUTO_LOW_POW_1, &reg_data, 1, dev);
 8002ab4:	18bc      	adds	r4, r7, r2
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	220d      	movs	r2, #13
 8002aba:	18b9      	adds	r1, r7, r2
 8002abc:	2201      	movs	r2, #1
 8002abe:	202b      	movs	r0, #43	@ 0x2b
 8002ac0:	f7ff f8e2 	bl	8001c88 <bma400_set_regs>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8002ac8:	230f      	movs	r3, #15
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b25b      	sxtb	r3, r3
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b005      	add	sp, #20
 8002ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ad8 <set_tap_conf>:

    return rslt;
}

static int8_t set_tap_conf(const struct bma400_tap_conf *tap_set, struct bma400_dev *dev)
{
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[2] = { 0, 0 };
 8002ae2:	250c      	movs	r5, #12
 8002ae4:	197b      	adds	r3, r7, r5
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	801a      	strh	r2, [r3, #0]

    rslt = bma400_get_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8002aea:	260f      	movs	r6, #15
 8002aec:	19bc      	adds	r4, r7, r6
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	1979      	adds	r1, r7, r5
 8002af2:	2202      	movs	r2, #2
 8002af4:	2057      	movs	r0, #87	@ 0x57
 8002af6:	f7ff f945 	bl	8001d84 <bma400_get_regs>
 8002afa:	0003      	movs	r3, r0
 8002afc:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 8002afe:	0034      	movs	r4, r6
 8002b00:	193b      	adds	r3, r7, r4
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	b25b      	sxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d164      	bne.n	8002bd4 <set_tap_conf+0xfc>
    {
        /* Set the axis to sense for tap */
        reg_data[0] = BMA400_SET_BITS(reg_data[0], BMA400_TAP_AXES_EN, tap_set->axes_sel);
 8002b0a:	0028      	movs	r0, r5
 8002b0c:	183b      	adds	r3, r7, r0
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	2218      	movs	r2, #24
 8002b14:	4393      	bics	r3, r2
 8002b16:	b25a      	sxtb	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b25b      	sxtb	r3, r3
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	2118      	movs	r1, #24
 8002b24:	400b      	ands	r3, r1
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	b25b      	sxtb	r3, r3
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	183b      	adds	r3, r7, r0
 8002b30:	701a      	strb	r2, [r3, #0]

        /* Set the threshold for tap sensing */
        reg_data[0] = BMA400_SET_BITS_POS_0(reg_data[0], BMA400_TAP_SENSITIVITY, tap_set->sensitivity);
 8002b32:	183b      	adds	r3, r7, r0
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	2207      	movs	r2, #7
 8002b3a:	4393      	bics	r3, r2
 8002b3c:	b25a      	sxtb	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	785b      	ldrb	r3, [r3, #1]
 8002b42:	b25b      	sxtb	r3, r3
 8002b44:	2107      	movs	r1, #7
 8002b46:	400b      	ands	r3, r1
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	b25b      	sxtb	r3, r3
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	183b      	adds	r3, r7, r0
 8002b52:	701a      	strb	r2, [r3, #0]

        /* Set the Quiet_dt setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET_DT, tap_set->quiet_dt);
 8002b54:	183b      	adds	r3, r7, r0
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	2230      	movs	r2, #48	@ 0x30
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	b25a      	sxtb	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	791b      	ldrb	r3, [r3, #4]
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	2130      	movs	r1, #48	@ 0x30
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	b25b      	sxtb	r3, r3
 8002b70:	4313      	orrs	r3, r2
 8002b72:	b25b      	sxtb	r3, r3
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	183b      	adds	r3, r7, r0
 8002b78:	705a      	strb	r2, [r3, #1]

        /* Set the Quiet setting */
        reg_data[1] = BMA400_SET_BITS(reg_data[1], BMA400_TAP_QUIET, tap_set->quiet);
 8002b7a:	183b      	adds	r3, r7, r0
 8002b7c:	785b      	ldrb	r3, [r3, #1]
 8002b7e:	b25b      	sxtb	r3, r3
 8002b80:	220c      	movs	r2, #12
 8002b82:	4393      	bics	r3, r2
 8002b84:	b25a      	sxtb	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	78db      	ldrb	r3, [r3, #3]
 8002b8a:	b25b      	sxtb	r3, r3
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	210c      	movs	r1, #12
 8002b92:	400b      	ands	r3, r1
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	183b      	adds	r3, r7, r0
 8002b9e:	705a      	strb	r2, [r3, #1]

        /* Set the tics_th setting */
        reg_data[1] = BMA400_SET_BITS_POS_0(reg_data[1], BMA400_TAP_TICS_TH, tap_set->tics_th);
 8002ba0:	183b      	adds	r3, r7, r0
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	4393      	bics	r3, r2
 8002baa:	b25a      	sxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	789b      	ldrb	r3, [r3, #2]
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	2103      	movs	r1, #3
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	b25b      	sxtb	r3, r3
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	b25b      	sxtb	r3, r3
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	183b      	adds	r3, r7, r0
 8002bc0:	705a      	strb	r2, [r3, #1]

        /* Set the TAP configuration in the sensor*/
        rslt = bma400_set_regs(BMA400_REG_TAP_CONFIG, reg_data, 2, dev);
 8002bc2:	193c      	adds	r4, r7, r4
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	1839      	adds	r1, r7, r0
 8002bc8:	2202      	movs	r2, #2
 8002bca:	2057      	movs	r0, #87	@ 0x57
 8002bcc:	f7ff f85c 	bl	8001c88 <bma400_set_regs>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002bd4:	230f      	movs	r3, #15
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	b25b      	sxtb	r3, r3
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b005      	add	sp, #20
 8002be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002be4 <set_activity_change_conf>:

    return rslt;
}

static int8_t set_activity_change_conf(const struct bma400_act_ch_conf *act_ch_set, struct bma400_dev *dev)
{
 8002be4:	b5b0      	push	{r4, r5, r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[2] = { 0 };
 8002bee:	200c      	movs	r0, #12
 8002bf0:	183b      	adds	r3, r7, r0
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	801a      	strh	r2, [r3, #0]

    /* Set the activity change threshold */
    data_array[0] = act_ch_set->act_ch_thres;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	183b      	adds	r3, r7, r0
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Set the axis to sense for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_AXES_EN, act_ch_set->axes_sel);
 8002bfe:	183b      	adds	r3, r7, r0
 8002c00:	785b      	ldrb	r3, [r3, #1]
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	221f      	movs	r2, #31
 8002c06:	4013      	ands	r3, r2
 8002c08:	b25a      	sxtb	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	785b      	ldrb	r3, [r3, #1]
 8002c0e:	b25b      	sxtb	r3, r3
 8002c10:	015b      	lsls	r3, r3, #5
 8002c12:	b25b      	sxtb	r3, r3
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	183b      	adds	r3, r7, r0
 8002c1c:	705a      	strb	r2, [r3, #1]

    /* Set the data source for activity change */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_ACT_CH_DATA_SRC, act_ch_set->data_source);
 8002c1e:	183b      	adds	r3, r7, r0
 8002c20:	785b      	ldrb	r3, [r3, #1]
 8002c22:	b25b      	sxtb	r3, r3
 8002c24:	2210      	movs	r2, #16
 8002c26:	4393      	bics	r3, r2
 8002c28:	b25a      	sxtb	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	789b      	ldrb	r3, [r3, #2]
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	b25b      	sxtb	r3, r3
 8002c34:	2110      	movs	r1, #16
 8002c36:	400b      	ands	r3, r1
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	b25b      	sxtb	r3, r3
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	183b      	adds	r3, r7, r0
 8002c42:	705a      	strb	r2, [r3, #1]

    /* Set the Number of sample points(NPTS)
     * for sensing activity change
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_ACT_CH_NPTS, act_ch_set->act_ch_ntps);
 8002c44:	183b      	adds	r3, r7, r0
 8002c46:	785b      	ldrb	r3, [r3, #1]
 8002c48:	b25b      	sxtb	r3, r3
 8002c4a:	220f      	movs	r2, #15
 8002c4c:	4393      	bics	r3, r2
 8002c4e:	b25a      	sxtb	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	78db      	ldrb	r3, [r3, #3]
 8002c54:	b25b      	sxtb	r3, r3
 8002c56:	210f      	movs	r1, #15
 8002c58:	400b      	ands	r3, r1
 8002c5a:	b25b      	sxtb	r3, r3
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	705a      	strb	r2, [r3, #1]

    /* Set the Activity change configuration in the sensor*/
    rslt = bma400_set_regs(BMA400_REG_ACT_CH_CONFIG_0, data_array, 2, dev);
 8002c66:	250f      	movs	r5, #15
 8002c68:	197c      	adds	r4, r7, r5
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	1839      	adds	r1, r7, r0
 8002c6e:	2202      	movs	r2, #2
 8002c70:	2055      	movs	r0, #85	@ 0x55
 8002c72:	f7ff f809 	bl	8001c88 <bma400_set_regs>
 8002c76:	0003      	movs	r3, r0
 8002c78:	7023      	strb	r3, [r4, #0]

    return rslt;
 8002c7a:	197b      	adds	r3, r7, r5
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b25b      	sxtb	r3, r3
}
 8002c80:	0018      	movs	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b004      	add	sp, #16
 8002c86:	bdb0      	pop	{r4, r5, r7, pc}

08002c88 <set_gen1_int>:

    return rslt;
}

static int8_t set_gen1_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 8002c92:	240c      	movs	r4, #12
 8002c94:	193b      	adds	r3, r7, r4
 8002c96:	0018      	movs	r0, r3
 8002c98:	230b      	movs	r3, #11
 8002c9a:	001a      	movs	r2, r3
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	f003 fe43 	bl	8006928 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8002ca2:	0020      	movs	r0, r4
 8002ca4:	183b      	adds	r3, r7, r0
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b25b      	sxtb	r3, r3
 8002caa:	221f      	movs	r2, #31
 8002cac:	4013      	ands	r3, r2
 8002cae:	b25a      	sxtb	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	791b      	ldrb	r3, [r3, #4]
 8002cb4:	b25b      	sxtb	r3, r3
 8002cb6:	015b      	lsls	r3, r3, #5
 8002cb8:	b25b      	sxtb	r3, r3
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	183b      	adds	r3, r7, r0
 8002cc2:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8002cc4:	183b      	adds	r3, r7, r0
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	b25b      	sxtb	r3, r3
 8002cca:	2210      	movs	r2, #16
 8002ccc:	4393      	bics	r3, r2
 8002cce:	b25a      	sxtb	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	795b      	ldrb	r3, [r3, #5]
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	2110      	movs	r1, #16
 8002cdc:	400b      	ands	r3, r1
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	b25b      	sxtb	r3, r3
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	183b      	adds	r3, r7, r0
 8002ce8:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8002cea:	183b      	adds	r3, r7, r0
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	220c      	movs	r2, #12
 8002cf2:	4393      	bics	r3, r2
 8002cf4:	b25a      	sxtb	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7a1b      	ldrb	r3, [r3, #8]
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	210c      	movs	r1, #12
 8002d02:	400b      	ands	r3, r1
 8002d04:	b25b      	sxtb	r3, r3
 8002d06:	4313      	orrs	r3, r2
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	183b      	adds	r3, r7, r0
 8002d0e:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8002d10:	183b      	adds	r3, r7, r0
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b25b      	sxtb	r3, r3
 8002d16:	2203      	movs	r2, #3
 8002d18:	4393      	bics	r3, r2
 8002d1a:	b25a      	sxtb	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7a5b      	ldrb	r3, [r3, #9]
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	2103      	movs	r1, #3
 8002d24:	400b      	ands	r3, r1
 8002d26:	b25b      	sxtb	r3, r3
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	b25b      	sxtb	r3, r3
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	183b      	adds	r3, r7, r0
 8002d30:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	2202      	movs	r2, #2
 8002d3a:	4393      	bics	r3, r2
 8002d3c:	b25a      	sxtb	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	799b      	ldrb	r3, [r3, #6]
 8002d42:	b25b      	sxtb	r3, r3
 8002d44:	18db      	adds	r3, r3, r3
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	2102      	movs	r1, #2
 8002d4a:	400b      	ands	r3, r1
 8002d4c:	b25b      	sxtb	r3, r3
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	b25b      	sxtb	r3, r3
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	183b      	adds	r3, r7, r0
 8002d56:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8002d58:	183b      	adds	r3, r7, r0
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4393      	bics	r3, r2
 8002d62:	b25a      	sxtb	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	79db      	ldrb	r3, [r3, #7]
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	400b      	ands	r3, r1
 8002d6e:	b25b      	sxtb	r3, r3
 8002d70:	4313      	orrs	r3, r2
 8002d72:	b25b      	sxtb	r3, r3
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	0001      	movs	r1, r0
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	885b      	ldrh	r3, [r3, #2]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	885b      	ldrh	r3, [r3, #2]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7a1b      	ldrb	r3, [r3, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d12e      	bne.n	8002e02 <set_gen1_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	895b      	ldrh	r3, [r3, #10]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	895b      	ldrh	r3, [r3, #10]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	899b      	ldrh	r3, [r3, #12]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	899b      	ldrh	r3, [r3, #12]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	89db      	ldrh	r3, [r3, #14]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	89db      	ldrh	r3, [r3, #14]
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	187b      	adds	r3, r7, r1
 8002dea:	729a      	strb	r2, [r3, #10]

        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 11, dev);
 8002dec:	2317      	movs	r3, #23
 8002dee:	18fc      	adds	r4, r7, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	1879      	adds	r1, r7, r1
 8002df4:	220b      	movs	r2, #11
 8002df6:	203f      	movs	r0, #63	@ 0x3f
 8002df8:	f7fe ff46 	bl	8001c88 <bma400_set_regs>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	7023      	strb	r3, [r4, #0]
 8002e00:	e00a      	b.n	8002e18 <set_gen1_int+0x190>
    }
    else
    {
        /* Set the GEN1 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN1_INT_CONFIG, data_array, 5, dev);
 8002e02:	2317      	movs	r3, #23
 8002e04:	18fc      	adds	r4, r7, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	220c      	movs	r2, #12
 8002e0a:	18b9      	adds	r1, r7, r2
 8002e0c:	2205      	movs	r2, #5
 8002e0e:	203f      	movs	r0, #63	@ 0x3f
 8002e10:	f7fe ff3a 	bl	8001c88 <bma400_set_regs>
 8002e14:	0003      	movs	r3, r0
 8002e16:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002e18:	2317      	movs	r3, #23
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b25b      	sxtb	r3, r3
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b007      	add	sp, #28
 8002e26:	bd90      	pop	{r4, r7, pc}

08002e28 <set_gen2_int>:

    return rslt;
}

static int8_t set_gen2_int(const struct bma400_gen_int_conf *gen_int_set, struct bma400_dev *dev)
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[11] = { 0 };
 8002e32:	240c      	movs	r4, #12
 8002e34:	193b      	adds	r3, r7, r4
 8002e36:	0018      	movs	r0, r3
 8002e38:	230b      	movs	r3, #11
 8002e3a:	001a      	movs	r2, r3
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	f003 fd73 	bl	8006928 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, gen_int_set->axes_sel);
 8002e42:	0020      	movs	r0, r4
 8002e44:	183b      	adds	r3, r7, r0
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	221f      	movs	r2, #31
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	b25a      	sxtb	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	791b      	ldrb	r3, [r3, #4]
 8002e54:	b25b      	sxtb	r3, r3
 8002e56:	015b      	lsls	r3, r3, #5
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	b25b      	sxtb	r3, r3
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	183b      	adds	r3, r7, r0
 8002e62:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, gen_int_set->data_src);
 8002e64:	183b      	adds	r3, r7, r0
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	4393      	bics	r3, r2
 8002e6e:	b25a      	sxtb	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	795b      	ldrb	r3, [r3, #5]
 8002e74:	b25b      	sxtb	r3, r3
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	400b      	ands	r3, r1
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	4313      	orrs	r3, r2
 8002e82:	b25b      	sxtb	r3, r3
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	183b      	adds	r3, r7, r0
 8002e88:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, gen_int_set->ref_update);
 8002e8a:	183b      	adds	r3, r7, r0
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b25b      	sxtb	r3, r3
 8002e90:	220c      	movs	r2, #12
 8002e92:	4393      	bics	r3, r2
 8002e94:	b25a      	sxtb	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7a1b      	ldrb	r3, [r3, #8]
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	b25b      	sxtb	r3, r3
 8002ea0:	210c      	movs	r1, #12
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	b25b      	sxtb	r3, r3
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b25b      	sxtb	r3, r3
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	183b      	adds	r3, r7, r0
 8002eae:	701a      	strb	r2, [r3, #0]

    /* Set the hysteresis for interrupt calculation */
    data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_INT_HYST, gen_int_set->hysteresis);
 8002eb0:	183b      	adds	r3, r7, r0
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	4393      	bics	r3, r2
 8002eba:	b25a      	sxtb	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7a5b      	ldrb	r3, [r3, #9]
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	2103      	movs	r1, #3
 8002ec4:	400b      	ands	r3, r1
 8002ec6:	b25b      	sxtb	r3, r3
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	b25b      	sxtb	r3, r3
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	183b      	adds	r3, r7, r0
 8002ed0:	701a      	strb	r2, [r3, #0]

    /* Set the criterion to generate interrupt on either
     * ACTIVITY OR INACTIVITY
     */
    data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_GEN_INT_CRITERION, gen_int_set->criterion_sel);
 8002ed2:	183b      	adds	r3, r7, r0
 8002ed4:	785b      	ldrb	r3, [r3, #1]
 8002ed6:	b25b      	sxtb	r3, r3
 8002ed8:	2202      	movs	r2, #2
 8002eda:	4393      	bics	r3, r2
 8002edc:	b25a      	sxtb	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	799b      	ldrb	r3, [r3, #6]
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	18db      	adds	r3, r3, r3
 8002ee6:	b25b      	sxtb	r3, r3
 8002ee8:	2102      	movs	r1, #2
 8002eea:	400b      	ands	r3, r1
 8002eec:	b25b      	sxtb	r3, r3
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	b25b      	sxtb	r3, r3
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	183b      	adds	r3, r7, r0
 8002ef6:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt axes logic (AND/OR) for the
     * enabled axes to generate interrupt
     */
    data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_GEN_INT_COMB, gen_int_set->evaluate_axes);
 8002ef8:	183b      	adds	r3, r7, r0
 8002efa:	785b      	ldrb	r3, [r3, #1]
 8002efc:	b25b      	sxtb	r3, r3
 8002efe:	2201      	movs	r2, #1
 8002f00:	4393      	bics	r3, r2
 8002f02:	b25a      	sxtb	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	79db      	ldrb	r3, [r3, #7]
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	b25b      	sxtb	r3, r3
 8002f10:	4313      	orrs	r3, r2
 8002f12:	b25b      	sxtb	r3, r3
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	0001      	movs	r1, r0
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	705a      	strb	r2, [r3, #1]

    /* Set the interrupt threshold */
    data_array[2] = gen_int_set->gen_int_thres;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	709a      	strb	r2, [r3, #2]

    /* Set the MSB of gen int dur */
    data_array[3] = BMA400_GET_MSB(gen_int_set->gen_int_dur);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	885b      	ldrh	r3, [r3, #2]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	70da      	strb	r2, [r3, #3]

    /* Set the LSB of gen int dur */
    data_array[4] = BMA400_GET_LSB(gen_int_set->gen_int_dur);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	885b      	ldrh	r3, [r3, #2]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	711a      	strb	r2, [r3, #4]

    /* Handling case of manual reference update */
    if (gen_int_set->ref_update == BMA400_UPDATE_MANUAL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	7a1b      	ldrb	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d12e      	bne.n	8002fa2 <set_gen2_int+0x17a>
    {
        /* Set the LSB of reference x threshold */
        data_array[5] = BMA400_GET_LSB(gen_int_set->int_thres_ref_x);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	895b      	ldrh	r3, [r3, #10]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	187b      	adds	r3, r7, r1
 8002f4c:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_MSB(gen_int_set->int_thres_ref_x);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	895b      	ldrh	r3, [r3, #10]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	187b      	adds	r3, r7, r1
 8002f5a:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_LSB(gen_int_set->int_thres_ref_y);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	899b      	ldrh	r3, [r3, #12]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_MSB(gen_int_set->int_thres_ref_y);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	899b      	ldrh	r3, [r3, #12]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	187b      	adds	r3, r7, r1
 8002f72:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_LSB(gen_int_set->int_thres_ref_z);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	89db      	ldrh	r3, [r3, #14]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	725a      	strb	r2, [r3, #9]

        /* Set the MSB of reference z threshold */
        data_array[10] = BMA400_GET_MSB(gen_int_set->int_thres_ref_z);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	89db      	ldrh	r3, [r3, #14]
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	187b      	adds	r3, r7, r1
 8002f8a:	729a      	strb	r2, [r3, #10]

        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 11, dev);
 8002f8c:	2317      	movs	r3, #23
 8002f8e:	18fc      	adds	r4, r7, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	1879      	adds	r1, r7, r1
 8002f94:	220b      	movs	r2, #11
 8002f96:	204a      	movs	r0, #74	@ 0x4a
 8002f98:	f7fe fe76 	bl	8001c88 <bma400_set_regs>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	7023      	strb	r3, [r4, #0]
 8002fa0:	e00a      	b.n	8002fb8 <set_gen2_int+0x190>
    }
    else
    {
        /* Set the GEN2 INT configuration in the sensor */
        rslt = bma400_set_regs(BMA400_REG_GEN2_INT_CONFIG, data_array, 5, dev);
 8002fa2:	2317      	movs	r3, #23
 8002fa4:	18fc      	adds	r4, r7, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	220c      	movs	r2, #12
 8002faa:	18b9      	adds	r1, r7, r2
 8002fac:	2205      	movs	r2, #5
 8002fae:	204a      	movs	r0, #74	@ 0x4a
 8002fb0:	f7fe fe6a 	bl	8001c88 <bma400_set_regs>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002fb8:	2317      	movs	r3, #23
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b25b      	sxtb	r3, r3
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b007      	add	sp, #28
 8002fc6:	bd90      	pop	{r4, r7, pc}

08002fc8 <set_orient_int>:

    return rslt;
}

static int8_t set_orient_int(const struct bma400_orient_int_conf *orient_conf, struct bma400_dev *dev)
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[10] = { 0 };
 8002fd2:	240c      	movs	r4, #12
 8002fd4:	193b      	adds	r3, r7, r4
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	230a      	movs	r3, #10
 8002fda:	001a      	movs	r2, r3
 8002fdc:	2100      	movs	r1, #0
 8002fde:	f003 fca3 	bl	8006928 <memset>

    /* Set the axes to sense for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_AXES_EN, orient_conf->axes_sel);
 8002fe2:	0020      	movs	r0, r4
 8002fe4:	183b      	adds	r3, r7, r0
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b25b      	sxtb	r3, r3
 8002fea:	221f      	movs	r2, #31
 8002fec:	4013      	ands	r3, r2
 8002fee:	b25a      	sxtb	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	b25b      	sxtb	r3, r3
 8002ff6:	015b      	lsls	r3, r3, #5
 8002ff8:	b25b      	sxtb	r3, r3
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	b25b      	sxtb	r3, r3
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	183b      	adds	r3, r7, r0
 8003002:	701a      	strb	r2, [r3, #0]

    /* Set the data source for interrupt */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_DATA_SRC, orient_conf->data_src);
 8003004:	183b      	adds	r3, r7, r0
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	b25b      	sxtb	r3, r3
 800300a:	2210      	movs	r2, #16
 800300c:	4393      	bics	r3, r2
 800300e:	b25a      	sxtb	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	b25b      	sxtb	r3, r3
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	b25b      	sxtb	r3, r3
 800301a:	2110      	movs	r1, #16
 800301c:	400b      	ands	r3, r1
 800301e:	b25b      	sxtb	r3, r3
 8003020:	4313      	orrs	r3, r2
 8003022:	b25b      	sxtb	r3, r3
 8003024:	b2da      	uxtb	r2, r3
 8003026:	183b      	adds	r3, r7, r0
 8003028:	701a      	strb	r2, [r3, #0]

    /* Set the reference update mode */
    data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_INT_REFU, orient_conf->ref_update);
 800302a:	183b      	adds	r3, r7, r0
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	b25b      	sxtb	r3, r3
 8003030:	220c      	movs	r2, #12
 8003032:	4393      	bics	r3, r2
 8003034:	b25a      	sxtb	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	789b      	ldrb	r3, [r3, #2]
 800303a:	b25b      	sxtb	r3, r3
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	b25b      	sxtb	r3, r3
 8003040:	210c      	movs	r1, #12
 8003042:	400b      	ands	r3, r1
 8003044:	b25b      	sxtb	r3, r3
 8003046:	4313      	orrs	r3, r2
 8003048:	b25b      	sxtb	r3, r3
 800304a:	b2da      	uxtb	r2, r3
 800304c:	0001      	movs	r1, r0
 800304e:	187b      	adds	r3, r7, r1
 8003050:	701a      	strb	r2, [r3, #0]

    /* Set the threshold for interrupt calculation */
    data_array[1] = orient_conf->orient_thres;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	78da      	ldrb	r2, [r3, #3]
 8003056:	187b      	adds	r3, r7, r1
 8003058:	705a      	strb	r2, [r3, #1]

    /* Set the stability threshold */
    data_array[2] = orient_conf->stability_thres;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	791a      	ldrb	r2, [r3, #4]
 800305e:	187b      	adds	r3, r7, r1
 8003060:	709a      	strb	r2, [r3, #2]

    /* Set the interrupt duration */
    data_array[3] = orient_conf->orient_int_dur;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	795a      	ldrb	r2, [r3, #5]
 8003066:	187b      	adds	r3, r7, r1
 8003068:	70da      	strb	r2, [r3, #3]

    /* Handling case of manual reference update */
    if (orient_conf->ref_update == BMA400_UPDATE_MANUAL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	789b      	ldrb	r3, [r3, #2]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d12e      	bne.n	80030d0 <set_orient_int+0x108>
    {
        /* Set the LSB of reference x threshold */
        data_array[4] = BMA400_GET_LSB(orient_conf->orient_ref_x);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	88db      	ldrh	r3, [r3, #6]
 8003076:	b2da      	uxtb	r2, r3
 8003078:	187b      	adds	r3, r7, r1
 800307a:	711a      	strb	r2, [r3, #4]

        /* Set the MSB of reference x threshold */
        data_array[5] = BMA400_GET_MSB(orient_conf->orient_ref_x);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	88db      	ldrh	r3, [r3, #6]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	b29b      	uxth	r3, r3
 8003084:	b2da      	uxtb	r2, r3
 8003086:	187b      	adds	r3, r7, r1
 8003088:	715a      	strb	r2, [r3, #5]

        /* Set the MSB of reference x threshold */
        data_array[6] = BMA400_GET_LSB(orient_conf->orient_ref_y);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	891b      	ldrh	r3, [r3, #8]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	187b      	adds	r3, r7, r1
 8003092:	719a      	strb	r2, [r3, #6]

        /* Set the LSB of reference y threshold */
        data_array[7] = BMA400_GET_MSB(orient_conf->orient_ref_y);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	891b      	ldrh	r3, [r3, #8]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	b29b      	uxth	r3, r3
 800309c:	b2da      	uxtb	r2, r3
 800309e:	187b      	adds	r3, r7, r1
 80030a0:	71da      	strb	r2, [r3, #7]

        /* Set the MSB of reference y threshold */
        data_array[8] = BMA400_GET_LSB(orient_conf->orient_ref_z);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	895b      	ldrh	r3, [r3, #10]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	721a      	strb	r2, [r3, #8]

        /* Set the LSB of reference z threshold */
        data_array[9] = BMA400_GET_MSB(orient_conf->orient_ref_z);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	895b      	ldrh	r3, [r3, #10]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	725a      	strb	r2, [r3, #9]

        /* Set the orient configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 10, dev);
 80030ba:	2317      	movs	r3, #23
 80030bc:	18fc      	adds	r4, r7, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	1879      	adds	r1, r7, r1
 80030c2:	220a      	movs	r2, #10
 80030c4:	2035      	movs	r0, #53	@ 0x35
 80030c6:	f7fe fddf 	bl	8001c88 <bma400_set_regs>
 80030ca:	0003      	movs	r3, r0
 80030cc:	7023      	strb	r3, [r4, #0]
 80030ce:	e00a      	b.n	80030e6 <set_orient_int+0x11e>
    else
    {
        /* Set the orient configurations in the sensor excluding
         * reference values of x,y,z
         */
        rslt = bma400_set_regs(BMA400_REG_ORIENTCH_INT_CONFIG, data_array, 4, dev);
 80030d0:	2317      	movs	r3, #23
 80030d2:	18fc      	adds	r4, r7, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	220c      	movs	r2, #12
 80030d8:	18b9      	adds	r1, r7, r2
 80030da:	2204      	movs	r2, #4
 80030dc:	2035      	movs	r0, #53	@ 0x35
 80030de:	f7fe fdd3 	bl	8001c88 <bma400_set_regs>
 80030e2:	0003      	movs	r3, r0
 80030e4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80030e6:	2317      	movs	r3, #23
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b25b      	sxtb	r3, r3
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b007      	add	sp, #28
 80030f4:	bd90      	pop	{r4, r7, pc}
	...

080030f8 <map_int_pin>:

    return rslt;
}

static void map_int_pin(uint8_t *data_array, uint8_t int_enable, enum bma400_int_chan int_map)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	0008      	movs	r0, r1
 8003102:	0011      	movs	r1, r2
 8003104:	1cfb      	adds	r3, r7, #3
 8003106:	1c02      	adds	r2, r0, #0
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	1cbb      	adds	r3, r7, #2
 800310c:	1c0a      	adds	r2, r1, #0
 800310e:	701a      	strb	r2, [r3, #0]
    switch (int_enable)
 8003110:	1cfb      	adds	r3, r7, #3
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b0b      	cmp	r3, #11
 8003116:	d900      	bls.n	800311a <map_int_pin+0x22>
 8003118:	e2f3      	b.n	8003702 <map_int_pin+0x60a>
 800311a:	009a      	lsls	r2, r3, #2
 800311c:	4bc9      	ldr	r3, [pc, #804]	@ (8003444 <map_int_pin+0x34c>)
 800311e:	18d3      	adds	r3, r2, r3
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	469f      	mov	pc, r3
    {
        case BMA400_DATA_READY_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003124:	1cbb      	adds	r3, r7, #2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d107      	bne.n	800313c <map_int_pin+0x44>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2280      	movs	r2, #128	@ 0x80
 8003132:	4252      	negs	r2, r2
 8003134:	4313      	orrs	r3, r2
 8003136:	b2da      	uxtb	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800313c:	1cbb      	adds	r3, r7, #2
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d109      	bne.n	8003158 <map_int_pin+0x60>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3301      	adds	r3, #1
 8003148:	781a      	ldrb	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3301      	adds	r3, #1
 800314e:	2180      	movs	r1, #128	@ 0x80
 8003150:	4249      	negs	r1, r1
 8003152:	430a      	orrs	r2, r1
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003158:	1cbb      	adds	r3, r7, #2
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <map_int_pin+0x88>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_DRDY);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	227f      	movs	r2, #127	@ 0x7f
 8003166:	4013      	ands	r3, r2
 8003168:	b2da      	uxtb	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_DRDY);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3301      	adds	r3, #1
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3301      	adds	r3, #1
 8003178:	217f      	movs	r1, #127	@ 0x7f
 800317a:	400a      	ands	r2, r1
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003180:	1cbb      	adds	r3, r7, #2
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d000      	beq.n	800318a <map_int_pin+0x92>
 8003188:	e2bd      	b.n	8003706 <map_int_pin+0x60e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_DRDY, BMA400_ENABLE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2280      	movs	r2, #128	@ 0x80
 8003190:	4252      	negs	r2, r2
 8003192:	4313      	orrs	r3, r2
 8003194:	b2da      	uxtb	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_DRDY, BMA400_ENABLE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3301      	adds	r3, #1
 800319e:	781a      	ldrb	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3301      	adds	r3, #1
 80031a4:	2180      	movs	r1, #128	@ 0x80
 80031a6:	4249      	negs	r1, r1
 80031a8:	430a      	orrs	r2, r1
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]
            }

            break;
 80031ae:	e2aa      	b.n	8003706 <map_int_pin+0x60e>
        case BMA400_FIFO_WM_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80031b0:	1cbb      	adds	r3, r7, #2
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d106      	bne.n	80031c6 <map_int_pin+0xce>
            {
                /* Mapping interrupt to INT pin 1*/
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2240      	movs	r2, #64	@ 0x40
 80031be:	4313      	orrs	r3, r2
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80031c6:	1cbb      	adds	r3, r7, #2
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d108      	bne.n	80031e0 <map_int_pin+0xe8>
            {
                /* Mapping interrupt to INT pin 2*/
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3301      	adds	r3, #1
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3301      	adds	r3, #1
 80031d8:	2140      	movs	r1, #64	@ 0x40
 80031da:	430a      	orrs	r2, r1
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80031e0:	1cbb      	adds	r3, r7, #2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10f      	bne.n	8003208 <map_int_pin+0x110>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_WM);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2240      	movs	r2, #64	@ 0x40
 80031ee:	4393      	bics	r3, r2
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_WM);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3301      	adds	r3, #1
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3301      	adds	r3, #1
 8003200:	2140      	movs	r1, #64	@ 0x40
 8003202:	438a      	bics	r2, r1
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003208:	1cbb      	adds	r3, r7, #2
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d000      	beq.n	8003212 <map_int_pin+0x11a>
 8003210:	e27b      	b.n	800370a <map_int_pin+0x612>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2240      	movs	r2, #64	@ 0x40
 8003218:	4313      	orrs	r3, r2
 800321a:	b2da      	uxtb	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_WM, BMA400_ENABLE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3301      	adds	r3, #1
 8003224:	781a      	ldrb	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3301      	adds	r3, #1
 800322a:	2140      	movs	r1, #64	@ 0x40
 800322c:	430a      	orrs	r2, r1
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003232:	e26a      	b.n	800370a <map_int_pin+0x612>
        case BMA400_FIFO_FULL_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003234:	1cbb      	adds	r3, r7, #2
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d106      	bne.n	800324a <map_int_pin+0x152>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2220      	movs	r2, #32
 8003242:	4313      	orrs	r3, r2
 8003244:	b2da      	uxtb	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800324a:	1cbb      	adds	r3, r7, #2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d108      	bne.n	8003264 <map_int_pin+0x16c>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3301      	adds	r3, #1
 8003256:	781a      	ldrb	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3301      	adds	r3, #1
 800325c:	2120      	movs	r1, #32
 800325e:	430a      	orrs	r2, r1
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003264:	1cbb      	adds	r3, r7, #2
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10f      	bne.n	800328c <map_int_pin+0x194>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_FIFO_FULL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2220      	movs	r2, #32
 8003272:	4393      	bics	r3, r2
 8003274:	b2da      	uxtb	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_FIFO_FULL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3301      	adds	r3, #1
 800327e:	781a      	ldrb	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3301      	adds	r3, #1
 8003284:	2120      	movs	r1, #32
 8003286:	438a      	bics	r2, r1
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 800328c:	1cbb      	adds	r3, r7, #2
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d000      	beq.n	8003296 <map_int_pin+0x19e>
 8003294:	e23b      	b.n	800370e <map_int_pin+0x616>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2220      	movs	r2, #32
 800329c:	4313      	orrs	r3, r2
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_FIFO_FULL, BMA400_ENABLE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3301      	adds	r3, #1
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3301      	adds	r3, #1
 80032ae:	2120      	movs	r1, #32
 80032b0:	430a      	orrs	r2, r1
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]
            }

            break;
 80032b6:	e22a      	b.n	800370e <map_int_pin+0x616>
        case BMA400_INT_OVERRUN_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80032b8:	1cbb      	adds	r3, r7, #2
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d106      	bne.n	80032ce <map_int_pin+0x1d6>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2210      	movs	r2, #16
 80032c6:	4313      	orrs	r3, r2
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80032ce:	1cbb      	adds	r3, r7, #2
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d108      	bne.n	80032e8 <map_int_pin+0x1f0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3301      	adds	r3, #1
 80032da:	781a      	ldrb	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3301      	adds	r3, #1
 80032e0:	2110      	movs	r1, #16
 80032e2:	430a      	orrs	r2, r1
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80032e8:	1cbb      	adds	r3, r7, #2
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10f      	bne.n	8003310 <map_int_pin+0x218>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_INT_OVERRUN);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2210      	movs	r2, #16
 80032f6:	4393      	bics	r3, r2
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_INT_OVERRUN);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3301      	adds	r3, #1
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3301      	adds	r3, #1
 8003308:	2110      	movs	r1, #16
 800330a:	438a      	bics	r2, r1
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003310:	1cbb      	adds	r3, r7, #2
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d000      	beq.n	800331a <map_int_pin+0x222>
 8003318:	e1fb      	b.n	8003712 <map_int_pin+0x61a>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2210      	movs	r2, #16
 8003320:	4313      	orrs	r3, r2
 8003322:	b2da      	uxtb	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_INT_OVERRUN, BMA400_ENABLE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3301      	adds	r3, #1
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3301      	adds	r3, #1
 8003332:	2110      	movs	r1, #16
 8003334:	430a      	orrs	r2, r1
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]
            }

            break;
 800333a:	e1ea      	b.n	8003712 <map_int_pin+0x61a>
        case BMA400_GEN2_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 800333c:	1cbb      	adds	r3, r7, #2
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <map_int_pin+0x25a>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2208      	movs	r2, #8
 800334a:	4313      	orrs	r3, r2
 800334c:	b2da      	uxtb	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 8003352:	1cbb      	adds	r3, r7, #2
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d108      	bne.n	800336c <map_int_pin+0x274>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3301      	adds	r3, #1
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3301      	adds	r3, #1
 8003364:	2108      	movs	r1, #8
 8003366:	430a      	orrs	r2, r1
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 800336c:	1cbb      	adds	r3, r7, #2
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10f      	bne.n	8003394 <map_int_pin+0x29c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2208      	movs	r2, #8
 800337a:	4393      	bics	r3, r2
 800337c:	b2da      	uxtb	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN2);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3301      	adds	r3, #1
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3301      	adds	r3, #1
 800338c:	2108      	movs	r1, #8
 800338e:	438a      	bics	r2, r1
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003394:	1cbb      	adds	r3, r7, #2
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d000      	beq.n	800339e <map_int_pin+0x2a6>
 800339c:	e1bb      	b.n	8003716 <map_int_pin+0x61e>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN2, BMA400_ENABLE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2208      	movs	r2, #8
 80033a4:	4313      	orrs	r3, r2
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN2, BMA400_ENABLE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3301      	adds	r3, #1
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3301      	adds	r3, #1
 80033b6:	2108      	movs	r1, #8
 80033b8:	430a      	orrs	r2, r1
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]
            }

            break;
 80033be:	e1aa      	b.n	8003716 <map_int_pin+0x61e>
        case BMA400_GEN1_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80033c0:	1cbb      	adds	r3, r7, #2
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d106      	bne.n	80033d6 <map_int_pin+0x2de>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2204      	movs	r2, #4
 80033ce:	4313      	orrs	r3, r2
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80033d6:	1cbb      	adds	r3, r7, #2
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d108      	bne.n	80033f0 <map_int_pin+0x2f8>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3301      	adds	r3, #1
 80033e2:	781a      	ldrb	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3301      	adds	r3, #1
 80033e8:	2104      	movs	r1, #4
 80033ea:	430a      	orrs	r2, r1
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80033f0:	1cbb      	adds	r3, r7, #2
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10f      	bne.n	8003418 <map_int_pin+0x320>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_GEN1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2204      	movs	r2, #4
 80033fe:	4393      	bics	r3, r2
 8003400:	b2da      	uxtb	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_GEN1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3301      	adds	r3, #1
 800340a:	781a      	ldrb	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3301      	adds	r3, #1
 8003410:	2104      	movs	r1, #4
 8003412:	438a      	bics	r2, r1
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003418:	1cbb      	adds	r3, r7, #2
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d000      	beq.n	8003422 <map_int_pin+0x32a>
 8003420:	e17b      	b.n	800371a <map_int_pin+0x622>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_GEN1, BMA400_ENABLE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2204      	movs	r2, #4
 8003428:	4313      	orrs	r3, r2
 800342a:	b2da      	uxtb	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_GEN1, BMA400_ENABLE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3301      	adds	r3, #1
 8003434:	781a      	ldrb	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3301      	adds	r3, #1
 800343a:	2104      	movs	r1, #4
 800343c:	430a      	orrs	r2, r1
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003442:	e16a      	b.n	800371a <map_int_pin+0x622>
 8003444:	08006e38 	.word	0x08006e38
        case BMA400_ORIENT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003448:	1cbb      	adds	r3, r7, #2
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d106      	bne.n	800345e <map_int_pin+0x366>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2202      	movs	r2, #2
 8003456:	4313      	orrs	r3, r2
 8003458:	b2da      	uxtb	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800345e:	1cbb      	adds	r3, r7, #2
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d108      	bne.n	8003478 <map_int_pin+0x380>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3301      	adds	r3, #1
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3301      	adds	r3, #1
 8003470:	2102      	movs	r1, #2
 8003472:	430a      	orrs	r2, r1
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003478:	1cbb      	adds	r3, r7, #2
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10f      	bne.n	80034a0 <map_int_pin+0x3a8>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_ORIENT_CH);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2202      	movs	r2, #2
 8003486:	4393      	bics	r3, r2
 8003488:	b2da      	uxtb	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_ORIENT_CH);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3301      	adds	r3, #1
 8003492:	781a      	ldrb	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3301      	adds	r3, #1
 8003498:	2102      	movs	r1, #2
 800349a:	438a      	bics	r2, r1
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80034a0:	1cbb      	adds	r3, r7, #2
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d000      	beq.n	80034aa <map_int_pin+0x3b2>
 80034a8:	e139      	b.n	800371e <map_int_pin+0x626>
            {
                data_array[0] = BMA400_SET_BITS(data_array[0], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2202      	movs	r2, #2
 80034b0:	4313      	orrs	r3, r2
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS(data_array[1], BMA400_EN_ORIENT_CH, BMA400_ENABLE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3301      	adds	r3, #1
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3301      	adds	r3, #1
 80034c2:	2102      	movs	r1, #2
 80034c4:	430a      	orrs	r2, r1
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]
            }

            break;
 80034ca:	e128      	b.n	800371e <map_int_pin+0x626>
        case BMA400_WAKEUP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80034cc:	1cbb      	adds	r3, r7, #2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d106      	bne.n	80034e2 <map_int_pin+0x3ea>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2201      	movs	r2, #1
 80034da:	4313      	orrs	r3, r2
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80034e2:	1cbb      	adds	r3, r7, #2
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d108      	bne.n	80034fc <map_int_pin+0x404>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3301      	adds	r3, #1
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3301      	adds	r3, #1
 80034f4:	2101      	movs	r1, #1
 80034f6:	430a      	orrs	r2, r1
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80034fc:	1cbb      	adds	r3, r7, #2
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10f      	bne.n	8003524 <map_int_pin+0x42c>
            {
                data_array[0] = BMA400_SET_BIT_VAL_0(data_array[0], BMA400_EN_WAKEUP_INT);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2201      	movs	r2, #1
 800350a:	4393      	bics	r3, r2
 800350c:	b2da      	uxtb	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BIT_VAL_0(data_array[1], BMA400_EN_WAKEUP_INT);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3301      	adds	r3, #1
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3301      	adds	r3, #1
 800351c:	2101      	movs	r1, #1
 800351e:	438a      	bics	r2, r1
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003524:	1cbb      	adds	r3, r7, #2
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d000      	beq.n	800352e <map_int_pin+0x436>
 800352c:	e0f9      	b.n	8003722 <map_int_pin+0x62a>
            {
                data_array[0] = BMA400_SET_BITS_POS_0(data_array[0], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2201      	movs	r2, #1
 8003534:	4313      	orrs	r3, r2
 8003536:	b2da      	uxtb	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	701a      	strb	r2, [r3, #0]
                data_array[1] = BMA400_SET_BITS_POS_0(data_array[1], BMA400_EN_WAKEUP_INT, BMA400_ENABLE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3301      	adds	r3, #1
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3301      	adds	r3, #1
 8003546:	2101      	movs	r1, #1
 8003548:	430a      	orrs	r2, r1
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]
            }

            break;
 800354e:	e0e8      	b.n	8003722 <map_int_pin+0x62a>
        case BMA400_ACT_CH_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003550:	1cbb      	adds	r3, r7, #2
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d108      	bne.n	800356a <map_int_pin+0x472>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3302      	adds	r3, #2
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3302      	adds	r3, #2
 8003562:	2108      	movs	r1, #8
 8003564:	430a      	orrs	r2, r1
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800356a:	1cbb      	adds	r3, r7, #2
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d109      	bne.n	8003586 <map_int_pin+0x48e>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3302      	adds	r3, #2
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3302      	adds	r3, #2
 800357c:	2180      	movs	r1, #128	@ 0x80
 800357e:	4249      	negs	r1, r1
 8003580:	430a      	orrs	r2, r1
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003586:	1cbb      	adds	r3, r7, #2
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d111      	bne.n	80035b2 <map_int_pin+0x4ba>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3302      	adds	r3, #2
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3302      	adds	r3, #2
 8003598:	2108      	movs	r1, #8
 800359a:	438a      	bics	r2, r1
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_ACTCH_MAP_INT2);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3302      	adds	r3, #2
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3302      	adds	r3, #2
 80035aa:	217f      	movs	r1, #127	@ 0x7f
 80035ac:	400a      	ands	r2, r1
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80035b2:	1cbb      	adds	r3, r7, #2
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d000      	beq.n	80035bc <map_int_pin+0x4c4>
 80035ba:	e0b4      	b.n	8003726 <map_int_pin+0x62e>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT1, BMA400_ENABLE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3302      	adds	r3, #2
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3302      	adds	r3, #2
 80035c6:	2108      	movs	r1, #8
 80035c8:	430a      	orrs	r2, r1
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_ACTCH_MAP_INT2, BMA400_ENABLE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3302      	adds	r3, #2
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3302      	adds	r3, #2
 80035d8:	2180      	movs	r1, #128	@ 0x80
 80035da:	4249      	negs	r1, r1
 80035dc:	430a      	orrs	r2, r1
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]
            }

            break;
 80035e2:	e0a0      	b.n	8003726 <map_int_pin+0x62e>
        case BMA400_TAP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 80035e4:	1cbb      	adds	r3, r7, #2
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d108      	bne.n	80035fe <map_int_pin+0x506>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3302      	adds	r3, #2
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3302      	adds	r3, #2
 80035f6:	2104      	movs	r1, #4
 80035f8:	430a      	orrs	r2, r1
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 80035fe:	1cbb      	adds	r3, r7, #2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d108      	bne.n	8003618 <map_int_pin+0x520>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3302      	adds	r3, #2
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3302      	adds	r3, #2
 8003610:	2140      	movs	r1, #64	@ 0x40
 8003612:	430a      	orrs	r2, r1
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 8003618:	1cbb      	adds	r3, r7, #2
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d111      	bne.n	8003644 <map_int_pin+0x54c>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT1);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3302      	adds	r3, #2
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3302      	adds	r3, #2
 800362a:	2104      	movs	r1, #4
 800362c:	438a      	bics	r2, r1
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_TAP_MAP_INT2);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3302      	adds	r3, #2
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3302      	adds	r3, #2
 800363c:	2140      	movs	r1, #64	@ 0x40
 800363e:	438a      	bics	r2, r1
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 8003644:	1cbb      	adds	r3, r7, #2
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d000      	beq.n	800364e <map_int_pin+0x556>
 800364c:	e06d      	b.n	800372a <map_int_pin+0x632>
            {
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT1, BMA400_ENABLE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3302      	adds	r3, #2
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3302      	adds	r3, #2
 8003658:	2104      	movs	r1, #4
 800365a:	430a      	orrs	r2, r1
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_TAP_MAP_INT2, BMA400_ENABLE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3302      	adds	r3, #2
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3302      	adds	r3, #2
 800366a:	2140      	movs	r1, #64	@ 0x40
 800366c:	430a      	orrs	r2, r1
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003672:	e05a      	b.n	800372a <map_int_pin+0x632>
        case BMA400_STEP_INT_MAP:
            if (int_map == BMA400_INT_CHANNEL_1)
 8003674:	1cbb      	adds	r3, r7, #2
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d108      	bne.n	800368e <map_int_pin+0x596>
            {
                /* Mapping interrupt to INT pin 1 */
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3302      	adds	r3, #2
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3302      	adds	r3, #2
 8003686:	2101      	movs	r1, #1
 8003688:	430a      	orrs	r2, r1
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_INT_CHANNEL_2)
 800368e:	1cbb      	adds	r3, r7, #2
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d108      	bne.n	80036a8 <map_int_pin+0x5b0>
            {
                /* Mapping interrupt to INT pin 2 */
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3302      	adds	r3, #2
 800369a:	781a      	ldrb	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3302      	adds	r3, #2
 80036a0:	2110      	movs	r1, #16
 80036a2:	430a      	orrs	r2, r1
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_UNMAP_INT_PIN)
 80036a8:	1cbb      	adds	r3, r7, #2
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d111      	bne.n	80036d4 <map_int_pin+0x5dc>
            {
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_EN_STEP_INT);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3302      	adds	r3, #2
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3302      	adds	r3, #2
 80036ba:	2101      	movs	r1, #1
 80036bc:	438a      	bics	r2, r1
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BIT_VAL_0(data_array[2], BMA400_STEP_MAP_INT2);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3302      	adds	r3, #2
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3302      	adds	r3, #2
 80036cc:	2110      	movs	r1, #16
 80036ce:	438a      	bics	r2, r1
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	701a      	strb	r2, [r3, #0]
            }

            if (int_map == BMA400_MAP_BOTH_INT_PINS)
 80036d4:	1cbb      	adds	r3, r7, #2
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d128      	bne.n	800372e <map_int_pin+0x636>
            {
                data_array[2] = BMA400_SET_BITS_POS_0(data_array[2], BMA400_EN_STEP_INT, BMA400_ENABLE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3302      	adds	r3, #2
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3302      	adds	r3, #2
 80036e6:	2101      	movs	r1, #1
 80036e8:	430a      	orrs	r2, r1
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]
                data_array[2] = BMA400_SET_BITS(data_array[2], BMA400_STEP_MAP_INT2, BMA400_ENABLE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3302      	adds	r3, #2
 80036f2:	781a      	ldrb	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3302      	adds	r3, #2
 80036f8:	2110      	movs	r1, #16
 80036fa:	430a      	orrs	r2, r1
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	701a      	strb	r2, [r3, #0]
            }

            break;
 8003700:	e015      	b.n	800372e <map_int_pin+0x636>
        default:
            break;
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	e014      	b.n	8003730 <map_int_pin+0x638>
            break;
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	e012      	b.n	8003730 <map_int_pin+0x638>
            break;
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	e010      	b.n	8003730 <map_int_pin+0x638>
            break;
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	e00e      	b.n	8003730 <map_int_pin+0x638>
            break;
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	e00c      	b.n	8003730 <map_int_pin+0x638>
            break;
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	e00a      	b.n	8003730 <map_int_pin+0x638>
            break;
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	e008      	b.n	8003730 <map_int_pin+0x638>
            break;
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	e006      	b.n	8003730 <map_int_pin+0x638>
            break;
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	e004      	b.n	8003730 <map_int_pin+0x638>
            break;
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	e002      	b.n	8003730 <map_int_pin+0x638>
            break;
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	e000      	b.n	8003730 <map_int_pin+0x638>
            break;
 800372e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8003730:	46c0      	nop			@ (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}

08003738 <set_int_pin_conf>:
            break;
    }
}

static int8_t set_int_pin_conf(struct bma400_int_pin_conf int_conf, struct bma400_dev *dev)
{
 8003738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	8018      	strh	r0, [r3, #0]
 8003742:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bma400_get_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 8003744:	260f      	movs	r6, #15
 8003746:	19bc      	adds	r4, r7, r6
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	250e      	movs	r5, #14
 800374c:	1979      	adds	r1, r7, r5
 800374e:	2201      	movs	r2, #1
 8003750:	2024      	movs	r0, #36	@ 0x24
 8003752:	f7fe fb17 	bl	8001d84 <bma400_get_regs>
 8003756:	0003      	movs	r3, r0
 8003758:	7023      	strb	r3, [r4, #0]
    if (rslt == BMA400_OK)
 800375a:	19bb      	adds	r3, r7, r6
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	b25b      	sxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d13a      	bne.n	80037da <set_int_pin_conf+0xa2>
    {
        if (int_conf.int_chan == BMA400_INT_CHANNEL_1)
 8003764:	1d3b      	adds	r3, r7, #4
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d113      	bne.n	8003794 <set_int_pin_conf+0x5c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN1_CONF, int_conf.pin_conf);
 800376c:	0028      	movs	r0, r5
 800376e:	183b      	adds	r3, r7, r0
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	b25b      	sxtb	r3, r3
 8003774:	2206      	movs	r2, #6
 8003776:	4393      	bics	r3, r2
 8003778:	b25a      	sxtb	r2, r3
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	b25b      	sxtb	r3, r3
 8003780:	18db      	adds	r3, r3, r3
 8003782:	b25b      	sxtb	r3, r3
 8003784:	2106      	movs	r1, #6
 8003786:	400b      	ands	r3, r1
 8003788:	b25b      	sxtb	r3, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	b25b      	sxtb	r3, r3
 800378e:	b2da      	uxtb	r2, r3
 8003790:	183b      	adds	r3, r7, r0
 8003792:	701a      	strb	r2, [r3, #0]
        }

        if (int_conf.int_chan == BMA400_INT_CHANNEL_2)
 8003794:	1d3b      	adds	r3, r7, #4
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d113      	bne.n	80037c4 <set_int_pin_conf+0x8c>
        {
            /* Setting interrupt pin configurations */
            reg_data = BMA400_SET_BITS(reg_data, BMA400_INT_PIN2_CONF, int_conf.pin_conf);
 800379c:	200e      	movs	r0, #14
 800379e:	183b      	adds	r3, r7, r0
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	b25b      	sxtb	r3, r3
 80037a4:	2260      	movs	r2, #96	@ 0x60
 80037a6:	4393      	bics	r3, r2
 80037a8:	b25a      	sxtb	r2, r3
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	015b      	lsls	r3, r3, #5
 80037b2:	b25b      	sxtb	r3, r3
 80037b4:	2160      	movs	r1, #96	@ 0x60
 80037b6:	400b      	ands	r3, r1
 80037b8:	b25b      	sxtb	r3, r3
 80037ba:	4313      	orrs	r3, r2
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	183b      	adds	r3, r7, r0
 80037c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the configurations in the sensor */
        rslt = bma400_set_regs(BMA400_REG_INT_12_IO_CTRL, &reg_data, 1, dev);
 80037c4:	230f      	movs	r3, #15
 80037c6:	18fc      	adds	r4, r7, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	220e      	movs	r2, #14
 80037cc:	18b9      	adds	r1, r7, r2
 80037ce:	2201      	movs	r2, #1
 80037d0:	2024      	movs	r0, #36	@ 0x24
 80037d2:	f7fe fa59 	bl	8001c88 <bma400_set_regs>
 80037d6:	0003      	movs	r3, r0
 80037d8:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80037da:	230f      	movs	r3, #15
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	b25b      	sxtb	r3, r3
}
 80037e2:	0018      	movs	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b005      	add	sp, #20
 80037e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037ea <set_fifo_conf>:

    return rslt;
}

static int8_t set_fifo_conf(const struct bma400_fifo_conf *fifo_conf, struct bma400_dev *dev)
{
 80037ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data_array[3];
    uint8_t sens_data[3];

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80037f4:	250f      	movs	r5, #15
 80037f6:	197c      	adds	r4, r7, r5
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fe fd7e 	bl	80022fc <null_ptr_check>
 8003800:	0003      	movs	r3, r0
 8003802:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8003804:	197b      	adds	r3, r7, r5
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	b25b      	sxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d15b      	bne.n	80038c6 <set_fifo_conf+0xdc>
    {
        /* Get the FIFO configurations and water-mark
         * values from the sensor
         */
        rslt = bma400_get_regs(BMA400_REG_FIFO_CONFIG_0, sens_data, 3, dev);
 800380e:	197c      	adds	r4, r7, r5
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2608      	movs	r6, #8
 8003814:	19b9      	adds	r1, r7, r6
 8003816:	2203      	movs	r2, #3
 8003818:	2026      	movs	r0, #38	@ 0x26
 800381a:	f7fe fab3 	bl	8001d84 <bma400_get_regs>
 800381e:	0003      	movs	r3, r0
 8003820:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8003822:	197b      	adds	r3, r7, r5
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b25b      	sxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d14c      	bne.n	80038c6 <set_fifo_conf+0xdc>
        {
            /* FIFO configurations */
            data_array[0] = fifo_conf->conf_regs;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	781a      	ldrb	r2, [r3, #0]
 8003830:	210c      	movs	r1, #12
 8003832:	187b      	adds	r3, r7, r1
 8003834:	701a      	strb	r2, [r3, #0]
            if (fifo_conf->conf_status == BMA400_DISABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	785b      	ldrb	r3, [r3, #1]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10c      	bne.n	8003858 <set_fifo_conf+0x6e>
            {
                /* Disable the selected interrupt status */
                data_array[0] = sens_data[0] & (~data_array[0]);
 800383e:	19bb      	adds	r3, r7, r6
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b25b      	sxtb	r3, r3
 8003844:	187a      	adds	r2, r7, r1
 8003846:	7812      	ldrb	r2, [r2, #0]
 8003848:	b252      	sxtb	r2, r2
 800384a:	43d2      	mvns	r2, r2
 800384c:	b252      	sxtb	r2, r2
 800384e:	4013      	ands	r3, r2
 8003850:	b25b      	sxtb	r3, r3
 8003852:	b2da      	uxtb	r2, r3
 8003854:	187b      	adds	r3, r7, r1
 8003856:	701a      	strb	r2, [r3, #0]
            }

            /* FIFO water-mark values */
            data_array[1] = BMA400_GET_LSB(fifo_conf->fifo_watermark);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	885b      	ldrh	r3, [r3, #2]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	210c      	movs	r1, #12
 8003860:	187b      	adds	r3, r7, r1
 8003862:	705a      	strb	r2, [r3, #1]
            data_array[2] = BMA400_GET_MSB(fifo_conf->fifo_watermark);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	885b      	ldrh	r3, [r3, #2]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	b29b      	uxth	r3, r3
 800386c:	b2da      	uxtb	r2, r3
 800386e:	187b      	adds	r3, r7, r1
 8003870:	709a      	strb	r2, [r3, #2]
            data_array[2] = BMA400_GET_BITS_POS_0(data_array[2], BMA400_FIFO_BYTES_CNT);
 8003872:	187b      	adds	r3, r7, r1
 8003874:	789b      	ldrb	r3, [r3, #2]
 8003876:	2207      	movs	r2, #7
 8003878:	4013      	ands	r3, r2
 800387a:	b2da      	uxtb	r2, r3
 800387c:	187b      	adds	r3, r7, r1
 800387e:	709a      	strb	r2, [r3, #2]
            if ((data_array[1] == sens_data[1]) && (data_array[2] == sens_data[2]))
 8003880:	187b      	adds	r3, r7, r1
 8003882:	785a      	ldrb	r2, [r3, #1]
 8003884:	2008      	movs	r0, #8
 8003886:	183b      	adds	r3, r7, r0
 8003888:	785b      	ldrb	r3, [r3, #1]
 800388a:	429a      	cmp	r2, r3
 800388c:	d110      	bne.n	80038b0 <set_fifo_conf+0xc6>
 800388e:	187b      	adds	r3, r7, r1
 8003890:	789a      	ldrb	r2, [r3, #2]
 8003892:	183b      	adds	r3, r7, r0
 8003894:	789b      	ldrb	r3, [r3, #2]
 8003896:	429a      	cmp	r2, r3
 8003898:	d10a      	bne.n	80038b0 <set_fifo_conf+0xc6>
            {
                /* Set the FIFO configurations in the
                 * sensor excluding the watermark value
                 */
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 1, dev);
 800389a:	230f      	movs	r3, #15
 800389c:	18fc      	adds	r4, r7, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	1879      	adds	r1, r7, r1
 80038a2:	2201      	movs	r2, #1
 80038a4:	2026      	movs	r0, #38	@ 0x26
 80038a6:	f7fe f9ef 	bl	8001c88 <bma400_set_regs>
 80038aa:	0003      	movs	r3, r0
 80038ac:	7023      	strb	r3, [r4, #0]
 80038ae:	e00a      	b.n	80038c6 <set_fifo_conf+0xdc>
            }
            else
            {
                /* Set the FIFO configurations in the sensor*/
                rslt = bma400_set_regs(BMA400_REG_FIFO_CONFIG_0, data_array, 3, dev);
 80038b0:	230f      	movs	r3, #15
 80038b2:	18fc      	adds	r4, r7, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	220c      	movs	r2, #12
 80038b8:	18b9      	adds	r1, r7, r2
 80038ba:	2203      	movs	r2, #3
 80038bc:	2026      	movs	r0, #38	@ 0x26
 80038be:	f7fe f9e3 	bl	8001c88 <bma400_set_regs>
 80038c2:	0003      	movs	r3, r0
 80038c4:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 80038c6:	230f      	movs	r3, #15
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	b25b      	sxtb	r3, r3
}
 80038ce:	0018      	movs	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b005      	add	sp, #20
 80038d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038d6 <user_i2c_read>:

    return rslt;
}

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b08a      	sub	sp, #40	@ 0x28
 80038da:	af04      	add	r7, sp, #16
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	210f      	movs	r1, #15
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	1c02      	adds	r2, r0, #0
 80038e8:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Read(hi2c, BMA400_I2C_ADDR, reg_addr,
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	b299      	uxth	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	6978      	ldr	r0, [r7, #20]
 80038fa:	2201      	movs	r2, #1
 80038fc:	4252      	negs	r2, r2
 80038fe:	9202      	str	r2, [sp, #8]
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2301      	movs	r3, #1
 8003908:	000a      	movs	r2, r1
 800390a:	2128      	movs	r1, #40	@ 0x28
 800390c:	f001 f9b0 	bl	8004c70 <HAL_I2C_Mem_Read>
 8003910:	1e03      	subs	r3, r0, #0
 8003912:	d101      	bne.n	8003918 <user_i2c_read+0x42>
                         I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e001      	b.n	800391c <user_i2c_read+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 8003918:	2302      	movs	r3, #2
 800391a:	425b      	negs	r3, r3
    }
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b006      	add	sp, #24
 8003922:	bd80      	pop	{r7, pc}

08003924 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	@ 0x28
 8003928:	af04      	add	r7, sp, #16
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	210f      	movs	r1, #15
 8003932:	187b      	adds	r3, r7, r1
 8003934:	1c02      	adds	r2, r0, #0
 8003936:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	617b      	str	r3, [r7, #20]

    if (HAL_I2C_Mem_Write(hi2c, BMA400_I2C_ADDR, reg_addr,
 800393c:	187b      	adds	r3, r7, r1
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	b299      	uxth	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	b29b      	uxth	r3, r3
 8003946:	6978      	ldr	r0, [r7, #20]
 8003948:	2201      	movs	r2, #1
 800394a:	4252      	negs	r2, r2
 800394c:	9202      	str	r2, [sp, #8]
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2301      	movs	r3, #1
 8003956:	000a      	movs	r2, r1
 8003958:	2128      	movs	r1, #40	@ 0x28
 800395a:	f001 f85b 	bl	8004a14 <HAL_I2C_Mem_Write>
 800395e:	1e03      	subs	r3, r0, #0
 8003960:	d101      	bne.n	8003966 <user_i2c_write+0x42>
                          I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) == HAL_OK)
    {
        return BMA400_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e001      	b.n	800396a <user_i2c_write+0x46>
    }
    else
    {
        return BMA400_E_COM_FAIL;
 8003966:	2302      	movs	r3, #2
 8003968:	425b      	negs	r3, r3
    }
}
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b006      	add	sp, #24
 8003970:	bd80      	pop	{r7, pc}

08003972 <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
    // Zakładamy, że potrzebne opóźnienia mają ≥ 1000us (1ms)
    HAL_Delay(period / 1000);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	22fa      	movs	r2, #250	@ 0xfa
 8003980:	0091      	lsls	r1, r2, #2
 8003982:	0018      	movs	r0, r3
 8003984:	f7fc fbc0 	bl	8000108 <__udivsi3>
 8003988:	0003      	movs	r3, r0
 800398a:	0018      	movs	r0, r3
 800398c:	f000 fce6 	bl	800435c <HAL_Delay>

    // Jeśli potrzebujesz dokładniejszych opóźnień — patrz niżej
}
 8003990:	46c0      	nop			@ (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}

08003998 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b08b      	sub	sp, #44	@ 0x2c
 800399c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399e:	2414      	movs	r4, #20
 80039a0:	193b      	adds	r3, r7, r4
 80039a2:	0018      	movs	r0, r3
 80039a4:	2314      	movs	r3, #20
 80039a6:	001a      	movs	r2, r3
 80039a8:	2100      	movs	r1, #0
 80039aa:	f002 ffbd 	bl	8006928 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ae:	4b44      	ldr	r3, [pc, #272]	@ (8003ac0 <MX_GPIO_Init+0x128>)
 80039b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b2:	4b43      	ldr	r3, [pc, #268]	@ (8003ac0 <MX_GPIO_Init+0x128>)
 80039b4:	2104      	movs	r1, #4
 80039b6:	430a      	orrs	r2, r1
 80039b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80039ba:	4b41      	ldr	r3, [pc, #260]	@ (8003ac0 <MX_GPIO_Init+0x128>)
 80039bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039be:	2204      	movs	r2, #4
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039c6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ac0 <MX_GPIO_Init+0x128>)
 80039c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ca:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac0 <MX_GPIO_Init+0x128>)
 80039cc:	2120      	movs	r1, #32
 80039ce:	430a      	orrs	r2, r1
 80039d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80039d2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac0 <MX_GPIO_Init+0x128>)
 80039d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d6:	2220      	movs	r2, #32
 80039d8:	4013      	ands	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039de:	4b38      	ldr	r3, [pc, #224]	@ (8003ac0 <MX_GPIO_Init+0x128>)
 80039e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039e2:	4b37      	ldr	r3, [pc, #220]	@ (8003ac0 <MX_GPIO_Init+0x128>)
 80039e4:	2101      	movs	r1, #1
 80039e6:	430a      	orrs	r2, r1
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80039ea:	4b35      	ldr	r3, [pc, #212]	@ (8003ac0 <MX_GPIO_Init+0x128>)
 80039ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ee:	2201      	movs	r2, #1
 80039f0:	4013      	ands	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f6:	4b32      	ldr	r3, [pc, #200]	@ (8003ac0 <MX_GPIO_Init+0x128>)
 80039f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039fa:	4b31      	ldr	r3, [pc, #196]	@ (8003ac0 <MX_GPIO_Init+0x128>)
 80039fc:	2102      	movs	r1, #2
 80039fe:	430a      	orrs	r2, r1
 8003a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a02:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac0 <MX_GPIO_Init+0x128>)
 8003a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a06:	2202      	movs	r2, #2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_IO_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003a0e:	23d0      	movs	r3, #208	@ 0xd0
 8003a10:	0059      	lsls	r1, r3, #1
 8003a12:	23a0      	movs	r3, #160	@ 0xa0
 8003a14:	05db      	lsls	r3, r3, #23
 8003a16:	2200      	movs	r2, #0
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 ff37 	bl	800488c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8003a1e:	193b      	adds	r3, r7, r4
 8003a20:	2204      	movs	r2, #4
 8003a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a24:	193b      	adds	r3, r7, r4
 8003a26:	2200      	movs	r2, #0
 8003a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2a:	193b      	adds	r3, r7, r4
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8003a30:	193b      	adds	r3, r7, r4
 8003a32:	4a24      	ldr	r2, [pc, #144]	@ (8003ac4 <MX_GPIO_Init+0x12c>)
 8003a34:	0019      	movs	r1, r3
 8003a36:	0010      	movs	r0, r2
 8003a38:	f000 fdbe 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 8003a3c:	193b      	adds	r3, r7, r4
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a42:	193b      	adds	r3, r7, r4
 8003a44:	4a20      	ldr	r2, [pc, #128]	@ (8003ac8 <MX_GPIO_Init+0x130>)
 8003a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8003a4e:	193a      	adds	r2, r7, r4
 8003a50:	23a0      	movs	r3, #160	@ 0xa0
 8003a52:	05db      	lsls	r3, r3, #23
 8003a54:	0011      	movs	r1, r2
 8003a56:	0018      	movs	r0, r3
 8003a58:	f000 fdae 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_IO_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = EN_IO_Pin|LED1_Pin|LED2_Pin;
 8003a5c:	0021      	movs	r1, r4
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	22d0      	movs	r2, #208	@ 0xd0
 8003a62:	0052      	lsls	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a66:	000c      	movs	r4, r1
 8003a68:	193b      	adds	r3, r7, r4
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	193b      	adds	r3, r7, r4
 8003a70:	2200      	movs	r2, #0
 8003a72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a74:	193b      	adds	r3, r7, r4
 8003a76:	2200      	movs	r2, #0
 8003a78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7a:	193a      	adds	r2, r7, r4
 8003a7c:	23a0      	movs	r3, #160	@ 0xa0
 8003a7e:	05db      	lsls	r3, r3, #23
 8003a80:	0011      	movs	r1, r2
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 fd98 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8003a88:	193b      	adds	r3, r7, r4
 8003a8a:	2240      	movs	r2, #64	@ 0x40
 8003a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a8e:	193b      	adds	r3, r7, r4
 8003a90:	2200      	movs	r2, #0
 8003a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	2201      	movs	r2, #1
 8003a98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8003a9a:	193a      	adds	r2, r7, r4
 8003a9c:	23a0      	movs	r3, #160	@ 0xa0
 8003a9e:	05db      	lsls	r3, r3, #23
 8003aa0:	0011      	movs	r1, r2
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f000 fd88 	bl	80045b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2100      	movs	r1, #0
 8003aac:	2005      	movs	r0, #5
 8003aae:	f000 fd51 	bl	8004554 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003ab2:	2005      	movs	r0, #5
 8003ab4:	f000 fd63 	bl	800457e <HAL_NVIC_EnableIRQ>

}
 8003ab8:	46c0      	nop			@ (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b00b      	add	sp, #44	@ 0x2c
 8003abe:	bd90      	pop	{r4, r7, pc}
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	50001400 	.word	0x50001400
 8003ac8:	10210000 	.word	0x10210000

08003acc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b40 <MX_I2C1_Init+0x74>)
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b44 <MX_I2C1_Init+0x78>)
 8003ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b40 <MX_I2C1_Init+0x74>)
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b48 <MX_I2C1_Init+0x7c>)
 8003ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003adc:	4b18      	ldr	r3, [pc, #96]	@ (8003b40 <MX_I2C1_Init+0x74>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ae2:	4b17      	ldr	r3, [pc, #92]	@ (8003b40 <MX_I2C1_Init+0x74>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ae8:	4b15      	ldr	r3, [pc, #84]	@ (8003b40 <MX_I2C1_Init+0x74>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003aee:	4b14      	ldr	r3, [pc, #80]	@ (8003b40 <MX_I2C1_Init+0x74>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003af4:	4b12      	ldr	r3, [pc, #72]	@ (8003b40 <MX_I2C1_Init+0x74>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003afa:	4b11      	ldr	r3, [pc, #68]	@ (8003b40 <MX_I2C1_Init+0x74>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b00:	4b0f      	ldr	r3, [pc, #60]	@ (8003b40 <MX_I2C1_Init+0x74>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b06:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <MX_I2C1_Init+0x74>)
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f000 fedd 	bl	80048c8 <HAL_I2C_Init>
 8003b0e:	1e03      	subs	r3, r0, #0
 8003b10:	d001      	beq.n	8003b16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003b12:	f000 fa57 	bl	8003fc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b16:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <MX_I2C1_Init+0x74>)
 8003b18:	2100      	movs	r1, #0
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f001 fcd8 	bl	80054d0 <HAL_I2CEx_ConfigAnalogFilter>
 8003b20:	1e03      	subs	r3, r0, #0
 8003b22:	d001      	beq.n	8003b28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003b24:	f000 fa4e 	bl	8003fc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <MX_I2C1_Init+0x74>)
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f001 fd1b 	bl	8005568 <HAL_I2CEx_ConfigDigitalFilter>
 8003b32:	1e03      	subs	r3, r0, #0
 8003b34:	d001      	beq.n	8003b3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003b36:	f000 fa45 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000078 	.word	0x20000078
 8003b44:	40005400 	.word	0x40005400
 8003b48:	00402d41 	.word	0x00402d41

08003b4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b091      	sub	sp, #68	@ 0x44
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	232c      	movs	r3, #44	@ 0x2c
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	0018      	movs	r0, r3
 8003b5a:	2314      	movs	r3, #20
 8003b5c:	001a      	movs	r2, r3
 8003b5e:	2100      	movs	r1, #0
 8003b60:	f002 fee2 	bl	8006928 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b64:	2410      	movs	r4, #16
 8003b66:	193b      	adds	r3, r7, r4
 8003b68:	0018      	movs	r0, r3
 8003b6a:	231c      	movs	r3, #28
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	2100      	movs	r1, #0
 8003b70:	f002 feda 	bl	8006928 <memset>
  if(i2cHandle->Instance==I2C1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a22      	ldr	r2, [pc, #136]	@ (8003c04 <HAL_I2C_MspInit+0xb8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d13d      	bne.n	8003bfa <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003b7e:	193b      	adds	r3, r7, r4
 8003b80:	2202      	movs	r2, #2
 8003b82:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003b84:	193b      	adds	r3, r7, r4
 8003b86:	2200      	movs	r2, #0
 8003b88:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b8a:	193b      	adds	r3, r7, r4
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f002 f8bd 	bl	8005d0c <HAL_RCCEx_PeriphCLKConfig>
 8003b92:	1e03      	subs	r3, r0, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003b96:	f000 fa15 	bl	8003fc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c08 <HAL_I2C_MspInit+0xbc>)
 8003b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003c08 <HAL_I2C_MspInit+0xbc>)
 8003ba0:	2102      	movs	r1, #2
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ba6:	4b18      	ldr	r3, [pc, #96]	@ (8003c08 <HAL_I2C_MspInit+0xbc>)
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003baa:	2202      	movs	r2, #2
 8003bac:	4013      	ands	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bb2:	212c      	movs	r1, #44	@ 0x2c
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	22c0      	movs	r2, #192	@ 0xc0
 8003bb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bba:	187b      	adds	r3, r7, r1
 8003bbc:	2212      	movs	r2, #18
 8003bbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2200      	movs	r2, #0
 8003bca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2206      	movs	r2, #6
 8003bd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8003c0c <HAL_I2C_MspInit+0xc0>)
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	0010      	movs	r0, r2
 8003bda:	f000 fced 	bl	80045b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bde:	4b0a      	ldr	r3, [pc, #40]	@ (8003c08 <HAL_I2C_MspInit+0xbc>)
 8003be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <HAL_I2C_MspInit+0xbc>)
 8003be4:	2180      	movs	r1, #128	@ 0x80
 8003be6:	0389      	lsls	r1, r1, #14
 8003be8:	430a      	orrs	r2, r1
 8003bea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003bec:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <HAL_I2C_MspInit+0xbc>)
 8003bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf0:	2380      	movs	r3, #128	@ 0x80
 8003bf2:	039b      	lsls	r3, r3, #14
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b011      	add	sp, #68	@ 0x44
 8003c00:	bd90      	pop	{r4, r7, pc}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	40005400 	.word	0x40005400
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	50000400 	.word	0x50000400

08003c10 <enter_stop_mode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enter_stop_mode(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
    HAL_SuspendTick();
 8003c16:	f000 fbc5 	bl	80043a4 <HAL_SuspendTick>
    HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f001 fcef 	bl	8005600 <HAL_PWR_EnterSTOPMode>
    HAL_ResumeTick();
 8003c22:	f000 fbcd 	bl	80043c0 <HAL_ResumeTick>

    // Restore clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <enter_stop_mode+0x5c>)
 8003c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c2a:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <enter_stop_mode+0x5c>)
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c32:	4b0e      	ldr	r3, [pc, #56]	@ (8003c6c <enter_stop_mode+0x5c>)
 8003c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c36:	2201      	movs	r2, #1
 8003c38:	4013      	ands	r3, r2
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <enter_stop_mode+0x5c>)
 8003c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <enter_stop_mode+0x5c>)
 8003c44:	2101      	movs	r1, #1
 8003c46:	430a      	orrs	r2, r1
 8003c48:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c4a:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <enter_stop_mode+0x5c>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	2201      	movs	r2, #1
 8003c50:	4013      	ands	r3, r2
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]

    // Re-init peripherals
    MX_GPIO_Init();
 8003c56:	f7ff fe9f 	bl	8003998 <MX_GPIO_Init>
    MX_I2C1_Init();
 8003c5a:	f7ff ff37 	bl	8003acc <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8003c5e:	f000 fa27 	bl	80040b0 <MX_USART1_UART_Init>
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b002      	add	sp, #8
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	40021000 	.word	0x40021000

08003c70 <configure_bma400>:



void configure_bma400(struct bma400_dev *dev)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b090      	sub	sp, #64	@ 0x40
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
    uint8_t rslt;
    struct bma400_device_conf dev_conf[3];
    struct bma400_sensor_conf sensor_conf;

    // Set initial power mode to low power
    rslt = bma400_set_power_mode(BMA400_MODE_LOW_POWER, dev);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	f7fe f8ef 	bl	8001e60 <bma400_set_power_mode>
 8003c82:	0003      	movs	r3, r0
 8003c84:	001a      	movs	r2, r3
 8003c86:	213f      	movs	r1, #63	@ 0x3f
 8003c88:	187b      	adds	r3, r7, r1
 8003c8a:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 8003c8c:	187b      	adds	r3, r7, r1
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <configure_bma400+0x28>
    {
        Error_Handler();
 8003c94:	f000 f996 	bl	8003fc4 <Error_Handler>
    }

    // Auto low power after movement stops (1s)
    dev_conf[0].type = BMA400_AUTO_LOW_POWER;
 8003c98:	2120      	movs	r1, #32
 8003c9a:	187b      	adds	r3, r7, r1
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	701a      	strb	r2, [r3, #0]
    dev_conf[0].param.auto_lp.auto_low_power_trigger =
 8003ca0:	187b      	adds	r3, r7, r1
 8003ca2:	220e      	movs	r2, #14
 8003ca4:	709a      	strb	r2, [r3, #2]
        BMA400_AUTO_LP_GEN1_TRIGGER | BMA400_AUTO_LP_TIMEOUT_EN | BMA400_AUTO_LP_TIME_RESET_EN;
    dev_conf[0].param.auto_lp.auto_lp_timeout_threshold = 400; // 400 × 2.5 ms = 1 s
 8003ca6:	187b      	adds	r3, r7, r1
 8003ca8:	22c8      	movs	r2, #200	@ 0xc8
 8003caa:	0052      	lsls	r2, r2, #1
 8003cac:	809a      	strh	r2, [r3, #4]

    // Wake-up interrupt on motion detection on Z axes
    dev_conf[1].type = BMA400_AUTOWAKEUP_INT;
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	729a      	strb	r2, [r3, #10]
    dev_conf[1].param.wakeup.wakeup_ref_update = BMA400_UPDATE_ONE_TIME;
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	731a      	strb	r2, [r3, #12]
    dev_conf[1].param.wakeup.sample_count = BMA400_SAMPLE_COUNT_6;
 8003cba:	187b      	adds	r3, r7, r1
 8003cbc:	2205      	movs	r2, #5
 8003cbe:	735a      	strb	r2, [r3, #13]
    dev_conf[1].param.wakeup.wakeup_axes_en = BMA400_AXIS_XYZ_EN;
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	2207      	movs	r2, #7
 8003cc4:	739a      	strb	r2, [r3, #14]
    dev_conf[1].param.wakeup.int_wkup_threshold = 10;
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	220a      	movs	r2, #10
 8003cca:	73da      	strb	r2, [r3, #15]
    dev_conf[1].param.wakeup.int_wkup_ref_x = 0;
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	2200      	movs	r2, #0
 8003cd0:	741a      	strb	r2, [r3, #16]
    dev_conf[1].param.wakeup.int_wkup_ref_y = 0;
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	745a      	strb	r2, [r3, #17]
    dev_conf[1].param.wakeup.int_wkup_ref_z = 0;
 8003cd8:	187b      	adds	r3, r7, r1
 8003cda:	2200      	movs	r2, #0
 8003cdc:	749a      	strb	r2, [r3, #18]
    dev_conf[1].param.wakeup.int_chan = BMA400_INT_CHANNEL_1;
 8003cde:	187b      	adds	r3, r7, r1
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	74da      	strb	r2, [r3, #19]

    dev_conf[2].type = BMA400_INT_PIN_CONF;
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	751a      	strb	r2, [r3, #20]
    dev_conf[2].param.int_conf.int_chan = BMA400_INT_CHANNEL_1;
 8003cea:	187b      	adds	r3, r7, r1
 8003cec:	2201      	movs	r2, #1
 8003cee:	759a      	strb	r2, [r3, #22]
    dev_conf[2].param.int_conf.pin_conf = BMA400_INT_OPEN_DRIVE_ACTIVE_0;
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	75da      	strb	r2, [r3, #23]

    rslt = bma400_set_device_conf(dev_conf, 3, dev);
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	2103      	movs	r1, #3
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7fe f9c1 	bl	8002084 <bma400_set_device_conf>
 8003d02:	0003      	movs	r3, r0
 8003d04:	001a      	movs	r2, r3
 8003d06:	213f      	movs	r1, #63	@ 0x3f
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <configure_bma400+0xa8>
    {
        Error_Handler();
 8003d14:	f000 f956 	bl	8003fc4 <Error_Handler>
    }

    // configure accelerometer
    sensor_conf.type = BMA400_ACCEL;
 8003d18:	210c      	movs	r1, #12
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
    sensor_conf.param.accel.odr = BMA400_ODR_100HZ;
 8003d20:	187b      	adds	r3, r7, r1
 8003d22:	2208      	movs	r2, #8
 8003d24:	709a      	strb	r2, [r3, #2]
    sensor_conf.param.accel.range = BMA400_RANGE_2G;
 8003d26:	187b      	adds	r3, r7, r1
 8003d28:	2200      	movs	r2, #0
 8003d2a:	70da      	strb	r2, [r3, #3]
    sensor_conf.param.accel.data_src = BMA400_DATA_SRC_ACCEL_FILT_LP;
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	2202      	movs	r2, #2
 8003d30:	711a      	strb	r2, [r3, #4]
    sensor_conf.param.accel.osr = BMA400_ACCEL_OSR_SETTING_3;
 8003d32:	187b      	adds	r3, r7, r1
 8003d34:	2203      	movs	r2, #3
 8003d36:	715a      	strb	r2, [r3, #5]
    sensor_conf.param.accel.filt1_bw = BMA400_ACCEL_FILT1_BW_0;
 8003d38:	187b      	adds	r3, r7, r1
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	71da      	strb	r2, [r3, #7]

    rslt = bma400_set_sensor_conf(&sensor_conf, 1, dev);
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	2101      	movs	r1, #1
 8003d44:	0018      	movs	r0, r3
 8003d46:	f7fe f91e 	bl	8001f86 <bma400_set_sensor_conf>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	001a      	movs	r2, r3
 8003d4e:	213f      	movs	r1, #63	@ 0x3f
 8003d50:	187b      	adds	r3, r7, r1
 8003d52:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK) Error_Handler();
 8003d54:	187b      	adds	r3, r7, r1
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <configure_bma400+0xf0>
 8003d5c:	f000 f932 	bl	8003fc4 <Error_Handler>

    // Enable auto wakeup
    rslt = set_auto_wakeup(BMA400_ENABLE, dev);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	0019      	movs	r1, r3
 8003d64:	2001      	movs	r0, #1
 8003d66:	f7fe fd98 	bl	800289a <set_auto_wakeup>
 8003d6a:	0003      	movs	r3, r0
 8003d6c:	001a      	movs	r2, r3
 8003d6e:	213f      	movs	r1, #63	@ 0x3f
 8003d70:	187b      	adds	r3, r7, r1
 8003d72:	701a      	strb	r2, [r3, #0]
    if (rslt != BMA400_OK)
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <configure_bma400+0x110>
    {
        Error_Handler();
 8003d7c:	f000 f922 	bl	8003fc4 <Error_Handler>
    }
}
 8003d80:	46c0      	nop			@ (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b010      	add	sp, #64	@ 0x40
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <calculate_gate_position>:

float calculate_gate_position(int16_t acc_z)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	0002      	movs	r2, r0
 8003d90:	1dbb      	adds	r3, r7, #6
 8003d92:	801a      	strh	r2, [r3, #0]
    // Normalize raw Z to acceleration in g (assuming ±2g range, 12-bit resolution)
    float acc_z_g = (float)acc_z / 1024.0f;
 8003d94:	1dbb      	adds	r3, r7, #6
 8003d96:	2200      	movs	r2, #0
 8003d98:	5e9b      	ldrsh	r3, [r3, r2]
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7fd faf8 	bl	8001390 <__aeabi_i2f>
 8003da0:	1c03      	adds	r3, r0, #0
 8003da2:	2189      	movs	r1, #137	@ 0x89
 8003da4:	05c9      	lsls	r1, r1, #23
 8003da6:	1c18      	adds	r0, r3, #0
 8003da8:	f7fc fd50 	bl	800084c <__aeabi_fdiv>
 8003dac:	1c03      	adds	r3, r0, #0
 8003dae:	617b      	str	r3, [r7, #20]

    // Clamp to avoid domain error in acosf (due to small noise)
    if (acc_z_g > 1.0f) acc_z_g = 1.0f;
 8003db0:	21fe      	movs	r1, #254	@ 0xfe
 8003db2:	0589      	lsls	r1, r1, #22
 8003db4:	6978      	ldr	r0, [r7, #20]
 8003db6:	f7fc fb43 	bl	8000440 <__aeabi_fcmpgt>
 8003dba:	1e03      	subs	r3, r0, #0
 8003dbc:	d002      	beq.n	8003dc4 <calculate_gate_position+0x3c>
 8003dbe:	23fe      	movs	r3, #254	@ 0xfe
 8003dc0:	059b      	lsls	r3, r3, #22
 8003dc2:	617b      	str	r3, [r7, #20]
    if (acc_z_g < -1.0f) acc_z_g = -1.0f;
 8003dc4:	4919      	ldr	r1, [pc, #100]	@ (8003e2c <calculate_gate_position+0xa4>)
 8003dc6:	6978      	ldr	r0, [r7, #20]
 8003dc8:	f7fc fb26 	bl	8000418 <__aeabi_fcmplt>
 8003dcc:	1e03      	subs	r3, r0, #0
 8003dce:	d001      	beq.n	8003dd4 <calculate_gate_position+0x4c>
 8003dd0:	4b16      	ldr	r3, [pc, #88]	@ (8003e2c <calculate_gate_position+0xa4>)
 8003dd2:	617b      	str	r3, [r7, #20]

    float angle_rad = acosf(acc_z_g);  				// θ = arccos(Z/g) - Calculate angle in radians from vertical
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	1c18      	adds	r0, r3, #0
 8003dd8:	f002 fdd8 	bl	800698c <acosf>
 8003ddc:	1c03      	adds	r3, r0, #0
 8003dde:	60fb      	str	r3, [r7, #12]
    float angle_deg = angle_rad * (180.0f / M_PI);	// Convert to degrees
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7fd fe0b 	bl	80019fc <__aeabi_f2d>
 8003de6:	4a12      	ldr	r2, [pc, #72]	@ (8003e30 <calculate_gate_position+0xa8>)
 8003de8:	4b12      	ldr	r3, [pc, #72]	@ (8003e34 <calculate_gate_position+0xac>)
 8003dea:	f7fd fb21 	bl	8001430 <__aeabi_dmul>
 8003dee:	0002      	movs	r2, r0
 8003df0:	000b      	movs	r3, r1
 8003df2:	0010      	movs	r0, r2
 8003df4:	0019      	movs	r1, r3
 8003df6:	f7fd fe49 	bl	8001a8c <__aeabi_d2f>
 8003dfa:	1c03      	adds	r3, r0, #0
 8003dfc:	613b      	str	r3, [r7, #16]
    if (angle_deg > 90.0f) angle_deg = 90.0f;		// Limit to 0–90°
 8003dfe:	490e      	ldr	r1, [pc, #56]	@ (8003e38 <calculate_gate_position+0xb0>)
 8003e00:	6938      	ldr	r0, [r7, #16]
 8003e02:	f7fc fb1d 	bl	8000440 <__aeabi_fcmpgt>
 8003e06:	1e03      	subs	r3, r0, #0
 8003e08:	d001      	beq.n	8003e0e <calculate_gate_position+0x86>
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <calculate_gate_position+0xb0>)
 8003e0c:	613b      	str	r3, [r7, #16]
    return (angle_deg / 90.0f) * 100.0f;			// Convert to percentage
 8003e0e:	490a      	ldr	r1, [pc, #40]	@ (8003e38 <calculate_gate_position+0xb0>)
 8003e10:	6938      	ldr	r0, [r7, #16]
 8003e12:	f7fc fd1b 	bl	800084c <__aeabi_fdiv>
 8003e16:	1c03      	adds	r3, r0, #0
 8003e18:	4908      	ldr	r1, [pc, #32]	@ (8003e3c <calculate_gate_position+0xb4>)
 8003e1a:	1c18      	adds	r0, r3, #0
 8003e1c:	f7fc fee4 	bl	8000be8 <__aeabi_fmul>
 8003e20:	1c03      	adds	r3, r0, #0
}
 8003e22:	1c18      	adds	r0, r3, #0
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b006      	add	sp, #24
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	bf800000 	.word	0xbf800000
 8003e30:	1a63c1f8 	.word	0x1a63c1f8
 8003e34:	404ca5dc 	.word	0x404ca5dc
 8003e38:	42b40000 	.word	0x42b40000
 8003e3c:	42c80000 	.word	0x42c80000

08003e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	b08d      	sub	sp, #52	@ 0x34
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	struct bma400_dev bma400;

	bma400.intf = BMA400_I2C_INTF;
 8003e46:	210c      	movs	r1, #12
 8003e48:	187b      	adds	r3, r7, r1
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	705a      	strb	r2, [r3, #1]
	bma400.intf_ptr = &hi2c1;
 8003e4e:	000c      	movs	r4, r1
 8003e50:	193b      	adds	r3, r7, r4
 8003e52:	4a23      	ldr	r2, [pc, #140]	@ (8003ee0 <main+0xa0>)
 8003e54:	605a      	str	r2, [r3, #4]
	bma400.read = user_i2c_read;
 8003e56:	193b      	adds	r3, r7, r4
 8003e58:	4a22      	ldr	r2, [pc, #136]	@ (8003ee4 <main+0xa4>)
 8003e5a:	60da      	str	r2, [r3, #12]
	bma400.write = user_i2c_write;
 8003e5c:	193b      	adds	r3, r7, r4
 8003e5e:	4a22      	ldr	r2, [pc, #136]	@ (8003ee8 <main+0xa8>)
 8003e60:	611a      	str	r2, [r3, #16]
	bma400.delay_us = user_delay_us;
 8003e62:	193b      	adds	r3, r7, r4
 8003e64:	4a21      	ldr	r2, [pc, #132]	@ (8003eec <main+0xac>)
 8003e66:	615a      	str	r2, [r3, #20]
	bma400.read_write_len = 32;
 8003e68:	193b      	adds	r3, r7, r4
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	835a      	strh	r2, [r3, #26]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e6e:	f000 f9f8 	bl	8004262 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e72:	f000 f83f 	bl	8003ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e76:	f7ff fd8f 	bl	8003998 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003e7a:	f7ff fe27 	bl	8003acc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003e7e:	f000 f917 	bl	80040b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  bma400_init(&bma400);
 8003e82:	193b      	adds	r3, r7, r4
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7fd fea1 	bl	8001bcc <bma400_init>
  configure_bma400(&bma400);
 8003e8a:	193b      	adds	r3, r7, r4
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7ff feef 	bl	8003c70 <configure_bma400>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (motion_detected)
 8003e92:	4b17      	ldr	r3, [pc, #92]	@ (8003ef0 <main+0xb0>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01e      	beq.n	8003eda <main+0x9a>
	  {
		  struct bma400_sensor_data data;
		  bma400_get_accel_data(BMA400_DATA_ONLY, &data, &bma400);
 8003e9c:	230c      	movs	r3, #12
 8003e9e:	18fa      	adds	r2, r7, r3
 8003ea0:	003b      	movs	r3, r7
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7fe f83d 	bl	8001f24 <bma400_get_accel_data>

		  float percent_open = calculate_gate_position(data.z);
 8003eaa:	003b      	movs	r3, r7
 8003eac:	2204      	movs	r2, #4
 8003eae:	5e9b      	ldrsh	r3, [r3, r2]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff ff69 	bl	8003d88 <calculate_gate_position>
 8003eb6:	1c03      	adds	r3, r0, #0
 8003eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  HAL_Delay(500);
 8003eba:	23fa      	movs	r3, #250	@ 0xfa
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f000 fa4c 	bl	800435c <HAL_Delay>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8003ec4:	23a0      	movs	r3, #160	@ 0xa0
 8003ec6:	05db      	lsls	r3, r3, #23
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2180      	movs	r1, #128	@ 0x80
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 fcdd 	bl	800488c <HAL_GPIO_WritePin>
	      motion_detected = false;
 8003ed2:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <main+0xb0>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	e7db      	b.n	8003e92 <main+0x52>
	  }
	  else
	  {
	      enter_stop_mode();
 8003eda:	f7ff fe99 	bl	8003c10 <enter_stop_mode>
	  if (motion_detected)
 8003ede:	e7d8      	b.n	8003e92 <main+0x52>
 8003ee0:	20000078 	.word	0x20000078
 8003ee4:	080038d7 	.word	0x080038d7
 8003ee8:	08003925 	.word	0x08003925
 8003eec:	08003973 	.word	0x08003973
 8003ef0:	200000cc 	.word	0x200000cc

08003ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b08d      	sub	sp, #52	@ 0x34
 8003ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003efa:	2414      	movs	r4, #20
 8003efc:	193b      	adds	r3, r7, r4
 8003efe:	0018      	movs	r0, r3
 8003f00:	231c      	movs	r3, #28
 8003f02:	001a      	movs	r2, r3
 8003f04:	2100      	movs	r1, #0
 8003f06:	f002 fd0f 	bl	8006928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f0a:	003b      	movs	r3, r7
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	2314      	movs	r3, #20
 8003f10:	001a      	movs	r2, r3
 8003f12:	2100      	movs	r1, #0
 8003f14:	f002 fd08 	bl	8006928 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003f18:	4b1b      	ldr	r3, [pc, #108]	@ (8003f88 <SystemClock_Config+0x94>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f88 <SystemClock_Config+0x94>)
 8003f1e:	2107      	movs	r1, #7
 8003f20:	438a      	bics	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f24:	193b      	adds	r3, r7, r4
 8003f26:	2202      	movs	r2, #2
 8003f28:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f2a:	193b      	adds	r3, r7, r4
 8003f2c:	2280      	movs	r2, #128	@ 0x80
 8003f2e:	0052      	lsls	r2, r2, #1
 8003f30:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8003f32:	193b      	adds	r3, r7, r4
 8003f34:	2280      	movs	r2, #128	@ 0x80
 8003f36:	0152      	lsls	r2, r2, #5
 8003f38:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f3a:	193b      	adds	r3, r7, r4
 8003f3c:	2240      	movs	r2, #64	@ 0x40
 8003f3e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f40:	193b      	adds	r3, r7, r4
 8003f42:	0018      	movs	r0, r3
 8003f44:	f001 fb86 	bl	8005654 <HAL_RCC_OscConfig>
 8003f48:	1e03      	subs	r3, r0, #0
 8003f4a:	d001      	beq.n	8003f50 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8003f4c:	f000 f83a 	bl	8003fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f50:	003b      	movs	r3, r7
 8003f52:	2207      	movs	r2, #7
 8003f54:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003f56:	003b      	movs	r3, r7
 8003f58:	2200      	movs	r2, #0
 8003f5a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003f5c:	003b      	movs	r3, r7
 8003f5e:	2200      	movs	r2, #0
 8003f60:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003f62:	003b      	movs	r3, r7
 8003f64:	2200      	movs	r2, #0
 8003f66:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8003f68:	003b      	movs	r3, r7
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f6e:	003b      	movs	r3, r7
 8003f70:	2100      	movs	r1, #0
 8003f72:	0018      	movs	r0, r3
 8003f74:	f001 fd52 	bl	8005a1c <HAL_RCC_ClockConfig>
 8003f78:	1e03      	subs	r3, r0, #0
 8003f7a:	d001      	beq.n	8003f80 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003f7c:	f000 f822 	bl	8003fc4 <Error_Handler>
  }
}
 8003f80:	46c0      	nop			@ (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b00d      	add	sp, #52	@ 0x34
 8003f86:	bd90      	pop	{r4, r7, pc}
 8003f88:	40022000 	.word	0x40022000

08003f8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	0002      	movs	r2, r0
 8003f94:	1dbb      	adds	r3, r7, #6
 8003f96:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == GPIO_PIN_0)
 8003f98:	1dbb      	adds	r3, r7, #6
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_GPIO_EXTI_Callback+0x2a>
    {
        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);  // <-- LED tu ma migać
 8003fa0:	2380      	movs	r3, #128	@ 0x80
 8003fa2:	0059      	lsls	r1, r3, #1
 8003fa4:	23a0      	movs	r3, #160	@ 0xa0
 8003fa6:	05db      	lsls	r3, r3, #23
 8003fa8:	2201      	movs	r2, #1
 8003faa:	0018      	movs	r0, r3
 8003fac:	f000 fc6e 	bl	800488c <HAL_GPIO_WritePin>
        motion_detected = true;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	@ (8003fc0 <HAL_GPIO_EXTI_Callback+0x34>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	701a      	strb	r2, [r3, #0]
    }
}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b002      	add	sp, #8
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	200000cc 	.word	0x200000cc

08003fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fc8:	b672      	cpsid	i
}
 8003fca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fcc:	46c0      	nop			@ (mov r8, r8)
 8003fce:	e7fd      	b.n	8003fcc <Error_Handler+0x8>

08003fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd6:	4b12      	ldr	r3, [pc, #72]	@ (8004020 <HAL_MspInit+0x50>)
 8003fd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fda:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <HAL_MspInit+0x50>)
 8003fdc:	2101      	movs	r1, #1
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8004020 <HAL_MspInit+0x50>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	4013      	ands	r3, r2
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	4b0c      	ldr	r3, [pc, #48]	@ (8004020 <HAL_MspInit+0x50>)
 8003ff0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_MspInit+0x50>)
 8003ff4:	2180      	movs	r1, #128	@ 0x80
 8003ff6:	0549      	lsls	r1, r1, #21
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ffc:	4b08      	ldr	r3, [pc, #32]	@ (8004020 <HAL_MspInit+0x50>)
 8003ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004000:	2380      	movs	r3, #128	@ 0x80
 8004002:	055b      	lsls	r3, r3, #21
 8004004:	4013      	ands	r3, r2
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 800400a:	2008      	movs	r0, #8
 800400c:	f000 f9e6 	bl	80043dc <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8004010:	2010      	movs	r0, #16
 8004012:	f000 f9e3 	bl	80043dc <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	46bd      	mov	sp, r7
 800401a:	b002      	add	sp, #8
 800401c:	bd80      	pop	{r7, pc}
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	40021000 	.word	0x40021000

08004024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004028:	46c0      	nop			@ (mov r8, r8)
 800402a:	e7fd      	b.n	8004028 <NMI_Handler+0x4>

0800402c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004030:	46c0      	nop			@ (mov r8, r8)
 8004032:	e7fd      	b.n	8004030 <HardFault_Handler+0x4>

08004034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004038:	46c0      	nop			@ (mov r8, r8)
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800404c:	f000 f96a 	bl	8004324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004050:	46c0      	nop			@ (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 800405c:	4b0d      	ldr	r3, [pc, #52]	@ (8004094 <EXTI0_1_IRQHandler+0x3c>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	4013      	ands	r3, r2
 8004064:	d104      	bne.n	8004070 <EXTI0_1_IRQHandler+0x18>
 8004066:	4b0b      	ldr	r3, [pc, #44]	@ (8004094 <EXTI0_1_IRQHandler+0x3c>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2201      	movs	r2, #1
 800406c:	4013      	ands	r3, r2
 800406e:	d001      	beq.n	8004074 <EXTI0_1_IRQHandler+0x1c>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <EXTI0_1_IRQHandler+0x1e>
 8004074:	2300      	movs	r3, #0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <EXTI0_1_IRQHandler+0x34>
  {
      __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 800407a:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <EXTI0_1_IRQHandler+0x3c>)
 800407c:	2201      	movs	r2, #1
 800407e:	60da      	str	r2, [r3, #12]
 8004080:	4b04      	ldr	r3, [pc, #16]	@ (8004094 <EXTI0_1_IRQHandler+0x3c>)
 8004082:	2201      	movs	r2, #1
 8004084:	611a      	str	r2, [r3, #16]
      HAL_GPIO_EXTI_Callback(GPIO_PIN_0);  // <-- ręcznie wywołujemy callback
 8004086:	2001      	movs	r0, #1
 8004088:	f7ff ff80 	bl	8003f8c <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800408c:	46c0      	nop			@ (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	40021800 	.word	0x40021800

08004098 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800409c:	4b03      	ldr	r3, [pc, #12]	@ (80040ac <SystemInit+0x14>)
 800409e:	2280      	movs	r2, #128	@ 0x80
 80040a0:	0512      	lsls	r2, r2, #20
 80040a2:	609a      	str	r2, [r3, #8]
#endif
}
 80040a4:	46c0      	nop			@ (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040b4:	4b23      	ldr	r3, [pc, #140]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040b6:	4a24      	ldr	r2, [pc, #144]	@ (8004148 <MX_USART1_UART_Init+0x98>)
 80040b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80040ba:	4b22      	ldr	r3, [pc, #136]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040bc:	22e1      	movs	r2, #225	@ 0xe1
 80040be:	0252      	lsls	r2, r2, #9
 80040c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040c2:	4b20      	ldr	r3, [pc, #128]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80040c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80040ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040d6:	220c      	movs	r2, #12
 80040d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040da:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040dc:	2200      	movs	r2, #0
 80040de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80040e0:	4b18      	ldr	r3, [pc, #96]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040e6:	4b17      	ldr	r3, [pc, #92]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80040ec:	4b15      	ldr	r3, [pc, #84]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040f2:	4b14      	ldr	r3, [pc, #80]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80040f8:	4b12      	ldr	r3, [pc, #72]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040fa:	0018      	movs	r0, r3
 80040fc:	f001 fef2 	bl	8005ee4 <HAL_UART_Init>
 8004100:	1e03      	subs	r3, r0, #0
 8004102:	d001      	beq.n	8004108 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004104:	f7ff ff5e 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004108:	4b0e      	ldr	r3, [pc, #56]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 800410a:	2100      	movs	r1, #0
 800410c:	0018      	movs	r0, r3
 800410e:	f002 fb2b 	bl	8006768 <HAL_UARTEx_SetTxFifoThreshold>
 8004112:	1e03      	subs	r3, r0, #0
 8004114:	d001      	beq.n	800411a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004116:	f7ff ff55 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800411a:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 800411c:	2100      	movs	r1, #0
 800411e:	0018      	movs	r0, r3
 8004120:	f002 fb62 	bl	80067e8 <HAL_UARTEx_SetRxFifoThreshold>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d001      	beq.n	800412c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004128:	f7ff ff4c 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800412c:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 800412e:	0018      	movs	r0, r3
 8004130:	f002 fae0 	bl	80066f4 <HAL_UARTEx_DisableFifoMode>
 8004134:	1e03      	subs	r3, r0, #0
 8004136:	d001      	beq.n	800413c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004138:	f7ff ff44 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800413c:	46c0      	nop			@ (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	200000d0 	.word	0x200000d0
 8004148:	40013800 	.word	0x40013800

0800414c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800414c:	b590      	push	{r4, r7, lr}
 800414e:	b091      	sub	sp, #68	@ 0x44
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004154:	232c      	movs	r3, #44	@ 0x2c
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	0018      	movs	r0, r3
 800415a:	2314      	movs	r3, #20
 800415c:	001a      	movs	r2, r3
 800415e:	2100      	movs	r1, #0
 8004160:	f002 fbe2 	bl	8006928 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004164:	2410      	movs	r4, #16
 8004166:	193b      	adds	r3, r7, r4
 8004168:	0018      	movs	r0, r3
 800416a:	231c      	movs	r3, #28
 800416c:	001a      	movs	r2, r3
 800416e:	2100      	movs	r1, #0
 8004170:	f002 fbda 	bl	8006928 <memset>
  if(uartHandle->Instance==USART1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a23      	ldr	r2, [pc, #140]	@ (8004208 <HAL_UART_MspInit+0xbc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d13f      	bne.n	80041fe <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800417e:	193b      	adds	r3, r7, r4
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004184:	193b      	adds	r3, r7, r4
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800418a:	193b      	adds	r3, r7, r4
 800418c:	0018      	movs	r0, r3
 800418e:	f001 fdbd 	bl	8005d0c <HAL_RCCEx_PeriphCLKConfig>
 8004192:	1e03      	subs	r3, r0, #0
 8004194:	d001      	beq.n	800419a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004196:	f7ff ff15 	bl	8003fc4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800419a:	4b1c      	ldr	r3, [pc, #112]	@ (800420c <HAL_UART_MspInit+0xc0>)
 800419c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800419e:	4b1b      	ldr	r3, [pc, #108]	@ (800420c <HAL_UART_MspInit+0xc0>)
 80041a0:	2180      	movs	r1, #128	@ 0x80
 80041a2:	01c9      	lsls	r1, r1, #7
 80041a4:	430a      	orrs	r2, r1
 80041a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80041a8:	4b18      	ldr	r3, [pc, #96]	@ (800420c <HAL_UART_MspInit+0xc0>)
 80041aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041ac:	2380      	movs	r3, #128	@ 0x80
 80041ae:	01db      	lsls	r3, r3, #7
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b6:	4b15      	ldr	r3, [pc, #84]	@ (800420c <HAL_UART_MspInit+0xc0>)
 80041b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041ba:	4b14      	ldr	r3, [pc, #80]	@ (800420c <HAL_UART_MspInit+0xc0>)
 80041bc:	2101      	movs	r1, #1
 80041be:	430a      	orrs	r2, r1
 80041c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80041c2:	4b12      	ldr	r3, [pc, #72]	@ (800420c <HAL_UART_MspInit+0xc0>)
 80041c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c6:	2201      	movs	r2, #1
 80041c8:	4013      	ands	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041ce:	212c      	movs	r1, #44	@ 0x2c
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	22c0      	movs	r2, #192	@ 0xc0
 80041d4:	00d2      	lsls	r2, r2, #3
 80041d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	2202      	movs	r2, #2
 80041dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041de:	187b      	adds	r3, r7, r1
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e4:	187b      	adds	r3, r7, r1
 80041e6:	2200      	movs	r2, #0
 80041e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80041ea:	187b      	adds	r3, r7, r1
 80041ec:	2201      	movs	r2, #1
 80041ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f0:	187a      	adds	r2, r7, r1
 80041f2:	23a0      	movs	r3, #160	@ 0xa0
 80041f4:	05db      	lsls	r3, r3, #23
 80041f6:	0011      	movs	r1, r2
 80041f8:	0018      	movs	r0, r3
 80041fa:	f000 f9dd 	bl	80045b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	46bd      	mov	sp, r7
 8004202:	b011      	add	sp, #68	@ 0x44
 8004204:	bd90      	pop	{r4, r7, pc}
 8004206:	46c0      	nop			@ (mov r8, r8)
 8004208:	40013800 	.word	0x40013800
 800420c:	40021000 	.word	0x40021000

08004210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004210:	480d      	ldr	r0, [pc, #52]	@ (8004248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004212:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004214:	f7ff ff40 	bl	8004098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004218:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800421a:	e003      	b.n	8004224 <LoopCopyDataInit>

0800421c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800421c:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800421e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004220:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004222:	3104      	adds	r1, #4

08004224 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004224:	480a      	ldr	r0, [pc, #40]	@ (8004250 <LoopForever+0xa>)
  ldr r3, =_edata
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <LoopForever+0xe>)
  adds r2, r0, r1
 8004228:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800422a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800422c:	d3f6      	bcc.n	800421c <CopyDataInit>
  ldr r2, =_sbss
 800422e:	4a0a      	ldr	r2, [pc, #40]	@ (8004258 <LoopForever+0x12>)
  b LoopFillZerobss
 8004230:	e002      	b.n	8004238 <LoopFillZerobss>

08004232 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004232:	2300      	movs	r3, #0
  str  r3, [r2]
 8004234:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004236:	3204      	adds	r2, #4

08004238 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004238:	4b08      	ldr	r3, [pc, #32]	@ (800425c <LoopForever+0x16>)
  cmp r2, r3
 800423a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800423c:	d3f9      	bcc.n	8004232 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800423e:	f002 fb81 	bl	8006944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004242:	f7ff fdfd 	bl	8003e40 <main>

08004246 <LoopForever>:

LoopForever:
    b LoopForever
 8004246:	e7fe      	b.n	8004246 <LoopForever>
  ldr   r0, =_estack
 8004248:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 800424c:	08006f04 	.word	0x08006f04
  ldr r0, =_sdata
 8004250:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004254:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8004258:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 800425c:	200002a0 	.word	0x200002a0

08004260 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004260:	e7fe      	b.n	8004260 <ADC1_IRQHandler>

08004262 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004268:	1dfb      	adds	r3, r7, #7
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800426e:	2003      	movs	r0, #3
 8004270:	f000 f80e 	bl	8004290 <HAL_InitTick>
 8004274:	1e03      	subs	r3, r0, #0
 8004276:	d003      	beq.n	8004280 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8004278:	1dfb      	adds	r3, r7, #7
 800427a:	2201      	movs	r2, #1
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e001      	b.n	8004284 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004280:	f7ff fea6 	bl	8003fd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004284:	1dfb      	adds	r3, r7, #7
 8004286:	781b      	ldrb	r3, [r3, #0]
}
 8004288:	0018      	movs	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	b002      	add	sp, #8
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004290:	b590      	push	{r4, r7, lr}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004298:	230f      	movs	r3, #15
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80042a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <HAL_InitTick+0x88>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d02b      	beq.n	8004300 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80042a8:	4b1c      	ldr	r3, [pc, #112]	@ (800431c <HAL_InitTick+0x8c>)
 80042aa:	681c      	ldr	r4, [r3, #0]
 80042ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004318 <HAL_InitTick+0x88>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	0019      	movs	r1, r3
 80042b2:	23fa      	movs	r3, #250	@ 0xfa
 80042b4:	0098      	lsls	r0, r3, #2
 80042b6:	f7fb ff27 	bl	8000108 <__udivsi3>
 80042ba:	0003      	movs	r3, r0
 80042bc:	0019      	movs	r1, r3
 80042be:	0020      	movs	r0, r4
 80042c0:	f7fb ff22 	bl	8000108 <__udivsi3>
 80042c4:	0003      	movs	r3, r0
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 f969 	bl	800459e <HAL_SYSTICK_Config>
 80042cc:	1e03      	subs	r3, r0, #0
 80042ce:	d112      	bne.n	80042f6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d80a      	bhi.n	80042ec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	2301      	movs	r3, #1
 80042da:	425b      	negs	r3, r3
 80042dc:	2200      	movs	r2, #0
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 f938 	bl	8004554 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80042e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004320 <HAL_InitTick+0x90>)
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e00d      	b.n	8004308 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80042ec:	230f      	movs	r3, #15
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	2201      	movs	r2, #1
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e008      	b.n	8004308 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80042f6:	230f      	movs	r3, #15
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e003      	b.n	8004308 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004300:	230f      	movs	r3, #15
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	2201      	movs	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004308:	230f      	movs	r3, #15
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	781b      	ldrb	r3, [r3, #0]
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b005      	add	sp, #20
 8004314:	bd90      	pop	{r4, r7, pc}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	20000008 	.word	0x20000008
 800431c:	20000000 	.word	0x20000000
 8004320:	20000004 	.word	0x20000004

08004324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004328:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <HAL_IncTick+0x1c>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	001a      	movs	r2, r3
 800432e:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <HAL_IncTick+0x20>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	18d2      	adds	r2, r2, r3
 8004334:	4b03      	ldr	r3, [pc, #12]	@ (8004344 <HAL_IncTick+0x20>)
 8004336:	601a      	str	r2, [r3, #0]
}
 8004338:	46c0      	nop			@ (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			@ (mov r8, r8)
 8004340:	20000008 	.word	0x20000008
 8004344:	20000164 	.word	0x20000164

08004348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  return uwTick;
 800434c:	4b02      	ldr	r3, [pc, #8]	@ (8004358 <HAL_GetTick+0x10>)
 800434e:	681b      	ldr	r3, [r3, #0]
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	20000164 	.word	0x20000164

0800435c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004364:	f7ff fff0 	bl	8004348 <HAL_GetTick>
 8004368:	0003      	movs	r3, r0
 800436a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3301      	adds	r3, #1
 8004374:	d005      	beq.n	8004382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004376:	4b0a      	ldr	r3, [pc, #40]	@ (80043a0 <HAL_Delay+0x44>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	001a      	movs	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	189b      	adds	r3, r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	f7ff ffe0 	bl	8004348 <HAL_GetTick>
 8004388:	0002      	movs	r2, r0
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d8f7      	bhi.n	8004384 <HAL_Delay+0x28>
  {
  }
}
 8004394:	46c0      	nop			@ (mov r8, r8)
 8004396:	46c0      	nop			@ (mov r8, r8)
 8004398:	46bd      	mov	sp, r7
 800439a:	b004      	add	sp, #16
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	20000008 	.word	0x20000008

080043a4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80043a8:	4b04      	ldr	r3, [pc, #16]	@ (80043bc <HAL_SuspendTick+0x18>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b03      	ldr	r3, [pc, #12]	@ (80043bc <HAL_SuspendTick+0x18>)
 80043ae:	2102      	movs	r1, #2
 80043b0:	438a      	bics	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	46c0      	nop			@ (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	e000e010 	.word	0xe000e010

080043c0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80043c4:	4b04      	ldr	r3, [pc, #16]	@ (80043d8 <HAL_ResumeTick+0x18>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b03      	ldr	r3, [pc, #12]	@ (80043d8 <HAL_ResumeTick+0x18>)
 80043ca:	2102      	movs	r1, #2
 80043cc:	430a      	orrs	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]
}
 80043d0:	46c0      	nop			@ (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	e000e010 	.word	0xe000e010

080043dc <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 80043e4:	4b04      	ldr	r3, [pc, #16]	@ (80043f8 <HAL_SYSCFG_EnableRemap+0x1c>)
 80043e6:	6819      	ldr	r1, [r3, #0]
 80043e8:	4b03      	ldr	r3, [pc, #12]	@ (80043f8 <HAL_SYSCFG_EnableRemap+0x1c>)
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]
}
 80043f0:	46c0      	nop			@ (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b002      	add	sp, #8
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40010000 	.word	0x40010000

080043fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	0002      	movs	r2, r0
 8004404:	1dfb      	adds	r3, r7, #7
 8004406:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004408:	1dfb      	adds	r3, r7, #7
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b7f      	cmp	r3, #127	@ 0x7f
 800440e:	d809      	bhi.n	8004424 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004410:	1dfb      	adds	r3, r7, #7
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	001a      	movs	r2, r3
 8004416:	231f      	movs	r3, #31
 8004418:	401a      	ands	r2, r3
 800441a:	4b04      	ldr	r3, [pc, #16]	@ (800442c <__NVIC_EnableIRQ+0x30>)
 800441c:	2101      	movs	r1, #1
 800441e:	4091      	lsls	r1, r2
 8004420:	000a      	movs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004424:	46c0      	nop			@ (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	b002      	add	sp, #8
 800442a:	bd80      	pop	{r7, pc}
 800442c:	e000e100 	.word	0xe000e100

08004430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004430:	b590      	push	{r4, r7, lr}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	0002      	movs	r2, r0
 8004438:	6039      	str	r1, [r7, #0]
 800443a:	1dfb      	adds	r3, r7, #7
 800443c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800443e:	1dfb      	adds	r3, r7, #7
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b7f      	cmp	r3, #127	@ 0x7f
 8004444:	d828      	bhi.n	8004498 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004446:	4a2f      	ldr	r2, [pc, #188]	@ (8004504 <__NVIC_SetPriority+0xd4>)
 8004448:	1dfb      	adds	r3, r7, #7
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	b25b      	sxtb	r3, r3
 800444e:	089b      	lsrs	r3, r3, #2
 8004450:	33c0      	adds	r3, #192	@ 0xc0
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	589b      	ldr	r3, [r3, r2]
 8004456:	1dfa      	adds	r2, r7, #7
 8004458:	7812      	ldrb	r2, [r2, #0]
 800445a:	0011      	movs	r1, r2
 800445c:	2203      	movs	r2, #3
 800445e:	400a      	ands	r2, r1
 8004460:	00d2      	lsls	r2, r2, #3
 8004462:	21ff      	movs	r1, #255	@ 0xff
 8004464:	4091      	lsls	r1, r2
 8004466:	000a      	movs	r2, r1
 8004468:	43d2      	mvns	r2, r2
 800446a:	401a      	ands	r2, r3
 800446c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	22ff      	movs	r2, #255	@ 0xff
 8004474:	401a      	ands	r2, r3
 8004476:	1dfb      	adds	r3, r7, #7
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	0018      	movs	r0, r3
 800447c:	2303      	movs	r3, #3
 800447e:	4003      	ands	r3, r0
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004484:	481f      	ldr	r0, [pc, #124]	@ (8004504 <__NVIC_SetPriority+0xd4>)
 8004486:	1dfb      	adds	r3, r7, #7
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	b25b      	sxtb	r3, r3
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	430a      	orrs	r2, r1
 8004490:	33c0      	adds	r3, #192	@ 0xc0
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004496:	e031      	b.n	80044fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004498:	4a1b      	ldr	r2, [pc, #108]	@ (8004508 <__NVIC_SetPriority+0xd8>)
 800449a:	1dfb      	adds	r3, r7, #7
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	0019      	movs	r1, r3
 80044a0:	230f      	movs	r3, #15
 80044a2:	400b      	ands	r3, r1
 80044a4:	3b08      	subs	r3, #8
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	3306      	adds	r3, #6
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	18d3      	adds	r3, r2, r3
 80044ae:	3304      	adds	r3, #4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	1dfa      	adds	r2, r7, #7
 80044b4:	7812      	ldrb	r2, [r2, #0]
 80044b6:	0011      	movs	r1, r2
 80044b8:	2203      	movs	r2, #3
 80044ba:	400a      	ands	r2, r1
 80044bc:	00d2      	lsls	r2, r2, #3
 80044be:	21ff      	movs	r1, #255	@ 0xff
 80044c0:	4091      	lsls	r1, r2
 80044c2:	000a      	movs	r2, r1
 80044c4:	43d2      	mvns	r2, r2
 80044c6:	401a      	ands	r2, r3
 80044c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	019b      	lsls	r3, r3, #6
 80044ce:	22ff      	movs	r2, #255	@ 0xff
 80044d0:	401a      	ands	r2, r3
 80044d2:	1dfb      	adds	r3, r7, #7
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	0018      	movs	r0, r3
 80044d8:	2303      	movs	r3, #3
 80044da:	4003      	ands	r3, r0
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044e0:	4809      	ldr	r0, [pc, #36]	@ (8004508 <__NVIC_SetPriority+0xd8>)
 80044e2:	1dfb      	adds	r3, r7, #7
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	001c      	movs	r4, r3
 80044e8:	230f      	movs	r3, #15
 80044ea:	4023      	ands	r3, r4
 80044ec:	3b08      	subs	r3, #8
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	430a      	orrs	r2, r1
 80044f2:	3306      	adds	r3, #6
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	18c3      	adds	r3, r0, r3
 80044f8:	3304      	adds	r3, #4
 80044fa:	601a      	str	r2, [r3, #0]
}
 80044fc:	46c0      	nop			@ (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	b003      	add	sp, #12
 8004502:	bd90      	pop	{r4, r7, pc}
 8004504:	e000e100 	.word	0xe000e100
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	1e5a      	subs	r2, r3, #1
 8004518:	2380      	movs	r3, #128	@ 0x80
 800451a:	045b      	lsls	r3, r3, #17
 800451c:	429a      	cmp	r2, r3
 800451e:	d301      	bcc.n	8004524 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004520:	2301      	movs	r3, #1
 8004522:	e010      	b.n	8004546 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004524:	4b0a      	ldr	r3, [pc, #40]	@ (8004550 <SysTick_Config+0x44>)
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	3a01      	subs	r2, #1
 800452a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800452c:	2301      	movs	r3, #1
 800452e:	425b      	negs	r3, r3
 8004530:	2103      	movs	r1, #3
 8004532:	0018      	movs	r0, r3
 8004534:	f7ff ff7c 	bl	8004430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004538:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <SysTick_Config+0x44>)
 800453a:	2200      	movs	r2, #0
 800453c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800453e:	4b04      	ldr	r3, [pc, #16]	@ (8004550 <SysTick_Config+0x44>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004544:	2300      	movs	r3, #0
}
 8004546:	0018      	movs	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	b002      	add	sp, #8
 800454c:	bd80      	pop	{r7, pc}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	e000e010 	.word	0xe000e010

08004554 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	210f      	movs	r1, #15
 8004560:	187b      	adds	r3, r7, r1
 8004562:	1c02      	adds	r2, r0, #0
 8004564:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	187b      	adds	r3, r7, r1
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b25b      	sxtb	r3, r3
 800456e:	0011      	movs	r1, r2
 8004570:	0018      	movs	r0, r3
 8004572:	f7ff ff5d 	bl	8004430 <__NVIC_SetPriority>
}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	46bd      	mov	sp, r7
 800457a:	b004      	add	sp, #16
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	0002      	movs	r2, r0
 8004586:	1dfb      	adds	r3, r7, #7
 8004588:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800458a:	1dfb      	adds	r3, r7, #7
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	b25b      	sxtb	r3, r3
 8004590:	0018      	movs	r0, r3
 8004592:	f7ff ff33 	bl	80043fc <__NVIC_EnableIRQ>
}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	0018      	movs	r0, r3
 80045aa:	f7ff ffaf 	bl	800450c <SysTick_Config>
 80045ae:	0003      	movs	r3, r0
}
 80045b0:	0018      	movs	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80045c6:	e14d      	b.n	8004864 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2101      	movs	r1, #1
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4091      	lsls	r1, r2
 80045d2:	000a      	movs	r2, r1
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d100      	bne.n	80045e0 <HAL_GPIO_Init+0x28>
 80045de:	e13e      	b.n	800485e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d003      	beq.n	80045f0 <HAL_GPIO_Init+0x38>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b12      	cmp	r3, #18
 80045ee:	d125      	bne.n	800463c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	08da      	lsrs	r2, r3, #3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3208      	adds	r2, #8
 80045f8:	0092      	lsls	r2, r2, #2
 80045fa:	58d3      	ldr	r3, [r2, r3]
 80045fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2207      	movs	r2, #7
 8004602:	4013      	ands	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	220f      	movs	r2, #15
 8004608:	409a      	lsls	r2, r3
 800460a:	0013      	movs	r3, r2
 800460c:	43da      	mvns	r2, r3
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	4013      	ands	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	220f      	movs	r2, #15
 800461a:	401a      	ands	r2, r3
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2107      	movs	r1, #7
 8004620:	400b      	ands	r3, r1
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	409a      	lsls	r2, r3
 8004626:	0013      	movs	r3, r2
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	08da      	lsrs	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3208      	adds	r2, #8
 8004636:	0092      	lsls	r2, r2, #2
 8004638:	6979      	ldr	r1, [r7, #20]
 800463a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	2203      	movs	r2, #3
 8004648:	409a      	lsls	r2, r3
 800464a:	0013      	movs	r3, r2
 800464c:	43da      	mvns	r2, r3
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	4013      	ands	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2203      	movs	r2, #3
 800465a:	401a      	ands	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	409a      	lsls	r2, r3
 8004662:	0013      	movs	r3, r2
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d00b      	beq.n	8004690 <HAL_GPIO_Init+0xd8>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d007      	beq.n	8004690 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004684:	2b11      	cmp	r3, #17
 8004686:	d003      	beq.n	8004690 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b12      	cmp	r3, #18
 800468e:	d130      	bne.n	80046f2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	2203      	movs	r2, #3
 800469c:	409a      	lsls	r2, r3
 800469e:	0013      	movs	r3, r2
 80046a0:	43da      	mvns	r2, r3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	4013      	ands	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	409a      	lsls	r2, r3
 80046b2:	0013      	movs	r3, r2
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046c6:	2201      	movs	r2, #1
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	409a      	lsls	r2, r3
 80046cc:	0013      	movs	r3, r2
 80046ce:	43da      	mvns	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	4013      	ands	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	2201      	movs	r2, #1
 80046de:	401a      	ands	r2, r3
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	409a      	lsls	r2, r3
 80046e4:	0013      	movs	r3, r2
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d017      	beq.n	800472a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	2203      	movs	r2, #3
 8004706:	409a      	lsls	r2, r3
 8004708:	0013      	movs	r3, r2
 800470a:	43da      	mvns	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	4013      	ands	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	409a      	lsls	r2, r3
 800471c:	0013      	movs	r3, r2
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	055b      	lsls	r3, r3, #21
 8004732:	4013      	ands	r3, r2
 8004734:	d100      	bne.n	8004738 <HAL_GPIO_Init+0x180>
 8004736:	e092      	b.n	800485e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004738:	4a50      	ldr	r2, [pc, #320]	@ (800487c <HAL_GPIO_Init+0x2c4>)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	3318      	adds	r3, #24
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	589b      	ldr	r3, [r3, r2]
 8004744:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2203      	movs	r2, #3
 800474a:	4013      	ands	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	220f      	movs	r2, #15
 8004750:	409a      	lsls	r2, r3
 8004752:	0013      	movs	r3, r2
 8004754:	43da      	mvns	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	4013      	ands	r3, r2
 800475a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	23a0      	movs	r3, #160	@ 0xa0
 8004760:	05db      	lsls	r3, r3, #23
 8004762:	429a      	cmp	r2, r3
 8004764:	d013      	beq.n	800478e <HAL_GPIO_Init+0x1d6>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a45      	ldr	r2, [pc, #276]	@ (8004880 <HAL_GPIO_Init+0x2c8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00d      	beq.n	800478a <HAL_GPIO_Init+0x1d2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a44      	ldr	r2, [pc, #272]	@ (8004884 <HAL_GPIO_Init+0x2cc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <HAL_GPIO_Init+0x1ce>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a43      	ldr	r2, [pc, #268]	@ (8004888 <HAL_GPIO_Init+0x2d0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d101      	bne.n	8004782 <HAL_GPIO_Init+0x1ca>
 800477e:	2305      	movs	r3, #5
 8004780:	e006      	b.n	8004790 <HAL_GPIO_Init+0x1d8>
 8004782:	2306      	movs	r3, #6
 8004784:	e004      	b.n	8004790 <HAL_GPIO_Init+0x1d8>
 8004786:	2302      	movs	r3, #2
 8004788:	e002      	b.n	8004790 <HAL_GPIO_Init+0x1d8>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_GPIO_Init+0x1d8>
 800478e:	2300      	movs	r3, #0
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	2103      	movs	r1, #3
 8004794:	400a      	ands	r2, r1
 8004796:	00d2      	lsls	r2, r2, #3
 8004798:	4093      	lsls	r3, r2
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80047a0:	4936      	ldr	r1, [pc, #216]	@ (800487c <HAL_GPIO_Init+0x2c4>)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	3318      	adds	r3, #24
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80047ae:	4a33      	ldr	r2, [pc, #204]	@ (800487c <HAL_GPIO_Init+0x2c4>)
 80047b0:	2380      	movs	r3, #128	@ 0x80
 80047b2:	58d3      	ldr	r3, [r2, r3]
 80047b4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	43da      	mvns	r2, r3
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	4013      	ands	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	2380      	movs	r3, #128	@ 0x80
 80047c6:	025b      	lsls	r3, r3, #9
 80047c8:	4013      	ands	r3, r2
 80047ca:	d003      	beq.n	80047d4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80047d4:	4929      	ldr	r1, [pc, #164]	@ (800487c <HAL_GPIO_Init+0x2c4>)
 80047d6:	2280      	movs	r2, #128	@ 0x80
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80047dc:	4a27      	ldr	r2, [pc, #156]	@ (800487c <HAL_GPIO_Init+0x2c4>)
 80047de:	2384      	movs	r3, #132	@ 0x84
 80047e0:	58d3      	ldr	r3, [r2, r3]
 80047e2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	43da      	mvns	r2, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	4013      	ands	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	2380      	movs	r3, #128	@ 0x80
 80047f4:	029b      	lsls	r3, r3, #10
 80047f6:	4013      	ands	r3, r2
 80047f8:	d003      	beq.n	8004802 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004802:	491e      	ldr	r1, [pc, #120]	@ (800487c <HAL_GPIO_Init+0x2c4>)
 8004804:	2284      	movs	r2, #132	@ 0x84
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800480a:	4b1c      	ldr	r3, [pc, #112]	@ (800487c <HAL_GPIO_Init+0x2c4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	43da      	mvns	r2, r3
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	4013      	ands	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	2380      	movs	r3, #128	@ 0x80
 8004820:	035b      	lsls	r3, r3, #13
 8004822:	4013      	ands	r3, r2
 8004824:	d003      	beq.n	800482e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800482e:	4b13      	ldr	r3, [pc, #76]	@ (800487c <HAL_GPIO_Init+0x2c4>)
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8004834:	4b11      	ldr	r3, [pc, #68]	@ (800487c <HAL_GPIO_Init+0x2c4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	43da      	mvns	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	4013      	ands	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	2380      	movs	r3, #128	@ 0x80
 800484a:	039b      	lsls	r3, r3, #14
 800484c:	4013      	ands	r3, r2
 800484e:	d003      	beq.n	8004858 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004858:	4b08      	ldr	r3, [pc, #32]	@ (800487c <HAL_GPIO_Init+0x2c4>)
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	3301      	adds	r3, #1
 8004862:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	40da      	lsrs	r2, r3
 800486c:	1e13      	subs	r3, r2, #0
 800486e:	d000      	beq.n	8004872 <HAL_GPIO_Init+0x2ba>
 8004870:	e6aa      	b.n	80045c8 <HAL_GPIO_Init+0x10>
  }
}
 8004872:	46c0      	nop			@ (mov r8, r8)
 8004874:	46c0      	nop			@ (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b006      	add	sp, #24
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40021800 	.word	0x40021800
 8004880:	50000400 	.word	0x50000400
 8004884:	50000800 	.word	0x50000800
 8004888:	50001400 	.word	0x50001400

0800488c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	0008      	movs	r0, r1
 8004896:	0011      	movs	r1, r2
 8004898:	1cbb      	adds	r3, r7, #2
 800489a:	1c02      	adds	r2, r0, #0
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	1c7b      	adds	r3, r7, #1
 80048a0:	1c0a      	adds	r2, r1, #0
 80048a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048a4:	1c7b      	adds	r3, r7, #1
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048ac:	1cbb      	adds	r3, r7, #2
 80048ae:	881a      	ldrh	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048b4:	e003      	b.n	80048be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048b6:	1cbb      	adds	r3, r7, #2
 80048b8:	881a      	ldrh	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b002      	add	sp, #8
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e08f      	b.n	80049fa <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2241      	movs	r2, #65	@ 0x41
 80048de:	5c9b      	ldrb	r3, [r3, r2]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d107      	bne.n	80048f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2240      	movs	r2, #64	@ 0x40
 80048ea:	2100      	movs	r1, #0
 80048ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	0018      	movs	r0, r3
 80048f2:	f7ff f92b 	bl	8003b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2241      	movs	r2, #65	@ 0x41
 80048fa:	2124      	movs	r1, #36	@ 0x24
 80048fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2101      	movs	r1, #1
 800490a:	438a      	bics	r2, r1
 800490c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	493b      	ldr	r1, [pc, #236]	@ (8004a04 <HAL_I2C_Init+0x13c>)
 8004918:	400a      	ands	r2, r1
 800491a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4938      	ldr	r1, [pc, #224]	@ (8004a08 <HAL_I2C_Init+0x140>)
 8004928:	400a      	ands	r2, r1
 800492a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d108      	bne.n	8004946 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2180      	movs	r1, #128	@ 0x80
 800493e:	0209      	lsls	r1, r1, #8
 8004940:	430a      	orrs	r2, r1
 8004942:	609a      	str	r2, [r3, #8]
 8004944:	e007      	b.n	8004956 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2184      	movs	r1, #132	@ 0x84
 8004950:	0209      	lsls	r1, r1, #8
 8004952:	430a      	orrs	r2, r1
 8004954:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d109      	bne.n	8004972 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2180      	movs	r1, #128	@ 0x80
 800496a:	0109      	lsls	r1, r1, #4
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
 8004970:	e007      	b.n	8004982 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4923      	ldr	r1, [pc, #140]	@ (8004a0c <HAL_I2C_Init+0x144>)
 800497e:	400a      	ands	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4920      	ldr	r1, [pc, #128]	@ (8004a10 <HAL_I2C_Init+0x148>)
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	491a      	ldr	r1, [pc, #104]	@ (8004a08 <HAL_I2C_Init+0x140>)
 800499e:	400a      	ands	r2, r1
 80049a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69d9      	ldr	r1, [r3, #28]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2101      	movs	r1, #1
 80049d8:	430a      	orrs	r2, r1
 80049da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2241      	movs	r2, #65	@ 0x41
 80049e6:	2120      	movs	r1, #32
 80049e8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2242      	movs	r2, #66	@ 0x42
 80049f4:	2100      	movs	r1, #0
 80049f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b002      	add	sp, #8
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	f0ffffff 	.word	0xf0ffffff
 8004a08:	ffff7fff 	.word	0xffff7fff
 8004a0c:	fffff7ff 	.word	0xfffff7ff
 8004a10:	02008000 	.word	0x02008000

08004a14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a14:	b590      	push	{r4, r7, lr}
 8004a16:	b089      	sub	sp, #36	@ 0x24
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	000c      	movs	r4, r1
 8004a1e:	0010      	movs	r0, r2
 8004a20:	0019      	movs	r1, r3
 8004a22:	230a      	movs	r3, #10
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	1c22      	adds	r2, r4, #0
 8004a28:	801a      	strh	r2, [r3, #0]
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	1c02      	adds	r2, r0, #0
 8004a30:	801a      	strh	r2, [r3, #0]
 8004a32:	1dbb      	adds	r3, r7, #6
 8004a34:	1c0a      	adds	r2, r1, #0
 8004a36:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2241      	movs	r2, #65	@ 0x41
 8004a3c:	5c9b      	ldrb	r3, [r3, r2]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d000      	beq.n	8004a46 <HAL_I2C_Mem_Write+0x32>
 8004a44:	e10c      	b.n	8004c60 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <HAL_I2C_Mem_Write+0x42>
 8004a4c:	232c      	movs	r3, #44	@ 0x2c
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d105      	bne.n	8004a62 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2280      	movs	r2, #128	@ 0x80
 8004a5a:	0092      	lsls	r2, r2, #2
 8004a5c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e0ff      	b.n	8004c62 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2240      	movs	r2, #64	@ 0x40
 8004a66:	5c9b      	ldrb	r3, [r3, r2]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_I2C_Mem_Write+0x5c>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e0f8      	b.n	8004c62 <HAL_I2C_Mem_Write+0x24e>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2240      	movs	r2, #64	@ 0x40
 8004a74:	2101      	movs	r1, #1
 8004a76:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a78:	f7ff fc66 	bl	8004348 <HAL_GetTick>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a80:	2380      	movs	r3, #128	@ 0x80
 8004a82:	0219      	lsls	r1, r3, #8
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2319      	movs	r3, #25
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f000 fb0b 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004a92:	1e03      	subs	r3, r0, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0e3      	b.n	8004c62 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2241      	movs	r2, #65	@ 0x41
 8004a9e:	2121      	movs	r1, #33	@ 0x21
 8004aa0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2242      	movs	r2, #66	@ 0x42
 8004aa6:	2140      	movs	r1, #64	@ 0x40
 8004aa8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ab4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	222c      	movs	r2, #44	@ 0x2c
 8004aba:	18ba      	adds	r2, r7, r2
 8004abc:	8812      	ldrh	r2, [r2, #0]
 8004abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ac6:	1dbb      	adds	r3, r7, #6
 8004ac8:	881c      	ldrh	r4, [r3, #0]
 8004aca:	2308      	movs	r3, #8
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	881a      	ldrh	r2, [r3, #0]
 8004ad0:	230a      	movs	r3, #10
 8004ad2:	18fb      	adds	r3, r7, r3
 8004ad4:	8819      	ldrh	r1, [r3, #0]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	9301      	str	r3, [sp, #4]
 8004adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	0023      	movs	r3, r4
 8004ae2:	f000 f9f9 	bl	8004ed8 <I2C_RequestMemoryWrite>
 8004ae6:	1e03      	subs	r3, r0, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2240      	movs	r2, #64	@ 0x40
 8004aee:	2100      	movs	r1, #0
 8004af0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0b5      	b.n	8004c62 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2bff      	cmp	r3, #255	@ 0xff
 8004afe:	d911      	bls.n	8004b24 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	22ff      	movs	r2, #255	@ 0xff
 8004b04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	2380      	movs	r3, #128	@ 0x80
 8004b0e:	045c      	lsls	r4, r3, #17
 8004b10:	230a      	movs	r3, #10
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	8819      	ldrh	r1, [r3, #0]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	0023      	movs	r3, r4
 8004b1e:	f000 fc9d 	bl	800545c <I2C_TransferConfig>
 8004b22:	e012      	b.n	8004b4a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	049c      	lsls	r4, r3, #18
 8004b38:	230a      	movs	r3, #10
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	8819      	ldrh	r1, [r3, #0]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	2300      	movs	r3, #0
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	0023      	movs	r3, r4
 8004b46:	f000 fc89 	bl	800545c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	0018      	movs	r0, r3
 8004b52:	f000 fb01 	bl	8005158 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b56:	1e03      	subs	r3, r0, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e081      	b.n	8004c62 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d03a      	beq.n	8004c0e <HAL_I2C_Mem_Write+0x1fa>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d136      	bne.n	8004c0e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	0013      	movs	r3, r2
 8004baa:	2200      	movs	r2, #0
 8004bac:	2180      	movs	r1, #128	@ 0x80
 8004bae:	f000 fa7b 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004bb2:	1e03      	subs	r3, r0, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e053      	b.n	8004c62 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2bff      	cmp	r3, #255	@ 0xff
 8004bc2:	d911      	bls.n	8004be8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	22ff      	movs	r2, #255	@ 0xff
 8004bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	2380      	movs	r3, #128	@ 0x80
 8004bd2:	045c      	lsls	r4, r3, #17
 8004bd4:	230a      	movs	r3, #10
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	8819      	ldrh	r1, [r3, #0]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	0023      	movs	r3, r4
 8004be2:	f000 fc3b 	bl	800545c <I2C_TransferConfig>
 8004be6:	e012      	b.n	8004c0e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	2380      	movs	r3, #128	@ 0x80
 8004bfa:	049c      	lsls	r4, r3, #18
 8004bfc:	230a      	movs	r3, #10
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	8819      	ldrh	r1, [r3, #0]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	2300      	movs	r3, #0
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	0023      	movs	r3, r4
 8004c0a:	f000 fc27 	bl	800545c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d198      	bne.n	8004b4a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f000 fae0 	bl	80051e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c24:	1e03      	subs	r3, r0, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e01a      	b.n	8004c62 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2220      	movs	r2, #32
 8004c32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	490b      	ldr	r1, [pc, #44]	@ (8004c6c <HAL_I2C_Mem_Write+0x258>)
 8004c40:	400a      	ands	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2241      	movs	r2, #65	@ 0x41
 8004c48:	2120      	movs	r1, #32
 8004c4a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2242      	movs	r2, #66	@ 0x42
 8004c50:	2100      	movs	r1, #0
 8004c52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2240      	movs	r2, #64	@ 0x40
 8004c58:	2100      	movs	r1, #0
 8004c5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e000      	b.n	8004c62 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
  }
}
 8004c62:	0018      	movs	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b007      	add	sp, #28
 8004c68:	bd90      	pop	{r4, r7, pc}
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	fe00e800 	.word	0xfe00e800

08004c70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b089      	sub	sp, #36	@ 0x24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	000c      	movs	r4, r1
 8004c7a:	0010      	movs	r0, r2
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	230a      	movs	r3, #10
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	1c22      	adds	r2, r4, #0
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	2308      	movs	r3, #8
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	1c02      	adds	r2, r0, #0
 8004c8c:	801a      	strh	r2, [r3, #0]
 8004c8e:	1dbb      	adds	r3, r7, #6
 8004c90:	1c0a      	adds	r2, r1, #0
 8004c92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2241      	movs	r2, #65	@ 0x41
 8004c98:	5c9b      	ldrb	r3, [r3, r2]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d000      	beq.n	8004ca2 <HAL_I2C_Mem_Read+0x32>
 8004ca0:	e110      	b.n	8004ec4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <HAL_I2C_Mem_Read+0x42>
 8004ca8:	232c      	movs	r3, #44	@ 0x2c
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d105      	bne.n	8004cbe <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2280      	movs	r2, #128	@ 0x80
 8004cb6:	0092      	lsls	r2, r2, #2
 8004cb8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e103      	b.n	8004ec6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2240      	movs	r2, #64	@ 0x40
 8004cc2:	5c9b      	ldrb	r3, [r3, r2]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_I2C_Mem_Read+0x5c>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e0fc      	b.n	8004ec6 <HAL_I2C_Mem_Read+0x256>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2240      	movs	r2, #64	@ 0x40
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cd4:	f7ff fb38 	bl	8004348 <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cdc:	2380      	movs	r3, #128	@ 0x80
 8004cde:	0219      	lsls	r1, r3, #8
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	2319      	movs	r3, #25
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f000 f9dd 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004cee:	1e03      	subs	r3, r0, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e0e7      	b.n	8004ec6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2241      	movs	r2, #65	@ 0x41
 8004cfa:	2122      	movs	r1, #34	@ 0x22
 8004cfc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2242      	movs	r2, #66	@ 0x42
 8004d02:	2140      	movs	r1, #64	@ 0x40
 8004d04:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	222c      	movs	r2, #44	@ 0x2c
 8004d16:	18ba      	adds	r2, r7, r2
 8004d18:	8812      	ldrh	r2, [r2, #0]
 8004d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d22:	1dbb      	adds	r3, r7, #6
 8004d24:	881c      	ldrh	r4, [r3, #0]
 8004d26:	2308      	movs	r3, #8
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	881a      	ldrh	r2, [r3, #0]
 8004d2c:	230a      	movs	r3, #10
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	8819      	ldrh	r1, [r3, #0]
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	0023      	movs	r3, r4
 8004d3e:	f000 f92f 	bl	8004fa0 <I2C_RequestMemoryRead>
 8004d42:	1e03      	subs	r3, r0, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2240      	movs	r2, #64	@ 0x40
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e0b9      	b.n	8004ec6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2bff      	cmp	r3, #255	@ 0xff
 8004d5a:	d911      	bls.n	8004d80 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	22ff      	movs	r2, #255	@ 0xff
 8004d60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	2380      	movs	r3, #128	@ 0x80
 8004d6a:	045c      	lsls	r4, r3, #17
 8004d6c:	230a      	movs	r3, #10
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	8819      	ldrh	r1, [r3, #0]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	4b56      	ldr	r3, [pc, #344]	@ (8004ed0 <HAL_I2C_Mem_Read+0x260>)
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	0023      	movs	r3, r4
 8004d7a:	f000 fb6f 	bl	800545c <I2C_TransferConfig>
 8004d7e:	e012      	b.n	8004da6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	2380      	movs	r3, #128	@ 0x80
 8004d92:	049c      	lsls	r4, r3, #18
 8004d94:	230a      	movs	r3, #10
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	8819      	ldrh	r1, [r3, #0]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	4b4c      	ldr	r3, [pc, #304]	@ (8004ed0 <HAL_I2C_Mem_Read+0x260>)
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	0023      	movs	r3, r4
 8004da2:	f000 fb5b 	bl	800545c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	0013      	movs	r3, r2
 8004db0:	2200      	movs	r2, #0
 8004db2:	2104      	movs	r1, #4
 8004db4:	f000 f978 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004db8:	1e03      	subs	r3, r0, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e082      	b.n	8004ec6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d03a      	beq.n	8004e72 <HAL_I2C_Mem_Read+0x202>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d136      	bne.n	8004e72 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	0013      	movs	r3, r2
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2180      	movs	r1, #128	@ 0x80
 8004e12:	f000 f949 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004e16:	1e03      	subs	r3, r0, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e053      	b.n	8004ec6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2bff      	cmp	r3, #255	@ 0xff
 8004e26:	d911      	bls.n	8004e4c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	22ff      	movs	r2, #255	@ 0xff
 8004e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	2380      	movs	r3, #128	@ 0x80
 8004e36:	045c      	lsls	r4, r3, #17
 8004e38:	230a      	movs	r3, #10
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	8819      	ldrh	r1, [r3, #0]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	2300      	movs	r3, #0
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	0023      	movs	r3, r4
 8004e46:	f000 fb09 	bl	800545c <I2C_TransferConfig>
 8004e4a:	e012      	b.n	8004e72 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	2380      	movs	r3, #128	@ 0x80
 8004e5e:	049c      	lsls	r4, r3, #18
 8004e60:	230a      	movs	r3, #10
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	8819      	ldrh	r1, [r3, #0]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	0023      	movs	r3, r4
 8004e6e:	f000 faf5 	bl	800545c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d194      	bne.n	8004da6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	0018      	movs	r0, r3
 8004e84:	f000 f9ae 	bl	80051e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e88:	1e03      	subs	r3, r0, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e01a      	b.n	8004ec6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2220      	movs	r2, #32
 8004e96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	490c      	ldr	r1, [pc, #48]	@ (8004ed4 <HAL_I2C_Mem_Read+0x264>)
 8004ea4:	400a      	ands	r2, r1
 8004ea6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2241      	movs	r2, #65	@ 0x41
 8004eac:	2120      	movs	r1, #32
 8004eae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2242      	movs	r2, #66	@ 0x42
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2240      	movs	r2, #64	@ 0x40
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e000      	b.n	8004ec6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004ec4:	2302      	movs	r3, #2
  }
}
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b007      	add	sp, #28
 8004ecc:	bd90      	pop	{r4, r7, pc}
 8004ece:	46c0      	nop			@ (mov r8, r8)
 8004ed0:	80002400 	.word	0x80002400
 8004ed4:	fe00e800 	.word	0xfe00e800

08004ed8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ed8:	b5b0      	push	{r4, r5, r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	000c      	movs	r4, r1
 8004ee2:	0010      	movs	r0, r2
 8004ee4:	0019      	movs	r1, r3
 8004ee6:	250a      	movs	r5, #10
 8004ee8:	197b      	adds	r3, r7, r5
 8004eea:	1c22      	adds	r2, r4, #0
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	2308      	movs	r3, #8
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	1c02      	adds	r2, r0, #0
 8004ef4:	801a      	strh	r2, [r3, #0]
 8004ef6:	1dbb      	adds	r3, r7, #6
 8004ef8:	1c0a      	adds	r2, r1, #0
 8004efa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004efc:	1dbb      	adds	r3, r7, #6
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	2380      	movs	r3, #128	@ 0x80
 8004f04:	045c      	lsls	r4, r3, #17
 8004f06:	197b      	adds	r3, r7, r5
 8004f08:	8819      	ldrh	r1, [r3, #0]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	4b23      	ldr	r3, [pc, #140]	@ (8004f9c <I2C_RequestMemoryWrite+0xc4>)
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	0023      	movs	r3, r4
 8004f12:	f000 faa3 	bl	800545c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f18:	6a39      	ldr	r1, [r7, #32]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f000 f91b 	bl	8005158 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f22:	1e03      	subs	r3, r0, #0
 8004f24:	d001      	beq.n	8004f2a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e033      	b.n	8004f92 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f2a:	1dbb      	adds	r3, r7, #6
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d107      	bne.n	8004f42 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f32:	2308      	movs	r3, #8
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f40:	e019      	b.n	8004f76 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f42:	2308      	movs	r3, #8
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	0a1b      	lsrs	r3, r3, #8
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f56:	6a39      	ldr	r1, [r7, #32]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 f8fc 	bl	8005158 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f60:	1e03      	subs	r3, r0, #0
 8004f62:	d001      	beq.n	8004f68 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e014      	b.n	8004f92 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f68:	2308      	movs	r3, #8
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f76:	6a3a      	ldr	r2, [r7, #32]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	0013      	movs	r3, r2
 8004f80:	2200      	movs	r2, #0
 8004f82:	2180      	movs	r1, #128	@ 0x80
 8004f84:	f000 f890 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004f88:	1e03      	subs	r3, r0, #0
 8004f8a:	d001      	beq.n	8004f90 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	0018      	movs	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b004      	add	sp, #16
 8004f98:	bdb0      	pop	{r4, r5, r7, pc}
 8004f9a:	46c0      	nop			@ (mov r8, r8)
 8004f9c:	80002000 	.word	0x80002000

08004fa0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004fa0:	b5b0      	push	{r4, r5, r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	000c      	movs	r4, r1
 8004faa:	0010      	movs	r0, r2
 8004fac:	0019      	movs	r1, r3
 8004fae:	250a      	movs	r5, #10
 8004fb0:	197b      	adds	r3, r7, r5
 8004fb2:	1c22      	adds	r2, r4, #0
 8004fb4:	801a      	strh	r2, [r3, #0]
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	1c02      	adds	r2, r0, #0
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	1dbb      	adds	r3, r7, #6
 8004fc0:	1c0a      	adds	r2, r1, #0
 8004fc2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004fc4:	1dbb      	adds	r3, r7, #6
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	197b      	adds	r3, r7, r5
 8004fcc:	8819      	ldrh	r1, [r3, #0]
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	4b23      	ldr	r3, [pc, #140]	@ (8005060 <I2C_RequestMemoryRead+0xc0>)
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f000 fa41 	bl	800545c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fdc:	6a39      	ldr	r1, [r7, #32]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f000 f8b9 	bl	8005158 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fe6:	1e03      	subs	r3, r0, #0
 8004fe8:	d001      	beq.n	8004fee <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e033      	b.n	8005056 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fee:	1dbb      	adds	r3, r7, #6
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d107      	bne.n	8005006 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	629a      	str	r2, [r3, #40]	@ 0x28
 8005004:	e019      	b.n	800503a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005006:	2308      	movs	r3, #8
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	0a1b      	lsrs	r3, r3, #8
 800500e:	b29b      	uxth	r3, r3
 8005010:	b2da      	uxtb	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800501a:	6a39      	ldr	r1, [r7, #32]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	0018      	movs	r0, r3
 8005020:	f000 f89a 	bl	8005158 <I2C_WaitOnTXISFlagUntilTimeout>
 8005024:	1e03      	subs	r3, r0, #0
 8005026:	d001      	beq.n	800502c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e014      	b.n	8005056 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800502c:	2308      	movs	r3, #8
 800502e:	18fb      	adds	r3, r7, r3
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b2da      	uxtb	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800503a:	6a3a      	ldr	r2, [r7, #32]
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	0013      	movs	r3, r2
 8005044:	2200      	movs	r2, #0
 8005046:	2140      	movs	r1, #64	@ 0x40
 8005048:	f000 f82e 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 800504c:	1e03      	subs	r3, r0, #0
 800504e:	d001      	beq.n	8005054 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	0018      	movs	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	b004      	add	sp, #16
 800505c:	bdb0      	pop	{r4, r5, r7, pc}
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	80002000 	.word	0x80002000

08005064 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2202      	movs	r2, #2
 8005074:	4013      	ands	r3, r2
 8005076:	2b02      	cmp	r3, #2
 8005078:	d103      	bne.n	8005082 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2200      	movs	r2, #0
 8005080:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	2201      	movs	r2, #1
 800508a:	4013      	ands	r3, r2
 800508c:	2b01      	cmp	r3, #1
 800508e:	d007      	beq.n	80050a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2101      	movs	r1, #1
 800509c:	430a      	orrs	r2, r1
 800509e:	619a      	str	r2, [r3, #24]
  }
}
 80050a0:	46c0      	nop			@ (mov r8, r8)
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b002      	add	sp, #8
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	1dfb      	adds	r3, r7, #7
 80050b6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b8:	e03a      	b.n	8005130 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	6839      	ldr	r1, [r7, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	0018      	movs	r0, r3
 80050c2:	f000 f8d3 	bl	800526c <I2C_IsErrorOccurred>
 80050c6:	1e03      	subs	r3, r0, #0
 80050c8:	d001      	beq.n	80050ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e040      	b.n	8005150 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	d02d      	beq.n	8005130 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d4:	f7ff f938 	bl	8004348 <HAL_GetTick>
 80050d8:	0002      	movs	r2, r0
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d302      	bcc.n	80050ea <I2C_WaitOnFlagUntilTimeout+0x42>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d122      	bne.n	8005130 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	4013      	ands	r3, r2
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	425a      	negs	r2, r3
 80050fa:	4153      	adcs	r3, r2
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	001a      	movs	r2, r3
 8005100:	1dfb      	adds	r3, r7, #7
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d113      	bne.n	8005130 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510c:	2220      	movs	r2, #32
 800510e:	431a      	orrs	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2241      	movs	r2, #65	@ 0x41
 8005118:	2120      	movs	r1, #32
 800511a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2242      	movs	r2, #66	@ 0x42
 8005120:	2100      	movs	r1, #0
 8005122:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2240      	movs	r2, #64	@ 0x40
 8005128:	2100      	movs	r1, #0
 800512a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e00f      	b.n	8005150 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	4013      	ands	r3, r2
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	425a      	negs	r2, r3
 8005140:	4153      	adcs	r3, r2
 8005142:	b2db      	uxtb	r3, r3
 8005144:	001a      	movs	r2, r3
 8005146:	1dfb      	adds	r3, r7, #7
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d0b5      	beq.n	80050ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	0018      	movs	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	b004      	add	sp, #16
 8005156:	bd80      	pop	{r7, pc}

08005158 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005164:	e032      	b.n	80051cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	0018      	movs	r0, r3
 800516e:	f000 f87d 	bl	800526c <I2C_IsErrorOccurred>
 8005172:	1e03      	subs	r3, r0, #0
 8005174:	d001      	beq.n	800517a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e030      	b.n	80051dc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3301      	adds	r3, #1
 800517e:	d025      	beq.n	80051cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005180:	f7ff f8e2 	bl	8004348 <HAL_GetTick>
 8005184:	0002      	movs	r2, r0
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	429a      	cmp	r2, r3
 800518e:	d302      	bcc.n	8005196 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d11a      	bne.n	80051cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	2202      	movs	r2, #2
 800519e:	4013      	ands	r3, r2
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d013      	beq.n	80051cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a8:	2220      	movs	r2, #32
 80051aa:	431a      	orrs	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2241      	movs	r2, #65	@ 0x41
 80051b4:	2120      	movs	r1, #32
 80051b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2242      	movs	r2, #66	@ 0x42
 80051bc:	2100      	movs	r1, #0
 80051be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2240      	movs	r2, #64	@ 0x40
 80051c4:	2100      	movs	r1, #0
 80051c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e007      	b.n	80051dc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2202      	movs	r2, #2
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d1c5      	bne.n	8005166 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	b004      	add	sp, #16
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051f0:	e02f      	b.n	8005252 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f000 f837 	bl	800526c <I2C_IsErrorOccurred>
 80051fe:	1e03      	subs	r3, r0, #0
 8005200:	d001      	beq.n	8005206 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e02d      	b.n	8005262 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005206:	f7ff f89f 	bl	8004348 <HAL_GetTick>
 800520a:	0002      	movs	r2, r0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	429a      	cmp	r2, r3
 8005214:	d302      	bcc.n	800521c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d11a      	bne.n	8005252 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	2220      	movs	r2, #32
 8005224:	4013      	ands	r3, r2
 8005226:	2b20      	cmp	r3, #32
 8005228:	d013      	beq.n	8005252 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522e:	2220      	movs	r2, #32
 8005230:	431a      	orrs	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2241      	movs	r2, #65	@ 0x41
 800523a:	2120      	movs	r1, #32
 800523c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2242      	movs	r2, #66	@ 0x42
 8005242:	2100      	movs	r1, #0
 8005244:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2240      	movs	r2, #64	@ 0x40
 800524a:	2100      	movs	r1, #0
 800524c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e007      	b.n	8005262 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2220      	movs	r2, #32
 800525a:	4013      	ands	r3, r2
 800525c:	2b20      	cmp	r3, #32
 800525e:	d1c8      	bne.n	80051f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	0018      	movs	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	b004      	add	sp, #16
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	@ 0x28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005278:	2327      	movs	r3, #39	@ 0x27
 800527a:	18fb      	adds	r3, r7, r3
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2210      	movs	r2, #16
 8005294:	4013      	ands	r3, r2
 8005296:	d100      	bne.n	800529a <I2C_IsErrorOccurred+0x2e>
 8005298:	e079      	b.n	800538e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2210      	movs	r2, #16
 80052a0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052a2:	e057      	b.n	8005354 <I2C_IsErrorOccurred+0xe8>
 80052a4:	2227      	movs	r2, #39	@ 0x27
 80052a6:	18bb      	adds	r3, r7, r2
 80052a8:	18ba      	adds	r2, r7, r2
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	3301      	adds	r3, #1
 80052b2:	d04f      	beq.n	8005354 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052b4:	f7ff f848 	bl	8004348 <HAL_GetTick>
 80052b8:	0002      	movs	r2, r0
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <I2C_IsErrorOccurred+0x5e>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d144      	bne.n	8005354 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	2380      	movs	r3, #128	@ 0x80
 80052d2:	01db      	lsls	r3, r3, #7
 80052d4:	4013      	ands	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80052d8:	2013      	movs	r0, #19
 80052da:	183b      	adds	r3, r7, r0
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	2142      	movs	r1, #66	@ 0x42
 80052e0:	5c52      	ldrb	r2, [r2, r1]
 80052e2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	2380      	movs	r3, #128	@ 0x80
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	401a      	ands	r2, r3
 80052f0:	2380      	movs	r3, #128	@ 0x80
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d126      	bne.n	8005346 <I2C_IsErrorOccurred+0xda>
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	2380      	movs	r3, #128	@ 0x80
 80052fc:	01db      	lsls	r3, r3, #7
 80052fe:	429a      	cmp	r2, r3
 8005300:	d021      	beq.n	8005346 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005302:	183b      	adds	r3, r7, r0
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b20      	cmp	r3, #32
 8005308:	d01d      	beq.n	8005346 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2180      	movs	r1, #128	@ 0x80
 8005316:	01c9      	lsls	r1, r1, #7
 8005318:	430a      	orrs	r2, r1
 800531a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800531c:	f7ff f814 	bl	8004348 <HAL_GetTick>
 8005320:	0003      	movs	r3, r0
 8005322:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005324:	e00f      	b.n	8005346 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005326:	f7ff f80f 	bl	8004348 <HAL_GetTick>
 800532a:	0002      	movs	r2, r0
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b19      	cmp	r3, #25
 8005332:	d908      	bls.n	8005346 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	2220      	movs	r2, #32
 8005338:	4313      	orrs	r3, r2
 800533a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800533c:	2327      	movs	r3, #39	@ 0x27
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	2201      	movs	r2, #1
 8005342:	701a      	strb	r2, [r3, #0]

              break;
 8005344:	e006      	b.n	8005354 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	2220      	movs	r2, #32
 800534e:	4013      	ands	r3, r2
 8005350:	2b20      	cmp	r3, #32
 8005352:	d1e8      	bne.n	8005326 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	2220      	movs	r2, #32
 800535c:	4013      	ands	r3, r2
 800535e:	2b20      	cmp	r3, #32
 8005360:	d004      	beq.n	800536c <I2C_IsErrorOccurred+0x100>
 8005362:	2327      	movs	r3, #39	@ 0x27
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d09b      	beq.n	80052a4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800536c:	2327      	movs	r3, #39	@ 0x27
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d103      	bne.n	800537e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2220      	movs	r2, #32
 800537c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	2204      	movs	r2, #4
 8005382:	4313      	orrs	r3, r2
 8005384:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005386:	2327      	movs	r3, #39	@ 0x27
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	2201      	movs	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	2380      	movs	r3, #128	@ 0x80
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	4013      	ands	r3, r2
 800539e:	d00c      	beq.n	80053ba <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	2201      	movs	r2, #1
 80053a4:	4313      	orrs	r3, r2
 80053a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2280      	movs	r2, #128	@ 0x80
 80053ae:	0052      	lsls	r2, r2, #1
 80053b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053b2:	2327      	movs	r3, #39	@ 0x27
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4013      	ands	r3, r2
 80053c2:	d00c      	beq.n	80053de <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	2208      	movs	r2, #8
 80053c8:	4313      	orrs	r3, r2
 80053ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2280      	movs	r2, #128	@ 0x80
 80053d2:	00d2      	lsls	r2, r2, #3
 80053d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053d6:	2327      	movs	r3, #39	@ 0x27
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	2201      	movs	r2, #1
 80053dc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	2380      	movs	r3, #128	@ 0x80
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4013      	ands	r3, r2
 80053e6:	d00c      	beq.n	8005402 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	2202      	movs	r2, #2
 80053ec:	4313      	orrs	r3, r2
 80053ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2280      	movs	r2, #128	@ 0x80
 80053f6:	0092      	lsls	r2, r2, #2
 80053f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053fa:	2327      	movs	r3, #39	@ 0x27
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	2201      	movs	r2, #1
 8005400:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005402:	2327      	movs	r3, #39	@ 0x27
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01d      	beq.n	8005448 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	0018      	movs	r0, r3
 8005410:	f7ff fe28 	bl	8005064 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	490e      	ldr	r1, [pc, #56]	@ (8005458 <I2C_IsErrorOccurred+0x1ec>)
 8005420:	400a      	ands	r2, r1
 8005422:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	431a      	orrs	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2241      	movs	r2, #65	@ 0x41
 8005434:	2120      	movs	r1, #32
 8005436:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2242      	movs	r2, #66	@ 0x42
 800543c:	2100      	movs	r1, #0
 800543e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2240      	movs	r2, #64	@ 0x40
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005448:	2327      	movs	r3, #39	@ 0x27
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	781b      	ldrb	r3, [r3, #0]
}
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b00a      	add	sp, #40	@ 0x28
 8005454:	bd80      	pop	{r7, pc}
 8005456:	46c0      	nop			@ (mov r8, r8)
 8005458:	fe00e800 	.word	0xfe00e800

0800545c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	0008      	movs	r0, r1
 8005466:	0011      	movs	r1, r2
 8005468:	607b      	str	r3, [r7, #4]
 800546a:	240a      	movs	r4, #10
 800546c:	193b      	adds	r3, r7, r4
 800546e:	1c02      	adds	r2, r0, #0
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	2009      	movs	r0, #9
 8005474:	183b      	adds	r3, r7, r0
 8005476:	1c0a      	adds	r2, r1, #0
 8005478:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800547a:	193b      	adds	r3, r7, r4
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	059b      	lsls	r3, r3, #22
 8005480:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005482:	183b      	adds	r3, r7, r0
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	0419      	lsls	r1, r3, #16
 8005488:	23ff      	movs	r3, #255	@ 0xff
 800548a:	041b      	lsls	r3, r3, #16
 800548c:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800548e:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005496:	4313      	orrs	r3, r2
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	085b      	lsrs	r3, r3, #1
 800549c:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054a6:	0d51      	lsrs	r1, r2, #21
 80054a8:	2280      	movs	r2, #128	@ 0x80
 80054aa:	00d2      	lsls	r2, r2, #3
 80054ac:	400a      	ands	r2, r1
 80054ae:	4907      	ldr	r1, [pc, #28]	@ (80054cc <I2C_TransferConfig+0x70>)
 80054b0:	430a      	orrs	r2, r1
 80054b2:	43d2      	mvns	r2, r2
 80054b4:	401a      	ands	r2, r3
 80054b6:	0011      	movs	r1, r2
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054c2:	46c0      	nop			@ (mov r8, r8)
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b007      	add	sp, #28
 80054c8:	bd90      	pop	{r4, r7, pc}
 80054ca:	46c0      	nop			@ (mov r8, r8)
 80054cc:	03ff63ff 	.word	0x03ff63ff

080054d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2241      	movs	r2, #65	@ 0x41
 80054de:	5c9b      	ldrb	r3, [r3, r2]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d138      	bne.n	8005558 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2240      	movs	r2, #64	@ 0x40
 80054ea:	5c9b      	ldrb	r3, [r3, r2]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e032      	b.n	800555a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2240      	movs	r2, #64	@ 0x40
 80054f8:	2101      	movs	r1, #1
 80054fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2241      	movs	r2, #65	@ 0x41
 8005500:	2124      	movs	r1, #36	@ 0x24
 8005502:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2101      	movs	r1, #1
 8005510:	438a      	bics	r2, r1
 8005512:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4911      	ldr	r1, [pc, #68]	@ (8005564 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005520:	400a      	ands	r2, r1
 8005522:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6819      	ldr	r1, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2101      	movs	r1, #1
 8005540:	430a      	orrs	r2, r1
 8005542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2241      	movs	r2, #65	@ 0x41
 8005548:	2120      	movs	r1, #32
 800554a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2240      	movs	r2, #64	@ 0x40
 8005550:	2100      	movs	r1, #0
 8005552:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	e000      	b.n	800555a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005558:	2302      	movs	r3, #2
  }
}
 800555a:	0018      	movs	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	b002      	add	sp, #8
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	ffffefff 	.word	0xffffefff

08005568 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2241      	movs	r2, #65	@ 0x41
 8005576:	5c9b      	ldrb	r3, [r3, r2]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b20      	cmp	r3, #32
 800557c:	d139      	bne.n	80055f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2240      	movs	r2, #64	@ 0x40
 8005582:	5c9b      	ldrb	r3, [r3, r2]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005588:	2302      	movs	r3, #2
 800558a:	e033      	b.n	80055f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2240      	movs	r2, #64	@ 0x40
 8005590:	2101      	movs	r1, #1
 8005592:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2241      	movs	r2, #65	@ 0x41
 8005598:	2124      	movs	r1, #36	@ 0x24
 800559a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2101      	movs	r1, #1
 80055a8:	438a      	bics	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a11      	ldr	r2, [pc, #68]	@ (80055fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2101      	movs	r1, #1
 80055da:	430a      	orrs	r2, r1
 80055dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2241      	movs	r2, #65	@ 0x41
 80055e2:	2120      	movs	r1, #32
 80055e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2240      	movs	r2, #64	@ 0x40
 80055ea:	2100      	movs	r1, #0
 80055ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e000      	b.n	80055f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055f2:	2302      	movs	r3, #2
  }
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b004      	add	sp, #16
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	fffff0ff 	.word	0xfffff0ff

08005600 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	000a      	movs	r2, r1
 800560a:	1cfb      	adds	r3, r7, #3
 800560c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800560e:	4b0f      	ldr	r3, [pc, #60]	@ (800564c <HAL_PWR_EnterSTOPMode+0x4c>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4b0e      	ldr	r3, [pc, #56]	@ (800564c <HAL_PWR_EnterSTOPMode+0x4c>)
 8005614:	2107      	movs	r1, #7
 8005616:	438a      	bics	r2, r1
 8005618:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800561a:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <HAL_PWR_EnterSTOPMode+0x50>)
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <HAL_PWR_EnterSTOPMode+0x50>)
 8005620:	2104      	movs	r1, #4
 8005622:	430a      	orrs	r2, r1
 8005624:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005626:	1cfb      	adds	r3, r7, #3
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800562e:	bf30      	wfi
 8005630:	e002      	b.n	8005638 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005632:	bf40      	sev
    __WFE();
 8005634:	bf20      	wfe
    __WFE();
 8005636:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005638:	4b05      	ldr	r3, [pc, #20]	@ (8005650 <HAL_PWR_EnterSTOPMode+0x50>)
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	4b04      	ldr	r3, [pc, #16]	@ (8005650 <HAL_PWR_EnterSTOPMode+0x50>)
 800563e:	2104      	movs	r1, #4
 8005640:	438a      	bics	r2, r1
 8005642:	611a      	str	r2, [r3, #16]
}
 8005644:	46c0      	nop			@ (mov r8, r8)
 8005646:	46bd      	mov	sp, r7
 8005648:	b002      	add	sp, #8
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40007000 	.word	0x40007000
 8005650:	e000ed00 	.word	0xe000ed00

08005654 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e1d0      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2201      	movs	r2, #1
 800566c:	4013      	ands	r3, r2
 800566e:	d100      	bne.n	8005672 <HAL_RCC_OscConfig+0x1e>
 8005670:	e069      	b.n	8005746 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005672:	4bc8      	ldr	r3, [pc, #800]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2238      	movs	r2, #56	@ 0x38
 8005678:	4013      	ands	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2b08      	cmp	r3, #8
 8005680:	d105      	bne.n	800568e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d15d      	bne.n	8005746 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e1bc      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	2380      	movs	r3, #128	@ 0x80
 8005694:	025b      	lsls	r3, r3, #9
 8005696:	429a      	cmp	r2, r3
 8005698:	d107      	bne.n	80056aa <HAL_RCC_OscConfig+0x56>
 800569a:	4bbe      	ldr	r3, [pc, #760]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	4bbd      	ldr	r3, [pc, #756]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80056a0:	2180      	movs	r1, #128	@ 0x80
 80056a2:	0249      	lsls	r1, r1, #9
 80056a4:	430a      	orrs	r2, r1
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e020      	b.n	80056ec <HAL_RCC_OscConfig+0x98>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	23a0      	movs	r3, #160	@ 0xa0
 80056b0:	02db      	lsls	r3, r3, #11
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d10e      	bne.n	80056d4 <HAL_RCC_OscConfig+0x80>
 80056b6:	4bb7      	ldr	r3, [pc, #732]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4bb6      	ldr	r3, [pc, #728]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80056bc:	2180      	movs	r1, #128	@ 0x80
 80056be:	02c9      	lsls	r1, r1, #11
 80056c0:	430a      	orrs	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	4bb3      	ldr	r3, [pc, #716]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	4bb2      	ldr	r3, [pc, #712]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80056ca:	2180      	movs	r1, #128	@ 0x80
 80056cc:	0249      	lsls	r1, r1, #9
 80056ce:	430a      	orrs	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e00b      	b.n	80056ec <HAL_RCC_OscConfig+0x98>
 80056d4:	4baf      	ldr	r3, [pc, #700]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	4bae      	ldr	r3, [pc, #696]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80056da:	49af      	ldr	r1, [pc, #700]	@ (8005998 <HAL_RCC_OscConfig+0x344>)
 80056dc:	400a      	ands	r2, r1
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	4bac      	ldr	r3, [pc, #688]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4bab      	ldr	r3, [pc, #684]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80056e6:	49ad      	ldr	r1, [pc, #692]	@ (800599c <HAL_RCC_OscConfig+0x348>)
 80056e8:	400a      	ands	r2, r1
 80056ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d014      	beq.n	800571e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fe fe28 	bl	8004348 <HAL_GetTick>
 80056f8:	0003      	movs	r3, r0
 80056fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80056fe:	f7fe fe23 	bl	8004348 <HAL_GetTick>
 8005702:	0002      	movs	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b64      	cmp	r3, #100	@ 0x64
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e17b      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005710:	4ba0      	ldr	r3, [pc, #640]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	029b      	lsls	r3, r3, #10
 8005718:	4013      	ands	r3, r2
 800571a:	d0f0      	beq.n	80056fe <HAL_RCC_OscConfig+0xaa>
 800571c:	e013      	b.n	8005746 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571e:	f7fe fe13 	bl	8004348 <HAL_GetTick>
 8005722:	0003      	movs	r3, r0
 8005724:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005728:	f7fe fe0e 	bl	8004348 <HAL_GetTick>
 800572c:	0002      	movs	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b64      	cmp	r3, #100	@ 0x64
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e166      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800573a:	4b96      	ldr	r3, [pc, #600]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	2380      	movs	r3, #128	@ 0x80
 8005740:	029b      	lsls	r3, r3, #10
 8005742:	4013      	ands	r3, r2
 8005744:	d1f0      	bne.n	8005728 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2202      	movs	r2, #2
 800574c:	4013      	ands	r3, r2
 800574e:	d100      	bne.n	8005752 <HAL_RCC_OscConfig+0xfe>
 8005750:	e086      	b.n	8005860 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005752:	4b90      	ldr	r3, [pc, #576]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2238      	movs	r2, #56	@ 0x38
 8005758:	4013      	ands	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d12f      	bne.n	80057c2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e14c      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800576e:	4b89      	ldr	r3, [pc, #548]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	4a8b      	ldr	r2, [pc, #556]	@ (80059a0 <HAL_RCC_OscConfig+0x34c>)
 8005774:	4013      	ands	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	021a      	lsls	r2, r3, #8
 800577e:	4b85      	ldr	r3, [pc, #532]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005780:	430a      	orrs	r2, r1
 8005782:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d112      	bne.n	80057b0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800578a:	4b82      	ldr	r3, [pc, #520]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a85      	ldr	r2, [pc, #532]	@ (80059a4 <HAL_RCC_OscConfig+0x350>)
 8005790:	4013      	ands	r3, r2
 8005792:	0019      	movs	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	4b7e      	ldr	r3, [pc, #504]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800579a:	430a      	orrs	r2, r1
 800579c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800579e:	4b7d      	ldr	r3, [pc, #500]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	0adb      	lsrs	r3, r3, #11
 80057a4:	2207      	movs	r2, #7
 80057a6:	4013      	ands	r3, r2
 80057a8:	4a7f      	ldr	r2, [pc, #508]	@ (80059a8 <HAL_RCC_OscConfig+0x354>)
 80057aa:	40da      	lsrs	r2, r3
 80057ac:	4b7f      	ldr	r3, [pc, #508]	@ (80059ac <HAL_RCC_OscConfig+0x358>)
 80057ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80057b0:	4b7f      	ldr	r3, [pc, #508]	@ (80059b0 <HAL_RCC_OscConfig+0x35c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f7fe fd6b 	bl	8004290 <HAL_InitTick>
 80057ba:	1e03      	subs	r3, r0, #0
 80057bc:	d050      	beq.n	8005860 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e122      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d030      	beq.n	800582c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80057ca:	4b72      	ldr	r3, [pc, #456]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a75      	ldr	r2, [pc, #468]	@ (80059a4 <HAL_RCC_OscConfig+0x350>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	0019      	movs	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	4b6e      	ldr	r3, [pc, #440]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80057da:	430a      	orrs	r2, r1
 80057dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80057de:	4b6d      	ldr	r3, [pc, #436]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4b6c      	ldr	r3, [pc, #432]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80057e4:	2180      	movs	r1, #128	@ 0x80
 80057e6:	0049      	lsls	r1, r1, #1
 80057e8:	430a      	orrs	r2, r1
 80057ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fe fdac 	bl	8004348 <HAL_GetTick>
 80057f0:	0003      	movs	r3, r0
 80057f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80057f6:	f7fe fda7 	bl	8004348 <HAL_GetTick>
 80057fa:	0002      	movs	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e0ff      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005808:	4b62      	ldr	r3, [pc, #392]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	2380      	movs	r3, #128	@ 0x80
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4013      	ands	r3, r2
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005814:	4b5f      	ldr	r3, [pc, #380]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4a61      	ldr	r2, [pc, #388]	@ (80059a0 <HAL_RCC_OscConfig+0x34c>)
 800581a:	4013      	ands	r3, r2
 800581c:	0019      	movs	r1, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	021a      	lsls	r2, r3, #8
 8005824:	4b5b      	ldr	r3, [pc, #364]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
 800582a:	e019      	b.n	8005860 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800582c:	4b59      	ldr	r3, [pc, #356]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	4b58      	ldr	r3, [pc, #352]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005832:	4960      	ldr	r1, [pc, #384]	@ (80059b4 <HAL_RCC_OscConfig+0x360>)
 8005834:	400a      	ands	r2, r1
 8005836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fe fd86 	bl	8004348 <HAL_GetTick>
 800583c:	0003      	movs	r3, r0
 800583e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005840:	e008      	b.n	8005854 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005842:	f7fe fd81 	bl	8004348 <HAL_GetTick>
 8005846:	0002      	movs	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e0d9      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005854:	4b4f      	ldr	r3, [pc, #316]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	2380      	movs	r3, #128	@ 0x80
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4013      	ands	r3, r2
 800585e:	d1f0      	bne.n	8005842 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2208      	movs	r2, #8
 8005866:	4013      	ands	r3, r2
 8005868:	d042      	beq.n	80058f0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800586a:	4b4a      	ldr	r3, [pc, #296]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2238      	movs	r2, #56	@ 0x38
 8005870:	4013      	ands	r3, r2
 8005872:	2b18      	cmp	r3, #24
 8005874:	d105      	bne.n	8005882 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d138      	bne.n	80058f0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e0c2      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d019      	beq.n	80058be <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800588a:	4b42      	ldr	r3, [pc, #264]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800588c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800588e:	4b41      	ldr	r3, [pc, #260]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005890:	2101      	movs	r1, #1
 8005892:	430a      	orrs	r2, r1
 8005894:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005896:	f7fe fd57 	bl	8004348 <HAL_GetTick>
 800589a:	0003      	movs	r3, r0
 800589c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80058a0:	f7fe fd52 	bl	8004348 <HAL_GetTick>
 80058a4:	0002      	movs	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e0aa      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80058b2:	4b38      	ldr	r3, [pc, #224]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80058b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b6:	2202      	movs	r2, #2
 80058b8:	4013      	ands	r3, r2
 80058ba:	d0f1      	beq.n	80058a0 <HAL_RCC_OscConfig+0x24c>
 80058bc:	e018      	b.n	80058f0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80058be:	4b35      	ldr	r3, [pc, #212]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80058c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80058c2:	4b34      	ldr	r3, [pc, #208]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80058c4:	2101      	movs	r1, #1
 80058c6:	438a      	bics	r2, r1
 80058c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ca:	f7fe fd3d 	bl	8004348 <HAL_GetTick>
 80058ce:	0003      	movs	r3, r0
 80058d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80058d4:	f7fe fd38 	bl	8004348 <HAL_GetTick>
 80058d8:	0002      	movs	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e090      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80058e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 80058e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ea:	2202      	movs	r2, #2
 80058ec:	4013      	ands	r3, r2
 80058ee:	d1f1      	bne.n	80058d4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2204      	movs	r2, #4
 80058f6:	4013      	ands	r3, r2
 80058f8:	d100      	bne.n	80058fc <HAL_RCC_OscConfig+0x2a8>
 80058fa:	e084      	b.n	8005a06 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058fc:	230f      	movs	r3, #15
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005904:	4b23      	ldr	r3, [pc, #140]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2238      	movs	r2, #56	@ 0x38
 800590a:	4013      	ands	r3, r2
 800590c:	2b20      	cmp	r3, #32
 800590e:	d106      	bne.n	800591e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d000      	beq.n	800591a <HAL_RCC_OscConfig+0x2c6>
 8005918:	e075      	b.n	8005a06 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e074      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d106      	bne.n	8005934 <HAL_RCC_OscConfig+0x2e0>
 8005926:	4b1b      	ldr	r3, [pc, #108]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005928:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800592a:	4b1a      	ldr	r3, [pc, #104]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800592c:	2101      	movs	r1, #1
 800592e:	430a      	orrs	r2, r1
 8005930:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005932:	e01c      	b.n	800596e <HAL_RCC_OscConfig+0x31a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b05      	cmp	r3, #5
 800593a:	d10c      	bne.n	8005956 <HAL_RCC_OscConfig+0x302>
 800593c:	4b15      	ldr	r3, [pc, #84]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800593e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005940:	4b14      	ldr	r3, [pc, #80]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005942:	2104      	movs	r1, #4
 8005944:	430a      	orrs	r2, r1
 8005946:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005948:	4b12      	ldr	r3, [pc, #72]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800594a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800594c:	4b11      	ldr	r3, [pc, #68]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800594e:	2101      	movs	r1, #1
 8005950:	430a      	orrs	r2, r1
 8005952:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005954:	e00b      	b.n	800596e <HAL_RCC_OscConfig+0x31a>
 8005956:	4b0f      	ldr	r3, [pc, #60]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005958:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800595a:	4b0e      	ldr	r3, [pc, #56]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 800595c:	2101      	movs	r1, #1
 800595e:	438a      	bics	r2, r1
 8005960:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005962:	4b0c      	ldr	r3, [pc, #48]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005964:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005966:	4b0b      	ldr	r3, [pc, #44]	@ (8005994 <HAL_RCC_OscConfig+0x340>)
 8005968:	2104      	movs	r1, #4
 800596a:	438a      	bics	r2, r1
 800596c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d028      	beq.n	80059c8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005976:	f7fe fce7 	bl	8004348 <HAL_GetTick>
 800597a:	0003      	movs	r3, r0
 800597c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800597e:	e01d      	b.n	80059bc <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005980:	f7fe fce2 	bl	8004348 <HAL_GetTick>
 8005984:	0002      	movs	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	4a0b      	ldr	r2, [pc, #44]	@ (80059b8 <HAL_RCC_OscConfig+0x364>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d915      	bls.n	80059bc <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e039      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
 8005994:	40021000 	.word	0x40021000
 8005998:	fffeffff 	.word	0xfffeffff
 800599c:	fffbffff 	.word	0xfffbffff
 80059a0:	ffff80ff 	.word	0xffff80ff
 80059a4:	ffffc7ff 	.word	0xffffc7ff
 80059a8:	02dc6c00 	.word	0x02dc6c00
 80059ac:	20000000 	.word	0x20000000
 80059b0:	20000004 	.word	0x20000004
 80059b4:	fffffeff 	.word	0xfffffeff
 80059b8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80059bc:	4b14      	ldr	r3, [pc, #80]	@ (8005a10 <HAL_RCC_OscConfig+0x3bc>)
 80059be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c0:	2202      	movs	r2, #2
 80059c2:	4013      	ands	r3, r2
 80059c4:	d0dc      	beq.n	8005980 <HAL_RCC_OscConfig+0x32c>
 80059c6:	e013      	b.n	80059f0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7fe fcbe 	bl	8004348 <HAL_GetTick>
 80059cc:	0003      	movs	r3, r0
 80059ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80059d0:	e009      	b.n	80059e6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d2:	f7fe fcb9 	bl	8004348 <HAL_GetTick>
 80059d6:	0002      	movs	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005a14 <HAL_RCC_OscConfig+0x3c0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e010      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80059e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a10 <HAL_RCC_OscConfig+0x3bc>)
 80059e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ea:	2202      	movs	r2, #2
 80059ec:	4013      	ands	r3, r2
 80059ee:	d1f0      	bne.n	80059d2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80059f0:	230f      	movs	r3, #15
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d105      	bne.n	8005a06 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80059fa:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <HAL_RCC_OscConfig+0x3bc>)
 80059fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059fe:	4b04      	ldr	r3, [pc, #16]	@ (8005a10 <HAL_RCC_OscConfig+0x3bc>)
 8005a00:	4905      	ldr	r1, [pc, #20]	@ (8005a18 <HAL_RCC_OscConfig+0x3c4>)
 8005a02:	400a      	ands	r2, r1
 8005a04:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	0018      	movs	r0, r3
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b006      	add	sp, #24
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40021000 	.word	0x40021000
 8005a14:	00001388 	.word	0x00001388
 8005a18:	efffffff 	.word	0xefffffff

08005a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0df      	b.n	8005bf0 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a30:	4b71      	ldr	r3, [pc, #452]	@ (8005bf8 <HAL_RCC_ClockConfig+0x1dc>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2207      	movs	r2, #7
 8005a36:	4013      	ands	r3, r2
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d91e      	bls.n	8005a7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3e:	4b6e      	ldr	r3, [pc, #440]	@ (8005bf8 <HAL_RCC_ClockConfig+0x1dc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2207      	movs	r2, #7
 8005a44:	4393      	bics	r3, r2
 8005a46:	0019      	movs	r1, r3
 8005a48:	4b6b      	ldr	r3, [pc, #428]	@ (8005bf8 <HAL_RCC_ClockConfig+0x1dc>)
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a50:	f7fe fc7a 	bl	8004348 <HAL_GetTick>
 8005a54:	0003      	movs	r3, r0
 8005a56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a58:	e009      	b.n	8005a6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005a5a:	f7fe fc75 	bl	8004348 <HAL_GetTick>
 8005a5e:	0002      	movs	r2, r0
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	4a65      	ldr	r2, [pc, #404]	@ (8005bfc <HAL_RCC_ClockConfig+0x1e0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e0c0      	b.n	8005bf0 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a6e:	4b62      	ldr	r3, [pc, #392]	@ (8005bf8 <HAL_RCC_ClockConfig+0x1dc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2207      	movs	r2, #7
 8005a74:	4013      	ands	r3, r2
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d1ee      	bne.n	8005a5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2202      	movs	r2, #2
 8005a82:	4013      	ands	r3, r2
 8005a84:	d017      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2204      	movs	r2, #4
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d008      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005a90:	4b5b      	ldr	r3, [pc, #364]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	4a5b      	ldr	r2, [pc, #364]	@ (8005c04 <HAL_RCC_ClockConfig+0x1e8>)
 8005a96:	401a      	ands	r2, r3
 8005a98:	4b59      	ldr	r3, [pc, #356]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005a9a:	21b0      	movs	r1, #176	@ 0xb0
 8005a9c:	0109      	lsls	r1, r1, #4
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa2:	4b57      	ldr	r3, [pc, #348]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	4a58      	ldr	r2, [pc, #352]	@ (8005c08 <HAL_RCC_ClockConfig+0x1ec>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	0019      	movs	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	4b53      	ldr	r3, [pc, #332]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2201      	movs	r2, #1
 8005abc:	4013      	ands	r3, r2
 8005abe:	d04b      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d107      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	2380      	movs	r3, #128	@ 0x80
 8005ace:	029b      	lsls	r3, r3, #10
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d11f      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e08b      	b.n	8005bf0 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d107      	bne.n	8005af0 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ae0:	4b47      	ldr	r3, [pc, #284]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	2380      	movs	r3, #128	@ 0x80
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d113      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e07f      	b.n	8005bf0 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d106      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005af8:	4b41      	ldr	r3, [pc, #260]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005afc:	2202      	movs	r2, #2
 8005afe:	4013      	ands	r3, r2
 8005b00:	d108      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e074      	b.n	8005bf0 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005b06:	4b3e      	ldr	r3, [pc, #248]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e06d      	b.n	8005bf0 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b14:	4b3a      	ldr	r3, [pc, #232]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	2207      	movs	r2, #7
 8005b1a:	4393      	bics	r3, r2
 8005b1c:	0019      	movs	r1, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	4b37      	ldr	r3, [pc, #220]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005b24:	430a      	orrs	r2, r1
 8005b26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b28:	f7fe fc0e 	bl	8004348 <HAL_GetTick>
 8005b2c:	0003      	movs	r3, r0
 8005b2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b30:	e009      	b.n	8005b46 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005b32:	f7fe fc09 	bl	8004348 <HAL_GetTick>
 8005b36:	0002      	movs	r2, r0
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	4a2f      	ldr	r2, [pc, #188]	@ (8005bfc <HAL_RCC_ClockConfig+0x1e0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e054      	b.n	8005bf0 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b46:	4b2e      	ldr	r3, [pc, #184]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2238      	movs	r2, #56	@ 0x38
 8005b4c:	401a      	ands	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1ec      	bne.n	8005b32 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b58:	4b27      	ldr	r3, [pc, #156]	@ (8005bf8 <HAL_RCC_ClockConfig+0x1dc>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2207      	movs	r2, #7
 8005b5e:	4013      	ands	r3, r2
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d21e      	bcs.n	8005ba4 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b24      	ldr	r3, [pc, #144]	@ (8005bf8 <HAL_RCC_ClockConfig+0x1dc>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2207      	movs	r2, #7
 8005b6c:	4393      	bics	r3, r2
 8005b6e:	0019      	movs	r1, r3
 8005b70:	4b21      	ldr	r3, [pc, #132]	@ (8005bf8 <HAL_RCC_ClockConfig+0x1dc>)
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b78:	f7fe fbe6 	bl	8004348 <HAL_GetTick>
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b80:	e009      	b.n	8005b96 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005b82:	f7fe fbe1 	bl	8004348 <HAL_GetTick>
 8005b86:	0002      	movs	r2, r0
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bfc <HAL_RCC_ClockConfig+0x1e0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e02c      	b.n	8005bf0 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b96:	4b18      	ldr	r3, [pc, #96]	@ (8005bf8 <HAL_RCC_ClockConfig+0x1dc>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2207      	movs	r2, #7
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d1ee      	bne.n	8005b82 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	4013      	ands	r3, r2
 8005bac:	d009      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005bae:	4b14      	ldr	r3, [pc, #80]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	4a16      	ldr	r2, [pc, #88]	@ (8005c0c <HAL_RCC_ClockConfig+0x1f0>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	4b10      	ldr	r3, [pc, #64]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005bc2:	f000 f82b 	bl	8005c1c <HAL_RCC_GetSysClockFreq>
 8005bc6:	0001      	movs	r1, r0
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <HAL_RCC_ClockConfig+0x1e4>)
 8005bca:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005bcc:	0a1b      	lsrs	r3, r3, #8
 8005bce:	220f      	movs	r2, #15
 8005bd0:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8005c10 <HAL_RCC_ClockConfig+0x1f4>)
 8005bd4:	0092      	lsls	r2, r2, #2
 8005bd6:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005bd8:	221f      	movs	r2, #31
 8005bda:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005bdc:	000a      	movs	r2, r1
 8005bde:	40da      	lsrs	r2, r3
 8005be0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c14 <HAL_RCC_ClockConfig+0x1f8>)
 8005be2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005be4:	4b0c      	ldr	r3, [pc, #48]	@ (8005c18 <HAL_RCC_ClockConfig+0x1fc>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	0018      	movs	r0, r3
 8005bea:	f7fe fb51 	bl	8004290 <HAL_InitTick>
 8005bee:	0003      	movs	r3, r0
}
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b004      	add	sp, #16
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40022000 	.word	0x40022000
 8005bfc:	00001388 	.word	0x00001388
 8005c00:	40021000 	.word	0x40021000
 8005c04:	ffff84ff 	.word	0xffff84ff
 8005c08:	fffff0ff 	.word	0xfffff0ff
 8005c0c:	ffff8fff 	.word	0xffff8fff
 8005c10:	08006e68 	.word	0x08006e68
 8005c14:	20000000 	.word	0x20000000
 8005c18:	20000004 	.word	0x20000004

08005c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c22:	4b1c      	ldr	r3, [pc, #112]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x78>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2238      	movs	r2, #56	@ 0x38
 8005c28:	4013      	ands	r3, r2
 8005c2a:	d10f      	bne.n	8005c4c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005c2c:	4b19      	ldr	r3, [pc, #100]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x78>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	0adb      	lsrs	r3, r3, #11
 8005c32:	2207      	movs	r2, #7
 8005c34:	4013      	ands	r3, r2
 8005c36:	2201      	movs	r2, #1
 8005c38:	409a      	lsls	r2, r3
 8005c3a:	0013      	movs	r3, r2
 8005c3c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	4815      	ldr	r0, [pc, #84]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005c42:	f7fa fa61 	bl	8000108 <__udivsi3>
 8005c46:	0003      	movs	r3, r0
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	e01e      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c4c:	4b11      	ldr	r3, [pc, #68]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x78>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2238      	movs	r2, #56	@ 0x38
 8005c52:	4013      	ands	r3, r2
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d102      	bne.n	8005c5e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c58:	4b10      	ldr	r3, [pc, #64]	@ (8005c9c <HAL_RCC_GetSysClockFreq+0x80>)
 8005c5a:	607b      	str	r3, [r7, #4]
 8005c5c:	e015      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x78>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2238      	movs	r2, #56	@ 0x38
 8005c64:	4013      	ands	r3, r2
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d103      	bne.n	8005c72 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005c6a:	2380      	movs	r3, #128	@ 0x80
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	607b      	str	r3, [r7, #4]
 8005c70:	e00b      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005c72:	4b08      	ldr	r3, [pc, #32]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x78>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2238      	movs	r2, #56	@ 0x38
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b18      	cmp	r3, #24
 8005c7c:	d103      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005c7e:	23fa      	movs	r3, #250	@ 0xfa
 8005c80:	01db      	lsls	r3, r3, #7
 8005c82:	607b      	str	r3, [r7, #4]
 8005c84:	e001      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8005c8a:	687b      	ldr	r3, [r7, #4]
}
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	b002      	add	sp, #8
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40021000 	.word	0x40021000
 8005c98:	02dc6c00 	.word	0x02dc6c00
 8005c9c:	007a1200 	.word	0x007a1200

08005ca0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005ca4:	f7ff ffba 	bl	8005c1c <HAL_RCC_GetSysClockFreq>
 8005ca8:	0001      	movs	r1, r0
 8005caa:	4b09      	ldr	r3, [pc, #36]	@ (8005cd0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005cac:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	220f      	movs	r2, #15
 8005cb2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005cb4:	4b07      	ldr	r3, [pc, #28]	@ (8005cd4 <HAL_RCC_GetHCLKFreq+0x34>)
 8005cb6:	0092      	lsls	r2, r2, #2
 8005cb8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005cba:	221f      	movs	r2, #31
 8005cbc:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005cbe:	000a      	movs	r2, r1
 8005cc0:	40da      	lsrs	r2, r3
 8005cc2:	4b05      	ldr	r3, [pc, #20]	@ (8005cd8 <HAL_RCC_GetHCLKFreq+0x38>)
 8005cc4:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8005cc6:	4b04      	ldr	r3, [pc, #16]	@ (8005cd8 <HAL_RCC_GetHCLKFreq+0x38>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
}
 8005cca:	0018      	movs	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	08006e68 	.word	0x08006e68
 8005cd8:	20000000 	.word	0x20000000

08005cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8005ce0:	f7ff ffde 	bl	8005ca0 <HAL_RCC_GetHCLKFreq>
 8005ce4:	0001      	movs	r1, r0
 8005ce6:	4b07      	ldr	r3, [pc, #28]	@ (8005d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	0b1b      	lsrs	r3, r3, #12
 8005cec:	2207      	movs	r2, #7
 8005cee:	401a      	ands	r2, r3
 8005cf0:	4b05      	ldr	r3, [pc, #20]	@ (8005d08 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005cf2:	0092      	lsls	r2, r2, #2
 8005cf4:	58d3      	ldr	r3, [r2, r3]
 8005cf6:	221f      	movs	r2, #31
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	40d9      	lsrs	r1, r3
 8005cfc:	000b      	movs	r3, r1
}
 8005cfe:	0018      	movs	r0, r3
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40021000 	.word	0x40021000
 8005d08:	08006ea8 	.word	0x08006ea8

08005d0c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005d14:	2313      	movs	r3, #19
 8005d16:	18fb      	adds	r3, r7, r3
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d1c:	2312      	movs	r3, #18
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2240      	movs	r2, #64	@ 0x40
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d100      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005d2e:	e079      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d30:	2011      	movs	r0, #17
 8005d32:	183b      	adds	r3, r7, r0
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d38:	4b63      	ldr	r3, [pc, #396]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d3c:	2380      	movs	r3, #128	@ 0x80
 8005d3e:	055b      	lsls	r3, r3, #21
 8005d40:	4013      	ands	r3, r2
 8005d42:	d110      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d44:	4b60      	ldr	r3, [pc, #384]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d48:	4b5f      	ldr	r3, [pc, #380]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d4a:	2180      	movs	r1, #128	@ 0x80
 8005d4c:	0549      	lsls	r1, r1, #21
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d52:	4b5d      	ldr	r3, [pc, #372]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d56:	2380      	movs	r3, #128	@ 0x80
 8005d58:	055b      	lsls	r3, r3, #21
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d60:	183b      	adds	r3, r7, r0
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8005d66:	4b58      	ldr	r3, [pc, #352]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d6a:	23c0      	movs	r3, #192	@ 0xc0
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4013      	ands	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d019      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d014      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8005d82:	4b51      	ldr	r3, [pc, #324]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d86:	4a51      	ldr	r2, [pc, #324]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d8c:	4b4e      	ldr	r3, [pc, #312]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d90:	4b4d      	ldr	r3, [pc, #308]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d92:	2180      	movs	r1, #128	@ 0x80
 8005d94:	0249      	lsls	r1, r1, #9
 8005d96:	430a      	orrs	r2, r1
 8005d98:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005da0:	494b      	ldr	r1, [pc, #300]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005da2:	400a      	ands	r2, r1
 8005da4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8005da6:	4b48      	ldr	r3, [pc, #288]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2201      	movs	r2, #1
 8005db0:	4013      	ands	r3, r2
 8005db2:	d016      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7fe fac8 	bl	8004348 <HAL_GetTick>
 8005db8:	0003      	movs	r3, r0
 8005dba:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005dbc:	e00c      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dbe:	f7fe fac3 	bl	8004348 <HAL_GetTick>
 8005dc2:	0002      	movs	r2, r0
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	4a42      	ldr	r2, [pc, #264]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d904      	bls.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8005dce:	2313      	movs	r3, #19
 8005dd0:	18fb      	adds	r3, r7, r3
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	701a      	strb	r2, [r3, #0]
          break;
 8005dd6:	e004      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ddc:	2202      	movs	r2, #2
 8005dde:	4013      	ands	r3, r2
 8005de0:	d0ed      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8005de2:	2313      	movs	r3, #19
 8005de4:	18fb      	adds	r3, r7, r3
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dec:	4b36      	ldr	r3, [pc, #216]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df0:	4a36      	ldr	r2, [pc, #216]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	0019      	movs	r1, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	4b33      	ldr	r3, [pc, #204]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e00:	e005      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e02:	2312      	movs	r3, #18
 8005e04:	18fb      	adds	r3, r7, r3
 8005e06:	2213      	movs	r2, #19
 8005e08:	18ba      	adds	r2, r7, r2
 8005e0a:	7812      	ldrb	r2, [r2, #0]
 8005e0c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e0e:	2311      	movs	r3, #17
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d105      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e18:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e1e:	492e      	ldr	r1, [pc, #184]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e20:	400a      	ands	r2, r1
 8005e22:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d009      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e2e:	4b26      	ldr	r3, [pc, #152]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e32:	2203      	movs	r2, #3
 8005e34:	4393      	bics	r3, r2
 8005e36:	0019      	movs	r1, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	4b22      	ldr	r3, [pc, #136]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2202      	movs	r2, #2
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d009      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e50:	4a22      	ldr	r2, [pc, #136]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	0019      	movs	r1, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2220      	movs	r2, #32
 8005e66:	4013      	ands	r3, r2
 8005e68:	d008      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e6a:	4b17      	ldr	r3, [pc, #92]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	0899      	lsrs	r1, r3, #2
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695a      	ldr	r2, [r3, #20]
 8005e76:	4b14      	ldr	r3, [pc, #80]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2204      	movs	r2, #4
 8005e82:	4013      	ands	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005e86:	4b10      	ldr	r3, [pc, #64]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	0019      	movs	r1, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e96:	430a      	orrs	r2, r1
 8005e98:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2280      	movs	r2, #128	@ 0x80
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d009      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8005ea4:	4b08      	ldr	r3, [pc, #32]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	22e0      	movs	r2, #224	@ 0xe0
 8005eaa:	4393      	bics	r3, r2
 8005eac:	0019      	movs	r1, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	4b05      	ldr	r3, [pc, #20]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	601a      	str	r2, [r3, #0]
  }
  return status;
 8005eb8:	2312      	movs	r3, #18
 8005eba:	18fb      	adds	r3, r7, r3
 8005ebc:	781b      	ldrb	r3, [r3, #0]
}
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	b006      	add	sp, #24
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	46c0      	nop			@ (mov r8, r8)
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	fffffcff 	.word	0xfffffcff
 8005ed0:	fffeffff 	.word	0xfffeffff
 8005ed4:	00001388 	.word	0x00001388
 8005ed8:	efffffff 	.word	0xefffffff
 8005edc:	ffffcfff 	.word	0xffffcfff
 8005ee0:	ffff3fff 	.word	0xffff3fff

08005ee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e046      	b.n	8005f84 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2288      	movs	r2, #136	@ 0x88
 8005efa:	589b      	ldr	r3, [r3, r2]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d107      	bne.n	8005f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2284      	movs	r2, #132	@ 0x84
 8005f04:	2100      	movs	r1, #0
 8005f06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f7fe f91e 	bl	800414c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2288      	movs	r2, #136	@ 0x88
 8005f14:	2124      	movs	r1, #36	@ 0x24
 8005f16:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2101      	movs	r1, #1
 8005f24:	438a      	bics	r2, r1
 8005f26:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	0018      	movs	r0, r3
 8005f34:	f000 f9aa 	bl	800628c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f000 f828 	bl	8005f90 <UART_SetConfig>
 8005f40:	0003      	movs	r3, r0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e01c      	b.n	8005f84 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	490d      	ldr	r1, [pc, #52]	@ (8005f8c <HAL_UART_Init+0xa8>)
 8005f56:	400a      	ands	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	212a      	movs	r1, #42	@ 0x2a
 8005f66:	438a      	bics	r2, r1
 8005f68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2101      	movs	r1, #1
 8005f76:	430a      	orrs	r2, r1
 8005f78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f000 fa39 	bl	80063f4 <UART_CheckIdleState>
 8005f82:	0003      	movs	r3, r0
}
 8005f84:	0018      	movs	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b002      	add	sp, #8
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	ffffb7ff 	.word	0xffffb7ff

08005f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f98:	231e      	movs	r3, #30
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4aab      	ldr	r2, [pc, #684]	@ (800626c <UART_SetConfig+0x2dc>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	4aa6      	ldr	r2, [pc, #664]	@ (8006270 <UART_SetConfig+0x2e0>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	0019      	movs	r1, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	4a9d      	ldr	r2, [pc, #628]	@ (8006274 <UART_SetConfig+0x2e4>)
 8005ffe:	4013      	ands	r3, r2
 8006000:	0019      	movs	r1, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	430a      	orrs	r2, r1
 800600a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006012:	220f      	movs	r2, #15
 8006014:	4393      	bics	r3, r2
 8006016:	0019      	movs	r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a93      	ldr	r2, [pc, #588]	@ (8006278 <UART_SetConfig+0x2e8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d127      	bne.n	800607e <UART_SetConfig+0xee>
 800602e:	4b93      	ldr	r3, [pc, #588]	@ (800627c <UART_SetConfig+0x2ec>)
 8006030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006032:	2203      	movs	r2, #3
 8006034:	4013      	ands	r3, r2
 8006036:	2b03      	cmp	r3, #3
 8006038:	d017      	beq.n	800606a <UART_SetConfig+0xda>
 800603a:	d81b      	bhi.n	8006074 <UART_SetConfig+0xe4>
 800603c:	2b02      	cmp	r3, #2
 800603e:	d00a      	beq.n	8006056 <UART_SetConfig+0xc6>
 8006040:	d818      	bhi.n	8006074 <UART_SetConfig+0xe4>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <UART_SetConfig+0xbc>
 8006046:	2b01      	cmp	r3, #1
 8006048:	d00a      	beq.n	8006060 <UART_SetConfig+0xd0>
 800604a:	e013      	b.n	8006074 <UART_SetConfig+0xe4>
 800604c:	231f      	movs	r3, #31
 800604e:	18fb      	adds	r3, r7, r3
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	e021      	b.n	800609a <UART_SetConfig+0x10a>
 8006056:	231f      	movs	r3, #31
 8006058:	18fb      	adds	r3, r7, r3
 800605a:	2202      	movs	r2, #2
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	e01c      	b.n	800609a <UART_SetConfig+0x10a>
 8006060:	231f      	movs	r3, #31
 8006062:	18fb      	adds	r3, r7, r3
 8006064:	2204      	movs	r2, #4
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	e017      	b.n	800609a <UART_SetConfig+0x10a>
 800606a:	231f      	movs	r3, #31
 800606c:	18fb      	adds	r3, r7, r3
 800606e:	2208      	movs	r2, #8
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	e012      	b.n	800609a <UART_SetConfig+0x10a>
 8006074:	231f      	movs	r3, #31
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	2210      	movs	r2, #16
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	e00d      	b.n	800609a <UART_SetConfig+0x10a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a7f      	ldr	r2, [pc, #508]	@ (8006280 <UART_SetConfig+0x2f0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d104      	bne.n	8006092 <UART_SetConfig+0x102>
 8006088:	231f      	movs	r3, #31
 800608a:	18fb      	adds	r3, r7, r3
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e003      	b.n	800609a <UART_SetConfig+0x10a>
 8006092:	231f      	movs	r3, #31
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	2210      	movs	r2, #16
 8006098:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69da      	ldr	r2, [r3, #28]
 800609e:	2380      	movs	r3, #128	@ 0x80
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d000      	beq.n	80060a8 <UART_SetConfig+0x118>
 80060a6:	e06f      	b.n	8006188 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80060a8:	231f      	movs	r3, #31
 80060aa:	18fb      	adds	r3, r7, r3
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d01f      	beq.n	80060f2 <UART_SetConfig+0x162>
 80060b2:	dc22      	bgt.n	80060fa <UART_SetConfig+0x16a>
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d017      	beq.n	80060e8 <UART_SetConfig+0x158>
 80060b8:	dc1f      	bgt.n	80060fa <UART_SetConfig+0x16a>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <UART_SetConfig+0x134>
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d005      	beq.n	80060ce <UART_SetConfig+0x13e>
 80060c2:	e01a      	b.n	80060fa <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c4:	f7ff fe0a 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 80060c8:	0003      	movs	r3, r0
 80060ca:	61bb      	str	r3, [r7, #24]
        break;
 80060cc:	e01c      	b.n	8006108 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80060ce:	4b6b      	ldr	r3, [pc, #428]	@ (800627c <UART_SetConfig+0x2ec>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	2207      	movs	r2, #7
 80060d6:	4013      	ands	r3, r2
 80060d8:	3301      	adds	r3, #1
 80060da:	0019      	movs	r1, r3
 80060dc:	4869      	ldr	r0, [pc, #420]	@ (8006284 <UART_SetConfig+0x2f4>)
 80060de:	f7fa f813 	bl	8000108 <__udivsi3>
 80060e2:	0003      	movs	r3, r0
 80060e4:	61bb      	str	r3, [r7, #24]
        break;
 80060e6:	e00f      	b.n	8006108 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060e8:	f7ff fd98 	bl	8005c1c <HAL_RCC_GetSysClockFreq>
 80060ec:	0003      	movs	r3, r0
 80060ee:	61bb      	str	r3, [r7, #24]
        break;
 80060f0:	e00a      	b.n	8006108 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f2:	2380      	movs	r3, #128	@ 0x80
 80060f4:	021b      	lsls	r3, r3, #8
 80060f6:	61bb      	str	r3, [r7, #24]
        break;
 80060f8:	e006      	b.n	8006108 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060fe:	231e      	movs	r3, #30
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	2201      	movs	r2, #1
 8006104:	701a      	strb	r2, [r3, #0]
        break;
 8006106:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d100      	bne.n	8006110 <UART_SetConfig+0x180>
 800610e:	e097      	b.n	8006240 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006114:	4b5c      	ldr	r3, [pc, #368]	@ (8006288 <UART_SetConfig+0x2f8>)
 8006116:	0052      	lsls	r2, r2, #1
 8006118:	5ad3      	ldrh	r3, [r2, r3]
 800611a:	0019      	movs	r1, r3
 800611c:	69b8      	ldr	r0, [r7, #24]
 800611e:	f7f9 fff3 	bl	8000108 <__udivsi3>
 8006122:	0003      	movs	r3, r0
 8006124:	005a      	lsls	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	085b      	lsrs	r3, r3, #1
 800612c:	18d2      	adds	r2, r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	0019      	movs	r1, r3
 8006134:	0010      	movs	r0, r2
 8006136:	f7f9 ffe7 	bl	8000108 <__udivsi3>
 800613a:	0003      	movs	r3, r0
 800613c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	2b0f      	cmp	r3, #15
 8006142:	d91c      	bls.n	800617e <UART_SetConfig+0x1ee>
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	2380      	movs	r3, #128	@ 0x80
 8006148:	025b      	lsls	r3, r3, #9
 800614a:	429a      	cmp	r2, r3
 800614c:	d217      	bcs.n	800617e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	b29a      	uxth	r2, r3
 8006152:	200e      	movs	r0, #14
 8006154:	183b      	adds	r3, r7, r0
 8006156:	210f      	movs	r1, #15
 8006158:	438a      	bics	r2, r1
 800615a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	b29b      	uxth	r3, r3
 8006162:	2207      	movs	r2, #7
 8006164:	4013      	ands	r3, r2
 8006166:	b299      	uxth	r1, r3
 8006168:	183b      	adds	r3, r7, r0
 800616a:	183a      	adds	r2, r7, r0
 800616c:	8812      	ldrh	r2, [r2, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	183a      	adds	r2, r7, r0
 8006178:	8812      	ldrh	r2, [r2, #0]
 800617a:	60da      	str	r2, [r3, #12]
 800617c:	e060      	b.n	8006240 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800617e:	231e      	movs	r3, #30
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	2201      	movs	r2, #1
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	e05b      	b.n	8006240 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006188:	231f      	movs	r3, #31
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b08      	cmp	r3, #8
 8006190:	d01f      	beq.n	80061d2 <UART_SetConfig+0x242>
 8006192:	dc22      	bgt.n	80061da <UART_SetConfig+0x24a>
 8006194:	2b04      	cmp	r3, #4
 8006196:	d017      	beq.n	80061c8 <UART_SetConfig+0x238>
 8006198:	dc1f      	bgt.n	80061da <UART_SetConfig+0x24a>
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <UART_SetConfig+0x214>
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d005      	beq.n	80061ae <UART_SetConfig+0x21e>
 80061a2:	e01a      	b.n	80061da <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a4:	f7ff fd9a 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 80061a8:	0003      	movs	r3, r0
 80061aa:	61bb      	str	r3, [r7, #24]
        break;
 80061ac:	e01c      	b.n	80061e8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80061ae:	4b33      	ldr	r3, [pc, #204]	@ (800627c <UART_SetConfig+0x2ec>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	2207      	movs	r2, #7
 80061b6:	4013      	ands	r3, r2
 80061b8:	3301      	adds	r3, #1
 80061ba:	0019      	movs	r1, r3
 80061bc:	4831      	ldr	r0, [pc, #196]	@ (8006284 <UART_SetConfig+0x2f4>)
 80061be:	f7f9 ffa3 	bl	8000108 <__udivsi3>
 80061c2:	0003      	movs	r3, r0
 80061c4:	61bb      	str	r3, [r7, #24]
        break;
 80061c6:	e00f      	b.n	80061e8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061c8:	f7ff fd28 	bl	8005c1c <HAL_RCC_GetSysClockFreq>
 80061cc:	0003      	movs	r3, r0
 80061ce:	61bb      	str	r3, [r7, #24]
        break;
 80061d0:	e00a      	b.n	80061e8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d2:	2380      	movs	r3, #128	@ 0x80
 80061d4:	021b      	lsls	r3, r3, #8
 80061d6:	61bb      	str	r3, [r7, #24]
        break;
 80061d8:	e006      	b.n	80061e8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061de:	231e      	movs	r3, #30
 80061e0:	18fb      	adds	r3, r7, r3
 80061e2:	2201      	movs	r2, #1
 80061e4:	701a      	strb	r2, [r3, #0]
        break;
 80061e6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d028      	beq.n	8006240 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061f2:	4b25      	ldr	r3, [pc, #148]	@ (8006288 <UART_SetConfig+0x2f8>)
 80061f4:	0052      	lsls	r2, r2, #1
 80061f6:	5ad3      	ldrh	r3, [r2, r3]
 80061f8:	0019      	movs	r1, r3
 80061fa:	69b8      	ldr	r0, [r7, #24]
 80061fc:	f7f9 ff84 	bl	8000108 <__udivsi3>
 8006200:	0003      	movs	r3, r0
 8006202:	001a      	movs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	18d2      	adds	r2, r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	0019      	movs	r1, r3
 8006212:	0010      	movs	r0, r2
 8006214:	f7f9 ff78 	bl	8000108 <__udivsi3>
 8006218:	0003      	movs	r3, r0
 800621a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b0f      	cmp	r3, #15
 8006220:	d90a      	bls.n	8006238 <UART_SetConfig+0x2a8>
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	2380      	movs	r3, #128	@ 0x80
 8006226:	025b      	lsls	r3, r3, #9
 8006228:	429a      	cmp	r2, r3
 800622a:	d205      	bcs.n	8006238 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	b29a      	uxth	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	60da      	str	r2, [r3, #12]
 8006236:	e003      	b.n	8006240 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006238:	231e      	movs	r3, #30
 800623a:	18fb      	adds	r3, r7, r3
 800623c:	2201      	movs	r2, #1
 800623e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	226a      	movs	r2, #106	@ 0x6a
 8006244:	2101      	movs	r1, #1
 8006246:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2268      	movs	r2, #104	@ 0x68
 800624c:	2101      	movs	r1, #1
 800624e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800625c:	231e      	movs	r3, #30
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	781b      	ldrb	r3, [r3, #0]
}
 8006262:	0018      	movs	r0, r3
 8006264:	46bd      	mov	sp, r7
 8006266:	b008      	add	sp, #32
 8006268:	bd80      	pop	{r7, pc}
 800626a:	46c0      	nop			@ (mov r8, r8)
 800626c:	cfff69f3 	.word	0xcfff69f3
 8006270:	ffffcfff 	.word	0xffffcfff
 8006274:	11fff4ff 	.word	0x11fff4ff
 8006278:	40013800 	.word	0x40013800
 800627c:	40021000 	.word	0x40021000
 8006280:	40004400 	.word	0x40004400
 8006284:	02dc6c00 	.word	0x02dc6c00
 8006288:	08006ec8 	.word	0x08006ec8

0800628c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006298:	2208      	movs	r2, #8
 800629a:	4013      	ands	r3, r2
 800629c:	d00b      	beq.n	80062b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	4a4a      	ldr	r2, [pc, #296]	@ (80063d0 <UART_AdvFeatureConfig+0x144>)
 80062a6:	4013      	ands	r3, r2
 80062a8:	0019      	movs	r1, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ba:	2201      	movs	r2, #1
 80062bc:	4013      	ands	r3, r2
 80062be:	d00b      	beq.n	80062d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	4a43      	ldr	r2, [pc, #268]	@ (80063d4 <UART_AdvFeatureConfig+0x148>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	0019      	movs	r1, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	2202      	movs	r2, #2
 80062de:	4013      	ands	r3, r2
 80062e0:	d00b      	beq.n	80062fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4a3b      	ldr	r2, [pc, #236]	@ (80063d8 <UART_AdvFeatureConfig+0x14c>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	0019      	movs	r1, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fe:	2204      	movs	r2, #4
 8006300:	4013      	ands	r3, r2
 8006302:	d00b      	beq.n	800631c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4a34      	ldr	r2, [pc, #208]	@ (80063dc <UART_AdvFeatureConfig+0x150>)
 800630c:	4013      	ands	r3, r2
 800630e:	0019      	movs	r1, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006320:	2210      	movs	r2, #16
 8006322:	4013      	ands	r3, r2
 8006324:	d00b      	beq.n	800633e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	4a2c      	ldr	r2, [pc, #176]	@ (80063e0 <UART_AdvFeatureConfig+0x154>)
 800632e:	4013      	ands	r3, r2
 8006330:	0019      	movs	r1, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006342:	2220      	movs	r2, #32
 8006344:	4013      	ands	r3, r2
 8006346:	d00b      	beq.n	8006360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	4a25      	ldr	r2, [pc, #148]	@ (80063e4 <UART_AdvFeatureConfig+0x158>)
 8006350:	4013      	ands	r3, r2
 8006352:	0019      	movs	r1, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006364:	2240      	movs	r2, #64	@ 0x40
 8006366:	4013      	ands	r3, r2
 8006368:	d01d      	beq.n	80063a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4a1d      	ldr	r2, [pc, #116]	@ (80063e8 <UART_AdvFeatureConfig+0x15c>)
 8006372:	4013      	ands	r3, r2
 8006374:	0019      	movs	r1, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006386:	2380      	movs	r3, #128	@ 0x80
 8006388:	035b      	lsls	r3, r3, #13
 800638a:	429a      	cmp	r2, r3
 800638c:	d10b      	bne.n	80063a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	4a15      	ldr	r2, [pc, #84]	@ (80063ec <UART_AdvFeatureConfig+0x160>)
 8006396:	4013      	ands	r3, r2
 8006398:	0019      	movs	r1, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063aa:	2280      	movs	r2, #128	@ 0x80
 80063ac:	4013      	ands	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	4a0e      	ldr	r2, [pc, #56]	@ (80063f0 <UART_AdvFeatureConfig+0x164>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	0019      	movs	r1, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	605a      	str	r2, [r3, #4]
  }
}
 80063c8:	46c0      	nop			@ (mov r8, r8)
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b002      	add	sp, #8
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	ffff7fff 	.word	0xffff7fff
 80063d4:	fffdffff 	.word	0xfffdffff
 80063d8:	fffeffff 	.word	0xfffeffff
 80063dc:	fffbffff 	.word	0xfffbffff
 80063e0:	ffffefff 	.word	0xffffefff
 80063e4:	ffffdfff 	.word	0xffffdfff
 80063e8:	ffefffff 	.word	0xffefffff
 80063ec:	ff9fffff 	.word	0xff9fffff
 80063f0:	fff7ffff 	.word	0xfff7ffff

080063f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b092      	sub	sp, #72	@ 0x48
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2290      	movs	r2, #144	@ 0x90
 8006400:	2100      	movs	r1, #0
 8006402:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006404:	f7fd ffa0 	bl	8004348 <HAL_GetTick>
 8006408:	0003      	movs	r3, r0
 800640a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2208      	movs	r2, #8
 8006414:	4013      	ands	r3, r2
 8006416:	2b08      	cmp	r3, #8
 8006418:	d12d      	bne.n	8006476 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800641a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800641c:	2280      	movs	r2, #128	@ 0x80
 800641e:	0391      	lsls	r1, r2, #14
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4a47      	ldr	r2, [pc, #284]	@ (8006540 <UART_CheckIdleState+0x14c>)
 8006424:	9200      	str	r2, [sp, #0]
 8006426:	2200      	movs	r2, #0
 8006428:	f000 f88e 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 800642c:	1e03      	subs	r3, r0, #0
 800642e:	d022      	beq.n	8006476 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006430:	f3ef 8310 	mrs	r3, PRIMASK
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006438:	63bb      	str	r3, [r7, #56]	@ 0x38
 800643a:	2301      	movs	r3, #1
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	f383 8810 	msr	PRIMASK, r3
}
 8006444:	46c0      	nop			@ (mov r8, r8)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2180      	movs	r1, #128	@ 0x80
 8006452:	438a      	bics	r2, r1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800645a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645c:	f383 8810 	msr	PRIMASK, r3
}
 8006460:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2288      	movs	r2, #136	@ 0x88
 8006466:	2120      	movs	r1, #32
 8006468:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2284      	movs	r2, #132	@ 0x84
 800646e:	2100      	movs	r1, #0
 8006470:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e060      	b.n	8006538 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2204      	movs	r2, #4
 800647e:	4013      	ands	r3, r2
 8006480:	2b04      	cmp	r3, #4
 8006482:	d146      	bne.n	8006512 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006486:	2280      	movs	r2, #128	@ 0x80
 8006488:	03d1      	lsls	r1, r2, #15
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4a2c      	ldr	r2, [pc, #176]	@ (8006540 <UART_CheckIdleState+0x14c>)
 800648e:	9200      	str	r2, [sp, #0]
 8006490:	2200      	movs	r2, #0
 8006492:	f000 f859 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8006496:	1e03      	subs	r3, r0, #0
 8006498:	d03b      	beq.n	8006512 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800649a:	f3ef 8310 	mrs	r3, PRIMASK
 800649e:	60fb      	str	r3, [r7, #12]
  return(result);
 80064a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a4:	2301      	movs	r3, #1
 80064a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f383 8810 	msr	PRIMASK, r3
}
 80064ae:	46c0      	nop			@ (mov r8, r8)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4922      	ldr	r1, [pc, #136]	@ (8006544 <UART_CheckIdleState+0x150>)
 80064bc:	400a      	ands	r2, r1
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f383 8810 	msr	PRIMASK, r3
}
 80064ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80064cc:	f3ef 8310 	mrs	r3, PRIMASK
 80064d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80064d2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80064d6:	2301      	movs	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f383 8810 	msr	PRIMASK, r3
}
 80064e0:	46c0      	nop			@ (mov r8, r8)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2101      	movs	r1, #1
 80064ee:	438a      	bics	r2, r1
 80064f0:	609a      	str	r2, [r3, #8]
 80064f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	f383 8810 	msr	PRIMASK, r3
}
 80064fc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	228c      	movs	r2, #140	@ 0x8c
 8006502:	2120      	movs	r1, #32
 8006504:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2284      	movs	r2, #132	@ 0x84
 800650a:	2100      	movs	r1, #0
 800650c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e012      	b.n	8006538 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2288      	movs	r2, #136	@ 0x88
 8006516:	2120      	movs	r1, #32
 8006518:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	228c      	movs	r2, #140	@ 0x8c
 800651e:	2120      	movs	r1, #32
 8006520:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2284      	movs	r2, #132	@ 0x84
 8006532:	2100      	movs	r1, #0
 8006534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	0018      	movs	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	b010      	add	sp, #64	@ 0x40
 800653e:	bd80      	pop	{r7, pc}
 8006540:	01ffffff 	.word	0x01ffffff
 8006544:	fffffedf 	.word	0xfffffedf

08006548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	1dfb      	adds	r3, r7, #7
 8006556:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006558:	e051      	b.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	3301      	adds	r3, #1
 800655e:	d04e      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006560:	f7fd fef2 	bl	8004348 <HAL_GetTick>
 8006564:	0002      	movs	r2, r0
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	429a      	cmp	r2, r3
 800656e:	d302      	bcc.n	8006576 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e051      	b.n	800661e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2204      	movs	r2, #4
 8006582:	4013      	ands	r3, r2
 8006584:	d03b      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b80      	cmp	r3, #128	@ 0x80
 800658a:	d038      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b40      	cmp	r3, #64	@ 0x40
 8006590:	d035      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	2208      	movs	r2, #8
 800659a:	4013      	ands	r3, r2
 800659c:	2b08      	cmp	r3, #8
 800659e:	d111      	bne.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2208      	movs	r2, #8
 80065a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	0018      	movs	r0, r3
 80065ac:	f000 f83c 	bl	8006628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2290      	movs	r2, #144	@ 0x90
 80065b4:	2108      	movs	r1, #8
 80065b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2284      	movs	r2, #132	@ 0x84
 80065bc:	2100      	movs	r1, #0
 80065be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e02c      	b.n	800661e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69da      	ldr	r2, [r3, #28]
 80065ca:	2380      	movs	r3, #128	@ 0x80
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	401a      	ands	r2, r3
 80065d0:	2380      	movs	r3, #128	@ 0x80
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d112      	bne.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2280      	movs	r2, #128	@ 0x80
 80065de:	0112      	lsls	r2, r2, #4
 80065e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	0018      	movs	r0, r3
 80065e6:	f000 f81f 	bl	8006628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2290      	movs	r2, #144	@ 0x90
 80065ee:	2120      	movs	r1, #32
 80065f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2284      	movs	r2, #132	@ 0x84
 80065f6:	2100      	movs	r1, #0
 80065f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e00f      	b.n	800661e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	4013      	ands	r3, r2
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	425a      	negs	r2, r3
 800660e:	4153      	adcs	r3, r2
 8006610:	b2db      	uxtb	r3, r3
 8006612:	001a      	movs	r2, r3
 8006614:	1dfb      	adds	r3, r7, #7
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d09e      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	0018      	movs	r0, r3
 8006620:	46bd      	mov	sp, r7
 8006622:	b004      	add	sp, #16
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08e      	sub	sp, #56	@ 0x38
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006630:	f3ef 8310 	mrs	r3, PRIMASK
 8006634:	617b      	str	r3, [r7, #20]
  return(result);
 8006636:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006638:	637b      	str	r3, [r7, #52]	@ 0x34
 800663a:	2301      	movs	r3, #1
 800663c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	f383 8810 	msr	PRIMASK, r3
}
 8006644:	46c0      	nop			@ (mov r8, r8)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4926      	ldr	r1, [pc, #152]	@ (80066ec <UART_EndRxTransfer+0xc4>)
 8006652:	400a      	ands	r2, r1
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006658:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f383 8810 	msr	PRIMASK, r3
}
 8006660:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006662:	f3ef 8310 	mrs	r3, PRIMASK
 8006666:	623b      	str	r3, [r7, #32]
  return(result);
 8006668:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800666a:	633b      	str	r3, [r7, #48]	@ 0x30
 800666c:	2301      	movs	r3, #1
 800666e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006672:	f383 8810 	msr	PRIMASK, r3
}
 8006676:	46c0      	nop			@ (mov r8, r8)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	491b      	ldr	r1, [pc, #108]	@ (80066f0 <UART_EndRxTransfer+0xc8>)
 8006684:	400a      	ands	r2, r1
 8006686:	609a      	str	r2, [r3, #8]
 8006688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668e:	f383 8810 	msr	PRIMASK, r3
}
 8006692:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d118      	bne.n	80066ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800669c:	f3ef 8310 	mrs	r3, PRIMASK
 80066a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80066a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066a6:	2301      	movs	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f383 8810 	msr	PRIMASK, r3
}
 80066b0:	46c0      	nop			@ (mov r8, r8)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2110      	movs	r1, #16
 80066be:	438a      	bics	r2, r1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f383 8810 	msr	PRIMASK, r3
}
 80066cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	228c      	movs	r2, #140	@ 0x8c
 80066d2:	2120      	movs	r1, #32
 80066d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066e2:	46c0      	nop			@ (mov r8, r8)
 80066e4:	46bd      	mov	sp, r7
 80066e6:	b00e      	add	sp, #56	@ 0x38
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	46c0      	nop			@ (mov r8, r8)
 80066ec:	fffffedf 	.word	0xfffffedf
 80066f0:	effffffe 	.word	0xeffffffe

080066f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2284      	movs	r2, #132	@ 0x84
 8006700:	5c9b      	ldrb	r3, [r3, r2]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <HAL_UARTEx_DisableFifoMode+0x16>
 8006706:	2302      	movs	r3, #2
 8006708:	e027      	b.n	800675a <HAL_UARTEx_DisableFifoMode+0x66>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2284      	movs	r2, #132	@ 0x84
 800670e:	2101      	movs	r1, #1
 8006710:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2288      	movs	r2, #136	@ 0x88
 8006716:	2124      	movs	r1, #36	@ 0x24
 8006718:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2101      	movs	r1, #1
 800672e:	438a      	bics	r2, r1
 8006730:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4a0b      	ldr	r2, [pc, #44]	@ (8006764 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006736:	4013      	ands	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2288      	movs	r2, #136	@ 0x88
 800674c:	2120      	movs	r1, #32
 800674e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2284      	movs	r2, #132	@ 0x84
 8006754:	2100      	movs	r1, #0
 8006756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	0018      	movs	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	b004      	add	sp, #16
 8006760:	bd80      	pop	{r7, pc}
 8006762:	46c0      	nop			@ (mov r8, r8)
 8006764:	dfffffff 	.word	0xdfffffff

08006768 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2284      	movs	r2, #132	@ 0x84
 8006776:	5c9b      	ldrb	r3, [r3, r2]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e02e      	b.n	80067de <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2284      	movs	r2, #132	@ 0x84
 8006784:	2101      	movs	r1, #1
 8006786:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2288      	movs	r2, #136	@ 0x88
 800678c:	2124      	movs	r1, #36	@ 0x24
 800678e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2101      	movs	r1, #1
 80067a4:	438a      	bics	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	08d9      	lsrs	r1, r3, #3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	0018      	movs	r0, r3
 80067c0:	f000 f854 	bl	800686c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2288      	movs	r2, #136	@ 0x88
 80067d0:	2120      	movs	r1, #32
 80067d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2284      	movs	r2, #132	@ 0x84
 80067d8:	2100      	movs	r1, #0
 80067da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	0018      	movs	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	b004      	add	sp, #16
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2284      	movs	r2, #132	@ 0x84
 80067f6:	5c9b      	ldrb	r3, [r3, r2]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e02f      	b.n	8006860 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2284      	movs	r2, #132	@ 0x84
 8006804:	2101      	movs	r1, #1
 8006806:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2288      	movs	r2, #136	@ 0x88
 800680c:	2124      	movs	r1, #36	@ 0x24
 800680e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2101      	movs	r1, #1
 8006824:	438a      	bics	r2, r1
 8006826:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	4a0e      	ldr	r2, [pc, #56]	@ (8006868 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006830:	4013      	ands	r3, r2
 8006832:	0019      	movs	r1, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	0018      	movs	r0, r3
 8006842:	f000 f813 	bl	800686c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2288      	movs	r2, #136	@ 0x88
 8006852:	2120      	movs	r1, #32
 8006854:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2284      	movs	r2, #132	@ 0x84
 800685a:	2100      	movs	r1, #0
 800685c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	0018      	movs	r0, r3
 8006862:	46bd      	mov	sp, r7
 8006864:	b004      	add	sp, #16
 8006866:	bd80      	pop	{r7, pc}
 8006868:	f1ffffff 	.word	0xf1ffffff

0800686c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800686c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006878:	2b00      	cmp	r3, #0
 800687a:	d108      	bne.n	800688e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	226a      	movs	r2, #106	@ 0x6a
 8006880:	2101      	movs	r1, #1
 8006882:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2268      	movs	r2, #104	@ 0x68
 8006888:	2101      	movs	r1, #1
 800688a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800688c:	e043      	b.n	8006916 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800688e:	260f      	movs	r6, #15
 8006890:	19bb      	adds	r3, r7, r6
 8006892:	2208      	movs	r2, #8
 8006894:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006896:	200e      	movs	r0, #14
 8006898:	183b      	adds	r3, r7, r0
 800689a:	2208      	movs	r2, #8
 800689c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	0e5b      	lsrs	r3, r3, #25
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	240d      	movs	r4, #13
 80068aa:	193b      	adds	r3, r7, r4
 80068ac:	2107      	movs	r1, #7
 80068ae:	400a      	ands	r2, r1
 80068b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	0f5b      	lsrs	r3, r3, #29
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	250c      	movs	r5, #12
 80068be:	197b      	adds	r3, r7, r5
 80068c0:	2107      	movs	r1, #7
 80068c2:	400a      	ands	r2, r1
 80068c4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068c6:	183b      	adds	r3, r7, r0
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	197a      	adds	r2, r7, r5
 80068cc:	7812      	ldrb	r2, [r2, #0]
 80068ce:	4914      	ldr	r1, [pc, #80]	@ (8006920 <UARTEx_SetNbDataToProcess+0xb4>)
 80068d0:	5c8a      	ldrb	r2, [r1, r2]
 80068d2:	435a      	muls	r2, r3
 80068d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80068d6:	197b      	adds	r3, r7, r5
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	4a12      	ldr	r2, [pc, #72]	@ (8006924 <UARTEx_SetNbDataToProcess+0xb8>)
 80068dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068de:	0019      	movs	r1, r3
 80068e0:	f7f9 fc9c 	bl	800021c <__divsi3>
 80068e4:	0003      	movs	r3, r0
 80068e6:	b299      	uxth	r1, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	226a      	movs	r2, #106	@ 0x6a
 80068ec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068ee:	19bb      	adds	r3, r7, r6
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	193a      	adds	r2, r7, r4
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	490a      	ldr	r1, [pc, #40]	@ (8006920 <UARTEx_SetNbDataToProcess+0xb4>)
 80068f8:	5c8a      	ldrb	r2, [r1, r2]
 80068fa:	435a      	muls	r2, r3
 80068fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80068fe:	193b      	adds	r3, r7, r4
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	4a08      	ldr	r2, [pc, #32]	@ (8006924 <UARTEx_SetNbDataToProcess+0xb8>)
 8006904:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006906:	0019      	movs	r1, r3
 8006908:	f7f9 fc88 	bl	800021c <__divsi3>
 800690c:	0003      	movs	r3, r0
 800690e:	b299      	uxth	r1, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2268      	movs	r2, #104	@ 0x68
 8006914:	5299      	strh	r1, [r3, r2]
}
 8006916:	46c0      	nop			@ (mov r8, r8)
 8006918:	46bd      	mov	sp, r7
 800691a:	b005      	add	sp, #20
 800691c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800691e:	46c0      	nop			@ (mov r8, r8)
 8006920:	08006ee0 	.word	0x08006ee0
 8006924:	08006ee8 	.word	0x08006ee8

08006928 <memset>:
 8006928:	0003      	movs	r3, r0
 800692a:	1882      	adds	r2, r0, r2
 800692c:	4293      	cmp	r3, r2
 800692e:	d100      	bne.n	8006932 <memset+0xa>
 8006930:	4770      	bx	lr
 8006932:	7019      	strb	r1, [r3, #0]
 8006934:	3301      	adds	r3, #1
 8006936:	e7f9      	b.n	800692c <memset+0x4>

08006938 <__errno>:
 8006938:	4b01      	ldr	r3, [pc, #4]	@ (8006940 <__errno+0x8>)
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	4770      	bx	lr
 800693e:	46c0      	nop			@ (mov r8, r8)
 8006940:	2000000c 	.word	0x2000000c

08006944 <__libc_init_array>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	2600      	movs	r6, #0
 8006948:	4c0c      	ldr	r4, [pc, #48]	@ (800697c <__libc_init_array+0x38>)
 800694a:	4d0d      	ldr	r5, [pc, #52]	@ (8006980 <__libc_init_array+0x3c>)
 800694c:	1b64      	subs	r4, r4, r5
 800694e:	10a4      	asrs	r4, r4, #2
 8006950:	42a6      	cmp	r6, r4
 8006952:	d109      	bne.n	8006968 <__libc_init_array+0x24>
 8006954:	2600      	movs	r6, #0
 8006956:	f000 fa17 	bl	8006d88 <_init>
 800695a:	4c0a      	ldr	r4, [pc, #40]	@ (8006984 <__libc_init_array+0x40>)
 800695c:	4d0a      	ldr	r5, [pc, #40]	@ (8006988 <__libc_init_array+0x44>)
 800695e:	1b64      	subs	r4, r4, r5
 8006960:	10a4      	asrs	r4, r4, #2
 8006962:	42a6      	cmp	r6, r4
 8006964:	d105      	bne.n	8006972 <__libc_init_array+0x2e>
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	00b3      	lsls	r3, r6, #2
 800696a:	58eb      	ldr	r3, [r5, r3]
 800696c:	4798      	blx	r3
 800696e:	3601      	adds	r6, #1
 8006970:	e7ee      	b.n	8006950 <__libc_init_array+0xc>
 8006972:	00b3      	lsls	r3, r6, #2
 8006974:	58eb      	ldr	r3, [r5, r3]
 8006976:	4798      	blx	r3
 8006978:	3601      	adds	r6, #1
 800697a:	e7f2      	b.n	8006962 <__libc_init_array+0x1e>
 800697c:	08006efc 	.word	0x08006efc
 8006980:	08006efc 	.word	0x08006efc
 8006984:	08006f00 	.word	0x08006f00
 8006988:	08006efc 	.word	0x08006efc

0800698c <acosf>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	1c05      	adds	r5, r0, #0
 8006990:	f000 f824 	bl	80069dc <__ieee754_acosf>
 8006994:	1c29      	adds	r1, r5, #0
 8006996:	1c04      	adds	r4, r0, #0
 8006998:	1c28      	adds	r0, r5, #0
 800699a:	f7fa fce3 	bl	8001364 <__aeabi_fcmpun>
 800699e:	2800      	cmp	r0, #0
 80069a0:	d110      	bne.n	80069c4 <acosf+0x38>
 80069a2:	1c28      	adds	r0, r5, #0
 80069a4:	f000 f812 	bl	80069cc <fabsf>
 80069a8:	21fe      	movs	r1, #254	@ 0xfe
 80069aa:	0589      	lsls	r1, r1, #22
 80069ac:	f7f9 fd48 	bl	8000440 <__aeabi_fcmpgt>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d007      	beq.n	80069c4 <acosf+0x38>
 80069b4:	f7ff ffc0 	bl	8006938 <__errno>
 80069b8:	2321      	movs	r3, #33	@ 0x21
 80069ba:	6003      	str	r3, [r0, #0]
 80069bc:	4802      	ldr	r0, [pc, #8]	@ (80069c8 <acosf+0x3c>)
 80069be:	f000 f809 	bl	80069d4 <nanf>
 80069c2:	1c04      	adds	r4, r0, #0
 80069c4:	1c20      	adds	r0, r4, #0
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	08006ef0 	.word	0x08006ef0

080069cc <fabsf>:
 80069cc:	0040      	lsls	r0, r0, #1
 80069ce:	0840      	lsrs	r0, r0, #1
 80069d0:	4770      	bx	lr
	...

080069d4 <nanf>:
 80069d4:	4800      	ldr	r0, [pc, #0]	@ (80069d8 <nanf+0x4>)
 80069d6:	4770      	bx	lr
 80069d8:	7fc00000 	.word	0x7fc00000

080069dc <__ieee754_acosf>:
 80069dc:	21fe      	movs	r1, #254	@ 0xfe
 80069de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e0:	0043      	lsls	r3, r0, #1
 80069e2:	1c04      	adds	r4, r0, #0
 80069e4:	085b      	lsrs	r3, r3, #1
 80069e6:	0589      	lsls	r1, r1, #22
 80069e8:	428b      	cmp	r3, r1
 80069ea:	d104      	bne.n	80069f6 <__ieee754_acosf+0x1a>
 80069ec:	2000      	movs	r0, #0
 80069ee:	2c00      	cmp	r4, #0
 80069f0:	dc09      	bgt.n	8006a06 <__ieee754_acosf+0x2a>
 80069f2:	489c      	ldr	r0, [pc, #624]	@ (8006c64 <__ieee754_acosf+0x288>)
 80069f4:	e007      	b.n	8006a06 <__ieee754_acosf+0x2a>
 80069f6:	428b      	cmp	r3, r1
 80069f8:	d906      	bls.n	8006a08 <__ieee754_acosf+0x2c>
 80069fa:	1c01      	adds	r1, r0, #0
 80069fc:	f7fa fa4e 	bl	8000e9c <__aeabi_fsub>
 8006a00:	1c01      	adds	r1, r0, #0
 8006a02:	f7f9 ff23 	bl	800084c <__aeabi_fdiv>
 8006a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a08:	21fc      	movs	r1, #252	@ 0xfc
 8006a0a:	0589      	lsls	r1, r1, #22
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	d258      	bcs.n	8006ac2 <__ieee754_acosf+0xe6>
 8006a10:	228c      	movs	r2, #140	@ 0x8c
 8006a12:	0592      	lsls	r2, r2, #22
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d800      	bhi.n	8006a1a <__ieee754_acosf+0x3e>
 8006a18:	e122      	b.n	8006c60 <__ieee754_acosf+0x284>
 8006a1a:	1c01      	adds	r1, r0, #0
 8006a1c:	f7fa f8e4 	bl	8000be8 <__aeabi_fmul>
 8006a20:	4991      	ldr	r1, [pc, #580]	@ (8006c68 <__ieee754_acosf+0x28c>)
 8006a22:	1c05      	adds	r5, r0, #0
 8006a24:	f7fa f8e0 	bl	8000be8 <__aeabi_fmul>
 8006a28:	4990      	ldr	r1, [pc, #576]	@ (8006c6c <__ieee754_acosf+0x290>)
 8006a2a:	f7f9 fd1d 	bl	8000468 <__aeabi_fadd>
 8006a2e:	1c29      	adds	r1, r5, #0
 8006a30:	f7fa f8da 	bl	8000be8 <__aeabi_fmul>
 8006a34:	498e      	ldr	r1, [pc, #568]	@ (8006c70 <__ieee754_acosf+0x294>)
 8006a36:	f7fa fa31 	bl	8000e9c <__aeabi_fsub>
 8006a3a:	1c29      	adds	r1, r5, #0
 8006a3c:	f7fa f8d4 	bl	8000be8 <__aeabi_fmul>
 8006a40:	498c      	ldr	r1, [pc, #560]	@ (8006c74 <__ieee754_acosf+0x298>)
 8006a42:	f7f9 fd11 	bl	8000468 <__aeabi_fadd>
 8006a46:	1c29      	adds	r1, r5, #0
 8006a48:	f7fa f8ce 	bl	8000be8 <__aeabi_fmul>
 8006a4c:	498a      	ldr	r1, [pc, #552]	@ (8006c78 <__ieee754_acosf+0x29c>)
 8006a4e:	f7fa fa25 	bl	8000e9c <__aeabi_fsub>
 8006a52:	1c29      	adds	r1, r5, #0
 8006a54:	f7fa f8c8 	bl	8000be8 <__aeabi_fmul>
 8006a58:	4988      	ldr	r1, [pc, #544]	@ (8006c7c <__ieee754_acosf+0x2a0>)
 8006a5a:	f7f9 fd05 	bl	8000468 <__aeabi_fadd>
 8006a5e:	1c29      	adds	r1, r5, #0
 8006a60:	f7fa f8c2 	bl	8000be8 <__aeabi_fmul>
 8006a64:	4986      	ldr	r1, [pc, #536]	@ (8006c80 <__ieee754_acosf+0x2a4>)
 8006a66:	1c06      	adds	r6, r0, #0
 8006a68:	1c28      	adds	r0, r5, #0
 8006a6a:	f7fa f8bd 	bl	8000be8 <__aeabi_fmul>
 8006a6e:	4985      	ldr	r1, [pc, #532]	@ (8006c84 <__ieee754_acosf+0x2a8>)
 8006a70:	f7fa fa14 	bl	8000e9c <__aeabi_fsub>
 8006a74:	1c29      	adds	r1, r5, #0
 8006a76:	f7fa f8b7 	bl	8000be8 <__aeabi_fmul>
 8006a7a:	4983      	ldr	r1, [pc, #524]	@ (8006c88 <__ieee754_acosf+0x2ac>)
 8006a7c:	f7f9 fcf4 	bl	8000468 <__aeabi_fadd>
 8006a80:	1c29      	adds	r1, r5, #0
 8006a82:	f7fa f8b1 	bl	8000be8 <__aeabi_fmul>
 8006a86:	4981      	ldr	r1, [pc, #516]	@ (8006c8c <__ieee754_acosf+0x2b0>)
 8006a88:	f7fa fa08 	bl	8000e9c <__aeabi_fsub>
 8006a8c:	1c29      	adds	r1, r5, #0
 8006a8e:	f7fa f8ab 	bl	8000be8 <__aeabi_fmul>
 8006a92:	21fe      	movs	r1, #254	@ 0xfe
 8006a94:	0589      	lsls	r1, r1, #22
 8006a96:	f7f9 fce7 	bl	8000468 <__aeabi_fadd>
 8006a9a:	1c01      	adds	r1, r0, #0
 8006a9c:	1c30      	adds	r0, r6, #0
 8006a9e:	f7f9 fed5 	bl	800084c <__aeabi_fdiv>
 8006aa2:	1c21      	adds	r1, r4, #0
 8006aa4:	f7fa f8a0 	bl	8000be8 <__aeabi_fmul>
 8006aa8:	1c01      	adds	r1, r0, #0
 8006aaa:	4879      	ldr	r0, [pc, #484]	@ (8006c90 <__ieee754_acosf+0x2b4>)
 8006aac:	f7fa f9f6 	bl	8000e9c <__aeabi_fsub>
 8006ab0:	1c01      	adds	r1, r0, #0
 8006ab2:	1c20      	adds	r0, r4, #0
 8006ab4:	f7fa f9f2 	bl	8000e9c <__aeabi_fsub>
 8006ab8:	1c01      	adds	r1, r0, #0
 8006aba:	4876      	ldr	r0, [pc, #472]	@ (8006c94 <__ieee754_acosf+0x2b8>)
 8006abc:	f7fa f9ee 	bl	8000e9c <__aeabi_fsub>
 8006ac0:	e7a1      	b.n	8006a06 <__ieee754_acosf+0x2a>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	da5c      	bge.n	8006b80 <__ieee754_acosf+0x1a4>
 8006ac6:	21fe      	movs	r1, #254	@ 0xfe
 8006ac8:	0589      	lsls	r1, r1, #22
 8006aca:	f7f9 fccd 	bl	8000468 <__aeabi_fadd>
 8006ace:	21fc      	movs	r1, #252	@ 0xfc
 8006ad0:	0589      	lsls	r1, r1, #22
 8006ad2:	f7fa f889 	bl	8000be8 <__aeabi_fmul>
 8006ad6:	4964      	ldr	r1, [pc, #400]	@ (8006c68 <__ieee754_acosf+0x28c>)
 8006ad8:	1c04      	adds	r4, r0, #0
 8006ada:	f7fa f885 	bl	8000be8 <__aeabi_fmul>
 8006ade:	4963      	ldr	r1, [pc, #396]	@ (8006c6c <__ieee754_acosf+0x290>)
 8006ae0:	f7f9 fcc2 	bl	8000468 <__aeabi_fadd>
 8006ae4:	1c21      	adds	r1, r4, #0
 8006ae6:	f7fa f87f 	bl	8000be8 <__aeabi_fmul>
 8006aea:	4961      	ldr	r1, [pc, #388]	@ (8006c70 <__ieee754_acosf+0x294>)
 8006aec:	f7fa f9d6 	bl	8000e9c <__aeabi_fsub>
 8006af0:	1c21      	adds	r1, r4, #0
 8006af2:	f7fa f879 	bl	8000be8 <__aeabi_fmul>
 8006af6:	495f      	ldr	r1, [pc, #380]	@ (8006c74 <__ieee754_acosf+0x298>)
 8006af8:	f7f9 fcb6 	bl	8000468 <__aeabi_fadd>
 8006afc:	1c21      	adds	r1, r4, #0
 8006afe:	f7fa f873 	bl	8000be8 <__aeabi_fmul>
 8006b02:	495d      	ldr	r1, [pc, #372]	@ (8006c78 <__ieee754_acosf+0x29c>)
 8006b04:	f7fa f9ca 	bl	8000e9c <__aeabi_fsub>
 8006b08:	1c21      	adds	r1, r4, #0
 8006b0a:	f7fa f86d 	bl	8000be8 <__aeabi_fmul>
 8006b0e:	495b      	ldr	r1, [pc, #364]	@ (8006c7c <__ieee754_acosf+0x2a0>)
 8006b10:	f7f9 fcaa 	bl	8000468 <__aeabi_fadd>
 8006b14:	1c21      	adds	r1, r4, #0
 8006b16:	f7fa f867 	bl	8000be8 <__aeabi_fmul>
 8006b1a:	4959      	ldr	r1, [pc, #356]	@ (8006c80 <__ieee754_acosf+0x2a4>)
 8006b1c:	1c05      	adds	r5, r0, #0
 8006b1e:	1c20      	adds	r0, r4, #0
 8006b20:	f7fa f862 	bl	8000be8 <__aeabi_fmul>
 8006b24:	4957      	ldr	r1, [pc, #348]	@ (8006c84 <__ieee754_acosf+0x2a8>)
 8006b26:	f7fa f9b9 	bl	8000e9c <__aeabi_fsub>
 8006b2a:	1c21      	adds	r1, r4, #0
 8006b2c:	f7fa f85c 	bl	8000be8 <__aeabi_fmul>
 8006b30:	4955      	ldr	r1, [pc, #340]	@ (8006c88 <__ieee754_acosf+0x2ac>)
 8006b32:	f7f9 fc99 	bl	8000468 <__aeabi_fadd>
 8006b36:	1c21      	adds	r1, r4, #0
 8006b38:	f7fa f856 	bl	8000be8 <__aeabi_fmul>
 8006b3c:	4953      	ldr	r1, [pc, #332]	@ (8006c8c <__ieee754_acosf+0x2b0>)
 8006b3e:	f7fa f9ad 	bl	8000e9c <__aeabi_fsub>
 8006b42:	1c21      	adds	r1, r4, #0
 8006b44:	f7fa f850 	bl	8000be8 <__aeabi_fmul>
 8006b48:	21fe      	movs	r1, #254	@ 0xfe
 8006b4a:	0589      	lsls	r1, r1, #22
 8006b4c:	f7f9 fc8c 	bl	8000468 <__aeabi_fadd>
 8006b50:	1c06      	adds	r6, r0, #0
 8006b52:	1c20      	adds	r0, r4, #0
 8006b54:	f000 f8a4 	bl	8006ca0 <__ieee754_sqrtf>
 8006b58:	1c31      	adds	r1, r6, #0
 8006b5a:	1c04      	adds	r4, r0, #0
 8006b5c:	1c28      	adds	r0, r5, #0
 8006b5e:	f7f9 fe75 	bl	800084c <__aeabi_fdiv>
 8006b62:	1c21      	adds	r1, r4, #0
 8006b64:	f7fa f840 	bl	8000be8 <__aeabi_fmul>
 8006b68:	4949      	ldr	r1, [pc, #292]	@ (8006c90 <__ieee754_acosf+0x2b4>)
 8006b6a:	f7fa f997 	bl	8000e9c <__aeabi_fsub>
 8006b6e:	1c21      	adds	r1, r4, #0
 8006b70:	f7f9 fc7a 	bl	8000468 <__aeabi_fadd>
 8006b74:	1c01      	adds	r1, r0, #0
 8006b76:	f7f9 fc77 	bl	8000468 <__aeabi_fadd>
 8006b7a:	1c01      	adds	r1, r0, #0
 8006b7c:	4846      	ldr	r0, [pc, #280]	@ (8006c98 <__ieee754_acosf+0x2bc>)
 8006b7e:	e79d      	b.n	8006abc <__ieee754_acosf+0xe0>
 8006b80:	1c01      	adds	r1, r0, #0
 8006b82:	20fe      	movs	r0, #254	@ 0xfe
 8006b84:	0580      	lsls	r0, r0, #22
 8006b86:	f7fa f989 	bl	8000e9c <__aeabi_fsub>
 8006b8a:	21fc      	movs	r1, #252	@ 0xfc
 8006b8c:	0589      	lsls	r1, r1, #22
 8006b8e:	f7fa f82b 	bl	8000be8 <__aeabi_fmul>
 8006b92:	1c04      	adds	r4, r0, #0
 8006b94:	f000 f884 	bl	8006ca0 <__ieee754_sqrtf>
 8006b98:	4933      	ldr	r1, [pc, #204]	@ (8006c68 <__ieee754_acosf+0x28c>)
 8006b9a:	1c06      	adds	r6, r0, #0
 8006b9c:	0b05      	lsrs	r5, r0, #12
 8006b9e:	1c20      	adds	r0, r4, #0
 8006ba0:	f7fa f822 	bl	8000be8 <__aeabi_fmul>
 8006ba4:	4931      	ldr	r1, [pc, #196]	@ (8006c6c <__ieee754_acosf+0x290>)
 8006ba6:	f7f9 fc5f 	bl	8000468 <__aeabi_fadd>
 8006baa:	1c21      	adds	r1, r4, #0
 8006bac:	f7fa f81c 	bl	8000be8 <__aeabi_fmul>
 8006bb0:	492f      	ldr	r1, [pc, #188]	@ (8006c70 <__ieee754_acosf+0x294>)
 8006bb2:	f7fa f973 	bl	8000e9c <__aeabi_fsub>
 8006bb6:	1c21      	adds	r1, r4, #0
 8006bb8:	f7fa f816 	bl	8000be8 <__aeabi_fmul>
 8006bbc:	492d      	ldr	r1, [pc, #180]	@ (8006c74 <__ieee754_acosf+0x298>)
 8006bbe:	f7f9 fc53 	bl	8000468 <__aeabi_fadd>
 8006bc2:	1c21      	adds	r1, r4, #0
 8006bc4:	f7fa f810 	bl	8000be8 <__aeabi_fmul>
 8006bc8:	492b      	ldr	r1, [pc, #172]	@ (8006c78 <__ieee754_acosf+0x29c>)
 8006bca:	f7fa f967 	bl	8000e9c <__aeabi_fsub>
 8006bce:	1c21      	adds	r1, r4, #0
 8006bd0:	f7fa f80a 	bl	8000be8 <__aeabi_fmul>
 8006bd4:	4929      	ldr	r1, [pc, #164]	@ (8006c7c <__ieee754_acosf+0x2a0>)
 8006bd6:	f7f9 fc47 	bl	8000468 <__aeabi_fadd>
 8006bda:	1c21      	adds	r1, r4, #0
 8006bdc:	f7fa f804 	bl	8000be8 <__aeabi_fmul>
 8006be0:	4927      	ldr	r1, [pc, #156]	@ (8006c80 <__ieee754_acosf+0x2a4>)
 8006be2:	1c07      	adds	r7, r0, #0
 8006be4:	1c20      	adds	r0, r4, #0
 8006be6:	f7f9 ffff 	bl	8000be8 <__aeabi_fmul>
 8006bea:	4926      	ldr	r1, [pc, #152]	@ (8006c84 <__ieee754_acosf+0x2a8>)
 8006bec:	f7fa f956 	bl	8000e9c <__aeabi_fsub>
 8006bf0:	1c21      	adds	r1, r4, #0
 8006bf2:	f7f9 fff9 	bl	8000be8 <__aeabi_fmul>
 8006bf6:	4924      	ldr	r1, [pc, #144]	@ (8006c88 <__ieee754_acosf+0x2ac>)
 8006bf8:	f7f9 fc36 	bl	8000468 <__aeabi_fadd>
 8006bfc:	1c21      	adds	r1, r4, #0
 8006bfe:	f7f9 fff3 	bl	8000be8 <__aeabi_fmul>
 8006c02:	4922      	ldr	r1, [pc, #136]	@ (8006c8c <__ieee754_acosf+0x2b0>)
 8006c04:	f7fa f94a 	bl	8000e9c <__aeabi_fsub>
 8006c08:	1c21      	adds	r1, r4, #0
 8006c0a:	f7f9 ffed 	bl	8000be8 <__aeabi_fmul>
 8006c0e:	21fe      	movs	r1, #254	@ 0xfe
 8006c10:	0589      	lsls	r1, r1, #22
 8006c12:	f7f9 fc29 	bl	8000468 <__aeabi_fadd>
 8006c16:	1c01      	adds	r1, r0, #0
 8006c18:	1c38      	adds	r0, r7, #0
 8006c1a:	f7f9 fe17 	bl	800084c <__aeabi_fdiv>
 8006c1e:	1c31      	adds	r1, r6, #0
 8006c20:	f7f9 ffe2 	bl	8000be8 <__aeabi_fmul>
 8006c24:	032d      	lsls	r5, r5, #12
 8006c26:	1c07      	adds	r7, r0, #0
 8006c28:	1c29      	adds	r1, r5, #0
 8006c2a:	1c28      	adds	r0, r5, #0
 8006c2c:	f7f9 ffdc 	bl	8000be8 <__aeabi_fmul>
 8006c30:	1c01      	adds	r1, r0, #0
 8006c32:	1c20      	adds	r0, r4, #0
 8006c34:	f7fa f932 	bl	8000e9c <__aeabi_fsub>
 8006c38:	1c29      	adds	r1, r5, #0
 8006c3a:	1c04      	adds	r4, r0, #0
 8006c3c:	1c30      	adds	r0, r6, #0
 8006c3e:	f7f9 fc13 	bl	8000468 <__aeabi_fadd>
 8006c42:	1c01      	adds	r1, r0, #0
 8006c44:	1c20      	adds	r0, r4, #0
 8006c46:	f7f9 fe01 	bl	800084c <__aeabi_fdiv>
 8006c4a:	1c01      	adds	r1, r0, #0
 8006c4c:	1c38      	adds	r0, r7, #0
 8006c4e:	f7f9 fc0b 	bl	8000468 <__aeabi_fadd>
 8006c52:	1c29      	adds	r1, r5, #0
 8006c54:	f7f9 fc08 	bl	8000468 <__aeabi_fadd>
 8006c58:	1c01      	adds	r1, r0, #0
 8006c5a:	f7f9 fc05 	bl	8000468 <__aeabi_fadd>
 8006c5e:	e6d2      	b.n	8006a06 <__ieee754_acosf+0x2a>
 8006c60:	480e      	ldr	r0, [pc, #56]	@ (8006c9c <__ieee754_acosf+0x2c0>)
 8006c62:	e6d0      	b.n	8006a06 <__ieee754_acosf+0x2a>
 8006c64:	40490fdb 	.word	0x40490fdb
 8006c68:	3811ef08 	.word	0x3811ef08
 8006c6c:	3a4f7f04 	.word	0x3a4f7f04
 8006c70:	3d241146 	.word	0x3d241146
 8006c74:	3e4e0aa8 	.word	0x3e4e0aa8
 8006c78:	3ea6b090 	.word	0x3ea6b090
 8006c7c:	3e2aaaab 	.word	0x3e2aaaab
 8006c80:	3d9dc62e 	.word	0x3d9dc62e
 8006c84:	3f303361 	.word	0x3f303361
 8006c88:	4001572d 	.word	0x4001572d
 8006c8c:	4019d139 	.word	0x4019d139
 8006c90:	33a22168 	.word	0x33a22168
 8006c94:	3fc90fda 	.word	0x3fc90fda
 8006c98:	40490fda 	.word	0x40490fda
 8006c9c:	3fc90fdb 	.word	0x3fc90fdb

08006ca0 <__ieee754_sqrtf>:
 8006ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ca2:	21ff      	movs	r1, #255	@ 0xff
 8006ca4:	0042      	lsls	r2, r0, #1
 8006ca6:	0003      	movs	r3, r0
 8006ca8:	1c04      	adds	r4, r0, #0
 8006caa:	0852      	lsrs	r2, r2, #1
 8006cac:	05c9      	lsls	r1, r1, #23
 8006cae:	428a      	cmp	r2, r1
 8006cb0:	d309      	bcc.n	8006cc6 <__ieee754_sqrtf+0x26>
 8006cb2:	1c01      	adds	r1, r0, #0
 8006cb4:	f7f9 ff98 	bl	8000be8 <__aeabi_fmul>
 8006cb8:	1c01      	adds	r1, r0, #0
 8006cba:	1c20      	adds	r0, r4, #0
 8006cbc:	f7f9 fbd4 	bl	8000468 <__aeabi_fadd>
 8006cc0:	1c04      	adds	r4, r0, #0
 8006cc2:	1c20      	adds	r0, r4, #0
 8006cc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cc6:	2a00      	cmp	r2, #0
 8006cc8:	d0fb      	beq.n	8006cc2 <__ieee754_sqrtf+0x22>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	da06      	bge.n	8006cdc <__ieee754_sqrtf+0x3c>
 8006cce:	1c01      	adds	r1, r0, #0
 8006cd0:	f7fa f8e4 	bl	8000e9c <__aeabi_fsub>
 8006cd4:	1c01      	adds	r1, r0, #0
 8006cd6:	f7f9 fdb9 	bl	800084c <__aeabi_fdiv>
 8006cda:	e7f1      	b.n	8006cc0 <__ieee754_sqrtf+0x20>
 8006cdc:	0002      	movs	r2, r0
 8006cde:	400a      	ands	r2, r1
 8006ce0:	4208      	tst	r0, r1
 8006ce2:	d040      	beq.n	8006d66 <__ieee754_sqrtf+0xc6>
 8006ce4:	15c1      	asrs	r1, r0, #23
 8006ce6:	2280      	movs	r2, #128	@ 0x80
 8006ce8:	000f      	movs	r7, r1
 8006cea:	025b      	lsls	r3, r3, #9
 8006cec:	0a5b      	lsrs	r3, r3, #9
 8006cee:	0412      	lsls	r2, r2, #16
 8006cf0:	3f7f      	subs	r7, #127	@ 0x7f
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	07c9      	lsls	r1, r1, #31
 8006cf6:	d400      	bmi.n	8006cfa <__ieee754_sqrtf+0x5a>
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	2400      	movs	r4, #0
 8006cfc:	2180      	movs	r1, #128	@ 0x80
 8006cfe:	2019      	movs	r0, #25
 8006d00:	0026      	movs	r6, r4
 8006d02:	107f      	asrs	r7, r7, #1
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	0449      	lsls	r1, r1, #17
 8006d08:	1875      	adds	r5, r6, r1
 8006d0a:	001a      	movs	r2, r3
 8006d0c:	429d      	cmp	r5, r3
 8006d0e:	dc02      	bgt.n	8006d16 <__ieee754_sqrtf+0x76>
 8006d10:	186e      	adds	r6, r5, r1
 8006d12:	1b5a      	subs	r2, r3, r5
 8006d14:	1864      	adds	r4, r4, r1
 8006d16:	3801      	subs	r0, #1
 8006d18:	0053      	lsls	r3, r2, #1
 8006d1a:	0849      	lsrs	r1, r1, #1
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d1f3      	bne.n	8006d08 <__ieee754_sqrtf+0x68>
 8006d20:	2a00      	cmp	r2, #0
 8006d22:	d019      	beq.n	8006d58 <__ieee754_sqrtf+0xb8>
 8006d24:	4d16      	ldr	r5, [pc, #88]	@ (8006d80 <__ieee754_sqrtf+0xe0>)
 8006d26:	4e17      	ldr	r6, [pc, #92]	@ (8006d84 <__ieee754_sqrtf+0xe4>)
 8006d28:	6828      	ldr	r0, [r5, #0]
 8006d2a:	6831      	ldr	r1, [r6, #0]
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	f7fa f8b4 	bl	8000e9c <__aeabi_fsub>
 8006d34:	1c01      	adds	r1, r0, #0
 8006d36:	9801      	ldr	r0, [sp, #4]
 8006d38:	f7f9 fb78 	bl	800042c <__aeabi_fcmple>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d00b      	beq.n	8006d58 <__ieee754_sqrtf+0xb8>
 8006d40:	6828      	ldr	r0, [r5, #0]
 8006d42:	6831      	ldr	r1, [r6, #0]
 8006d44:	f7f9 fb90 	bl	8000468 <__aeabi_fadd>
 8006d48:	682d      	ldr	r5, [r5, #0]
 8006d4a:	1c01      	adds	r1, r0, #0
 8006d4c:	1c28      	adds	r0, r5, #0
 8006d4e:	f7f9 fb63 	bl	8000418 <__aeabi_fcmplt>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d010      	beq.n	8006d78 <__ieee754_sqrtf+0xd8>
 8006d56:	3402      	adds	r4, #2
 8006d58:	23fc      	movs	r3, #252	@ 0xfc
 8006d5a:	1064      	asrs	r4, r4, #1
 8006d5c:	059b      	lsls	r3, r3, #22
 8006d5e:	18e3      	adds	r3, r4, r3
 8006d60:	05fc      	lsls	r4, r7, #23
 8006d62:	18e4      	adds	r4, r4, r3
 8006d64:	e7ad      	b.n	8006cc2 <__ieee754_sqrtf+0x22>
 8006d66:	2080      	movs	r0, #128	@ 0x80
 8006d68:	0400      	lsls	r0, r0, #16
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	0011      	movs	r1, r2
 8006d6e:	3201      	adds	r2, #1
 8006d70:	4203      	tst	r3, r0
 8006d72:	d0fa      	beq.n	8006d6a <__ieee754_sqrtf+0xca>
 8006d74:	4249      	negs	r1, r1
 8006d76:	e7b6      	b.n	8006ce6 <__ieee754_sqrtf+0x46>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	3401      	adds	r4, #1
 8006d7c:	439c      	bics	r4, r3
 8006d7e:	e7eb      	b.n	8006d58 <__ieee754_sqrtf+0xb8>
 8006d80:	08006ef8 	.word	0x08006ef8
 8006d84:	08006ef4 	.word	0x08006ef4

08006d88 <_init>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8e:	bc08      	pop	{r3}
 8006d90:	469e      	mov	lr, r3
 8006d92:	4770      	bx	lr

08006d94 <_fini>:
 8006d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d96:	46c0      	nop			@ (mov r8, r8)
 8006d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9a:	bc08      	pop	{r3}
 8006d9c:	469e      	mov	lr, r3
 8006d9e:	4770      	bx	lr
